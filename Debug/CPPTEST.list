
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e710  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f08  0801e8c0  0801e8c0  0002e8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f7c8  0801f7c8  000302ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801f7c8  0801f7c8  0002f7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f7d0  0801f7d0  000302ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801f7d0  0801f7d0  0002f7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f7d8  0801f7d8  0002f7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  0801f7dc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000097b0  200002f0  0801fac8  000302f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009aa0  0801fac8  00039aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003bbff  00000000  00000000  0003031c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000709a  00000000  00000000  0006bf1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000029d8  00000000  00000000  00072fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000026b0  00000000  00000000  00075990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031d3e  00000000  00000000  00078040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026f91  00000000  00000000  000a9d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd19a  00000000  00000000  000d0d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cdea9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c7e0  00000000  00000000  001cdf24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002f0 	.word	0x200002f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801e8a8 	.word	0x0801e8a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002f4 	.word	0x200002f4
 80001ec:	0801e8a8 	.word	0x0801e8a8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_frsub>:
 8000ca8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	e002      	b.n	8000cb4 <__addsf3>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fsub>:
 8000cb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cb4 <__addsf3>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	bf1f      	itttt	ne
 8000cb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cbc:	ea92 0f03 	teqne	r2, r3
 8000cc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc8:	d06a      	beq.n	8000da0 <__addsf3+0xec>
 8000cca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cd2:	bfc1      	itttt	gt
 8000cd4:	18d2      	addgt	r2, r2, r3
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	4048      	eorgt	r0, r1
 8000cda:	4041      	eorgt	r1, r0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	2b19      	cmp	r3, #25
 8000ce2:	bf88      	it	hi
 8000ce4:	4770      	bxhi	lr
 8000ce6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4240      	negne	r0, r0
 8000cf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4249      	negne	r1, r1
 8000d06:	ea92 0f03 	teq	r2, r3
 8000d0a:	d03f      	beq.n	8000d8c <__addsf3+0xd8>
 8000d0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d10:	fa41 fc03 	asr.w	ip, r1, r3
 8000d14:	eb10 000c 	adds.w	r0, r0, ip
 8000d18:	f1c3 0320 	rsb	r3, r3, #32
 8000d1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__addsf3+0x78>
 8000d26:	4249      	negs	r1, r1
 8000d28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d30:	d313      	bcc.n	8000d5a <__addsf3+0xa6>
 8000d32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d36:	d306      	bcc.n	8000d46 <__addsf3+0x92>
 8000d38:	0840      	lsrs	r0, r0, #1
 8000d3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3e:	f102 0201 	add.w	r2, r2, #1
 8000d42:	2afe      	cmp	r2, #254	; 0xfe
 8000d44:	d251      	bcs.n	8000dea <__addsf3+0x136>
 8000d46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4e:	bf08      	it	eq
 8000d50:	f020 0001 	biceq.w	r0, r0, #1
 8000d54:	ea40 0003 	orr.w	r0, r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	eb40 0000 	adc.w	r0, r0, r0
 8000d60:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d64:	f1a2 0201 	sub.w	r2, r2, #1
 8000d68:	d1ed      	bne.n	8000d46 <__addsf3+0x92>
 8000d6a:	fab0 fc80 	clz	ip, r0
 8000d6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d72:	ebb2 020c 	subs.w	r2, r2, ip
 8000d76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d7a:	bfaa      	itet	ge
 8000d7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d80:	4252      	neglt	r2, r2
 8000d82:	4318      	orrge	r0, r3
 8000d84:	bfbc      	itt	lt
 8000d86:	40d0      	lsrlt	r0, r2
 8000d88:	4318      	orrlt	r0, r3
 8000d8a:	4770      	bx	lr
 8000d8c:	f092 0f00 	teq	r2, #0
 8000d90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d94:	bf06      	itte	eq
 8000d96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d9a:	3201      	addeq	r2, #1
 8000d9c:	3b01      	subne	r3, #1
 8000d9e:	e7b5      	b.n	8000d0c <__addsf3+0x58>
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d021      	beq.n	8000df4 <__addsf3+0x140>
 8000db0:	ea92 0f03 	teq	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__addsf3+0x10c>
 8000db6:	f092 0f00 	teq	r2, #0
 8000dba:	bf08      	it	eq
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	4770      	bx	lr
 8000dc0:	ea90 0f01 	teq	r0, r1
 8000dc4:	bf1c      	itt	ne
 8000dc6:	2000      	movne	r0, #0
 8000dc8:	4770      	bxne	lr
 8000dca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dce:	d104      	bne.n	8000dda <__addsf3+0x126>
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	bf28      	it	cs
 8000dd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	4770      	bx	lr
 8000dda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dde:	bf3c      	itt	cc
 8000de0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bxcc	lr
 8000de6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df2:	4770      	bx	lr
 8000df4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df8:	bf16      	itet	ne
 8000dfa:	4608      	movne	r0, r1
 8000dfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e00:	4601      	movne	r1, r0
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	bf06      	itte	eq
 8000e06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e0a:	ea90 0f01 	teqeq	r0, r1
 8000e0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_ui2f>:
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e004      	b.n	8000e24 <__aeabi_i2f+0x8>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_i2f>:
 8000e1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e20:	bf48      	it	mi
 8000e22:	4240      	negmi	r0, r0
 8000e24:	ea5f 0c00 	movs.w	ip, r0
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e30:	4601      	mov	r1, r0
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	e01c      	b.n	8000e72 <__aeabi_l2f+0x2a>

08000e38 <__aeabi_ul2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e00a      	b.n	8000e5c <__aeabi_l2f+0x14>
 8000e46:	bf00      	nop

08000e48 <__aeabi_l2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e54:	d502      	bpl.n	8000e5c <__aeabi_l2f+0x14>
 8000e56:	4240      	negs	r0, r0
 8000e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e5c:	ea5f 0c01 	movs.w	ip, r1
 8000e60:	bf02      	ittt	eq
 8000e62:	4684      	moveq	ip, r0
 8000e64:	4601      	moveq	r1, r0
 8000e66:	2000      	moveq	r0, #0
 8000e68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e6c:	bf08      	it	eq
 8000e6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e76:	fabc f28c 	clz	r2, ip
 8000e7a:	3a08      	subs	r2, #8
 8000e7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e80:	db10      	blt.n	8000ea4 <__aeabi_l2f+0x5c>
 8000e82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e86:	4463      	add	r3, ip
 8000e88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e94:	fa20 f202 	lsr.w	r2, r0, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f102 0220 	add.w	r2, r2, #32
 8000ea8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_ldivmod>:
 8000ec4:	b97b      	cbnz	r3, 8000ee6 <__aeabi_ldivmod+0x22>
 8000ec6:	b972      	cbnz	r2, 8000ee6 <__aeabi_ldivmod+0x22>
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	bfbe      	ittt	lt
 8000ecc:	2000      	movlt	r0, #0
 8000ece:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ed2:	e006      	blt.n	8000ee2 <__aeabi_ldivmod+0x1e>
 8000ed4:	bf08      	it	eq
 8000ed6:	2800      	cmpeq	r0, #0
 8000ed8:	bf1c      	itt	ne
 8000eda:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ede:	f04f 30ff 	movne.w	r0, #4294967295
 8000ee2:	f000 b9bd 	b.w	8001260 <__aeabi_idiv0>
 8000ee6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eea:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eee:	2900      	cmp	r1, #0
 8000ef0:	db09      	blt.n	8000f06 <__aeabi_ldivmod+0x42>
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db1a      	blt.n	8000f2c <__aeabi_ldivmod+0x68>
 8000ef6:	f000 f84d 	bl	8000f94 <__udivmoddi4>
 8000efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f02:	b004      	add	sp, #16
 8000f04:	4770      	bx	lr
 8000f06:	4240      	negs	r0, r0
 8000f08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db1b      	blt.n	8000f48 <__aeabi_ldivmod+0x84>
 8000f10:	f000 f840 	bl	8000f94 <__udivmoddi4>
 8000f14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1c:	b004      	add	sp, #16
 8000f1e:	4240      	negs	r0, r0
 8000f20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f24:	4252      	negs	r2, r2
 8000f26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2a:	4770      	bx	lr
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f32:	f000 f82f 	bl	8000f94 <__udivmoddi4>
 8000f36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3e:	b004      	add	sp, #16
 8000f40:	4240      	negs	r0, r0
 8000f42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f46:	4770      	bx	lr
 8000f48:	4252      	negs	r2, r2
 8000f4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4e:	f000 f821 	bl	8000f94 <__udivmoddi4>
 8000f52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5a:	b004      	add	sp, #16
 8000f5c:	4252      	negs	r2, r2
 8000f5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_uldivmod>:
 8000f64:	b953      	cbnz	r3, 8000f7c <__aeabi_uldivmod+0x18>
 8000f66:	b94a      	cbnz	r2, 8000f7c <__aeabi_uldivmod+0x18>
 8000f68:	2900      	cmp	r1, #0
 8000f6a:	bf08      	it	eq
 8000f6c:	2800      	cmpeq	r0, #0
 8000f6e:	bf1c      	itt	ne
 8000f70:	f04f 31ff 	movne.w	r1, #4294967295
 8000f74:	f04f 30ff 	movne.w	r0, #4294967295
 8000f78:	f000 b972 	b.w	8001260 <__aeabi_idiv0>
 8000f7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f84:	f000 f806 	bl	8000f94 <__udivmoddi4>
 8000f88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f90:	b004      	add	sp, #16
 8000f92:	4770      	bx	lr

08000f94 <__udivmoddi4>:
 8000f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f98:	9e08      	ldr	r6, [sp, #32]
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4688      	mov	r8, r1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d14b      	bne.n	800103a <__udivmoddi4+0xa6>
 8000fa2:	428a      	cmp	r2, r1
 8000fa4:	4615      	mov	r5, r2
 8000fa6:	d967      	bls.n	8001078 <__udivmoddi4+0xe4>
 8000fa8:	fab2 f282 	clz	r2, r2
 8000fac:	b14a      	cbz	r2, 8000fc2 <__udivmoddi4+0x2e>
 8000fae:	f1c2 0720 	rsb	r7, r2, #32
 8000fb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000fb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000fba:	4095      	lsls	r5, r2
 8000fbc:	ea47 0803 	orr.w	r8, r7, r3
 8000fc0:	4094      	lsls	r4, r2
 8000fc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fc6:	0c23      	lsrs	r3, r4, #16
 8000fc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000fcc:	fa1f fc85 	uxth.w	ip, r5
 8000fd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000fd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000fdc:	4299      	cmp	r1, r3
 8000fde:	d909      	bls.n	8000ff4 <__udivmoddi4+0x60>
 8000fe0:	18eb      	adds	r3, r5, r3
 8000fe2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000fe6:	f080 811b 	bcs.w	8001220 <__udivmoddi4+0x28c>
 8000fea:	4299      	cmp	r1, r3
 8000fec:	f240 8118 	bls.w	8001220 <__udivmoddi4+0x28c>
 8000ff0:	3f02      	subs	r7, #2
 8000ff2:	442b      	add	r3, r5
 8000ff4:	1a5b      	subs	r3, r3, r1
 8000ff6:	b2a4      	uxth	r4, r4
 8000ff8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ffc:	fb0e 3310 	mls	r3, lr, r0, r3
 8001000:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001004:	fb00 fc0c 	mul.w	ip, r0, ip
 8001008:	45a4      	cmp	ip, r4
 800100a:	d909      	bls.n	8001020 <__udivmoddi4+0x8c>
 800100c:	192c      	adds	r4, r5, r4
 800100e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001012:	f080 8107 	bcs.w	8001224 <__udivmoddi4+0x290>
 8001016:	45a4      	cmp	ip, r4
 8001018:	f240 8104 	bls.w	8001224 <__udivmoddi4+0x290>
 800101c:	3802      	subs	r0, #2
 800101e:	442c      	add	r4, r5
 8001020:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001024:	eba4 040c 	sub.w	r4, r4, ip
 8001028:	2700      	movs	r7, #0
 800102a:	b11e      	cbz	r6, 8001034 <__udivmoddi4+0xa0>
 800102c:	40d4      	lsrs	r4, r2
 800102e:	2300      	movs	r3, #0
 8001030:	e9c6 4300 	strd	r4, r3, [r6]
 8001034:	4639      	mov	r1, r7
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	428b      	cmp	r3, r1
 800103c:	d909      	bls.n	8001052 <__udivmoddi4+0xbe>
 800103e:	2e00      	cmp	r6, #0
 8001040:	f000 80eb 	beq.w	800121a <__udivmoddi4+0x286>
 8001044:	2700      	movs	r7, #0
 8001046:	e9c6 0100 	strd	r0, r1, [r6]
 800104a:	4638      	mov	r0, r7
 800104c:	4639      	mov	r1, r7
 800104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001052:	fab3 f783 	clz	r7, r3
 8001056:	2f00      	cmp	r7, #0
 8001058:	d147      	bne.n	80010ea <__udivmoddi4+0x156>
 800105a:	428b      	cmp	r3, r1
 800105c:	d302      	bcc.n	8001064 <__udivmoddi4+0xd0>
 800105e:	4282      	cmp	r2, r0
 8001060:	f200 80fa 	bhi.w	8001258 <__udivmoddi4+0x2c4>
 8001064:	1a84      	subs	r4, r0, r2
 8001066:	eb61 0303 	sbc.w	r3, r1, r3
 800106a:	2001      	movs	r0, #1
 800106c:	4698      	mov	r8, r3
 800106e:	2e00      	cmp	r6, #0
 8001070:	d0e0      	beq.n	8001034 <__udivmoddi4+0xa0>
 8001072:	e9c6 4800 	strd	r4, r8, [r6]
 8001076:	e7dd      	b.n	8001034 <__udivmoddi4+0xa0>
 8001078:	b902      	cbnz	r2, 800107c <__udivmoddi4+0xe8>
 800107a:	deff      	udf	#255	; 0xff
 800107c:	fab2 f282 	clz	r2, r2
 8001080:	2a00      	cmp	r2, #0
 8001082:	f040 808f 	bne.w	80011a4 <__udivmoddi4+0x210>
 8001086:	1b49      	subs	r1, r1, r5
 8001088:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800108c:	fa1f f885 	uxth.w	r8, r5
 8001090:	2701      	movs	r7, #1
 8001092:	fbb1 fcfe 	udiv	ip, r1, lr
 8001096:	0c23      	lsrs	r3, r4, #16
 8001098:	fb0e 111c 	mls	r1, lr, ip, r1
 800109c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010a0:	fb08 f10c 	mul.w	r1, r8, ip
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d907      	bls.n	80010b8 <__udivmoddi4+0x124>
 80010a8:	18eb      	adds	r3, r5, r3
 80010aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80010ae:	d202      	bcs.n	80010b6 <__udivmoddi4+0x122>
 80010b0:	4299      	cmp	r1, r3
 80010b2:	f200 80cd 	bhi.w	8001250 <__udivmoddi4+0x2bc>
 80010b6:	4684      	mov	ip, r0
 80010b8:	1a59      	subs	r1, r3, r1
 80010ba:	b2a3      	uxth	r3, r4
 80010bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80010c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80010c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80010c8:	fb08 f800 	mul.w	r8, r8, r0
 80010cc:	45a0      	cmp	r8, r4
 80010ce:	d907      	bls.n	80010e0 <__udivmoddi4+0x14c>
 80010d0:	192c      	adds	r4, r5, r4
 80010d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80010d6:	d202      	bcs.n	80010de <__udivmoddi4+0x14a>
 80010d8:	45a0      	cmp	r8, r4
 80010da:	f200 80b6 	bhi.w	800124a <__udivmoddi4+0x2b6>
 80010de:	4618      	mov	r0, r3
 80010e0:	eba4 0408 	sub.w	r4, r4, r8
 80010e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010e8:	e79f      	b.n	800102a <__udivmoddi4+0x96>
 80010ea:	f1c7 0c20 	rsb	ip, r7, #32
 80010ee:	40bb      	lsls	r3, r7
 80010f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80010f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80010f8:	fa01 f407 	lsl.w	r4, r1, r7
 80010fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8001100:	fa21 f30c 	lsr.w	r3, r1, ip
 8001104:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001108:	4325      	orrs	r5, r4
 800110a:	fbb3 f9f8 	udiv	r9, r3, r8
 800110e:	0c2c      	lsrs	r4, r5, #16
 8001110:	fb08 3319 	mls	r3, r8, r9, r3
 8001114:	fa1f fa8e 	uxth.w	sl, lr
 8001118:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800111c:	fb09 f40a 	mul.w	r4, r9, sl
 8001120:	429c      	cmp	r4, r3
 8001122:	fa02 f207 	lsl.w	r2, r2, r7
 8001126:	fa00 f107 	lsl.w	r1, r0, r7
 800112a:	d90b      	bls.n	8001144 <__udivmoddi4+0x1b0>
 800112c:	eb1e 0303 	adds.w	r3, lr, r3
 8001130:	f109 30ff 	add.w	r0, r9, #4294967295
 8001134:	f080 8087 	bcs.w	8001246 <__udivmoddi4+0x2b2>
 8001138:	429c      	cmp	r4, r3
 800113a:	f240 8084 	bls.w	8001246 <__udivmoddi4+0x2b2>
 800113e:	f1a9 0902 	sub.w	r9, r9, #2
 8001142:	4473      	add	r3, lr
 8001144:	1b1b      	subs	r3, r3, r4
 8001146:	b2ad      	uxth	r5, r5
 8001148:	fbb3 f0f8 	udiv	r0, r3, r8
 800114c:	fb08 3310 	mls	r3, r8, r0, r3
 8001150:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001154:	fb00 fa0a 	mul.w	sl, r0, sl
 8001158:	45a2      	cmp	sl, r4
 800115a:	d908      	bls.n	800116e <__udivmoddi4+0x1da>
 800115c:	eb1e 0404 	adds.w	r4, lr, r4
 8001160:	f100 33ff 	add.w	r3, r0, #4294967295
 8001164:	d26b      	bcs.n	800123e <__udivmoddi4+0x2aa>
 8001166:	45a2      	cmp	sl, r4
 8001168:	d969      	bls.n	800123e <__udivmoddi4+0x2aa>
 800116a:	3802      	subs	r0, #2
 800116c:	4474      	add	r4, lr
 800116e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001172:	fba0 8902 	umull	r8, r9, r0, r2
 8001176:	eba4 040a 	sub.w	r4, r4, sl
 800117a:	454c      	cmp	r4, r9
 800117c:	46c2      	mov	sl, r8
 800117e:	464b      	mov	r3, r9
 8001180:	d354      	bcc.n	800122c <__udivmoddi4+0x298>
 8001182:	d051      	beq.n	8001228 <__udivmoddi4+0x294>
 8001184:	2e00      	cmp	r6, #0
 8001186:	d069      	beq.n	800125c <__udivmoddi4+0x2c8>
 8001188:	ebb1 050a 	subs.w	r5, r1, sl
 800118c:	eb64 0403 	sbc.w	r4, r4, r3
 8001190:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001194:	40fd      	lsrs	r5, r7
 8001196:	40fc      	lsrs	r4, r7
 8001198:	ea4c 0505 	orr.w	r5, ip, r5
 800119c:	e9c6 5400 	strd	r5, r4, [r6]
 80011a0:	2700      	movs	r7, #0
 80011a2:	e747      	b.n	8001034 <__udivmoddi4+0xa0>
 80011a4:	f1c2 0320 	rsb	r3, r2, #32
 80011a8:	fa20 f703 	lsr.w	r7, r0, r3
 80011ac:	4095      	lsls	r5, r2
 80011ae:	fa01 f002 	lsl.w	r0, r1, r2
 80011b2:	fa21 f303 	lsr.w	r3, r1, r3
 80011b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ba:	4338      	orrs	r0, r7
 80011bc:	0c01      	lsrs	r1, r0, #16
 80011be:	fbb3 f7fe 	udiv	r7, r3, lr
 80011c2:	fa1f f885 	uxth.w	r8, r5
 80011c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80011ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011ce:	fb07 f308 	mul.w	r3, r7, r8
 80011d2:	428b      	cmp	r3, r1
 80011d4:	fa04 f402 	lsl.w	r4, r4, r2
 80011d8:	d907      	bls.n	80011ea <__udivmoddi4+0x256>
 80011da:	1869      	adds	r1, r5, r1
 80011dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80011e0:	d22f      	bcs.n	8001242 <__udivmoddi4+0x2ae>
 80011e2:	428b      	cmp	r3, r1
 80011e4:	d92d      	bls.n	8001242 <__udivmoddi4+0x2ae>
 80011e6:	3f02      	subs	r7, #2
 80011e8:	4429      	add	r1, r5
 80011ea:	1acb      	subs	r3, r1, r3
 80011ec:	b281      	uxth	r1, r0
 80011ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80011f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80011f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011fa:	fb00 f308 	mul.w	r3, r0, r8
 80011fe:	428b      	cmp	r3, r1
 8001200:	d907      	bls.n	8001212 <__udivmoddi4+0x27e>
 8001202:	1869      	adds	r1, r5, r1
 8001204:	f100 3cff 	add.w	ip, r0, #4294967295
 8001208:	d217      	bcs.n	800123a <__udivmoddi4+0x2a6>
 800120a:	428b      	cmp	r3, r1
 800120c:	d915      	bls.n	800123a <__udivmoddi4+0x2a6>
 800120e:	3802      	subs	r0, #2
 8001210:	4429      	add	r1, r5
 8001212:	1ac9      	subs	r1, r1, r3
 8001214:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001218:	e73b      	b.n	8001092 <__udivmoddi4+0xfe>
 800121a:	4637      	mov	r7, r6
 800121c:	4630      	mov	r0, r6
 800121e:	e709      	b.n	8001034 <__udivmoddi4+0xa0>
 8001220:	4607      	mov	r7, r0
 8001222:	e6e7      	b.n	8000ff4 <__udivmoddi4+0x60>
 8001224:	4618      	mov	r0, r3
 8001226:	e6fb      	b.n	8001020 <__udivmoddi4+0x8c>
 8001228:	4541      	cmp	r1, r8
 800122a:	d2ab      	bcs.n	8001184 <__udivmoddi4+0x1f0>
 800122c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001230:	eb69 020e 	sbc.w	r2, r9, lr
 8001234:	3801      	subs	r0, #1
 8001236:	4613      	mov	r3, r2
 8001238:	e7a4      	b.n	8001184 <__udivmoddi4+0x1f0>
 800123a:	4660      	mov	r0, ip
 800123c:	e7e9      	b.n	8001212 <__udivmoddi4+0x27e>
 800123e:	4618      	mov	r0, r3
 8001240:	e795      	b.n	800116e <__udivmoddi4+0x1da>
 8001242:	4667      	mov	r7, ip
 8001244:	e7d1      	b.n	80011ea <__udivmoddi4+0x256>
 8001246:	4681      	mov	r9, r0
 8001248:	e77c      	b.n	8001144 <__udivmoddi4+0x1b0>
 800124a:	3802      	subs	r0, #2
 800124c:	442c      	add	r4, r5
 800124e:	e747      	b.n	80010e0 <__udivmoddi4+0x14c>
 8001250:	f1ac 0c02 	sub.w	ip, ip, #2
 8001254:	442b      	add	r3, r5
 8001256:	e72f      	b.n	80010b8 <__udivmoddi4+0x124>
 8001258:	4638      	mov	r0, r7
 800125a:	e708      	b.n	800106e <__udivmoddi4+0xda>
 800125c:	4637      	mov	r7, r6
 800125e:	e6e9      	b.n	8001034 <__udivmoddi4+0xa0>

08001260 <__aeabi_idiv0>:
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <IST8310>:
#define IST8310_MAX_VAL_XY ((1600 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_XY (-IST8310_MAX_VAL_XY)
#define IST8310_MAX_VAL_Z ((2500 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_Z (-IST8310_MAX_VAL_Z)

void IST8310(I2C_HandleTypeDef *hi2c){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	IST8310_I2C = hi2c;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <IST8310+0x24>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
	IST8310_reset();
 8001272:	f000 f915 	bl	80014a0 <IST8310_reset>
	IST8310_write_reg(IST8310_ADDR_CTRL1, IST8310_CTRL1_MODE_CONT_200HZ);
 8001276:	210b      	movs	r1, #11
 8001278:	200a      	movs	r0, #10
 800127a:	f000 f8ff 	bl	800147c <IST8310_write_reg>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000838 	.word	0x20000838

0800128c <IST8310_updataIT>:

/*
 *  150hz gogo
 */
void IST8310_updataIT(){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af02      	add	r7, sp, #8
	while(1){
		if(bm_i2cFlag == bm_i2cIdle){
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <IST8310_updataIT+0x38>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10e      	bne.n	80012b8 <IST8310_updataIT+0x2c>
			HAL_I2C_Mem_Read_IT(IST8310_I2C, IST8310_BUS_I2C_ADDR, IST8310_ADDR_DATA_OUT_X_LSB, 1, (uint8_t*)&ist8310.buf, sizeof(ist8310.buf));
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <IST8310_updataIT+0x3c>)
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	2306      	movs	r3, #6
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <IST8310_updataIT+0x40>)
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	211c      	movs	r1, #28
 80012ac:	f009 ffa6 	bl	800b1fc <HAL_I2C_Mem_Read_IT>
			bm_i2cFlag = bm_i2cIST8310;
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <IST8310_updataIT+0x38>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	701a      	strb	r2, [r3, #0]
			return;
 80012b6:	e003      	b.n	80012c0 <IST8310_updataIT+0x34>
		}
		else osDelay(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f014 fb69 	bl	8015990 <osDelay>
		if(bm_i2cFlag == bm_i2cIdle){
 80012be:	e7e8      	b.n	8001292 <IST8310_updataIT+0x6>
	}
}
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000854 	.word	0x20000854
 80012c8:	20000838 	.word	0x20000838
 80012cc:	2000083c 	.word	0x2000083c

080012d0 <IST8310_i2cRxCpltCallback>:
void IST8310_i2cRxCpltCallback(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cIST8310) return;
 80012d4:	4b58      	ldr	r3, [pc, #352]	; (8001438 <IST8310_i2cRxCpltCallback+0x168>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	f040 8097 	bne.w	800140c <IST8310_i2cRxCpltCallback+0x13c>

	bm_i2cFlag = bm_i2cIdle;
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <IST8310_i2cRxCpltCallback+0x168>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]

	/* swap the data we just received */
	ist8310.count.x = (((int16_t)ist8310.buf.x[1]) << 8) | (int16_t)ist8310.buf.x[0];
 80012e4:	4b55      	ldr	r3, [pc, #340]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80012e6:	795b      	ldrb	r3, [r3, #5]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	4b53      	ldr	r3, [pc, #332]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80012ee:	791b      	ldrb	r3, [r3, #4]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b51      	ldr	r3, [pc, #324]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80012f8:	815a      	strh	r2, [r3, #10]
	ist8310.count.y = (((int16_t)ist8310.buf.y[1]) << 8) | (int16_t)ist8310.buf.y[0];
 80012fa:	4b50      	ldr	r3, [pc, #320]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80012fc:	79db      	ldrb	r3, [r3, #7]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b4e      	ldr	r3, [pc, #312]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001304:	799b      	ldrb	r3, [r3, #6]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b4b      	ldr	r3, [pc, #300]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 800130e:	819a      	strh	r2, [r3, #12]
	ist8310.count.z = (((int16_t)ist8310.buf.z[1]) << 8) | (int16_t)ist8310.buf.z[0];
 8001310:	4b4a      	ldr	r3, [pc, #296]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001312:	7a5b      	ldrb	r3, [r3, #9]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b48      	ldr	r3, [pc, #288]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 800131a:	7a1b      	ldrb	r3, [r3, #8]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b46      	ldr	r3, [pc, #280]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001324:	81da      	strh	r2, [r3, #14]

	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8001326:	4b45      	ldr	r3, [pc, #276]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001328:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f909 	bl	8000544 <__aeabi_i2d>
 8001332:	a339      	add	r3, pc, #228	; (adr r3, 8001418 <IST8310_i2cRxCpltCallback+0x148>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff fbfe 	bl	8000b38 <__aeabi_dcmpgt>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d166      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001344:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8fb 	bl	8000544 <__aeabi_i2d>
 800134e:	a334      	add	r3, pc, #208	; (adr r3, 8001420 <IST8310_i2cRxCpltCallback+0x150>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff fbd2 	bl	8000afc <__aeabi_dcmplt>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d158      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001360:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8ed 	bl	8000544 <__aeabi_i2d>
	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 800136a:	a32b      	add	r3, pc, #172	; (adr r3, 8001418 <IST8310_i2cRxCpltCallback+0x148>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff fbe2 	bl	8000b38 <__aeabi_dcmpgt>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d14a      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 800137c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8df 	bl	8000544 <__aeabi_i2d>
 8001386:	a326      	add	r3, pc, #152	; (adr r3, 8001420 <IST8310_i2cRxCpltCallback+0x150>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff fbb6 	bl	8000afc <__aeabi_dcmplt>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d13c      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001398:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8d1 	bl	8000544 <__aeabi_i2d>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 80013a2:	a321      	add	r3, pc, #132	; (adr r3, 8001428 <IST8310_i2cRxCpltCallback+0x158>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7ff fbc6 	bl	8000b38 <__aeabi_dcmpgt>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d12e      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8c3 	bl	8000544 <__aeabi_i2d>
 80013be:	a31c      	add	r3, pc, #112	; (adr r3, 8001430 <IST8310_i2cRxCpltCallback+0x160>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff fb9a 	bl	8000afc <__aeabi_dcmplt>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d120      	bne.n	8001410 <IST8310_i2cRxCpltCallback+0x140>
	 * raw outputs
	 *
	 * Sensor doesn't follow right hand rule, swap x and y to make it obey
	 * it.
	 */
	ist8310.raw[0] = (float)(ist8310.count.y);
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013d0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013de:	edc3 7a04 	vstr	s15, [r3, #16]
	ist8310.raw[1] = (float)(ist8310.count.x);
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013e4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013f2:	edc3 7a05 	vstr	s15, [r3, #20]
	ist8310.raw[2] = (float)(ist8310.count.z);
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 80013f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <IST8310_i2cRxCpltCallback+0x16c>)
 8001406:	edc3 7a06 	vstr	s15, [r3, #24]
 800140a:	e002      	b.n	8001412 <IST8310_i2cRxCpltCallback+0x142>
	if(bm_i2cFlag != bm_i2cIST8310) return;
 800140c:	bf00      	nop
 800140e:	e000      	b.n	8001412 <IST8310_i2cRxCpltCallback+0x142>
		return;
 8001410:	bf00      	nop
}
 8001412:	bd80      	pop	{r7, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	55555556 	.word	0x55555556
 800141c:	40b4d655 	.word	0x40b4d655
 8001420:	55555556 	.word	0x55555556
 8001424:	c0b4d655 	.word	0xc0b4d655
 8001428:	aaaaaaab 	.word	0xaaaaaaab
 800142c:	40c0472a 	.word	0x40c0472a
 8001430:	aaaaaaab 	.word	0xaaaaaaab
 8001434:	c0c0472a 	.word	0xc0c0472a
 8001438:	20000854 	.word	0x20000854
 800143c:	20000838 	.word	0x20000838

08001440 <IST8310_write>:

void IST8310_write(uint8_t address, uint8_t *data, uint8_t count){
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af04      	add	r7, sp, #16
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	4613      	mov	r3, r2
 800144e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IST8310_I2C, IST8310_BUS_I2C_ADDR, address, 1, data, count, IST8310_DEFAULT_TIMEOUT);
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <IST8310_write+0x38>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	b299      	uxth	r1, r3
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	b29b      	uxth	r3, r3
 800145c:	2264      	movs	r2, #100	; 0x64
 800145e:	9202      	str	r2, [sp, #8]
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	460a      	mov	r2, r1
 800146a:	211c      	movs	r1, #28
 800146c:	f009 fba6 	bl	800abbc <HAL_I2C_Mem_Write>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000838 	.word	0x20000838

0800147c <IST8310_write_reg>:

void IST8310_write_reg(uint8_t reg, uint8_t val){
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
	IST8310_write(reg, &val, 1);
 800148c:	1db9      	adds	r1, r7, #6
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2201      	movs	r2, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ffd4 	bl	8001440 <IST8310_write>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <IST8310_reset>:

void IST8310_read_reg(uint8_t reg, uint8_t* val){
	IST8310_read(reg, val, 1);
}

void IST8310_reset(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	/* software reset */
	IST8310_write_reg(IST8310_ADDR_CTRL2, IST8310_CTRL2_SRST);
 80014a4:	2101      	movs	r1, #1
 80014a6:	200b      	movs	r0, #11
 80014a8:	f7ff ffe8 	bl	800147c <IST8310_write_reg>

	/* configure control register 3 */
	IST8310_write_reg(IST8310_ADDR_CTRL3, IST8310_CTRL3_SAMPLEAVG_16);
 80014ac:	2124      	movs	r1, #36	; 0x24
 80014ae:	2041      	movs	r0, #65	; 0x41
 80014b0:	f7ff ffe4 	bl	800147c <IST8310_write_reg>

	/* configure control register 4 */
	IST8310_write_reg(IST8310_ADDR_CTRL4, IST8310_CTRL4_SRPD);
 80014b4:	21c0      	movs	r1, #192	; 0xc0
 80014b6:	2042      	movs	r0, #66	; 0x42
 80014b8:	f7ff ffe0 	bl	800147c <IST8310_write_reg>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <Lidar1D_CaptureCallback>:
	if(HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
	return HAL_OK;
}


void Lidar1D_CaptureCallback(TIM_HandleTypeDef *htim){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	if(htim->Instance != lidar1D.htim->Instance) return;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <Lidar1D_CaptureCallback+0x4c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d116      	bne.n	8001504 <Lidar1D_CaptureCallback+0x44>

	if(htim->Channel == lidar1D.activeChannel1){
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7f1a      	ldrb	r2, [r3, #28]
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <Lidar1D_CaptureCallback+0x4c>)
 80014dc:	7b1b      	ldrb	r3, [r3, #12]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d102      	bne.n	80014e8 <Lidar1D_CaptureCallback+0x28>
//		IC1Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		TIM9->CNT = 0;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <Lidar1D_CaptureCallback+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(htim->Channel == lidar1D.activeChannel2){
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7f1a      	ldrb	r2, [r3, #28]
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <Lidar1D_CaptureCallback+0x4c>)
 80014ee:	7b5b      	ldrb	r3, [r3, #13]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d108      	bne.n	8001506 <Lidar1D_CaptureCallback+0x46>
		lidar1D.distance_mm = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80014f4:	2104      	movs	r1, #4
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f00e fe50 	bl	801019c <HAL_TIM_ReadCapturedValue>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b03      	ldr	r3, [pc, #12]	; (800150c <Lidar1D_CaptureCallback+0x4c>)
 8001500:	611a      	str	r2, [r3, #16]
 8001502:	e000      	b.n	8001506 <Lidar1D_CaptureCallback+0x46>
	if(htim->Instance != lidar1D.htim->Instance) return;
 8001504:	bf00      	nop
	}
}
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000030c 	.word	0x2000030c
 8001510:	40014000 	.word	0x40014000

08001514 <MPU9250>:
#include "stdio.h"
#include "i2c.h"
#include "cmsis_os.h"
#include "math.h"

void MPU9250(I2C_HandleTypeDef *hi2c){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	//configuration
	mpu9250.hi2c = hi2c;
 800151c:	4a38      	ldr	r2, [pc, #224]	; (8001600 <MPU9250+0xec>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
	mpu9250.Ascale = MPU9250_AFS_8G;
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <MPU9250+0xec>)
 8001524:	2202      	movs	r2, #2
 8001526:	711a      	strb	r2, [r3, #4]
	mpu9250.Gscale = MPU9250_GFS_2000DPS;
 8001528:	4b35      	ldr	r3, [pc, #212]	; (8001600 <MPU9250+0xec>)
 800152a:	2203      	movs	r2, #3
 800152c:	715a      	strb	r2, [r3, #5]
	mpu9250.Mscale = MPU9250_MFS_14BITS;
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <MPU9250+0xec>)
 8001530:	2200      	movs	r2, #0
 8001532:	719a      	strb	r2, [r3, #6]
	mpu9250.Mmode = MPU9250_M_100HZ;
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <MPU9250+0xec>)
 8001536:	2206      	movs	r2, #6
 8001538:	71da      	strb	r2, [r3, #7]

	// set to 0
	mpu9250.aRes = 0; mpu9250.gRes = 0; mpu9250.mRes = 0;
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <MPU9250+0xec>)
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <MPU9250+0xec>)
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <MPU9250+0xec>)
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
	memset(mpu9250.accelCount, 0, sizeof(mpu9250.accelCount));
 8001552:	2206      	movs	r2, #6
 8001554:	2100      	movs	r1, #0
 8001556:	482b      	ldr	r0, [pc, #172]	; (8001604 <MPU9250+0xf0>)
 8001558:	f018 fe85 	bl	801a266 <memset>
	memset(mpu9250.gyroCount, 0, sizeof(mpu9250.gyroCount));
 800155c:	2206      	movs	r2, #6
 800155e:	2100      	movs	r1, #0
 8001560:	4829      	ldr	r0, [pc, #164]	; (8001608 <MPU9250+0xf4>)
 8001562:	f018 fe80 	bl	801a266 <memset>
	memset(mpu9250.magCount, 0, sizeof(mpu9250.magCount));
 8001566:	2206      	movs	r2, #6
 8001568:	2100      	movs	r1, #0
 800156a:	4828      	ldr	r0, [pc, #160]	; (800160c <MPU9250+0xf8>)
 800156c:	f018 fe7b 	bl	801a266 <memset>
	mpu9250.tmpCount = 0;
 8001570:	4b23      	ldr	r3, [pc, #140]	; (8001600 <MPU9250+0xec>)
 8001572:	2200      	movs	r2, #0
 8001574:	84da      	strh	r2, [r3, #38]	; 0x26
	memset(mpu9250.magBias, 0, sizeof(mpu9250.magBias));
 8001576:	220c      	movs	r2, #12
 8001578:	2100      	movs	r1, #0
 800157a:	4825      	ldr	r0, [pc, #148]	; (8001610 <MPU9250+0xfc>)
 800157c:	f018 fe73 	bl	801a266 <memset>
	memset(mpu9250.accel, 0, sizeof(mpu9250.accel));
 8001580:	220c      	movs	r2, #12
 8001582:	2100      	movs	r1, #0
 8001584:	4823      	ldr	r0, [pc, #140]	; (8001614 <MPU9250+0x100>)
 8001586:	f018 fe6e 	bl	801a266 <memset>
	memset(mpu9250.gyro, 0, sizeof(mpu9250.gyro));
 800158a:	220c      	movs	r2, #12
 800158c:	2100      	movs	r1, #0
 800158e:	4822      	ldr	r0, [pc, #136]	; (8001618 <MPU9250+0x104>)
 8001590:	f018 fe69 	bl	801a266 <memset>
	memset(mpu9250.mag, 0, sizeof(mpu9250.mag));
 8001594:	220c      	movs	r2, #12
 8001596:	2100      	movs	r1, #0
 8001598:	4820      	ldr	r0, [pc, #128]	; (800161c <MPU9250+0x108>)
 800159a:	f018 fe64 	bl	801a266 <memset>
	mpu9250.tmp = 0;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MPU9250+0xec>)
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	665a      	str	r2, [r3, #100]	; 0x64
	memset(mpu9250.MPU9250_buffer, 0, sizeof(mpu9250.MPU9250_buffer));
 80015a6:	220e      	movs	r2, #14
 80015a8:	2100      	movs	r1, #0
 80015aa:	481d      	ldr	r0, [pc, #116]	; (8001620 <MPU9250+0x10c>)
 80015ac:	f018 fe5b 	bl	801a266 <memset>
	memset(mpu9250.AK8963_buffer, 0, sizeof(mpu9250.AK8963_buffer));
 80015b0:	2207      	movs	r2, #7
 80015b2:	2100      	movs	r1, #0
 80015b4:	481b      	ldr	r0, [pc, #108]	; (8001624 <MPU9250+0x110>)
 80015b6:	f018 fe56 	bl	801a266 <memset>
	mpu9250.AK8963_lastUpdate = 0;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MPU9250+0xec>)
 80015bc:	2200      	movs	r2, #0
 80015be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	mpu9250.dmaFlag = MPU9250_dmaIdle;
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MPU9250+0xec>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	mpu9250.magBias[0] = 280.0f;
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <MPU9250+0xec>)
 80015cc:	4a16      	ldr	r2, [pc, #88]	; (8001628 <MPU9250+0x114>)
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
	mpu9250.magBias[1] = 285.0f;
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MPU9250+0xec>)
 80015d2:	4a16      	ldr	r2, [pc, #88]	; (800162c <MPU9250+0x118>)
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu9250.magBias[2] = 330.0f;
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <MPU9250+0xec>)
 80015d8:	4a15      	ldr	r2, [pc, #84]	; (8001630 <MPU9250+0x11c>)
 80015da:	631a      	str	r2, [r3, #48]	; 0x30

	MPU9250_getMres();
 80015dc:	f000 fa14 	bl	8001a08 <MPU9250_getMres>
	MPU9250_getGres();
 80015e0:	f000 fa2e 	bl	8001a40 <MPU9250_getGres>
	MPU9250_getAres();
 80015e4:	f000 fa5e 	bl	8001aa4 <MPU9250_getAres>

	MPU9250_resetMPU9250();
 80015e8:	f000 fa8a 	bl	8001b00 <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250();
 80015ec:	f000 fb76 	bl	8001cdc <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250();	// calculate ay, ac bias
 80015f0:	f000 fb00 	bl	8001bf4 <MPU9250_initMPU9250>
	MPU9250_initAK8963();	//
 80015f4:	f000 fa90 	bl	8001b18 <MPU9250_initAK8963>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200004c0 	.word	0x200004c0
 8001604:	200004d4 	.word	0x200004d4
 8001608:	200004da 	.word	0x200004da
 800160c:	200004e0 	.word	0x200004e0
 8001610:	200004e8 	.word	0x200004e8
 8001614:	20000500 	.word	0x20000500
 8001618:	2000050c 	.word	0x2000050c
 800161c:	20000518 	.word	0x20000518
 8001620:	20000528 	.word	0x20000528
 8001624:	20000536 	.word	0x20000536
 8001628:	438c0000 	.word	0x438c0000
 800162c:	438e8000 	.word	0x438e8000
 8001630:	43a50000 	.word	0x43a50000

08001634 <MPU9250_updateDMA>:

void MPU9250_updateDMA(){
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MPU9250_updateDMA+0x38>)
 800163c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10f      	bne.n	8001664 <MPU9250_updateDMA+0x30>
	mpu9250.dmaFlag = MPU9250_dmaMPU9250;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MPU9250_updateDMA+0x38>)
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, mpu9250.MPU9250_buffer, 14);
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <MPU9250_updateDMA+0x38>)
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	230e      	movs	r3, #14
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MPU9250_updateDMA+0x3c>)
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	223b      	movs	r2, #59	; 0x3b
 800165c:	21d0      	movs	r1, #208	; 0xd0
 800165e:	f009 fe8b 	bl	800b378 <HAL_I2C_Mem_Read_DMA>
 8001662:	e000      	b.n	8001666 <MPU9250_updateDMA+0x32>
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8001664:	bf00      	nop
}
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200004c0 	.word	0x200004c0
 8001670:	20000528 	.word	0x20000528

08001674 <MPU9250_i2cRxCpltCallback>:

void MPU9250_i2cRxCpltCallback(){
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag == MPU9250_dmaMPU9250){
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <MPU9250_i2cRxCpltCallback+0x80>)
 800167c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001680:	2b01      	cmp	r3, #1
 8001682:	d125      	bne.n	80016d0 <MPU9250_i2cRxCpltCallback+0x5c>
		if(MPU9250_calRawData() != MPU9250_Fail){
 8001684:	f000 f83a 	bl	80016fc <MPU9250_calRawData>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MPU9250_i2cRxCpltCallback+0x1e>
			MPU9250_calCalibValue();
 800168e:	f000 f8b7 	bl	8001800 <MPU9250_calCalibValue>
		}
		if(xTaskGetTickCount() - mpu9250.AK8963_lastUpdate > AK8963_UPDATE_TICK){
 8001692:	f016 f85f 	bl	8017754 <xTaskGetTickCount>
 8001696:	4602      	mov	r2, r0
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <MPU9250_i2cRxCpltCallback+0x80>)
 800169a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b0a      	cmp	r3, #10
 80016a2:	d921      	bls.n	80016e8 <MPU9250_i2cRxCpltCallback+0x74>
			mpu9250.dmaFlag = MPU9250_dmaAK8963;
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <MPU9250_i2cRxCpltCallback+0x80>)
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, AK8963_ADDRESS, AK8963_XOUT_L, 1, mpu9250.AK8963_buffer, 7);
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MPU9250_i2cRxCpltCallback+0x80>)
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	2307      	movs	r3, #7
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <MPU9250_i2cRxCpltCallback+0x84>)
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	2118      	movs	r1, #24
 80016be:	f009 fe5b 	bl	800b378 <HAL_I2C_Mem_Read_DMA>
			mpu9250.AK8963_lastUpdate = xTaskGetTickCount();
 80016c2:	f016 f847 	bl	8017754 <xTaskGetTickCount>
 80016c6:	4602      	mov	r2, r0
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <MPU9250_i2cRxCpltCallback+0x80>)
 80016ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return;
 80016ce:	e00f      	b.n	80016f0 <MPU9250_i2cRxCpltCallback+0x7c>
		}
	}
	else if(mpu9250.dmaFlag == MPU9250_dmaAK8963){
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MPU9250_i2cRxCpltCallback+0x80>)
 80016d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d106      	bne.n	80016e8 <MPU9250_i2cRxCpltCallback+0x74>
			if(AK8963_calRawData() == MPU9250_Success){
 80016da:	f000 f903 	bl	80018e4 <AK8963_calRawData>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <MPU9250_i2cRxCpltCallback+0x74>
				AK8963_calCalibValue();
 80016e4:	f000 f93c 	bl	8001960 <AK8963_calCalibValue>
			}
	}
	mpu9250.dmaFlag = MPU9250_dmaIdle;
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <MPU9250_i2cRxCpltCallback+0x80>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200004c0 	.word	0x200004c0
 80016f8:	20000536 	.word	0x20000536

080016fc <MPU9250_calRawData>:

MPU9250_Result_t MPU9250_calRawData(){
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	// accel axis reverse
	mpu9250.accelCount[0] = -((((int16_t)mpu9250.MPU9250_buffer[0]) << 8) | mpu9250.MPU9250_buffer[1]);
 8001700:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <MPU9250_calRawData+0x100>)
 8001702:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	b21a      	sxth	r2, r3
 800170a:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <MPU9250_calRawData+0x100>)
 800170c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001710:	b21b      	sxth	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b21b      	sxth	r3, r3
 8001716:	b29b      	uxth	r3, r3
 8001718:	425b      	negs	r3, r3
 800171a:	b29b      	uxth	r3, r3
 800171c:	b21a      	sxth	r2, r3
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <MPU9250_calRawData+0x100>)
 8001720:	829a      	strh	r2, [r3, #20]
	mpu9250.accelCount[1] = -((((int16_t)mpu9250.MPU9250_buffer[2]) << 8) | mpu9250.MPU9250_buffer[3]);
 8001722:	4b36      	ldr	r3, [pc, #216]	; (80017fc <MPU9250_calRawData+0x100>)
 8001724:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	b21a      	sxth	r2, r3
 800172c:	4b33      	ldr	r3, [pc, #204]	; (80017fc <MPU9250_calRawData+0x100>)
 800172e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21b      	sxth	r3, r3
 8001738:	b29b      	uxth	r3, r3
 800173a:	425b      	negs	r3, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	b21a      	sxth	r2, r3
 8001740:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <MPU9250_calRawData+0x100>)
 8001742:	82da      	strh	r2, [r3, #22]
	mpu9250.accelCount[2] = -((((int16_t)mpu9250.MPU9250_buffer[4]) << 8) | mpu9250.MPU9250_buffer[5]);
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <MPU9250_calRawData+0x100>)
 8001746:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <MPU9250_calRawData+0x100>)
 8001750:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001754:	b21b      	sxth	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b21b      	sxth	r3, r3
 800175a:	b29b      	uxth	r3, r3
 800175c:	425b      	negs	r3, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	b21a      	sxth	r2, r3
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <MPU9250_calRawData+0x100>)
 8001764:	831a      	strh	r2, [r3, #24]
	mpu9250.tmpCount = (int16_t) (mpu9250.MPU9250_buffer[6] << 8 | mpu9250.MPU9250_buffer[7]);
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <MPU9250_calRawData+0x100>)
 8001768:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	b21a      	sxth	r2, r3
 8001770:	4b22      	ldr	r3, [pc, #136]	; (80017fc <MPU9250_calRawData+0x100>)
 8001772:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21a      	sxth	r2, r3
 800177c:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <MPU9250_calRawData+0x100>)
 800177e:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu9250.gyroCount[0] = (((int16_t)mpu9250.MPU9250_buffer[8]) << 8) | mpu9250.MPU9250_buffer[9];
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <MPU9250_calRawData+0x100>)
 8001782:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b21a      	sxth	r2, r3
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <MPU9250_calRawData+0x100>)
 800178c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001790:	b21b      	sxth	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b21a      	sxth	r2, r3
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <MPU9250_calRawData+0x100>)
 8001798:	835a      	strh	r2, [r3, #26]
	mpu9250.gyroCount[1] = (((int16_t)mpu9250.MPU9250_buffer[10]) << 8) | mpu9250.MPU9250_buffer[11];
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <MPU9250_calRawData+0x100>)
 800179c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <MPU9250_calRawData+0x100>)
 80017a6:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MPU9250_calRawData+0x100>)
 80017b2:	839a      	strh	r2, [r3, #28]
	mpu9250.gyroCount[2] = (((int16_t)mpu9250.MPU9250_buffer[12]) << 8) | mpu9250.MPU9250_buffer[13];
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MPU9250_calRawData+0x100>)
 80017b6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MPU9250_calRawData+0x100>)
 80017c0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MPU9250_calRawData+0x100>)
 80017cc:	83da      	strh	r2, [r3, #30]

	if(mpu9250.accelCount[0] == 0 && mpu9250.accelCount[1] == 0 && mpu9250.accelCount[2] == 0) return MPU9250_Fail;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MPU9250_calRawData+0x100>)
 80017d0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10b      	bne.n	80017f0 <MPU9250_calRawData+0xf4>
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MPU9250_calRawData+0x100>)
 80017da:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <MPU9250_calRawData+0xf4>
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MPU9250_calRawData+0x100>)
 80017e4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <MPU9250_calRawData+0xf4>
 80017ec:	2300      	movs	r3, #0
 80017ee:	e000      	b.n	80017f2 <MPU9250_calRawData+0xf6>

	return MPU9250_Success;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	200004c0 	.word	0x200004c0

08001800 <MPU9250_calCalibValue>:

void MPU9250_calCalibValue(){
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
//	// Calculate the gyro value into actual degrees per second
//	MPU9250_g[0] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[0]*MPU9250_gRes - MPU9250_gyroBias[0]);  // get actual gyro value, this depends on scale being set
//	MPU9250_g[1] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[1]*MPU9250_gRes - MPU9250_gyroBias[1]);
//	MPU9250_g[2] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[2]*MPU9250_gRes - MPU9250_gyroBias[2]);

	mpu9250.accel[0] = ((float)mpu9250.accelCount[0]*mpu9250.aRes);  // get actual g value, this depends on scale being set
 8001804:	4b35      	ldr	r3, [pc, #212]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 8001806:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001812:	4b32      	ldr	r3, [pc, #200]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 8001814:	edd3 7a02 	vldr	s15, [r3, #8]
 8001818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181c:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 800181e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu9250.accel[1] = ((float)mpu9250.accelCount[1]*mpu9250.aRes);
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 8001824:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 8001832:	edd3 7a02 	vldr	s15, [r3, #8]
 8001836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 800183c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu9250.accel[2] = ((float)mpu9250.accelCount[2]*mpu9250.aRes);
 8001840:	4b26      	ldr	r3, [pc, #152]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 8001842:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184e:	4b23      	ldr	r3, [pc, #140]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 8001850:	edd3 7a02 	vldr	s15, [r3, #8]
 8001854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 800185a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	// Calculate the gyro value into actual degrees per second
	mpu9250.gyro[0] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[0]*mpu9250.gRes);  // get actual gyro value, this depends on scale being set
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 8001860:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 800186e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001876:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80018e0 <MPU9250_calCalibValue+0xe0>
 800187a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 8001880:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu9250.gyro[1] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[1]*mpu9250.gRes);
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 8001886:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 8001894:	edd3 7a03 	vldr	s15, [r3, #12]
 8001898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80018e0 <MPU9250_calCalibValue+0xe0>
 80018a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 80018a6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu9250.gyro[2] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[2]*mpu9250.gRes);
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 80018ac:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 80018ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80018be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80018e0 <MPU9250_calCalibValue+0xe0>
 80018c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <MPU9250_calCalibValue+0xdc>)
 80018cc:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200004c0 	.word	0x200004c0
 80018e0:	3c8efa35 	.word	0x3c8efa35

080018e4 <AK8963_calRawData>:

MPU9250_Result_t AK8963_calRawData(){
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
	if(mpu9250.AK8963_buffer[6] & 0x08) return MPU9250_Fail; // Check if magnetic sensor overflow set, if not then report data
 80018e8:	4b1c      	ldr	r3, [pc, #112]	; (800195c <AK8963_calRawData+0x78>)
 80018ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <AK8963_calRawData+0x16>
 80018f6:	2300      	movs	r3, #0
 80018f8:	e02b      	b.n	8001952 <AK8963_calRawData+0x6e>

	mpu9250.magCount[1] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[1] << 8) | mpu9250.AK8963_buffer[0]);  // Turn the MSB and LSB into a signed 16-bit value
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <AK8963_calRawData+0x78>)
 80018fc:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	b21a      	sxth	r2, r3
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <AK8963_calRawData+0x78>)
 8001906:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800190a:	b21b      	sxth	r3, r3
 800190c:	4313      	orrs	r3, r2
 800190e:	b21a      	sxth	r2, r3
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <AK8963_calRawData+0x78>)
 8001912:	845a      	strh	r2, [r3, #34]	; 0x22
	mpu9250.magCount[0] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[3] << 8) | mpu9250.AK8963_buffer[2]);  // Data stored as little Endian
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <AK8963_calRawData+0x78>)
 8001916:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	b21a      	sxth	r2, r3
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <AK8963_calRawData+0x78>)
 8001920:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001924:	b21b      	sxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	b21a      	sxth	r2, r3
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <AK8963_calRawData+0x78>)
 800192c:	841a      	strh	r2, [r3, #32]
	mpu9250.magCount[2] = -(int16_t)(((int16_t)mpu9250.AK8963_buffer[5] << 8) | mpu9250.AK8963_buffer[4]);
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <AK8963_calRawData+0x78>)
 8001930:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	b21a      	sxth	r2, r3
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <AK8963_calRawData+0x78>)
 800193a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800193e:	b21b      	sxth	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b21b      	sxth	r3, r3
 8001944:	b29b      	uxth	r3, r3
 8001946:	425b      	negs	r3, r3
 8001948:	b29b      	uxth	r3, r3
 800194a:	b21a      	sxth	r2, r3
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <AK8963_calRawData+0x78>)
 800194e:	849a      	strh	r2, [r3, #36]	; 0x24
	return MPU9250_Success;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	200004c0 	.word	0x200004c0

08001960 <AK8963_calCalibValue>:

void AK8963_calCalibValue(){
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
	// mag have different axis with acc, gyr -> ax = my, ay = mx, az = -mz
    mpu9250.mag[0] = (float)mpu9250.magCount[0]*mpu9250.mRes*mpu9250.magCalibration[0] - mpu9250.magBias[1];  // get actual magnetometer value, this depends on scale being set
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 8001966:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 8001974:	edd3 7a04 	vldr	s15, [r3, #16]
 8001978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 800197e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 8001988:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800198c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001990:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 8001992:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    mpu9250.mag[1] = (float)mpu9250.magCount[1]*mpu9250.mRes*mpu9250.magCalibration[1] - mpu9250.magBias[0];
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 8001998:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 80019a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80019aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 80019b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80019b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 80019ba:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 80019c4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    mpu9250.mag[2] = ((float)mpu9250.magCount[2]*mpu9250.mRes*mpu9250.magCalibration[2] - mpu9250.magBias[2]);
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 80019ca:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 80019d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80019dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 80019e2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80019e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 80019ec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <AK8963_calCalibValue+0xa4>)
 80019f6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	200004c0 	.word	0x200004c0

08001a08 <MPU9250_getMres>:

void MPU9250_getMres() {
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
	switch (mpu9250.Mscale)
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MPU9250_getMres+0x2c>)
 8001a0e:	799b      	ldrb	r3, [r3, #6]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <MPU9250_getMres+0x12>
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d004      	beq.n	8001a22 <MPU9250_getMres+0x1a>
		  break;
	case MPU9250_MFS_16BITS:
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 8001a18:	e007      	b.n	8001a2a <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MPU9250_getMres+0x2c>)
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <MPU9250_getMres+0x30>)
 8001a1e:	611a      	str	r2, [r3, #16]
		  break;
 8001a20:	e003      	b.n	8001a2a <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <MPU9250_getMres+0x2c>)
 8001a24:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <MPU9250_getMres+0x34>)
 8001a26:	611a      	str	r2, [r3, #16]
		  break;
 8001a28:	bf00      	nop
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	200004c0 	.word	0x200004c0
 8001a38:	40bfebff 	.word	0x40bfebff
 8001a3c:	3fbfebff 	.word	0x3fbfebff

08001a40 <MPU9250_getGres>:

void MPU9250_getGres() {
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  switch (mpu9250.Gscale)
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <MPU9250_getGres+0x50>)
 8001a46:	795b      	ldrb	r3, [r3, #5]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d81b      	bhi.n	8001a84 <MPU9250_getGres+0x44>
 8001a4c:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <MPU9250_getGres+0x14>)
 8001a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a52:	bf00      	nop
 8001a54:	08001a65 	.word	0x08001a65
 8001a58:	08001a6d 	.word	0x08001a6d
 8001a5c:	08001a75 	.word	0x08001a75
 8001a60:	08001a7d 	.word	0x08001a7d
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_GFS_250DPS:
    	  mpu9250.gRes = 250.0/32768.0;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <MPU9250_getGres+0x50>)
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <MPU9250_getGres+0x54>)
 8001a68:	60da      	str	r2, [r3, #12]
          break;
 8001a6a:	e00b      	b.n	8001a84 <MPU9250_getGres+0x44>
    case MPU9250_GFS_500DPS:
    	  mpu9250.gRes = 500.0/32768.0;
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <MPU9250_getGres+0x50>)
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <MPU9250_getGres+0x58>)
 8001a70:	60da      	str	r2, [r3, #12]
          break;
 8001a72:	e007      	b.n	8001a84 <MPU9250_getGres+0x44>
    case MPU9250_GFS_1000DPS:
    	  mpu9250.gRes = 1000.0/32768.0;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MPU9250_getGres+0x50>)
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <MPU9250_getGres+0x5c>)
 8001a78:	60da      	str	r2, [r3, #12]
          break;
 8001a7a:	e003      	b.n	8001a84 <MPU9250_getGres+0x44>
    case MPU9250_GFS_2000DPS:
    	  mpu9250.gRes = 2000.0/32768.0;
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <MPU9250_getGres+0x50>)
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <MPU9250_getGres+0x60>)
 8001a80:	60da      	str	r2, [r3, #12]
          break;
 8001a82:	bf00      	nop
  }
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200004c0 	.word	0x200004c0
 8001a94:	3bfa0000 	.word	0x3bfa0000
 8001a98:	3c7a0000 	.word	0x3c7a0000
 8001a9c:	3cfa0000 	.word	0x3cfa0000
 8001aa0:	3d7a0000 	.word	0x3d7a0000

08001aa4 <MPU9250_getAres>:


void MPU9250_getAres() {
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  switch (mpu9250.Ascale)
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <MPU9250_getAres+0x58>)
 8001aaa:	791b      	ldrb	r3, [r3, #4]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d81f      	bhi.n	8001af0 <MPU9250_getAres+0x4c>
 8001ab0:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <MPU9250_getAres+0x14>)
 8001ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab6:	bf00      	nop
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001ad3 	.word	0x08001ad3
 8001ac0:	08001add 	.word	0x08001add
 8001ac4:	08001ae7 	.word	0x08001ae7
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_AFS_2G:
    	  mpu9250.aRes = 2.0/32768.0;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MPU9250_getAres+0x58>)
 8001aca:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001ace:	609a      	str	r2, [r3, #8]
          break;
 8001ad0:	e00e      	b.n	8001af0 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_4G:
    	  mpu9250.aRes = 4.0/32768.0;
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <MPU9250_getAres+0x58>)
 8001ad4:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001ad8:	609a      	str	r2, [r3, #8]
          break;
 8001ada:	e009      	b.n	8001af0 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_8G:
    	  mpu9250.aRes = 8.0/32768.0;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <MPU9250_getAres+0x58>)
 8001ade:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001ae2:	609a      	str	r2, [r3, #8]
          break;
 8001ae4:	e004      	b.n	8001af0 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_16G:
    	  mpu9250.aRes = 16.0/32768.0;
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <MPU9250_getAres+0x58>)
 8001ae8:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001aec:	609a      	str	r2, [r3, #8]
          break;
 8001aee:	bf00      	nop
  }
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	200004c0 	.word	0x200004c0

08001b00 <MPU9250_resetMPU9250>:
  mpu9250.tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return mpu9250.tmpCount;
}


void MPU9250_resetMPU9250() {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
    // reset device
    MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	216b      	movs	r1, #107	; 0x6b
 8001b08:	20d0      	movs	r0, #208	; 0xd0
 8001b0a:	f000 fb69 	bl	80021e0 <MPU9250_writeByte>
    HAL_Delay(10);
 8001b0e:	200a      	movs	r0, #10
 8001b10:	f008 f892 	bl	8009c38 <HAL_Delay>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <MPU9250_initAK8963>:

void MPU9250_initAK8963()
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001b1e:	2200      	movs	r2, #0
 8001b20:	210a      	movs	r1, #10
 8001b22:	2018      	movs	r0, #24
 8001b24:	f000 fb5c 	bl	80021e0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001b28:	200a      	movs	r0, #10
 8001b2a:	f008 f885 	bl	8009c38 <HAL_Delay>
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001b2e:	220f      	movs	r2, #15
 8001b30:	210a      	movs	r1, #10
 8001b32:	2018      	movs	r0, #24
 8001b34:	f000 fb54 	bl	80021e0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001b38:	200a      	movs	r0, #10
 8001b3a:	f008 f87d 	bl	8009c38 <HAL_Delay>
	MPU9250_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2203      	movs	r2, #3
 8001b42:	2110      	movs	r1, #16
 8001b44:	2018      	movs	r0, #24
 8001b46:	f000 fb69 	bl	800221c <MPU9250_readBytes>

	// set axis to accel axis
	mpu9250.magCalibration[1] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8001b4a:	793b      	ldrb	r3, [r7, #4]
 8001b4c:	3b80      	subs	r3, #128	; 0x80
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b56:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001bec <MPU9250_initAK8963+0xd4>
 8001b5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b66:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <MPU9250_initAK8963+0xd8>)
 8001b68:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	mpu9250.magCalibration[0] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001b6c:	797b      	ldrb	r3, [r7, #5]
 8001b6e:	3b80      	subs	r3, #128	; 0x80
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b78:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001bec <MPU9250_initAK8963+0xd4>
 8001b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <MPU9250_initAK8963+0xd8>)
 8001b8a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu9250.magCalibration[2] =  ((float)(rawData[2] - 128)/256.0f + 1.0f);
 8001b8e:	79bb      	ldrb	r3, [r7, #6]
 8001b90:	3b80      	subs	r3, #128	; 0x80
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001bec <MPU9250_initAK8963+0xd4>
 8001b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MPU9250_initAK8963+0xd8>)
 8001bac:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	210a      	movs	r1, #10
 8001bb4:	2018      	movs	r0, #24
 8001bb6:	f000 fb13 	bl	80021e0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001bba:	200a      	movs	r0, #10
 8001bbc:	f008 f83c 	bl	8009c38 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, mpu9250.Mscale << 4 | mpu9250.Mmode); // Set magnetometer data resolution and sample ODR
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <MPU9250_initAK8963+0xd8>)
 8001bc2:	799b      	ldrb	r3, [r3, #6]
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	b25a      	sxtb	r2, r3
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MPU9250_initAK8963+0xd8>)
 8001bca:	79db      	ldrb	r3, [r3, #7]
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	210a      	movs	r1, #10
 8001bd8:	2018      	movs	r0, #24
 8001bda:	f000 fb01 	bl	80021e0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001bde:	200a      	movs	r0, #10
 8001be0:	f008 f82a 	bl	8009c38 <HAL_Delay>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	43800000 	.word	0x43800000
 8001bf0:	200004c0 	.word	0x200004c0

08001bf4 <MPU9250_initMPU9250>:


void MPU9250_initMPU9250()
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	216b      	movs	r1, #107	; 0x6b
 8001bfe:	20d0      	movs	r0, #208	; 0xd0
 8001c00:	f000 faee 	bl	80021e0 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001c04:	2064      	movs	r0, #100	; 0x64
 8001c06:	f008 f817 	bl	8009c38 <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	216b      	movs	r1, #107	; 0x6b
 8001c0e:	20d0      	movs	r0, #208	; 0xd0
 8001c10:	f000 fae6 	bl	80021e0 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8001c14:	2203      	movs	r2, #3
 8001c16:	211a      	movs	r1, #26
 8001c18:	20d0      	movs	r0, #208	; 0xd0
 8001c1a:	f000 fae1 	bl	80021e0 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8001c1e:	2204      	movs	r2, #4
 8001c20:	2119      	movs	r1, #25
 8001c22:	20d0      	movs	r0, #208	; 0xd0
 8001c24:	f000 fadc 	bl	80021e0 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8001c28:	211b      	movs	r1, #27
 8001c2a:	20d0      	movs	r0, #208	; 0xd0
 8001c2c:	f000 fb18 	bl	8002260 <MPU9250_readByte>
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f023 0302 	bic.w	r3, r3, #2
 8001c3a:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f023 0318 	bic.w	r3, r3, #24
 8001c42:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Gscale << 3; // Set full scale range for the gyro
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <MPU9250_initMPU9250+0xe4>)
 8001c46:	795b      	ldrb	r3, [r3, #5]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	b25a      	sxtb	r2, r3
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	71fb      	strb	r3, [r7, #7]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing i
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to regts inverse to bits 1:0 of GYRO_CONFIGister
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	211b      	movs	r1, #27
 8001c5c:	20d0      	movs	r0, #208	; 0xd0
 8001c5e:	f000 fabf 	bl	80021e0 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8001c62:	211c      	movs	r1, #28
 8001c64:	20d0      	movs	r0, #208	; 0xd0
 8001c66:	f000 fafb 	bl	8002260 <MPU9250_readByte>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f023 0318 	bic.w	r3, r3, #24
 8001c74:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Ascale << 3; // Set full scale range for the accelerometer
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <MPU9250_initMPU9250+0xe4>)
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	b25a      	sxtb	r2, r3
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b25b      	sxtb	r3, r3
 8001c86:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	211c      	movs	r1, #28
 8001c8e:	20d0      	movs	r0, #208	; 0xd0
 8001c90:	f000 faa6 	bl	80021e0 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8001c94:	211d      	movs	r1, #29
 8001c96:	20d0      	movs	r0, #208	; 0xd0
 8001c98:	f000 fae2 	bl	8002260 <MPU9250_readByte>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f023 030f 	bic.w	r3, r3, #15
 8001ca6:	71fb      	strb	r3, [r7, #7]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f043 0303 	orr.w	r3, r3, #3
 8001cae:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	211d      	movs	r1, #29
 8001cb6:	20d0      	movs	r0, #208	; 0xd0
 8001cb8:	f000 fa92 	bl	80021e0 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8001cbc:	2222      	movs	r2, #34	; 0x22
 8001cbe:	2137      	movs	r1, #55	; 0x37
 8001cc0:	20d0      	movs	r0, #208	; 0xd0
 8001cc2:	f000 fa8d 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2138      	movs	r1, #56	; 0x38
 8001cca:	20d0      	movs	r0, #208	; 0xd0
 8001ccc:	f000 fa88 	bl	80021e0 <MPU9250_writeByte>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200004c0 	.word	0x200004c0

08001cdc <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250()
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b094      	sub	sp, #80	; 0x50
 8001ce0:	af00      	add	r7, sp, #0
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cea:	2300      	movs	r3, #0
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	216b      	movs	r1, #107	; 0x6b
 8001cfe:	20d0      	movs	r0, #208	; 0xd0
 8001d00:	f000 fa6e 	bl	80021e0 <MPU9250_writeByte>
  HAL_Delay(100);
 8001d04:	2064      	movs	r0, #100	; 0x64
 8001d06:	f007 ff97 	bl	8009c38 <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	216b      	movs	r1, #107	; 0x6b
 8001d0e:	20d0      	movs	r0, #208	; 0xd0
 8001d10:	f000 fa66 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8001d14:	2200      	movs	r2, #0
 8001d16:	216c      	movs	r1, #108	; 0x6c
 8001d18:	20d0      	movs	r0, #208	; 0xd0
 8001d1a:	f000 fa61 	bl	80021e0 <MPU9250_writeByte>
  HAL_Delay(200);
 8001d1e:	20c8      	movs	r0, #200	; 0xc8
 8001d20:	f007 ff8a 	bl	8009c38 <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8001d24:	2200      	movs	r2, #0
 8001d26:	2138      	movs	r1, #56	; 0x38
 8001d28:	20d0      	movs	r0, #208	; 0xd0
 8001d2a:	f000 fa59 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2123      	movs	r1, #35	; 0x23
 8001d32:	20d0      	movs	r0, #208	; 0xd0
 8001d34:	f000 fa54 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8001d38:	2200      	movs	r2, #0
 8001d3a:	216b      	movs	r1, #107	; 0x6b
 8001d3c:	20d0      	movs	r0, #208	; 0xd0
 8001d3e:	f000 fa4f 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001d42:	2200      	movs	r2, #0
 8001d44:	2124      	movs	r1, #36	; 0x24
 8001d46:	20d0      	movs	r0, #208	; 0xd0
 8001d48:	f000 fa4a 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	216a      	movs	r1, #106	; 0x6a
 8001d50:	20d0      	movs	r0, #208	; 0xd0
 8001d52:	f000 fa45 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001d56:	220c      	movs	r2, #12
 8001d58:	216a      	movs	r1, #106	; 0x6a
 8001d5a:	20d0      	movs	r0, #208	; 0xd0
 8001d5c:	f000 fa40 	bl	80021e0 <MPU9250_writeByte>
  HAL_Delay(15);
 8001d60:	200f      	movs	r0, #15
 8001d62:	f007 ff69 	bl	8009c38 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001d66:	2201      	movs	r2, #1
 8001d68:	211a      	movs	r1, #26
 8001d6a:	20d0      	movs	r0, #208	; 0xd0
 8001d6c:	f000 fa38 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001d70:	2200      	movs	r2, #0
 8001d72:	2119      	movs	r1, #25
 8001d74:	20d0      	movs	r0, #208	; 0xd0
 8001d76:	f000 fa33 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	211b      	movs	r1, #27
 8001d7e:	20d0      	movs	r0, #208	; 0xd0
 8001d80:	f000 fa2e 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001d84:	2200      	movs	r2, #0
 8001d86:	211c      	movs	r1, #28
 8001d88:	20d0      	movs	r0, #208	; 0xd0
 8001d8a:	f000 fa29 	bl	80021e0 <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8001d8e:	2240      	movs	r2, #64	; 0x40
 8001d90:	216a      	movs	r1, #106	; 0x6a
 8001d92:	20d0      	movs	r0, #208	; 0xd0
 8001d94:	f000 fa24 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001d98:	2278      	movs	r2, #120	; 0x78
 8001d9a:	2123      	movs	r1, #35	; 0x23
 8001d9c:	20d0      	movs	r0, #208	; 0xd0
 8001d9e:	f000 fa1f 	bl	80021e0 <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001da2:	2028      	movs	r0, #40	; 0x28
 8001da4:	f007 ff48 	bl	8009c38 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001da8:	2200      	movs	r2, #0
 8001daa:	2123      	movs	r1, #35	; 0x23
 8001dac:	20d0      	movs	r0, #208	; 0xd0
 8001dae:	f000 fa17 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001db2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001db6:	2202      	movs	r2, #2
 8001db8:	2172      	movs	r1, #114	; 0x72
 8001dba:	20d0      	movs	r0, #208	; 0xd0
 8001dbc:	f000 fa2e 	bl	800221c <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001dc0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8001dd6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001dda:	4ab3      	ldr	r2, [pc, #716]	; (80020a8 <MPU9250_calibrateMPU9250+0x3cc>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  for (ii = 0; ii < packet_count; ii++) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001dec:	e071      	b.n	8001ed2 <MPU9250_calibrateMPU9250+0x1f6>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001dee:	2300      	movs	r3, #0
 8001df0:	813b      	strh	r3, [r7, #8]
 8001df2:	2300      	movs	r3, #0
 8001df4:	817b      	strh	r3, [r7, #10]
 8001df6:	2300      	movs	r3, #0
 8001df8:	81bb      	strh	r3, [r7, #12]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	803b      	strh	r3, [r7, #0]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	807b      	strh	r3, [r7, #2]
 8001e02:	2300      	movs	r3, #0
 8001e04:	80bb      	strh	r3, [r7, #4]
    MPU9250_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 8001e06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	2174      	movs	r1, #116	; 0x74
 8001e0e:	20d0      	movs	r0, #208	; 0xd0
 8001e10:	f000 fa04 	bl	800221c <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001e14:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	813b      	strh	r3, [r7, #8]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001e28:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	4313      	orrs	r3, r2
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	817b      	strh	r3, [r7, #10]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001e3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	b21a      	sxth	r2, r3
 8001e44:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	81bb      	strh	r3, [r7, #12]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001e50:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	803b      	strh	r3, [r7, #0]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001e64:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	4313      	orrs	r3, r2
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	807b      	strh	r3, [r7, #2]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001e78:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b21b      	sxth	r3, r3
 8001e8a:	80bb      	strh	r3, [r7, #4]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	623b      	str	r3, [r7, #32]
    accel_bias[1] += (int32_t) accel_temp[1];
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] += (int32_t) accel_temp[2];
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eac:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001eba:	4413      	add	r3, r2
 8001ebc:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
  for (ii = 0; ii < packet_count; ii++) {
 8001ec8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001ed2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001ed6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d387      	bcc.n	8001dee <MPU9250_calibrateMPU9250+0x112>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001ede:	6a3a      	ldr	r2, [r7, #32]
 8001ee0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ee4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ee8:	623b      	str	r3, [r7, #32]
    accel_bias[1] /= (int32_t) packet_count;
 8001eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ef0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] /= (int32_t) packet_count;
 8001ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ef8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001efc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  /= (int32_t) packet_count;
 8001f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f08:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  /= (int32_t) packet_count;
 8001f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f14:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  /= (int32_t) packet_count;
 8001f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f20:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f24:	637b      	str	r3, [r7, #52]	; 0x34

    uint16_t accelsensitivity = (uint16_t)(1/mpu9250.aRes);
 8001f26:	4b61      	ldr	r3, [pc, #388]	; (80020ac <MPU9250_calibrateMPU9250+0x3d0>)
 8001f28:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f38:	ee17 3a90 	vmov	r3, s15
 8001f3c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
//    uint16_t gyrosensitivity = (uint16_t)(1/mpu9250.gRes);
//    printf("%u, %u", accelsensitivity, gyrosensitivity);

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	dd05      	ble.n	8001f52 <MPU9250_calibrateMPU9250+0x276>
 8001f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f50:	e004      	b.n	8001f5c <MPU9250_calibrateMPU9250+0x280>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f58:	4413      	add	r3, r2
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5e:	425b      	negs	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da00      	bge.n	8001f66 <MPU9250_calibrateMPU9250+0x28a>
 8001f64:	3303      	adds	r3, #3
 8001f66:	109b      	asrs	r3, r3, #2
 8001f68:	121b      	asrs	r3, r3, #8
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	425b      	negs	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	da00      	bge.n	8001f7a <MPU9250_calibrateMPU9250+0x29e>
 8001f78:	3303      	adds	r3, #3
 8001f7a:	109b      	asrs	r3, r3, #2
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	425b      	negs	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	da00      	bge.n	8001f8c <MPU9250_calibrateMPU9250+0x2b0>
 8001f8a:	3303      	adds	r3, #3
 8001f8c:	109b      	asrs	r3, r3, #2
 8001f8e:	121b      	asrs	r3, r3, #8
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8001f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f98:	425b      	negs	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da00      	bge.n	8001fa0 <MPU9250_calibrateMPU9250+0x2c4>
 8001f9e:	3303      	adds	r3, #3
 8001fa0:	109b      	asrs	r3, r3, #2
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8001fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001faa:	425b      	negs	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	da00      	bge.n	8001fb2 <MPU9250_calibrateMPU9250+0x2d6>
 8001fb0:	3303      	adds	r3, #3
 8001fb2:	109b      	asrs	r3, r3, #2
 8001fb4:	121b      	asrs	r3, r3, #8
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	425b      	negs	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da00      	bge.n	8001fc6 <MPU9250_calibrateMPU9250+0x2ea>
 8001fc4:	3303      	adds	r3, #3
 8001fc6:	109b      	asrs	r3, r3, #2
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

/// Push gyro biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 8001fce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2113      	movs	r1, #19
 8001fd6:	20d0      	movs	r0, #208	; 0xd0
 8001fd8:	f000 f902 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 8001fdc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2114      	movs	r1, #20
 8001fe4:	20d0      	movs	r0, #208	; 0xd0
 8001fe6:	f000 f8fb 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 8001fea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2115      	movs	r1, #21
 8001ff2:	20d0      	movs	r0, #208	; 0xd0
 8001ff4:	f000 f8f4 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 8001ff8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2116      	movs	r1, #22
 8002000:	20d0      	movs	r0, #208	; 0xd0
 8002002:	f000 f8ed 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 8002006:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800200a:	461a      	mov	r2, r3
 800200c:	2117      	movs	r1, #23
 800200e:	20d0      	movs	r0, #208	; 0xd0
 8002010:	f000 f8e6 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 8002014:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002018:	461a      	mov	r2, r3
 800201a:	2118      	movs	r1, #24
 800201c:	20d0      	movs	r0, #208	; 0xd0
 800201e:	f000 f8df 	bl	80021e0 <MPU9250_writeByte>
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 800202e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002032:	2202      	movs	r2, #2
 8002034:	2177      	movs	r1, #119	; 0x77
 8002036:	20d0      	movs	r0, #208	; 0xd0
 8002038:	f000 f8f0 	bl	800221c <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800203c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b21b      	sxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
  MPU9250_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 800204e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002052:	2202      	movs	r2, #2
 8002054:	217a      	movs	r1, #122	; 0x7a
 8002056:	20d0      	movs	r0, #208	; 0xd0
 8002058:	f000 f8e0 	bl	800221c <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800205c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	b21b      	sxth	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
  MPU9250_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 800206e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002072:	2202      	movs	r2, #2
 8002074:	217d      	movs	r1, #125	; 0x7d
 8002076:	20d0      	movs	r0, #208	; 0xd0
 8002078:	f000 f8d0 	bl	800221c <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800207c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	b21b      	sxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800208a:	4313      	orrs	r3, r2
 800208c:	61fb      	str	r3, [r7, #28]

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 800208e:	2301      	movs	r3, #1
 8002090:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8002092:	2300      	movs	r3, #0
 8002094:	743b      	strb	r3, [r7, #16]
 8002096:	2300      	movs	r3, #0
 8002098:	747b      	strb	r3, [r7, #17]
 800209a:	2300      	movs	r3, #0
 800209c:	74bb      	strb	r3, [r7, #18]

  for(ii = 0; ii < 3; ii++) {
 800209e:	2300      	movs	r3, #0
 80020a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80020a4:	e01e      	b.n	80020e4 <MPU9250_calibrateMPU9250+0x408>
 80020a6:	bf00      	nop
 80020a8:	aaaaaaab 	.word	0xaaaaaaab
 80020ac:	200004c0 	.word	0x200004c0
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 80020b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80020ba:	4413      	add	r3, r2
 80020bc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80020c0:	461a      	mov	r2, r3
 80020c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <MPU9250_calibrateMPU9250+0x3fe>
 80020ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80020d2:	4413      	add	r3, r2
 80020d4:	2201      	movs	r2, #1
 80020d6:	f803 2c40 	strb.w	r2, [r3, #-64]
  for(ii = 0; ii < 3; ii++) {
 80020da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020de:	3301      	adds	r3, #1
 80020e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80020e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d9e1      	bls.n	80020b0 <MPU9250_calibrateMPU9250+0x3d4>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da00      	bge.n	80020f6 <MPU9250_calibrateMPU9250+0x41a>
 80020f4:	3307      	adds	r3, #7
 80020f6:	10db      	asrs	r3, r3, #3
 80020f8:	425b      	negs	r3, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	2b00      	cmp	r3, #0
 8002104:	da00      	bge.n	8002108 <MPU9250_calibrateMPU9250+0x42c>
 8002106:	3307      	adds	r3, #7
 8002108:	10db      	asrs	r3, r3, #3
 800210a:	425b      	negs	r3, r3
 800210c:	4413      	add	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	da00      	bge.n	800211a <MPU9250_calibrateMPU9250+0x43e>
 8002118:	3307      	adds	r3, #7
 800211a:	10db      	asrs	r3, r3, #3
 800211c:	425b      	negs	r3, r3
 800211e:	4413      	add	r3, r2
 8002120:	61fb      	str	r3, [r7, #28]

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	121b      	asrs	r3, r3, #8
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (accel_bias_reg[0])      & 0xFF;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002134:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8002138:	7c3b      	ldrb	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	121b      	asrs	r3, r3, #8
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (accel_bias_reg[1])      & 0xFF;
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002154:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002158:	7c7b      	ldrb	r3, [r7, #17]
 800215a:	4313      	orrs	r3, r2
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	121b      	asrs	r3, r3, #8
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (accel_bias_reg[2])      & 0xFF;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002174:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002178:	7cbb      	ldrb	r3, [r7, #18]
 800217a:	4313      	orrs	r3, r2
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

// Apparently this is not working for the acceleration biases in the MPU-9250
// Are we handling the temperature correction bit properly?
// Push accelerometer biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
 8002182:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002186:	461a      	mov	r2, r3
 8002188:	2177      	movs	r1, #119	; 0x77
 800218a:	20d0      	movs	r0, #208	; 0xd0
 800218c:	f000 f828 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
 8002190:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002194:	461a      	mov	r2, r3
 8002196:	2178      	movs	r1, #120	; 0x78
 8002198:	20d0      	movs	r0, #208	; 0xd0
 800219a:	f000 f821 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
 800219e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80021a2:	461a      	mov	r2, r3
 80021a4:	217a      	movs	r1, #122	; 0x7a
 80021a6:	20d0      	movs	r0, #208	; 0xd0
 80021a8:	f000 f81a 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
 80021ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80021b0:	461a      	mov	r2, r3
 80021b2:	217b      	movs	r1, #123	; 0x7b
 80021b4:	20d0      	movs	r0, #208	; 0xd0
 80021b6:	f000 f813 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
 80021ba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80021be:	461a      	mov	r2, r3
 80021c0:	217d      	movs	r1, #125	; 0x7d
 80021c2:	20d0      	movs	r0, #208	; 0xd0
 80021c4:	f000 f80c 	bl	80021e0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
 80021c8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80021cc:	461a      	mov	r2, r3
 80021ce:	217e      	movs	r1, #126	; 0x7e
 80021d0:	20d0      	movs	r0, #208	; 0xd0
 80021d2:	f000 f805 	bl	80021e0 <MPU9250_writeByte>

// Output scaled accelerometer biases for manual subtraction in the main program
//    MPU9250_accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
//    MPU9250_accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
//    MPU9250_accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
}
 80021d6:	bf00      	nop
 80021d8:	3750      	adds	r7, #80	; 0x50
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop

080021e0 <MPU9250_writeByte>:
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
}

void MPU9250_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	460b      	mov	r3, r1
 80021ec:	71bb      	strb	r3, [r7, #6]
 80021ee:	4613      	mov	r3, r2
 80021f0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(mpu9250.hi2c, address, subAddress, 1, &data, 1, MPU9250_DEFAULT_TIMEOUT);
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <MPU9250_writeByte+0x38>)
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	b299      	uxth	r1, r3
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	2364      	movs	r3, #100	; 0x64
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	2301      	movs	r3, #1
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	1d7b      	adds	r3, r7, #5
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2301      	movs	r3, #1
 800220c:	f008 fcd6 	bl	800abbc <HAL_I2C_Mem_Write>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200004c0 	.word	0x200004c0

0800221c <MPU9250_readBytes>:

void MPU9250_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b087      	sub	sp, #28
 8002220:	af04      	add	r7, sp, #16
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	4603      	mov	r3, r0
 8002226:	71fb      	strb	r3, [r7, #7]
 8002228:	460b      	mov	r3, r1
 800222a:	71bb      	strb	r3, [r7, #6]
 800222c:	4613      	mov	r3, r2
 800222e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(mpu9250.hi2c, address, subAddress, 1, (uint8_t*)dest, count, MPU9250_DEFAULT_TIMEOUT);
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <MPU9250_readBytes+0x40>)
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	b299      	uxth	r1, r3
 8002238:	79bb      	ldrb	r3, [r7, #6]
 800223a:	b29c      	uxth	r4, r3
 800223c:	797b      	ldrb	r3, [r7, #5]
 800223e:	b29b      	uxth	r3, r3
 8002240:	2264      	movs	r2, #100	; 0x64
 8002242:	9202      	str	r2, [sp, #8]
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2301      	movs	r3, #1
 800224c:	4622      	mov	r2, r4
 800224e:	f008 fdaf 	bl	800adb0 <HAL_I2C_Mem_Read>
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bd90      	pop	{r4, r7, pc}
 800225a:	bf00      	nop
 800225c:	200004c0 	.word	0x200004c0

08002260 <MPU9250_readByte>:

char MPU9250_readByte(uint8_t address, uint8_t subAddress)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	460a      	mov	r2, r1
 800226a:	71fb      	strb	r3, [r7, #7]
 800226c:	4613      	mov	r3, r2
 800226e:	71bb      	strb	r3, [r7, #6]
	char data; // `data` will store the register data
	MPU9250_readBytes(address, subAddress, 1, (uint8_t*)&data);
 8002270:	f107 030f 	add.w	r3, r7, #15
 8002274:	79b9      	ldrb	r1, [r7, #6]
 8002276:	79f8      	ldrb	r0, [r7, #7]
 8002278:	2201      	movs	r2, #1
 800227a:	f7ff ffcf 	bl	800221c <MPU9250_readBytes>
	return data;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <BME280_init>:
#include "bme280.h"
#include "math.h"

BME280_t bme280 = {0,};

void BME280_init(I2C_HandleTypeDef *hi2c, uint8_t Posr, uint8_t Hosr, uint8_t Tosr, uint8_t Mode, uint8_t IIRFilter, uint8_t SBy){
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	4608      	mov	r0, r1
 8002292:	4611      	mov	r1, r2
 8002294:	461a      	mov	r2, r3
 8002296:	4603      	mov	r3, r0
 8002298:	70fb      	strb	r3, [r7, #3]
 800229a:	460b      	mov	r3, r1
 800229c:	70bb      	strb	r3, [r7, #2]
 800229e:	4613      	mov	r3, r2
 80022a0:	707b      	strb	r3, [r7, #1]
	bme280.hi2c = hi2c;
 80022a2:	4a6f      	ldr	r2, [pc, #444]	; (8002460 <BME280_init+0x1d8>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6013      	str	r3, [r2, #0]
	BME280_reset();
 80022a8:	f000 f95a 	bl	8002560 <BME280_reset>
	// Configure the BME280
	// Set H oversampling rate
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_HUM, 0x07 & Hosr);
 80022ac:	78bb      	ldrb	r3, [r7, #2]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	21f2      	movs	r1, #242	; 0xf2
 80022b8:	20ec      	movs	r0, #236	; 0xec
 80022ba:	f000 fb45 	bl	8002948 <BME280_writeByte>
	// Set T and P oversampling rates and sensor mode
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_MEAS, Tosr << 5 | Posr << 2 | Mode);
 80022be:	787b      	ldrb	r3, [r7, #1]
 80022c0:	015b      	lsls	r3, r3, #5
 80022c2:	b25a      	sxtb	r2, r3
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	b25b      	sxtb	r3, r3
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b25a      	sxtb	r2, r3
 80022ce:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b25b      	sxtb	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	21f4      	movs	r1, #244	; 0xf4
 80022dc:	20ec      	movs	r0, #236	; 0xec
 80022de:	f000 fb33 	bl	8002948 <BME280_writeByte>
	// Set standby time interval in normal mode and bandwidth
	BME280_writeByte(BME280_ADDRESS, BME280_CONFIG, SBy << 5 | IIRFilter << 2);
 80022e2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80022e6:	015b      	lsls	r3, r3, #5
 80022e8:	b25a      	sxtb	r2, r3
 80022ea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	b25b      	sxtb	r3, r3
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	21f5      	movs	r1, #245	; 0xf5
 80022fc:	20ec      	movs	r0, #236	; 0xec
 80022fe:	f000 fb23 	bl	8002948 <BME280_writeByte>

	//wait.
	HAL_Delay(50);
 8002302:	2032      	movs	r0, #50	; 0x32
 8002304:	f007 fc98 	bl	8009c38 <HAL_Delay>
	uint8_t calib[26];
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB00, 26, &calib[0]);
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	221a      	movs	r2, #26
 800230e:	2188      	movs	r1, #136	; 0x88
 8002310:	20ec      	movs	r0, #236	; 0xec
 8002312:	f000 fb37 	bl	8002984 <BME280_readBytes>
	bme280._dig_T1 = (uint16_t)(((uint16_t) calib[1] << 8) | calib[0]);
 8002316:	7b7b      	ldrb	r3, [r7, #13]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	b21a      	sxth	r2, r3
 800231c:	7b3b      	ldrb	r3, [r7, #12]
 800231e:	b21b      	sxth	r3, r3
 8002320:	4313      	orrs	r3, r2
 8002322:	b21b      	sxth	r3, r3
 8002324:	b29a      	uxth	r2, r3
 8002326:	4b4e      	ldr	r3, [pc, #312]	; (8002460 <BME280_init+0x1d8>)
 8002328:	821a      	strh	r2, [r3, #16]
	bme280._dig_T2 = ( int16_t)((( int16_t) calib[3] << 8) | calib[2]);
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	b21a      	sxth	r2, r3
 8002330:	7bbb      	ldrb	r3, [r7, #14]
 8002332:	b21b      	sxth	r3, r3
 8002334:	4313      	orrs	r3, r2
 8002336:	b21a      	sxth	r2, r3
 8002338:	4b49      	ldr	r3, [pc, #292]	; (8002460 <BME280_init+0x1d8>)
 800233a:	831a      	strh	r2, [r3, #24]
	bme280._dig_T3 = ( int16_t)((( int16_t) calib[5] << 8) | calib[4]);
 800233c:	7c7b      	ldrb	r3, [r7, #17]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	b21a      	sxth	r2, r3
 8002342:	7c3b      	ldrb	r3, [r7, #16]
 8002344:	b21b      	sxth	r3, r3
 8002346:	4313      	orrs	r3, r2
 8002348:	b21a      	sxth	r2, r3
 800234a:	4b45      	ldr	r3, [pc, #276]	; (8002460 <BME280_init+0x1d8>)
 800234c:	835a      	strh	r2, [r3, #26]
	bme280._dig_P1 = (uint16_t)(((uint16_t) calib[7] << 8) | calib[6]);
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	b21a      	sxth	r2, r3
 8002354:	7cbb      	ldrb	r3, [r7, #18]
 8002356:	b21b      	sxth	r3, r3
 8002358:	4313      	orrs	r3, r2
 800235a:	b21b      	sxth	r3, r3
 800235c:	b29a      	uxth	r2, r3
 800235e:	4b40      	ldr	r3, [pc, #256]	; (8002460 <BME280_init+0x1d8>)
 8002360:	825a      	strh	r2, [r3, #18]
	bme280._dig_P2 = ( int16_t)((( int16_t) calib[9] << 8) | calib[8]);
 8002362:	7d7b      	ldrb	r3, [r7, #21]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b21a      	sxth	r2, r3
 8002368:	7d3b      	ldrb	r3, [r7, #20]
 800236a:	b21b      	sxth	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b21a      	sxth	r2, r3
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <BME280_init+0x1d8>)
 8002372:	839a      	strh	r2, [r3, #28]
	bme280._dig_P3 = ( int16_t)((( int16_t) calib[11] << 8) | calib[10]);
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	b21a      	sxth	r2, r3
 800237a:	7dbb      	ldrb	r3, [r7, #22]
 800237c:	b21b      	sxth	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	b21a      	sxth	r2, r3
 8002382:	4b37      	ldr	r3, [pc, #220]	; (8002460 <BME280_init+0x1d8>)
 8002384:	83da      	strh	r2, [r3, #30]
	bme280._dig_P4 = ( int16_t)((( int16_t) calib[13] << 8) | calib[12]);
 8002386:	7e7b      	ldrb	r3, [r7, #25]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	b21a      	sxth	r2, r3
 800238c:	7e3b      	ldrb	r3, [r7, #24]
 800238e:	b21b      	sxth	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b21a      	sxth	r2, r3
 8002394:	4b32      	ldr	r3, [pc, #200]	; (8002460 <BME280_init+0x1d8>)
 8002396:	841a      	strh	r2, [r3, #32]
	bme280._dig_P5 = ( int16_t)((( int16_t) calib[15] << 8) | calib[14]);
 8002398:	7efb      	ldrb	r3, [r7, #27]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	b21a      	sxth	r2, r3
 800239e:	7ebb      	ldrb	r3, [r7, #26]
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <BME280_init+0x1d8>)
 80023a8:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280._dig_P6 = ( int16_t)((( int16_t) calib[17] << 8) | calib[16]);
 80023aa:	7f7b      	ldrb	r3, [r7, #29]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	7f3b      	ldrb	r3, [r7, #28]
 80023b2:	b21b      	sxth	r3, r3
 80023b4:	4313      	orrs	r3, r2
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	4b29      	ldr	r3, [pc, #164]	; (8002460 <BME280_init+0x1d8>)
 80023ba:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280._dig_P7 = ( int16_t)((( int16_t) calib[19] << 8) | calib[18]);
 80023bc:	7ffb      	ldrb	r3, [r7, #31]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	b21a      	sxth	r2, r3
 80023c2:	7fbb      	ldrb	r3, [r7, #30]
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	4b25      	ldr	r3, [pc, #148]	; (8002460 <BME280_init+0x1d8>)
 80023cc:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280._dig_P8 = ( int16_t)((( int16_t) calib[21] << 8) | calib[20]);
 80023ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	b21a      	sxth	r2, r3
 80023d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023da:	b21b      	sxth	r3, r3
 80023dc:	4313      	orrs	r3, r2
 80023de:	b21a      	sxth	r2, r3
 80023e0:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <BME280_init+0x1d8>)
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280._dig_P9 = ( int16_t)((( int16_t) calib[23] << 8) | calib[22]);
 80023e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	4313      	orrs	r3, r2
 80023f4:	b21a      	sxth	r2, r3
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <BME280_init+0x1d8>)
 80023f8:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280._dig_H1 = calib[25];
 80023fa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80023fe:	4b18      	ldr	r3, [pc, #96]	; (8002460 <BME280_init+0x1d8>)
 8002400:	735a      	strb	r2, [r3, #13]
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB26, 7, &calib[0]);
 8002402:	f107 030c 	add.w	r3, r7, #12
 8002406:	2207      	movs	r2, #7
 8002408:	21e1      	movs	r1, #225	; 0xe1
 800240a:	20ec      	movs	r0, #236	; 0xec
 800240c:	f000 faba 	bl	8002984 <BME280_readBytes>
	bme280._dig_H2 = ( int16_t)((( int16_t) calib[1] << 8) | calib[0]);
 8002410:	7b7b      	ldrb	r3, [r7, #13]
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	b21a      	sxth	r2, r3
 8002416:	7b3b      	ldrb	r3, [r7, #12]
 8002418:	b21b      	sxth	r3, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	b21a      	sxth	r2, r3
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <BME280_init+0x1d8>)
 8002420:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280._dig_H3 = calib[2];
 8002422:	7bba      	ldrb	r2, [r7, #14]
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <BME280_init+0x1d8>)
 8002426:	739a      	strb	r2, [r3, #14]
	bme280._dig_H4 = ( int16_t)(((( int16_t) calib[3] << 8) | (0x0F & calib[4]) << 4) >> 4);
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	021a      	lsls	r2, r3, #8
 800242c:	7c3b      	ldrb	r3, [r7, #16]
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4313      	orrs	r3, r2
 8002434:	111b      	asrs	r3, r3, #4
 8002436:	b29a      	uxth	r2, r3
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <BME280_init+0x1d8>)
 800243a:	829a      	strh	r2, [r3, #20]
	bme280._dig_H5 = ( int16_t)(((( int16_t) calib[5] << 8) | (0xF0 & calib[4]) ) >> 4 );
 800243c:	7c7b      	ldrb	r3, [r7, #17]
 800243e:	021a      	lsls	r2, r3, #8
 8002440:	7c3b      	ldrb	r3, [r7, #16]
 8002442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002446:	4313      	orrs	r3, r2
 8002448:	111b      	asrs	r3, r3, #4
 800244a:	b29a      	uxth	r2, r3
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <BME280_init+0x1d8>)
 800244e:	82da      	strh	r2, [r3, #22]
	bme280._dig_H6 = calib[6];
 8002450:	7cba      	ldrb	r2, [r7, #18]
 8002452:	4b03      	ldr	r3, [pc, #12]	; (8002460 <BME280_init+0x1d8>)
 8002454:	73da      	strb	r2, [r3, #15]
}
 8002456:	bf00      	nop
 8002458:	3728      	adds	r7, #40	; 0x28
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000320 	.word	0x20000320

08002464 <BME280_readIT>:

void BME280_readIT(){
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af02      	add	r7, sp, #8
	if(bm_i2cFlag == bm_i2cIdle){
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <BME280_readIT+0x30>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10e      	bne.n	8002490 <BME280_readIT+0x2c>
		HAL_I2C_Mem_Read_IT(bme280.hi2c, BME280_ADDRESS, BME280_PRESS_MSB, 1, bme280.buf, 6);
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <BME280_readIT+0x34>)
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	2306      	movs	r3, #6
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <BME280_readIT+0x38>)
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2301      	movs	r3, #1
 8002480:	22f7      	movs	r2, #247	; 0xf7
 8002482:	21ec      	movs	r1, #236	; 0xec
 8002484:	f008 feba 	bl	800b1fc <HAL_I2C_Mem_Read_IT>
		bm_i2cFlag = bm_i2cBME280;
 8002488:	4b02      	ldr	r3, [pc, #8]	; (8002494 <BME280_readIT+0x30>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
		return;
 800248e:	bf00      	nop
	}

}
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000854 	.word	0x20000854
 8002498:	20000320 	.word	0x20000320
 800249c:	20000324 	.word	0x20000324

080024a0 <BME280_i2cRxCpltCallback>:

void BME280_i2cRxCpltCallback(){
 80024a0:	b598      	push	{r3, r4, r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cBME280) return;
 80024a4:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <BME280_i2cRxCpltCallback+0xb0>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d14e      	bne.n	800254a <BME280_i2cRxCpltCallback+0xaa>
    bme280.countP = (int32_t) (((int32_t) bme280.buf[0] << 24 | (int32_t) bme280.buf[1] << 16 | (int32_t) bme280.buf[2] << 8) >> 12);
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <BME280_i2cRxCpltCallback+0xb4>)
 80024ae:	791b      	ldrb	r3, [r3, #4]
 80024b0:	061a      	lsls	r2, r3, #24
 80024b2:	4b28      	ldr	r3, [pc, #160]	; (8002554 <BME280_i2cRxCpltCallback+0xb4>)
 80024b4:	795b      	ldrb	r3, [r3, #5]
 80024b6:	041b      	lsls	r3, r3, #16
 80024b8:	431a      	orrs	r2, r3
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <BME280_i2cRxCpltCallback+0xb4>)
 80024bc:	799b      	ldrb	r3, [r3, #6]
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	4313      	orrs	r3, r2
 80024c2:	131b      	asrs	r3, r3, #12
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b23      	ldr	r3, [pc, #140]	; (8002554 <BME280_i2cRxCpltCallback+0xb4>)
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
    bme280.countT = (int32_t) (((int32_t) bme280.buf[3] << 24 | (int32_t) bme280.buf[4] << 16 | (int32_t) bme280.buf[5] << 8) >> 12);
 80024ca:	4b22      	ldr	r3, [pc, #136]	; (8002554 <BME280_i2cRxCpltCallback+0xb4>)
 80024cc:	79db      	ldrb	r3, [r3, #7]
 80024ce:	061a      	lsls	r2, r3, #24
 80024d0:	4b20      	ldr	r3, [pc, #128]	; (8002554 <BME280_i2cRxCpltCallback+0xb4>)
 80024d2:	7a1b      	ldrb	r3, [r3, #8]
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <BME280_i2cRxCpltCallback+0xb4>)
 80024da:	7a5b      	ldrb	r3, [r3, #9]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	4313      	orrs	r3, r2
 80024e0:	131b      	asrs	r3, r3, #12
 80024e2:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <BME280_i2cRxCpltCallback+0xb4>)
 80024e4:	6353      	str	r3, [r2, #52]	; 0x34

    // change to hPa
    bme280.P = BME280_compensate_P(bme280.countP)/25600.0;	/*[hPa]*/
 80024e6:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <BME280_i2cRxCpltCallback+0xb4>)
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f87e 	bl	80025ec <BME280_compensate_P>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f816 	bl	8000524 <__aeabi_ui2d>
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <BME280_i2cRxCpltCallback+0xb8>)
 80024fe:	f7fe f9b5 	bl	800086c <__aeabi_ddiv>
 8002502:	4603      	mov	r3, r0
 8002504:	460c      	mov	r4, r1
 8002506:	4618      	mov	r0, r3
 8002508:	4621      	mov	r1, r4
 800250a:	f7fe fb7d 	bl	8000c08 <__aeabi_d2f>
 800250e:	4602      	mov	r2, r0
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <BME280_i2cRxCpltCallback+0xb4>)
 8002512:	645a      	str	r2, [r3, #68]	; 0x44
    bme280.T = BME280_compensate_T(bme280.countT)/100.0;	/*[degC]*/
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <BME280_i2cRxCpltCallback+0xb4>)
 8002516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f82b 	bl	8002574 <BME280_compensate_T>
 800251e:	4603      	mov	r3, r0
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f80f 	bl	8000544 <__aeabi_i2d>
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <BME280_i2cRxCpltCallback+0xbc>)
 800252c:	f7fe f99e 	bl	800086c <__aeabi_ddiv>
 8002530:	4603      	mov	r3, r0
 8002532:	460c      	mov	r4, r1
 8002534:	4618      	mov	r0, r3
 8002536:	4621      	mov	r1, r4
 8002538:	f7fe fb66 	bl	8000c08 <__aeabi_d2f>
 800253c:	4602      	mov	r2, r0
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <BME280_i2cRxCpltCallback+0xb4>)
 8002540:	641a      	str	r2, [r3, #64]	; 0x40

//    bme280.alt = 44330 * (1.0 - pow(bme280.P / bme280.base_P, 0.1903));

    bm_i2cFlag = bm_i2cIdle;
 8002542:	4b03      	ldr	r3, [pc, #12]	; (8002550 <BME280_i2cRxCpltCallback+0xb0>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e000      	b.n	800254c <BME280_i2cRxCpltCallback+0xac>
	if(bm_i2cFlag != bm_i2cBME280) return;
 800254a:	bf00      	nop
}
 800254c:	bd98      	pop	{r3, r4, r7, pc}
 800254e:	bf00      	nop
 8002550:	20000854 	.word	0x20000854
 8002554:	20000320 	.word	0x20000320
 8002558:	40d90000 	.word	0x40d90000
 800255c:	40590000 	.word	0x40590000

08002560 <BME280_reset>:

uint8_t BME280_getChipID(){
	  uint8_t c = BME280_readByte(BME280_ADDRESS, BME280_ID);
	  return c;
}
void BME280_reset(){
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	BME280_writeByte(BME280_ADDRESS, BME280_RESET, 0xB6);
 8002564:	22b6      	movs	r2, #182	; 0xb6
 8002566:	21e0      	movs	r1, #224	; 0xe0
 8002568:	20ec      	movs	r0, #236	; 0xec
 800256a:	f000 f9ed 	bl	8002948 <BME280_writeByte>
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <BME280_compensate_T>:



// Returns temperature in DegC, resolution is 0.01 DegC. Output value of
// “5123” equals 51.23 DegC.
int32_t BME280_compensate_T(int32_t adc_T){
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T >> 3) - ((int32_t)bme280._dig_T1 << 1))) * ((int32_t)bme280._dig_T2)) >> 11;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	10da      	asrs	r2, r3, #3
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <BME280_compensate_T+0x74>)
 8002582:	8a1b      	ldrh	r3, [r3, #16]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <BME280_compensate_T+0x74>)
 800258a:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	12db      	asrs	r3, r3, #11
 8002594:	617b      	str	r3, [r7, #20]
	  var2 = (((((adc_T >> 4) - ((int32_t)bme280._dig_T1)) * ((adc_T >> 4) - ((int32_t)bme280._dig_T1))) >> 12) * ((int32_t)bme280._dig_T3)) >> 14;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	111b      	asrs	r3, r3, #4
 800259a:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <BME280_compensate_T+0x74>)
 800259c:	8a12      	ldrh	r2, [r2, #16]
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	1112      	asrs	r2, r2, #4
 80025a4:	4910      	ldr	r1, [pc, #64]	; (80025e8 <BME280_compensate_T+0x74>)
 80025a6:	8a09      	ldrh	r1, [r1, #16]
 80025a8:	1a52      	subs	r2, r2, r1
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	131b      	asrs	r3, r3, #12
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <BME280_compensate_T+0x74>)
 80025b2:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	139b      	asrs	r3, r3, #14
 80025bc:	613b      	str	r3, [r7, #16]
	  bme280._t_fine = var1 + var2;
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4413      	add	r3, r2
 80025c4:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <BME280_compensate_T+0x74>)
 80025c6:	6313      	str	r3, [r2, #48]	; 0x30
	  T = (bme280._t_fine * 5 + 128) >> 8;
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <BME280_compensate_T+0x74>)
 80025ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3380      	adds	r3, #128	; 0x80
 80025d4:	121b      	asrs	r3, r3, #8
 80025d6:	60fb      	str	r3, [r7, #12]
	  return T;
 80025d8:	68fb      	ldr	r3, [r7, #12]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000320 	.word	0x20000320

080025ec <BME280_compensate_P>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8
//fractional bits).
//Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t BME280_compensate_P(int32_t adc_P){
 80025ec:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80025f0:	b088      	sub	sp, #32
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
	  int64_t var1, var2, p;
	  var1 = ((int64_t)bme280._t_fine) - 128000;
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <BME280_compensate_P+0x1a0>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4619      	mov	r1, r3
 80025fc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002600:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8002604:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002608:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)bme280._dig_P6;
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	fb02 f203 	mul.w	r2, r2, r3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	69b9      	ldr	r1, [r7, #24]
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	441a      	add	r2, r3
 800261e:	69b9      	ldr	r1, [r7, #24]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	fba1 3403 	umull	r3, r4, r1, r3
 8002626:	4422      	add	r2, r4
 8002628:	4614      	mov	r4, r2
 800262a:	4a58      	ldr	r2, [pc, #352]	; (800278c <BME280_compensate_P+0x1a0>)
 800262c:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8002630:	b211      	sxth	r1, r2
 8002632:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002636:	fb01 f504 	mul.w	r5, r1, r4
 800263a:	fb03 f002 	mul.w	r0, r3, r2
 800263e:	4428      	add	r0, r5
 8002640:	fba3 3401 	umull	r3, r4, r3, r1
 8002644:	1902      	adds	r2, r0, r4
 8002646:	4614      	mov	r4, r2
 8002648:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800264c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1*(int64_t)bme280._dig_P5)<<17);
 8002650:	4b4e      	ldr	r3, [pc, #312]	; (800278c <BME280_compensate_P+0x1a0>)
 8002652:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002656:	b21b      	sxth	r3, r3
 8002658:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	fb04 f102 	mul.w	r1, r4, r2
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	fb03 f202 	mul.w	r2, r3, r2
 8002668:	1888      	adds	r0, r1, r2
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	fba2 1203 	umull	r1, r2, r2, r3
 8002670:	1883      	adds	r3, r0, r2
 8002672:	461a      	mov	r2, r3
 8002674:	f04f 0500 	mov.w	r5, #0
 8002678:	f04f 0600 	mov.w	r6, #0
 800267c:	0456      	lsls	r6, r2, #17
 800267e:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8002682:	044d      	lsls	r5, r1, #17
 8002684:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002688:	186b      	adds	r3, r5, r1
 800268a:	eb46 0402 	adc.w	r4, r6, r2
 800268e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)bme280._dig_P4)<<35);
 8002692:	4b3e      	ldr	r3, [pc, #248]	; (800278c <BME280_compensate_P+0x1a0>)
 8002694:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002698:	b219      	sxth	r1, r3
 800269a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800269e:	f04f 0500 	mov.w	r5, #0
 80026a2:	f04f 0600 	mov.w	r6, #0
 80026a6:	00ce      	lsls	r6, r1, #3
 80026a8:	2500      	movs	r5, #0
 80026aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80026ae:	186b      	adds	r3, r5, r1
 80026b0:	eb46 0402 	adc.w	r4, r6, r2
 80026b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)bme280._dig_P3)>>8) + ((var1 * (int64_t)bme280._dig_P2)<<12);
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	fb02 f203 	mul.w	r2, r2, r3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	69b9      	ldr	r1, [r7, #24]
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	441a      	add	r2, r3
 80026ca:	69b9      	ldr	r1, [r7, #24]
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	fba1 3403 	umull	r3, r4, r1, r3
 80026d2:	4422      	add	r2, r4
 80026d4:	4614      	mov	r4, r2
 80026d6:	4a2d      	ldr	r2, [pc, #180]	; (800278c <BME280_compensate_P+0x1a0>)
 80026d8:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 80026dc:	b211      	sxth	r1, r2
 80026de:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80026e2:	fb01 f504 	mul.w	r5, r1, r4
 80026e6:	fb03 f002 	mul.w	r0, r3, r2
 80026ea:	4428      	add	r0, r5
 80026ec:	fba3 3401 	umull	r3, r4, r3, r1
 80026f0:	1902      	adds	r2, r0, r4
 80026f2:	4614      	mov	r4, r2
 80026f4:	f04f 0100 	mov.w	r1, #0
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	0a19      	lsrs	r1, r3, #8
 80026fe:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8002702:	1222      	asrs	r2, r4, #8
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <BME280_compensate_P+0x1a0>)
 8002706:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800270a:	b21b      	sxth	r3, r3
 800270c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002710:	69b8      	ldr	r0, [r7, #24]
 8002712:	fb04 f500 	mul.w	r5, r4, r0
 8002716:	69f8      	ldr	r0, [r7, #28]
 8002718:	fb03 f000 	mul.w	r0, r3, r0
 800271c:	4428      	add	r0, r5
 800271e:	69bd      	ldr	r5, [r7, #24]
 8002720:	fba5 5603 	umull	r5, r6, r5, r3
 8002724:	1983      	adds	r3, r0, r6
 8002726:	461e      	mov	r6, r3
 8002728:	f04f 0b00 	mov.w	fp, #0
 800272c:	f04f 0c00 	mov.w	ip, #0
 8002730:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8002734:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8002738:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 800273c:	eb1b 0301 	adds.w	r3, fp, r1
 8002740:	eb4c 0402 	adc.w	r4, ip, r2
 8002744:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bme280._dig_P1)>>33;
 8002748:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800274c:	1c19      	adds	r1, r3, #0
 800274e:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <BME280_compensate_P+0x1a0>)
 8002754:	8a5b      	ldrh	r3, [r3, #18]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f04f 0400 	mov.w	r4, #0
 800275c:	fb03 f502 	mul.w	r5, r3, r2
 8002760:	fb01 f004 	mul.w	r0, r1, r4
 8002764:	4428      	add	r0, r5
 8002766:	fba1 3403 	umull	r3, r4, r1, r3
 800276a:	1902      	adds	r2, r0, r4
 800276c:	4614      	mov	r4, r2
 800276e:	f04f 0100 	mov.w	r1, #0
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	1061      	asrs	r1, r4, #1
 8002778:	17e2      	asrs	r2, r4, #31
 800277a:	e9c7 1206 	strd	r1, r2, [r7, #24]
	  if(var1 == 0)
 800277e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002782:	4323      	orrs	r3, r4
 8002784:	d104      	bne.n	8002790 <BME280_compensate_P+0x1a4>
	  {
	    return 0;
 8002786:	2300      	movs	r3, #0
 8002788:	e0d7      	b.n	800293a <BME280_compensate_P+0x34e>
 800278a:	bf00      	nop
 800278c:	20000320 	.word	0x20000320
	    // avoid exception caused by division by zero
	  }
	  p = 1048576 - adc_P;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002796:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800279a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p<<31) - var2)*3125)/var1;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	ea4f 0963 	mov.w	r9, r3, asr #1
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80027aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80027ae:	4645      	mov	r5, r8
 80027b0:	464e      	mov	r6, r9
 80027b2:	1aed      	subs	r5, r5, r3
 80027b4:	eb66 0604 	sbc.w	r6, r6, r4
 80027b8:	46a8      	mov	r8, r5
 80027ba:	46b1      	mov	r9, r6
 80027bc:	eb18 0308 	adds.w	r3, r8, r8
 80027c0:	eb49 0409 	adc.w	r4, r9, r9
 80027c4:	4698      	mov	r8, r3
 80027c6:	46a1      	mov	r9, r4
 80027c8:	eb18 0805 	adds.w	r8, r8, r5
 80027cc:	eb49 0906 	adc.w	r9, r9, r6
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80027dc:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80027e0:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80027e4:	eb18 0801 	adds.w	r8, r8, r1
 80027e8:	eb49 0902 	adc.w	r9, r9, r2
 80027ec:	f04f 0100 	mov.w	r1, #0
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80027f8:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80027fc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002800:	4688      	mov	r8, r1
 8002802:	4691      	mov	r9, r2
 8002804:	eb18 0805 	adds.w	r8, r8, r5
 8002808:	eb49 0906 	adc.w	r9, r9, r6
 800280c:	f04f 0100 	mov.w	r1, #0
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002818:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800281c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002820:	4688      	mov	r8, r1
 8002822:	4691      	mov	r9, r2
 8002824:	eb18 0005 	adds.w	r0, r8, r5
 8002828:	eb49 0106 	adc.w	r1, r9, r6
 800282c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002830:	f7fe fb48 	bl	8000ec4 <__aeabi_ldivmod>
 8002834:	4603      	mov	r3, r0
 8002836:	460c      	mov	r4, r1
 8002838:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)bme280._dig_P9) * (p>>13) * (p>>13)) >> 25;
 800283c:	4b41      	ldr	r3, [pc, #260]	; (8002944 <BME280_compensate_P+0x358>)
 800283e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002842:	b219      	sxth	r1, r3
 8002844:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002848:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	f04f 0400 	mov.w	r4, #0
 8002854:	0b6b      	lsrs	r3, r5, #13
 8002856:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800285a:	1374      	asrs	r4, r6, #13
 800285c:	fb03 f502 	mul.w	r5, r3, r2
 8002860:	fb01 f004 	mul.w	r0, r1, r4
 8002864:	4428      	add	r0, r5
 8002866:	fba1 1203 	umull	r1, r2, r1, r3
 800286a:	1883      	adds	r3, r0, r2
 800286c:	461a      	mov	r2, r3
 800286e:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	f04f 0400 	mov.w	r4, #0
 800287a:	0b6b      	lsrs	r3, r5, #13
 800287c:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002880:	1374      	asrs	r4, r6, #13
 8002882:	fb03 f502 	mul.w	r5, r3, r2
 8002886:	fb01 f004 	mul.w	r0, r1, r4
 800288a:	4428      	add	r0, r5
 800288c:	fba1 1203 	umull	r1, r2, r1, r3
 8002890:	1883      	adds	r3, r0, r2
 8002892:	461a      	mov	r2, r3
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	f04f 0400 	mov.w	r4, #0
 800289c:	0e4b      	lsrs	r3, r1, #25
 800289e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80028a2:	1654      	asrs	r4, r2, #25
 80028a4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)bme280._dig_P8) * p)>> 19;
 80028a8:	4b26      	ldr	r3, [pc, #152]	; (8002944 <BME280_compensate_P+0x358>)
 80028aa:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	fb04 f102 	mul.w	r1, r4, r2
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	fb03 f202 	mul.w	r2, r3, r2
 80028c0:	1888      	adds	r0, r1, r2
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	fba2 1203 	umull	r1, r2, r2, r3
 80028c8:	1883      	adds	r3, r0, r2
 80028ca:	461a      	mov	r2, r3
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	f04f 0400 	mov.w	r4, #0
 80028d4:	0ccb      	lsrs	r3, r1, #19
 80028d6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80028da:	14d4      	asrs	r4, r2, #19
 80028dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  p = ((p + var1 + var2) >> 8) + (((int64_t)bme280._dig_P7)<<4);
 80028e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80028e4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80028e8:	eb11 0803 	adds.w	r8, r1, r3
 80028ec:	eb42 0904 	adc.w	r9, r2, r4
 80028f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80028f4:	eb13 0508 	adds.w	r5, r3, r8
 80028f8:	eb44 0609 	adc.w	r6, r4, r9
 80028fc:	f04f 0100 	mov.w	r1, #0
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	0a29      	lsrs	r1, r5, #8
 8002906:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800290a:	1232      	asrs	r2, r6, #8
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <BME280_compensate_P+0x358>)
 800290e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002912:	b21d      	sxth	r5, r3
 8002914:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002918:	f04f 0800 	mov.w	r8, #0
 800291c:	f04f 0900 	mov.w	r9, #0
 8002920:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002924:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8002928:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800292c:	eb18 0301 	adds.w	r3, r8, r1
 8002930:	eb49 0402 	adc.w	r4, r9, r2
 8002934:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return (uint32_t)p;
 8002938:	68bb      	ldr	r3, [r7, #8]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3720      	adds	r7, #32
 800293e:	46bd      	mov	sp, r7
 8002940:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8002944:	20000320 	.word	0x20000320

08002948 <BME280_writeByte>:
	var = (var < 0 ? 0 : var);
	var = (var > 419430400 ? 419430400 : var);
	return(uint32_t)(var >> 12);
}

void BME280_writeByte(uint8_t address, uint8_t subAddress, uint8_t data){
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af04      	add	r7, sp, #16
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
 8002952:	460b      	mov	r3, r1
 8002954:	71bb      	strb	r3, [r7, #6]
 8002956:	4613      	mov	r3, r2
 8002958:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(bme280.hi2c, address, subAddress, 1, &data, 1, BME_DEFAULT_TIMEOUT);
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <BME280_writeByte+0x38>)
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	b299      	uxth	r1, r3
 8002962:	79bb      	ldrb	r3, [r7, #6]
 8002964:	b29a      	uxth	r2, r3
 8002966:	2364      	movs	r3, #100	; 0x64
 8002968:	9302      	str	r3, [sp, #8]
 800296a:	2301      	movs	r3, #1
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	1d7b      	adds	r3, r7, #5
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2301      	movs	r3, #1
 8002974:	f008 f922 	bl	800abbc <HAL_I2C_Mem_Write>
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000320 	.word	0x20000320

08002984 <BME280_readBytes>:
void BME280_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b087      	sub	sp, #28
 8002988:	af04      	add	r7, sp, #16
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	4603      	mov	r3, r0
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	460b      	mov	r3, r1
 8002992:	71bb      	strb	r3, [r7, #6]
 8002994:	4613      	mov	r3, r2
 8002996:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(bme280.hi2c, address, subAddress, 1, (uint8_t*)dest, count, BME_DEFAULT_TIMEOUT);
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <BME280_readBytes+0x40>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	b299      	uxth	r1, r3
 80029a0:	79bb      	ldrb	r3, [r7, #6]
 80029a2:	b29c      	uxth	r4, r3
 80029a4:	797b      	ldrb	r3, [r7, #5]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2264      	movs	r2, #100	; 0x64
 80029aa:	9202      	str	r2, [sp, #8]
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2301      	movs	r3, #1
 80029b4:	4622      	mov	r2, r4
 80029b6:	f008 f9fb 	bl	800adb0 <HAL_I2C_Mem_Read>
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd90      	pop	{r4, r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000320 	.word	0x20000320

080029c8 <TM_GPS_Init>:
#define TM_GPS_INT_Add2CRC(c)                            (TM_GPS_CRC ^= c)
#define TM_GPS_INT_ReturnWithStatus(GPS_Data, status)    (GPS_Data)->Status = status; return status;
#define TM_GPS_INT_SetFlag(flag)                         (GPS_Flags |= (flag))

/* Public */
void TM_GPS_Init(UART_HandleTypeDef* huart) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	/* Initialize USART */
	TM_GPS_FirstTime = 1;
 80029d0:	4b46      	ldr	r3, [pc, #280]	; (8002aec <TM_GPS_Init+0x124>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]
	
	/* Reset everything */
	gpsUart.gpsData.CustomStatementsCount = 0;
 80029d6:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <TM_GPS_Init+0x128>)
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	
	/* Clear all flags */
	TM_GPS_INT_ClearFlags(&gpsUart.gpsData);
 80029de:	4844      	ldr	r0, [pc, #272]	; (8002af0 <TM_GPS_Init+0x128>)
 80029e0:	f001 f9f6 	bl	8003dd0 <TM_GPS_INT_ClearFlags>
	
	/* Set flags used */
#ifndef GPS_DISABLE_GPGGA
	GPS_Flags_OK |= GPS_FLAG_LATITUDE;
 80029e4:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <TM_GPS_Init+0x12c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	4a41      	ldr	r2, [pc, #260]	; (8002af4 <TM_GPS_Init+0x12c>)
 80029ee:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_NS;
 80029f0:	4b40      	ldr	r3, [pc, #256]	; (8002af4 <TM_GPS_Init+0x12c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f8:	4a3e      	ldr	r2, [pc, #248]	; (8002af4 <TM_GPS_Init+0x12c>)
 80029fa:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_LONGITUDE;
 80029fc:	4b3d      	ldr	r3, [pc, #244]	; (8002af4 <TM_GPS_Init+0x12c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	4a3b      	ldr	r2, [pc, #236]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a06:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_EW;
 8002a08:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f043 0320 	orr.w	r3, r3, #32
 8002a10:	4a38      	ldr	r2, [pc, #224]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a12:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS;
 8002a14:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	4a35      	ldr	r2, [pc, #212]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a1e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIX;
 8002a20:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f043 0308 	orr.w	r3, r3, #8
 8002a28:	4a32      	ldr	r2, [pc, #200]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a2a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_ALTITUDE;
 8002a2c:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f043 0310 	orr.w	r3, r3, #16
 8002a34:	4a2f      	ldr	r2, [pc, #188]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a36:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_TIME;
 8002a38:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a40:	4a2c      	ldr	r2, [pc, #176]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a42:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPRMC
	GPS_Flags_OK |= GPS_FLAG_SPEED;
 8002a44:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4c:	4a29      	ldr	r2, [pc, #164]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a4e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DATE;
 8002a50:	4b28      	ldr	r3, [pc, #160]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a58:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a5a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VALIDITY;
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a64:	4a23      	ldr	r2, [pc, #140]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a66:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DIRECTION;
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a70:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a72:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSA
	GPS_Flags_OK |= GPS_FLAG_HDOP;
 8002a74:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a7e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VDOP;
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a88:	4a1a      	ldr	r2, [pc, #104]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a8a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_PDOP;
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a94:	4a17      	ldr	r2, [pc, #92]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a96:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIXMODE;
 8002a98:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002aa2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS1_12;
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aac:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002aae:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSV	
	GPS_Flags_OK |= GPS_FLAG_SATSINVIEW;
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002aba:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATSDESC;
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <TM_GPS_Init+0x12c>)
 8002ac6:	6013      	str	r3, [r2, #0]
#endif
	gpsUart.huart = huart;
 8002ac8:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <TM_GPS_Init+0x128>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	HAL_UART_Receive_DMA(gpsUart.huart, gpsUart.GPS_DmaBuf, GPS_DMA_BUF_SIZE);
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <TM_GPS_Init+0x128>)
 8002ad2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002ad6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ada:	4907      	ldr	r1, [pc, #28]	; (8002af8 <TM_GPS_Init+0x130>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00e f903 	bl	8010ce8 <HAL_UART_Receive_DMA>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200004b0 	.word	0x200004b0
 8002af0:	200005e0 	.word	0x200005e0
 8002af4:	20000384 	.word	0x20000384
 8002af8:	2000070c 	.word	0x2000070c

08002afc <TM_GPS_Update>:

TM_GPS_Result_t TM_GPS_Update() {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0

	TM_GPS_Result_t result = TM_GPS_Result_OldData;
 8002b02:	2301      	movs	r3, #1
 8002b04:	71fb      	strb	r3, [r7, #7]
//	HAL_UART_Transmit(&huart3, GPS_DmaBuf, GPS_DMA_BUF_SIZE, 100);
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002b06:	2300      	movs	r3, #0
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	e013      	b.n	8002b34 <TM_GPS_Update+0x38>
		TM_GPS_INT_Do(&gpsUart.gpsData, (char)gpsUart.GPS_DmaBuf[i]);
 8002b0c:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <TM_GPS_Update+0x60>)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4810      	ldr	r0, [pc, #64]	; (8002b5c <TM_GPS_Update+0x60>)
 8002b1c:	f000 f8da 	bl	8002cd4 <TM_GPS_INT_Do>
		if (gpsUart.gpsData.Status == TM_GPS_Result_NewData) {
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <TM_GPS_Update+0x60>)
 8002b22:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <TM_GPS_Update+0x32>
//			return gps.Status;
//			gps->Status = TM_GPS_Result_OldData;
			result = TM_GPS_Result_NewData;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	3301      	adds	r3, #1
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002b3a:	dbe7      	blt.n	8002b0c <TM_GPS_Update+0x10>
		}
	}
//	}
	
	if (TM_GPS_FirstTime) {
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <TM_GPS_Update+0x64>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <TM_GPS_Update+0x54>
		/* No any valid data, return First Data Waiting */
		/* Returning only after power up and calling when no all data is received */
		TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_FirstDataWaiting);
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <TM_GPS_Update+0x60>)
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e000      	b.n	8002b52 <TM_GPS_Update+0x56>
	}
	
	/* We have old data */
//	TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_OldData);

	return result;
 8002b50:	79fb      	ldrb	r3, [r7, #7]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200005e0 	.word	0x200005e0
 8002b60:	200004b0 	.word	0x200004b0

08002b64 <TM_GPS_ConvertSpeed>:
	
	return temp;										/* Return pointer */
}
#endif

float TM_GPS_ConvertSpeed(float SpeedInKnots, TM_GPS_Speed_t toSpeed) {
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b6e:	4603      	mov	r3, r0
 8002b70:	70fb      	strb	r3, [r7, #3]
	switch ((uint8_t)toSpeed) {
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	2b0e      	cmp	r3, #14
 8002b76:	f200 8086 	bhi.w	8002c86 <TM_GPS_ConvertSpeed+0x122>
 8002b7a:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <TM_GPS_ConvertSpeed+0x1c>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002bbd 	.word	0x08002bbd
 8002b84:	08002bcb 	.word	0x08002bcb
 8002b88:	08002bd9 	.word	0x08002bd9
 8002b8c:	08002be7 	.word	0x08002be7
 8002b90:	08002bf5 	.word	0x08002bf5
 8002b94:	08002c03 	.word	0x08002c03
 8002b98:	08002c11 	.word	0x08002c11
 8002b9c:	08002c1f 	.word	0x08002c1f
 8002ba0:	08002c2d 	.word	0x08002c2d
 8002ba4:	08002c3b 	.word	0x08002c3b
 8002ba8:	08002c49 	.word	0x08002c49
 8002bac:	08002c57 	.word	0x08002c57
 8002bb0:	08002c65 	.word	0x08002c65
 8002bb4:	08002c73 	.word	0x08002c73
 8002bb8:	08002c81 	.word	0x08002c81
		/* Metric */
		case TM_GPS_Speed_KilometerPerSecond:	return SpeedInKnots * 0.000514f;
 8002bbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bc0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002c98 <TM_GPS_ConvertSpeed+0x134>
 8002bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc8:	e05f      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerSecond: 		return SpeedInKnots * 0.5144f;
 8002bca:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bce:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002c9c <TM_GPS_ConvertSpeed+0x138>
 8002bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd6:	e058      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_KilometerPerHour:	 	return SpeedInKnots * 1.852f;
 8002bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bdc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002ca0 <TM_GPS_ConvertSpeed+0x13c>
 8002be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be4:	e051      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerMinute: 		return SpeedInKnots * 30.87f;
 8002be6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bea:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002ca4 <TM_GPS_ConvertSpeed+0x140>
 8002bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf2:	e04a      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		
		/* Imperial */
		case TM_GPS_Speed_MilePerSecond: 		return SpeedInKnots * 0.0003197f;
 8002bf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bf8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002ca8 <TM_GPS_ConvertSpeed+0x144>
 8002bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c00:	e043      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MilePerHour: 			return SpeedInKnots * 1.151f;
 8002c02:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c06:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002cac <TM_GPS_ConvertSpeed+0x148>
 8002c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c0e:	e03c      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerSecond: 		return SpeedInKnots * 1.688f;
 8002c10:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c14:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002cb0 <TM_GPS_ConvertSpeed+0x14c>
 8002c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c1c:	e035      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerMinute: 		return SpeedInKnots * 101.3f;
 8002c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c22:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002cb4 <TM_GPS_ConvertSpeed+0x150>
 8002c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2a:	e02e      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		
		/* For Runners and Joggers */
		case TM_GPS_Speed_MinutePerKilometer: 	return SpeedInKnots * 32.4f;
 8002c2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c30:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002cb8 <TM_GPS_ConvertSpeed+0x154>
 8002c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c38:	e027      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerKilometer: 	return SpeedInKnots * 1944.0f;
 8002c3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c3e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002cbc <TM_GPS_ConvertSpeed+0x158>
 8002c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c46:	e020      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Meters: 	return SpeedInKnots * 194.4f;
 8002c48:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c4c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002cc0 <TM_GPS_ConvertSpeed+0x15c>
 8002c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c54:	e019      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MinutePerMile: 		return SpeedInKnots * 52.14f;
 8002c56:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c5a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002cc4 <TM_GPS_ConvertSpeed+0x160>
 8002c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c62:	e012      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerMile: 		return SpeedInKnots * 3128.0f;
 8002c64:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c68:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002cc8 <TM_GPS_ConvertSpeed+0x164>
 8002c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c70:	e00b      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Yards: 	return SpeedInKnots * 177.7f;
 8002c72:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c76:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002ccc <TM_GPS_ConvertSpeed+0x168>
 8002c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c7e:	e004      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		
		/* Nautical */
		case TM_GPS_Speed_SeaMilePerHour: 		return SpeedInKnots * 1.0f;
 8002c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c84:	e001      	b.n	8002c8a <TM_GPS_ConvertSpeed+0x126>
		default:
			return 0;
 8002c86:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002cd0 <TM_GPS_ConvertSpeed+0x16c>
	}
}
 8002c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	3a06bdf5 	.word	0x3a06bdf5
 8002c9c:	3f03afb8 	.word	0x3f03afb8
 8002ca0:	3fed0e56 	.word	0x3fed0e56
 8002ca4:	41f6f5c3 	.word	0x41f6f5c3
 8002ca8:	39a79d68 	.word	0x39a79d68
 8002cac:	3f9353f8 	.word	0x3f9353f8
 8002cb0:	3fd81062 	.word	0x3fd81062
 8002cb4:	42ca999a 	.word	0x42ca999a
 8002cb8:	4201999a 	.word	0x4201999a
 8002cbc:	44f30000 	.word	0x44f30000
 8002cc0:	43426666 	.word	0x43426666
 8002cc4:	42508f5c 	.word	0x42508f5c
 8002cc8:	45438000 	.word	0x45438000
 8002ccc:	4331b333 	.word	0x4331b333
 8002cd0:	00000000 	.word	0x00000000

08002cd4 <TM_GPS_INT_Do>:
		Distance_Data->Bearing += 360;
	}
}

/* Private */
TM_GPS_Result_t TM_GPS_INT_Do(TM_GPS_t* GPS_Data, char c) {
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f001 f847 	bl	8003d74 <TM_GPS_INT_FlagsOk>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d006      	beq.n	8002cfa <TM_GPS_INT_Do+0x26>
		TM_GPS_INT_ClearFlags(GPS_Data);				/* Data were valid before, new data are coming, not new anymore */
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f001 f86f 	bl	8003dd0 <TM_GPS_INT_ClearFlags>
		GPS_Data->Status = TM_GPS_Result_OldData;		/* Data were "new" on last call, now are only "Old data", no NEW data */
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
	if (c == '$') {										/* Start of string detected */
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	2b24      	cmp	r3, #36	; 0x24
 8002cfe:	d116      	bne.n	8002d2e <TM_GPS_INT_Do+0x5a>
		TM_GPS_Star = 0;								/* Star detection reset */
 8002d00:	4b5d      	ldr	r3, [pc, #372]	; (8002e78 <TM_GPS_INT_Do+0x1a4>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
		TM_GPS_CRC = 0;									/* Reset CRC */
 8002d06:	4b5d      	ldr	r3, [pc, #372]	; (8002e7c <TM_GPS_INT_Do+0x1a8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
		GPS_Term_Number = 0;							/* First term in new statement */
 8002d0c:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <TM_GPS_INT_Do+0x1ac>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002d12:	4b5c      	ldr	r3, [pc, #368]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = c;					/* Add character to first term */
 8002d18:	4b5a      	ldr	r3, [pc, #360]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	b2d1      	uxtb	r1, r2
 8002d20:	4a58      	ldr	r2, [pc, #352]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002d22:	7011      	strb	r1, [r2, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <TM_GPS_INT_Do+0x1b4>)
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	5453      	strb	r3, [r2, r1]
 8002d2c:	e09b      	b.n	8002e66 <TM_GPS_INT_Do+0x192>
	} else if (c == ',') {
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	2b2c      	cmp	r3, #44	; 0x2c
 8002d32:	d120      	bne.n	8002d76 <TM_GPS_INT_Do+0xa2>
		TM_GPS_INT_Add2CRC(c);							/* Add to parity */
 8002d34:	4b51      	ldr	r3, [pc, #324]	; (8002e7c <TM_GPS_INT_Do+0x1a8>)
 8002d36:	781a      	ldrb	r2, [r3, #0]
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	4053      	eors	r3, r2
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4b4f      	ldr	r3, [pc, #316]	; (8002e7c <TM_GPS_INT_Do+0x1a8>)
 8002d40:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of term */
 8002d42:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	b2d1      	uxtb	r1, r2
 8002d4a:	4a4e      	ldr	r2, [pc, #312]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002d4c:	7011      	strb	r1, [r2, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b4d      	ldr	r3, [pc, #308]	; (8002e88 <TM_GPS_INT_Do+0x1b4>)
 8002d52:	2100      	movs	r1, #0
 8002d54:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check if term is empty */
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f001 f85e 	bl	8003e18 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f89f 	bl	8002ea0 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002d62:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <TM_GPS_INT_Do+0x1ac>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4b45      	ldr	r3, [pc, #276]	; (8002e80 <TM_GPS_INT_Do+0x1ac>)
 8002d6c:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002d6e:	4b45      	ldr	r3, [pc, #276]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e077      	b.n	8002e66 <TM_GPS_INT_Do+0x192>
	} else if (c == '\n') {
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	2b0a      	cmp	r3, #10
 8002d7a:	d113      	bne.n	8002da4 <TM_GPS_INT_Do+0xd0>
		GPS_Term_Number = 0;							/* Reset term number */
 8002d7c:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <TM_GPS_INT_Do+0x1ac>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
#ifndef GPS_DISABLE_GPGSV
		/* Check for GPGSV statement */
		if (TM_GPS_Statement == GPS_GPGSV && GPGSV_StatementsCount == GPSGV_StatementNumber) {
 8002d82:	4b42      	ldr	r3, [pc, #264]	; (8002e8c <TM_GPS_INT_Do+0x1b8>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d16d      	bne.n	8002e66 <TM_GPS_INT_Do+0x192>
 8002d8a:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <TM_GPS_INT_Do+0x1bc>)
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	4b41      	ldr	r3, [pc, #260]	; (8002e94 <TM_GPS_INT_Do+0x1c0>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d167      	bne.n	8002e66 <TM_GPS_INT_Do+0x192>
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSDESC);		/* Set flag */
 8002d96:	4b40      	ldr	r3, [pc, #256]	; (8002e98 <TM_GPS_INT_Do+0x1c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9e:	4a3e      	ldr	r2, [pc, #248]	; (8002e98 <TM_GPS_INT_Do+0x1c4>)
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e060      	b.n	8002e66 <TM_GPS_INT_Do+0x192>
		}
#endif
	} else if (c == '\r') {
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	2b0d      	cmp	r3, #13
 8002da8:	d128      	bne.n	8002dfc <TM_GPS_INT_Do+0x128>
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of character string */
 8002daa:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	b2d1      	uxtb	r1, r2
 8002db2:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002db4:	7011      	strb	r1, [r2, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <TM_GPS_INT_Do+0x1b4>)
 8002dba:	2100      	movs	r1, #0
 8002dbc:	5499      	strb	r1, [r3, r2]
		TM_GPS_CRC_Received = TM_GPS_INT_Hex2Dec(GPS_Term[0]) * 16 + TM_GPS_INT_Hex2Dec(GPS_Term[1]);	/* Between * and \r are 2 characters of Checksum */
 8002dbe:	4b32      	ldr	r3, [pc, #200]	; (8002e88 <TM_GPS_INT_Do+0x1b4>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 ffac 	bl	8003d20 <TM_GPS_INT_Hex2Dec>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	b2dc      	uxtb	r4, r3
 8002dce:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <TM_GPS_INT_Do+0x1b4>)
 8002dd0:	785b      	ldrb	r3, [r3, #1]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 ffa4 	bl	8003d20 <TM_GPS_INT_Hex2Dec>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4423      	add	r3, r4
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <TM_GPS_INT_Do+0x1c8>)
 8002de0:	701a      	strb	r2, [r3, #0]
		if (TM_GPS_CRC_Received != TM_GPS_CRC) {		/* CRC is not OK, data failed somewhere */			
 8002de2:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <TM_GPS_INT_Do+0x1c8>)
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <TM_GPS_INT_Do+0x1a8>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d002      	beq.n	8002df4 <TM_GPS_INT_Do+0x120>
			TM_GPS_INT_ClearFlags(GPS_Data);			/* Clear all flags */
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 ffee 	bl	8003dd0 <TM_GPS_INT_ClearFlags>
		}
		GPS_Term_Number = 0;							/* Reset term number */
 8002df4:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <TM_GPS_INT_Do+0x1ac>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e034      	b.n	8002e66 <TM_GPS_INT_Do+0x192>
	} else if (c == '*') {
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8002e00:	d11c      	bne.n	8002e3c <TM_GPS_INT_Do+0x168>
		TM_GPS_Star = 1;								/* Star detected */
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <TM_GPS_INT_Do+0x1a4>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* Add 0 at the end */
 8002e08:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	b2d1      	uxtb	r1, r2
 8002e10:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002e12:	7011      	strb	r1, [r2, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <TM_GPS_INT_Do+0x1b4>)
 8002e18:	2100      	movs	r1, #0
 8002e1a:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check empty */
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fffb 	bl	8003e18 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */		
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f83c 	bl	8002ea0 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <TM_GPS_INT_Do+0x1ac>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <TM_GPS_INT_Do+0x1ac>)
 8002e32:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	e014      	b.n	8002e66 <TM_GPS_INT_Do+0x192>
	} else {
		/* Other characters detected */
		if (!TM_GPS_Star) {								/* If star is not detected yet */
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <TM_GPS_INT_Do+0x1a4>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <TM_GPS_INT_Do+0x17e>
			TM_GPS_INT_Add2CRC(c);						/* Add to parity */
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <TM_GPS_INT_Do+0x1a8>)
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	4053      	eors	r3, r2
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <TM_GPS_INT_Do+0x1a8>)
 8002e50:	701a      	strb	r2, [r3, #0]
		}
		GPS_Term[GPS_Term_Pos++] = c;					/* Add to term */
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	b2d1      	uxtb	r1, r2
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <TM_GPS_INT_Do+0x1b0>)
 8002e5c:	7011      	strb	r1, [r2, #0]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <TM_GPS_INT_Do+0x1b4>)
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	5453      	strb	r3, [r2, r1]
	}
	return TM_GPS_INT_Return(GPS_Data);					/* Return current GPS status */
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fe44 	bl	8003af4 <TM_GPS_INT_Return>
 8002e6c:	4603      	mov	r3, r0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd90      	pop	{r4, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000037f 	.word	0x2000037f
 8002e7c:	2000037d 	.word	0x2000037d
 8002e80:	2000037b 	.word	0x2000037b
 8002e84:	2000037c 	.word	0x2000037c
 8002e88:	2000036c 	.word	0x2000036c
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	200004bb 	.word	0x200004bb
 8002e94:	200004bc 	.word	0x200004bc
 8002e98:	20000380 	.word	0x20000380
 8002e9c:	2000037e 	.word	0x2000037e

08002ea0 <TM_GPS_INT_CheckTerm>:

void TM_GPS_INT_CheckTerm(TM_GPS_t* GPS_Data) {
 8002ea0:	b5b0      	push	{r4, r5, r7, lr}
 8002ea2:	ed2d 8b02 	vpush	{d8}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	uint32_t temp;
#ifndef GPS_DISABLE_GPGSA
	static uint8_t ids_count = 0;
#endif
	uint8_t count, i;
	if (GPS_Term_Number == 0) {
 8002eac:	48cb      	ldr	r0, [pc, #812]	; (80031dc <TM_GPS_INT_CheckTerm+0x33c>)
 8002eae:	7800      	ldrb	r0, [r0, #0]
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d134      	bne.n	8002f1e <TM_GPS_INT_CheckTerm+0x7e>
		/* Statement indicator */
		if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGGA")) {
 8002eb4:	49ca      	ldr	r1, [pc, #808]	; (80031e0 <TM_GPS_INT_CheckTerm+0x340>)
 8002eb6:	48cb      	ldr	r0, [pc, #812]	; (80031e4 <TM_GPS_INT_CheckTerm+0x344>)
 8002eb8:	f000 fecc 	bl	8003c54 <TM_GPS_INT_StringStartsWith>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <TM_GPS_INT_CheckTerm+0x2a>
			TM_GPS_Statement = GPS_GPGGA;
 8002ec2:	4bc9      	ldr	r3, [pc, #804]	; (80031e8 <TM_GPS_INT_CheckTerm+0x348>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e023      	b.n	8002f12 <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPRMC")) {
 8002eca:	49c8      	ldr	r1, [pc, #800]	; (80031ec <TM_GPS_INT_CheckTerm+0x34c>)
 8002ecc:	48c5      	ldr	r0, [pc, #788]	; (80031e4 <TM_GPS_INT_CheckTerm+0x344>)
 8002ece:	f000 fec1 	bl	8003c54 <TM_GPS_INT_StringStartsWith>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <TM_GPS_INT_CheckTerm+0x40>
			TM_GPS_Statement = GPS_GPRMC;
 8002ed8:	4bc3      	ldr	r3, [pc, #780]	; (80031e8 <TM_GPS_INT_CheckTerm+0x348>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e018      	b.n	8002f12 <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSA")) {
 8002ee0:	49c3      	ldr	r1, [pc, #780]	; (80031f0 <TM_GPS_INT_CheckTerm+0x350>)
 8002ee2:	48c0      	ldr	r0, [pc, #768]	; (80031e4 <TM_GPS_INT_CheckTerm+0x344>)
 8002ee4:	f000 feb6 	bl	8003c54 <TM_GPS_INT_StringStartsWith>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <TM_GPS_INT_CheckTerm+0x56>
			TM_GPS_Statement = GPS_GPGSA;
 8002eee:	4bbe      	ldr	r3, [pc, #760]	; (80031e8 <TM_GPS_INT_CheckTerm+0x348>)
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e00d      	b.n	8002f12 <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSV")) {
 8002ef6:	49bf      	ldr	r1, [pc, #764]	; (80031f4 <TM_GPS_INT_CheckTerm+0x354>)
 8002ef8:	48ba      	ldr	r0, [pc, #744]	; (80031e4 <TM_GPS_INT_CheckTerm+0x344>)
 8002efa:	f000 feab 	bl	8003c54 <TM_GPS_INT_StringStartsWith>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <TM_GPS_INT_CheckTerm+0x6c>
			TM_GPS_Statement = GPS_GPGSV;
 8002f04:	4bb8      	ldr	r3, [pc, #736]	; (80031e8 <TM_GPS_INT_CheckTerm+0x348>)
 8002f06:	2203      	movs	r2, #3
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	e002      	b.n	8002f12 <TM_GPS_INT_CheckTerm+0x72>
		} else {
			TM_GPS_Statement = GPS_ERR;
 8002f0c:	4bb6      	ldr	r3, [pc, #728]	; (80031e8 <TM_GPS_INT_CheckTerm+0x348>)
 8002f0e:	2204      	movs	r2, #4
 8002f10:	701a      	strb	r2, [r3, #0]
		}
		
		strcpy(GPS_Statement_Name, GPS_Term);			/* Copy term to variable */
 8002f12:	49b4      	ldr	r1, [pc, #720]	; (80031e4 <TM_GPS_INT_CheckTerm+0x344>)
 8002f14:	48b8      	ldr	r0, [pc, #736]	; (80031f8 <TM_GPS_INT_CheckTerm+0x358>)
 8002f16:	f018 fa63 	bl	801b3e0 <strcpy>
 8002f1a:	f000 bdd1 	b.w	8003ac0 <TM_GPS_INT_CheckTerm+0xc20>
			}
		}
	}
#endif
	
	switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8002f1e:	48b2      	ldr	r0, [pc, #712]	; (80031e8 <TM_GPS_INT_CheckTerm+0x348>)
 8002f20:	7800      	ldrb	r0, [r0, #0]
 8002f22:	0140      	lsls	r0, r0, #5
 8002f24:	4dad      	ldr	r5, [pc, #692]	; (80031dc <TM_GPS_INT_CheckTerm+0x33c>)
 8002f26:	782d      	ldrb	r5, [r5, #0]
 8002f28:	4328      	orrs	r0, r5
 8002f2a:	3801      	subs	r0, #1
 8002f2c:	2862      	cmp	r0, #98	; 0x62
 8002f2e:	f200 852f 	bhi.w	8003990 <TM_GPS_INT_CheckTerm+0xaf0>
 8002f32:	a501      	add	r5, pc, #4	; (adr r5, 8002f38 <TM_GPS_INT_CheckTerm+0x98>)
 8002f34:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8002f38:	080034e1 	.word	0x080034e1
 8002f3c:	080030c5 	.word	0x080030c5
 8002f40:	080031b3 	.word	0x080031b3
 8002f44:	08003211 	.word	0x08003211
 8002f48:	080032ff 	.word	0x080032ff
 8002f4c:	08003349 	.word	0x08003349
 8002f50:	08003327 	.word	0x08003327
 8002f54:	08003991 	.word	0x08003991
 8002f58:	0800336b 	.word	0x0800336b
 8002f5c:	08003991 	.word	0x08003991
 8002f60:	08003991 	.word	0x08003991
 8002f64:	08003991 	.word	0x08003991
 8002f68:	08003991 	.word	0x08003991
 8002f6c:	08003991 	.word	0x08003991
 8002f70:	08003991 	.word	0x08003991
 8002f74:	08003991 	.word	0x08003991
 8002f78:	08003991 	.word	0x08003991
 8002f7c:	08003991 	.word	0x08003991
 8002f80:	08003991 	.word	0x08003991
 8002f84:	08003991 	.word	0x08003991
 8002f88:	08003991 	.word	0x08003991
 8002f8c:	08003991 	.word	0x08003991
 8002f90:	08003991 	.word	0x08003991
 8002f94:	08003991 	.word	0x08003991
 8002f98:	08003991 	.word	0x08003991
 8002f9c:	08003991 	.word	0x08003991
 8002fa0:	08003991 	.word	0x08003991
 8002fa4:	08003991 	.word	0x08003991
 8002fa8:	08003991 	.word	0x08003991
 8002fac:	08003991 	.word	0x08003991
 8002fb0:	08003991 	.word	0x08003991
 8002fb4:	08003991 	.word	0x08003991
 8002fb8:	08003991 	.word	0x08003991
 8002fbc:	080036d7 	.word	0x080036d7
 8002fc0:	08003991 	.word	0x08003991
 8002fc4:	08003991 	.word	0x08003991
 8002fc8:	08003991 	.word	0x08003991
 8002fcc:	08003991 	.word	0x08003991
 8002fd0:	0800359f 	.word	0x0800359f
 8002fd4:	080036fb 	.word	0x080036fb
 8002fd8:	0800363d 	.word	0x0800363d
 8002fdc:	08003991 	.word	0x08003991
 8002fe0:	08003991 	.word	0x08003991
 8002fe4:	08003991 	.word	0x08003991
 8002fe8:	08003991 	.word	0x08003991
 8002fec:	08003991 	.word	0x08003991
 8002ff0:	08003991 	.word	0x08003991
 8002ff4:	08003991 	.word	0x08003991
 8002ff8:	08003991 	.word	0x08003991
 8002ffc:	08003991 	.word	0x08003991
 8003000:	08003991 	.word	0x08003991
 8003004:	08003991 	.word	0x08003991
 8003008:	08003991 	.word	0x08003991
 800300c:	08003991 	.word	0x08003991
 8003010:	08003991 	.word	0x08003991
 8003014:	08003991 	.word	0x08003991
 8003018:	08003991 	.word	0x08003991
 800301c:	08003991 	.word	0x08003991
 8003020:	08003991 	.word	0x08003991
 8003024:	08003991 	.word	0x08003991
 8003028:	08003991 	.word	0x08003991
 800302c:	08003991 	.word	0x08003991
 8003030:	08003991 	.word	0x08003991
 8003034:	08003991 	.word	0x08003991
 8003038:	08003991 	.word	0x08003991
 800303c:	080038fd 	.word	0x080038fd
 8003040:	08003921 	.word	0x08003921
 8003044:	08003921 	.word	0x08003921
 8003048:	08003921 	.word	0x08003921
 800304c:	08003921 	.word	0x08003921
 8003050:	08003921 	.word	0x08003921
 8003054:	08003921 	.word	0x08003921
 8003058:	08003921 	.word	0x08003921
 800305c:	08003921 	.word	0x08003921
 8003060:	08003921 	.word	0x08003921
 8003064:	08003921 	.word	0x08003921
 8003068:	08003921 	.word	0x08003921
 800306c:	08003921 	.word	0x08003921
 8003070:	08003809 	.word	0x08003809
 8003074:	08003775 	.word	0x08003775
 8003078:	08003883 	.word	0x08003883
 800307c:	08003991 	.word	0x08003991
 8003080:	08003991 	.word	0x08003991
 8003084:	08003991 	.word	0x08003991
 8003088:	08003991 	.word	0x08003991
 800308c:	08003991 	.word	0x08003991
 8003090:	08003991 	.word	0x08003991
 8003094:	08003991 	.word	0x08003991
 8003098:	08003991 	.word	0x08003991
 800309c:	08003991 	.word	0x08003991
 80030a0:	08003991 	.word	0x08003991
 80030a4:	08003991 	.word	0x08003991
 80030a8:	08003991 	.word	0x08003991
 80030ac:	08003991 	.word	0x08003991
 80030b0:	08003991 	.word	0x08003991
 80030b4:	08003991 	.word	0x08003991
 80030b8:	08003991 	.word	0x08003991
 80030bc:	08003991 	.word	0x08003991
 80030c0:	0800396d 	.word	0x0800396d
#ifndef GPS_DISABLE_GPGGA
		case GPS_POS_LATITUDE:	/* GPGGA */
			/* Convert latitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	4619      	mov	r1, r3
 80030ca:	4846      	ldr	r0, [pc, #280]	; (80031e4 <TM_GPS_INT_CheckTerm+0x344>)
 80030cc:	f000 fddf 	bl	8003c8e <TM_GPS_INT_Atoi>
 80030d0:	4603      	mov	r3, r0
 80030d2:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude = temp / 100;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4a49      	ldr	r2, [pc, #292]	; (80031fc <TM_GPS_INT_CheckTerm+0x35c>)
 80030d8:	fba2 2303 	umull	r2, r3, r2, r3
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fa20 	bl	8000524 <__aeabi_ui2d>
 80030e4:	4603      	mov	r3, r0
 80030e6:	460c      	mov	r4, r1
 80030e8:	4a45      	ldr	r2, [pc, #276]	; (8003200 <TM_GPS_INT_CheckTerm+0x360>)
 80030ea:	e9c2 3400 	strd	r3, r4, [r2]
			TM_GPS_INT_Data.Latitude += (float)(temp % 100) / (float)60;
 80030ee:	4b44      	ldr	r3, [pc, #272]	; (8003200 <TM_GPS_INT_CheckTerm+0x360>)
 80030f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	4b41      	ldr	r3, [pc, #260]	; (80031fc <TM_GPS_INT_CheckTerm+0x35c>)
 80030f8:	fba3 1302 	umull	r1, r3, r3, r2
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	2164      	movs	r1, #100	; 0x64
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003204 <TM_GPS_INT_CheckTerm+0x364>
 8003112:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003116:	ee16 0a90 	vmov	r0, s13
 800311a:	f7fd fa25 	bl	8000568 <__aeabi_f2d>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4620      	mov	r0, r4
 8003124:	4629      	mov	r1, r5
 8003126:	f7fd f8c1 	bl	80002ac <__adddf3>
 800312a:	4603      	mov	r3, r0
 800312c:	460c      	mov	r4, r1
 800312e:	4a34      	ldr	r2, [pc, #208]	; (8003200 <TM_GPS_INT_CheckTerm+0x360>)
 8003130:	e9c2 3400 	strd	r3, r4, [r2]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	3301      	adds	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	4a29      	ldr	r2, [pc, #164]	; (80031e4 <TM_GPS_INT_CheckTerm+0x344>)
 800313e:	4413      	add	r3, r2
 8003140:	f107 0208 	add.w	r2, r7, #8
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fda1 	bl	8003c8e <TM_GPS_INT_Atoi>
 800314c:	4603      	mov	r3, r0
 800314e:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd f9e6 	bl	8000524 <__aeabi_ui2d>
 8003158:	4604      	mov	r4, r0
 800315a:	460d      	mov	r5, r1
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	4619      	mov	r1, r3
 8003160:	200a      	movs	r0, #10
 8003162:	f000 fdc1 	bl	8003ce8 <TM_GPS_INT_Pow>
 8003166:	4603      	mov	r3, r0
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd f9db 	bl	8000524 <__aeabi_ui2d>
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	4b25      	ldr	r3, [pc, #148]	; (8003208 <TM_GPS_INT_CheckTerm+0x368>)
 8003174:	f7fd fa50 	bl	8000618 <__aeabi_dmul>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4620      	mov	r0, r4
 800317e:	4629      	mov	r1, r5
 8003180:	f7fd fb74 	bl	800086c <__aeabi_ddiv>
 8003184:	4603      	mov	r3, r0
 8003186:	460c      	mov	r4, r1
 8003188:	4618      	mov	r0, r3
 800318a:	4621      	mov	r1, r4
 800318c:	4b1c      	ldr	r3, [pc, #112]	; (8003200 <TM_GPS_INT_CheckTerm+0x360>)
 800318e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003192:	461a      	mov	r2, r3
 8003194:	4623      	mov	r3, r4
 8003196:	f7fd f889 	bl	80002ac <__adddf3>
 800319a:	4603      	mov	r3, r0
 800319c:	460c      	mov	r4, r1
 800319e:	4a18      	ldr	r2, [pc, #96]	; (8003200 <TM_GPS_INT_CheckTerm+0x360>)
 80031a0:	e9c2 3400 	strd	r3, r4, [r2]
			TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE);
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <TM_GPS_INT_CheckTerm+0x36c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	4a17      	ldr	r2, [pc, #92]	; (800320c <TM_GPS_INT_CheckTerm+0x36c>)
 80031ae:	6013      	str	r3, [r2, #0]
			break;
 80031b0:	e3f1      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_NS: /* GPGGA */
			if (GPS_Term[0] == 'S') {
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <TM_GPS_INT_CheckTerm+0x344>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b53      	cmp	r3, #83	; 0x53
 80031b8:	d108      	bne.n	80031cc <TM_GPS_INT_CheckTerm+0x32c>
				TM_GPS_INT_Data.Latitude = -TM_GPS_INT_Data.Latitude;	/* South has negative coordinate */
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <TM_GPS_INT_CheckTerm+0x360>)
 80031bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031c0:	4619      	mov	r1, r3
 80031c2:	f084 4200 	eor.w	r2, r4, #2147483648	; 0x80000000
 80031c6:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <TM_GPS_INT_CheckTerm+0x360>)
 80031c8:	e9c3 1200 	strd	r1, r2, [r3]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_NS);
 80031cc:	4b0f      	ldr	r3, [pc, #60]	; (800320c <TM_GPS_INT_CheckTerm+0x36c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <TM_GPS_INT_CheckTerm+0x36c>)
 80031d6:	6013      	str	r3, [r2, #0]
			break;
 80031d8:	e3dd      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
 80031da:	bf00      	nop
 80031dc:	2000037b 	.word	0x2000037b
 80031e0:	0801e8c0 	.word	0x0801e8c0
 80031e4:	2000036c 	.word	0x2000036c
 80031e8:	20000000 	.word	0x20000000
 80031ec:	0801e8c8 	.word	0x0801e8c8
 80031f0:	0801e8d0 	.word	0x0801e8d0
 80031f4:	0801e8d8 	.word	0x0801e8d8
 80031f8:	200004b4 	.word	0x200004b4
 80031fc:	51eb851f 	.word	0x51eb851f
 8003200:	20000388 	.word	0x20000388
 8003204:	42700000 	.word	0x42700000
 8003208:	404e0000 	.word	0x404e0000
 800320c:	20000380 	.word	0x20000380
		case GPS_POS_LONGITUDE: /* GPGGA */
			/* Convert longitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003210:	f107 0308 	add.w	r3, r7, #8
 8003214:	4619      	mov	r1, r3
 8003216:	48ab      	ldr	r0, [pc, #684]	; (80034c4 <TM_GPS_INT_CheckTerm+0x624>)
 8003218:	f000 fd39 	bl	8003c8e <TM_GPS_INT_Atoi>
 800321c:	4603      	mov	r3, r0
 800321e:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude = temp / 100; /* Degrees */
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4aa9      	ldr	r2, [pc, #676]	; (80034c8 <TM_GPS_INT_CheckTerm+0x628>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd f97a 	bl	8000524 <__aeabi_ui2d>
 8003230:	4603      	mov	r3, r0
 8003232:	460c      	mov	r4, r1
 8003234:	4aa5      	ldr	r2, [pc, #660]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 8003236:	e9c2 3402 	strd	r3, r4, [r2, #8]
			TM_GPS_INT_Data.Longitude += (float)(temp % 100) / (float)60;
 800323a:	4ba4      	ldr	r3, [pc, #656]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 800323c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	4ba1      	ldr	r3, [pc, #644]	; (80034c8 <TM_GPS_INT_CheckTerm+0x628>)
 8003244:	fba3 1302 	umull	r1, r3, r3, r2
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	2164      	movs	r1, #100	; 0x64
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325a:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80034d0 <TM_GPS_INT_CheckTerm+0x630>
 800325e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003262:	ee16 0a90 	vmov	r0, s13
 8003266:	f7fd f97f 	bl	8000568 <__aeabi_f2d>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4620      	mov	r0, r4
 8003270:	4629      	mov	r1, r5
 8003272:	f7fd f81b 	bl	80002ac <__adddf3>
 8003276:	4603      	mov	r3, r0
 8003278:	460c      	mov	r4, r1
 800327a:	4a94      	ldr	r2, [pc, #592]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 800327c:	e9c2 3402 	strd	r3, r4, [r2, #8]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	3301      	adds	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	4a8e      	ldr	r2, [pc, #568]	; (80034c4 <TM_GPS_INT_CheckTerm+0x624>)
 800328a:	4413      	add	r3, r2
 800328c:	f107 0208 	add.w	r2, r7, #8
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fcfb 	bl	8003c8e <TM_GPS_INT_Atoi>
 8003298:	4603      	mov	r3, r0
 800329a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd f940 	bl	8000524 <__aeabi_ui2d>
 80032a4:	4604      	mov	r4, r0
 80032a6:	460d      	mov	r5, r1
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	4619      	mov	r1, r3
 80032ac:	200a      	movs	r0, #10
 80032ae:	f000 fd1b 	bl	8003ce8 <TM_GPS_INT_Pow>
 80032b2:	4603      	mov	r3, r0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f935 	bl	8000524 <__aeabi_ui2d>
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	4b85      	ldr	r3, [pc, #532]	; (80034d4 <TM_GPS_INT_CheckTerm+0x634>)
 80032c0:	f7fd f9aa 	bl	8000618 <__aeabi_dmul>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4620      	mov	r0, r4
 80032ca:	4629      	mov	r1, r5
 80032cc:	f7fd face 	bl	800086c <__aeabi_ddiv>
 80032d0:	4603      	mov	r3, r0
 80032d2:	460c      	mov	r4, r1
 80032d4:	4618      	mov	r0, r3
 80032d6:	4621      	mov	r1, r4
 80032d8:	4b7c      	ldr	r3, [pc, #496]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 80032da:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80032de:	461a      	mov	r2, r3
 80032e0:	4623      	mov	r3, r4
 80032e2:	f7fc ffe3 	bl	80002ac <__adddf3>
 80032e6:	4603      	mov	r3, r0
 80032e8:	460c      	mov	r4, r1
 80032ea:	4a78      	ldr	r2, [pc, #480]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 80032ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
			TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE);
 80032f0:	4b79      	ldr	r3, [pc, #484]	; (80034d8 <TM_GPS_INT_CheckTerm+0x638>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	4a77      	ldr	r2, [pc, #476]	; (80034d8 <TM_GPS_INT_CheckTerm+0x638>)
 80032fa:	6013      	str	r3, [r2, #0]
			break;
 80032fc:	e34b      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_EW: /* GPGGA */
			if (GPS_Term[0] == 'W') {
 80032fe:	4a71      	ldr	r2, [pc, #452]	; (80034c4 <TM_GPS_INT_CheckTerm+0x624>)
 8003300:	7812      	ldrb	r2, [r2, #0]
 8003302:	2a57      	cmp	r2, #87	; 0x57
 8003304:	d108      	bne.n	8003318 <TM_GPS_INT_CheckTerm+0x478>
				TM_GPS_INT_Data.Longitude = -TM_GPS_INT_Data.Longitude;	/* West has negative coordinate */
 8003306:	4a71      	ldr	r2, [pc, #452]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 8003308:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 800330c:	460b      	mov	r3, r1
 800330e:	f082 4400 	eor.w	r4, r2, #2147483648	; 0x80000000
 8003312:	4a6e      	ldr	r2, [pc, #440]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 8003314:	e9c2 3402 	strd	r3, r4, [r2, #8]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_EW);
 8003318:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <TM_GPS_INT_CheckTerm+0x638>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f043 0320 	orr.w	r3, r3, #32
 8003320:	4a6d      	ldr	r2, [pc, #436]	; (80034d8 <TM_GPS_INT_CheckTerm+0x638>)
 8003322:	6013      	str	r3, [r2, #0]
			break;
 8003324:	e337      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_SATS: /* GPGGA */
			/* Satellites in use */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003326:	f107 0308 	add.w	r3, r7, #8
 800332a:	4619      	mov	r1, r3
 800332c:	4865      	ldr	r0, [pc, #404]	; (80034c4 <TM_GPS_INT_CheckTerm+0x624>)
 800332e:	f000 fcae 	bl	8003c8e <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Satellites = temp;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	4b65      	ldr	r3, [pc, #404]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 8003338:	751a      	strb	r2, [r3, #20]
			TM_GPS_INT_SetFlag(GPS_FLAG_SATS);
 800333a:	4b67      	ldr	r3, [pc, #412]	; (80034d8 <TM_GPS_INT_CheckTerm+0x638>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	4a65      	ldr	r2, [pc, #404]	; (80034d8 <TM_GPS_INT_CheckTerm+0x638>)
 8003344:	6013      	str	r3, [r2, #0]
			break;
 8003346:	e326      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_FIX: /* GPGGA */
			/* GPS Fix */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003348:	f107 0308 	add.w	r3, r7, #8
 800334c:	4619      	mov	r1, r3
 800334e:	485d      	ldr	r0, [pc, #372]	; (80034c4 <TM_GPS_INT_CheckTerm+0x624>)
 8003350:	f000 fc9d 	bl	8003c8e <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Fix = temp;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	b2da      	uxtb	r2, r3
 8003358:	4b5c      	ldr	r3, [pc, #368]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 800335a:	755a      	strb	r2, [r3, #21]
			TM_GPS_INT_SetFlag(GPS_FLAG_FIX);
 800335c:	4b5e      	ldr	r3, [pc, #376]	; (80034d8 <TM_GPS_INT_CheckTerm+0x638>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f043 0308 	orr.w	r3, r3, #8
 8003364:	4a5c      	ldr	r2, [pc, #368]	; (80034d8 <TM_GPS_INT_CheckTerm+0x638>)
 8003366:	6013      	str	r3, [r2, #0]
			break;
 8003368:	e315      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_ALTITUDE: /* GPGGA */
			/* Convert altitude above sea */
			if (GPS_Term[0] == '-') {
 800336a:	4b56      	ldr	r3, [pc, #344]	; (80034c4 <TM_GPS_INT_CheckTerm+0x624>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b2d      	cmp	r3, #45	; 0x2d
 8003370:	d156      	bne.n	8003420 <TM_GPS_INT_CheckTerm+0x580>
				count = TM_GPS_INT_Atoi(&GPS_Term[1], &temp);
 8003372:	f107 0308 	add.w	r3, r7, #8
 8003376:	4619      	mov	r1, r3
 8003378:	4858      	ldr	r0, [pc, #352]	; (80034dc <TM_GPS_INT_CheckTerm+0x63c>)
 800337a:	f000 fc88 	bl	8003c8e <TM_GPS_INT_Atoi>
 800337e:	4603      	mov	r3, r0
 8003380:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338c:	4b4f      	ldr	r3, [pc, #316]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 800338e:	edc3 7a04 	vstr	s15, [r3, #16]
				
				count++;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	3301      	adds	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	3301      	adds	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	4a48      	ldr	r2, [pc, #288]	; (80034c4 <TM_GPS_INT_CheckTerm+0x624>)
 80033a2:	4413      	add	r3, r2
 80033a4:	f107 0208 	add.w	r2, r7, #8
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fc6f 	bl	8003c8e <TM_GPS_INT_Atoi>
 80033b0:	4603      	mov	r3, r0
 80033b2:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd f8b4 	bl	8000524 <__aeabi_ui2d>
 80033bc:	4604      	mov	r4, r0
 80033be:	460d      	mov	r5, r1
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	4619      	mov	r1, r3
 80033c4:	200a      	movs	r0, #10
 80033c6:	f000 fc8f 	bl	8003ce8 <TM_GPS_INT_Pow>
 80033ca:	4603      	mov	r3, r0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f8a9 	bl	8000524 <__aeabi_ui2d>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4620      	mov	r0, r4
 80033d8:	4629      	mov	r1, r5
 80033da:	f7fd fa47 	bl	800086c <__aeabi_ddiv>
 80033de:	4603      	mov	r3, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	4625      	mov	r5, r4
 80033e4:	461c      	mov	r4, r3
 80033e6:	4b39      	ldr	r3, [pc, #228]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd f8bc 	bl	8000568 <__aeabi_f2d>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4620      	mov	r0, r4
 80033f6:	4629      	mov	r1, r5
 80033f8:	f7fc ff58 	bl	80002ac <__adddf3>
 80033fc:	4603      	mov	r3, r0
 80033fe:	460c      	mov	r4, r1
 8003400:	4618      	mov	r0, r3
 8003402:	4621      	mov	r1, r4
 8003404:	f7fd fc00 	bl	8000c08 <__aeabi_d2f>
 8003408:	4602      	mov	r2, r0
 800340a:	4b30      	ldr	r3, [pc, #192]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 800340c:	611a      	str	r2, [r3, #16]
				
				TM_GPS_INT_Data.Altitude = -TM_GPS_INT_Data.Altitude;
 800340e:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 8003410:	edd3 7a04 	vldr	s15, [r3, #16]
 8003414:	eef1 7a67 	vneg.f32	s15, s15
 8003418:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 800341a:	edc3 7a04 	vstr	s15, [r3, #16]
 800341e:	e04a      	b.n	80034b6 <TM_GPS_INT_CheckTerm+0x616>
			} else {
				count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003420:	f107 0308 	add.w	r3, r7, #8
 8003424:	4619      	mov	r1, r3
 8003426:	4827      	ldr	r0, [pc, #156]	; (80034c4 <TM_GPS_INT_CheckTerm+0x624>)
 8003428:	f000 fc31 	bl	8003c8e <TM_GPS_INT_Atoi>
 800342c:	4603      	mov	r3, r0
 800342e:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343a:	4b24      	ldr	r3, [pc, #144]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 800343c:	edc3 7a04 	vstr	s15, [r3, #16]
		
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	3301      	adds	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <TM_GPS_INT_CheckTerm+0x624>)
 800344a:	4413      	add	r3, r2
 800344c:	f107 0208 	add.w	r2, r7, #8
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fc1b 	bl	8003c8e <TM_GPS_INT_Atoi>
 8003458:	4603      	mov	r3, r0
 800345a:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd f860 	bl	8000524 <__aeabi_ui2d>
 8003464:	4604      	mov	r4, r0
 8003466:	460d      	mov	r5, r1
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	4619      	mov	r1, r3
 800346c:	200a      	movs	r0, #10
 800346e:	f000 fc3b 	bl	8003ce8 <TM_GPS_INT_Pow>
 8003472:	4603      	mov	r3, r0
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd f855 	bl	8000524 <__aeabi_ui2d>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4620      	mov	r0, r4
 8003480:	4629      	mov	r1, r5
 8003482:	f7fd f9f3 	bl	800086c <__aeabi_ddiv>
 8003486:	4603      	mov	r3, r0
 8003488:	460c      	mov	r4, r1
 800348a:	4625      	mov	r5, r4
 800348c:	461c      	mov	r4, r3
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd f868 	bl	8000568 <__aeabi_f2d>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4620      	mov	r0, r4
 800349e:	4629      	mov	r1, r5
 80034a0:	f7fc ff04 	bl	80002ac <__adddf3>
 80034a4:	4603      	mov	r3, r0
 80034a6:	460c      	mov	r4, r1
 80034a8:	4618      	mov	r0, r3
 80034aa:	4621      	mov	r1, r4
 80034ac:	f7fd fbac 	bl	8000c08 <__aeabi_d2f>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <TM_GPS_INT_CheckTerm+0x62c>)
 80034b4:	611a      	str	r2, [r3, #16]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE);
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <TM_GPS_INT_CheckTerm+0x638>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f043 0310 	orr.w	r3, r3, #16
 80034be:	4a06      	ldr	r2, [pc, #24]	; (80034d8 <TM_GPS_INT_CheckTerm+0x638>)
 80034c0:	6013      	str	r3, [r2, #0]
			break;
 80034c2:	e268      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
 80034c4:	2000036c 	.word	0x2000036c
 80034c8:	51eb851f 	.word	0x51eb851f
 80034cc:	20000388 	.word	0x20000388
 80034d0:	42700000 	.word	0x42700000
 80034d4:	404e0000 	.word	0x404e0000
 80034d8:	20000380 	.word	0x20000380
 80034dc:	2000036d 	.word	0x2000036d
		case GPS_POS_TIME: /* GPGGA */
			/* Set time */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80034e0:	f107 0308 	add.w	r3, r7, #8
 80034e4:	4619      	mov	r1, r3
 80034e6:	48c2      	ldr	r0, [pc, #776]	; (80037f0 <TM_GPS_INT_CheckTerm+0x950>)
 80034e8:	f000 fbd1 	bl	8003c8e <TM_GPS_INT_Atoi>
 80034ec:	4603      	mov	r3, r0
 80034ee:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Time.Seconds = temp % 100;
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	4bc0      	ldr	r3, [pc, #768]	; (80037f4 <TM_GPS_INT_CheckTerm+0x954>)
 80034f4:	fba3 1302 	umull	r1, r3, r3, r2
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	2164      	movs	r1, #100	; 0x64
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	b2da      	uxtb	r2, r3
 8003504:	4bbc      	ldr	r3, [pc, #752]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 8003506:	761a      	strb	r2, [r3, #24]
			TM_GPS_INT_Data.Time.Minutes = (int)(temp * (float) 0.01) % 100;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003512:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80037fc <TM_GPS_INT_CheckTerm+0x95c>
 8003516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800351a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800351e:	ee17 2a90 	vmov	r2, s15
 8003522:	4bb4      	ldr	r3, [pc, #720]	; (80037f4 <TM_GPS_INT_CheckTerm+0x954>)
 8003524:	fb83 1302 	smull	r1, r3, r3, r2
 8003528:	1159      	asrs	r1, r3, #5
 800352a:	17d3      	asrs	r3, r2, #31
 800352c:	1acb      	subs	r3, r1, r3
 800352e:	2164      	movs	r1, #100	; 0x64
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	b2da      	uxtb	r2, r3
 8003538:	4baf      	ldr	r3, [pc, #700]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 800353a:	75da      	strb	r2, [r3, #23]
			TM_GPS_INT_Data.Time.Hours = (int)(temp * (float)0.0001) % 100;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003546:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8003800 <TM_GPS_INT_CheckTerm+0x960>
 800354a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800354e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003552:	ee17 2a90 	vmov	r2, s15
 8003556:	4ba7      	ldr	r3, [pc, #668]	; (80037f4 <TM_GPS_INT_CheckTerm+0x954>)
 8003558:	fb83 1302 	smull	r1, r3, r3, r2
 800355c:	1159      	asrs	r1, r3, #5
 800355e:	17d3      	asrs	r3, r2, #31
 8003560:	1acb      	subs	r3, r1, r3
 8003562:	2164      	movs	r1, #100	; 0x64
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4ba2      	ldr	r3, [pc, #648]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 800356e:	759a      	strb	r2, [r3, #22]
			/* Hundredths */
			TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	3301      	adds	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	4a9d      	ldr	r2, [pc, #628]	; (80037f0 <TM_GPS_INT_CheckTerm+0x950>)
 800357a:	4413      	add	r3, r2
 800357c:	f107 0208 	add.w	r2, r7, #8
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fb83 	bl	8003c8e <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Time.Hundredths = temp;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	b29a      	uxth	r2, r3
 800358c:	4b9a      	ldr	r3, [pc, #616]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 800358e:	835a      	strh	r2, [r3, #26]
			TM_GPS_INT_SetFlag(GPS_FLAG_TIME);
 8003590:	4b9c      	ldr	r3, [pc, #624]	; (8003804 <TM_GPS_INT_CheckTerm+0x964>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003598:	4a9a      	ldr	r2, [pc, #616]	; (8003804 <TM_GPS_INT_CheckTerm+0x964>)
 800359a:	6013      	str	r3, [r2, #0]
			break;
 800359c:	e1fb      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
#endif
#ifndef GPS_DISABLE_GPRMC
		case GPS_POS_SPEED:	/* GPRMC */	
			/* Convert speed */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800359e:	f107 0308 	add.w	r3, r7, #8
 80035a2:	4619      	mov	r1, r3
 80035a4:	4892      	ldr	r0, [pc, #584]	; (80037f0 <TM_GPS_INT_CheckTerm+0x950>)
 80035a6:	f000 fb72 	bl	8003c8e <TM_GPS_INT_Atoi>
 80035aa:	4603      	mov	r3, r0
 80035ac:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed = (float)temp;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b8:	4b8f      	ldr	r3, [pc, #572]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 80035ba:	edc3 7a08 	vstr	s15, [r3, #32]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	3301      	adds	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	4a8a      	ldr	r2, [pc, #552]	; (80037f0 <TM_GPS_INT_CheckTerm+0x950>)
 80035c8:	4413      	add	r3, r2
 80035ca:	f107 0208 	add.w	r2, r7, #8
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fb5c 	bl	8003c8e <TM_GPS_INT_Atoi>
 80035d6:	4603      	mov	r3, r0
 80035d8:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0));
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	ee07 3a90 	vmov	s15, r3
 80035e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e4:	ee17 0a90 	vmov	r0, s15
 80035e8:	f7fc ffbe 	bl	8000568 <__aeabi_f2d>
 80035ec:	4604      	mov	r4, r0
 80035ee:	460d      	mov	r5, r1
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	4619      	mov	r1, r3
 80035f4:	200a      	movs	r0, #10
 80035f6:	f000 fb77 	bl	8003ce8 <TM_GPS_INT_Pow>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fc ff91 	bl	8000524 <__aeabi_ui2d>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4620      	mov	r0, r4
 8003608:	4629      	mov	r1, r5
 800360a:	f7fd f92f 	bl	800086c <__aeabi_ddiv>
 800360e:	4603      	mov	r3, r0
 8003610:	460c      	mov	r4, r1
 8003612:	4618      	mov	r0, r3
 8003614:	4621      	mov	r1, r4
 8003616:	f7fd faf7 	bl	8000c08 <__aeabi_d2f>
 800361a:	ee07 0a10 	vmov	s14, r0
 800361e:	4b76      	ldr	r3, [pc, #472]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 8003620:	edd3 7a08 	vldr	s15, [r3, #32]
 8003624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003628:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 800362a:	edc3 7a08 	vstr	s15, [r3, #32]
		
			/* Set flag */
			TM_GPS_INT_SetFlag(GPS_FLAG_SPEED);
 800362e:	4b75      	ldr	r3, [pc, #468]	; (8003804 <TM_GPS_INT_CheckTerm+0x964>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003636:	4a73      	ldr	r2, [pc, #460]	; (8003804 <TM_GPS_INT_CheckTerm+0x964>)
 8003638:	6013      	str	r3, [r2, #0]
			break;
 800363a:	e1ac      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_DATE: /* GPRMC */	
			/* Set date */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800363c:	f107 0308 	add.w	r3, r7, #8
 8003640:	4619      	mov	r1, r3
 8003642:	486b      	ldr	r0, [pc, #428]	; (80037f0 <TM_GPS_INT_CheckTerm+0x950>)
 8003644:	f000 fb23 	bl	8003c8e <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Date.Year = temp % 100;
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <TM_GPS_INT_CheckTerm+0x954>)
 800364c:	fba3 1302 	umull	r1, r3, r3, r2
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	2164      	movs	r1, #100	; 0x64
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	b2da      	uxtb	r2, r3
 800365c:	4b66      	ldr	r3, [pc, #408]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 800365e:	779a      	strb	r2, [r3, #30]
			TM_GPS_INT_Data.Date.Month = (int)(temp * 0.01f) % 100;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80037fc <TM_GPS_INT_CheckTerm+0x95c>
 800366e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003676:	ee17 2a90 	vmov	r2, s15
 800367a:	4b5e      	ldr	r3, [pc, #376]	; (80037f4 <TM_GPS_INT_CheckTerm+0x954>)
 800367c:	fb83 1302 	smull	r1, r3, r3, r2
 8003680:	1159      	asrs	r1, r3, #5
 8003682:	17d3      	asrs	r3, r2, #31
 8003684:	1acb      	subs	r3, r1, r3
 8003686:	2164      	movs	r1, #100	; 0x64
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	b2da      	uxtb	r2, r3
 8003690:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 8003692:	775a      	strb	r2, [r3, #29]
			TM_GPS_INT_Data.Date.Date = (int)(temp * 0.0001f) % 100;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003800 <TM_GPS_INT_CheckTerm+0x960>
 80036a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036aa:	ee17 2a90 	vmov	r2, s15
 80036ae:	4b51      	ldr	r3, [pc, #324]	; (80037f4 <TM_GPS_INT_CheckTerm+0x954>)
 80036b0:	fb83 1302 	smull	r1, r3, r3, r2
 80036b4:	1159      	asrs	r1, r3, #5
 80036b6:	17d3      	asrs	r3, r2, #31
 80036b8:	1acb      	subs	r3, r1, r3
 80036ba:	2164      	movs	r1, #100	; 0x64
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	4b4c      	ldr	r3, [pc, #304]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 80036c6:	771a      	strb	r2, [r3, #28]
			TM_GPS_INT_SetFlag(GPS_FLAG_DATE);
 80036c8:	4b4e      	ldr	r3, [pc, #312]	; (8003804 <TM_GPS_INT_CheckTerm+0x964>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036d0:	4a4c      	ldr	r2, [pc, #304]	; (8003804 <TM_GPS_INT_CheckTerm+0x964>)
 80036d2:	6013      	str	r3, [r2, #0]
			break;
 80036d4:	e15f      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_VALIDITY: /* GPRMC */	
			/* GPS valid status */
			TM_GPS_INT_Data.Validity = GPS_Term[0] == 'A';
 80036d6:	4b46      	ldr	r3, [pc, #280]	; (80037f0 <TM_GPS_INT_CheckTerm+0x950>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b41      	cmp	r3, #65	; 0x41
 80036dc:	bf0c      	ite	eq
 80036de:	2301      	moveq	r3, #1
 80036e0:	2300      	movne	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b44      	ldr	r3, [pc, #272]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 80036e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY);
 80036ec:	4b45      	ldr	r3, [pc, #276]	; (8003804 <TM_GPS_INT_CheckTerm+0x964>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036f4:	4a43      	ldr	r2, [pc, #268]	; (8003804 <TM_GPS_INT_CheckTerm+0x964>)
 80036f6:	6013      	str	r3, [r2, #0]
			break;
 80036f8:	e14d      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_DIRECTION: /* GPRMC */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80036fa:	f107 0308 	add.w	r3, r7, #8
 80036fe:	4619      	mov	r1, r3
 8003700:	483b      	ldr	r0, [pc, #236]	; (80037f0 <TM_GPS_INT_CheckTerm+0x950>)
 8003702:	f000 fac4 	bl	8003c8e <TM_GPS_INT_Atoi>
 8003706:	4603      	mov	r3, r0
 8003708:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction = (float)temp;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	ee07 3a90 	vmov	s15, r3
 8003710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003714:	4b38      	ldr	r3, [pc, #224]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 8003716:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	3301      	adds	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	4a33      	ldr	r2, [pc, #204]	; (80037f0 <TM_GPS_INT_CheckTerm+0x950>)
 8003724:	4413      	add	r3, r2
 8003726:	f107 0208 	add.w	r2, r7, #8
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f000 faae 	bl	8003c8e <TM_GPS_INT_Atoi>
 8003732:	4603      	mov	r3, r0
 8003734:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	4619      	mov	r1, r3
 8003744:	200a      	movs	r0, #10
 8003746:	f000 facf 	bl	8003ce8 <TM_GPS_INT_Pow>
 800374a:	ee07 0a90 	vmov	s15, r0
 800374e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003752:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003756:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 8003758:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800375c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003760:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 8003762:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION);
 8003766:	4b27      	ldr	r3, [pc, #156]	; (8003804 <TM_GPS_INT_CheckTerm+0x964>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376e:	4a25      	ldr	r2, [pc, #148]	; (8003804 <TM_GPS_INT_CheckTerm+0x964>)
 8003770:	6013      	str	r3, [r2, #0]
			break;
 8003772:	e110      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
#endif
#ifndef GPS_DISABLE_GPGSA
		case GPS_POS_HDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003774:	f107 0308 	add.w	r3, r7, #8
 8003778:	4619      	mov	r1, r3
 800377a:	481d      	ldr	r0, [pc, #116]	; (80037f0 <TM_GPS_INT_CheckTerm+0x950>)
 800377c:	f000 fa87 	bl	8003c8e <TM_GPS_INT_Atoi>
 8003780:	4603      	mov	r3, r0
 8003782:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP = (float)temp;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378e:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 8003790:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	3301      	adds	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <TM_GPS_INT_CheckTerm+0x950>)
 800379e:	4413      	add	r3, r2
 80037a0:	f107 0208 	add.w	r2, r7, #8
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fa71 	bl	8003c8e <TM_GPS_INT_Atoi>
 80037ac:	4603      	mov	r3, r0
 80037ae:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	4619      	mov	r1, r3
 80037be:	200a      	movs	r0, #10
 80037c0:	f000 fa92 	bl	8003ce8 <TM_GPS_INT_Pow>
 80037c4:	ee07 0a90 	vmov	s15, r0
 80037c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037cc:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 80037d2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80037d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <TM_GPS_INT_CheckTerm+0x958>)
 80037dc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			TM_GPS_INT_SetFlag(GPS_FLAG_HDOP);
 80037e0:	4b08      	ldr	r3, [pc, #32]	; (8003804 <TM_GPS_INT_CheckTerm+0x964>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037e8:	4a06      	ldr	r2, [pc, #24]	; (8003804 <TM_GPS_INT_CheckTerm+0x964>)
 80037ea:	6013      	str	r3, [r2, #0]
			break;
 80037ec:	e0d3      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
 80037ee:	bf00      	nop
 80037f0:	2000036c 	.word	0x2000036c
 80037f4:	51eb851f 	.word	0x51eb851f
 80037f8:	20000388 	.word	0x20000388
 80037fc:	3c23d70a 	.word	0x3c23d70a
 8003800:	38d1b717 	.word	0x38d1b717
 8003804:	20000380 	.word	0x20000380
		case GPS_POS_PDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003808:	f107 0308 	add.w	r3, r7, #8
 800380c:	4619      	mov	r1, r3
 800380e:	48af      	ldr	r0, [pc, #700]	; (8003acc <TM_GPS_INT_CheckTerm+0xc2c>)
 8003810:	f000 fa3d 	bl	8003c8e <TM_GPS_INT_Atoi>
 8003814:	4603      	mov	r3, r0
 8003816:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP = (float)temp;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	4bab      	ldr	r3, [pc, #684]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 8003824:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	3301      	adds	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	4aa6      	ldr	r2, [pc, #664]	; (8003acc <TM_GPS_INT_CheckTerm+0xc2c>)
 8003832:	4413      	add	r3, r2
 8003834:	f107 0208 	add.w	r2, r7, #8
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fa27 	bl	8003c8e <TM_GPS_INT_Atoi>
 8003840:	4603      	mov	r3, r0
 8003842:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	4619      	mov	r1, r3
 8003852:	200a      	movs	r0, #10
 8003854:	f000 fa48 	bl	8003ce8 <TM_GPS_INT_Pow>
 8003858:	ee07 0a90 	vmov	s15, r0
 800385c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003860:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003864:	4b9a      	ldr	r3, [pc, #616]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 8003866:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800386a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800386e:	4b98      	ldr	r3, [pc, #608]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 8003870:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			TM_GPS_INT_SetFlag(GPS_FLAG_PDOP);
 8003874:	4b97      	ldr	r3, [pc, #604]	; (8003ad4 <TM_GPS_INT_CheckTerm+0xc34>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800387c:	4a95      	ldr	r2, [pc, #596]	; (8003ad4 <TM_GPS_INT_CheckTerm+0xc34>)
 800387e:	6013      	str	r3, [r2, #0]
			break;
 8003880:	e089      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_VDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003882:	f107 0308 	add.w	r3, r7, #8
 8003886:	4619      	mov	r1, r3
 8003888:	4890      	ldr	r0, [pc, #576]	; (8003acc <TM_GPS_INT_CheckTerm+0xc2c>)
 800388a:	f000 fa00 	bl	8003c8e <TM_GPS_INT_Atoi>
 800388e:	4603      	mov	r3, r0
 8003890:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP = (float)temp;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	ee07 3a90 	vmov	s15, r3
 8003898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389c:	4b8c      	ldr	r3, [pc, #560]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 800389e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	3301      	adds	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	4a88      	ldr	r2, [pc, #544]	; (8003acc <TM_GPS_INT_CheckTerm+0xc2c>)
 80038ac:	4413      	add	r3, r2
 80038ae:	f107 0208 	add.w	r2, r7, #8
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f9ea 	bl	8003c8e <TM_GPS_INT_Atoi>
 80038ba:	4603      	mov	r3, r0
 80038bc:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	ee07 3a90 	vmov	s15, r3
 80038c4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	4619      	mov	r1, r3
 80038cc:	200a      	movs	r0, #10
 80038ce:	f000 fa0b 	bl	8003ce8 <TM_GPS_INT_Pow>
 80038d2:	ee07 0a90 	vmov	s15, r0
 80038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038da:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80038de:	4b7c      	ldr	r3, [pc, #496]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 80038e0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80038e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e8:	4b79      	ldr	r3, [pc, #484]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 80038ea:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			TM_GPS_INT_SetFlag(GPS_FLAG_VDOP);
 80038ee:	4b79      	ldr	r3, [pc, #484]	; (8003ad4 <TM_GPS_INT_CheckTerm+0xc34>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038f6:	4a77      	ldr	r2, [pc, #476]	; (8003ad4 <TM_GPS_INT_CheckTerm+0xc34>)
 80038f8:	6013      	str	r3, [r2, #0]
			break;
 80038fa:	e04c      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_FIXMODE: /* GPGSA */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80038fc:	f107 0308 	add.w	r3, r7, #8
 8003900:	4619      	mov	r1, r3
 8003902:	4872      	ldr	r0, [pc, #456]	; (8003acc <TM_GPS_INT_CheckTerm+0xc2c>)
 8003904:	f000 f9c3 	bl	8003c8e <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.FixMode = temp;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	4b70      	ldr	r3, [pc, #448]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 800390e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE);
 8003912:	4b70      	ldr	r3, [pc, #448]	; (8003ad4 <TM_GPS_INT_CheckTerm+0xc34>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800391a:	4a6e      	ldr	r2, [pc, #440]	; (8003ad4 <TM_GPS_INT_CheckTerm+0xc34>)
 800391c:	6013      	str	r3, [r2, #0]
			break;
 800391e:	e03a      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_SAT9:
		case GPS_POS_SAT10:
		case GPS_POS_SAT11:
		case GPS_POS_SAT12:
			/* Satellite numbers */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003920:	f107 0308 	add.w	r3, r7, #8
 8003924:	4619      	mov	r1, r3
 8003926:	4869      	ldr	r0, [pc, #420]	; (8003acc <TM_GPS_INT_CheckTerm+0xc2c>)
 8003928:	f000 f9b1 	bl	8003c8e <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatelliteIDs[GPS_Term_Number - 3] = temp;
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <TM_GPS_INT_CheckTerm+0xc38>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	3b03      	subs	r3, #3
 8003934:	b2d1      	uxtb	r1, r2
 8003936:	4a66      	ldr	r2, [pc, #408]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 8003938:	4413      	add	r3, r2
 800393a:	460a      	mov	r2, r1
 800393c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			ids_count++;							/* Increase number of satellites found */
 8003940:	4b66      	ldr	r3, [pc, #408]	; (8003adc <TM_GPS_INT_CheckTerm+0xc3c>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	b2da      	uxtb	r2, r3
 8003948:	4b64      	ldr	r3, [pc, #400]	; (8003adc <TM_GPS_INT_CheckTerm+0xc3c>)
 800394a:	701a      	strb	r2, [r3, #0]
		
			if (ids_count == TM_GPS_INT_Data.Satellites) {
 800394c:	4b60      	ldr	r3, [pc, #384]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 800394e:	7d1a      	ldrb	r2, [r3, #20]
 8003950:	4b62      	ldr	r3, [pc, #392]	; (8003adc <TM_GPS_INT_CheckTerm+0xc3c>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d11d      	bne.n	8003994 <TM_GPS_INT_CheckTerm+0xaf4>
				ids_count = 0;						/* Reset count, we have all statements */
 8003958:	4b60      	ldr	r3, [pc, #384]	; (8003adc <TM_GPS_INT_CheckTerm+0xc3c>)
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 800395e:	4b5d      	ldr	r3, [pc, #372]	; (8003ad4 <TM_GPS_INT_CheckTerm+0xc34>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003966:	4a5b      	ldr	r2, [pc, #364]	; (8003ad4 <TM_GPS_INT_CheckTerm+0xc34>)
 8003968:	6013      	str	r3, [r2, #0]
			}
			break;
 800396a:	e013      	b.n	8003994 <TM_GPS_INT_CheckTerm+0xaf4>
#endif
#ifndef GPS_DISABLE_GPGSV
		case GPS_POS_SATSINVIEW: /* GPGSV */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800396c:	f107 0308 	add.w	r3, r7, #8
 8003970:	4619      	mov	r1, r3
 8003972:	4856      	ldr	r0, [pc, #344]	; (8003acc <TM_GPS_INT_CheckTerm+0xc2c>)
 8003974:	f000 f98b 	bl	8003c8e <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatellitesInView = temp;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	4b54      	ldr	r3, [pc, #336]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 800397e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW);
 8003982:	4b54      	ldr	r3, [pc, #336]	; (8003ad4 <TM_GPS_INT_CheckTerm+0xc34>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398a:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <TM_GPS_INT_CheckTerm+0xc34>)
 800398c:	6013      	str	r3, [r2, #0]
			break;
 800398e:	e002      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
#endif
		default: 
			break;
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <TM_GPS_INT_CheckTerm+0xaf6>
			break;
 8003994:	bf00      	nop
	}
	
#ifndef GPS_DISABLE_GPGSV
	/* Check for GPGSV statement separatelly */
	if (TM_GPS_Statement == GPS_GPGSV) {	
 8003996:	4b52      	ldr	r3, [pc, #328]	; (8003ae0 <TM_GPS_INT_CheckTerm+0xc40>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b03      	cmp	r3, #3
 800399c:	f040 8090 	bne.w	8003ac0 <TM_GPS_INT_CheckTerm+0xc20>
		if (GPS_Term_Number == 1) {
 80039a0:	4b4d      	ldr	r3, [pc, #308]	; (8003ad8 <TM_GPS_INT_CheckTerm+0xc38>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d109      	bne.n	80039bc <TM_GPS_INT_CheckTerm+0xb1c>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save number of GPGSV statements */
 80039a8:	f107 0308 	add.w	r3, r7, #8
 80039ac:	4619      	mov	r1, r3
 80039ae:	4847      	ldr	r0, [pc, #284]	; (8003acc <TM_GPS_INT_CheckTerm+0xc2c>)
 80039b0:	f000 f96d 	bl	8003c8e <TM_GPS_INT_Atoi>
			GPGSV_StatementsCount = temp;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	4b4a      	ldr	r3, [pc, #296]	; (8003ae4 <TM_GPS_INT_CheckTerm+0xc44>)
 80039ba:	701a      	strb	r2, [r3, #0]
		}
		if (GPS_Term_Number == 2) {
 80039bc:	4b46      	ldr	r3, [pc, #280]	; (8003ad8 <TM_GPS_INT_CheckTerm+0xc38>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d109      	bne.n	80039d8 <TM_GPS_INT_CheckTerm+0xb38>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save current of GPGSV statement number */
 80039c4:	f107 0308 	add.w	r3, r7, #8
 80039c8:	4619      	mov	r1, r3
 80039ca:	4840      	ldr	r0, [pc, #256]	; (8003acc <TM_GPS_INT_CheckTerm+0xc2c>)
 80039cc:	f000 f95f 	bl	8003c8e <TM_GPS_INT_Atoi>
			GPSGV_StatementNumber = temp;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	4b44      	ldr	r3, [pc, #272]	; (8003ae8 <TM_GPS_INT_CheckTerm+0xc48>)
 80039d6:	701a      	strb	r2, [r3, #0]
		}
		
		/* Data */
		if (GPS_Term_Number >= 4) {
 80039d8:	4b3f      	ldr	r3, [pc, #252]	; (8003ad8 <TM_GPS_INT_CheckTerm+0xc38>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d96f      	bls.n	8003ac0 <TM_GPS_INT_CheckTerm+0xc20>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Convert to number */
 80039e0:	f107 0308 	add.w	r3, r7, #8
 80039e4:	4619      	mov	r1, r3
 80039e6:	4839      	ldr	r0, [pc, #228]	; (8003acc <TM_GPS_INT_CheckTerm+0xc2c>)
 80039e8:	f000 f951 	bl	8003c8e <TM_GPS_INT_Atoi>
			
			GPGSV_Term_Number = GPS_Term_Number - 4;	/* Get proper value */
 80039ec:	4b3a      	ldr	r3, [pc, #232]	; (8003ad8 <TM_GPS_INT_CheckTerm+0xc38>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	3b04      	subs	r3, #4
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <TM_GPS_INT_CheckTerm+0xc4c>)
 80039f6:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Mod = GPGSV_Term_Number % 4;
 80039f8:	4b3c      	ldr	r3, [pc, #240]	; (8003aec <TM_GPS_INT_CheckTerm+0xc4c>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <TM_GPS_INT_CheckTerm+0xc50>)
 8003a04:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Number = (GPSGV_StatementNumber - 1) * 4 + (GPGSV_Term_Number / 4);
 8003a06:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <TM_GPS_INT_CheckTerm+0xc48>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	333f      	adds	r3, #63	; 0x3f
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	4b36      	ldr	r3, [pc, #216]	; (8003aec <TM_GPS_INT_CheckTerm+0xc4c>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	4b33      	ldr	r3, [pc, #204]	; (8003aec <TM_GPS_INT_CheckTerm+0xc4c>)
 8003a20:	701a      	strb	r2, [r3, #0]
			
			if (GPGSV_Term_Number < GPS_MAX_SATS_IN_VIEW) {	/* If still memory available */
 8003a22:	4b32      	ldr	r3, [pc, #200]	; (8003aec <TM_GPS_INT_CheckTerm+0xc4c>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b17      	cmp	r3, #23
 8003a28:	d84a      	bhi.n	8003ac0 <TM_GPS_INT_CheckTerm+0xc20>
				/* Check offset from 4 */
				if (GPGSV_Term_Mod == 0) {
 8003a2a:	4b31      	ldr	r3, [pc, #196]	; (8003af0 <TM_GPS_INT_CheckTerm+0xc50>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10e      	bne.n	8003a50 <TM_GPS_INT_CheckTerm+0xbb0>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].ID = temp;
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <TM_GPS_INT_CheckTerm+0xc4c>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	b2d0      	uxtb	r0, r2
 8003a3c:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a3e:	460b      	mov	r3, r1
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	440b      	add	r3, r1
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4413      	add	r3, r2
 8003a48:	3346      	adds	r3, #70	; 0x46
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	e037      	b.n	8003ac0 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 1) {
 8003a50:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <TM_GPS_INT_CheckTerm+0xc50>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d10e      	bne.n	8003a76 <TM_GPS_INT_CheckTerm+0xbd6>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Elevation = temp;
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	4b24      	ldr	r3, [pc, #144]	; (8003aec <TM_GPS_INT_CheckTerm+0xc4c>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	b2d0      	uxtb	r0, r2
 8003a62:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a64:	460b      	mov	r3, r1
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	440b      	add	r3, r1
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3347      	adds	r3, #71	; 0x47
 8003a70:	4602      	mov	r2, r0
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e024      	b.n	8003ac0 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 2) {
 8003a76:	4b1e      	ldr	r3, [pc, #120]	; (8003af0 <TM_GPS_INT_CheckTerm+0xc50>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d10e      	bne.n	8003a9c <TM_GPS_INT_CheckTerm+0xbfc>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Azimuth = temp;
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <TM_GPS_INT_CheckTerm+0xc4c>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	4619      	mov	r1, r3
 8003a86:	b290      	uxth	r0, r2
 8003a88:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	440b      	add	r3, r1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	3348      	adds	r3, #72	; 0x48
 8003a96:	4602      	mov	r2, r0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	e011      	b.n	8003ac0 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 3) {
 8003a9c:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <TM_GPS_INT_CheckTerm+0xc50>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d10d      	bne.n	8003ac0 <TM_GPS_INT_CheckTerm+0xc20>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].SNR = temp;
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <TM_GPS_INT_CheckTerm+0xc4c>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	b2d0      	uxtb	r0, r2
 8003aae:	4a08      	ldr	r2, [pc, #32]	; (8003ad0 <TM_GPS_INT_CheckTerm+0xc30>)
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	440b      	add	r3, r1
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	4413      	add	r3, r2
 8003aba:	334a      	adds	r3, #74	; 0x4a
 8003abc:	4602      	mov	r2, r0
 8003abe:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	ecbd 8b02 	vpop	{d8}
 8003ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aca:	bf00      	nop
 8003acc:	2000036c 	.word	0x2000036c
 8003ad0:	20000388 	.word	0x20000388
 8003ad4:	20000380 	.word	0x20000380
 8003ad8:	2000037b 	.word	0x2000037b
 8003adc:	200004bf 	.word	0x200004bf
 8003ae0:	20000000 	.word	0x20000000
 8003ae4:	200004bb 	.word	0x200004bb
 8003ae8:	200004bc 	.word	0x200004bc
 8003aec:	200004bd 	.word	0x200004bd
 8003af0:	200004be 	.word	0x200004be

08003af4 <TM_GPS_INT_Return>:

TM_GPS_Result_t TM_GPS_INT_Return(TM_GPS_t* GPS_Data) {
 8003af4:	b590      	push	{r4, r7, lr}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f939 	bl	8003d74 <TM_GPS_INT_FlagsOk>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 808d 	beq.w	8003c24 <TM_GPS_INT_Return+0x130>
		TM_GPS_FirstTime = 0;							/* Clear first time */
 8003b0a:	4b50      	ldr	r3, [pc, #320]	; (8003c4c <TM_GPS_INT_Return+0x158>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
		
		/* Set data */
#ifndef GPS_DISABLE_GPGGA
		GPS_Data->Latitude = TM_GPS_INT_Data.Latitude;
 8003b10:	4b4f      	ldr	r3, [pc, #316]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	e9c2 3400 	strd	r3, r4, [r2]
		GPS_Data->Longitude = TM_GPS_INT_Data.Longitude;
 8003b1c:	4b4c      	ldr	r3, [pc, #304]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b1e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	e9c2 3402 	strd	r3, r4, [r2, #8]
		GPS_Data->Satellites = TM_GPS_INT_Data.Satellites;
 8003b28:	4b49      	ldr	r3, [pc, #292]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b2a:	7d1a      	ldrb	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	751a      	strb	r2, [r3, #20]
		GPS_Data->Fix = TM_GPS_INT_Data.Fix;
 8003b30:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b32:	7d5a      	ldrb	r2, [r3, #21]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	755a      	strb	r2, [r3, #21]
		GPS_Data->Altitude = TM_GPS_INT_Data.Altitude;
 8003b38:	4b45      	ldr	r3, [pc, #276]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	611a      	str	r2, [r3, #16]
		GPS_Data->Time = TM_GPS_INT_Data.Time;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a43      	ldr	r2, [pc, #268]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b44:	3316      	adds	r3, #22
 8003b46:	3216      	adds	r2, #22
 8003b48:	6811      	ldr	r1, [r2, #0]
 8003b4a:	6019      	str	r1, [r3, #0]
 8003b4c:	8892      	ldrh	r2, [r2, #4]
 8003b4e:	809a      	strh	r2, [r3, #4]
#endif
#ifndef GPS_DISABLE_GPRMC
		GPS_Data->Speed = TM_GPS_INT_Data.Speed;
 8003b50:	4b3f      	ldr	r3, [pc, #252]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	621a      	str	r2, [r3, #32]
		GPS_Data->Date = TM_GPS_INT_Data.Date;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a3d      	ldr	r2, [pc, #244]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b5c:	331c      	adds	r3, #28
 8003b5e:	321c      	adds	r2, #28
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	4611      	mov	r1, r2
 8003b64:	8019      	strh	r1, [r3, #0]
 8003b66:	3302      	adds	r3, #2
 8003b68:	0c12      	lsrs	r2, r2, #16
 8003b6a:	701a      	strb	r2, [r3, #0]
		GPS_Data->Validity = TM_GPS_INT_Data.Validity;
 8003b6c:	4b38      	ldr	r3, [pc, #224]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b6e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		GPS_Data->Direction = TM_GPS_INT_Data.Direction;
 8003b78:	4b35      	ldr	r3, [pc, #212]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#ifndef GPS_DISABLE_GPGSA
		GPS_Data->HDOP = TM_GPS_INT_Data.HDOP;
 8003b80:	4b33      	ldr	r3, [pc, #204]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c
		GPS_Data->VDOP = TM_GPS_INT_Data.VDOP;
 8003b88:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	635a      	str	r2, [r3, #52]	; 0x34
		GPS_Data->PDOP = TM_GPS_INT_Data.PDOP;
 8003b90:	4b2f      	ldr	r3, [pc, #188]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
		GPS_Data->FixMode = TM_GPS_INT_Data.FixMode;
 8003b98:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003b9a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		for (i = 0; i < 12; i++) {
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e00d      	b.n	8003bc6 <TM_GPS_INT_Return+0xd2>
			GPS_Data->SatelliteIDs[i] = TM_GPS_INT_Data.SatelliteIDs[i];
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	4928      	ldr	r1, [pc, #160]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003bb0:	440a      	add	r2, r1
 8003bb2:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	460a      	mov	r2, r1
 8003bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		for (i = 0; i < 12; i++) {
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b0b      	cmp	r3, #11
 8003bca:	d9ee      	bls.n	8003baa <TM_GPS_INT_Return+0xb6>
		}
#endif
#ifndef GPS_DISABLE_GPGSV
		GPS_Data->SatellitesInView = TM_GPS_INT_Data.SatellitesInView;
 8003bcc:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003bce:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003bd8:	2300      	movs	r3, #0
 8003bda:	73fb      	strb	r3, [r7, #15]
 8003bdc:	e019      	b.n	8003c12 <TM_GPS_INT_Return+0x11e>
			GPS_Data->SatDesc[i] = TM_GPS_INT_Data.SatDesc[i];
 8003bde:	7bfa      	ldrb	r2, [r7, #15]
 8003be0:	7bf9      	ldrb	r1, [r7, #15]
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	440b      	add	r3, r1
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4403      	add	r3, r0
 8003bee:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8003bf2:	4917      	ldr	r1, [pc, #92]	; (8003c50 <TM_GPS_INT_Return+0x15c>)
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	440b      	add	r3, r1
 8003bfe:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8003c02:	4603      	mov	r3, r0
 8003c04:	6811      	ldr	r1, [r2, #0]
 8003c06:	6019      	str	r1, [r3, #0]
 8003c08:	8892      	ldrh	r2, [r2, #4]
 8003c0a:	809a      	strh	r2, [r3, #4]
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b17      	cmp	r3, #23
 8003c16:	d9e2      	bls.n	8003bde <TM_GPS_INT_Return+0xea>
		}
#endif
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_NewData);	/* Return new data */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003c20:	2300      	movs	r3, #0
 8003c22:	e00e      	b.n	8003c42 <TM_GPS_INT_Return+0x14e>
	}
	
	if (TM_GPS_FirstTime) {
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <TM_GPS_INT_Return+0x158>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <TM_GPS_INT_Return+0x144>
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_FirstDataWaiting);	/* We are first time */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003c34:	2302      	movs	r3, #2
 8003c36:	e004      	b.n	8003c42 <TM_GPS_INT_Return+0x14e>
	}
	TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_OldData);	/* Return old data */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003c40:	2301      	movs	r3, #1
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200004b0 	.word	0x200004b0
 8003c50:	20000388 	.word	0x20000388

08003c54 <TM_GPS_INT_StringStartsWith>:

uint8_t TM_GPS_INT_StringStartsWith(char* string, const char* str) {
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	while (*str) {
 8003c5e:	e00b      	b.n	8003c78 <TM_GPS_INT_StringStartsWith+0x24>
		if (*str++ != *string++) {
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	603a      	str	r2, [r7, #0]
 8003c66:	781a      	ldrb	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	1c59      	adds	r1, r3, #1
 8003c6c:	6079      	str	r1, [r7, #4]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <TM_GPS_INT_StringStartsWith+0x24>
			return 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e004      	b.n	8003c82 <TM_GPS_INT_StringStartsWith+0x2e>
	while (*str) {
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ef      	bne.n	8003c60 <TM_GPS_INT_StringStartsWith+0xc>
		}
	}
	return 1;
 8003c80:	2301      	movs	r3, #1
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <TM_GPS_INT_Atoi>:

uint8_t TM_GPS_INT_Atoi(char* str, uint32_t* val) {
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	73fb      	strb	r3, [r7, #15]
	*val = 0;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
	while (GPS_IS_DIGIT(*str)) {
 8003ca2:	e012      	b.n	8003cca <TM_GPS_INT_Atoi+0x3c>
		*val = *val * 10 + GPS_C2N(*str++);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	440b      	add	r3, r1
 8003cbc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	601a      	str	r2, [r3, #0]
		count++;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
	while (GPS_IS_DIGIT(*str)) {
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b2f      	cmp	r3, #47	; 0x2f
 8003cd0:	d903      	bls.n	8003cda <TM_GPS_INT_Atoi+0x4c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b39      	cmp	r3, #57	; 0x39
 8003cd8:	d9e4      	bls.n	8003ca4 <TM_GPS_INT_Atoi+0x16>
	}
	return count;
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <TM_GPS_INT_Pow>:

uint32_t TM_GPS_INT_Pow(uint8_t x, uint8_t y) {
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	460a      	mov	r2, r1
 8003cf2:	71fb      	strb	r3, [r7, #7]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 1;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003cfc:	e004      	b.n	8003d08 <TM_GPS_INT_Pow+0x20>
		ret *= x;
 8003cfe:	79fa      	ldrb	r2, [r7, #7]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003d08:	79bb      	ldrb	r3, [r7, #6]
 8003d0a:	1e5a      	subs	r2, r3, #1
 8003d0c:	71ba      	strb	r2, [r7, #6]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f5      	bne.n	8003cfe <TM_GPS_INT_Pow+0x16>
	}
	return ret;
 8003d12:	68fb      	ldr	r3, [r7, #12]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <TM_GPS_INT_Hex2Dec>:

uint8_t TM_GPS_INT_Hex2Dec(char c) {
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	2b2f      	cmp	r3, #47	; 0x2f
 8003d2e:	d906      	bls.n	8003d3e <TM_GPS_INT_Hex2Dec+0x1e>
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	2b39      	cmp	r3, #57	; 0x39
 8003d34:	d803      	bhi.n	8003d3e <TM_GPS_INT_Hex2Dec+0x1e>
		return c - '0';									/* 0 - 9 */
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	3b30      	subs	r3, #48	; 0x30
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	e014      	b.n	8003d68 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'A' && c <= 'F') {
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d906      	bls.n	8003d52 <TM_GPS_INT_Hex2Dec+0x32>
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	2b46      	cmp	r3, #70	; 0x46
 8003d48:	d803      	bhi.n	8003d52 <TM_GPS_INT_Hex2Dec+0x32>
		return c - 'A' + 10; 							/* 10 - 15 */
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	3b37      	subs	r3, #55	; 0x37
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	e00a      	b.n	8003d68 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'a' && c <= 'f') {
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	2b60      	cmp	r3, #96	; 0x60
 8003d56:	d906      	bls.n	8003d66 <TM_GPS_INT_Hex2Dec+0x46>
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	2b66      	cmp	r3, #102	; 0x66
 8003d5c:	d803      	bhi.n	8003d66 <TM_GPS_INT_Hex2Dec+0x46>
		return c - 'a' + 10; 							/* 10 - 15 */
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	3b57      	subs	r3, #87	; 0x57
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	e000      	b.n	8003d68 <TM_GPS_INT_Hex2Dec+0x48>
	}
	return 0;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <TM_GPS_INT_FlagsOk>:

uint8_t TM_GPS_INT_FlagsOk(TM_GPS_t* GPS_Data) {
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	if (GPS_Flags == GPS_Flags_OK) {					/* Check main flags */
 8003d7c:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <TM_GPS_INT_FlagsOk+0x54>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <TM_GPS_INT_FlagsOk+0x58>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d118      	bne.n	8003dba <TM_GPS_INT_FlagsOk+0x46>
		uint8_t i;
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	e00d      	b.n	8003daa <TM_GPS_INT_FlagsOk+0x36>
			if (GPS_Data->CustomStatements[i]->Updated == 0) {	/* If not flag set */
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	333e      	adds	r3, #62	; 0x3e
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	7ddb      	ldrb	r3, [r3, #23]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <TM_GPS_INT_FlagsOk+0x30>
				return 0;								/* Return, flags not OK */
 8003da0:	2300      	movs	r3, #0
 8003da2:	e00b      	b.n	8003dbc <TM_GPS_INT_FlagsOk+0x48>
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	3301      	adds	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d3eb      	bcc.n	8003d8e <TM_GPS_INT_FlagsOk+0x1a>
			}
		}
		return 1;										/* Flags valid */
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <TM_GPS_INT_FlagsOk+0x48>
	}
	return 0;											/* Not valid */
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	20000380 	.word	0x20000380
 8003dcc:	20000384 	.word	0x20000384

08003dd0 <TM_GPS_INT_ClearFlags>:

void TM_GPS_INT_ClearFlags(TM_GPS_t* GPS_Data) {
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	GPS_Flags = 0;						/* Reset main flags */
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <TM_GPS_INT_ClearFlags+0x44>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
 8003de2:	e00a      	b.n	8003dfa <TM_GPS_INT_ClearFlags+0x2a>
		GPS_Data->CustomStatements[i]->Updated = 0;		/* If not flag set */
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	333e      	adds	r3, #62	; 0x3e
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	75da      	strb	r2, [r3, #23]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	3301      	adds	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d3ee      	bcc.n	8003de4 <TM_GPS_INT_ClearFlags+0x14>
	}
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000380 	.word	0x20000380

08003e18 <TM_GPS_INT_CheckEmpty>:

void TM_GPS_INT_CheckEmpty(TM_GPS_t* GPS_Data) {
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	if (GPS_Term_Pos == 1) {
 8003e20:	4baf      	ldr	r3, [pc, #700]	; (80040e0 <TM_GPS_INT_CheckEmpty+0x2c8>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	f040 8151 	bne.w	80040cc <TM_GPS_INT_CheckEmpty+0x2b4>
		switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8003e2a:	4bae      	ldr	r3, [pc, #696]	; (80040e4 <TM_GPS_INT_CheckEmpty+0x2cc>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	015b      	lsls	r3, r3, #5
 8003e30:	4aad      	ldr	r2, [pc, #692]	; (80040e8 <TM_GPS_INT_CheckEmpty+0x2d0>)
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	3b01      	subs	r3, #1
 8003e38:	2b62      	cmp	r3, #98	; 0x62
 8003e3a:	f200 8149 	bhi.w	80040d0 <TM_GPS_INT_CheckEmpty+0x2b8>
 8003e3e:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <TM_GPS_INT_CheckEmpty+0x2c>)
 8003e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e44:	08004033 	.word	0x08004033
 8003e48:	08003fd1 	.word	0x08003fd1
 8003e4c:	08003fdf 	.word	0x08003fdf
 8003e50:	08003fed 	.word	0x08003fed
 8003e54:	08003ffb 	.word	0x08003ffb
 8003e58:	08004017 	.word	0x08004017
 8003e5c:	08004009 	.word	0x08004009
 8003e60:	080040d1 	.word	0x080040d1
 8003e64:	08004025 	.word	0x08004025
 8003e68:	080040d1 	.word	0x080040d1
 8003e6c:	080040d1 	.word	0x080040d1
 8003e70:	080040d1 	.word	0x080040d1
 8003e74:	080040d1 	.word	0x080040d1
 8003e78:	080040d1 	.word	0x080040d1
 8003e7c:	080040d1 	.word	0x080040d1
 8003e80:	080040d1 	.word	0x080040d1
 8003e84:	080040d1 	.word	0x080040d1
 8003e88:	080040d1 	.word	0x080040d1
 8003e8c:	080040d1 	.word	0x080040d1
 8003e90:	080040d1 	.word	0x080040d1
 8003e94:	080040d1 	.word	0x080040d1
 8003e98:	080040d1 	.word	0x080040d1
 8003e9c:	080040d1 	.word	0x080040d1
 8003ea0:	080040d1 	.word	0x080040d1
 8003ea4:	080040d1 	.word	0x080040d1
 8003ea8:	080040d1 	.word	0x080040d1
 8003eac:	080040d1 	.word	0x080040d1
 8003eb0:	080040d1 	.word	0x080040d1
 8003eb4:	080040d1 	.word	0x080040d1
 8003eb8:	080040d1 	.word	0x080040d1
 8003ebc:	080040d1 	.word	0x080040d1
 8003ec0:	080040d1 	.word	0x080040d1
 8003ec4:	080040d1 	.word	0x080040d1
 8003ec8:	0800405d 	.word	0x0800405d
 8003ecc:	080040d1 	.word	0x080040d1
 8003ed0:	080040d1 	.word	0x080040d1
 8003ed4:	080040d1 	.word	0x080040d1
 8003ed8:	080040d1 	.word	0x080040d1
 8003edc:	08004041 	.word	0x08004041
 8003ee0:	0800406b 	.word	0x0800406b
 8003ee4:	0800404f 	.word	0x0800404f
 8003ee8:	080040d1 	.word	0x080040d1
 8003eec:	080040d1 	.word	0x080040d1
 8003ef0:	080040d1 	.word	0x080040d1
 8003ef4:	080040d1 	.word	0x080040d1
 8003ef8:	080040d1 	.word	0x080040d1
 8003efc:	080040d1 	.word	0x080040d1
 8003f00:	080040d1 	.word	0x080040d1
 8003f04:	080040d1 	.word	0x080040d1
 8003f08:	080040d1 	.word	0x080040d1
 8003f0c:	080040d1 	.word	0x080040d1
 8003f10:	080040d1 	.word	0x080040d1
 8003f14:	080040d1 	.word	0x080040d1
 8003f18:	080040d1 	.word	0x080040d1
 8003f1c:	080040d1 	.word	0x080040d1
 8003f20:	080040d1 	.word	0x080040d1
 8003f24:	080040d1 	.word	0x080040d1
 8003f28:	080040d1 	.word	0x080040d1
 8003f2c:	080040d1 	.word	0x080040d1
 8003f30:	080040d1 	.word	0x080040d1
 8003f34:	080040d1 	.word	0x080040d1
 8003f38:	080040d1 	.word	0x080040d1
 8003f3c:	080040d1 	.word	0x080040d1
 8003f40:	080040d1 	.word	0x080040d1
 8003f44:	080040d1 	.word	0x080040d1
 8003f48:	080040a3 	.word	0x080040a3
 8003f4c:	080040b1 	.word	0x080040b1
 8003f50:	080040b1 	.word	0x080040b1
 8003f54:	080040b1 	.word	0x080040b1
 8003f58:	080040b1 	.word	0x080040b1
 8003f5c:	080040b1 	.word	0x080040b1
 8003f60:	080040b1 	.word	0x080040b1
 8003f64:	080040b1 	.word	0x080040b1
 8003f68:	080040b1 	.word	0x080040b1
 8003f6c:	080040b1 	.word	0x080040b1
 8003f70:	080040b1 	.word	0x080040b1
 8003f74:	080040b1 	.word	0x080040b1
 8003f78:	080040b1 	.word	0x080040b1
 8003f7c:	08004087 	.word	0x08004087
 8003f80:	08004079 	.word	0x08004079
 8003f84:	08004095 	.word	0x08004095
 8003f88:	080040d1 	.word	0x080040d1
 8003f8c:	080040d1 	.word	0x080040d1
 8003f90:	080040d1 	.word	0x080040d1
 8003f94:	080040d1 	.word	0x080040d1
 8003f98:	080040d1 	.word	0x080040d1
 8003f9c:	080040d1 	.word	0x080040d1
 8003fa0:	080040d1 	.word	0x080040d1
 8003fa4:	080040d1 	.word	0x080040d1
 8003fa8:	080040d1 	.word	0x080040d1
 8003fac:	080040d1 	.word	0x080040d1
 8003fb0:	080040d1 	.word	0x080040d1
 8003fb4:	080040d1 	.word	0x080040d1
 8003fb8:	080040d1 	.word	0x080040d1
 8003fbc:	080040d1 	.word	0x080040d1
 8003fc0:	080040d1 	.word	0x080040d1
 8003fc4:	080040d1 	.word	0x080040d1
 8003fc8:	080040d1 	.word	0x080040d1
 8003fcc:	080040bf 	.word	0x080040bf
#ifndef GPS_DISABLE_GPGGA
			case GPS_POS_LATITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE); break;
 8003fd0:	4b46      	ldr	r3, [pc, #280]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	4a44      	ldr	r2, [pc, #272]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	e079      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_NS: 		TM_GPS_INT_SetFlag(GPS_FLAG_NS); break;
 8003fde:	4b43      	ldr	r3, [pc, #268]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe6:	4a41      	ldr	r2, [pc, #260]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e072      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_LONGITUDE: TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE); break;
 8003fec:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	4a3d      	ldr	r2, [pc, #244]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	e06b      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_EW: 		TM_GPS_INT_SetFlag(GPS_FLAG_EW); break;
 8003ffa:	4b3c      	ldr	r3, [pc, #240]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f043 0320 	orr.w	r3, r3, #32
 8004002:	4a3a      	ldr	r2, [pc, #232]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e064      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SATS:		TM_GPS_INT_SetFlag(GPS_FLAG_SATS); break;
 8004008:	4b38      	ldr	r3, [pc, #224]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f043 0304 	orr.w	r3, r3, #4
 8004010:	4a36      	ldr	r2, [pc, #216]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	e05d      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIX: 		TM_GPS_INT_SetFlag(GPS_FLAG_FIX); break;
 8004016:	4b35      	ldr	r3, [pc, #212]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f043 0308 	orr.w	r3, r3, #8
 800401e:	4a33      	ldr	r2, [pc, #204]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e056      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_ALTITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE); break;
 8004024:	4b31      	ldr	r3, [pc, #196]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f043 0310 	orr.w	r3, r3, #16
 800402c:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	e04f      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_TIME: 		TM_GPS_INT_SetFlag(GPS_FLAG_TIME); break;
 8004032:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403a:	4a2c      	ldr	r2, [pc, #176]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e048      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPRMC
			case GPS_POS_SPEED: 	TM_GPS_INT_SetFlag(GPS_FLAG_SPEED); break;
 8004040:	4b2a      	ldr	r3, [pc, #168]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	4a28      	ldr	r2, [pc, #160]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	e041      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DATE: 		TM_GPS_INT_SetFlag(GPS_FLAG_DATE); break;
 800404e:	4b27      	ldr	r3, [pc, #156]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004056:	4a25      	ldr	r2, [pc, #148]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	e03a      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VALIDITY: 	TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY); break;
 800405c:	4b23      	ldr	r3, [pc, #140]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004064:	4a21      	ldr	r2, [pc, #132]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	e033      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DIRECTION: TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION); break;
 800406a:	4b20      	ldr	r3, [pc, #128]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004072:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e02c      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSA
			case GPS_POS_HDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_HDOP); break;
 8004078:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004080:	4a1a      	ldr	r2, [pc, #104]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	e025      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_PDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_PDOP); break;
 8004086:	4b19      	ldr	r3, [pc, #100]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800408e:	4a17      	ldr	r2, [pc, #92]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e01e      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_VDOP); break;
 8004094:	4b15      	ldr	r3, [pc, #84]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800409c:	4a13      	ldr	r2, [pc, #76]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e017      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIXMODE: 	TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE); break;
 80040a2:	4b12      	ldr	r3, [pc, #72]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040aa:	4a10      	ldr	r2, [pc, #64]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e010      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SAT8:
			case GPS_POS_SAT9:
			case GPS_POS_SAT10:
			case GPS_POS_SAT11:
			case GPS_POS_SAT12:
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 80040b0:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b8:	4a0c      	ldr	r2, [pc, #48]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040ba:	6013      	str	r3, [r2, #0]
				break;
 80040bc:	e009      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSV
			case GPS_POS_SATSINVIEW: TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW); break;
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c6:	4a09      	ldr	r2, [pc, #36]	; (80040ec <TM_GPS_INT_CheckEmpty+0x2d4>)
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e002      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
			default: 
				break;
		}
	}
 80040cc:	bf00      	nop
 80040ce:	e000      	b.n	80040d2 <TM_GPS_INT_CheckEmpty+0x2ba>
				break;
 80040d0:	bf00      	nop
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	2000037c 	.word	0x2000037c
 80040e4:	20000000 	.word	0x20000000
 80040e8:	2000037b 	.word	0x2000037b
 80040ec:	20000380 	.word	0x20000380

080040f0 <_bitCount64>:
#define SBUS_ERROR_FLAG_BIT_SIZE 64

/*
 *  count '1' from 64bit varible
 */
uint8_t _bitCount64(uint64_t flagBit){
 80040f0:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t cnt = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 8004100:	2300      	movs	r3, #0
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b3f      	cmp	r3, #63	; 0x3f
 8004108:	dc16      	bgt.n	8004138 <_bitCount64+0x48>
		if((flagBit & (1<<i))!=0) cnt++;
 800410a:	2201      	movs	r2, #1
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	4619      	mov	r1, r3
 8004114:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8004118:	e9d7 3400 	ldrd	r3, r4, [r7]
 800411c:	ea03 0b01 	and.w	fp, r3, r1
 8004120:	ea04 0c02 	and.w	ip, r4, r2
 8004124:	ea5b 030c 	orrs.w	r3, fp, ip
 8004128:	d002      	beq.n	8004130 <_bitCount64+0x40>
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	3301      	adds	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	3301      	adds	r3, #1
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	e7e5      	b.n	8004104 <_bitCount64+0x14>
	}
	return cnt;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8004144:	4770      	bx	lr
	...

08004148 <SBUS_init>:
SBUS_t sbus;

static uint8_t _parserState = 0;		//for parsing
static uint8_t _curByte, _prevByte;

void SBUS_init(UART_HandleTypeDef *huart) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	sbus.huart = huart;
 8004150:	4a12      	ldr	r2, [pc, #72]	; (800419c <SBUS_init+0x54>)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6013      	str	r3, [r2, #0]

	memset(sbus.dmaBuf, 0, sizeof(sbus.dmaBuf));
 8004156:	2219      	movs	r2, #25
 8004158:	2100      	movs	r1, #0
 800415a:	4811      	ldr	r0, [pc, #68]	; (80041a0 <SBUS_init+0x58>)
 800415c:	f016 f883 	bl	801a266 <memset>
	memset(sbus.rxBuf, 0, sizeof(sbus.rxBuf));
 8004160:	2219      	movs	r2, #25
 8004162:	2100      	movs	r1, #0
 8004164:	480f      	ldr	r0, [pc, #60]	; (80041a4 <SBUS_init+0x5c>)
 8004166:	f016 f87e 	bl	801a266 <memset>
	memset(sbus.rcValue, 0, sizeof(sbus.rcValue));
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	2100      	movs	r1, #0
 800416e:	480e      	ldr	r0, [pc, #56]	; (80041a8 <SBUS_init+0x60>)
 8004170:	f016 f879 	bl	801a266 <memset>
	memset(sbus.compRcValue, 0, sizeof(sbus.compRcValue));
 8004174:	2224      	movs	r2, #36	; 0x24
 8004176:	2100      	movs	r1, #0
 8004178:	480c      	ldr	r0, [pc, #48]	; (80041ac <SBUS_init+0x64>)
 800417a:	f016 f874 	bl	801a266 <memset>
	sbus.state = SBUS_STATE_FAILSAFE;
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <SBUS_init+0x54>)
 8004180:	2200      	movs	r2, #0
 8004182:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(sbus.huart, sbus.dmaBuf, SBUS_DMA_BUF_SIZE);
 8004186:	4b05      	ldr	r3, [pc, #20]	; (800419c <SBUS_init+0x54>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2219      	movs	r2, #25
 800418c:	4904      	ldr	r1, [pc, #16]	; (80041a0 <SBUS_init+0x58>)
 800418e:	4618      	mov	r0, r3
 8004190:	f00c fdaa 	bl	8010ce8 <HAL_UART_Receive_DMA>
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000548 	.word	0x20000548
 80041a0:	2000054c 	.word	0x2000054c
 80041a4:	20000565 	.word	0x20000565
 80041a8:	2000057e 	.word	0x2000057e
 80041ac:	200005a2 	.word	0x200005a2

080041b0 <SBUS_decoding>:

SBUS_Result_t SBUS_decoding() {
 80041b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
	if(sbus.rxBuf[23] & SBUS_FAIL_SAFE){	/* failsafe frame */
 80041b8:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <SBUS_decoding+0xf4>)
 80041ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <SBUS_decoding+0x22>
		sbus.state = SBUS_STATE_FAILSAFE;
 80041c6:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <SBUS_decoding+0xf4>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		return SBUS_Result_OldData;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e1f6      	b.n	80045c0 <SBUS_decoding+0x410>
	}

	/* handle bit flag  */
	if(++(sbus._bitPos) == SBUS_ERROR_FLAG_BIT_SIZE) sbus._bitPos = 0; /* bitPos over 64 */
 80041d2:	4b34      	ldr	r3, [pc, #208]	; (80042a4 <SBUS_decoding+0xf4>)
 80041d4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80041d8:	3301      	adds	r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <SBUS_decoding+0xf4>)
 80041de:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80041e2:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <SBUS_decoding+0xf4>)
 80041e4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <SBUS_decoding+0x4e>
 80041f6:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <SBUS_decoding+0xf4>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) sbus._errBit |= 1<<sbus._bitPos;	/* lost frame */
 80041fe:	4b29      	ldr	r3, [pc, #164]	; (80042a4 <SBUS_decoding+0xf4>)
 8004200:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d013      	beq.n	8004234 <SBUS_decoding+0x84>
 800420c:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <SBUS_decoding+0xf4>)
 800420e:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 8004212:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <SBUS_decoding+0xf4>)
 8004214:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004218:	4618      	mov	r0, r3
 800421a:	2301      	movs	r3, #1
 800421c:	4083      	lsls	r3, r0
 800421e:	469b      	mov	fp, r3
 8004220:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8004224:	ea4b 0301 	orr.w	r3, fp, r1
 8004228:	ea4c 0402 	orr.w	r4, ip, r2
 800422c:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <SBUS_decoding+0xf4>)
 800422e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8004232:	e013      	b.n	800425c <SBUS_decoding+0xac>
	else sbus._errBit &= ~(1<<sbus._bitPos);	/* normal frame */
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <SBUS_decoding+0xf4>)
 8004236:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <SBUS_decoding+0xf4>)
 800423c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004240:	4618      	mov	r0, r3
 8004242:	2301      	movs	r3, #1
 8004244:	4083      	lsls	r3, r0
 8004246:	43db      	mvns	r3, r3
 8004248:	469b      	mov	fp, r3
 800424a:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 800424e:	ea0b 0301 	and.w	r3, fp, r1
 8004252:	ea0c 0402 	and.w	r4, ip, r2
 8004256:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <SBUS_decoding+0xf4>)
 8004258:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	sbus._errCnt = _bitCount64(sbus._errBit);	/* count error bit */
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <SBUS_decoding+0xf4>)
 800425e:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8004262:	4618      	mov	r0, r3
 8004264:	4621      	mov	r1, r4
 8004266:	f7ff ff43 	bl	80040f0 <_bitCount64>
 800426a:	4603      	mov	r3, r0
 800426c:	461a      	mov	r2, r3
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <SBUS_decoding+0xf4>)
 8004270:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	/* handle sbus state */
	if(sbus._errCnt > SBUS_ERROR_THRESHHOLD) sbus.state = SBUS_STATE_LOSS; /* if error rate over the threshold */
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <SBUS_decoding+0xf4>)
 8004276:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800427a:	2b14      	cmp	r3, #20
 800427c:	d904      	bls.n	8004288 <SBUS_decoding+0xd8>
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <SBUS_decoding+0xf4>)
 8004280:	2201      	movs	r2, #1
 8004282:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8004286:	e003      	b.n	8004290 <SBUS_decoding+0xe0>
	else sbus.state = SBUS_STATE_STEADY;	/* sbus signal stable */
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <SBUS_decoding+0xf4>)
 800428a:	2202      	movs	r2, #2
 800428c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) return SBUS_Result_OldData; /* if this frame is lost frame, not decode packet */
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <SBUS_decoding+0xf4>)
 8004292:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	d004      	beq.n	80042a8 <SBUS_decoding+0xf8>
 800429e:	2300      	movs	r3, #0
 80042a0:	e18e      	b.n	80045c0 <SBUS_decoding+0x410>
 80042a2:	bf00      	nop
 80042a4:	20000548 	.word	0x20000548

	/* decode packet */
	sbus.rcValue[0] = ((uint16_t)sbus.rxBuf[1] >> 0 | ((uint16_t)sbus.rxBuf[2] << 8)) & 0x07FF;
 80042a8:	4ba7      	ldr	r3, [pc, #668]	; (8004548 <SBUS_decoding+0x398>)
 80042aa:	7f9b      	ldrb	r3, [r3, #30]
 80042ac:	b21a      	sxth	r2, r3
 80042ae:	4ba6      	ldr	r3, [pc, #664]	; (8004548 <SBUS_decoding+0x398>)
 80042b0:	7fdb      	ldrb	r3, [r3, #31]
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	b21b      	sxth	r3, r3
 80042b6:	4313      	orrs	r3, r2
 80042b8:	b21b      	sxth	r3, r3
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	4ba1      	ldr	r3, [pc, #644]	; (8004548 <SBUS_decoding+0x398>)
 80042c4:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus.rcValue[1] = ((uint16_t)sbus.rxBuf[2] >> 3 | ((uint16_t)sbus.rxBuf[3] << 5)) & 0x07FF;
 80042c6:	4ba0      	ldr	r3, [pc, #640]	; (8004548 <SBUS_decoding+0x398>)
 80042c8:	7fdb      	ldrb	r3, [r3, #31]
 80042ca:	10db      	asrs	r3, r3, #3
 80042cc:	b21a      	sxth	r2, r3
 80042ce:	4b9e      	ldr	r3, [pc, #632]	; (8004548 <SBUS_decoding+0x398>)
 80042d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042d4:	015b      	lsls	r3, r3, #5
 80042d6:	b21b      	sxth	r3, r3
 80042d8:	4313      	orrs	r3, r2
 80042da:	b21b      	sxth	r3, r3
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	4b98      	ldr	r3, [pc, #608]	; (8004548 <SBUS_decoding+0x398>)
 80042e6:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus.rcValue[2] = ((uint16_t)sbus.rxBuf[3] >> 6 | ((uint16_t)sbus.rxBuf[4] << 2) | (uint16_t)sbus.rxBuf[5] << 10) & 0x07FF;
 80042e8:	4b97      	ldr	r3, [pc, #604]	; (8004548 <SBUS_decoding+0x398>)
 80042ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ee:	119b      	asrs	r3, r3, #6
 80042f0:	b21a      	sxth	r2, r3
 80042f2:	4b95      	ldr	r3, [pc, #596]	; (8004548 <SBUS_decoding+0x398>)
 80042f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	b21b      	sxth	r3, r3
 80042fc:	4313      	orrs	r3, r2
 80042fe:	b21a      	sxth	r2, r3
 8004300:	4b91      	ldr	r3, [pc, #580]	; (8004548 <SBUS_decoding+0x398>)
 8004302:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004306:	029b      	lsls	r3, r3, #10
 8004308:	b21b      	sxth	r3, r3
 800430a:	4313      	orrs	r3, r2
 800430c:	b21b      	sxth	r3, r3
 800430e:	b29b      	uxth	r3, r3
 8004310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004314:	b29a      	uxth	r2, r3
 8004316:	4b8c      	ldr	r3, [pc, #560]	; (8004548 <SBUS_decoding+0x398>)
 8004318:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus.rcValue[3] = ((uint16_t)sbus.rxBuf[5] >> 1 | ((uint16_t)sbus.rxBuf[6] << 7)) & 0x07FF;
 800431a:	4b8b      	ldr	r3, [pc, #556]	; (8004548 <SBUS_decoding+0x398>)
 800431c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004320:	105b      	asrs	r3, r3, #1
 8004322:	b21a      	sxth	r2, r3
 8004324:	4b88      	ldr	r3, [pc, #544]	; (8004548 <SBUS_decoding+0x398>)
 8004326:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800432a:	01db      	lsls	r3, r3, #7
 800432c:	b21b      	sxth	r3, r3
 800432e:	4313      	orrs	r3, r2
 8004330:	b21b      	sxth	r3, r3
 8004332:	b29b      	uxth	r3, r3
 8004334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004338:	b29a      	uxth	r2, r3
 800433a:	4b83      	ldr	r3, [pc, #524]	; (8004548 <SBUS_decoding+0x398>)
 800433c:	879a      	strh	r2, [r3, #60]	; 0x3c
	sbus.rcValue[4] = ((uint16_t)sbus.rxBuf[6] >> 4 | ((uint16_t)sbus.rxBuf[7] << 4)) & 0x07FF;
 800433e:	4b82      	ldr	r3, [pc, #520]	; (8004548 <SBUS_decoding+0x398>)
 8004340:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004344:	111b      	asrs	r3, r3, #4
 8004346:	b21a      	sxth	r2, r3
 8004348:	4b7f      	ldr	r3, [pc, #508]	; (8004548 <SBUS_decoding+0x398>)
 800434a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	b21b      	sxth	r3, r3
 8004352:	4313      	orrs	r3, r2
 8004354:	b21b      	sxth	r3, r3
 8004356:	b29b      	uxth	r3, r3
 8004358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800435c:	b29a      	uxth	r2, r3
 800435e:	4b7a      	ldr	r3, [pc, #488]	; (8004548 <SBUS_decoding+0x398>)
 8004360:	87da      	strh	r2, [r3, #62]	; 0x3e
	sbus.rcValue[5] = ((uint16_t)sbus.rxBuf[7] >> 7 | ((uint16_t)sbus.rxBuf[8] << 1) | (uint16_t)sbus.rxBuf[9] << 9) & 0x07FF;
 8004362:	4b79      	ldr	r3, [pc, #484]	; (8004548 <SBUS_decoding+0x398>)
 8004364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004368:	11db      	asrs	r3, r3, #7
 800436a:	b21a      	sxth	r2, r3
 800436c:	4b76      	ldr	r3, [pc, #472]	; (8004548 <SBUS_decoding+0x398>)
 800436e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	b21b      	sxth	r3, r3
 8004376:	4313      	orrs	r3, r2
 8004378:	b21a      	sxth	r2, r3
 800437a:	4b73      	ldr	r3, [pc, #460]	; (8004548 <SBUS_decoding+0x398>)
 800437c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004380:	025b      	lsls	r3, r3, #9
 8004382:	b21b      	sxth	r3, r3
 8004384:	4313      	orrs	r3, r2
 8004386:	b21b      	sxth	r3, r3
 8004388:	b29b      	uxth	r3, r3
 800438a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800438e:	b29a      	uxth	r2, r3
 8004390:	4b6d      	ldr	r3, [pc, #436]	; (8004548 <SBUS_decoding+0x398>)
 8004392:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sbus.rcValue[6] = ((uint16_t)sbus.rxBuf[9] >> 2 | ((uint16_t)sbus.rxBuf[10] << 6)) & 0x07FF;
 8004396:	4b6c      	ldr	r3, [pc, #432]	; (8004548 <SBUS_decoding+0x398>)
 8004398:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800439c:	109b      	asrs	r3, r3, #2
 800439e:	b21a      	sxth	r2, r3
 80043a0:	4b69      	ldr	r3, [pc, #420]	; (8004548 <SBUS_decoding+0x398>)
 80043a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80043a6:	019b      	lsls	r3, r3, #6
 80043a8:	b21b      	sxth	r3, r3
 80043aa:	4313      	orrs	r3, r2
 80043ac:	b21b      	sxth	r3, r3
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	4b64      	ldr	r3, [pc, #400]	; (8004548 <SBUS_decoding+0x398>)
 80043b8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sbus.rcValue[7] = ((uint16_t)sbus.rxBuf[10] >> 5 | ((uint16_t)sbus.rxBuf[11] << 3)) & 0x07FF;
 80043bc:	4b62      	ldr	r3, [pc, #392]	; (8004548 <SBUS_decoding+0x398>)
 80043be:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80043c2:	115b      	asrs	r3, r3, #5
 80043c4:	b21a      	sxth	r2, r3
 80043c6:	4b60      	ldr	r3, [pc, #384]	; (8004548 <SBUS_decoding+0x398>)
 80043c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	b21b      	sxth	r3, r3
 80043d0:	4313      	orrs	r3, r2
 80043d2:	b21b      	sxth	r3, r3
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043da:	b29a      	uxth	r2, r3
 80043dc:	4b5a      	ldr	r3, [pc, #360]	; (8004548 <SBUS_decoding+0x398>)
 80043de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	sbus.rcValue[8] = ((uint16_t)sbus.rxBuf[12] << 0 | ((uint16_t)sbus.rxBuf[13] << 8)) & 0x07FF;
 80043e2:	4b59      	ldr	r3, [pc, #356]	; (8004548 <SBUS_decoding+0x398>)
 80043e4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043e8:	b21a      	sxth	r2, r3
 80043ea:	4b57      	ldr	r3, [pc, #348]	; (8004548 <SBUS_decoding+0x398>)
 80043ec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	b21b      	sxth	r3, r3
 80043f4:	4313      	orrs	r3, r2
 80043f6:	b21b      	sxth	r3, r3
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043fe:	b29a      	uxth	r2, r3
 8004400:	4b51      	ldr	r3, [pc, #324]	; (8004548 <SBUS_decoding+0x398>)
 8004402:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	sbus.rcValue[9] = ((uint16_t)sbus.rxBuf[13] >> 3 | ((uint16_t)sbus.rxBuf[14] << 5)) & 0x07FF;
 8004406:	4b50      	ldr	r3, [pc, #320]	; (8004548 <SBUS_decoding+0x398>)
 8004408:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800440c:	10db      	asrs	r3, r3, #3
 800440e:	b21a      	sxth	r2, r3
 8004410:	4b4d      	ldr	r3, [pc, #308]	; (8004548 <SBUS_decoding+0x398>)
 8004412:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004416:	015b      	lsls	r3, r3, #5
 8004418:	b21b      	sxth	r3, r3
 800441a:	4313      	orrs	r3, r2
 800441c:	b21b      	sxth	r3, r3
 800441e:	b29b      	uxth	r3, r3
 8004420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004424:	b29a      	uxth	r2, r3
 8004426:	4b48      	ldr	r3, [pc, #288]	; (8004548 <SBUS_decoding+0x398>)
 8004428:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	sbus.rcValue[10] = ((uint16_t)sbus.rxBuf[14] >> 6 | ((uint16_t)sbus.rxBuf[15] << 2) | (uint16_t)sbus.rxBuf[16] << 10) & 0x07FF;
 800442c:	4b46      	ldr	r3, [pc, #280]	; (8004548 <SBUS_decoding+0x398>)
 800442e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004432:	119b      	asrs	r3, r3, #6
 8004434:	b21a      	sxth	r2, r3
 8004436:	4b44      	ldr	r3, [pc, #272]	; (8004548 <SBUS_decoding+0x398>)
 8004438:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	b21b      	sxth	r3, r3
 8004440:	4313      	orrs	r3, r2
 8004442:	b21a      	sxth	r2, r3
 8004444:	4b40      	ldr	r3, [pc, #256]	; (8004548 <SBUS_decoding+0x398>)
 8004446:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800444a:	029b      	lsls	r3, r3, #10
 800444c:	b21b      	sxth	r3, r3
 800444e:	4313      	orrs	r3, r2
 8004450:	b21b      	sxth	r3, r3
 8004452:	b29b      	uxth	r3, r3
 8004454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004458:	b29a      	uxth	r2, r3
 800445a:	4b3b      	ldr	r3, [pc, #236]	; (8004548 <SBUS_decoding+0x398>)
 800445c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	sbus.rcValue[11] = ((uint16_t)sbus.rxBuf[16] >> 1 | ((uint16_t)sbus.rxBuf[17] << 7)) & 0x07FF;
 8004460:	4b39      	ldr	r3, [pc, #228]	; (8004548 <SBUS_decoding+0x398>)
 8004462:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004466:	105b      	asrs	r3, r3, #1
 8004468:	b21a      	sxth	r2, r3
 800446a:	4b37      	ldr	r3, [pc, #220]	; (8004548 <SBUS_decoding+0x398>)
 800446c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004470:	01db      	lsls	r3, r3, #7
 8004472:	b21b      	sxth	r3, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	b21b      	sxth	r3, r3
 8004478:	b29b      	uxth	r3, r3
 800447a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800447e:	b29a      	uxth	r2, r3
 8004480:	4b31      	ldr	r3, [pc, #196]	; (8004548 <SBUS_decoding+0x398>)
 8004482:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbus.rcValue[12] = ((uint16_t)sbus.rxBuf[17] >> 4 | ((uint16_t)sbus.rxBuf[18] << 4)) & 0x07FF;
 8004486:	4b30      	ldr	r3, [pc, #192]	; (8004548 <SBUS_decoding+0x398>)
 8004488:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800448c:	111b      	asrs	r3, r3, #4
 800448e:	b21a      	sxth	r2, r3
 8004490:	4b2d      	ldr	r3, [pc, #180]	; (8004548 <SBUS_decoding+0x398>)
 8004492:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	b21b      	sxth	r3, r3
 800449a:	4313      	orrs	r3, r2
 800449c:	b21b      	sxth	r3, r3
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	4b28      	ldr	r3, [pc, #160]	; (8004548 <SBUS_decoding+0x398>)
 80044a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbus.rcValue[13] = ((uint16_t)sbus.rxBuf[18] >> 7 | ((uint16_t)sbus.rxBuf[19] << 1) | (uint16_t)sbus.rxBuf[21] << 9) & 0x07FF;
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <SBUS_decoding+0x398>)
 80044ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80044b2:	11db      	asrs	r3, r3, #7
 80044b4:	b21a      	sxth	r2, r3
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <SBUS_decoding+0x398>)
 80044b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	b21b      	sxth	r3, r3
 80044c0:	4313      	orrs	r3, r2
 80044c2:	b21a      	sxth	r2, r3
 80044c4:	4b20      	ldr	r3, [pc, #128]	; (8004548 <SBUS_decoding+0x398>)
 80044c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80044ca:	025b      	lsls	r3, r3, #9
 80044cc:	b21b      	sxth	r3, r3
 80044ce:	4313      	orrs	r3, r2
 80044d0:	b21b      	sxth	r3, r3
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044d8:	b29a      	uxth	r2, r3
 80044da:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <SBUS_decoding+0x398>)
 80044dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbus.rcValue[14] = ((uint16_t)sbus.rxBuf[20] >> 2 | ((uint16_t)sbus.rxBuf[21] << 6)) & 0x07FF;
 80044e0:	4b19      	ldr	r3, [pc, #100]	; (8004548 <SBUS_decoding+0x398>)
 80044e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044e6:	109b      	asrs	r3, r3, #2
 80044e8:	b21a      	sxth	r2, r3
 80044ea:	4b17      	ldr	r3, [pc, #92]	; (8004548 <SBUS_decoding+0x398>)
 80044ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80044f0:	019b      	lsls	r3, r3, #6
 80044f2:	b21b      	sxth	r3, r3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	b21b      	sxth	r3, r3
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044fe:	b29a      	uxth	r2, r3
 8004500:	4b11      	ldr	r3, [pc, #68]	; (8004548 <SBUS_decoding+0x398>)
 8004502:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbus.rcValue[15] = ((uint16_t)sbus.rxBuf[21] >> 5 | ((uint16_t)sbus.rxBuf[22] << 3)) & 0x07FF;
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <SBUS_decoding+0x398>)
 8004508:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800450c:	115b      	asrs	r3, r3, #5
 800450e:	b21a      	sxth	r2, r3
 8004510:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <SBUS_decoding+0x398>)
 8004512:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	b21b      	sxth	r3, r3
 800451a:	4313      	orrs	r3, r2
 800451c:	b21b      	sxth	r3, r3
 800451e:	b29b      	uxth	r3, r3
 8004520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004524:	b29a      	uxth	r2, r3
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <SBUS_decoding+0x398>)
 8004528:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	if (((uint16_t)sbus.rxBuf[23]) & 0x0001)       sbus.rcValue[16] = 2000; else sbus.rcValue[16] = 1000;
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <SBUS_decoding+0x398>)
 800452e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d008      	beq.n	800454c <SBUS_decoding+0x39c>
 800453a:	4b03      	ldr	r3, [pc, #12]	; (8004548 <SBUS_decoding+0x398>)
 800453c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004540:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8004544:	e007      	b.n	8004556 <SBUS_decoding+0x3a6>
 8004546:	bf00      	nop
 8004548:	20000548 	.word	0x20000548
 800454c:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <SBUS_decoding+0x41c>)
 800454e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004552:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	if (((uint16_t)sbus.rxBuf[23] >> 1) & 0x0001)  sbus.rcValue[17] = 2000; else sbus.rcValue[17] = 1000;
 8004556:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <SBUS_decoding+0x41c>)
 8004558:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <SBUS_decoding+0x3c0>
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <SBUS_decoding+0x41c>)
 8004566:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800456a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800456e:	e004      	b.n	800457a <SBUS_decoding+0x3ca>
 8004570:	4b16      	ldr	r3, [pc, #88]	; (80045cc <SBUS_decoding+0x41c>)
 8004572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004576:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b11      	cmp	r3, #17
 8004582:	dc1c      	bgt.n	80045be <SBUS_decoding+0x40e>
		sbus.compRcValue[i] = (sbus.rcValue[i]) * 5 / 8 + 880;
 8004584:	4a11      	ldr	r2, [pc, #68]	; (80045cc <SBUS_decoding+0x41c>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3318      	adds	r3, #24
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	4413      	add	r3, r2
 800458e:	88db      	ldrh	r3, [r3, #6]
 8004590:	461a      	mov	r2, r3
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	da00      	bge.n	800459e <SBUS_decoding+0x3ee>
 800459c:	3307      	adds	r3, #7
 800459e:	10db      	asrs	r3, r3, #3
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80045a6:	b299      	uxth	r1, r3
 80045a8:	4a08      	ldr	r2, [pc, #32]	; (80045cc <SBUS_decoding+0x41c>)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	332c      	adds	r3, #44	; 0x2c
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	4413      	add	r3, r2
 80045b2:	460a      	mov	r2, r1
 80045b4:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3301      	adds	r3, #1
 80045ba:	607b      	str	r3, [r7, #4]
 80045bc:	e7df      	b.n	800457e <SBUS_decoding+0x3ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe
	return SBUS_Result_NewData;
 80045be:	2301      	movs	r3, #1
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80045ca:	bf00      	nop
 80045cc:	20000548 	.word	0x20000548

080045d0 <SBUS_uartRxCpltCallback>:


SBUS_Result_t SBUS_uartRxCpltCallback(){// must call this function on HAL_UART_RxCpltCallback
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	SBUS_Result_t result = SBUS_Result_OldData;
 80045d6:	2300      	movs	r3, #0
 80045d8:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 80045da:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <SBUS_uartRxCpltCallback+0xe8>)
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
 80045e0:	4b35      	ldr	r3, [pc, #212]	; (80046b8 <SBUS_uartRxCpltCallback+0xe8>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b18      	cmp	r3, #24
 80045e6:	d862      	bhi.n	80046ae <SBUS_uartRxCpltCallback+0xde>
		_curByte = sbus.dmaBuf[i];
 80045e8:	4b33      	ldr	r3, [pc, #204]	; (80046b8 <SBUS_uartRxCpltCallback+0xe8>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	4b33      	ldr	r3, [pc, #204]	; (80046bc <SBUS_uartRxCpltCallback+0xec>)
 80045f0:	4413      	add	r3, r2
 80045f2:	791a      	ldrb	r2, [r3, #4]
 80045f4:	4b32      	ldr	r3, [pc, #200]	; (80046c0 <SBUS_uartRxCpltCallback+0xf0>)
 80045f6:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 80045f8:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <SBUS_uartRxCpltCallback+0xf4>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d120      	bne.n	8004642 <SBUS_uartRxCpltCallback+0x72>
			if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 8004600:	4b2f      	ldr	r3, [pc, #188]	; (80046c0 <SBUS_uartRxCpltCallback+0xf0>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b0f      	cmp	r3, #15
 8004606:	d118      	bne.n	800463a <SBUS_uartRxCpltCallback+0x6a>
 8004608:	4b2f      	ldr	r3, [pc, #188]	; (80046c8 <SBUS_uartRxCpltCallback+0xf8>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <SBUS_uartRxCpltCallback+0x4c>
 8004610:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <SBUS_uartRxCpltCallback+0xf8>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10e      	bne.n	800463a <SBUS_uartRxCpltCallback+0x6a>
				sbus.rxBuf[_parserState] = _curByte;
 800461c:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <SBUS_uartRxCpltCallback+0xf4>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	4619      	mov	r1, r3
 8004622:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <SBUS_uartRxCpltCallback+0xf0>)
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	4b25      	ldr	r3, [pc, #148]	; (80046bc <SBUS_uartRxCpltCallback+0xec>)
 8004628:	440b      	add	r3, r1
 800462a:	775a      	strb	r2, [r3, #29]
				_parserState++;
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <SBUS_uartRxCpltCallback+0xf4>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	3301      	adds	r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <SBUS_uartRxCpltCallback+0xf4>)
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e02e      	b.n	8004698 <SBUS_uartRxCpltCallback+0xc8>
			} else {
				_parserState = 0;
 800463a:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <SBUS_uartRxCpltCallback+0xf4>)
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	e02a      	b.n	8004698 <SBUS_uartRxCpltCallback+0xc8>
			}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <SBUS_uartRxCpltCallback+0xf4>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b18      	cmp	r3, #24
 8004648:	d80d      	bhi.n	8004666 <SBUS_uartRxCpltCallback+0x96>
				sbus.rxBuf[_parserState] = _curByte;
 800464a:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <SBUS_uartRxCpltCallback+0xf4>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	4619      	mov	r1, r3
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <SBUS_uartRxCpltCallback+0xf0>)
 8004652:	781a      	ldrb	r2, [r3, #0]
 8004654:	4b19      	ldr	r3, [pc, #100]	; (80046bc <SBUS_uartRxCpltCallback+0xec>)
 8004656:	440b      	add	r3, r1
 8004658:	775a      	strb	r2, [r3, #29]
				_parserState++;
 800465a:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <SBUS_uartRxCpltCallback+0xf4>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	3301      	adds	r3, #1
 8004660:	b2da      	uxtb	r2, r3
 8004662:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <SBUS_uartRxCpltCallback+0xf4>)
 8004664:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 8004666:	4b17      	ldr	r3, [pc, #92]	; (80046c4 <SBUS_uartRxCpltCallback+0xf4>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b19      	cmp	r3, #25
 800466c:	d114      	bne.n	8004698 <SBUS_uartRxCpltCallback+0xc8>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 800466e:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <SBUS_uartRxCpltCallback+0xf0>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <SBUS_uartRxCpltCallback+0xb2>
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <SBUS_uartRxCpltCallback+0xf0>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	2b00      	cmp	r3, #0
 8004680:	d107      	bne.n	8004692 <SBUS_uartRxCpltCallback+0xc2>
					_parserState = 0;
 8004682:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <SBUS_uartRxCpltCallback+0xf4>)
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
					result = SBUS_decoding();
 8004688:	f7ff fd92 	bl	80041b0 <SBUS_decoding>
 800468c:	4603      	mov	r3, r0
 800468e:	71fb      	strb	r3, [r7, #7]
 8004690:	e002      	b.n	8004698 <SBUS_uartRxCpltCallback+0xc8>
				}
				else {
					_parserState = 0;
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <SBUS_uartRxCpltCallback+0xf4>)
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		_prevByte = _curByte;
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <SBUS_uartRxCpltCallback+0xf0>)
 800469a:	781a      	ldrb	r2, [r3, #0]
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <SBUS_uartRxCpltCallback+0xf8>)
 800469e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <SBUS_uartRxCpltCallback+0xe8>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	4b03      	ldr	r3, [pc, #12]	; (80046b8 <SBUS_uartRxCpltCallback+0xe8>)
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	e798      	b.n	80045e0 <SBUS_uartRxCpltCallback+0x10>
	}
	return result;
 80046ae:	79fb      	ldrb	r3, [r7, #7]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200005db 	.word	0x200005db
 80046bc:	20000548 	.word	0x20000548
 80046c0:	200005d9 	.word	0x200005d9
 80046c4:	200005d8 	.word	0x200005d8
 80046c8:	200005da 	.word	0x200005da

080046cc <SBUS_getChannel>:
		printf("%d \t", sbus.compRcValue[i]);
	}
	printf("\r\n");
}

uint16_t SBUS_getChannel(uint8_t chan) { // start from 1
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
	return sbus.compRcValue[chan - 1];
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	3b01      	subs	r3, #1
 80046da:	4a05      	ldr	r2, [pc, #20]	; (80046f0 <SBUS_getChannel+0x24>)
 80046dc:	332c      	adds	r3, #44	; 0x2c
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	4413      	add	r3, r2
 80046e2:	885b      	ldrh	r3, [r3, #2]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	20000548 	.word	0x20000548

080046f4 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80046fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8004702:	f014 fd1d 	bl	8019140 <asinf>
 8004706:	eef0 7a40 	vmov.f32	s15, s0
 800470a:	eeb0 0a67 	vmov.f32	s0, s15
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	ed87 0a01 	vstr	s0, [r7, #4]
 800471e:	edc7 0a00 	vstr	s1, [r7]
 8004722:	edd7 0a00 	vldr	s1, [r7]
 8004726:	ed97 0a01 	vldr	s0, [r7, #4]
 800472a:	f014 fd61 	bl	80191f0 <atan2f>
 800472e:	eef0 7a40 	vmov.f32	s15, s0
 8004732:	eeb0 0a67 	vmov.f32	s0, s15
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	ed87 0a01 	vstr	s0, [r7, #4]
 8004746:	ed97 0a01 	vldr	s0, [r7, #4]
 800474a:	f014 fc77 	bl	801903c <cosf>
 800474e:	eef0 7a40 	vmov.f32	s15, s0
 8004752:	eeb0 0a67 	vmov.f32	s0, s15
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	ed87 0a01 	vstr	s0, [r7, #4]
 8004766:	ed97 0a01 	vldr	s0, [r7, #4]
 800476a:	f014 fca7 	bl	80190bc <sinf>
 800476e:	eef0 7a40 	vmov.f32	s15, s0
 8004772:	eeb0 0a67 	vmov.f32	s0, s15
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	ed87 0a01 	vstr	s0, [r7, #4]
 8004786:	ed97 0a01 	vldr	s0, [r7, #4]
 800478a:	f014 fd33 	bl	80191f4 <sqrtf>
 800478e:	eef0 7a40 	vmov.f32	s15, s0
 8004792:	eeb0 0a67 	vmov.f32	s0, s15
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <_ZL11microsecondv>:
/* micro second counter timer */
#define USEC_TIMER &htim2

static uint32_t _timerOverflowCnt = 0;

static __inline uint64_t microsecond(){
 800479c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80047a0:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 80047a2:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <_ZL11microsecondv+0x40>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4619      	mov	r1, r3
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0b00 	mov.w	fp, #0
 80047b0:	f04f 0c00 	mov.w	ip, #0
 80047b4:	468c      	mov	ip, r1
 80047b6:	f04f 0b00 	mov.w	fp, #0
 80047ba:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <_ZL11microsecondv+0x44>)
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047c0:	4611      	mov	r1, r2
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	ea4b 0301 	orr.w	r3, fp, r1
 80047ca:	ea4c 0402 	orr.w	r4, ip, r2
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	4621      	mov	r1, r4
 80047d2:	46bd      	mov	sp, r7
 80047d4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000858 	.word	0x20000858
 80047e0:	20007360 	.word	0x20007360

080047e4 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>:

class MsgBus {
public:
	MsgBus() = default;

    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel);
 80047e4:	b4b0      	push	{r4, r5, r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047fa:	42a2      	cmp	r2, r4
 80047fc:	bf08      	it	eq
 80047fe:	4299      	cmpeq	r1, r3
 8004800:	d00b      	beq.n	800481a <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x36>
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4614      	mov	r4, r2
 8004808:	461d      	mov	r5, r3
 800480a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800480c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800480e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004812:	e884 0003 	stmia.w	r4, {r0, r1}
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x38>
 800481a:	2300      	movs	r3, #0
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bcb0      	pop	{r4, r5, r7}
 8004824:	4770      	bx	lr

08004826 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>:
 8004826:	b4b0      	push	{r4, r5, r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	4614      	mov	r4, r2
 8004836:	461d      	mov	r5, r3
 8004838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800483a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800483c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004840:	e884 0003 	stmia.w	r4, {r0, r1}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	bcb0      	pop	{r4, r5, r7}
 800484c:	4770      	bx	lr

0800484e <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity);
 800484e:	b4b0      	push	{r4, r5, r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004864:	42a2      	cmp	r2, r4
 8004866:	bf08      	it	eq
 8004868:	4299      	cmpeq	r1, r3
 800486a:	d00c      	beq.n	8004886 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x38>
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4615      	mov	r5, r2
 8004872:	f103 0418 	add.w	r4, r3, #24
 8004876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800487a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800487e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x3a>
 8004886:	2300      	movs	r3, #0
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	bcb0      	pop	{r4, r5, r7}
 8004890:	4770      	bx	lr

08004892 <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>:
 8004892:	b4b0      	push	{r4, r5, r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	f103 0418 	add.w	r4, r3, #24
 80048a4:	4615      	mov	r5, r2
 80048a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80048ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bcb0      	pop	{r4, r5, r7}
 80048ba:	4770      	bx	lr

080048bc <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag);
 80048bc:	b4b0      	push	{r4, r5, r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80048d2:	42a2      	cmp	r2, r4
 80048d4:	bf08      	it	eq
 80048d6:	4299      	cmpeq	r1, r3
 80048d8:	d00c      	beq.n	80048f4 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x38>
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4615      	mov	r5, r2
 80048e0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80048e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x3a>
 80048f4:	2300      	movs	r3, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bcb0      	pop	{r4, r5, r7}
 80048fe:	4770      	bx	lr

08004900 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>:
 8004900:	b4b0      	push	{r4, r5, r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8004912:	4615      	mov	r5, r2
 8004914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004918:	e895 0003 	ldmia.w	r5, {r0, r1}
 800491c:	e884 0003 	stmia.w	r4, {r0, r1}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	bcb0      	pop	{r4, r5, r7}
 8004928:	4770      	bx	lr

0800492a <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps);
 800492a:	b590      	push	{r4, r7, lr}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	e9d3 1200 	ldrd	r1, r2, [r3]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8004940:	42a2      	cmp	r2, r4
 8004942:	bf08      	it	eq
 8004944:	4299      	cmpeq	r1, r3
 8004946:	d009      	beq.n	800495c <_ZN2FC6MsgBus6getGPSEPNS_3GPSE+0x32>
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4610      	mov	r0, r2
 800494e:	3348      	adds	r3, #72	; 0x48
 8004950:	2248      	movs	r2, #72	; 0x48
 8004952:	4619      	mov	r1, r3
 8004954:	f015 fc7c 	bl	801a250 <memcpy>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <_ZN2FC6MsgBus6getGPSEPNS_3GPSE+0x34>
 800495c:	2300      	movs	r3, #0
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	bd90      	pop	{r4, r7, pc}

08004966 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>:
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	3348      	adds	r3, #72	; 0x48
 8004976:	4611      	mov	r1, r2
 8004978:	2248      	movs	r2, #72	; 0x48
 800497a:	4618      	mov	r0, r3
 800497c:	f015 fc68 	bl	801a250 <memcpy>
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer);
 8004988:	b490      	push	{r4, r7}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 800499e:	42a2      	cmp	r2, r4
 80049a0:	bf08      	it	eq
 80049a2:	4299      	cmpeq	r1, r3
 80049a4:	d008      	beq.n	80049b8 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE+0x30>
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4614      	mov	r4, r2
 80049ac:	3390      	adds	r3, #144	; 0x90
 80049ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE+0x32>
 80049b8:	2300      	movs	r3, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc90      	pop	{r4, r7}
 80049c2:	4770      	bx	lr

080049c4 <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>:
 80049c4:	b490      	push	{r4, r7}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	f103 0490 	add.w	r4, r3, #144	; 0x90
 80049d6:	4613      	mov	r3, r2
 80049d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80049de:	bf00      	nop
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc90      	pop	{r4, r7}
 80049e6:	4770      	bx	lr

080049e8 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller);
 80049e8:	b490      	push	{r4, r7}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80049fa:	4613      	mov	r3, r2
 80049fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc90      	pop	{r4, r7}
 8004a0a:	4770      	bx	lr

08004a0c <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>:
    
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude);
 8004a0c:	b4b0      	push	{r4, r5, r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8004a22:	42a2      	cmp	r2, r4
 8004a24:	bf08      	it	eq
 8004a26:	4299      	cmpeq	r1, r3
 8004a28:	d00e      	beq.n	8004a48 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE+0x3c>
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4615      	mov	r5, r2
 8004a30:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8004a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a40:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE+0x3e>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bcb0      	pop	{r4, r5, r7}
 8004a52:	4770      	bx	lr

08004a54 <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>:
 8004a54:	b4b0      	push	{r4, r5, r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8004a66:	4615      	mov	r5, r2
 8004a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004a74:	e884 0003 	stmia.w	r4, {r0, r1}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bcb0      	pop	{r4, r5, r7}
 8004a80:	4770      	bx	lr

08004a82 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel);
 8004a82:	b4b0      	push	{r4, r5, r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	6039      	str	r1, [r7, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 8004a98:	42a2      	cmp	r2, r4
 8004a9a:	bf08      	it	eq
 8004a9c:	4299      	cmpeq	r1, r3
 8004a9e:	d00c      	beq.n	8004aba <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE+0x38>
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4615      	mov	r5, r2
 8004aa6:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8004aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ab2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE+0x3a>
 8004aba:	2300      	movs	r3, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bcb0      	pop	{r4, r5, r7}
 8004ac4:	4770      	bx	lr

08004ac6 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>:
 8004ac6:	b4b0      	push	{r4, r5, r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8004ad8:	4615      	mov	r5, r2
 8004ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ade:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004ae2:	e884 0003 	stmia.w	r4, {r0, r1}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bcb0      	pop	{r4, r5, r7}
 8004aee:	4770      	bx	lr

08004af0 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>:

    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag);
 8004af0:	b490      	push	{r4, r7}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 8004b06:	42a2      	cmp	r2, r4
 8004b08:	bf08      	it	eq
 8004b0a:	4299      	cmpeq	r1, r3
 8004b0c:	d008      	beq.n	8004b20 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE+0x30>
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4614      	mov	r4, r2
 8004b14:	33f0      	adds	r3, #240	; 0xf0
 8004b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE+0x32>
 8004b20:	2300      	movs	r3, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc90      	pop	{r4, r7}
 8004b2a:	4770      	bx	lr

08004b2c <_ZN2FC11SensorAccel8setAccelEfff>:
private:
    struct BodyAccel bodyAccel{};
};


void SensorAccel::setAccel(float x, float y, float z){
 8004b2c:	b590      	push	{r4, r7, lr}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b38:	edc7 0a01 	vstr	s1, [r7, #4]
 8004b3c:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004b40:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4c:	d10d      	bne.n	8004b6a <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 8004b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5a:	d106      	bne.n	8004b6a <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 8004b5c:	edd7 7a00 	vldr	s15, [r7]
 8004b60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b68:	d015      	beq.n	8004b96 <_ZN2FC11SensorAccel8setAccelEfff+0x6a>
	this->bodyAccel.timestamp = microsecond();
 8004b6a:	f7ff fe17 	bl	800479c <_ZL11microsecondv>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	460c      	mov	r4, r1
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAccel.xyz[0] = x;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	609a      	str	r2, [r3, #8]
	this->bodyAccel.xyz[1] = y;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	60da      	str	r2, [r3, #12]
	this->bodyAccel.xyz[2] = z;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	611a      	str	r2, [r3, #16]
	msgBus.setBodyAccel(this->bodyAccel);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4804      	ldr	r0, [pc, #16]	; (8004ba0 <_ZN2FC11SensorAccel8setAccelEfff+0x74>)
 8004b90:	f7ff fe49 	bl	8004826 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>
 8004b94:	e000      	b.n	8004b98 <_ZN2FC11SensorAccel8setAccelEfff+0x6c>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004b96:	bf00      	nop
}
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd90      	pop	{r4, r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000008 	.word	0x20000008

08004ba4 <_ZN2FC10SensorGyro7setGyroEfff>:
    void setGyro(float x, float y, float z);
private:
    struct BodyAngularVelocity bodyAngularVelocity;
};

void SensorGyro::setGyro(float x, float y, float z){
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bb0:	edc7 0a01 	vstr	s1, [r7, #4]
 8004bb4:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004bb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc4:	d10d      	bne.n	8004be2 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8004bc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd2:	d106      	bne.n	8004be2 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8004bd4:	edd7 7a00 	vldr	s15, [r7]
 8004bd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be0:	d015      	beq.n	8004c0e <_ZN2FC10SensorGyro7setGyroEfff+0x6a>
	this->bodyAngularVelocity.timestamp = microsecond();
 8004be2:	f7ff fddb 	bl	800479c <_ZL11microsecondv>
 8004be6:	4603      	mov	r3, r0
 8004be8:	460c      	mov	r4, r1
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAngularVelocity.xyz[0] = x;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	609a      	str	r2, [r3, #8]
	this->bodyAngularVelocity.xyz[1] = y;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	60da      	str	r2, [r3, #12]
	this->bodyAngularVelocity.xyz[2] = z;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	611a      	str	r2, [r3, #16]
	msgBus.setBodyAngularVelocity(this->bodyAngularVelocity);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4619      	mov	r1, r3
 8004c06:	4804      	ldr	r0, [pc, #16]	; (8004c18 <_ZN2FC10SensorGyro7setGyroEfff+0x74>)
 8004c08:	f7ff fe43 	bl	8004892 <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>
 8004c0c:	e000      	b.n	8004c10 <_ZN2FC10SensorGyro7setGyroEfff+0x6c>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004c0e:	bf00      	nop
}
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd90      	pop	{r4, r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000008 	.word	0x20000008

08004c1c <_ZN2FC9SensorMag6setMagEfff>:
    float bias[3];
    float scale[3];
};


void SensorMag::setMag(float x, float y, float z){
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c28:	edc7 0a01 	vstr	s1, [r7, #4]
 8004c2c:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004c30:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3c:	d10d      	bne.n	8004c5a <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8004c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4a:	d106      	bne.n	8004c5a <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8004c4c:	edd7 7a00 	vldr	s15, [r7]
 8004c50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c58:	d015      	beq.n	8004c86 <_ZN2FC9SensorMag6setMagEfff+0x6a>
	this->bodyMag.timestamp = microsecond();
 8004c5a:	f7ff fd9f 	bl	800479c <_ZL11microsecondv>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	460c      	mov	r4, r1
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyMag.xyz[0] = x;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	609a      	str	r2, [r3, #8]
	this->bodyMag.xyz[1] = y;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]
	this->bodyMag.xyz[2] = z;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	611a      	str	r2, [r3, #16]
	msgBus.setBodyMag(this->bodyMag);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4804      	ldr	r0, [pc, #16]	; (8004c90 <_ZN2FC9SensorMag6setMagEfff+0x74>)
 8004c80:	f7ff fe3e 	bl	8004900 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>
 8004c84:	e000      	b.n	8004c88 <_ZN2FC9SensorMag6setMagEfff+0x6c>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8004c86:	bf00      	nop
}
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd90      	pop	{r4, r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000008 	.word	0x20000008
 8004c94:	00000000 	.word	0x00000000

08004c98 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>:


void SensorGPS::setGPS(double lat, double lon, float alt,
        			   float vel, float direction, float hdop, float vdop,
					   uint8_t numSat, uint8_t fixType, uint64_t UtcUsec)
{
 8004c98:	b590      	push	{r4, r7, lr}
 8004c9a:	b091      	sub	sp, #68	; 0x44
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004ca0:	ed87 0b08 	vstr	d0, [r7, #32]
 8004ca4:	ed87 1b06 	vstr	d1, [r7, #24]
 8004ca8:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8004cac:	edc7 2a05 	vstr	s5, [r7, #20]
 8004cb0:	ed87 3a04 	vstr	s6, [r7, #16]
 8004cb4:	edc7 3a03 	vstr	s7, [r7, #12]
 8004cb8:	ed87 4a02 	vstr	s8, [r7, #8]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	71fb      	strb	r3, [r7, #7]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71bb      	strb	r3, [r7, #6]

	/* calculate velocity NED  */
	float radDirection = direction*M_PI/180.0;
 8004cc4:	6938      	ldr	r0, [r7, #16]
 8004cc6:	f7fb fc4f 	bl	8000568 <__aeabi_f2d>
 8004cca:	a339      	add	r3, pc, #228	; (adr r3, 8004db0 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x118>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fca2 	bl	8000618 <__aeabi_dmul>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	4621      	mov	r1, r4
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	4b31      	ldr	r3, [pc, #196]	; (8004da8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x110>)
 8004ce2:	f7fb fdc3 	bl	800086c <__aeabi_ddiv>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	460c      	mov	r4, r1
 8004cea:	4618      	mov	r0, r3
 8004cec:	4621      	mov	r1, r4
 8004cee:	f7fb ff8b 	bl	8000c08 <__aeabi_d2f>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
	float velN = std::cos(radDirection)*vel;
 8004cf6:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004cfa:	f7ff fd1f 	bl	800473c <_ZSt3cosf>
 8004cfe:	eeb0 7a40 	vmov.f32	s14, s0
 8004d02:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d0a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float velE = std::sin(radDirection)*vel;
 8004d0e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004d12:	f7ff fd23 	bl	800475c <_ZSt3sinf>
 8004d16:	eeb0 7a40 	vmov.f32	s14, s0
 8004d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d22:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	this->gps.timestamp = microsecond();
 8004d26:	f7ff fd39 	bl	800479c <_ZL11microsecondv>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d30:	e9c2 3400 	strd	r3, r4, [r2]
	this->gps.timestampUTC = UtcUsec;
 8004d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d36:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004d3a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	this->gps.lat = lat;
 8004d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d40:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004d44:	e9c2 3404 	strd	r3, r4, [r2, #16]
	this->gps.lon = lon;
 8004d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d4a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004d4e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	this->gps.alt = alt;
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d56:	621a      	str	r2, [r3, #32]

	this->gps.vel = vel;
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24
	this->gps.velN = velN;
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28
	this->gps.velE = velE;
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d68:	62da      	str	r2, [r3, #44]	; 0x2c
	this->gps.velD = 0; /* ??? */
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
	this->gps.direction = radDirection;
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d76:	635a      	str	r2, [r3, #52]	; 0x34
	this->gps.hdop = hdop;
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
	this->gps.vdop = vdop;
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	63da      	str	r2, [r3, #60]	; 0x3c

	this->gps.numSatellites = numSat;
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	79fa      	ldrb	r2, [r7, #7]
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->gps.fixType = fixType;
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	79ba      	ldrb	r2, [r7, #6]
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	msgBus.setGPS(this->gps);
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	4619      	mov	r1, r3
 8004d98:	4804      	ldr	r0, [pc, #16]	; (8004dac <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x114>)
 8004d9a:	f7ff fde4 	bl	8004966 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>
}
 8004d9e:	bf00      	nop
 8004da0:	3744      	adds	r7, #68	; 0x44
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd90      	pop	{r4, r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40668000 	.word	0x40668000
 8004dac:	20000008 	.word	0x20000008
 8004db0:	54442d18 	.word	0x54442d18
 8004db4:	400921fb 	.word	0x400921fb

08004db8 <_ZN2FC10SensorBaro7setBaroEff>:
private:
    struct Barometer barometer;
};


void SensorBaro::setBaro(float pressure, float temperature){
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004dc4:	edc7 0a01 	vstr	s1, [r7, #4]
	this->barometer.timestamp = microsecond();
 8004dc8:	f7ff fce8 	bl	800479c <_ZL11microsecondv>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	e9c2 3400 	strd	r3, r4, [r2]
	this->barometer.pressure = pressure;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	609a      	str	r2, [r3, #8]
	this->barometer.temperature = temperature;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]

	msgBus.setBarometer(this->barometer);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4619      	mov	r1, r3
 8004de6:	4803      	ldr	r0, [pc, #12]	; (8004df4 <_ZN2FC10SensorBaro7setBaroEff+0x3c>)
 8004de8:	f7ff fdec 	bl	80049c4 <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd90      	pop	{r4, r7, pc}
 8004df4:	20000008 	.word	0x20000008

08004df8 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>:
	if(xQueueReceive(commandQueue, &rcvCommand, portMAX_DELAY)){
		commandHandler(rcvCommand);
	}
}

bool ModuleCommander::sendCommand(Command cmd){
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
//	if(xQueueSendToBack(commandQueue, &cmd, 0) != pdPASS) return false;
	xQueueSendToBackFromISR( commandQueue, &cmd, NULL );
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x20>)
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	1d39      	adds	r1, r7, #4
 8004e06:	2300      	movs	r3, #0
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f011 fc73 	bl	80166f4 <xQueueGenericSendFromISR>

	return true;
 8004e0e:	2301      	movs	r3, #1
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	200008b8 	.word	0x200008b8

08004e1c <_ZN2FC2RC5setRCEttttttttt>:

void RC::setRC(uint16_t roll, uint16_t pitch, uint16_t yaw, uint16_t throttle,
    		   uint16_t armming,
			   uint16_t mode, uint16_t subMode,
			   uint16_t calibration, uint16_t calibration_sub)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b08b      	sub	sp, #44	; 0x2c
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	817b      	strh	r3, [r7, #10]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	813b      	strh	r3, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
	/* cotnroller publish */
	this->controllerPub.timestamp = microsecond();
 8004e36:	f7ff fcb1 	bl	800479c <_ZL11microsecondv>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	e9c2 3400 	strd	r3, r4, [r2]
	this->controllerPub.roll = roll;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	897a      	ldrh	r2, [r7, #10]
 8004e48:	811a      	strh	r2, [r3, #8]
	this->controllerPub.pitch = pitch;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	893a      	ldrh	r2, [r7, #8]
 8004e4e:	815a      	strh	r2, [r3, #10]
	this->controllerPub.yaw = yaw;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	819a      	strh	r2, [r3, #12]
	this->controllerPub.throttle = throttle;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004e5a:	81da      	strh	r2, [r3, #14]
	msgBus.setController(this->controllerPub);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	480e      	ldr	r0, [pc, #56]	; (8004e9c <_ZN2FC2RC5setRCEttttttttt+0x80>)
 8004e62:	f7ff fdc1 	bl	80049e8 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>

	/* arming */
	struct ModeFlag modeFlag;
	msgBus.getModeFlag(&modeFlag);							/* current arm mode */
 8004e66:	f107 0310 	add.w	r3, r7, #16
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	480b      	ldr	r0, [pc, #44]	; (8004e9c <_ZN2FC2RC5setRCEttttttttt+0x80>)
 8004e6e:	f7ff fe3f 	bl	8004af0 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	Command rcvArmFlag = Command::DisArm;						/* request arm mode */
 8004e72:	2307      	movs	r3, #7
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
	if( armming > ARMING_THRESHOLD )	rcvArmFlag = Command::Arm;
 8004e76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e78:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d901      	bls.n	8004e84 <_ZN2FC2RC5setRCEttttttttt+0x68>
 8004e80:	2306      	movs	r3, #6
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
	if(modeFlag.armMode != rcvArmFlag) ModuleCommander::sendCommand(rcvArmFlag); /* send command */
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d002      	beq.n	8004e92 <_ZN2FC2RC5setRCEttttttttt+0x76>
 8004e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e8e:	f7ff ffb3 	bl	8004df8 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>

}
 8004e92:	bf00      	nop
 8004e94:	372c      	adds	r7, #44	; 0x2c
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd90      	pop	{r4, r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000008 	.word	0x20000008

08004ea0 <_ZN2FC10ModuleAHRS4mainEv>:
    void calNedAccel();

    float invSqrt(float x);
};

void ModuleAHRS::main(){
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b0a1      	sub	sp, #132	; 0x84
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	/* no update */
	if(!msgBus.getBodyAccel(&this->bodyAccelSub)) return;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4822      	ldr	r0, [pc, #136]	; (8004f38 <_ZN2FC10ModuleAHRS4mainEv+0x98>)
 8004eae:	f7ff fc99 	bl	80047e4 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f083 0301 	eor.w	r3, r3, #1
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f040 81b1 	bne.w	8005222 <_ZN2FC10ModuleAHRS4mainEv+0x382>
	if(!msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub)) return;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3318      	adds	r3, #24
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	481c      	ldr	r0, [pc, #112]	; (8004f38 <_ZN2FC10ModuleAHRS4mainEv+0x98>)
 8004ec8:	f7ff fcc1 	bl	800484e <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f083 0301 	eor.w	r3, r3, #1
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f040 81a6 	bne.w	8005226 <_ZN2FC10ModuleAHRS4mainEv+0x386>

	/* mag data not valid */
	if(!msgBus.getBodyMag(&this->bodyMagSub))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3330      	adds	r3, #48	; 0x30
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4815      	ldr	r0, [pc, #84]	; (8004f38 <_ZN2FC10ModuleAHRS4mainEv+0x98>)
 8004ee2:	f7ff fceb 	bl	80048bc <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f083 0301 	eor.w	r3, r3, #1
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d024      	beq.n	8004f3c <_ZN2FC10ModuleAHRS4mainEv+0x9c>
	{
		MadgwickAHRSupdateIMU(bodyAngularVelocitySub.xyz[0],
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	ed93 6a02 	vldr	s12, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	edd3 5a03 	vldr	s11, [r3, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	ed93 5a04 	vldr	s10, [r3, #16]
 8004f16:	eef0 2a45 	vmov.f32	s5, s10
 8004f1a:	eeb0 2a65 	vmov.f32	s4, s11
 8004f1e:	eef0 1a46 	vmov.f32	s3, s12
 8004f22:	eeb0 1a66 	vmov.f32	s2, s13
 8004f26:	eef0 0a47 	vmov.f32	s1, s14
 8004f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f001 f8be 	bl	80060b0 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 8004f34:	e02e      	b.n	8004f94 <_ZN2FC10ModuleAHRS4mainEv+0xf4>
 8004f36:	bf00      	nop
 8004f38:	20000008 	.word	0x20000008
							  bodyAccelSub.xyz[1],
							  bodyAccelSub.xyz[2]);
	}
	/* mag data valid */
	else{
		MadgwickAHRSupdate(bodyAngularVelocitySub.xyz[0],
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	ed93 6a02 	vldr	s12, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	edd3 5a03 	vldr	s11, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	ed93 5a04 	vldr	s10, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8004f72:	eeb0 3a64 	vmov.f32	s6, s9
 8004f76:	eef0 2a45 	vmov.f32	s5, s10
 8004f7a:	eeb0 2a65 	vmov.f32	s4, s11
 8004f7e:	eef0 1a46 	vmov.f32	s3, s12
 8004f82:	eeb0 1a66 	vmov.f32	s2, s13
 8004f86:	eef0 0a47 	vmov.f32	s1, s14
 8004f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f952 	bl	8005238 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>
						   bodyMagSub.xyz[2]);
	}

	/* calculate roll pitch yaw */
	float roll, pitch, yaw;
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0- q1 * q1 - q2 * q2 + q3 * q3);		//roll
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fb8:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005008:	eef0 0a67 	vmov.f32	s1, s15
 800500c:	eeb0 0a46 	vmov.f32	s0, s12
 8005010:	f7ff fb80 	bl	8004714 <_ZSt5atan2ff>
 8005014:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));												//pitch
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800503c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005040:	eeb0 0a67 	vmov.f32	s0, s15
 8005044:	f7ff fb56 	bl	80046f4 <_ZSt4asinf>
 8005048:	eef0 7a40 	vmov.f32	s15, s0
 800504c:	eef1 7a67 	vneg.f32	s15, s15
 8005050:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);		//yaw
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005060:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005078:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800509c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80050ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80050c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050c8:	eef0 0a67 	vmov.f32	s1, s15
 80050cc:	eeb0 0a46 	vmov.f32	s0, s12
 80050d0:	f7ff fb20 	bl	8004714 <_ZSt5atan2ff>
 80050d4:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74

    matrix::Quatf quat(q0, q1, q2, q3);		/* NED -> body quaternion */
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 80050f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050f4:	eef0 1a46 	vmov.f32	s3, s12
 80050f8:	eeb0 1a66 	vmov.f32	s2, s13
 80050fc:	eef0 0a47 	vmov.f32	s1, s14
 8005100:	eeb0 0a67 	vmov.f32	s0, s15
 8005104:	4618      	mov	r0, r3
 8005106:	f001 ff5d 	bl	8006fc4 <_ZN6matrix10QuaternionIfEC1Effff>
    matrix::Dcmf dcm(quat.inversed());		/* body -> NED DCM */
 800510a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800510e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005112:	4611      	mov	r1, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f001 ff8c 	bl	8007032 <_ZNK6matrix10QuaternionIfE8inversedEv>
 800511a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800511e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f001 fff5 	bl	8007114 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>
    matrix::Vector3f tempBodyAccel(this->bodyAccelSub.xyz[0],
    							   this->bodyAccelSub.xyz[1],
								   this->bodyAccelSub.xyz[2]);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	ed93 7a03 	vldr	s14, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	edd3 6a04 	vldr	s13, [r3, #16]
 800513c:	f107 0318 	add.w	r3, r7, #24
 8005140:	eeb0 1a66 	vmov.f32	s2, s13
 8005144:	eef0 0a47 	vmov.f32	s1, s14
 8005148:	eeb0 0a67 	vmov.f32	s0, s15
 800514c:	4618      	mov	r0, r3
 800514e:	f002 f92a 	bl	80073a6 <_ZN6matrix7Vector3IfEC1Efff>

    matrix::Vector3f tempNedAccel = dcm*tempBodyAccel;
 8005152:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005156:	f107 0218 	add.w	r2, r7, #24
 800515a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800515e:	4618      	mov	r0, r3
 8005160:	f002 f94e 	bl	8007400 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>
 8005164:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8005168:	f107 030c 	add.w	r3, r7, #12
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f002 f997 	bl	80074a2 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>

    attitudePub.timestamp = microsecond();
 8005174:	f7ff fb12 	bl	800479c <_ZL11microsecondv>
 8005178:	4603      	mov	r3, r0
 800517a:	460c      	mov	r4, r1
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    attitudePub.q[0] = this->q0;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	651a      	str	r2, [r3, #80]	; 0x50
    attitudePub.q[1] = this->q1;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	655a      	str	r2, [r3, #84]	; 0x54
    attitudePub.q[2] = this->q2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	659a      	str	r2, [r3, #88]	; 0x58
    attitudePub.q[3] = this->q3;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	65da      	str	r2, [r3, #92]	; 0x5c
    attitudePub.roll = roll;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051ae:	661a      	str	r2, [r3, #96]	; 0x60
    attitudePub.pitch = pitch;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051b4:	665a      	str	r2, [r3, #100]	; 0x64
    attitudePub.yaw = yaw;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80051ba:	669a      	str	r2, [r3, #104]	; 0x68

    msgBus.setAttitude(attitudePub);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3348      	adds	r3, #72	; 0x48
 80051c0:	4619      	mov	r1, r3
 80051c2:	481b      	ldr	r0, [pc, #108]	; (8005230 <_ZN2FC10ModuleAHRS4mainEv+0x390>)
 80051c4:	f7ff fc46 	bl	8004a54 <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>

    nedAccelPub.timestamp = microsecond();
 80051c8:	f7ff fae8 	bl	800479c <_ZL11microsecondv>
 80051cc:	4603      	mov	r3, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
    nedAccelPub.xyz[0] = tempNedAccel(0);
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	2100      	movs	r1, #0
 80051dc:	4618      	mov	r0, r3
 80051de:	f002 f985 	bl	80074ec <_ZN6matrix6VectorIfLj3EEclEj>
 80051e2:	4603      	mov	r3, r0
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	679a      	str	r2, [r3, #120]	; 0x78
    nedAccelPub.xyz[1] = tempNedAccel(1);
 80051ea:	f107 030c 	add.w	r3, r7, #12
 80051ee:	2101      	movs	r1, #1
 80051f0:	4618      	mov	r0, r3
 80051f2:	f002 f97b 	bl	80074ec <_ZN6matrix6VectorIfLj3EEclEj>
 80051f6:	4603      	mov	r3, r0
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	67da      	str	r2, [r3, #124]	; 0x7c
    nedAccelPub.xyz[2] = tempNedAccel(2);
 80051fe:	f107 030c 	add.w	r3, r7, #12
 8005202:	2102      	movs	r1, #2
 8005204:	4618      	mov	r0, r3
 8005206:	f002 f971 	bl	80074ec <_ZN6matrix6VectorIfLj3EEclEj>
 800520a:	4603      	mov	r3, r0
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    msgBus.setNedAccel(nedAccelPub);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3370      	adds	r3, #112	; 0x70
 8005218:	4619      	mov	r1, r3
 800521a:	4805      	ldr	r0, [pc, #20]	; (8005230 <_ZN2FC10ModuleAHRS4mainEv+0x390>)
 800521c:	f7ff fc53 	bl	8004ac6 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>
 8005220:	e002      	b.n	8005228 <_ZN2FC10ModuleAHRS4mainEv+0x388>
	if(!msgBus.getBodyAccel(&this->bodyAccelSub)) return;
 8005222:	bf00      	nop
 8005224:	e000      	b.n	8005228 <_ZN2FC10ModuleAHRS4mainEv+0x388>
	if(!msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub)) return;
 8005226:	bf00      	nop
}
 8005228:	3784      	adds	r7, #132	; 0x84
 800522a:	46bd      	mov	sp, r7
 800522c:	bd90      	pop	{r4, r7, pc}
 800522e:	bf00      	nop
 8005230:	20000008 	.word	0x20000008
 8005234:	00000000 	.word	0x00000000

08005238 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>:

void ModuleAHRS::MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz){
 8005238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800523a:	b0af      	sub	sp, #188	; 0xbc
 800523c:	af00      	add	r7, sp, #0
 800523e:	6278      	str	r0, [r7, #36]	; 0x24
 8005240:	ed87 0a08 	vstr	s0, [r7, #32]
 8005244:	edc7 0a07 	vstr	s1, [r7, #28]
 8005248:	ed87 1a06 	vstr	s2, [r7, #24]
 800524c:	edc7 1a05 	vstr	s3, [r7, #20]
 8005250:	ed87 2a04 	vstr	s4, [r7, #16]
 8005254:	edc7 2a03 	vstr	s5, [r7, #12]
 8005258:	ed87 3a02 	vstr	s6, [r7, #8]
 800525c:	edc7 3a01 	vstr	s7, [r7, #4]
 8005260:	ed87 4a00 	vstr	s8, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8005264:	edd7 7a02 	vldr	s15, [r7, #8]
 8005268:	eef5 7a40 	vcmp.f32	s15, #0.0
 800526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005270:	d11e      	bne.n	80052b0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x78>
 8005272:	edd7 7a01 	vldr	s15, [r7, #4]
 8005276:	eef5 7a40 	vcmp.f32	s15, #0.0
 800527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527e:	d117      	bne.n	80052b0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x78>
 8005280:	edd7 7a00 	vldr	s15, [r7]
 8005284:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528c:	d110      	bne.n	80052b0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x78>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 800528e:	edd7 2a03 	vldr	s5, [r7, #12]
 8005292:	ed97 2a04 	vldr	s4, [r7, #16]
 8005296:	edd7 1a05 	vldr	s3, [r7, #20]
 800529a:	ed97 1a06 	vldr	s2, [r7, #24]
 800529e:	edd7 0a07 	vldr	s1, [r7, #28]
 80052a2:	ed97 0a08 	vldr	s0, [r7, #32]
 80052a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052a8:	f000 ff02 	bl	80060b0 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 80052ac:	f000 bef4 	b.w	8006098 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe60>
		return;
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80052b6:	eeb1 7a67 	vneg.f32	s14, s15
 80052ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80052be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80052c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80052cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80052da:	edd7 7a06 	vldr	s15, [r7, #24]
 80052de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80052ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ee:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80052f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80052fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005306:	edd7 7a06 	vldr	s15, [r7, #24]
 800530a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800530e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005318:	edd7 7a07 	vldr	s15, [r7, #28]
 800531c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005324:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800532c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005336:	edd7 7a07 	vldr	s15, [r7, #28]
 800533a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005344:	edd7 7a06 	vldr	s15, [r7, #24]
 8005348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800534c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005356:	edd7 7a08 	vldr	s15, [r7, #32]
 800535a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800535e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005362:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800536a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005374:	edd7 7a06 	vldr	s15, [r7, #24]
 8005378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005382:	edd7 7a07 	vldr	s15, [r7, #28]
 8005386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800538a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005394:	edd7 7a08 	vldr	s15, [r7, #32]
 8005398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800539c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053a8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80053ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80053b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80053b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80053bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80053c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053c8:	edd7 6a03 	vldr	s13, [r7, #12]
 80053cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80053d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d8:	eeb0 0a67 	vmov.f32	s0, s15
 80053dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053de:	f001 f9c1 	bl	8006764 <_ZN2FC10ModuleAHRS7invSqrtEf>
 80053e2:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	ax *= recipNorm;
 80053e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80053ea:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	edc7 7a05 	vstr	s15, [r7, #20]
	ay *= recipNorm;
 80053f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80053fa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a04 	vstr	s15, [r7, #16]
	az *= recipNorm;
 8005406:	ed97 7a03 	vldr	s14, [r7, #12]
 800540a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800540e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005412:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalise magnetometer measurement
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8005416:	ed97 7a02 	vldr	s14, [r7, #8]
 800541a:	edd7 7a02 	vldr	s15, [r7, #8]
 800541e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005422:	edd7 6a01 	vldr	s13, [r7, #4]
 8005426:	edd7 7a01 	vldr	s15, [r7, #4]
 800542a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800542e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005432:	edd7 6a00 	vldr	s13, [r7]
 8005436:	edd7 7a00 	vldr	s15, [r7]
 800543a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800543e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005442:	eeb0 0a67 	vmov.f32	s0, s15
 8005446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005448:	f001 f98c 	bl	8006764 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800544c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	mx *= recipNorm;
 8005450:	ed97 7a02 	vldr	s14, [r7, #8]
 8005454:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545c:	edc7 7a02 	vstr	s15, [r7, #8]
	my *= recipNorm;
 8005460:	ed97 7a01 	vldr	s14, [r7, #4]
 8005464:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546c:	edc7 7a01 	vstr	s15, [r7, #4]
	mz *= recipNorm;
 8005470:	ed97 7a00 	vldr	s14, [r7]
 8005474:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547c:	edc7 7a00 	vstr	s15, [r7]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0mx = 2.0f * q0 * mx;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005486:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800548a:	ed97 7a02 	vldr	s14, [r7, #8]
 800548e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005492:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	_2q0my = 2.0f * q0 * my;
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800549c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80054a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	_2q0mz = 2.0f * q0 * mz;
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80054b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054b6:	ed97 7a00 	vldr	s14, [r7]
 80054ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054be:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	_2q1mx = 2.0f * q1 * mx;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80054c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80054d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	_2q0 = 2.0f * q0;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80054de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054e2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	_2q1 = 2.0f * q1;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80054ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054f0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	_2q2 = 2.0f * q2;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80054fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054fe:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	_2q3 = 2.0f * q3;
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005508:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800550c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	_2q0q2 = 2.0f * q0 * q2;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005516:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005524:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	_2q2q3 = 2.0f * q2 * q3;
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800552e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	q0q0 = q0 * q0;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800554c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005550:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	q0q1 = q0 * q1;
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005564:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q0q2 = q0 * q2;
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005578:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q0q3 = q0 * q3;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q1q1 = q1 * q1;
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800559c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	q1q2 = q1 * q2;
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80055b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	q1q3 = q1 * q3;
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80055c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	q2q2 = q2 * q2;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80055d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055dc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	q2q3 = q2 * q3;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80055ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	q3q3 = q3 * q3;
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005604:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Reference direction of Earth's magnetic field
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8005608:	ed97 7a02 	vldr	s14, [r7, #8]
 800560c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005610:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800561a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800561e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005622:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800562c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005638:	edd7 6a02 	vldr	s13, [r7, #8]
 800563c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005648:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800564c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005650:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800565a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800565e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005662:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8005666:	edd7 7a00 	vldr	s15, [r7]
 800566a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800567c:	edd7 6a02 	vldr	s13, [r7, #8]
 8005680:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005688:	ee37 7a67 	vsub.f32	s14, s14, s15
 800568c:	edd7 6a02 	vldr	s13, [r7, #8]
 8005690:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800569c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80056a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80056aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056ae:	edd7 6a01 	vldr	s13, [r7, #4]
 80056b2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80056b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80056c4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80056c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80056d6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056e2:	edd7 6a01 	vldr	s13, [r7, #4]
 80056e6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80056ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056f2:	edd7 6a01 	vldr	s13, [r7, #4]
 80056f6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80056fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005702:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005706:	edd7 7a00 	vldr	s15, [r7]
 800570a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800571c:	edd7 6a01 	vldr	s13, [r7, #4]
 8005720:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800572c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2bx = sqrt(hx * hx + hy * hy);
 8005730:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005734:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800573c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8005740:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800574c:	eeb0 0a67 	vmov.f32	s0, s15
 8005750:	f7ff f814 	bl	800477c <_ZSt4sqrtf>
 8005754:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8005758:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800575c:	eeb1 7a67 	vneg.f32	s14, s15
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005770:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800577c:	edd7 6a00 	vldr	s13, [r7]
 8005780:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005792:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800579a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800579e:	edd7 6a00 	vldr	s13, [r7]
 80057a2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80057a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057ae:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80057b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80057b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80057c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057c8:	edd7 6a00 	vldr	s13, [r7]
 80057cc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80057d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057d8:	edd7 6a00 	vldr	s13, [r7]
 80057dc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80057e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057e8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_4bx = 2.0f * _2bx;
 80057ec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80057f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80057f4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	_4bz = 2.0f * _2bz;
 80057f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80057fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005800:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Gradient decent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005804:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005808:	eeb1 7a67 	vneg.f32	s14, s15
 800580c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005810:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005814:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005818:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800581c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005820:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005828:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800582c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005830:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005834:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005838:	edd7 7a04 	vldr	s15, [r7, #16]
 800583c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005840:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005852:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005856:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800585a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800585e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005862:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005866:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800586a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800586e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005872:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005876:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800587a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800587e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005882:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005886:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800588a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800588e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005892:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800589a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800589e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80058a2:	eef1 6a67 	vneg.f32	s13, s15
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80058ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 80058b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80058ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80058be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80058c2:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80058c6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80058ca:	ee36 6a67 	vsub.f32	s12, s12, s15
 80058ce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80058d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80058d6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80058da:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80058de:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80058e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80058e6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80058ea:	ee36 6a27 	vadd.f32	s12, s12, s15
 80058ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80058f2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80058f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005904:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005908:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800590c:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005910:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005914:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005918:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800591c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005920:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005924:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005928:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800592c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005930:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005934:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005938:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800593c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005940:	edd7 7a00 	vldr	s15, [r7]
 8005944:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800594c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005950:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005954:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005958:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800595c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005960:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005964:	edd7 7a05 	vldr	s15, [r7, #20]
 8005968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800596c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005970:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005974:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005978:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800597c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005980:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005984:	edd7 7a04 	vldr	s15, [r7, #16]
 8005988:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800598c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005994:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800599e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80059a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80059a6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80059aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059ae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80059b2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80059b6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80059ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059be:	ee36 6a67 	vsub.f32	s12, s12, s15
 80059c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80059c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80059ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80059d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80059dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80059e0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80059e4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80059e8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80059ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80059f0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80059f4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80059f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80059fc:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005a00:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005a04:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005a08:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005a0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005a10:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005a14:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a18:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005a2a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 8005a38:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005a3c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005a40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005a44:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005a48:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005a4c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005a50:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a54:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005a58:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005a5c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005a60:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005a64:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005a68:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005a6c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005a70:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a74:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005a86:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8005a94:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005a98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005a9c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005aa0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005aa4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005aa8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005aac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005ab0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005ab4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005ab8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005abc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005ac0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005ac4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005ac8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005acc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ad0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ad4:	edd7 7a00 	vldr	s15, [r7]
 8005ad8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005ae8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005aec:	eeb1 7a67 	vneg.f32	s14, s15
 8005af0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005af4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005af8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005afc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005b00:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b04:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005b08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b0c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005b10:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005b14:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005b18:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005b1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005b24:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005b36:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005b3a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005b3e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005b42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b46:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005b4a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b4e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005b52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b56:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b6a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005b6e:	eef1 6a67 	vneg.f32	s13, s15
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005b78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 8005b82:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005b86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005b8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005b8e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005b92:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005b96:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b9a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005b9e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005ba2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005ba6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005baa:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005bae:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005bb2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005bb6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005bba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005bbe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005bc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bc6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005bd8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005bdc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 8005be6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005bea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005bee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005bf2:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005bf6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005bfa:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005bfe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c02:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c06:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005c0a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005c0e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005c12:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005c16:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005c1a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c22:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005c34:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8005c42:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005c46:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c4a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005c4e:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005c52:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005c56:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c5a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c5e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c62:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005c66:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005c6a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005c6e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005c72:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005c76:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005c7a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005c7e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c82:	edd7 7a00 	vldr	s15, [r7]
 8005c86:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c92:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005c96:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005c9a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005c9e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005ca2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8005caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cae:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005cb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cb6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005cba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005cbe:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005cc2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005cc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005cca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005cce:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cda:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005cde:	eef1 6a67 	vneg.f32	s13, s15
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005ce8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8005cf2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005cf6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cfa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005cfe:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005d02:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005d06:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d0a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005d0e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d12:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005d16:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d1a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005d1e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005d22:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005d26:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d2a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005d2e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d32:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d36:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d42:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005d46:	eef1 6a67 	vneg.f32	s13, s15
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005d50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8005d5a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d5e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d62:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d66:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005d6a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005d6e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d72:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005d76:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d7a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005d7e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005d82:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005d86:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d8a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005d8e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d96:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005da8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005dac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005db0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005db4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005db8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005dbc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005dc0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005dc4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005dc8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005dcc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005dd0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005dd4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005dd8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005ddc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005de0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005de4:	edd7 7a00 	vldr	s15, [r7]
 8005de8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8005df8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005dfc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e04:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005e08:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e14:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005e18:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e24:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005e28:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e34:	eeb0 0a67 	vmov.f32	s0, s15
 8005e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e3a:	f000 fc93 	bl	8006764 <_ZN2FC10ModuleAHRS7invSqrtEf>
 8005e3e:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	s0 *= recipNorm;
 8005e42:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005e46:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 *= recipNorm;
 8005e52:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005e56:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 *= recipNorm;
 8005e62:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005e66:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 *= recipNorm;
 8005e72:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005e76:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Apply feedback step
	qDot1 -= beta * s0;
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005e88:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e90:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e98:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 -= beta * s1;
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005ea2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eb2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 -= beta * s2;
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005ebc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ecc:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 -= beta * s3;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005ed6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ede:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8005ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ee6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8


	float dt = (microsecond() - this->lastUpdate)*1000000;	/*[second]*/
 8005eea:	f7fe fc57 	bl	800479c <_ZL11microsecondv>
 8005eee:	460a      	mov	r2, r1
 8005ef0:	4601      	mov	r1, r0
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8005ef8:	1ac9      	subs	r1, r1, r3
 8005efa:	eb62 0204 	sbc.w	r2, r2, r4
 8005efe:	460d      	mov	r5, r1
 8005f00:	4616      	mov	r6, r2
 8005f02:	462b      	mov	r3, r5
 8005f04:	4634      	mov	r4, r6
 8005f06:	f04f 0100 	mov.w	r1, #0
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	0162      	lsls	r2, r4, #5
 8005f10:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005f14:	0159      	lsls	r1, r3, #5
 8005f16:	460b      	mov	r3, r1
 8005f18:	4614      	mov	r4, r2
 8005f1a:	1b5b      	subs	r3, r3, r5
 8005f1c:	eb64 0406 	sbc.w	r4, r4, r6
 8005f20:	f04f 0100 	mov.w	r1, #0
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	0262      	lsls	r2, r4, #9
 8005f2a:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005f2e:	0259      	lsls	r1, r3, #9
 8005f30:	460b      	mov	r3, r1
 8005f32:	4614      	mov	r4, r2
 8005f34:	195b      	adds	r3, r3, r5
 8005f36:	eb44 0406 	adc.w	r4, r4, r6
 8005f3a:	f04f 0100 	mov.w	r1, #0
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	01a2      	lsls	r2, r4, #6
 8005f44:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8005f48:	0199      	lsls	r1, r3, #6
 8005f4a:	1ac9      	subs	r1, r1, r3
 8005f4c:	eb62 0204 	sbc.w	r2, r2, r4
 8005f50:	194b      	adds	r3, r1, r5
 8005f52:	eb42 0406 	adc.w	r4, r2, r6
 8005f56:	4618      	mov	r0, r3
 8005f58:	4621      	mov	r1, r4
 8005f5a:	f7fa ff6d 	bl	8000e38 <__aeabi_ul2f>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	62bb      	str	r3, [r7, #40]	; 0x28
	if(dt > 0.01) dt = 0.01;								/* saturation */
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fa faff 	bl	8000568 <__aeabi_f2d>
 8005f6a:	a34e      	add	r3, pc, #312	; (adr r3, 80060a4 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe6c>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f7fa fde2 	bl	8000b38 <__aeabi_dcmpgt>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xd46>
 8005f7a:	4b49      	ldr	r3, [pc, #292]	; (80060a0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe68>)
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005f84:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005f88:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005fa0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005fa4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005fbc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005fc0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8005fd8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005fdc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005ffa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800600a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800600e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800601e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006022:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800603a:	eeb0 0a67 	vmov.f32	s0, s15
 800603e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006040:	f000 fb90 	bl	8006764 <_ZN2FC10ModuleAHRS7invSqrtEf>
 8006044:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800604e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8006062:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8006076:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800607a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800608a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800608e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
}
 8006098:	37bc      	adds	r7, #188	; 0xbc
 800609a:	46bd      	mov	sp, r7
 800609c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800609e:	bf00      	nop
 80060a0:	3c23d70a 	.word	0x3c23d70a
 80060a4:	47ae147b 	.word	0x47ae147b
 80060a8:	3f847ae1 	.word	0x3f847ae1
 80060ac:	00000000 	.word	0x00000000

080060b0 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>:

void ModuleAHRS::MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80060b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060b2:	b0a1      	sub	sp, #132	; 0x84
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	61f8      	str	r0, [r7, #28]
 80060b8:	ed87 0a06 	vstr	s0, [r7, #24]
 80060bc:	edc7 0a05 	vstr	s1, [r7, #20]
 80060c0:	ed87 1a04 	vstr	s2, [r7, #16]
 80060c4:	edc7 1a03 	vstr	s3, [r7, #12]
 80060c8:	ed87 2a02 	vstr	s4, [r7, #8]
 80060cc:	edc7 2a01 	vstr	s5, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80060d6:	eeb1 7a67 	vneg.f32	s14, s15
 80060da:	edd7 7a06 	vldr	s15, [r7, #24]
 80060de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80060e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80060ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80060fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80060fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006106:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800610a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800610e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006118:	edd7 7a06 	vldr	s15, [r7, #24]
 800611c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8006126:	edd7 7a04 	vldr	s15, [r7, #16]
 800612a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800612e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8006138:	edd7 7a05 	vldr	s15, [r7, #20]
 800613c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006144:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800614c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006156:	edd7 7a05 	vldr	s15, [r7, #20]
 800615a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8006164:	edd7 7a04 	vldr	s15, [r7, #16]
 8006168:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800616c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8006176:	edd7 7a06 	vldr	s15, [r7, #24]
 800617a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800617e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006182:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800618a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006194:	edd7 7a04 	vldr	s15, [r7, #16]
 8006198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80061a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80061a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80061b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80061b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061c8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80061cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80061d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80061d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061d8:	edd7 6a02 	vldr	s13, [r7, #8]
 80061dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80061e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061e8:	edd7 6a01 	vldr	s13, [r7, #4]
 80061ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80061f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061f8:	eeb0 0a67 	vmov.f32	s0, s15
 80061fc:	69f8      	ldr	r0, [r7, #28]
 80061fe:	f000 fab1 	bl	8006764 <_ZN2FC10ModuleAHRS7invSqrtEf>
 8006202:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	ax *= recipNorm;
 8006206:	ed97 7a03 	vldr	s14, [r7, #12]
 800620a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800620e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006212:	edc7 7a03 	vstr	s15, [r7, #12]
	ay *= recipNorm;
 8006216:	ed97 7a02 	vldr	s14, [r7, #8]
 800621a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800621e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006222:	edc7 7a02 	vstr	s15, [r7, #8]
	az *= recipNorm;
 8006226:	ed97 7a01 	vldr	s14, [r7, #4]
 800622a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800622e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006232:	edc7 7a01 	vstr	s15, [r7, #4]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0 = 2.0f * q0;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800623c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006240:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q1 = 2.0f * q1;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800624a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800624e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	_2q2 = 2.0f * q2;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006258:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800625c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	_2q3 = 2.0f * q3;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006266:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800626a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_4q0 = 4.0f * q0;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8006274:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800627c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	_4q1 = 4.0f * q1;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8006286:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800628a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800628e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4q2 = 4.0f * q2;
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006298:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800629c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062a0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_8q1 = 8.0f * q1;
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80062aa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80062ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062b2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_8q2 = 8.0f * q2;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80062bc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80062c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062c4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	q0q0 = q0 * q0;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80062d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	q1q1 = q1 * q1;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80062e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ec:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	q2q2 = q2 * q2;
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80062fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006300:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	q3q3 = q3 * q3;
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006314:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Gradient decent algorithm corrective step
	s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8006318:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800631c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006324:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8006328:	edd7 7a03 	vldr	s15, [r7, #12]
 800632c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006330:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006334:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8006338:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800633c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006344:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006348:	edd7 7a02 	vldr	s15, [r7, #8]
 800634c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006354:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8006358:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800635c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006364:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8006368:	edd7 7a03 	vldr	s15, [r7, #12]
 800636c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006374:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006378:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800637c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8006386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800638a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800638e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8006392:	edd7 7a02 	vldr	s15, [r7, #8]
 8006396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800639a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800639e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80063a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063a6:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80063aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80063ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063b6:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80063ba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80063be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063c6:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80063ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80063ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063d6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80063da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80063de:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80063e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80063ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063f0:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80063f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80063f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006400:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8006404:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800640c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006410:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8006414:	edd7 7a02 	vldr	s15, [r7, #8]
 8006418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800641c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006420:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006424:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006428:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800642c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006438:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800643c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006448:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800644c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006458:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800645c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006460:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006464:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800646e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006472:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006476:	edd7 7a03 	vldr	s15, [r7, #12]
 800647a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800647e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006482:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006486:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800648a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006498:	ee37 7a27 	vadd.f32	s14, s14, s15
 800649c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80064a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80064a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064ac:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80064b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80064b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80064b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064bc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80064c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80064c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064cc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80064d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80064d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80064e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80064e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064ec:	eeb0 0a67 	vmov.f32	s0, s15
 80064f0:	69f8      	ldr	r0, [r7, #28]
 80064f2:	f000 f937 	bl	8006764 <_ZN2FC10ModuleAHRS7invSqrtEf>
 80064f6:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	s0 *= recipNorm;
 80064fa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80064fe:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006506:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 *= recipNorm;
 800650a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800650e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006516:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 *= recipNorm;
 800651a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800651e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006526:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 *= recipNorm;
 800652a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800652e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006536:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Apply feedback step
	qDot1 -= beta * s0;
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8006540:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006548:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800654c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006550:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 -= beta * s1;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800655a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800655e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006562:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8006566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800656a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 -= beta * s2;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8006574:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8006580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006584:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 -= beta * s3;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800658e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006596:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800659a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800659e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	float dt = (microsecond() - this->lastUpdate)*1000000;			/*[second]*/
 80065a2:	f7fe f8fb 	bl	800479c <_ZL11microsecondv>
 80065a6:	460a      	mov	r2, r1
 80065a8:	4601      	mov	r1, r0
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 80065b0:	1ac9      	subs	r1, r1, r3
 80065b2:	eb62 0204 	sbc.w	r2, r2, r4
 80065b6:	460d      	mov	r5, r1
 80065b8:	4616      	mov	r6, r2
 80065ba:	462b      	mov	r3, r5
 80065bc:	4634      	mov	r4, r6
 80065be:	f04f 0100 	mov.w	r1, #0
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	0162      	lsls	r2, r4, #5
 80065c8:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80065cc:	0159      	lsls	r1, r3, #5
 80065ce:	460b      	mov	r3, r1
 80065d0:	4614      	mov	r4, r2
 80065d2:	1b5b      	subs	r3, r3, r5
 80065d4:	eb64 0406 	sbc.w	r4, r4, r6
 80065d8:	f04f 0100 	mov.w	r1, #0
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	0262      	lsls	r2, r4, #9
 80065e2:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80065e6:	0259      	lsls	r1, r3, #9
 80065e8:	460b      	mov	r3, r1
 80065ea:	4614      	mov	r4, r2
 80065ec:	195b      	adds	r3, r3, r5
 80065ee:	eb44 0406 	adc.w	r4, r4, r6
 80065f2:	f04f 0100 	mov.w	r1, #0
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	01a2      	lsls	r2, r4, #6
 80065fc:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8006600:	0199      	lsls	r1, r3, #6
 8006602:	1ac9      	subs	r1, r1, r3
 8006604:	eb62 0204 	sbc.w	r2, r2, r4
 8006608:	194b      	adds	r3, r1, r5
 800660a:	eb42 0406 	adc.w	r4, r2, r6
 800660e:	4618      	mov	r0, r3
 8006610:	4621      	mov	r1, r4
 8006612:	f7fa fc11 	bl	8000e38 <__aeabi_ul2f>
 8006616:	4603      	mov	r3, r0
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
	if(dt > 0.01) dt = 0.01;
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	4618      	mov	r0, r3
 800661e:	f7f9 ffa3 	bl	8000568 <__aeabi_f2d>
 8006622:	a34e      	add	r3, pc, #312	; (adr r3, 800675c <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x6ac>)
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	f7fa fa86 	bl	8000b38 <__aeabi_dcmpgt>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x586>
 8006632:	4b49      	ldr	r3, [pc, #292]	; (8006758 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x6a8>)
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800663c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006640:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8006658:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800665c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8006674:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006678:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800667c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8006690:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006694:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800669c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80066b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80066c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80066d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80066ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066f2:	eeb0 0a67 	vmov.f32	s0, s15
 80066f6:	69f8      	ldr	r0, [r7, #28]
 80066f8:	f000 f834 	bl	8006764 <_ZN2FC10ModuleAHRS7invSqrtEf>
 80066fc:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	q0 *= recipNorm;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006706:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800670a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800671a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800671e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800672e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8006742:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
}
 8006750:	bf00      	nop
 8006752:	3784      	adds	r7, #132	; 0x84
 8006754:	46bd      	mov	sp, r7
 8006756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006758:	3c23d70a 	.word	0x3c23d70a
 800675c:	47ae147b 	.word	0x47ae147b
 8006760:	3f847ae1 	.word	0x3f847ae1

08006764 <_ZN2FC10ModuleAHRS7invSqrtEf>:

float ModuleAHRS::invSqrt(float x){
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	ed87 0a00 	vstr	s0, [r7]
	float halfx = 0.5f * x;
 8006770:	edd7 7a00 	vldr	s15, [r7]
 8006774:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800677c:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8006784:	f107 0310 	add.w	r3, r7, #16
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	105a      	asrs	r2, r3, #1
 8006790:	4b12      	ldr	r3, [pc, #72]	; (80067dc <_ZN2FC10ModuleAHRS7invSqrtEf+0x78>)
 8006792:	1a9b      	subs	r3, r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8006796:	f107 030c 	add.w	r3, r7, #12
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800679e:	ed97 7a04 	vldr	s14, [r7, #16]
 80067a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80067a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80067ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80067b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80067ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80067be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c2:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	ee07 3a90 	vmov	s15, r3
}
 80067cc:	eeb0 0a67 	vmov.f32	s0, s15
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	5f3759df 	.word	0x5f3759df

080067e0 <MPU9250_StartTask>:
{
	HAL_UART_Transmit(&huart3, p, len, 10);
	return len;
}

void MPU9250_StartTask(void *argument){
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	while(1){
		MPU9250_updateDMA();
 80067e8:	f7fa ff24 	bl	8001634 <MPU9250_updateDMA>
		osDelay(5);				/* 200hz */
 80067ec:	2005      	movs	r0, #5
 80067ee:	f00f f8cf 	bl	8015990 <osDelay>
		MPU9250_updateDMA();
 80067f2:	e7f9      	b.n	80067e8 <MPU9250_StartTask+0x8>

080067f4 <BME280_StartTask>:
	}
}
void BME280_StartTask(void *argument){
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
	while(1){
		BME280_readIT();
 80067fc:	f7fb fe32 	bl	8002464 <BME280_readIT>
		osDelay(20); 			/* 50hz */
 8006800:	2014      	movs	r0, #20
 8006802:	f00f f8c5 	bl	8015990 <osDelay>
		BME280_readIT();
 8006806:	e7f9      	b.n	80067fc <BME280_StartTask+0x8>

08006808 <IST8310_StartTask>:
	}
}
void IST8310_StartTask(void *argument){
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	while(1){
		IST8310_updataIT();
 8006810:	f7fa fd3c 	bl	800128c <IST8310_updataIT>
		osDelay(10); 			/* 100hz */
 8006814:	200a      	movs	r0, #10
 8006816:	f00f f8bb 	bl	8015990 <osDelay>
		IST8310_updataIT();
 800681a:	e7f9      	b.n	8006810 <IST8310_StartTask+0x8>
 800681c:	0000      	movs	r0, r0
	...

08006820 <SD_StartTask>:
	}
}
void SD_StartTask(void *argument){
 8006820:	b5b0      	push	{r4, r5, r7, lr}
 8006822:	b0fc      	sub	sp, #496	; 0x1f0
 8006824:	af08      	add	r7, sp, #32
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	6018      	str	r0, [r3, #0]
	char buf[256];
	uint32_t bw;
	int len = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	retSD=f_mount(&SDFatFS ,&SDPath[0],1);
 8006830:	2201      	movs	r2, #1
 8006832:	4913      	ldr	r1, [pc, #76]	; (8006880 <SD_StartTask+0x60>)
 8006834:	4813      	ldr	r0, [pc, #76]	; (8006884 <SD_StartTask+0x64>)
 8006836:	f00e f9f5 	bl	8014c24 <f_mount>
 800683a:	4603      	mov	r3, r0
 800683c:	461a      	mov	r2, r3
 800683e:	4b12      	ldr	r3, [pc, #72]	; (8006888 <SD_StartTask+0x68>)
 8006840:	701a      	strb	r2, [r3, #0]
	if(retSD==FR_OK){
 8006842:	4b11      	ldr	r3, [pc, #68]	; (8006888 <SD_StartTask+0x68>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d105      	bne.n	8006856 <SD_StartTask+0x36>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800684a:	2201      	movs	r2, #1
 800684c:	2180      	movs	r1, #128	; 0x80
 800684e:	480f      	ldr	r0, [pc, #60]	; (800688c <SD_StartTask+0x6c>)
 8006850:	f004 f862 	bl	800a918 <HAL_GPIO_WritePin>
 8006854:	e004      	b.n	8006860 <SD_StartTask+0x40>
	}
	else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8006856:	2200      	movs	r2, #0
 8006858:	2180      	movs	r1, #128	; 0x80
 800685a:	480c      	ldr	r0, [pc, #48]	; (800688c <SD_StartTask+0x6c>)
 800685c:	f004 f85c 	bl	800a918 <HAL_GPIO_WritePin>

	while(1){
		/* open */
		f_open(&SDFile,"log.txt", FA_OPEN_APPEND | FA_WRITE );
 8006860:	2232      	movs	r2, #50	; 0x32
 8006862:	490b      	ldr	r1, [pc, #44]	; (8006890 <SD_StartTask+0x70>)
 8006864:	480b      	ldr	r0, [pc, #44]	; (8006894 <SD_StartTask+0x74>)
 8006866:	f00e fa41 	bl	8014cec <f_open>
		if(retSD==FR_OK){
 800686a:	4b07      	ldr	r3, [pc, #28]	; (8006888 <SD_StartTask+0x68>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d112      	bne.n	8006898 <SD_StartTask+0x78>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006872:	2201      	movs	r2, #1
 8006874:	2180      	movs	r1, #128	; 0x80
 8006876:	4805      	ldr	r0, [pc, #20]	; (800688c <SD_StartTask+0x6c>)
 8006878:	f004 f84e 	bl	800a918 <HAL_GPIO_WritePin>
 800687c:	e011      	b.n	80068a2 <SD_StartTask+0x82>
 800687e:	bf00      	nop
 8006880:	200079f0 	.word	0x200079f0
 8006884:	20008a24 	.word	0x20008a24
 8006888:	200079ec 	.word	0x200079ec
 800688c:	40020400 	.word	0x40020400
 8006890:	0801e8ec 	.word	0x0801e8ec
 8006894:	200079f4 	.word	0x200079f4
		}
		else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8006898:	2200      	movs	r2, #0
 800689a:	2180      	movs	r1, #128	; 0x80
 800689c:	48d4      	ldr	r0, [pc, #848]	; (8006bf0 <SD_StartTask+0x3d0>)
 800689e:	f004 f83b 	bl	800a918 <HAL_GPIO_WritePin>
		struct NedAccel nedAccel;
		struct GPS gps;
		struct Barometer baro;
		struct BodyAngularVelocity gyro;

		if(msgBus.getAttitude(&attitude)){
 80068a2:	f107 0308 	add.w	r3, r7, #8
 80068a6:	4619      	mov	r1, r3
 80068a8:	48d2      	ldr	r0, [pc, #840]	; (8006bf4 <SD_StartTask+0x3d4>)
 80068aa:	f7fe f8af 	bl	8004a0c <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d041      	beq.n	8006938 <SD_StartTask+0x118>
		msgBus.getAttitude(&attitude);
 80068b4:	f107 0308 	add.w	r3, r7, #8
 80068b8:	4619      	mov	r1, r3
 80068ba:	48ce      	ldr	r0, [pc, #824]	; (8006bf4 <SD_StartTask+0x3d4>)
 80068bc:	f7fe f8a6 	bl	8004a0c <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
			len = sprintf(buf, "att %u %d %d %d\n", (uint)attitude.timestamp, (int)(attitude.roll*1000000),
 80068c0:	f107 0308 	add.w	r3, r7, #8
 80068c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068c8:	4619      	mov	r1, r3
 80068ca:	f107 0308 	add.w	r3, r7, #8
 80068ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80068d2:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8006bf8 <SD_StartTask+0x3d8>
 80068d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068da:	eefd 6ae7 	vcvt.s32.f32	s13, s15
													(int)(attitude.pitch*1000000),
 80068de:	f107 0308 	add.w	r3, r7, #8
 80068e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80068e6:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8006bf8 <SD_StartTask+0x3d8>
 80068ea:	ee67 7a87 	vmul.f32	s15, s15, s14
			len = sprintf(buf, "att %u %d %d %d\n", (uint)attitude.timestamp, (int)(attitude.roll*1000000),
 80068ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068f2:	ee17 2a90 	vmov	r2, s15
													(int)(attitude.yaw*1000000));
 80068f6:	f107 0308 	add.w	r3, r7, #8
 80068fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80068fe:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8006bf8 <SD_StartTask+0x3d8>
 8006902:	ee67 7a87 	vmul.f32	s15, s15, s14
			len = sprintf(buf, "att %u %d %d %d\n", (uint)attitude.timestamp, (int)(attitude.roll*1000000),
 8006906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800690a:	ee17 3a90 	vmov	r3, s15
 800690e:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	9200      	str	r2, [sp, #0]
 8006916:	ee16 3a90 	vmov	r3, s13
 800691a:	460a      	mov	r2, r1
 800691c:	49b7      	ldr	r1, [pc, #732]	; (8006bfc <SD_StartTask+0x3dc>)
 800691e:	f014 fd3f 	bl	801b3a0 <siprintf>
 8006922:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
			f_write(&SDFile, buf, len, (UINT*)&bw);
 8006926:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800692a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800692e:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8006932:	48b3      	ldr	r0, [pc, #716]	; (8006c00 <SD_StartTask+0x3e0>)
 8006934:	f00e fbad 	bl	8015092 <f_write>
		}
		if(msgBus.getNedAccel(&nedAccel)){
 8006938:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800693c:	4619      	mov	r1, r3
 800693e:	48ad      	ldr	r0, [pc, #692]	; (8006bf4 <SD_StartTask+0x3d4>)
 8006940:	f7fe f89f 	bl	8004a82 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d03b      	beq.n	80069c2 <SD_StartTask+0x1a2>
			len=sprintf(buf,"accNED %u %d %d %d\n",(uint)nedAccel.timestamp,(int)(nedAccel.xyz[0]*1000000),
 800694a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800694e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006952:	4619      	mov	r1, r3
 8006954:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006958:	edd3 7a02 	vldr	s15, [r3, #8]
 800695c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8006bf8 <SD_StartTask+0x3d8>
 8006960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006964:	eefd 6ae7 	vcvt.s32.f32	s13, s15
																	(int)(nedAccel.xyz[1]*1000000),
 8006968:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800696c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006970:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8006bf8 <SD_StartTask+0x3d8>
 8006974:	ee67 7a87 	vmul.f32	s15, s15, s14
			len=sprintf(buf,"accNED %u %d %d %d\n",(uint)nedAccel.timestamp,(int)(nedAccel.xyz[0]*1000000),
 8006978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800697c:	ee17 2a90 	vmov	r2, s15
																	(int)(nedAccel.xyz[2]*1000000));
 8006980:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006984:	edd3 7a04 	vldr	s15, [r3, #16]
 8006988:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8006bf8 <SD_StartTask+0x3d8>
 800698c:	ee67 7a87 	vmul.f32	s15, s15, s14
			len=sprintf(buf,"accNED %u %d %d %d\n",(uint)nedAccel.timestamp,(int)(nedAccel.xyz[0]*1000000),
 8006990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006994:	ee17 3a90 	vmov	r3, s15
 8006998:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	9200      	str	r2, [sp, #0]
 80069a0:	ee16 3a90 	vmov	r3, s13
 80069a4:	460a      	mov	r2, r1
 80069a6:	4997      	ldr	r1, [pc, #604]	; (8006c04 <SD_StartTask+0x3e4>)
 80069a8:	f014 fcfa 	bl	801b3a0 <siprintf>
 80069ac:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
			f_write(&SDFile, buf, len, (UINT*)&bw);
 80069b0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80069b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80069b8:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80069bc:	4890      	ldr	r0, [pc, #576]	; (8006c00 <SD_StartTask+0x3e0>)
 80069be:	f00e fb68 	bl	8015092 <f_write>
		}
		if(msgBus.getBodyAngularVelocity(&gyro)){
 80069c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80069c6:	4619      	mov	r1, r3
 80069c8:	488a      	ldr	r0, [pc, #552]	; (8006bf4 <SD_StartTask+0x3d4>)
 80069ca:	f7fd ff40 	bl	800484e <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d020      	beq.n	8006a16 <SD_StartTask+0x1f6>
			len=sprintf(buf,"gyro %u %d\n",(uint)gyro.timestamp,(int)(gyro.xyz[2]*1000000));
 80069d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80069d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069dc:	461a      	mov	r2, r3
 80069de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80069e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80069e6:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006bf8 <SD_StartTask+0x3d8>
 80069ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069f2:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 80069f6:	ee17 3a90 	vmov	r3, s15
 80069fa:	4983      	ldr	r1, [pc, #524]	; (8006c08 <SD_StartTask+0x3e8>)
 80069fc:	f014 fcd0 	bl	801b3a0 <siprintf>
 8006a00:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
			f_write(&SDFile, buf, len, (UINT*)&bw);
 8006a04:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8006a08:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006a0c:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8006a10:	487b      	ldr	r0, [pc, #492]	; (8006c00 <SD_StartTask+0x3e0>)
 8006a12:	f00e fb3e 	bl	8015092 <f_write>
		}
		if(msgBus.getGPS(&gps)){
 8006a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4875      	ldr	r0, [pc, #468]	; (8006bf4 <SD_StartTask+0x3d4>)
 8006a1e:	f7fd ff84 	bl	800492a <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80ab 	beq.w	8006b80 <SD_StartTask+0x360>
			int32_t latDecimal = (int32_t)gps.lat;
 8006a2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a2e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006a32:	4618      	mov	r0, r3
 8006a34:	4621      	mov	r1, r4
 8006a36:	f7fa f89f 	bl	8000b78 <__aeabi_d2iz>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
			int32_t latFraction = (int32_t)((gps.lat-latDecimal)*100000000);
 8006a40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a44:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8006a48:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8006a4c:	f7f9 fd7a 	bl	8000544 <__aeabi_i2d>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4620      	mov	r0, r4
 8006a56:	4629      	mov	r1, r5
 8006a58:	f7f9 fc26 	bl	80002a8 <__aeabi_dsub>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	4618      	mov	r0, r3
 8006a62:	4621      	mov	r1, r4
 8006a64:	a360      	add	r3, pc, #384	; (adr r3, 8006be8 <SD_StartTask+0x3c8>)
 8006a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6a:	f7f9 fdd5 	bl	8000618 <__aeabi_dmul>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	460c      	mov	r4, r1
 8006a72:	4618      	mov	r0, r3
 8006a74:	4621      	mov	r1, r4
 8006a76:	f7fa f87f 	bl	8000b78 <__aeabi_d2iz>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			int32_t lonDecimal = (int32_t)gps.lon;
 8006a80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a84:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	f7fa f874 	bl	8000b78 <__aeabi_d2iz>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
			int32_t lonFraction = (int32_t)((gps.lon-lonDecimal)*100000000);
 8006a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a9a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006a9e:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8006aa2:	f7f9 fd4f 	bl	8000544 <__aeabi_i2d>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4620      	mov	r0, r4
 8006aac:	4629      	mov	r1, r5
 8006aae:	f7f9 fbfb 	bl	80002a8 <__aeabi_dsub>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	4621      	mov	r1, r4
 8006aba:	a34b      	add	r3, pc, #300	; (adr r3, 8006be8 <SD_StartTask+0x3c8>)
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f7f9 fdaa 	bl	8000618 <__aeabi_dmul>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	4618      	mov	r0, r3
 8006aca:	4621      	mov	r1, r4
 8006acc:	f7fa f854 	bl	8000b78 <__aeabi_d2iz>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
			len=std::sprintf(buf,"GPS %u %d.%d %d.%d %d %d %d %d\n",(uint)gps.timestamp,
 8006ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ada:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ade:	461d      	mov	r5, r3
															  latDecimal, latFraction,
															  lonDecimal, lonFraction,
															  (int)(gps.alt*1000000),
 8006ae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ae4:	edd3 7a08 	vldr	s15, [r3, #32]
 8006ae8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8006bf8 <SD_StartTask+0x3d8>
 8006aec:	ee67 7a87 	vmul.f32	s15, s15, s14
			len=std::sprintf(buf,"GPS %u %d.%d %d.%d %d %d %d %d\n",(uint)gps.timestamp,
 8006af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006af4:	ee17 2a90 	vmov	r2, s15
															  (int)(gps.velN*1000000),
 8006af8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006afc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006b00:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8006bf8 <SD_StartTask+0x3d8>
 8006b04:	ee67 7a87 	vmul.f32	s15, s15, s14
			len=std::sprintf(buf,"GPS %u %d.%d %d.%d %d %d %d %d\n",(uint)gps.timestamp,
 8006b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b0c:	ee17 1a90 	vmov	r1, s15
															  (int)(gps.velE*1000000),
 8006b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b14:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006b18:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8006bf8 <SD_StartTask+0x3d8>
 8006b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
			len=std::sprintf(buf,"GPS %u %d.%d %d.%d %d %d %d %d\n",(uint)gps.timestamp,
 8006b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b24:	ee17 4a90 	vmov	r4, s15
															  (int)(gps.velD*1000000));
 8006b28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b2c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006b30:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006bf8 <SD_StartTask+0x3d8>
 8006b34:	ee67 7a87 	vmul.f32	s15, s15, s14
			len=std::sprintf(buf,"GPS %u %d.%d %d.%d %d %d %d %d\n",(uint)gps.timestamp,
 8006b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b3c:	ee17 3a90 	vmov	r3, s15
 8006b40:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8006b44:	9306      	str	r3, [sp, #24]
 8006b46:	9405      	str	r4, [sp, #20]
 8006b48:	9104      	str	r1, [sp, #16]
 8006b4a:	9203      	str	r2, [sp, #12]
 8006b4c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8006b50:	9302      	str	r3, [sp, #8]
 8006b52:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006b62:	462a      	mov	r2, r5
 8006b64:	4929      	ldr	r1, [pc, #164]	; (8006c0c <SD_StartTask+0x3ec>)
 8006b66:	f014 fc1b 	bl	801b3a0 <siprintf>
 8006b6a:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
			f_write(&SDFile, buf, len, (UINT*)&bw);
 8006b6e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8006b72:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006b76:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8006b7a:	4821      	ldr	r0, [pc, #132]	; (8006c00 <SD_StartTask+0x3e0>)
 8006b7c:	f00e fa89 	bl	8015092 <f_write>
		}   // Lat Lon Alt velN velE velD
		if(msgBus.getBarometer(&baro)){
 8006b80:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006b84:	4619      	mov	r1, r3
 8006b86:	481b      	ldr	r0, [pc, #108]	; (8006bf4 <SD_StartTask+0x3d4>)
 8006b88:	f7fd fefe 	bl	8004988 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d020      	beq.n	8006bd4 <SD_StartTask+0x3b4>
			len=sprintf(buf,"Baro %u %d\n",(uint)baro.timestamp,(int)(baro.pressure*1000000));
 8006b92:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006b96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006ba0:	edd3 7a02 	vldr	s15, [r3, #8]
 8006ba4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006bf8 <SD_StartTask+0x3d8>
 8006ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bb0:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8006bb4:	ee17 3a90 	vmov	r3, s15
 8006bb8:	4915      	ldr	r1, [pc, #84]	; (8006c10 <SD_StartTask+0x3f0>)
 8006bba:	f014 fbf1 	bl	801b3a0 <siprintf>
 8006bbe:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
			f_write(&SDFile, buf, len, (UINT*)&bw);
 8006bc2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8006bc6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006bca:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8006bce:	480c      	ldr	r0, [pc, #48]	; (8006c00 <SD_StartTask+0x3e0>)
 8006bd0:	f00e fa5f 	bl	8015092 <f_write>
		}

		if(retSD==FR_OK){
 8006bd4:	4b0f      	ldr	r3, [pc, #60]	; (8006c14 <SD_StartTask+0x3f4>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d11d      	bne.n	8006c18 <SD_StartTask+0x3f8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006bdc:	2201      	movs	r2, #1
 8006bde:	2180      	movs	r1, #128	; 0x80
 8006be0:	4803      	ldr	r0, [pc, #12]	; (8006bf0 <SD_StartTask+0x3d0>)
 8006be2:	f003 fe99 	bl	800a918 <HAL_GPIO_WritePin>
 8006be6:	e01c      	b.n	8006c22 <SD_StartTask+0x402>
 8006be8:	00000000 	.word	0x00000000
 8006bec:	4197d784 	.word	0x4197d784
 8006bf0:	40020400 	.word	0x40020400
 8006bf4:	20000008 	.word	0x20000008
 8006bf8:	49742400 	.word	0x49742400
 8006bfc:	0801e8f4 	.word	0x0801e8f4
 8006c00:	200079f4 	.word	0x200079f4
 8006c04:	0801e908 	.word	0x0801e908
 8006c08:	0801e91c 	.word	0x0801e91c
 8006c0c:	0801e928 	.word	0x0801e928
 8006c10:	0801e948 	.word	0x0801e948
 8006c14:	200079ec 	.word	0x200079ec
		}
		else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2180      	movs	r1, #128	; 0x80
 8006c1c:	480c      	ldr	r0, [pc, #48]	; (8006c50 <SD_StartTask+0x430>)
 8006c1e:	f003 fe7b 	bl	800a918 <HAL_GPIO_WritePin>

		f_close(&SDFile);
 8006c22:	480c      	ldr	r0, [pc, #48]	; (8006c54 <SD_StartTask+0x434>)
 8006c24:	f00e fc81 	bl	801552a <f_close>
		if(retSD==FR_OK){
 8006c28:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <SD_StartTask+0x438>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d105      	bne.n	8006c3c <SD_StartTask+0x41c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006c30:	2201      	movs	r2, #1
 8006c32:	2180      	movs	r1, #128	; 0x80
 8006c34:	4806      	ldr	r0, [pc, #24]	; (8006c50 <SD_StartTask+0x430>)
 8006c36:	f003 fe6f 	bl	800a918 <HAL_GPIO_WritePin>
 8006c3a:	e004      	b.n	8006c46 <SD_StartTask+0x426>
		}
		else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	2180      	movs	r1, #128	; 0x80
 8006c40:	4803      	ldr	r0, [pc, #12]	; (8006c50 <SD_StartTask+0x430>)
 8006c42:	f003 fe69 	bl	800a918 <HAL_GPIO_WritePin>
		osDelay(100);			/* 10hz */
 8006c46:	2064      	movs	r0, #100	; 0x64
 8006c48:	f00e fea2 	bl	8015990 <osDelay>
	}
 8006c4c:	e608      	b.n	8006860 <SD_StartTask+0x40>
 8006c4e:	bf00      	nop
 8006c50:	40020400 	.word	0x40020400
 8006c54:	200079f4 	.word	0x200079f4
 8006c58:	200079ec 	.word	0x200079ec

08006c5c <AHRS_StartTask>:
}

void AHRS_StartTask(void *argument){
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b0ac      	sub	sp, #176	; 0xb0
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
	ModuleAHRS moduleAHRS;
 8006c64:	f107 0308 	add.w	r3, r7, #8
 8006c68:	22a8      	movs	r2, #168	; 0xa8
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f013 fafa 	bl	801a266 <memset>
 8006c72:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006c76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	while(1){
		moduleAHRS.main();
 8006c82:	f107 0308 	add.w	r3, r7, #8
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe f90a 	bl	8004ea0 <_ZN2FC10ModuleAHRS4mainEv>
		osDelay(20);				/* 200hz */
 8006c8c:	2014      	movs	r0, #20
 8006c8e:	f00e fe7f 	bl	8015990 <osDelay>
		moduleAHRS.main();
 8006c92:	e7f6      	b.n	8006c82 <AHRS_StartTask+0x26>

08006c94 <_Z10debug_mainPv>:
 */
/*
 *  LED signal
 *  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 */
void debug_main(void* param){
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	while(1){
		osDelay(1000);
 8006c9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ca0:	f00e fe76 	bl	8015990 <osDelay>
 8006ca4:	e7fa      	b.n	8006c9c <_Z10debug_mainPv+0x8>
	...

08006ca8 <cppMain>:
	}
}

void cppMain(){
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af04      	add	r7, sp, #16
    setvbuf(stdout, NULL, _IONBF, 0);
 8006cae:	4b1b      	ldr	r3, [pc, #108]	; (8006d1c <cppMain+0x74>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6898      	ldr	r0, [r3, #8]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	2100      	movs	r1, #0
 8006cba:	f014 fabd 	bl	801b238 <setvbuf>
    printf("test\r\n");
 8006cbe:	4818      	ldr	r0, [pc, #96]	; (8006d20 <cppMain+0x78>)
 8006cc0:	f014 fab2 	bl	801b228 <puts>

    /* micro second timer start */
	HAL_TIM_Base_Start_IT(&htim2);
 8006cc4:	4817      	ldr	r0, [pc, #92]	; (8006d24 <cppMain+0x7c>)
 8006cc6:	f008 fecc 	bl	800fa62 <HAL_TIM_Base_Start_IT>

	MPU9250(&hi2c1);
 8006cca:	4817      	ldr	r0, [pc, #92]	; (8006d28 <cppMain+0x80>)
 8006ccc:	f7fa fc22 	bl	8001514 <MPU9250>
	 * RMS Noise : 0.3Pa/2.5cm
	 * Data output rate : 83hz
	 * Filter bandwidth : 1.75 Hz
	 * response time : 0.3s
	 */
	BME280_init(&hi2c2, P_OSR_04, H_OSR_00, T_OSR_01, normal, BW0_021ODR,t_00_5ms);
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9302      	str	r3, [sp, #8]
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	2303      	movs	r3, #3
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	2301      	movs	r3, #1
 8006cde:	2201      	movs	r2, #1
 8006ce0:	2103      	movs	r1, #3
 8006ce2:	4812      	ldr	r0, [pc, #72]	; (8006d2c <cppMain+0x84>)
 8006ce4:	f7fb fad0 	bl	8002288 <BME280_init>

	IST8310(&hi2c2);
 8006ce8:	4810      	ldr	r0, [pc, #64]	; (8006d2c <cppMain+0x84>)
 8006cea:	f7fa fabb 	bl	8001264 <IST8310>

#ifdef USE_GPS
	/*
	 *  GPS using DMA circular mode
	 */
    TM_GPS_Init(&huart8);
 8006cee:	4810      	ldr	r0, [pc, #64]	; (8006d30 <cppMain+0x88>)
 8006cf0:	f7fb fe6a 	bl	80029c8 <TM_GPS_Init>
#endif

#ifdef USE_SBUS
	SBUS_init(&huart7);
 8006cf4:	480f      	ldr	r0, [pc, #60]	; (8006d34 <cppMain+0x8c>)
 8006cf6:	f7fd fa27 	bl	8004148 <SBUS_init>
#endif

	//	Lidar1D_init(&htim9, TIM_CHANNEL_1, TIM_CHANNEL_2);
	//	Lidar1D_run();

    std::printf("boot complete\r\n");
 8006cfa:	480f      	ldr	r0, [pc, #60]	; (8006d38 <cppMain+0x90>)
 8006cfc:	f014 fa94 	bl	801b228 <puts>

	xTaskCreate(debug_main,
 8006d00:	2300      	movs	r3, #0
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	2302      	movs	r3, #2
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	2280      	movs	r2, #128	; 0x80
 8006d0c:	490b      	ldr	r1, [pc, #44]	; (8006d3c <cppMain+0x94>)
 8006d0e:	480c      	ldr	r0, [pc, #48]	; (8006d40 <cppMain+0x98>)
 8006d10:	f010 fa9a 	bl	8017248 <xTaskCreate>
				"debug_main",
				configMINIMAL_STACK_SIZE,
				NULL,
				2,
				NULL);
}
 8006d14:	bf00      	nop
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	2000011c 	.word	0x2000011c
 8006d20:	0801e954 	.word	0x0801e954
 8006d24:	20007360 	.word	0x20007360
 8006d28:	20006ebc 	.word	0x20006ebc
 8006d2c:	20006f10 	.word	0x20006f10
 8006d30:	20007560 	.word	0x20007560
 8006d34:	20007420 	.word	0x20007420
 8006d38:	0801e95c 	.word	0x0801e95c
 8006d3c:	0801e96c 	.word	0x0801e96c
 8006d40:	08006c95 	.word	0x08006c95

08006d44 <HAL_I2C_MemRxCpltCallback>:

//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
//#ifdef USE_MPU9250
	if(hi2c->Instance == mpu9250.hi2c->Instance){
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b2f      	ldr	r3, [pc, #188]	; (8006e10 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d137      	bne.n	8006dca <HAL_I2C_MemRxCpltCallback+0x86>
		MPU9250_i2cRxCpltCallback();
 8006d5a:	f7fa fc8b 	bl	8001674 <MPU9250_i2cRxCpltCallback>
		sensorAccel.setAccel(mpu9250.accel[0], mpu9250.accel[1], mpu9250.accel[2]);
 8006d5e:	4b2c      	ldr	r3, [pc, #176]	; (8006e10 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006d60:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006d64:	4b2a      	ldr	r3, [pc, #168]	; (8006e10 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006d66:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006d6a:	4b29      	ldr	r3, [pc, #164]	; (8006e10 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006d6c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8006d70:	eeb0 1a66 	vmov.f32	s2, s13
 8006d74:	eef0 0a47 	vmov.f32	s1, s14
 8006d78:	eeb0 0a67 	vmov.f32	s0, s15
 8006d7c:	4825      	ldr	r0, [pc, #148]	; (8006e14 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8006d7e:	f7fd fed5 	bl	8004b2c <_ZN2FC11SensorAccel8setAccelEfff>
		sensorGyro.setGyro(mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
 8006d82:	4b23      	ldr	r3, [pc, #140]	; (8006e10 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006d84:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006d88:	4b21      	ldr	r3, [pc, #132]	; (8006e10 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006d8a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8006d8e:	4b20      	ldr	r3, [pc, #128]	; (8006e10 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006d90:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8006d94:	eeb0 1a66 	vmov.f32	s2, s13
 8006d98:	eef0 0a47 	vmov.f32	s1, s14
 8006d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006da0:	481d      	ldr	r0, [pc, #116]	; (8006e18 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8006da2:	f7fd feff 	bl	8004ba4 <_ZN2FC10SensorGyro7setGyroEfff>
		sensorMag.setMag(mpu9250.mag[0], mpu9250.mag[1], mpu9250.mag[2]);
 8006da6:	4b1a      	ldr	r3, [pc, #104]	; (8006e10 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006da8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006dac:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006dae:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8006db2:	4b17      	ldr	r3, [pc, #92]	; (8006e10 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8006db4:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8006db8:	eeb0 1a66 	vmov.f32	s2, s13
 8006dbc:	eef0 0a47 	vmov.f32	s1, s14
 8006dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8006dc4:	4815      	ldr	r0, [pc, #84]	; (8006e1c <HAL_I2C_MemRxCpltCallback+0xd8>)
 8006dc6:	f7fd ff29 	bl	8004c1c <_ZN2FC9SensorMag6setMagEfff>
	}
//#endif

//#ifdef USE_IST8310
	if(hi2c->Instance == ist8310.hi2c->Instance){
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d101      	bne.n	8006ddc <HAL_I2C_MemRxCpltCallback+0x98>
		IST8310_i2cRxCpltCallback();
 8006dd8:	f7fa fa7a 	bl	80012d0 <IST8310_i2cRxCpltCallback>
	}
//#endif

//#ifdef USE_BME280
	if(hi2c->Instance == bme280.hi2c->Instance){
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d10e      	bne.n	8006e08 <HAL_I2C_MemRxCpltCallback+0xc4>
		BME280_i2cRxCpltCallback();
 8006dea:	f7fb fb59 	bl	80024a0 <BME280_i2cRxCpltCallback>
		sensorBaro.setBaro(bme280.P, bme280.T);
 8006dee:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8006df0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006df4:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8006df6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006dfa:	eef0 0a47 	vmov.f32	s1, s14
 8006dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8006e02:	4809      	ldr	r0, [pc, #36]	; (8006e28 <HAL_I2C_MemRxCpltCallback+0xe4>)
 8006e04:	f7fd ffd8 	bl	8004db8 <_ZN2FC10SensorBaro7setBaroEff>
	}
//#endif
}
 8006e08:	bf00      	nop
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	200004c0 	.word	0x200004c0
 8006e14:	200008f0 	.word	0x200008f0
 8006e18:	20000908 	.word	0x20000908
 8006e1c:	200008c0 	.word	0x200008c0
 8006e20:	20000838 	.word	0x20000838
 8006e24:	20000320 	.word	0x20000320
 8006e28:	20000920 	.word	0x20000920

08006e2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e30:	ed2d 8b06 	vpush	{d8-d10}
 8006e34:	b088      	sub	sp, #32
 8006e36:	af06      	add	r7, sp, #24
 8006e38:	6078      	str	r0, [r7, #4]
#ifdef USE_SBUS
	if(huart->Instance == sbus.huart->Instance){
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	4b47      	ldr	r3, [pc, #284]	; (8006f5c <HAL_UART_RxCpltCallback+0x130>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d132      	bne.n	8006eae <HAL_UART_RxCpltCallback+0x82>
		if(SBUS_uartRxCpltCallback() == SBUS_Result_NewData){
 8006e48:	f7fd fbc2 	bl	80045d0 <SBUS_uartRxCpltCallback>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	bf0c      	ite	eq
 8006e52:	2301      	moveq	r3, #1
 8006e54:	2300      	movne	r3, #0
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d028      	beq.n	8006eae <HAL_UART_RxCpltCallback+0x82>
			rc.setRC(SBUS_getChannel(2),	/* roll */
 8006e5c:	2002      	movs	r0, #2
 8006e5e:	f7fd fc35 	bl	80046cc <SBUS_getChannel>
 8006e62:	4603      	mov	r3, r0
 8006e64:	461d      	mov	r5, r3
 8006e66:	2003      	movs	r0, #3
 8006e68:	f7fd fc30 	bl	80046cc <SBUS_getChannel>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	461e      	mov	r6, r3
 8006e70:	2003      	movs	r0, #3
 8006e72:	f7fd fc2b 	bl	80046cc <SBUS_getChannel>
 8006e76:	4603      	mov	r3, r0
 8006e78:	4698      	mov	r8, r3
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	f7fd fc26 	bl	80046cc <SBUS_getChannel>
 8006e80:	4603      	mov	r3, r0
 8006e82:	461c      	mov	r4, r3
 8006e84:	200b      	movs	r0, #11
 8006e86:	f7fd fc21 	bl	80046cc <SBUS_getChannel>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	2300      	movs	r3, #0
 8006e90:	9305      	str	r3, [sp, #20]
 8006e92:	2300      	movs	r3, #0
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	2300      	movs	r3, #0
 8006e98:	9303      	str	r3, [sp, #12]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9302      	str	r3, [sp, #8]
 8006e9e:	9201      	str	r2, [sp, #4]
 8006ea0:	9400      	str	r4, [sp, #0]
 8006ea2:	4643      	mov	r3, r8
 8006ea4:	4632      	mov	r2, r6
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	482d      	ldr	r0, [pc, #180]	; (8006f60 <HAL_UART_RxCpltCallback+0x134>)
 8006eaa:	f7fd ffb7 	bl	8004e1c <_ZN2FC2RC5setRCEttttttttt>
		}
	}
#endif

#ifdef USE_GPS
	if(huart->Instance == UART8){
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a2c      	ldr	r2, [pc, #176]	; (8006f64 <HAL_UART_RxCpltCallback+0x138>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d149      	bne.n	8006f4c <HAL_UART_RxCpltCallback+0x120>
		if(TM_GPS_Update() == TM_GPS_Result_NewData && gpsUart.gpsData.Fix != 0 /* gps must fixed */){
 8006eb8:	f7fb fe20 	bl	8002afc <TM_GPS_Update>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d105      	bne.n	8006ece <HAL_UART_RxCpltCallback+0xa2>
 8006ec2:	4b29      	ldr	r3, [pc, #164]	; (8006f68 <HAL_UART_RxCpltCallback+0x13c>)
 8006ec4:	7d5b      	ldrb	r3, [r3, #21]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <HAL_UART_RxCpltCallback+0xa2>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <HAL_UART_RxCpltCallback+0xa4>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d03b      	beq.n	8006f4c <HAL_UART_RxCpltCallback+0x120>
			sensorGPS.setGPS(gpsUart.gpsData.Latitude, gpsUart.gpsData.Longitude, gpsUart.gpsData.Altitude,
 8006ed4:	4b24      	ldr	r3, [pc, #144]	; (8006f68 <HAL_UART_RxCpltCallback+0x13c>)
 8006ed6:	ed93 8b00 	vldr	d8, [r3]
 8006eda:	4b23      	ldr	r3, [pc, #140]	; (8006f68 <HAL_UART_RxCpltCallback+0x13c>)
 8006edc:	ed93 9b02 	vldr	d9, [r3, #8]
 8006ee0:	4b21      	ldr	r3, [pc, #132]	; (8006f68 <HAL_UART_RxCpltCallback+0x13c>)
 8006ee2:	ed93 aa04 	vldr	s20, [r3, #16]
 8006ee6:	4b20      	ldr	r3, [pc, #128]	; (8006f68 <HAL_UART_RxCpltCallback+0x13c>)
 8006ee8:	edd3 7a08 	vldr	s15, [r3, #32]
 8006eec:	2001      	movs	r0, #1
 8006eee:	eeb0 0a67 	vmov.f32	s0, s15
 8006ef2:	f7fb fe37 	bl	8002b64 <TM_GPS_ConvertSpeed>
 8006ef6:	eeb0 6a40 	vmov.f32	s12, s0
 8006efa:	4b1b      	ldr	r3, [pc, #108]	; (8006f68 <HAL_UART_RxCpltCallback+0x13c>)
 8006efc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006f00:	4b19      	ldr	r3, [pc, #100]	; (8006f68 <HAL_UART_RxCpltCallback+0x13c>)
 8006f02:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006f06:	4b18      	ldr	r3, [pc, #96]	; (8006f68 <HAL_UART_RxCpltCallback+0x13c>)
 8006f08:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8006f0c:	4b16      	ldr	r3, [pc, #88]	; (8006f68 <HAL_UART_RxCpltCallback+0x13c>)
 8006f0e:	7d19      	ldrb	r1, [r3, #20]
 8006f10:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <HAL_UART_RxCpltCallback+0x13c>)
 8006f12:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8006f16:	f04f 0300 	mov.w	r3, #0
 8006f1a:	f04f 0400 	mov.w	r4, #0
 8006f1e:	e9cd 3400 	strd	r3, r4, [sp]
 8006f22:	eeb0 4a66 	vmov.f32	s8, s13
 8006f26:	eef0 3a47 	vmov.f32	s7, s14
 8006f2a:	eeb0 3a67 	vmov.f32	s6, s15
 8006f2e:	eef0 2a46 	vmov.f32	s5, s12
 8006f32:	eeb0 2a4a 	vmov.f32	s4, s20
 8006f36:	eeb0 1a49 	vmov.f32	s2, s18
 8006f3a:	eef0 1a69 	vmov.f32	s3, s19
 8006f3e:	eeb0 0a48 	vmov.f32	s0, s16
 8006f42:	eef0 0a68 	vmov.f32	s1, s17
 8006f46:	4809      	ldr	r0, [pc, #36]	; (8006f6c <HAL_UART_RxCpltCallback+0x140>)
 8006f48:	f7fd fea6 	bl	8004c98 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>
#endif

	if(huart->Instance == USART2){
		// telemetry
	}
}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	ecbd 8b06 	vpop	{d8-d10}
 8006f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000548 	.word	0x20000548
 8006f60:	20000978 	.word	0x20000978
 8006f64:	40007c00 	.word	0x40007c00
 8006f68:	200005e0 	.word	0x200005e0
 8006f6c:	20000930 	.word	0x20000930

08006f70 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	Lidar1D_CaptureCallback(htim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7fa faa1 	bl	80014c0 <Lidar1D_CaptureCallback>
}
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>:
                _data[i][j] = Type{};
            }
        }
    }
#else
    Matrix() = default;
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	461a      	mov	r2, r3
 8006f92:	2300      	movs	r3, #0
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	6053      	str	r3, [r2, #4]
 8006f98:	6093      	str	r3, [r2, #8]
 8006f9a:	60d3      	str	r3, [r2, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <_ZN6matrix6VectorIfLj4EEC1Ev>:
class Vector : public Matrix<Type, M, 1>
{
public:
    typedef Matrix<Type, M, 1> MatrixM1;

    Vector() = default;
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff ffe6 	bl	8006f86 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <_ZN6matrix10QuaternionIfEC1Effff>:
     * @param a set quaternion value 0
     * @param b set quaternion value 1
     * @param c set quaternion value 2
     * @param d set quaternion value 3
     */
    Quaternion(Type a, Type b, Type c, Type d)
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6178      	str	r0, [r7, #20]
 8006fcc:	ed87 0a04 	vstr	s0, [r7, #16]
 8006fd0:	edc7 0a03 	vstr	s1, [r7, #12]
 8006fd4:	ed87 1a02 	vstr	s2, [r7, #8]
 8006fd8:	edc7 1a01 	vstr	s3, [r7, #4]
    {
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff ffe3 	bl	8006faa <_ZN6matrix6VectorIfLj4EEC1Ev>
        Quaternion &q = *this;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	61fb      	str	r3, [r7, #28]
        q(0) = a;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	2100      	movs	r1, #0
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fa9d 	bl	800752c <_ZN6matrix6VectorIfLj4EEclEj>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	6013      	str	r3, [r2, #0]
        q(1) = b;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 fa95 	bl	800752c <_ZN6matrix6VectorIfLj4EEclEj>
 8007002:	4602      	mov	r2, r0
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6013      	str	r3, [r2, #0]
        q(2) = c;
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	2102      	movs	r1, #2
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fa8d 	bl	800752c <_ZN6matrix6VectorIfLj4EEclEj>
 8007012:	4602      	mov	r2, r0
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	6013      	str	r3, [r2, #0]
        q(3) = d;
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	2103      	movs	r1, #3
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fa85 	bl	800752c <_ZN6matrix6VectorIfLj4EEclEj>
 8007022:	4602      	mov	r2, r0
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6013      	str	r3, [r2, #0]
    }
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	4618      	mov	r0, r3
 800702c:	3720      	adds	r7, #32
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <_ZNK6matrix10QuaternionIfE8inversedEv>:
    /**
     * Invert quaternion
     *
     * @return inverted quaternion
     */
    Quaternion inversed() const
 8007032:	b580      	push	{r7, lr}
 8007034:	ed2d 8b04 	vpush	{d8-d9}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
    {
        const Quaternion &q = *this;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	60fb      	str	r3, [r7, #12]
        Type normSq = q.dot(q);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	4611      	mov	r1, r2
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fa8e 	bl	800756c <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE>
 8007050:	ed87 0a02 	vstr	s0, [r7, #8]
        return Quaternion(
                   q(0)/normSq,
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f000 fabb 	bl	80075d4 <_ZNK6matrix6VectorIfLj4EEclEj>
 800705e:	eeb0 7a40 	vmov.f32	s14, s0
                   -q(1)/normSq,
                   -q(2)/normSq,
                   -q(3)/normSq);
 8007062:	edd7 7a02 	vldr	s15, [r7, #8]
 8007066:	ee87 8a27 	vdiv.f32	s16, s14, s15
                   -q(1)/normSq,
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2101      	movs	r1, #1
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fab0 	bl	80075d4 <_ZNK6matrix6VectorIfLj4EEclEj>
 8007074:	eef0 7a40 	vmov.f32	s15, s0
                   -q(3)/normSq);
 8007078:	eeb1 7a67 	vneg.f32	s14, s15
 800707c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007080:	eec7 8a27 	vdiv.f32	s17, s14, s15
                   -q(2)/normSq,
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2102      	movs	r1, #2
 8007088:	4618      	mov	r0, r3
 800708a:	f000 faa3 	bl	80075d4 <_ZNK6matrix6VectorIfLj4EEclEj>
 800708e:	eef0 7a40 	vmov.f32	s15, s0
                   -q(3)/normSq);
 8007092:	eeb1 7a67 	vneg.f32	s14, s15
 8007096:	edd7 7a02 	vldr	s15, [r7, #8]
 800709a:	ee87 9a27 	vdiv.f32	s18, s14, s15
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2103      	movs	r1, #3
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fa96 	bl	80075d4 <_ZNK6matrix6VectorIfLj4EEclEj>
 80070a8:	eef0 7a40 	vmov.f32	s15, s0
 80070ac:	eeb1 7a67 	vneg.f32	s14, s15
 80070b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80070b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80070b8:	eef0 1a66 	vmov.f32	s3, s13
 80070bc:	eeb0 1a49 	vmov.f32	s2, s18
 80070c0:	eef0 0a68 	vmov.f32	s1, s17
 80070c4:	eeb0 0a48 	vmov.f32	s0, s16
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff ff7b 	bl	8006fc4 <_ZN6matrix10QuaternionIfEC1Effff>
    }
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	ecbd 8b04 	vpop	{d8-d9}
 80070d8:	bd80      	pop	{r7, pc}

080070da <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>:
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4618      	mov	r0, r3
 80070e6:	2324      	movs	r3, #36	; 0x24
 80070e8:	461a      	mov	r2, r3
 80070ea:	2100      	movs	r1, #0
 80070ec:	f013 f8bb 	bl	801a266 <memset>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>:

template <typename Type, size_t  M>
class SquareMatrix : public Matrix<Type, M, M>
{
public:
    SquareMatrix() = default;
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff ffe8 	bl	80070da <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>:
     * Instance is initialized from quaternion representing
     * coordinate transformation from frame 2 to frame 1.
     *
     * @param q quaternion to set dcm to
     */
    Dcm(const Quaternion<Type> &q)
 8007114:	b580      	push	{r7, lr}
 8007116:	ed2d 8b02 	vpush	{d8}
 800711a:	b092      	sub	sp, #72	; 0x48
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
    {
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff ffe8 	bl	80070fa <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>
        Dcm &dcm = *this;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	647b      	str	r3, [r7, #68]	; 0x44
        const Type a = q(0);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2100      	movs	r1, #0
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fa4e 	bl	80075d4 <_ZNK6matrix6VectorIfLj4EEclEj>
 8007138:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        const Type b = q(1);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2101      	movs	r1, #1
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fa47 	bl	80075d4 <_ZNK6matrix6VectorIfLj4EEclEj>
 8007146:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        const Type c = q(2);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2102      	movs	r1, #2
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fa40 	bl	80075d4 <_ZNK6matrix6VectorIfLj4EEclEj>
 8007154:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
        const Type d = q(3);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2103      	movs	r1, #3
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fa39 	bl	80075d4 <_ZNK6matrix6VectorIfLj4EEclEj>
 8007162:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
        const Type aa = a * a;
 8007166:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800716a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800716e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007172:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        const Type ab = a * b;
 8007176:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800717a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800717e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007182:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        const Type ac = a * c;
 8007186:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800718a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        const Type ad = a * d;
 8007196:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800719a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800719e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const Type bb = b * b;
 80071a6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80071aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80071ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b2:	edc7 7a08 	vstr	s15, [r7, #32]
        const Type bc = b * c;
 80071b6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80071ba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c2:	edc7 7a07 	vstr	s15, [r7, #28]
        const Type bd = b * d;
 80071c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80071ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80071ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d2:	edc7 7a06 	vstr	s15, [r7, #24]
        const Type cc = c * c;
 80071d6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80071da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80071de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e2:	edc7 7a05 	vstr	s15, [r7, #20]
        const Type cd = c * d;
 80071e6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80071ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a04 	vstr	s15, [r7, #16]
        const Type dd = d * d;
 80071f6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80071fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80071fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007202:	edc7 7a03 	vstr	s15, [r7, #12]
        dcm(0, 0) = aa + bb - cc - dd;
 8007206:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800720a:	edd7 7a08 	vldr	s15, [r7, #32]
 800720e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007212:	edd7 7a05 	vldr	s15, [r7, #20]
 8007216:	ee37 8a67 	vsub.f32	s16, s14, s15
 800721a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721c:	2200      	movs	r2, #0
 800721e:	2100      	movs	r1, #0
 8007220:	4618      	mov	r0, r3
 8007222:	f000 f9f9 	bl	8007618 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8007226:	4603      	mov	r3, r0
 8007228:	edd7 7a03 	vldr	s15, [r7, #12]
 800722c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007230:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 1) = Type(2) * (bc - ad);
 8007234:	ed97 7a07 	vldr	s14, [r7, #28]
 8007238:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800723c:	ee37 8a67 	vsub.f32	s16, s14, s15
 8007240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007242:	2201      	movs	r2, #1
 8007244:	2100      	movs	r1, #0
 8007246:	4618      	mov	r0, r3
 8007248:	f000 f9e6 	bl	8007618 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800724c:	4603      	mov	r3, r0
 800724e:	ee78 7a08 	vadd.f32	s15, s16, s16
 8007252:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 2) = Type(2) * (ac + bd);
 8007256:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800725a:	edd7 7a06 	vldr	s15, [r7, #24]
 800725e:	ee37 8a27 	vadd.f32	s16, s14, s15
 8007262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007264:	2202      	movs	r2, #2
 8007266:	2100      	movs	r1, #0
 8007268:	4618      	mov	r0, r3
 800726a:	f000 f9d5 	bl	8007618 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800726e:	4603      	mov	r3, r0
 8007270:	ee78 7a08 	vadd.f32	s15, s16, s16
 8007274:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 0) = Type(2) * (bc + ad);
 8007278:	ed97 7a07 	vldr	s14, [r7, #28]
 800727c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007280:	ee37 8a27 	vadd.f32	s16, s14, s15
 8007284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007286:	2200      	movs	r2, #0
 8007288:	2101      	movs	r1, #1
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f9c4 	bl	8007618 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8007290:	4603      	mov	r3, r0
 8007292:	ee78 7a08 	vadd.f32	s15, s16, s16
 8007296:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 1) = aa - bb + cc - dd;
 800729a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800729e:	edd7 7a08 	vldr	s15, [r7, #32]
 80072a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80072aa:	ee37 8a27 	vadd.f32	s16, s14, s15
 80072ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072b0:	2201      	movs	r2, #1
 80072b2:	2101      	movs	r1, #1
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 f9af 	bl	8007618 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 80072ba:	4603      	mov	r3, r0
 80072bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80072c0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80072c4:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 2) = Type(2) * (cd - ab);
 80072c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80072cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80072d0:	ee37 8a67 	vsub.f32	s16, s14, s15
 80072d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d6:	2202      	movs	r2, #2
 80072d8:	2101      	movs	r1, #1
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 f99c 	bl	8007618 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 80072e0:	4603      	mov	r3, r0
 80072e2:	ee78 7a08 	vadd.f32	s15, s16, s16
 80072e6:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 0) = Type(2) * (bd - ac);
 80072ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80072ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80072f2:	ee37 8a67 	vsub.f32	s16, s14, s15
 80072f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f8:	2200      	movs	r2, #0
 80072fa:	2102      	movs	r1, #2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f98b 	bl	8007618 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8007302:	4603      	mov	r3, r0
 8007304:	ee78 7a08 	vadd.f32	s15, s16, s16
 8007308:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 1) = Type(2) * (ab + cd);
 800730c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007310:	edd7 7a04 	vldr	s15, [r7, #16]
 8007314:	ee37 8a27 	vadd.f32	s16, s14, s15
 8007318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800731a:	2201      	movs	r2, #1
 800731c:	2102      	movs	r1, #2
 800731e:	4618      	mov	r0, r3
 8007320:	f000 f97a 	bl	8007618 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8007324:	4603      	mov	r3, r0
 8007326:	ee78 7a08 	vadd.f32	s15, s16, s16
 800732a:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 2) = aa - bb - cc + dd;
 800732e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007332:	edd7 7a08 	vldr	s15, [r7, #32]
 8007336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800733a:	edd7 7a05 	vldr	s15, [r7, #20]
 800733e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8007342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007344:	2202      	movs	r2, #2
 8007346:	2102      	movs	r1, #2
 8007348:	4618      	mov	r0, r3
 800734a:	f000 f965 	bl	8007618 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800734e:	4603      	mov	r3, r0
 8007350:	edd7 7a03 	vldr	s15, [r7, #12]
 8007354:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007358:	edc3 7a00 	vstr	s15, [r3]
    }
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4618      	mov	r0, r3
 8007360:	3748      	adds	r7, #72	; 0x48
 8007362:	46bd      	mov	sp, r7
 8007364:	ecbd 8b02 	vpop	{d8}
 8007368:	bd80      	pop	{r7, pc}

0800736a <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>:
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	461a      	mov	r2, r3
 8007376:	2300      	movs	r3, #0
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	6053      	str	r3, [r2, #4]
 800737c:	6093      	str	r3, [r2, #8]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <_ZN6matrix6VectorIfLj3EEC1Ev>:
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff ffe7 	bl	800736a <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <_ZN6matrix7Vector3IfEC1Efff>:
    explicit Vector3(const Type data_[3]) :
        Vector<Type, 3>(data_)
    {
    }

    Vector3(Type x, Type y, Type z) {
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b086      	sub	sp, #24
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	60f8      	str	r0, [r7, #12]
 80073ae:	ed87 0a02 	vstr	s0, [r7, #8]
 80073b2:	edc7 0a01 	vstr	s1, [r7, #4]
 80073b6:	ed87 1a00 	vstr	s2, [r7]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff ffe5 	bl	800738c <_ZN6matrix6VectorIfLj3EEC1Ev>
        Vector3 &v(*this);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	617b      	str	r3, [r7, #20]
        v(0) = x;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 f88e 	bl	80074ec <_ZN6matrix6VectorIfLj3EEclEj>
 80073d0:	4602      	mov	r2, r0
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	6013      	str	r3, [r2, #0]
        v(1) = y;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2101      	movs	r1, #1
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 f886 	bl	80074ec <_ZN6matrix6VectorIfLj3EEclEj>
 80073e0:	4602      	mov	r2, r0
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6013      	str	r3, [r2, #0]
        v(2) = z;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2102      	movs	r1, #2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 f87e 	bl	80074ec <_ZN6matrix6VectorIfLj3EEclEj>
 80073f0:	4602      	mov	r2, r0
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	6013      	str	r3, [r2, #0]
    }
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>:
    // this might use a lot of programming memory
    // since it instantiates a class for every
    // required mult pair, but it provides
    // compile time size_t checking
    template<size_t P>
    Matrix<Type, M, P> operator*(const Matrix<Type, N, P> &other) const
 8007400:	b580      	push	{r7, lr}
 8007402:	ed2d 8b02 	vpush	{d8}
 8007406:	b088      	sub	sp, #32
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
    {
        const Matrix<Type, M, N> &self = *this;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	613b      	str	r3, [r7, #16]
        Matrix<Type, M, P> res;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	461a      	mov	r2, r3
 8007418:	2300      	movs	r3, #0
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	6053      	str	r3, [r2, #4]
 800741e:	6093      	str	r3, [r2, #8]
        res.setZero();
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f927 	bl	8007674 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>

        for (size_t i = 0; i < M; i++) {
 8007426:	2300      	movs	r3, #0
 8007428:	61fb      	str	r3, [r7, #28]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	2b02      	cmp	r3, #2
 800742e:	d831      	bhi.n	8007494 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x94>
            for (size_t k = 0; k < P; k++) {
 8007430:	2300      	movs	r3, #0
 8007432:	61bb      	str	r3, [r7, #24]
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d128      	bne.n	800748c <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x8c>
                for (size_t j = 0; j < N; j++) {
 800743a:	2300      	movs	r3, #0
 800743c:	617b      	str	r3, [r7, #20]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d81f      	bhi.n	8007484 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x84>
                    res(i, k) += self(i, j) * other(j, k);
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	69f9      	ldr	r1, [r7, #28]
 8007448:	6938      	ldr	r0, [r7, #16]
 800744a:	f000 f94b 	bl	80076e4 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>
 800744e:	eeb0 8a40 	vmov.f32	s16, s0
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	6979      	ldr	r1, [r7, #20]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f976 	bl	8007748 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>
 800745c:	eef0 7a40 	vmov.f32	s15, s0
 8007460:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	69f9      	ldr	r1, [r7, #28]
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 f911 	bl	8007690 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 800746e:	4603      	mov	r3, r0
 8007470:	edd3 7a00 	vldr	s15, [r3]
 8007474:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007478:	edc3 7a00 	vstr	s15, [r3]
                for (size_t j = 0; j < N; j++) {
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	3301      	adds	r3, #1
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	e7dc      	b.n	800743e <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x3e>
            for (size_t k = 0; k < P; k++) {
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	3301      	adds	r3, #1
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	e7d3      	b.n	8007434 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x34>
        for (size_t i = 0; i < M; i++) {
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	3301      	adds	r3, #1
 8007490:	61fb      	str	r3, [r7, #28]
 8007492:	e7ca      	b.n	800742a <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x2a>
                }
            }
        }

        return res;
 8007494:	bf00      	nop
    }
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	3720      	adds	r7, #32
 800749a:	46bd      	mov	sp, r7
 800749c:	ecbd 8b02 	vpop	{d8}
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector3(const Matrix31 & other) :
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
        Vector<Type, 3>(other)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 f977 	bl	80077a4 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>
    }
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>:
    Matrix(const Matrix &other)
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
    {
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	461a      	mov	r2, r3
 80074ce:	2300      	movs	r3, #0
 80074d0:	6013      	str	r3, [r2, #0]
 80074d2:	6053      	str	r3, [r2, #4]
 80074d4:	6093      	str	r3, [r2, #8]
        memcpy(_data, other._data, sizeof(_data));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	220c      	movs	r2, #12
 80074dc:	4618      	mov	r0, r3
 80074de:	f012 feb7 	bl	801a250 <memcpy>
    }
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <_ZN6matrix6VectorIfLj3EEclEj>:

        const MatrixM1 &v = *this;
        return v(i, 0);
    }

    inline Type &operator()(size_t i)
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
    {
        assert(i >= 0);
        assert(i < M);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d905      	bls.n	8007508 <_ZN6matrix6VectorIfLj3EEclEj+0x1c>
 80074fc:	4b08      	ldr	r3, [pc, #32]	; (8007520 <_ZN6matrix6VectorIfLj3EEclEj+0x34>)
 80074fe:	4a09      	ldr	r2, [pc, #36]	; (8007524 <_ZN6matrix6VectorIfLj3EEclEj+0x38>)
 8007500:	2137      	movs	r1, #55	; 0x37
 8007502:	4809      	ldr	r0, [pc, #36]	; (8007528 <_ZN6matrix6VectorIfLj3EEclEj+0x3c>)
 8007504:	f012 fe4a 	bl	801a19c <__assert_func>

        MatrixM1 &v = *this;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800750c:	2200      	movs	r2, #0
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 f8bd 	bl	8007690 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 8007516:	4603      	mov	r3, r0
    }
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	0801e978 	.word	0x0801e978
 8007524:	0801eef4 	.word	0x0801eef4
 8007528:	0801e980 	.word	0x0801e980

0800752c <_ZN6matrix6VectorIfLj4EEclEj>:
    inline Type &operator()(size_t i)
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
        assert(i < M);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d905      	bls.n	8007548 <_ZN6matrix6VectorIfLj4EEclEj+0x1c>
 800753c:	4b08      	ldr	r3, [pc, #32]	; (8007560 <_ZN6matrix6VectorIfLj4EEclEj+0x34>)
 800753e:	4a09      	ldr	r2, [pc, #36]	; (8007564 <_ZN6matrix6VectorIfLj4EEclEj+0x38>)
 8007540:	2137      	movs	r1, #55	; 0x37
 8007542:	4809      	ldr	r0, [pc, #36]	; (8007568 <_ZN6matrix6VectorIfLj4EEclEj+0x3c>)
 8007544:	f012 fe2a 	bl	801a19c <__assert_func>
        MatrixM1 &v = *this;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800754c:	2200      	movs	r2, #0
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f937 	bl	80077c4 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>
 8007556:	4603      	mov	r3, r0
    }
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	0801e978 	.word	0x0801e978
 8007564:	0801ea90 	.word	0x0801ea90
 8007568:	0801e980 	.word	0x0801e980

0800756c <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE>:

    Type dot(const MatrixM1 & b) const {
 800756c:	b580      	push	{r7, lr}
 800756e:	ed2d 8b02 	vpush	{d8}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
        const Vector &a(*this);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60fb      	str	r3, [r7, #12]
        Type r(0);
 800757e:	f04f 0300 	mov.w	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
        for (size_t i = 0; i<M; i++) {
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	2b03      	cmp	r3, #3
 800758c:	d818      	bhi.n	80075c0 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE+0x54>
            r += a(i)*b(i,0);
 800758e:	6939      	ldr	r1, [r7, #16]
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 f81f 	bl	80075d4 <_ZNK6matrix6VectorIfLj4EEclEj>
 8007596:	eeb0 8a40 	vmov.f32	s16, s0
 800759a:	2200      	movs	r2, #0
 800759c:	6939      	ldr	r1, [r7, #16]
 800759e:	6838      	ldr	r0, [r7, #0]
 80075a0:	f000 f93a 	bl	8007818 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 80075a4:	eef0 7a40 	vmov.f32	s15, s0
 80075a8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80075ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80075b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075b4:	edc7 7a05 	vstr	s15, [r7, #20]
        for (size_t i = 0; i<M; i++) {
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3301      	adds	r3, #1
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	e7e3      	b.n	8007588 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE+0x1c>
        }
        return r;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	ee07 3a90 	vmov	s15, r3
    }
 80075c6:	eeb0 0a67 	vmov.f32	s0, s15
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	ecbd 8b02 	vpop	{d8}
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <_ZNK6matrix6VectorIfLj4EEclEj>:
    inline Type operator()(size_t i) const
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
        assert(i < M);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d905      	bls.n	80075f0 <_ZNK6matrix6VectorIfLj4EEclEj+0x1c>
 80075e4:	4b09      	ldr	r3, [pc, #36]	; (800760c <_ZNK6matrix6VectorIfLj4EEclEj+0x38>)
 80075e6:	4a0a      	ldr	r2, [pc, #40]	; (8007610 <_ZNK6matrix6VectorIfLj4EEclEj+0x3c>)
 80075e8:	212e      	movs	r1, #46	; 0x2e
 80075ea:	480a      	ldr	r0, [pc, #40]	; (8007614 <_ZNK6matrix6VectorIfLj4EEclEj+0x40>)
 80075ec:	f012 fdd6 	bl	801a19c <__assert_func>
        const MatrixM1 &v = *this;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 80075f4:	2200      	movs	r2, #0
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 f90d 	bl	8007818 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 80075fe:	eef0 7a40 	vmov.f32	s15, s0
    }
 8007602:	eeb0 0a67 	vmov.f32	s0, s15
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	0801e978 	.word	0x0801e978
 8007610:	0801ec2c 	.word	0x0801ec2c
 8007614:	0801e980 	.word	0x0801e980

08007618 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b02      	cmp	r3, #2
 8007628:	d905      	bls.n	8007636 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800762a:	4b0e      	ldr	r3, [pc, #56]	; (8007664 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x4c>)
 800762c:	4a0e      	ldr	r2, [pc, #56]	; (8007668 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 800762e:	216e      	movs	r1, #110	; 0x6e
 8007630:	480e      	ldr	r0, [pc, #56]	; (800766c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 8007632:	f012 fdb3 	bl	801a19c <__assert_func>
        assert(j < N);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b02      	cmp	r3, #2
 800763a:	d905      	bls.n	8007648 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 800763c:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800763e:	4a0a      	ldr	r2, [pc, #40]	; (8007668 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 8007640:	2170      	movs	r1, #112	; 0x70
 8007642:	480a      	ldr	r0, [pc, #40]	; (800766c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 8007644:	f012 fdaa 	bl	801a19c <__assert_func>
        return _data[i][j];
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	4613      	mov	r3, r2
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	4413      	add	r3, r2
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4413      	add	r3, r2
    }
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	0801e978 	.word	0x0801e978
 8007668:	0801eca4 	.word	0x0801eca4
 800766c:	0801e9b0 	.word	0x0801e9b0
 8007670:	0801e9e0 	.word	0x0801e9e0

08007674 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>:
    void setCol(size_t j, Type val)
    {
        slice<M,1>(0,j) = val;
    }

    void setZero()
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
    {
        memset(_data, 0, sizeof(_data));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	220c      	movs	r2, #12
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f012 fdef 	bl	801a266 <memset>
    }
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d905      	bls.n	80076ae <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 80076a2:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x44>)
 80076a4:	4a0c      	ldr	r2, [pc, #48]	; (80076d8 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 80076a6:	216e      	movs	r1, #110	; 0x6e
 80076a8:	480c      	ldr	r0, [pc, #48]	; (80076dc <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 80076aa:	f012 fd77 	bl	801a19c <__assert_func>
        assert(j < N);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d005      	beq.n	80076c0 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 80076b6:	4a08      	ldr	r2, [pc, #32]	; (80076d8 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 80076b8:	2170      	movs	r1, #112	; 0x70
 80076ba:	4808      	ldr	r0, [pc, #32]	; (80076dc <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 80076bc:	f012 fd6e 	bl	801a19c <__assert_func>
        return _data[i][j];
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4413      	add	r3, r2
    }
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	0801e978 	.word	0x0801e978
 80076d8:	0801ee64 	.word	0x0801ee64
 80076dc:	0801e9b0 	.word	0x0801e9b0
 80076e0:	0801e9e0 	.word	0x0801e9e0

080076e4 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
        assert(i < M);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d905      	bls.n	8007702 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 80076f6:	4b10      	ldr	r3, [pc, #64]	; (8007738 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 80076f8:	4a10      	ldr	r2, [pc, #64]	; (800773c <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 80076fa:	2164      	movs	r1, #100	; 0x64
 80076fc:	4810      	ldr	r0, [pc, #64]	; (8007740 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 80076fe:	f012 fd4d 	bl	801a19c <__assert_func>
        assert(j < N);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d905      	bls.n	8007714 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 8007708:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x60>)
 800770a:	4a0c      	ldr	r2, [pc, #48]	; (800773c <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800770c:	2166      	movs	r1, #102	; 0x66
 800770e:	480c      	ldr	r0, [pc, #48]	; (8007740 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 8007710:	f012 fd44 	bl	801a19c <__assert_func>
        return _data[i][j];
 8007714:	68f9      	ldr	r1, [r7, #12]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	4613      	mov	r3, r2
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	4413      	add	r3, r2
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	4413      	add	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	440b      	add	r3, r1
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	ee07 3a90 	vmov	s15, r3
    }
 800772c:	eeb0 0a67 	vmov.f32	s0, s15
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	0801e978 	.word	0x0801e978
 800773c:	0801ed34 	.word	0x0801ed34
 8007740:	0801e9b0 	.word	0x0801e9b0
 8007744:	0801e9e0 	.word	0x0801e9e0

08007748 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b02      	cmp	r3, #2
 8007758:	d905      	bls.n	8007766 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800775a:	4b0e      	ldr	r3, [pc, #56]	; (8007794 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800775c:	4a0e      	ldr	r2, [pc, #56]	; (8007798 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800775e:	2164      	movs	r1, #100	; 0x64
 8007760:	480e      	ldr	r0, [pc, #56]	; (800779c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 8007762:	f012 fd1b 	bl	801a19c <__assert_func>
        assert(j < N);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 800776c:	4b0c      	ldr	r3, [pc, #48]	; (80077a0 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x58>)
 800776e:	4a0a      	ldr	r2, [pc, #40]	; (8007798 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 8007770:	2166      	movs	r1, #102	; 0x66
 8007772:	480a      	ldr	r0, [pc, #40]	; (800779c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 8007774:	f012 fd12 	bl	801a19c <__assert_func>
        return _data[i][j];
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	68b9      	ldr	r1, [r7, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	440b      	add	r3, r1
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	ee07 3a90 	vmov	s15, r3
    }
 800778a:	eeb0 0a67 	vmov.f32	s0, s15
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	0801e978 	.word	0x0801e978
 8007798:	0801edcc 	.word	0x0801edcc
 800779c:	0801e9b0 	.word	0x0801e9b0
 80077a0:	0801e9e0 	.word	0x0801e9e0

080077a4 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector(const MatrixM1 & other) :
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
        MatrixM1(other)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff fe84 	bl	80074c0 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>
    }
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
	...

080077c4 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
        assert(i < M);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d905      	bls.n	80077e2 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 80077d6:	4b0c      	ldr	r3, [pc, #48]	; (8007808 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x44>)
 80077d8:	4a0c      	ldr	r2, [pc, #48]	; (800780c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 80077da:	216e      	movs	r1, #110	; 0x6e
 80077dc:	480c      	ldr	r0, [pc, #48]	; (8007810 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 80077de:	f012 fcdd 	bl	801a19c <__assert_func>
        assert(j < N);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 80077e8:	4b0a      	ldr	r3, [pc, #40]	; (8007814 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 80077ea:	4a08      	ldr	r2, [pc, #32]	; (800780c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 80077ec:	2170      	movs	r1, #112	; 0x70
 80077ee:	4808      	ldr	r0, [pc, #32]	; (8007810 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 80077f0:	f012 fcd4 	bl	801a19c <__assert_func>
        return _data[i][j];
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4413      	add	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	4413      	add	r3, r2
    }
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	0801e978 	.word	0x0801e978
 800780c:	0801eb04 	.word	0x0801eb04
 8007810:	0801e9b0 	.word	0x0801e9b0
 8007814:	0801e9e0 	.word	0x0801e9e0

08007818 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b03      	cmp	r3, #3
 8007828:	d905      	bls.n	8007836 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800782a:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800782c:	4a0e      	ldr	r2, [pc, #56]	; (8007868 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800782e:	2164      	movs	r1, #100	; 0x64
 8007830:	480e      	ldr	r0, [pc, #56]	; (800786c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 8007832:	f012 fcb3 	bl	801a19c <__assert_func>
        assert(j < N);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 800783c:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x58>)
 800783e:	4a0a      	ldr	r2, [pc, #40]	; (8007868 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 8007840:	2166      	movs	r1, #102	; 0x66
 8007842:	480a      	ldr	r0, [pc, #40]	; (800786c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 8007844:	f012 fcaa 	bl	801a19c <__assert_func>
        return _data[i][j];
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	440b      	add	r3, r1
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	ee07 3a90 	vmov	s15, r3
    }
 800785a:	eeb0 0a67 	vmov.f32	s0, s15
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	0801e978 	.word	0x0801e978
 8007868:	0801eb94 	.word	0x0801eb94
 800786c:	0801e9b0 	.word	0x0801e9b0
 8007870:	0801e9e0 	.word	0x0801e9e0

08007874 <_Z41__static_initialization_and_destruction_0ii>:
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af02      	add	r7, sp, #8
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d10f      	bne.n	80078a4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800788a:	4293      	cmp	r3, r2
 800788c:	d10a      	bne.n	80078a4 <_Z41__static_initialization_and_destruction_0ii+0x30>
QueueHandle_t commandQueue = xQueueCreateStatic(CMD_QUEUE_LENGTH,
 800788e:	2300      	movs	r3, #0
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	4b06      	ldr	r3, [pc, #24]	; (80078ac <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8007894:	4a06      	ldr	r2, [pc, #24]	; (80078b0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8007896:	2104      	movs	r1, #4
 8007898:	2003      	movs	r0, #3
 800789a:	f00e fcf5 	bl	8016288 <xQueueGenericCreateStatic>
 800789e:	4602      	mov	r2, r0
 80078a0:	4b04      	ldr	r3, [pc, #16]	; (80078b4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	bf00      	nop
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	2000085c 	.word	0x2000085c
 80078b0:	200008ac 	.word	0x200008ac
 80078b4:	200008b8 	.word	0x200008b8

080078b8 <_GLOBAL__sub_I_mpu9250>:
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80078c0:	2001      	movs	r0, #1
 80078c2:	f7ff ffd7 	bl	8007874 <_Z41__static_initialization_and_destruction_0ii>
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80078ce:	2300      	movs	r3, #0
 80078d0:	607b      	str	r3, [r7, #4]
 80078d2:	4b10      	ldr	r3, [pc, #64]	; (8007914 <MX_DMA_Init+0x4c>)
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	4a0f      	ldr	r2, [pc, #60]	; (8007914 <MX_DMA_Init+0x4c>)
 80078d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078dc:	6313      	str	r3, [r2, #48]	; 0x30
 80078de:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <MX_DMA_Init+0x4c>)
 80078e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078e6:	607b      	str	r3, [r7, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80078ea:	2300      	movs	r3, #0
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	4b09      	ldr	r3, [pc, #36]	; (8007914 <MX_DMA_Init+0x4c>)
 80078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f2:	4a08      	ldr	r2, [pc, #32]	; (8007914 <MX_DMA_Init+0x4c>)
 80078f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078f8:	6313      	str	r3, [r2, #48]	; 0x30
 80078fa:	4b06      	ldr	r3, [pc, #24]	; (8007914 <MX_DMA_Init+0x4c>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	683b      	ldr	r3, [r7, #0]

}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	40023800 	.word	0x40023800

08007918 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  const uint8_t MPU9250_UPDATE_HZ = 200;
 800791e:	23c8      	movs	r3, #200	; 0xc8
 8007920:	73fb      	strb	r3, [r7, #15]
  const uint8_t BME280_UPDATE_HZ = 50;
 8007922:	2332      	movs	r3, #50	; 0x32
 8007924:	73bb      	strb	r3, [r7, #14]
  const uint8_t IST8310_UPDATE_HZ = 100;
 8007926:	2364      	movs	r3, #100	; 0x64
 8007928:	737b      	strb	r3, [r7, #13]

  const uint32_t MPU9250_TICK = 1000/MPU9250_UPDATE_HZ;
 800792a:	7bfb      	ldrb	r3, [r7, #15]
 800792c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007930:	fb92 f3f3 	sdiv	r3, r2, r3
 8007934:	60bb      	str	r3, [r7, #8]
  const uint32_t BME280_TICK = 1000/BME280_UPDATE_HZ;
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800793c:	fb92 f3f3 	sdiv	r3, r2, r3
 8007940:	607b      	str	r3, [r7, #4]
  const uint32_t IST8310_TICK = 1000/IST8310_UPDATE_HZ;
 8007942:	7b7b      	ldrb	r3, [r7, #13]
 8007944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007948:	fb92 f3f3 	sdiv	r3, r2, r3
 800794c:	603b      	str	r3, [r7, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800794e:	4a1a      	ldr	r2, [pc, #104]	; (80079b8 <MX_FREERTOS_Init+0xa0>)
 8007950:	2100      	movs	r1, #0
 8007952:	481a      	ldr	r0, [pc, #104]	; (80079bc <MX_FREERTOS_Init+0xa4>)
 8007954:	f00d ff76 	bl	8015844 <osThreadNew>
 8007958:	4602      	mov	r2, r0
 800795a:	4b19      	ldr	r3, [pc, #100]	; (80079c0 <MX_FREERTOS_Init+0xa8>)
 800795c:	601a      	str	r2, [r3, #0]

  /* creation of MPU9250_Task */
  MPU9250_TaskHandle = osThreadNew(MPU9250_StartTask, NULL, &MPU9250_Task_attributes);
 800795e:	4a19      	ldr	r2, [pc, #100]	; (80079c4 <MX_FREERTOS_Init+0xac>)
 8007960:	2100      	movs	r1, #0
 8007962:	4819      	ldr	r0, [pc, #100]	; (80079c8 <MX_FREERTOS_Init+0xb0>)
 8007964:	f00d ff6e 	bl	8015844 <osThreadNew>
 8007968:	4602      	mov	r2, r0
 800796a:	4b18      	ldr	r3, [pc, #96]	; (80079cc <MX_FREERTOS_Init+0xb4>)
 800796c:	601a      	str	r2, [r3, #0]

  /* creation of BME280_Task */
  BME280_TaskHandle = osThreadNew(BME280_StartTask, NULL, &BME280_Task_attributes);
 800796e:	4a18      	ldr	r2, [pc, #96]	; (80079d0 <MX_FREERTOS_Init+0xb8>)
 8007970:	2100      	movs	r1, #0
 8007972:	4818      	ldr	r0, [pc, #96]	; (80079d4 <MX_FREERTOS_Init+0xbc>)
 8007974:	f00d ff66 	bl	8015844 <osThreadNew>
 8007978:	4602      	mov	r2, r0
 800797a:	4b17      	ldr	r3, [pc, #92]	; (80079d8 <MX_FREERTOS_Init+0xc0>)
 800797c:	601a      	str	r2, [r3, #0]

  /* creation of IST8310_Task */
  IST8310_TaskHandle = osThreadNew(IST8310_StartTask, NULL, &IST8310_Task_attributes);
 800797e:	4a17      	ldr	r2, [pc, #92]	; (80079dc <MX_FREERTOS_Init+0xc4>)
 8007980:	2100      	movs	r1, #0
 8007982:	4817      	ldr	r0, [pc, #92]	; (80079e0 <MX_FREERTOS_Init+0xc8>)
 8007984:	f00d ff5e 	bl	8015844 <osThreadNew>
 8007988:	4602      	mov	r2, r0
 800798a:	4b16      	ldr	r3, [pc, #88]	; (80079e4 <MX_FREERTOS_Init+0xcc>)
 800798c:	601a      	str	r2, [r3, #0]

  /* creation of SD_Task */
  SD_TaskHandle = osThreadNew(SD_StartTask, NULL, &SD_Task_attributes);
 800798e:	4a16      	ldr	r2, [pc, #88]	; (80079e8 <MX_FREERTOS_Init+0xd0>)
 8007990:	2100      	movs	r1, #0
 8007992:	4816      	ldr	r0, [pc, #88]	; (80079ec <MX_FREERTOS_Init+0xd4>)
 8007994:	f00d ff56 	bl	8015844 <osThreadNew>
 8007998:	4602      	mov	r2, r0
 800799a:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <MX_FREERTOS_Init+0xd8>)
 800799c:	601a      	str	r2, [r3, #0]

  /* creation of AHRS_Task */
  AHRS_TaskHandle = osThreadNew(AHRS_StartTask, NULL, &AHRS_Task_attributes);
 800799e:	4a15      	ldr	r2, [pc, #84]	; (80079f4 <MX_FREERTOS_Init+0xdc>)
 80079a0:	2100      	movs	r1, #0
 80079a2:	4815      	ldr	r0, [pc, #84]	; (80079f8 <MX_FREERTOS_Init+0xe0>)
 80079a4:	f00d ff4e 	bl	8015844 <osThreadNew>
 80079a8:	4602      	mov	r2, r0
 80079aa:	4b14      	ldr	r3, [pc, #80]	; (80079fc <MX_FREERTOS_Init+0xe4>)
 80079ac:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80079ae:	bf00      	nop
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	0801ef68 	.word	0x0801ef68
 80079bc:	08007a01 	.word	0x08007a01
 80079c0:	200052d8 	.word	0x200052d8
 80079c4:	0801ef8c 	.word	0x0801ef8c
 80079c8:	080067e1 	.word	0x080067e1
 80079cc:	200067f8 	.word	0x200067f8
 80079d0:	0801efb0 	.word	0x0801efb0
 80079d4:	080067f5 	.word	0x080067f5
 80079d8:	2000685c 	.word	0x2000685c
 80079dc:	0801efd4 	.word	0x0801efd4
 80079e0:	08006809 	.word	0x08006809
 80079e4:	200052dc 	.word	0x200052dc
 80079e8:	0801eff8 	.word	0x0801eff8
 80079ec:	08006821 	.word	0x08006821
 80079f0:	200062e0 	.word	0x200062e0
 80079f4:	0801f01c 	.word	0x0801f01c
 80079f8:	08006c5d 	.word	0x08006c5d
 80079fc:	200067fc 	.word	0x200067fc

08007a00 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007a08:	2001      	movs	r0, #1
 8007a0a:	f00d ffc1 	bl	8015990 <osDelay>
 8007a0e:	e7fb      	b.n	8007a08 <StartDefaultTask+0x8>

08007a10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08e      	sub	sp, #56	; 0x38
 8007a14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	605a      	str	r2, [r3, #4]
 8007a20:	609a      	str	r2, [r3, #8]
 8007a22:	60da      	str	r2, [r3, #12]
 8007a24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007a26:	2300      	movs	r3, #0
 8007a28:	623b      	str	r3, [r7, #32]
 8007a2a:	4b7a      	ldr	r3, [pc, #488]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	4a79      	ldr	r2, [pc, #484]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a30:	f043 0310 	orr.w	r3, r3, #16
 8007a34:	6313      	str	r3, [r2, #48]	; 0x30
 8007a36:	4b77      	ldr	r3, [pc, #476]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	f003 0310 	and.w	r3, r3, #16
 8007a3e:	623b      	str	r3, [r7, #32]
 8007a40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a42:	2300      	movs	r3, #0
 8007a44:	61fb      	str	r3, [r7, #28]
 8007a46:	4b73      	ldr	r3, [pc, #460]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4a:	4a72      	ldr	r2, [pc, #456]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a4c:	f043 0304 	orr.w	r3, r3, #4
 8007a50:	6313      	str	r3, [r2, #48]	; 0x30
 8007a52:	4b70      	ldr	r3, [pc, #448]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	61fb      	str	r3, [r7, #28]
 8007a5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61bb      	str	r3, [r7, #24]
 8007a62:	4b6c      	ldr	r3, [pc, #432]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	4a6b      	ldr	r2, [pc, #428]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a68:	f043 0320 	orr.w	r3, r3, #32
 8007a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a6e:	4b69      	ldr	r3, [pc, #420]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	61bb      	str	r3, [r7, #24]
 8007a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	4b65      	ldr	r3, [pc, #404]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a82:	4a64      	ldr	r2, [pc, #400]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a88:	6313      	str	r3, [r2, #48]	; 0x30
 8007a8a:	4b62      	ldr	r3, [pc, #392]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a96:	2300      	movs	r3, #0
 8007a98:	613b      	str	r3, [r7, #16]
 8007a9a:	4b5e      	ldr	r3, [pc, #376]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	4a5d      	ldr	r2, [pc, #372]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007aa0:	f043 0301 	orr.w	r3, r3, #1
 8007aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8007aa6:	4b5b      	ldr	r3, [pc, #364]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	613b      	str	r3, [r7, #16]
 8007ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	4b57      	ldr	r3, [pc, #348]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aba:	4a56      	ldr	r2, [pc, #344]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007abc:	f043 0302 	orr.w	r3, r3, #2
 8007ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ac2:	4b54      	ldr	r3, [pc, #336]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60bb      	str	r3, [r7, #8]
 8007ad2:	4b50      	ldr	r3, [pc, #320]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	4a4f      	ldr	r2, [pc, #316]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007adc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ade:	4b4d      	ldr	r3, [pc, #308]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae6:	60bb      	str	r3, [r7, #8]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007aea:	2300      	movs	r3, #0
 8007aec:	607b      	str	r3, [r7, #4]
 8007aee:	4b49      	ldr	r3, [pc, #292]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af2:	4a48      	ldr	r2, [pc, #288]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007af4:	f043 0308 	orr.w	r3, r3, #8
 8007af8:	6313      	str	r3, [r2, #48]	; 0x30
 8007afa:	4b46      	ldr	r3, [pc, #280]	; (8007c14 <MX_GPIO_Init+0x204>)
 8007afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afe:	f003 0308 	and.w	r3, r3, #8
 8007b02:	607b      	str	r3, [r7, #4]
 8007b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WINCH1_Pin|WINCH2_Pin, GPIO_PIN_RESET);
 8007b06:	2200      	movs	r2, #0
 8007b08:	210c      	movs	r1, #12
 8007b0a:	4843      	ldr	r0, [pc, #268]	; (8007c18 <MX_GPIO_Init+0x208>)
 8007b0c:	f002 ff04 	bl	800a918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|External_LEC_contrl_Pin
 8007b10:	2200      	movs	r2, #0
 8007b12:	f24f 011c 	movw	r1, #61468	; 0xf01c
 8007b16:	4841      	ldr	r0, [pc, #260]	; (8007c1c <MX_GPIO_Init+0x20c>)
 8007b18:	f002 fefe 	bl	800a918 <HAL_GPIO_WritePin>
                          |GPIO1_Pin|GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SPI1_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2189      	movs	r1, #137	; 0x89
 8007b20:	483f      	ldr	r0, [pc, #252]	; (8007c20 <MX_GPIO_Init+0x210>)
 8007b22:	f002 fef9 	bl	800a918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO4_Pin|GPIO5_Pin|USB_PowerSwitchOn_Pin|SPI1_RESET_Pin
 8007b26:	2200      	movs	r2, #0
 8007b28:	f246 0143 	movw	r1, #24643	; 0x6043
 8007b2c:	483d      	ldr	r0, [pc, #244]	; (8007c24 <MX_GPIO_Init+0x214>)
 8007b2e:	f002 fef3 	bl	800a918 <HAL_GPIO_WritePin>
                          |SPI1_WAKE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WINCH1_Pin|WINCH2_Pin;
 8007b32:	230c      	movs	r3, #12
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b36:	2301      	movs	r3, #1
 8007b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b46:	4619      	mov	r1, r3
 8007b48:	4833      	ldr	r0, [pc, #204]	; (8007c18 <MX_GPIO_Init+0x208>)
 8007b4a:	f002 fd23 	bl	800a594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8007b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007b54:	4b34      	ldr	r3, [pc, #208]	; (8007c28 <MX_GPIO_Init+0x218>)
 8007b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8007b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b60:	4619      	mov	r1, r3
 8007b62:	4832      	ldr	r0, [pc, #200]	; (8007c2c <MX_GPIO_Init+0x21c>)
 8007b64:	f002 fd16 	bl	800a594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|External_LEC_contrl_Pin
 8007b68:	f24f 031c 	movw	r3, #61468	; 0xf01c
 8007b6c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO1_Pin|GPIO2_Pin|GPIO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b72:	2300      	movs	r3, #0
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b76:	2300      	movs	r3, #0
 8007b78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4826      	ldr	r0, [pc, #152]	; (8007c1c <MX_GPIO_Init+0x20c>)
 8007b82:	f002 fd07 	bl	800a594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|SPI1_CS_Pin|LD2_Pin;
 8007b86:	2389      	movs	r3, #137	; 0x89
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b92:	2300      	movs	r3, #0
 8007b94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4820      	ldr	r0, [pc, #128]	; (8007c20 <MX_GPIO_Init+0x210>)
 8007b9e:	f002 fcf9 	bl	800a594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = GPIO4_Pin|GPIO5_Pin|USB_PowerSwitchOn_Pin|SPI1_RESET_Pin
 8007ba2:	f246 0343 	movw	r3, #24643	; 0x6043
 8007ba6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI1_WAKE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bac:	2300      	movs	r3, #0
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bb8:	4619      	mov	r1, r3
 8007bba:	481a      	ldr	r0, [pc, #104]	; (8007c24 <MX_GPIO_Init+0x214>)
 8007bbc:	f002 fcea 	bl	800a594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|USB_OverCurrent_Pin|SPI1_INT_Pin;
 8007bc0:	f241 0388 	movw	r3, #4232	; 0x1088
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4813      	ldr	r0, [pc, #76]	; (8007c24 <MX_GPIO_Init+0x214>)
 8007bd6:	f002 fcdd 	bl	800a594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAFETY_SWITCH_Pin;
 8007bda:	2380      	movs	r3, #128	; 0x80
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007bde:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <MX_GPIO_Init+0x218>)
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007be2:	2302      	movs	r3, #2
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SAFETY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8007be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bea:	4619      	mov	r1, r3
 8007bec:	4810      	ldr	r0, [pc, #64]	; (8007c30 <MX_GPIO_Init+0x220>)
 8007bee:	f002 fcd1 	bl	800a594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C1_INT_Pin;
 8007bf2:	2320      	movs	r3, #32
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2C1_INT_GPIO_Port, &GPIO_InitStruct);
 8007bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c02:	4619      	mov	r1, r3
 8007c04:	4806      	ldr	r0, [pc, #24]	; (8007c20 <MX_GPIO_Init+0x210>)
 8007c06:	f002 fcc5 	bl	800a594 <HAL_GPIO_Init>

}
 8007c0a:	bf00      	nop
 8007c0c:	3738      	adds	r7, #56	; 0x38
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	40023800 	.word	0x40023800
 8007c18:	40021000 	.word	0x40021000
 8007c1c:	40021400 	.word	0x40021400
 8007c20:	40020400 	.word	0x40020400
 8007c24:	40021800 	.word	0x40021800
 8007c28:	10110000 	.word	0x10110000
 8007c2c:	40020800 	.word	0x40020800
 8007c30:	40020c00 	.word	0x40020c00

08007c34 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8007c38:	4b1b      	ldr	r3, [pc, #108]	; (8007ca8 <MX_I2C1_Init+0x74>)
 8007c3a:	4a1c      	ldr	r2, [pc, #112]	; (8007cac <MX_I2C1_Init+0x78>)
 8007c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007c3e:	4b1a      	ldr	r3, [pc, #104]	; (8007ca8 <MX_I2C1_Init+0x74>)
 8007c40:	4a1b      	ldr	r2, [pc, #108]	; (8007cb0 <MX_I2C1_Init+0x7c>)
 8007c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007c44:	4b18      	ldr	r3, [pc, #96]	; (8007ca8 <MX_I2C1_Init+0x74>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007c4a:	4b17      	ldr	r3, [pc, #92]	; (8007ca8 <MX_I2C1_Init+0x74>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007c50:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <MX_I2C1_Init+0x74>)
 8007c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007c56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007c58:	4b13      	ldr	r3, [pc, #76]	; (8007ca8 <MX_I2C1_Init+0x74>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007c5e:	4b12      	ldr	r3, [pc, #72]	; (8007ca8 <MX_I2C1_Init+0x74>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007c64:	4b10      	ldr	r3, [pc, #64]	; (8007ca8 <MX_I2C1_Init+0x74>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007c6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ca8 <MX_I2C1_Init+0x74>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007c70:	480d      	ldr	r0, [pc, #52]	; (8007ca8 <MX_I2C1_Init+0x74>)
 8007c72:	f002 fe6b 	bl	800a94c <HAL_I2C_Init>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007c7c:	f000 fa4c 	bl	8008118 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007c80:	2100      	movs	r1, #0
 8007c82:	4809      	ldr	r0, [pc, #36]	; (8007ca8 <MX_I2C1_Init+0x74>)
 8007c84:	f005 fd33 	bl	800d6ee <HAL_I2CEx_ConfigAnalogFilter>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8007c8e:	f000 fa43 	bl	8008118 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007c92:	2100      	movs	r1, #0
 8007c94:	4804      	ldr	r0, [pc, #16]	; (8007ca8 <MX_I2C1_Init+0x74>)
 8007c96:	f005 fd66 	bl	800d766 <HAL_I2CEx_ConfigDigitalFilter>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8007ca0:	f000 fa3a 	bl	8008118 <Error_Handler>
  }

}
 8007ca4:	bf00      	nop
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	20006ebc 	.word	0x20006ebc
 8007cac:	40005400 	.word	0x40005400
 8007cb0:	00061a80 	.word	0x00061a80

08007cb4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8007cb8:	4b1b      	ldr	r3, [pc, #108]	; (8007d28 <MX_I2C2_Init+0x74>)
 8007cba:	4a1c      	ldr	r2, [pc, #112]	; (8007d2c <MX_I2C2_Init+0x78>)
 8007cbc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8007cbe:	4b1a      	ldr	r3, [pc, #104]	; (8007d28 <MX_I2C2_Init+0x74>)
 8007cc0:	4a1b      	ldr	r2, [pc, #108]	; (8007d30 <MX_I2C2_Init+0x7c>)
 8007cc2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007cc4:	4b18      	ldr	r3, [pc, #96]	; (8007d28 <MX_I2C2_Init+0x74>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007cca:	4b17      	ldr	r3, [pc, #92]	; (8007d28 <MX_I2C2_Init+0x74>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007cd0:	4b15      	ldr	r3, [pc, #84]	; (8007d28 <MX_I2C2_Init+0x74>)
 8007cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007cd6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007cd8:	4b13      	ldr	r3, [pc, #76]	; (8007d28 <MX_I2C2_Init+0x74>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007cde:	4b12      	ldr	r3, [pc, #72]	; (8007d28 <MX_I2C2_Init+0x74>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007ce4:	4b10      	ldr	r3, [pc, #64]	; (8007d28 <MX_I2C2_Init+0x74>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007cea:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <MX_I2C2_Init+0x74>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007cf0:	480d      	ldr	r0, [pc, #52]	; (8007d28 <MX_I2C2_Init+0x74>)
 8007cf2:	f002 fe2b 	bl	800a94c <HAL_I2C_Init>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8007cfc:	f000 fa0c 	bl	8008118 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007d00:	2100      	movs	r1, #0
 8007d02:	4809      	ldr	r0, [pc, #36]	; (8007d28 <MX_I2C2_Init+0x74>)
 8007d04:	f005 fcf3 	bl	800d6ee <HAL_I2CEx_ConfigAnalogFilter>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8007d0e:	f000 fa03 	bl	8008118 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007d12:	2100      	movs	r1, #0
 8007d14:	4804      	ldr	r0, [pc, #16]	; (8007d28 <MX_I2C2_Init+0x74>)
 8007d16:	f005 fd26 	bl	800d766 <HAL_I2CEx_ConfigDigitalFilter>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8007d20:	f000 f9fa 	bl	8008118 <Error_Handler>
  }

}
 8007d24:	bf00      	nop
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20006f10 	.word	0x20006f10
 8007d2c:	40005800 	.word	0x40005800
 8007d30:	00061a80 	.word	0x00061a80

08007d34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08c      	sub	sp, #48	; 0x30
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d3c:	f107 031c 	add.w	r3, r7, #28
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	605a      	str	r2, [r3, #4]
 8007d46:	609a      	str	r2, [r3, #8]
 8007d48:	60da      	str	r2, [r3, #12]
 8007d4a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a4d      	ldr	r2, [pc, #308]	; (8007e88 <HAL_I2C_MspInit+0x154>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d163      	bne.n	8007e1e <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d56:	2300      	movs	r3, #0
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	4b4c      	ldr	r3, [pc, #304]	; (8007e8c <HAL_I2C_MspInit+0x158>)
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	4a4b      	ldr	r2, [pc, #300]	; (8007e8c <HAL_I2C_MspInit+0x158>)
 8007d60:	f043 0302 	orr.w	r3, r3, #2
 8007d64:	6313      	str	r3, [r2, #48]	; 0x30
 8007d66:	4b49      	ldr	r3, [pc, #292]	; (8007e8c <HAL_I2C_MspInit+0x158>)
 8007d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	61bb      	str	r3, [r7, #24]
 8007d70:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8007d72:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d78:	2312      	movs	r3, #18
 8007d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d80:	2303      	movs	r3, #3
 8007d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007d84:	2304      	movs	r3, #4
 8007d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d88:	f107 031c 	add.w	r3, r7, #28
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4840      	ldr	r0, [pc, #256]	; (8007e90 <HAL_I2C_MspInit+0x15c>)
 8007d90:	f002 fc00 	bl	800a594 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007d94:	2300      	movs	r3, #0
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	4b3c      	ldr	r3, [pc, #240]	; (8007e8c <HAL_I2C_MspInit+0x158>)
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	4a3b      	ldr	r2, [pc, #236]	; (8007e8c <HAL_I2C_MspInit+0x158>)
 8007d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007da2:	6413      	str	r3, [r2, #64]	; 0x40
 8007da4:	4b39      	ldr	r3, [pc, #228]	; (8007e8c <HAL_I2C_MspInit+0x158>)
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dac:	617b      	str	r3, [r7, #20]
 8007dae:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8007db0:	4b38      	ldr	r3, [pc, #224]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007db2:	4a39      	ldr	r2, [pc, #228]	; (8007e98 <HAL_I2C_MspInit+0x164>)
 8007db4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8007db6:	4b37      	ldr	r3, [pc, #220]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007dbc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007dbe:	4b35      	ldr	r3, [pc, #212]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007dc4:	4b33      	ldr	r3, [pc, #204]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007dca:	4b32      	ldr	r3, [pc, #200]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007dd0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007dd2:	4b30      	ldr	r3, [pc, #192]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007dd8:	4b2e      	ldr	r3, [pc, #184]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007dde:	4b2d      	ldr	r3, [pc, #180]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007de4:	4b2b      	ldr	r3, [pc, #172]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007dea:	4b2a      	ldr	r3, [pc, #168]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007df0:	4828      	ldr	r0, [pc, #160]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007df2:	f002 f825 	bl	8009e40 <HAL_DMA_Init>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8007dfc:	f000 f98c 	bl	8008118 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a24      	ldr	r2, [pc, #144]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38
 8007e06:	4a23      	ldr	r2, [pc, #140]	; (8007e94 <HAL_I2C_MspInit+0x160>)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2101      	movs	r1, #1
 8007e10:	201f      	movs	r0, #31
 8007e12:	f001 ffeb 	bl	8009dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007e16:	201f      	movs	r0, #31
 8007e18:	f002 f804 	bl	8009e24 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007e1c:	e030      	b.n	8007e80 <HAL_I2C_MspInit+0x14c>
  else if(i2cHandle->Instance==I2C2)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a1e      	ldr	r2, [pc, #120]	; (8007e9c <HAL_I2C_MspInit+0x168>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d12b      	bne.n	8007e80 <HAL_I2C_MspInit+0x14c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]
 8007e2c:	4b17      	ldr	r3, [pc, #92]	; (8007e8c <HAL_I2C_MspInit+0x158>)
 8007e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e30:	4a16      	ldr	r2, [pc, #88]	; (8007e8c <HAL_I2C_MspInit+0x158>)
 8007e32:	f043 0320 	orr.w	r3, r3, #32
 8007e36:	6313      	str	r3, [r2, #48]	; 0x30
 8007e38:	4b14      	ldr	r3, [pc, #80]	; (8007e8c <HAL_I2C_MspInit+0x158>)
 8007e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3c:	f003 0320 	and.w	r3, r3, #32
 8007e40:	613b      	str	r3, [r7, #16]
 8007e42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8007e44:	2303      	movs	r3, #3
 8007e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e48:	2312      	movs	r3, #18
 8007e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e50:	2303      	movs	r3, #3
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007e54:	2304      	movs	r3, #4
 8007e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e58:	f107 031c 	add.w	r3, r7, #28
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4810      	ldr	r0, [pc, #64]	; (8007ea0 <HAL_I2C_MspInit+0x16c>)
 8007e60:	f002 fb98 	bl	800a594 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	4b08      	ldr	r3, [pc, #32]	; (8007e8c <HAL_I2C_MspInit+0x158>)
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6c:	4a07      	ldr	r2, [pc, #28]	; (8007e8c <HAL_I2C_MspInit+0x158>)
 8007e6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e72:	6413      	str	r3, [r2, #64]	; 0x40
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <HAL_I2C_MspInit+0x158>)
 8007e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
}
 8007e80:	bf00      	nop
 8007e82:	3730      	adds	r7, #48	; 0x30
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	40005400 	.word	0x40005400
 8007e8c:	40023800 	.word	0x40023800
 8007e90:	40020400 	.word	0x40020400
 8007e94:	20006f64 	.word	0x20006f64
 8007e98:	40026088 	.word	0x40026088
 8007e9c:	40005800 	.word	0x40005800
 8007ea0:	40021400 	.word	0x40021400

08007ea4 <msOverFlow>:

static __inline void msOverFlow(){
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
	_timerOverflowCnt++;
 8007ea8:	4b04      	ldr	r3, [pc, #16]	; (8007ebc <msOverFlow+0x18>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3301      	adds	r3, #1
 8007eae:	4a03      	ldr	r2, [pc, #12]	; (8007ebc <msOverFlow+0x18>)
 8007eb0:	6013      	str	r3, [r2, #0]
}
 8007eb2:	bf00      	nop
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	20000988 	.word	0x20000988

08007ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ec4:	f001 fe76 	bl	8009bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ec8:	f000 f838 	bl	8007f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ecc:	f7ff fda0 	bl	8007a10 <MX_GPIO_Init>
  MX_DMA_Init();
 8007ed0:	f7ff fcfa 	bl	80078c8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8007ed4:	f001 fc18 	bl	8009708 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8007ed8:	f001 fdba 	bl	8009a50 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8007edc:	f7ff feaa 	bl	8007c34 <MX_I2C1_Init>
  MX_TIM3_Init();
 8007ee0:	f000 fd40 	bl	8008964 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007ee4:	f000 fdca 	bl	8008a7c <MX_TIM4_Init>
  MX_UART7_Init();
 8007ee8:	f001 fb8c 	bl	8009604 <MX_UART7_Init>
  MX_USART2_UART_Init();
 8007eec:	f001 fbe2 	bl	80096b4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8007ef0:	f7ff fee0 	bl	8007cb4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007ef4:	f000 fcea 	bl	80088cc <MX_TIM2_Init>
  MX_TIM10_Init();
 8007ef8:	f000 ff90 	bl	8008e1c <MX_TIM10_Init>
  MX_UART8_Init();
 8007efc:	f001 fbb0 	bl	8009660 <MX_UART8_Init>
  MX_SDIO_SD_Init();
 8007f00:	f000 f912 	bl	8008128 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8007f04:	f00a fde0 	bl	8012ac8 <MX_FATFS_Init>
  MX_TIM9_Init();
 8007f08:	f000 ff38 	bl	8008d7c <MX_TIM9_Init>
  MX_TIM13_Init();
 8007f0c:	f001 f824 	bl	8008f58 <MX_TIM13_Init>
  MX_TIM14_Init();
 8007f10:	f001 f870 	bl	8008ff4 <MX_TIM14_Init>
  MX_TIM5_Init();
 8007f14:	f000 fe4a 	bl	8008bac <MX_TIM5_Init>
  MX_TIM8_Init();
 8007f18:	f000 feac 	bl	8008c74 <MX_TIM8_Init>
  MX_TIM12_Init();
 8007f1c:	f000 ffcc 	bl	8008eb8 <MX_TIM12_Init>
  MX_SPI1_Init();
 8007f20:	f000 fa1a 	bl	8008358 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8007f24:	f000 f874 	bl	8008010 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  cppMain();
 8007f28:	f7fe febe 	bl	8006ca8 <cppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8007f2c:	f00d fbd6 	bl	80156dc <osKernelInitialize>
  MX_FREERTOS_Init();
 8007f30:	f7ff fcf2 	bl	8007918 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8007f34:	f00d fc28 	bl	8015788 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007f38:	e7fe      	b.n	8007f38 <main+0x78>
	...

08007f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b094      	sub	sp, #80	; 0x50
 8007f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f42:	f107 0320 	add.w	r3, r7, #32
 8007f46:	2230      	movs	r2, #48	; 0x30
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f012 f98b 	bl	801a266 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f50:	f107 030c 	add.w	r3, r7, #12
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	605a      	str	r2, [r3, #4]
 8007f5a:	609a      	str	r2, [r3, #8]
 8007f5c:	60da      	str	r2, [r3, #12]
 8007f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007f60:	2300      	movs	r3, #0
 8007f62:	60bb      	str	r3, [r7, #8]
 8007f64:	4b28      	ldr	r3, [pc, #160]	; (8008008 <SystemClock_Config+0xcc>)
 8007f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f68:	4a27      	ldr	r2, [pc, #156]	; (8008008 <SystemClock_Config+0xcc>)
 8007f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8007f70:	4b25      	ldr	r3, [pc, #148]	; (8008008 <SystemClock_Config+0xcc>)
 8007f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f78:	60bb      	str	r3, [r7, #8]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	607b      	str	r3, [r7, #4]
 8007f80:	4b22      	ldr	r3, [pc, #136]	; (800800c <SystemClock_Config+0xd0>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a21      	ldr	r2, [pc, #132]	; (800800c <SystemClock_Config+0xd0>)
 8007f86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f8a:	6013      	str	r3, [r2, #0]
 8007f8c:	4b1f      	ldr	r3, [pc, #124]	; (800800c <SystemClock_Config+0xd0>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f94:	607b      	str	r3, [r7, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007fac:	2308      	movs	r3, #8
 8007fae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007fb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007fb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007fba:	2307      	movs	r3, #7
 8007fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fbe:	f107 0320 	add.w	r3, r7, #32
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f005 fd2c 	bl	800da20 <HAL_RCC_OscConfig>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8007fce:	f000 f8a3 	bl	8008118 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fd2:	230f      	movs	r3, #15
 8007fd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007fde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007fe2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fe8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007fea:	f107 030c 	add.w	r3, r7, #12
 8007fee:	2105      	movs	r1, #5
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f005 ff85 	bl	800df00 <HAL_RCC_ClockConfig>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8007ffc:	f000 f88c 	bl	8008118 <Error_Handler>
  }
}
 8008000:	bf00      	nop
 8008002:	3750      	adds	r7, #80	; 0x50
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	40023800 	.word	0x40023800
 800800c:	40007000 	.word	0x40007000

08008010 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	af00      	add	r7, sp, #0
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 8008014:	2200      	movs	r2, #0
 8008016:	2101      	movs	r1, #1
 8008018:	2020      	movs	r0, #32
 800801a:	f001 fee7 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800801e:	2020      	movs	r0, #32
 8008020:	f001 ff00 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* UART7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8008024:	2200      	movs	r2, #0
 8008026:	2105      	movs	r1, #5
 8008028:	2052      	movs	r0, #82	; 0x52
 800802a:	f001 fedf 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART7_IRQn);
 800802e:	2052      	movs	r0, #82	; 0x52
 8008030:	f001 fef8 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8008034:	2200      	movs	r2, #0
 8008036:	2105      	movs	r1, #5
 8008038:	2021      	movs	r0, #33	; 0x21
 800803a:	f001 fed7 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800803e:	2021      	movs	r0, #33	; 0x21
 8008040:	f001 fef0 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* I2C2_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8008044:	2200      	movs	r2, #0
 8008046:	2105      	movs	r1, #5
 8008048:	2022      	movs	r0, #34	; 0x22
 800804a:	f001 fecf 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800804e:	2022      	movs	r0, #34	; 0x22
 8008050:	f001 fee8 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* SDIO_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8008054:	2200      	movs	r2, #0
 8008056:	2105      	movs	r1, #5
 8008058:	2031      	movs	r0, #49	; 0x31
 800805a:	f001 fec7 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800805e:	2031      	movs	r0, #49	; 0x31
 8008060:	f001 fee0 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8008064:	2200      	movs	r2, #0
 8008066:	2105      	movs	r1, #5
 8008068:	200e      	movs	r0, #14
 800806a:	f001 febf 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800806e:	200e      	movs	r0, #14
 8008070:	f001 fed8 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8008074:	2200      	movs	r2, #0
 8008076:	2105      	movs	r1, #5
 8008078:	2011      	movs	r0, #17
 800807a:	f001 feb7 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800807e:	2011      	movs	r0, #17
 8008080:	f001 fed0 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8008084:	2200      	movs	r2, #0
 8008086:	2101      	movs	r1, #1
 8008088:	2010      	movs	r0, #16
 800808a:	f001 feaf 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800808e:	2010      	movs	r0, #16
 8008090:	f001 fec8 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8008094:	2200      	movs	r2, #0
 8008096:	2105      	movs	r1, #5
 8008098:	203b      	movs	r0, #59	; 0x3b
 800809a:	f001 fea7 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800809e:	203b      	movs	r0, #59	; 0x3b
 80080a0:	f001 fec0 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80080a4:	2200      	movs	r2, #0
 80080a6:	2105      	movs	r1, #5
 80080a8:	2045      	movs	r0, #69	; 0x45
 80080aa:	f001 fe9f 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80080ae:	2045      	movs	r0, #69	; 0x45
 80080b0:	f001 feb8 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80080b4:	2200      	movs	r2, #0
 80080b6:	2105      	movs	r1, #5
 80080b8:	2018      	movs	r0, #24
 80080ba:	f001 fe97 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80080be:	2018      	movs	r0, #24
 80080c0:	f001 feb0 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80080c4:	2200      	movs	r2, #0
 80080c6:	2105      	movs	r1, #5
 80080c8:	201c      	movs	r0, #28
 80080ca:	f001 fe8f 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80080ce:	201c      	movs	r0, #28
 80080d0:	f001 fea8 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* UART8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80080d4:	2200      	movs	r2, #0
 80080d6:	2105      	movs	r1, #5
 80080d8:	2053      	movs	r0, #83	; 0x53
 80080da:	f001 fe87 	bl	8009dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART8_IRQn);
 80080de:	2053      	movs	r0, #83	; 0x53
 80080e0:	f001 fea0 	bl	8009e24 <HAL_NVIC_EnableIRQ>
}
 80080e4:	bf00      	nop
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	/* microseond timer */
  if(htim->Instance == TIM2){
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f8:	d101      	bne.n	80080fe <HAL_TIM_PeriodElapsedCallback+0x16>
	  msOverFlow();
 80080fa:	f7ff fed3 	bl	8007ea4 <msOverFlow>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a04      	ldr	r2, [pc, #16]	; (8008114 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d101      	bne.n	800810c <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8008108:	f001 fd76 	bl	8009bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800810c:	bf00      	nop
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	40001000 	.word	0x40001000

08008118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008118:	b480      	push	{r7}
 800811a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800811c:	bf00      	nop
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
	...

08008128 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8008128:	b480      	push	{r7}
 800812a:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800812c:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <MX_SDIO_SD_Init+0x38>)
 800812e:	4a0d      	ldr	r2, [pc, #52]	; (8008164 <MX_SDIO_SD_Init+0x3c>)
 8008130:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8008132:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <MX_SDIO_SD_Init+0x38>)
 8008134:	2200      	movs	r2, #0
 8008136:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8008138:	4b09      	ldr	r3, [pc, #36]	; (8008160 <MX_SDIO_SD_Init+0x38>)
 800813a:	2200      	movs	r2, #0
 800813c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800813e:	4b08      	ldr	r3, [pc, #32]	; (8008160 <MX_SDIO_SD_Init+0x38>)
 8008140:	2200      	movs	r2, #0
 8008142:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8008144:	4b06      	ldr	r3, [pc, #24]	; (8008160 <MX_SDIO_SD_Init+0x38>)
 8008146:	2200      	movs	r2, #0
 8008148:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800814a:	4b05      	ldr	r3, [pc, #20]	; (8008160 <MX_SDIO_SD_Init+0x38>)
 800814c:	2200      	movs	r2, #0
 800814e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8008150:	4b03      	ldr	r3, [pc, #12]	; (8008160 <MX_SDIO_SD_Init+0x38>)
 8008152:	2200      	movs	r2, #0
 8008154:	619a      	str	r2, [r3, #24]

}
 8008156:	bf00      	nop
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	20007084 	.word	0x20007084
 8008164:	40012c00 	.word	0x40012c00

08008168 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08a      	sub	sp, #40	; 0x28
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008170:	f107 0314 	add.w	r3, r7, #20
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	605a      	str	r2, [r3, #4]
 800817a:	609a      	str	r2, [r3, #8]
 800817c:	60da      	str	r2, [r3, #12]
 800817e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a6c      	ldr	r2, [pc, #432]	; (8008338 <HAL_SD_MspInit+0x1d0>)
 8008186:	4293      	cmp	r3, r2
 8008188:	f040 80d2 	bne.w	8008330 <HAL_SD_MspInit+0x1c8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800818c:	2300      	movs	r3, #0
 800818e:	613b      	str	r3, [r7, #16]
 8008190:	4b6a      	ldr	r3, [pc, #424]	; (800833c <HAL_SD_MspInit+0x1d4>)
 8008192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008194:	4a69      	ldr	r2, [pc, #420]	; (800833c <HAL_SD_MspInit+0x1d4>)
 8008196:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800819a:	6453      	str	r3, [r2, #68]	; 0x44
 800819c:	4b67      	ldr	r3, [pc, #412]	; (800833c <HAL_SD_MspInit+0x1d4>)
 800819e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a4:	613b      	str	r3, [r7, #16]
 80081a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	4b63      	ldr	r3, [pc, #396]	; (800833c <HAL_SD_MspInit+0x1d4>)
 80081ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b0:	4a62      	ldr	r2, [pc, #392]	; (800833c <HAL_SD_MspInit+0x1d4>)
 80081b2:	f043 0304 	orr.w	r3, r3, #4
 80081b6:	6313      	str	r3, [r2, #48]	; 0x30
 80081b8:	4b60      	ldr	r3, [pc, #384]	; (800833c <HAL_SD_MspInit+0x1d4>)
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	60fb      	str	r3, [r7, #12]
 80081c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80081c4:	2300      	movs	r3, #0
 80081c6:	60bb      	str	r3, [r7, #8]
 80081c8:	4b5c      	ldr	r3, [pc, #368]	; (800833c <HAL_SD_MspInit+0x1d4>)
 80081ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081cc:	4a5b      	ldr	r2, [pc, #364]	; (800833c <HAL_SD_MspInit+0x1d4>)
 80081ce:	f043 0308 	orr.w	r3, r3, #8
 80081d2:	6313      	str	r3, [r2, #48]	; 0x30
 80081d4:	4b59      	ldr	r3, [pc, #356]	; (800833c <HAL_SD_MspInit+0x1d4>)
 80081d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	60bb      	str	r3, [r7, #8]
 80081de:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80081e0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80081e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081e6:	2302      	movs	r3, #2
 80081e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80081ea:	2301      	movs	r3, #1
 80081ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081ee:	2303      	movs	r3, #3
 80081f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80081f2:	230c      	movs	r3, #12
 80081f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081f6:	f107 0314 	add.w	r3, r7, #20
 80081fa:	4619      	mov	r1, r3
 80081fc:	4850      	ldr	r0, [pc, #320]	; (8008340 <HAL_SD_MspInit+0x1d8>)
 80081fe:	f002 f9c9 	bl	800a594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008208:	2302      	movs	r3, #2
 800820a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800820c:	2300      	movs	r3, #0
 800820e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008210:	2303      	movs	r3, #3
 8008212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008214:	230c      	movs	r3, #12
 8008216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008218:	f107 0314 	add.w	r3, r7, #20
 800821c:	4619      	mov	r1, r3
 800821e:	4848      	ldr	r0, [pc, #288]	; (8008340 <HAL_SD_MspInit+0x1d8>)
 8008220:	f002 f9b8 	bl	800a594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008224:	2304      	movs	r3, #4
 8008226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008228:	2302      	movs	r3, #2
 800822a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800822c:	2301      	movs	r3, #1
 800822e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008230:	2303      	movs	r3, #3
 8008232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008234:	230c      	movs	r3, #12
 8008236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008238:	f107 0314 	add.w	r3, r7, #20
 800823c:	4619      	mov	r1, r3
 800823e:	4841      	ldr	r0, [pc, #260]	; (8008344 <HAL_SD_MspInit+0x1dc>)
 8008240:	f002 f9a8 	bl	800a594 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8008244:	4b40      	ldr	r3, [pc, #256]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 8008246:	4a41      	ldr	r2, [pc, #260]	; (800834c <HAL_SD_MspInit+0x1e4>)
 8008248:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800824a:	4b3f      	ldr	r3, [pc, #252]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 800824c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008250:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008252:	4b3d      	ldr	r3, [pc, #244]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 8008254:	2200      	movs	r2, #0
 8008256:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008258:	4b3b      	ldr	r3, [pc, #236]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 800825a:	2200      	movs	r2, #0
 800825c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800825e:	4b3a      	ldr	r3, [pc, #232]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 8008260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008264:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008266:	4b38      	ldr	r3, [pc, #224]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 8008268:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800826c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800826e:	4b36      	ldr	r3, [pc, #216]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 8008270:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008274:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8008276:	4b34      	ldr	r3, [pc, #208]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 8008278:	2220      	movs	r2, #32
 800827a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800827c:	4b32      	ldr	r3, [pc, #200]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 800827e:	2200      	movs	r2, #0
 8008280:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008282:	4b31      	ldr	r3, [pc, #196]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 8008284:	2204      	movs	r2, #4
 8008286:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008288:	4b2f      	ldr	r3, [pc, #188]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 800828a:	2203      	movs	r2, #3
 800828c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800828e:	4b2e      	ldr	r3, [pc, #184]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 8008290:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008294:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8008296:	4b2c      	ldr	r3, [pc, #176]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 8008298:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800829e:	482a      	ldr	r0, [pc, #168]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 80082a0:	f001 fdce 	bl	8009e40 <HAL_DMA_Init>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80082aa:	f7ff ff35 	bl	8008118 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a25      	ldr	r2, [pc, #148]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 80082b2:	641a      	str	r2, [r3, #64]	; 0x40
 80082b4:	4a24      	ldr	r2, [pc, #144]	; (8008348 <HAL_SD_MspInit+0x1e0>)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80082ba:	4b25      	ldr	r3, [pc, #148]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 80082bc:	4a25      	ldr	r2, [pc, #148]	; (8008354 <HAL_SD_MspInit+0x1ec>)
 80082be:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80082c0:	4b23      	ldr	r3, [pc, #140]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 80082c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082c6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80082c8:	4b21      	ldr	r3, [pc, #132]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 80082ca:	2240      	movs	r2, #64	; 0x40
 80082cc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80082ce:	4b20      	ldr	r3, [pc, #128]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80082d4:	4b1e      	ldr	r3, [pc, #120]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 80082d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082da:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80082dc:	4b1c      	ldr	r3, [pc, #112]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 80082de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80082e2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80082e4:	4b1a      	ldr	r3, [pc, #104]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 80082e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80082ea:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80082ec:	4b18      	ldr	r3, [pc, #96]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 80082ee:	2220      	movs	r2, #32
 80082f0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80082f2:	4b17      	ldr	r3, [pc, #92]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80082f8:	4b15      	ldr	r3, [pc, #84]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 80082fa:	2204      	movs	r2, #4
 80082fc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80082fe:	4b14      	ldr	r3, [pc, #80]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 8008300:	2203      	movs	r2, #3
 8008302:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8008304:	4b12      	ldr	r3, [pc, #72]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 8008306:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800830a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800830c:	4b10      	ldr	r3, [pc, #64]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 800830e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008312:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8008314:	480e      	ldr	r0, [pc, #56]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 8008316:	f001 fd93 	bl	8009e40 <HAL_DMA_Init>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8008320:	f7ff fefa 	bl	8008118 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a0a      	ldr	r2, [pc, #40]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 8008328:	63da      	str	r2, [r3, #60]	; 0x3c
 800832a:	4a09      	ldr	r2, [pc, #36]	; (8008350 <HAL_SD_MspInit+0x1e8>)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8008330:	bf00      	nop
 8008332:	3728      	adds	r7, #40	; 0x28
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	40012c00 	.word	0x40012c00
 800833c:	40023800 	.word	0x40023800
 8008340:	40020800 	.word	0x40020800
 8008344:	40020c00 	.word	0x40020c00
 8008348:	20006fc4 	.word	0x20006fc4
 800834c:	40026458 	.word	0x40026458
 8008350:	20007024 	.word	0x20007024
 8008354:	400264a0 	.word	0x400264a0

08008358 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800835c:	4b17      	ldr	r3, [pc, #92]	; (80083bc <MX_SPI1_Init+0x64>)
 800835e:	4a18      	ldr	r2, [pc, #96]	; (80083c0 <MX_SPI1_Init+0x68>)
 8008360:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008362:	4b16      	ldr	r3, [pc, #88]	; (80083bc <MX_SPI1_Init+0x64>)
 8008364:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008368:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800836a:	4b14      	ldr	r3, [pc, #80]	; (80083bc <MX_SPI1_Init+0x64>)
 800836c:	2200      	movs	r2, #0
 800836e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008370:	4b12      	ldr	r3, [pc, #72]	; (80083bc <MX_SPI1_Init+0x64>)
 8008372:	2200      	movs	r2, #0
 8008374:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008376:	4b11      	ldr	r3, [pc, #68]	; (80083bc <MX_SPI1_Init+0x64>)
 8008378:	2202      	movs	r2, #2
 800837a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800837c:	4b0f      	ldr	r3, [pc, #60]	; (80083bc <MX_SPI1_Init+0x64>)
 800837e:	2201      	movs	r2, #1
 8008380:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008382:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <MX_SPI1_Init+0x64>)
 8008384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008388:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <MX_SPI1_Init+0x64>)
 800838c:	2220      	movs	r2, #32
 800838e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008390:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <MX_SPI1_Init+0x64>)
 8008392:	2200      	movs	r2, #0
 8008394:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008396:	4b09      	ldr	r3, [pc, #36]	; (80083bc <MX_SPI1_Init+0x64>)
 8008398:	2200      	movs	r2, #0
 800839a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800839c:	4b07      	ldr	r3, [pc, #28]	; (80083bc <MX_SPI1_Init+0x64>)
 800839e:	2200      	movs	r2, #0
 80083a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80083a2:	4b06      	ldr	r3, [pc, #24]	; (80083bc <MX_SPI1_Init+0x64>)
 80083a4:	220a      	movs	r2, #10
 80083a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80083a8:	4804      	ldr	r0, [pc, #16]	; (80083bc <MX_SPI1_Init+0x64>)
 80083aa:	f007 facb 	bl	800f944 <HAL_SPI_Init>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80083b4:	f7ff feb0 	bl	8008118 <Error_Handler>
  }

}
 80083b8:	bf00      	nop
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20007108 	.word	0x20007108
 80083c0:	40013000 	.word	0x40013000

080083c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08a      	sub	sp, #40	; 0x28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083cc:	f107 0314 	add.w	r3, r7, #20
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	605a      	str	r2, [r3, #4]
 80083d6:	609a      	str	r2, [r3, #8]
 80083d8:	60da      	str	r2, [r3, #12]
 80083da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a28      	ldr	r2, [pc, #160]	; (8008484 <HAL_SPI_MspInit+0xc0>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d149      	bne.n	800847a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80083e6:	2300      	movs	r3, #0
 80083e8:	613b      	str	r3, [r7, #16]
 80083ea:	4b27      	ldr	r3, [pc, #156]	; (8008488 <HAL_SPI_MspInit+0xc4>)
 80083ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ee:	4a26      	ldr	r2, [pc, #152]	; (8008488 <HAL_SPI_MspInit+0xc4>)
 80083f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083f4:	6453      	str	r3, [r2, #68]	; 0x44
 80083f6:	4b24      	ldr	r3, [pc, #144]	; (8008488 <HAL_SPI_MspInit+0xc4>)
 80083f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083fe:	613b      	str	r3, [r7, #16]
 8008400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	4b20      	ldr	r3, [pc, #128]	; (8008488 <HAL_SPI_MspInit+0xc4>)
 8008408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840a:	4a1f      	ldr	r2, [pc, #124]	; (8008488 <HAL_SPI_MspInit+0xc4>)
 800840c:	f043 0301 	orr.w	r3, r3, #1
 8008410:	6313      	str	r3, [r2, #48]	; 0x30
 8008412:	4b1d      	ldr	r3, [pc, #116]	; (8008488 <HAL_SPI_MspInit+0xc4>)
 8008414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	60fb      	str	r3, [r7, #12]
 800841c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800841e:	2300      	movs	r3, #0
 8008420:	60bb      	str	r3, [r7, #8]
 8008422:	4b19      	ldr	r3, [pc, #100]	; (8008488 <HAL_SPI_MspInit+0xc4>)
 8008424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008426:	4a18      	ldr	r2, [pc, #96]	; (8008488 <HAL_SPI_MspInit+0xc4>)
 8008428:	f043 0302 	orr.w	r3, r3, #2
 800842c:	6313      	str	r3, [r2, #48]	; 0x30
 800842e:	4b16      	ldr	r3, [pc, #88]	; (8008488 <HAL_SPI_MspInit+0xc4>)
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	60bb      	str	r3, [r7, #8]
 8008438:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 800843a:	23a0      	movs	r3, #160	; 0xa0
 800843c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800843e:	2302      	movs	r3, #2
 8008440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008442:	2300      	movs	r3, #0
 8008444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008446:	2303      	movs	r3, #3
 8008448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800844a:	2305      	movs	r3, #5
 800844c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800844e:	f107 0314 	add.w	r3, r7, #20
 8008452:	4619      	mov	r1, r3
 8008454:	480d      	ldr	r0, [pc, #52]	; (800848c <HAL_SPI_MspInit+0xc8>)
 8008456:	f002 f89d 	bl	800a594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 800845a:	2310      	movs	r3, #16
 800845c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800845e:	2302      	movs	r3, #2
 8008460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008462:	2300      	movs	r3, #0
 8008464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008466:	2303      	movs	r3, #3
 8008468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800846a:	2305      	movs	r3, #5
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 800846e:	f107 0314 	add.w	r3, r7, #20
 8008472:	4619      	mov	r1, r3
 8008474:	4806      	ldr	r0, [pc, #24]	; (8008490 <HAL_SPI_MspInit+0xcc>)
 8008476:	f002 f88d 	bl	800a594 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800847a:	bf00      	nop
 800847c:	3728      	adds	r7, #40	; 0x28
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	40013000 	.word	0x40013000
 8008488:	40023800 	.word	0x40023800
 800848c:	40020000 	.word	0x40020000
 8008490:	40020400 	.word	0x40020400

08008494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800849a:	2300      	movs	r3, #0
 800849c:	607b      	str	r3, [r7, #4]
 800849e:	4b12      	ldr	r3, [pc, #72]	; (80084e8 <HAL_MspInit+0x54>)
 80084a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a2:	4a11      	ldr	r2, [pc, #68]	; (80084e8 <HAL_MspInit+0x54>)
 80084a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084a8:	6453      	str	r3, [r2, #68]	; 0x44
 80084aa:	4b0f      	ldr	r3, [pc, #60]	; (80084e8 <HAL_MspInit+0x54>)
 80084ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084b2:	607b      	str	r3, [r7, #4]
 80084b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80084b6:	2300      	movs	r3, #0
 80084b8:	603b      	str	r3, [r7, #0]
 80084ba:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <HAL_MspInit+0x54>)
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	4a0a      	ldr	r2, [pc, #40]	; (80084e8 <HAL_MspInit+0x54>)
 80084c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084c4:	6413      	str	r3, [r2, #64]	; 0x40
 80084c6:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <HAL_MspInit+0x54>)
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80084d2:	2200      	movs	r2, #0
 80084d4:	210f      	movs	r1, #15
 80084d6:	f06f 0001 	mvn.w	r0, #1
 80084da:	f001 fc87 	bl	8009dec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	40023800 	.word	0x40023800

080084ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08c      	sub	sp, #48	; 0x30
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80084fc:	2200      	movs	r2, #0
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	2036      	movs	r0, #54	; 0x36
 8008502:	f001 fc73 	bl	8009dec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008506:	2036      	movs	r0, #54	; 0x36
 8008508:	f001 fc8c 	bl	8009e24 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800850c:	2300      	movs	r3, #0
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	4b1f      	ldr	r3, [pc, #124]	; (8008590 <HAL_InitTick+0xa4>)
 8008512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008514:	4a1e      	ldr	r2, [pc, #120]	; (8008590 <HAL_InitTick+0xa4>)
 8008516:	f043 0310 	orr.w	r3, r3, #16
 800851a:	6413      	str	r3, [r2, #64]	; 0x40
 800851c:	4b1c      	ldr	r3, [pc, #112]	; (8008590 <HAL_InitTick+0xa4>)
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	60fb      	str	r3, [r7, #12]
 8008526:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008528:	f107 0210 	add.w	r2, r7, #16
 800852c:	f107 0314 	add.w	r3, r7, #20
 8008530:	4611      	mov	r1, r2
 8008532:	4618      	mov	r0, r3
 8008534:	f005 fed6 	bl	800e2e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008538:	f005 feac 	bl	800e294 <HAL_RCC_GetPCLK1Freq>
 800853c:	4603      	mov	r3, r0
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008544:	4a13      	ldr	r2, [pc, #76]	; (8008594 <HAL_InitTick+0xa8>)
 8008546:	fba2 2303 	umull	r2, r3, r2, r3
 800854a:	0c9b      	lsrs	r3, r3, #18
 800854c:	3b01      	subs	r3, #1
 800854e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008550:	4b11      	ldr	r3, [pc, #68]	; (8008598 <HAL_InitTick+0xac>)
 8008552:	4a12      	ldr	r2, [pc, #72]	; (800859c <HAL_InitTick+0xb0>)
 8008554:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8008556:	4b10      	ldr	r3, [pc, #64]	; (8008598 <HAL_InitTick+0xac>)
 8008558:	f240 32e7 	movw	r2, #999	; 0x3e7
 800855c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800855e:	4a0e      	ldr	r2, [pc, #56]	; (8008598 <HAL_InitTick+0xac>)
 8008560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008562:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008564:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <HAL_InitTick+0xac>)
 8008566:	2200      	movs	r2, #0
 8008568:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800856a:	4b0b      	ldr	r3, [pc, #44]	; (8008598 <HAL_InitTick+0xac>)
 800856c:	2200      	movs	r2, #0
 800856e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8008570:	4809      	ldr	r0, [pc, #36]	; (8008598 <HAL_InitTick+0xac>)
 8008572:	f007 fa4b 	bl	800fa0c <HAL_TIM_Base_Init>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800857c:	4806      	ldr	r0, [pc, #24]	; (8008598 <HAL_InitTick+0xac>)
 800857e:	f007 fa70 	bl	800fa62 <HAL_TIM_Base_Start_IT>
 8008582:	4603      	mov	r3, r0
 8008584:	e000      	b.n	8008588 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
}
 8008588:	4618      	mov	r0, r3
 800858a:	3730      	adds	r7, #48	; 0x30
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	40023800 	.word	0x40023800
 8008594:	431bde83 	.word	0x431bde83
 8008598:	20007160 	.word	0x20007160
 800859c:	40001000 	.word	0x40001000

080085a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80085a4:	bf00      	nop
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80085ae:	b480      	push	{r7}
 80085b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80085b2:	e7fe      	b.n	80085b2 <HardFault_Handler+0x4>

080085b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80085b8:	e7fe      	b.n	80085b8 <MemManage_Handler+0x4>

080085ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80085ba:	b480      	push	{r7}
 80085bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80085be:	e7fe      	b.n	80085be <BusFault_Handler+0x4>

080085c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80085c0:	b480      	push	{r7}
 80085c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80085c4:	e7fe      	b.n	80085c4 <UsageFault_Handler+0x4>

080085c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80085c6:	b480      	push	{r7}
 80085c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80085ca:	bf00      	nop
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80085d8:	4802      	ldr	r0, [pc, #8]	; (80085e4 <DMA1_Stream3_IRQHandler+0x10>)
 80085da:	f001 fd59 	bl	800a090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80085de:	bf00      	nop
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	200074a0 	.word	0x200074a0

080085e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80085ec:	4802      	ldr	r0, [pc, #8]	; (80085f8 <DMA1_Stream5_IRQHandler+0x10>)
 80085ee:	f001 fd4f 	bl	800a090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80085f2:	bf00      	nop
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20006f64 	.word	0x20006f64

080085fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8008600:	4802      	ldr	r0, [pc, #8]	; (800860c <DMA1_Stream6_IRQHandler+0x10>)
 8008602:	f001 fd45 	bl	800a090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8008606:	bf00      	nop
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20007500 	.word	0x20007500

08008610 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8008614:	4802      	ldr	r0, [pc, #8]	; (8008620 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8008616:	f007 fa9e 	bl	800fb56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800861a:	bf00      	nop
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20007320 	.word	0x20007320

08008624 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008628:	4802      	ldr	r0, [pc, #8]	; (8008634 <TIM2_IRQHandler+0x10>)
 800862a:	f007 fa94 	bl	800fb56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800862e:	bf00      	nop
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20007360 	.word	0x20007360

08008638 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800863c:	4802      	ldr	r0, [pc, #8]	; (8008648 <I2C1_EV_IRQHandler+0x10>)
 800863e:	f002 ffe7 	bl	800b610 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8008642:	bf00      	nop
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20006ebc 	.word	0x20006ebc

0800864c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8008650:	4802      	ldr	r0, [pc, #8]	; (800865c <I2C1_ER_IRQHandler+0x10>)
 8008652:	f003 f943 	bl	800b8dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8008656:	bf00      	nop
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20006ebc 	.word	0x20006ebc

08008660 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8008664:	4802      	ldr	r0, [pc, #8]	; (8008670 <I2C2_EV_IRQHandler+0x10>)
 8008666:	f002 ffd3 	bl	800b610 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800866a:	bf00      	nop
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20006f10 	.word	0x20006f10

08008674 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8008678:	4802      	ldr	r0, [pc, #8]	; (8008684 <I2C2_ER_IRQHandler+0x10>)
 800867a:	f003 f92f 	bl	800b8dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800867e:	bf00      	nop
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20006f10 	.word	0x20006f10

08008688 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800868c:	4802      	ldr	r0, [pc, #8]	; (8008698 <USART2_IRQHandler+0x10>)
 800868e:	f008 fbab 	bl	8010de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008692:	bf00      	nop
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	200075a0 	.word	0x200075a0

0800869c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80086a0:	4802      	ldr	r0, [pc, #8]	; (80086ac <TIM8_CC_IRQHandler+0x10>)
 80086a2:	f007 fa58 	bl	800fb56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80086a6:	bf00      	nop
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200071a0 	.word	0x200071a0

080086b0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80086b4:	4802      	ldr	r0, [pc, #8]	; (80086c0 <SDIO_IRQHandler+0x10>)
 80086b6:	f006 f8b1 	bl	800e81c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80086ba:	bf00      	nop
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20007084 	.word	0x20007084

080086c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80086c8:	4802      	ldr	r0, [pc, #8]	; (80086d4 <TIM6_DAC_IRQHandler+0x10>)
 80086ca:	f007 fa44 	bl	800fb56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80086ce:	bf00      	nop
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20007160 	.word	0x20007160

080086d8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80086dc:	4802      	ldr	r0, [pc, #8]	; (80086e8 <DMA2_Stream3_IRQHandler+0x10>)
 80086de:	f001 fcd7 	bl	800a090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80086e2:	bf00      	nop
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20006fc4 	.word	0x20006fc4

080086ec <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80086f0:	4802      	ldr	r0, [pc, #8]	; (80086fc <DMA2_Stream6_IRQHandler+0x10>)
 80086f2:	f001 fccd 	bl	800a090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80086f6:	bf00      	nop
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20007024 	.word	0x20007024

08008700 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8008704:	4802      	ldr	r0, [pc, #8]	; (8008710 <UART7_IRQHandler+0x10>)
 8008706:	f008 fb6f 	bl	8010de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800870a:	bf00      	nop
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20007420 	.word	0x20007420

08008714 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8008718:	4802      	ldr	r0, [pc, #8]	; (8008724 <UART8_IRQHandler+0x10>)
 800871a:	f008 fb65 	bl	8010de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800871e:	bf00      	nop
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20007560 	.word	0x20007560

08008728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
	return 1;
 800872c:	2301      	movs	r3, #1
}
 800872e:	4618      	mov	r0, r3
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <_kill>:

int _kill(int pid, int sig)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008742:	f011 fd49 	bl	801a1d8 <__errno>
 8008746:	4602      	mov	r2, r0
 8008748:	2316      	movs	r3, #22
 800874a:	6013      	str	r3, [r2, #0]
	return -1;
 800874c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <_exit>:

void _exit (int status)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008760:	f04f 31ff 	mov.w	r1, #4294967295
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff ffe7 	bl	8008738 <_kill>
	while (1) {}		/* Make sure we hang here */
 800876a:	e7fe      	b.n	800876a <_exit+0x12>

0800876c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008778:	2300      	movs	r3, #0
 800877a:	617b      	str	r3, [r7, #20]
 800877c:	e00a      	b.n	8008794 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800877e:	f3af 8000 	nop.w
 8008782:	4601      	mov	r1, r0
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	60ba      	str	r2, [r7, #8]
 800878a:	b2ca      	uxtb	r2, r1
 800878c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	3301      	adds	r3, #1
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	429a      	cmp	r2, r3
 800879a:	dbf0      	blt.n	800877e <_read+0x12>
	}

return len;
 800879c:	687b      	ldr	r3, [r7, #4]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b086      	sub	sp, #24
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087b2:	2300      	movs	r3, #0
 80087b4:	617b      	str	r3, [r7, #20]
 80087b6:	e009      	b.n	80087cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	60ba      	str	r2, [r7, #8]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	3301      	adds	r3, #1
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	dbf1      	blt.n	80087b8 <_write+0x12>
	}
	return len;
 80087d4:	687b      	ldr	r3, [r7, #4]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <_close>:

int _close(int file)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
	return -1;
 80087e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008806:	605a      	str	r2, [r3, #4]
	return 0;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <_isatty>:

int _isatty(int file)
{
 8008816:	b480      	push	{r7}
 8008818:	b083      	sub	sp, #12
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
	return 1;
 800881e:	2301      	movs	r3, #1
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
	return 0;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
	...

08008848 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008850:	4b11      	ldr	r3, [pc, #68]	; (8008898 <_sbrk+0x50>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d102      	bne.n	800885e <_sbrk+0x16>
		heap_end = &end;
 8008858:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <_sbrk+0x50>)
 800885a:	4a10      	ldr	r2, [pc, #64]	; (800889c <_sbrk+0x54>)
 800885c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800885e:	4b0e      	ldr	r3, [pc, #56]	; (8008898 <_sbrk+0x50>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008864:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <_sbrk+0x50>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4413      	add	r3, r2
 800886c:	466a      	mov	r2, sp
 800886e:	4293      	cmp	r3, r2
 8008870:	d907      	bls.n	8008882 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008872:	f011 fcb1 	bl	801a1d8 <__errno>
 8008876:	4602      	mov	r2, r0
 8008878:	230c      	movs	r3, #12
 800887a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800887c:	f04f 33ff 	mov.w	r3, #4294967295
 8008880:	e006      	b.n	8008890 <_sbrk+0x48>
	}

	heap_end += incr;
 8008882:	4b05      	ldr	r3, [pc, #20]	; (8008898 <_sbrk+0x50>)
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	4a03      	ldr	r2, [pc, #12]	; (8008898 <_sbrk+0x50>)
 800888c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800888e:	68fb      	ldr	r3, [r7, #12]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	2000098c 	.word	0x2000098c
 800889c:	20009aa0 	.word	0x20009aa0

080088a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088a4:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <SystemInit+0x28>)
 80088a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088aa:	4a07      	ldr	r2, [pc, #28]	; (80088c8 <SystemInit+0x28>)
 80088ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80088b4:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <SystemInit+0x28>)
 80088b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80088ba:	609a      	str	r2, [r3, #8]
#endif
}
 80088bc:	bf00      	nop
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	e000ed00 	.word	0xe000ed00

080088cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80088d2:	f107 0308 	add.w	r3, r7, #8
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	605a      	str	r2, [r3, #4]
 80088dc:	609a      	str	r2, [r3, #8]
 80088de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80088e0:	463b      	mov	r3, r7
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80088e8:	4b1d      	ldr	r3, [pc, #116]	; (8008960 <MX_TIM2_Init+0x94>)
 80088ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80088ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80088f0:	4b1b      	ldr	r3, [pc, #108]	; (8008960 <MX_TIM2_Init+0x94>)
 80088f2:	2253      	movs	r2, #83	; 0x53
 80088f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088f6:	4b1a      	ldr	r3, [pc, #104]	; (8008960 <MX_TIM2_Init+0x94>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 80088fc:	4b18      	ldr	r3, [pc, #96]	; (8008960 <MX_TIM2_Init+0x94>)
 80088fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008902:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008904:	4b16      	ldr	r3, [pc, #88]	; (8008960 <MX_TIM2_Init+0x94>)
 8008906:	2200      	movs	r2, #0
 8008908:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800890a:	4b15      	ldr	r3, [pc, #84]	; (8008960 <MX_TIM2_Init+0x94>)
 800890c:	2200      	movs	r2, #0
 800890e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008910:	4813      	ldr	r0, [pc, #76]	; (8008960 <MX_TIM2_Init+0x94>)
 8008912:	f007 f87b 	bl	800fa0c <HAL_TIM_Base_Init>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800891c:	f7ff fbfc 	bl	8008118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	4619      	mov	r1, r3
 800892c:	480c      	ldr	r0, [pc, #48]	; (8008960 <MX_TIM2_Init+0x94>)
 800892e:	f007 fb7d 	bl	801002c <HAL_TIM_ConfigClockSource>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008938:	f7ff fbee 	bl	8008118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800893c:	2300      	movs	r3, #0
 800893e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008940:	2300      	movs	r3, #0
 8008942:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008944:	463b      	mov	r3, r7
 8008946:	4619      	mov	r1, r3
 8008948:	4805      	ldr	r0, [pc, #20]	; (8008960 <MX_TIM2_Init+0x94>)
 800894a:	f008 f89d 	bl	8010a88 <HAL_TIMEx_MasterConfigSynchronization>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008954:	f7ff fbe0 	bl	8008118 <Error_Handler>
  }

}
 8008958:	bf00      	nop
 800895a:	3718      	adds	r7, #24
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	20007360 	.word	0x20007360

08008964 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08e      	sub	sp, #56	; 0x38
 8008968:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800896a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800896e:	2200      	movs	r2, #0
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	605a      	str	r2, [r3, #4]
 8008974:	609a      	str	r2, [r3, #8]
 8008976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008978:	f107 0320 	add.w	r3, r7, #32
 800897c:	2200      	movs	r2, #0
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008982:	1d3b      	adds	r3, r7, #4
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	605a      	str	r2, [r3, #4]
 800898a:	609a      	str	r2, [r3, #8]
 800898c:	60da      	str	r2, [r3, #12]
 800898e:	611a      	str	r2, [r3, #16]
 8008990:	615a      	str	r2, [r3, #20]
 8008992:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8008994:	4b37      	ldr	r3, [pc, #220]	; (8008a74 <MX_TIM3_Init+0x110>)
 8008996:	4a38      	ldr	r2, [pc, #224]	; (8008a78 <MX_TIM3_Init+0x114>)
 8008998:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 800899a:	4b36      	ldr	r3, [pc, #216]	; (8008a74 <MX_TIM3_Init+0x110>)
 800899c:	2229      	movs	r2, #41	; 0x29
 800899e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089a0:	4b34      	ldr	r3, [pc, #208]	; (8008a74 <MX_TIM3_Init+0x110>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 80089a6:	4b33      	ldr	r3, [pc, #204]	; (8008a74 <MX_TIM3_Init+0x110>)
 80089a8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80089ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089ae:	4b31      	ldr	r3, [pc, #196]	; (8008a74 <MX_TIM3_Init+0x110>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80089b4:	4b2f      	ldr	r3, [pc, #188]	; (8008a74 <MX_TIM3_Init+0x110>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80089ba:	482e      	ldr	r0, [pc, #184]	; (8008a74 <MX_TIM3_Init+0x110>)
 80089bc:	f007 f826 	bl	800fa0c <HAL_TIM_Base_Init>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80089c6:	f7ff fba7 	bl	8008118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80089ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80089d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089d4:	4619      	mov	r1, r3
 80089d6:	4827      	ldr	r0, [pc, #156]	; (8008a74 <MX_TIM3_Init+0x110>)
 80089d8:	f007 fb28 	bl	801002c <HAL_TIM_ConfigClockSource>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80089e2:	f7ff fb99 	bl	8008118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80089e6:	4823      	ldr	r0, [pc, #140]	; (8008a74 <MX_TIM3_Init+0x110>)
 80089e8:	f007 f85f 	bl	800faaa <HAL_TIM_PWM_Init>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80089f2:	f7ff fb91 	bl	8008118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80089f6:	2300      	movs	r3, #0
 80089f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089fa:	2300      	movs	r3, #0
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80089fe:	f107 0320 	add.w	r3, r7, #32
 8008a02:	4619      	mov	r1, r3
 8008a04:	481b      	ldr	r0, [pc, #108]	; (8008a74 <MX_TIM3_Init+0x110>)
 8008a06:	f008 f83f 	bl	8010a88 <HAL_TIMEx_MasterConfigSynchronization>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8008a10:	f7ff fb82 	bl	8008118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008a14:	2360      	movs	r3, #96	; 0x60
 8008a16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008a20:	2300      	movs	r3, #0
 8008a22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008a24:	1d3b      	adds	r3, r7, #4
 8008a26:	2200      	movs	r2, #0
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4812      	ldr	r0, [pc, #72]	; (8008a74 <MX_TIM3_Init+0x110>)
 8008a2c:	f007 fa38 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8008a36:	f7ff fb6f 	bl	8008118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008a3a:	1d3b      	adds	r3, r7, #4
 8008a3c:	2204      	movs	r2, #4
 8008a3e:	4619      	mov	r1, r3
 8008a40:	480c      	ldr	r0, [pc, #48]	; (8008a74 <MX_TIM3_Init+0x110>)
 8008a42:	f007 fa2d 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8008a4c:	f7ff fb64 	bl	8008118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008a50:	1d3b      	adds	r3, r7, #4
 8008a52:	220c      	movs	r2, #12
 8008a54:	4619      	mov	r1, r3
 8008a56:	4807      	ldr	r0, [pc, #28]	; (8008a74 <MX_TIM3_Init+0x110>)
 8008a58:	f007 fa22 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8008a62:	f7ff fb59 	bl	8008118 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8008a66:	4803      	ldr	r0, [pc, #12]	; (8008a74 <MX_TIM3_Init+0x110>)
 8008a68:	f000 fc3c 	bl	80092e4 <HAL_TIM_MspPostInit>

}
 8008a6c:	bf00      	nop
 8008a6e:	3738      	adds	r7, #56	; 0x38
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	200072a0 	.word	0x200072a0
 8008a78:	40000400 	.word	0x40000400

08008a7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08e      	sub	sp, #56	; 0x38
 8008a80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008a86:	2200      	movs	r2, #0
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	605a      	str	r2, [r3, #4]
 8008a8c:	609a      	str	r2, [r3, #8]
 8008a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a90:	f107 0320 	add.w	r3, r7, #32
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008a9a:	1d3b      	adds	r3, r7, #4
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	605a      	str	r2, [r3, #4]
 8008aa2:	609a      	str	r2, [r3, #8]
 8008aa4:	60da      	str	r2, [r3, #12]
 8008aa6:	611a      	str	r2, [r3, #16]
 8008aa8:	615a      	str	r2, [r3, #20]
 8008aaa:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8008aac:	4b3d      	ldr	r3, [pc, #244]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008aae:	4a3e      	ldr	r2, [pc, #248]	; (8008ba8 <MX_TIM4_Init+0x12c>)
 8008ab0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8008ab2:	4b3c      	ldr	r3, [pc, #240]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008ab4:	2229      	movs	r2, #41	; 0x29
 8008ab6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ab8:	4b3a      	ldr	r3, [pc, #232]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 8008abe:	4b39      	ldr	r3, [pc, #228]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008ac0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8008ac4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ac6:	4b37      	ldr	r3, [pc, #220]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008acc:	4b35      	ldr	r3, [pc, #212]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008ad2:	4834      	ldr	r0, [pc, #208]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008ad4:	f006 ff9a 	bl	800fa0c <HAL_TIM_Base_Init>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8008ade:	f7ff fb1b 	bl	8008118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008ae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008aec:	4619      	mov	r1, r3
 8008aee:	482d      	ldr	r0, [pc, #180]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008af0:	f007 fa9c 	bl	801002c <HAL_TIM_ConfigClockSource>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8008afa:	f7ff fb0d 	bl	8008118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008afe:	4829      	ldr	r0, [pc, #164]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008b00:	f006 ffd3 	bl	800faaa <HAL_TIM_PWM_Init>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8008b0a:	f7ff fb05 	bl	8008118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b12:	2300      	movs	r3, #0
 8008b14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008b16:	f107 0320 	add.w	r3, r7, #32
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4821      	ldr	r0, [pc, #132]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008b1e:	f007 ffb3 	bl	8010a88 <HAL_TIMEx_MasterConfigSynchronization>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8008b28:	f7ff faf6 	bl	8008118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008b2c:	2360      	movs	r3, #96	; 0x60
 8008b2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008b34:	2300      	movs	r3, #0
 8008b36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008b3c:	1d3b      	adds	r3, r7, #4
 8008b3e:	2200      	movs	r2, #0
 8008b40:	4619      	mov	r1, r3
 8008b42:	4818      	ldr	r0, [pc, #96]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008b44:	f007 f9ac 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8008b4e:	f7ff fae3 	bl	8008118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008b52:	1d3b      	adds	r3, r7, #4
 8008b54:	2204      	movs	r2, #4
 8008b56:	4619      	mov	r1, r3
 8008b58:	4812      	ldr	r0, [pc, #72]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008b5a:	f007 f9a1 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8008b64:	f7ff fad8 	bl	8008118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008b68:	1d3b      	adds	r3, r7, #4
 8008b6a:	2208      	movs	r2, #8
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	480d      	ldr	r0, [pc, #52]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008b70:	f007 f996 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8008b7a:	f7ff facd 	bl	8008118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008b7e:	1d3b      	adds	r3, r7, #4
 8008b80:	220c      	movs	r2, #12
 8008b82:	4619      	mov	r1, r3
 8008b84:	4807      	ldr	r0, [pc, #28]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008b86:	f007 f98b 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8008b90:	f7ff fac2 	bl	8008118 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8008b94:	4803      	ldr	r0, [pc, #12]	; (8008ba4 <MX_TIM4_Init+0x128>)
 8008b96:	f000 fba5 	bl	80092e4 <HAL_TIM_MspPostInit>

}
 8008b9a:	bf00      	nop
 8008b9c:	3738      	adds	r7, #56	; 0x38
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	200071e0 	.word	0x200071e0
 8008ba8:	40000800 	.word	0x40000800

08008bac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08a      	sub	sp, #40	; 0x28
 8008bb0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008bb2:	f107 0320 	add.w	r3, r7, #32
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008bbc:	1d3b      	adds	r3, r7, #4
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	605a      	str	r2, [r3, #4]
 8008bc4:	609a      	str	r2, [r3, #8]
 8008bc6:	60da      	str	r2, [r3, #12]
 8008bc8:	611a      	str	r2, [r3, #16]
 8008bca:	615a      	str	r2, [r3, #20]
 8008bcc:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8008bce:	4b27      	ldr	r3, [pc, #156]	; (8008c6c <MX_TIM5_Init+0xc0>)
 8008bd0:	4a27      	ldr	r2, [pc, #156]	; (8008c70 <MX_TIM5_Init+0xc4>)
 8008bd2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 168-1;
 8008bd4:	4b25      	ldr	r3, [pc, #148]	; (8008c6c <MX_TIM5_Init+0xc0>)
 8008bd6:	22a7      	movs	r2, #167	; 0xa7
 8008bd8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008bda:	4b24      	ldr	r3, [pc, #144]	; (8008c6c <MX_TIM5_Init+0xc0>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8008be0:	4b22      	ldr	r3, [pc, #136]	; (8008c6c <MX_TIM5_Init+0xc0>)
 8008be2:	f242 720f 	movw	r2, #9999	; 0x270f
 8008be6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008be8:	4b20      	ldr	r3, [pc, #128]	; (8008c6c <MX_TIM5_Init+0xc0>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008bee:	4b1f      	ldr	r3, [pc, #124]	; (8008c6c <MX_TIM5_Init+0xc0>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8008bf4:	481d      	ldr	r0, [pc, #116]	; (8008c6c <MX_TIM5_Init+0xc0>)
 8008bf6:	f006 ff58 	bl	800faaa <HAL_TIM_PWM_Init>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8008c00:	f7ff fa8a 	bl	8008118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c04:	2300      	movs	r3, #0
 8008c06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008c0c:	f107 0320 	add.w	r3, r7, #32
 8008c10:	4619      	mov	r1, r3
 8008c12:	4816      	ldr	r0, [pc, #88]	; (8008c6c <MX_TIM5_Init+0xc0>)
 8008c14:	f007 ff38 	bl	8010a88 <HAL_TIMEx_MasterConfigSynchronization>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8008c1e:	f7ff fa7b 	bl	8008118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008c22:	2360      	movs	r3, #96	; 0x60
 8008c24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008c32:	1d3b      	adds	r3, r7, #4
 8008c34:	2204      	movs	r2, #4
 8008c36:	4619      	mov	r1, r3
 8008c38:	480c      	ldr	r0, [pc, #48]	; (8008c6c <MX_TIM5_Init+0xc0>)
 8008c3a:	f007 f931 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8008c44:	f7ff fa68 	bl	8008118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008c48:	1d3b      	adds	r3, r7, #4
 8008c4a:	2208      	movs	r2, #8
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	4807      	ldr	r0, [pc, #28]	; (8008c6c <MX_TIM5_Init+0xc0>)
 8008c50:	f007 f926 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8008c5a:	f7ff fa5d 	bl	8008118 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8008c5e:	4803      	ldr	r0, [pc, #12]	; (8008c6c <MX_TIM5_Init+0xc0>)
 8008c60:	f000 fb40 	bl	80092e4 <HAL_TIM_MspPostInit>

}
 8008c64:	bf00      	nop
 8008c66:	3728      	adds	r7, #40	; 0x28
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20007260 	.word	0x20007260
 8008c70:	40000c00 	.word	0x40000c00

08008c74 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b092      	sub	sp, #72	; 0x48
 8008c78:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	605a      	str	r2, [r3, #4]
 8008c8e:	609a      	str	r2, [r3, #8]
 8008c90:	60da      	str	r2, [r3, #12]
 8008c92:	611a      	str	r2, [r3, #16]
 8008c94:	615a      	str	r2, [r3, #20]
 8008c96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008c98:	1d3b      	adds	r3, r7, #4
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f011 fae1 	bl	801a266 <memset>

  htim8.Instance = TIM8;
 8008ca4:	4b33      	ldr	r3, [pc, #204]	; (8008d74 <MX_TIM8_Init+0x100>)
 8008ca6:	4a34      	ldr	r2, [pc, #208]	; (8008d78 <MX_TIM8_Init+0x104>)
 8008ca8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008caa:	4b32      	ldr	r3, [pc, #200]	; (8008d74 <MX_TIM8_Init+0x100>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cb0:	4b30      	ldr	r3, [pc, #192]	; (8008d74 <MX_TIM8_Init+0x100>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8008cb6:	4b2f      	ldr	r3, [pc, #188]	; (8008d74 <MX_TIM8_Init+0x100>)
 8008cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cbc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cbe:	4b2d      	ldr	r3, [pc, #180]	; (8008d74 <MX_TIM8_Init+0x100>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008cc4:	4b2b      	ldr	r3, [pc, #172]	; (8008d74 <MX_TIM8_Init+0x100>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cca:	4b2a      	ldr	r3, [pc, #168]	; (8008d74 <MX_TIM8_Init+0x100>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8008cd0:	4828      	ldr	r0, [pc, #160]	; (8008d74 <MX_TIM8_Init+0x100>)
 8008cd2:	f006 feea 	bl	800faaa <HAL_TIM_PWM_Init>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8008cdc:	f7ff fa1c 	bl	8008118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008ce8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008cec:	4619      	mov	r1, r3
 8008cee:	4821      	ldr	r0, [pc, #132]	; (8008d74 <MX_TIM8_Init+0x100>)
 8008cf0:	f007 feca 	bl	8010a88 <HAL_TIMEx_MasterConfigSynchronization>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8008cfa:	f7ff fa0d 	bl	8008118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008cfe:	2360      	movs	r3, #96	; 0x60
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008d06:	2300      	movs	r3, #0
 8008d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008d12:	2300      	movs	r3, #0
 8008d14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008d16:	2300      	movs	r3, #0
 8008d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d1e:	2200      	movs	r2, #0
 8008d20:	4619      	mov	r1, r3
 8008d22:	4814      	ldr	r0, [pc, #80]	; (8008d74 <MX_TIM8_Init+0x100>)
 8008d24:	f007 f8bc 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8008d2e:	f7ff f9f3 	bl	8008118 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008d32:	2300      	movs	r3, #0
 8008d34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008d36:	2300      	movs	r3, #0
 8008d38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008d42:	2300      	movs	r3, #0
 8008d44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008d50:	1d3b      	adds	r3, r7, #4
 8008d52:	4619      	mov	r1, r3
 8008d54:	4807      	ldr	r0, [pc, #28]	; (8008d74 <MX_TIM8_Init+0x100>)
 8008d56:	f007 ff13 	bl	8010b80 <HAL_TIMEx_ConfigBreakDeadTime>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8008d60:	f7ff f9da 	bl	8008118 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8008d64:	4803      	ldr	r0, [pc, #12]	; (8008d74 <MX_TIM8_Init+0x100>)
 8008d66:	f000 fabd 	bl	80092e4 <HAL_TIM_MspPostInit>

}
 8008d6a:	bf00      	nop
 8008d6c:	3748      	adds	r7, #72	; 0x48
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	200071a0 	.word	0x200071a0
 8008d78:	40010400 	.word	0x40010400

08008d7c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008d82:	463b      	mov	r3, r7
 8008d84:	2200      	movs	r2, #0
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	605a      	str	r2, [r3, #4]
 8008d8a:	609a      	str	r2, [r3, #8]
 8008d8c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8008d8e:	4b21      	ldr	r3, [pc, #132]	; (8008e14 <MX_TIM9_Init+0x98>)
 8008d90:	4a21      	ldr	r2, [pc, #132]	; (8008e18 <MX_TIM9_Init+0x9c>)
 8008d92:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8008d94:	4b1f      	ldr	r3, [pc, #124]	; (8008e14 <MX_TIM9_Init+0x98>)
 8008d96:	22a7      	movs	r2, #167	; 0xa7
 8008d98:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d9a:	4b1e      	ldr	r3, [pc, #120]	; (8008e14 <MX_TIM9_Init+0x98>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65536-1;
 8008da0:	4b1c      	ldr	r3, [pc, #112]	; (8008e14 <MX_TIM9_Init+0x98>)
 8008da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008da6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008da8:	4b1a      	ldr	r3, [pc, #104]	; (8008e14 <MX_TIM9_Init+0x98>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008dae:	4b19      	ldr	r3, [pc, #100]	; (8008e14 <MX_TIM9_Init+0x98>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8008db4:	4817      	ldr	r0, [pc, #92]	; (8008e14 <MX_TIM9_Init+0x98>)
 8008db6:	f006 fea3 	bl	800fb00 <HAL_TIM_IC_Init>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8008dc0:	f7ff f9aa 	bl	8008118 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8008dd0:	230f      	movs	r3, #15
 8008dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008dd4:	463b      	mov	r3, r7
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	4619      	mov	r1, r3
 8008dda:	480e      	ldr	r0, [pc, #56]	; (8008e14 <MX_TIM9_Init+0x98>)
 8008ddc:	f006 ffc3 	bl	800fd66 <HAL_TIM_IC_ConfigChannel>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 8008de6:	f7ff f997 	bl	8008118 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8008dea:	2302      	movs	r3, #2
 8008dec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8008dee:	2302      	movs	r3, #2
 8008df0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICFilter = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8008df6:	463b      	mov	r3, r7
 8008df8:	2204      	movs	r2, #4
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4805      	ldr	r0, [pc, #20]	; (8008e14 <MX_TIM9_Init+0x98>)
 8008dfe:	f006 ffb2 	bl	800fd66 <HAL_TIM_IC_ConfigChannel>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <MX_TIM9_Init+0x90>
  {
    Error_Handler();
 8008e08:	f7ff f986 	bl	8008118 <Error_Handler>
  }

}
 8008e0c:	bf00      	nop
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	20007320 	.word	0x20007320
 8008e18:	40014000 	.word	0x40014000

08008e1c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e22:	1d3b      	adds	r3, r7, #4
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	605a      	str	r2, [r3, #4]
 8008e2a:	609a      	str	r2, [r3, #8]
 8008e2c:	60da      	str	r2, [r3, #12]
 8008e2e:	611a      	str	r2, [r3, #16]
 8008e30:	615a      	str	r2, [r3, #20]
 8008e32:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 8008e34:	4b1e      	ldr	r3, [pc, #120]	; (8008eb0 <MX_TIM10_Init+0x94>)
 8008e36:	4a1f      	ldr	r2, [pc, #124]	; (8008eb4 <MX_TIM10_Init+0x98>)
 8008e38:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8008e3a:	4b1d      	ldr	r3, [pc, #116]	; (8008eb0 <MX_TIM10_Init+0x94>)
 8008e3c:	22a7      	movs	r2, #167	; 0xa7
 8008e3e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e40:	4b1b      	ldr	r3, [pc, #108]	; (8008eb0 <MX_TIM10_Init+0x94>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8008e46:	4b1a      	ldr	r3, [pc, #104]	; (8008eb0 <MX_TIM10_Init+0x94>)
 8008e48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008e4c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e4e:	4b18      	ldr	r3, [pc, #96]	; (8008eb0 <MX_TIM10_Init+0x94>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e54:	4b16      	ldr	r3, [pc, #88]	; (8008eb0 <MX_TIM10_Init+0x94>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8008e5a:	4815      	ldr	r0, [pc, #84]	; (8008eb0 <MX_TIM10_Init+0x94>)
 8008e5c:	f006 fdd6 	bl	800fa0c <HAL_TIM_Base_Init>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8008e66:	f7ff f957 	bl	8008118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8008e6a:	4811      	ldr	r0, [pc, #68]	; (8008eb0 <MX_TIM10_Init+0x94>)
 8008e6c:	f006 fe1d 	bl	800faaa <HAL_TIM_PWM_Init>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8008e76:	f7ff f94f 	bl	8008118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e7a:	2360      	movs	r3, #96	; 0x60
 8008e7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8008e7e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008e82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e84:	2300      	movs	r3, #0
 8008e86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008e8c:	1d3b      	adds	r3, r7, #4
 8008e8e:	2200      	movs	r2, #0
 8008e90:	4619      	mov	r1, r3
 8008e92:	4807      	ldr	r0, [pc, #28]	; (8008eb0 <MX_TIM10_Init+0x94>)
 8008e94:	f007 f804 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8008e9e:	f7ff f93b 	bl	8008118 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 8008ea2:	4803      	ldr	r0, [pc, #12]	; (8008eb0 <MX_TIM10_Init+0x94>)
 8008ea4:	f000 fa1e 	bl	80092e4 <HAL_TIM_MspPostInit>

}
 8008ea8:	bf00      	nop
 8008eaa:	3720      	adds	r7, #32
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20007220 	.word	0x20007220
 8008eb4:	40014400 	.word	0x40014400

08008eb8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b088      	sub	sp, #32
 8008ebc:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008ebe:	1d3b      	adds	r3, r7, #4
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	605a      	str	r2, [r3, #4]
 8008ec6:	609a      	str	r2, [r3, #8]
 8008ec8:	60da      	str	r2, [r3, #12]
 8008eca:	611a      	str	r2, [r3, #16]
 8008ecc:	615a      	str	r2, [r3, #20]
 8008ece:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8008ed0:	4b1f      	ldr	r3, [pc, #124]	; (8008f50 <MX_TIM12_Init+0x98>)
 8008ed2:	4a20      	ldr	r2, [pc, #128]	; (8008f54 <MX_TIM12_Init+0x9c>)
 8008ed4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8008ed6:	4b1e      	ldr	r3, [pc, #120]	; (8008f50 <MX_TIM12_Init+0x98>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008edc:	4b1c      	ldr	r3, [pc, #112]	; (8008f50 <MX_TIM12_Init+0x98>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8008ee2:	4b1b      	ldr	r3, [pc, #108]	; (8008f50 <MX_TIM12_Init+0x98>)
 8008ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ee8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008eea:	4b19      	ldr	r3, [pc, #100]	; (8008f50 <MX_TIM12_Init+0x98>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ef0:	4b17      	ldr	r3, [pc, #92]	; (8008f50 <MX_TIM12_Init+0x98>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8008ef6:	4816      	ldr	r0, [pc, #88]	; (8008f50 <MX_TIM12_Init+0x98>)
 8008ef8:	f006 fdd7 	bl	800faaa <HAL_TIM_PWM_Init>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8008f02:	f7ff f909 	bl	8008118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f06:	2360      	movs	r3, #96	; 0x60
 8008f08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f12:	2300      	movs	r3, #0
 8008f14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f16:	1d3b      	adds	r3, r7, #4
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	480c      	ldr	r0, [pc, #48]	; (8008f50 <MX_TIM12_Init+0x98>)
 8008f1e:	f006 ffbf 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8008f28:	f7ff f8f6 	bl	8008118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008f2c:	1d3b      	adds	r3, r7, #4
 8008f2e:	2204      	movs	r2, #4
 8008f30:	4619      	mov	r1, r3
 8008f32:	4807      	ldr	r0, [pc, #28]	; (8008f50 <MX_TIM12_Init+0x98>)
 8008f34:	f006 ffb4 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d001      	beq.n	8008f42 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8008f3e:	f7ff f8eb 	bl	8008118 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8008f42:	4803      	ldr	r0, [pc, #12]	; (8008f50 <MX_TIM12_Init+0x98>)
 8008f44:	f000 f9ce 	bl	80092e4 <HAL_TIM_MspPostInit>

}
 8008f48:	bf00      	nop
 8008f4a:	3720      	adds	r7, #32
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	200073e0 	.word	0x200073e0
 8008f54:	40001800 	.word	0x40001800

08008f58 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008f5e:	1d3b      	adds	r3, r7, #4
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	605a      	str	r2, [r3, #4]
 8008f66:	609a      	str	r2, [r3, #8]
 8008f68:	60da      	str	r2, [r3, #12]
 8008f6a:	611a      	str	r2, [r3, #16]
 8008f6c:	615a      	str	r2, [r3, #20]
 8008f6e:	619a      	str	r2, [r3, #24]

  htim13.Instance = TIM13;
 8008f70:	4b1e      	ldr	r3, [pc, #120]	; (8008fec <MX_TIM13_Init+0x94>)
 8008f72:	4a1f      	ldr	r2, [pc, #124]	; (8008ff0 <MX_TIM13_Init+0x98>)
 8008f74:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 168-1;
 8008f76:	4b1d      	ldr	r3, [pc, #116]	; (8008fec <MX_TIM13_Init+0x94>)
 8008f78:	22a7      	movs	r2, #167	; 0xa7
 8008f7a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f7c:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <MX_TIM13_Init+0x94>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 8008f82:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <MX_TIM13_Init+0x94>)
 8008f84:	f242 720f 	movw	r2, #9999	; 0x270f
 8008f88:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f8a:	4b18      	ldr	r3, [pc, #96]	; (8008fec <MX_TIM13_Init+0x94>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f90:	4b16      	ldr	r3, [pc, #88]	; (8008fec <MX_TIM13_Init+0x94>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8008f96:	4815      	ldr	r0, [pc, #84]	; (8008fec <MX_TIM13_Init+0x94>)
 8008f98:	f006 fd38 	bl	800fa0c <HAL_TIM_Base_Init>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8008fa2:	f7ff f8b9 	bl	8008118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8008fa6:	4811      	ldr	r0, [pc, #68]	; (8008fec <MX_TIM13_Init+0x94>)
 8008fa8:	f006 fd7f 	bl	800faaa <HAL_TIM_PWM_Init>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8008fb2:	f7ff f8b1 	bl	8008118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008fb6:	2360      	movs	r3, #96	; 0x60
 8008fb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 450;
 8008fba:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8008fbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008fc8:	1d3b      	adds	r3, r7, #4
 8008fca:	2200      	movs	r2, #0
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4807      	ldr	r0, [pc, #28]	; (8008fec <MX_TIM13_Init+0x94>)
 8008fd0:	f006 ff66 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8008fda:	f7ff f89d 	bl	8008118 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim13);
 8008fde:	4803      	ldr	r0, [pc, #12]	; (8008fec <MX_TIM13_Init+0x94>)
 8008fe0:	f000 f980 	bl	80092e4 <HAL_TIM_MspPostInit>

}
 8008fe4:	bf00      	nop
 8008fe6:	3720      	adds	r7, #32
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	200072e0 	.word	0x200072e0
 8008ff0:	40001c00 	.word	0x40001c00

08008ff4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008ffa:	1d3b      	adds	r3, r7, #4
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	605a      	str	r2, [r3, #4]
 8009002:	609a      	str	r2, [r3, #8]
 8009004:	60da      	str	r2, [r3, #12]
 8009006:	611a      	str	r2, [r3, #16]
 8009008:	615a      	str	r2, [r3, #20]
 800900a:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 800900c:	4b1e      	ldr	r3, [pc, #120]	; (8009088 <MX_TIM14_Init+0x94>)
 800900e:	4a1f      	ldr	r2, [pc, #124]	; (800908c <MX_TIM14_Init+0x98>)
 8009010:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 168-1;
 8009012:	4b1d      	ldr	r3, [pc, #116]	; (8009088 <MX_TIM14_Init+0x94>)
 8009014:	22a7      	movs	r2, #167	; 0xa7
 8009016:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009018:	4b1b      	ldr	r3, [pc, #108]	; (8009088 <MX_TIM14_Init+0x94>)
 800901a:	2200      	movs	r2, #0
 800901c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 800901e:	4b1a      	ldr	r3, [pc, #104]	; (8009088 <MX_TIM14_Init+0x94>)
 8009020:	f242 720f 	movw	r2, #9999	; 0x270f
 8009024:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009026:	4b18      	ldr	r3, [pc, #96]	; (8009088 <MX_TIM14_Init+0x94>)
 8009028:	2200      	movs	r2, #0
 800902a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800902c:	4b16      	ldr	r3, [pc, #88]	; (8009088 <MX_TIM14_Init+0x94>)
 800902e:	2200      	movs	r2, #0
 8009030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8009032:	4815      	ldr	r0, [pc, #84]	; (8009088 <MX_TIM14_Init+0x94>)
 8009034:	f006 fcea 	bl	800fa0c <HAL_TIM_Base_Init>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800903e:	f7ff f86b 	bl	8008118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8009042:	4811      	ldr	r0, [pc, #68]	; (8009088 <MX_TIM14_Init+0x94>)
 8009044:	f006 fd31 	bl	800faaa <HAL_TIM_PWM_Init>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800904e:	f7ff f863 	bl	8008118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009052:	2360      	movs	r3, #96	; 0x60
 8009054:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 450;
 8009056:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800905a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009064:	1d3b      	adds	r3, r7, #4
 8009066:	2200      	movs	r2, #0
 8009068:	4619      	mov	r1, r3
 800906a:	4807      	ldr	r0, [pc, #28]	; (8009088 <MX_TIM14_Init+0x94>)
 800906c:	f006 ff18 	bl	800fea0 <HAL_TIM_PWM_ConfigChannel>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8009076:	f7ff f84f 	bl	8008118 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 800907a:	4803      	ldr	r0, [pc, #12]	; (8009088 <MX_TIM14_Init+0x94>)
 800907c:	f000 f932 	bl	80092e4 <HAL_TIM_MspPostInit>

}
 8009080:	bf00      	nop
 8009082:	3720      	adds	r7, #32
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	200073a0 	.word	0x200073a0
 800908c:	40002000 	.word	0x40002000

08009090 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009090:	b480      	push	{r7}
 8009092:	b089      	sub	sp, #36	; 0x24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a0:	d10e      	bne.n	80090c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80090a2:	2300      	movs	r3, #0
 80090a4:	61fb      	str	r3, [r7, #28]
 80090a6:	4b3b      	ldr	r3, [pc, #236]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	4a3a      	ldr	r2, [pc, #232]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 80090ac:	f043 0301 	orr.w	r3, r3, #1
 80090b0:	6413      	str	r3, [r2, #64]	; 0x40
 80090b2:	4b38      	ldr	r3, [pc, #224]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	61fb      	str	r3, [r7, #28]
 80090bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80090be:	e062      	b.n	8009186 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM3)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a34      	ldr	r2, [pc, #208]	; (8009198 <HAL_TIM_Base_MspInit+0x108>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d10e      	bne.n	80090e8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80090ca:	2300      	movs	r3, #0
 80090cc:	61bb      	str	r3, [r7, #24]
 80090ce:	4b31      	ldr	r3, [pc, #196]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 80090d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d2:	4a30      	ldr	r2, [pc, #192]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 80090d4:	f043 0302 	orr.w	r3, r3, #2
 80090d8:	6413      	str	r3, [r2, #64]	; 0x40
 80090da:	4b2e      	ldr	r3, [pc, #184]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	61bb      	str	r3, [r7, #24]
 80090e4:	69bb      	ldr	r3, [r7, #24]
}
 80090e6:	e04e      	b.n	8009186 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM4)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a2b      	ldr	r2, [pc, #172]	; (800919c <HAL_TIM_Base_MspInit+0x10c>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d10e      	bne.n	8009110 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80090f2:	2300      	movs	r3, #0
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	4b27      	ldr	r3, [pc, #156]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	4a26      	ldr	r2, [pc, #152]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 80090fc:	f043 0304 	orr.w	r3, r3, #4
 8009100:	6413      	str	r3, [r2, #64]	; 0x40
 8009102:	4b24      	ldr	r3, [pc, #144]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 8009104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009106:	f003 0304 	and.w	r3, r3, #4
 800910a:	617b      	str	r3, [r7, #20]
 800910c:	697b      	ldr	r3, [r7, #20]
}
 800910e:	e03a      	b.n	8009186 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM10)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a22      	ldr	r2, [pc, #136]	; (80091a0 <HAL_TIM_Base_MspInit+0x110>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d10e      	bne.n	8009138 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800911a:	2300      	movs	r3, #0
 800911c:	613b      	str	r3, [r7, #16]
 800911e:	4b1d      	ldr	r3, [pc, #116]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 8009120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009122:	4a1c      	ldr	r2, [pc, #112]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 8009124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009128:	6453      	str	r3, [r2, #68]	; 0x44
 800912a:	4b1a      	ldr	r3, [pc, #104]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 800912c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800912e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009132:	613b      	str	r3, [r7, #16]
 8009134:	693b      	ldr	r3, [r7, #16]
}
 8009136:	e026      	b.n	8009186 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM13)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a19      	ldr	r2, [pc, #100]	; (80091a4 <HAL_TIM_Base_MspInit+0x114>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d10e      	bne.n	8009160 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8009142:	2300      	movs	r3, #0
 8009144:	60fb      	str	r3, [r7, #12]
 8009146:	4b13      	ldr	r3, [pc, #76]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 8009148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914a:	4a12      	ldr	r2, [pc, #72]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 800914c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009150:	6413      	str	r3, [r2, #64]	; 0x40
 8009152:	4b10      	ldr	r3, [pc, #64]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 8009154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
}
 800915e:	e012      	b.n	8009186 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM14)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a10      	ldr	r2, [pc, #64]	; (80091a8 <HAL_TIM_Base_MspInit+0x118>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d10d      	bne.n	8009186 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800916a:	2300      	movs	r3, #0
 800916c:	60bb      	str	r3, [r7, #8]
 800916e:	4b09      	ldr	r3, [pc, #36]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 8009170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009172:	4a08      	ldr	r2, [pc, #32]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 8009174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009178:	6413      	str	r3, [r2, #64]	; 0x40
 800917a:	4b06      	ldr	r3, [pc, #24]	; (8009194 <HAL_TIM_Base_MspInit+0x104>)
 800917c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009182:	60bb      	str	r3, [r7, #8]
 8009184:	68bb      	ldr	r3, [r7, #8]
}
 8009186:	bf00      	nop
 8009188:	3724      	adds	r7, #36	; 0x24
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	40023800 	.word	0x40023800
 8009198:	40000400 	.word	0x40000400
 800919c:	40000800 	.word	0x40000800
 80091a0:	40014400 	.word	0x40014400
 80091a4:	40001c00 	.word	0x40001c00
 80091a8:	40002000 	.word	0x40002000

080091ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a22      	ldr	r2, [pc, #136]	; (8009244 <HAL_TIM_PWM_MspInit+0x98>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d10e      	bne.n	80091dc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80091be:	2300      	movs	r3, #0
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	4b21      	ldr	r3, [pc, #132]	; (8009248 <HAL_TIM_PWM_MspInit+0x9c>)
 80091c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c6:	4a20      	ldr	r2, [pc, #128]	; (8009248 <HAL_TIM_PWM_MspInit+0x9c>)
 80091c8:	f043 0308 	orr.w	r3, r3, #8
 80091cc:	6413      	str	r3, [r2, #64]	; 0x40
 80091ce:	4b1e      	ldr	r3, [pc, #120]	; (8009248 <HAL_TIM_PWM_MspInit+0x9c>)
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	f003 0308 	and.w	r3, r3, #8
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80091da:	e02e      	b.n	800923a <HAL_TIM_PWM_MspInit+0x8e>
  else if(tim_pwmHandle->Instance==TIM8)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a1a      	ldr	r2, [pc, #104]	; (800924c <HAL_TIM_PWM_MspInit+0xa0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d116      	bne.n	8009214 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80091e6:	2300      	movs	r3, #0
 80091e8:	613b      	str	r3, [r7, #16]
 80091ea:	4b17      	ldr	r3, [pc, #92]	; (8009248 <HAL_TIM_PWM_MspInit+0x9c>)
 80091ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ee:	4a16      	ldr	r2, [pc, #88]	; (8009248 <HAL_TIM_PWM_MspInit+0x9c>)
 80091f0:	f043 0302 	orr.w	r3, r3, #2
 80091f4:	6453      	str	r3, [r2, #68]	; 0x44
 80091f6:	4b14      	ldr	r3, [pc, #80]	; (8009248 <HAL_TIM_PWM_MspInit+0x9c>)
 80091f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8009202:	2200      	movs	r2, #0
 8009204:	2100      	movs	r1, #0
 8009206:	202e      	movs	r0, #46	; 0x2e
 8009208:	f000 fdf0 	bl	8009dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800920c:	202e      	movs	r0, #46	; 0x2e
 800920e:	f000 fe09 	bl	8009e24 <HAL_NVIC_EnableIRQ>
}
 8009212:	e012      	b.n	800923a <HAL_TIM_PWM_MspInit+0x8e>
  else if(tim_pwmHandle->Instance==TIM12)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a0d      	ldr	r2, [pc, #52]	; (8009250 <HAL_TIM_PWM_MspInit+0xa4>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d10d      	bne.n	800923a <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	4b09      	ldr	r3, [pc, #36]	; (8009248 <HAL_TIM_PWM_MspInit+0x9c>)
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	4a08      	ldr	r2, [pc, #32]	; (8009248 <HAL_TIM_PWM_MspInit+0x9c>)
 8009228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800922c:	6413      	str	r3, [r2, #64]	; 0x40
 800922e:	4b06      	ldr	r3, [pc, #24]	; (8009248 <HAL_TIM_PWM_MspInit+0x9c>)
 8009230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009236:	60fb      	str	r3, [r7, #12]
 8009238:	68fb      	ldr	r3, [r7, #12]
}
 800923a:	bf00      	nop
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	40000c00 	.word	0x40000c00
 8009248:	40023800 	.word	0x40023800
 800924c:	40010400 	.word	0x40010400
 8009250:	40001800 	.word	0x40001800

08009254 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08a      	sub	sp, #40	; 0x28
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800925c:	f107 0314 	add.w	r3, r7, #20
 8009260:	2200      	movs	r2, #0
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	605a      	str	r2, [r3, #4]
 8009266:	609a      	str	r2, [r3, #8]
 8009268:	60da      	str	r2, [r3, #12]
 800926a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM9)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a19      	ldr	r2, [pc, #100]	; (80092d8 <HAL_TIM_IC_MspInit+0x84>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d12b      	bne.n	80092ce <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8009276:	2300      	movs	r3, #0
 8009278:	613b      	str	r3, [r7, #16]
 800927a:	4b18      	ldr	r3, [pc, #96]	; (80092dc <HAL_TIM_IC_MspInit+0x88>)
 800927c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927e:	4a17      	ldr	r2, [pc, #92]	; (80092dc <HAL_TIM_IC_MspInit+0x88>)
 8009280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009284:	6453      	str	r3, [r2, #68]	; 0x44
 8009286:	4b15      	ldr	r3, [pc, #84]	; (80092dc <HAL_TIM_IC_MspInit+0x88>)
 8009288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800928e:	613b      	str	r3, [r7, #16]
 8009290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009292:	2300      	movs	r3, #0
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	4b11      	ldr	r3, [pc, #68]	; (80092dc <HAL_TIM_IC_MspInit+0x88>)
 8009298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929a:	4a10      	ldr	r2, [pc, #64]	; (80092dc <HAL_TIM_IC_MspInit+0x88>)
 800929c:	f043 0310 	orr.w	r3, r3, #16
 80092a0:	6313      	str	r3, [r2, #48]	; 0x30
 80092a2:	4b0e      	ldr	r3, [pc, #56]	; (80092dc <HAL_TIM_IC_MspInit+0x88>)
 80092a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a6:	f003 0310 	and.w	r3, r3, #16
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = LIDAR_Pin;
 80092ae:	2320      	movs	r3, #32
 80092b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092b2:	2302      	movs	r3, #2
 80092b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092b6:	2300      	movs	r3, #0
 80092b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092ba:	2300      	movs	r3, #0
 80092bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80092be:	2303      	movs	r3, #3
 80092c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LIDAR_GPIO_Port, &GPIO_InitStruct);
 80092c2:	f107 0314 	add.w	r3, r7, #20
 80092c6:	4619      	mov	r1, r3
 80092c8:	4805      	ldr	r0, [pc, #20]	; (80092e0 <HAL_TIM_IC_MspInit+0x8c>)
 80092ca:	f001 f963 	bl	800a594 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80092ce:	bf00      	nop
 80092d0:	3728      	adds	r7, #40	; 0x28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	40014000 	.word	0x40014000
 80092dc:	40023800 	.word	0x40023800
 80092e0:	40021000 	.word	0x40021000

080092e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b092      	sub	sp, #72	; 0x48
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	605a      	str	r2, [r3, #4]
 80092f6:	609a      	str	r2, [r3, #8]
 80092f8:	60da      	str	r2, [r3, #12]
 80092fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a9c      	ldr	r2, [pc, #624]	; (8009574 <HAL_TIM_MspPostInit+0x290>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d15a      	bne.n	80093bc <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009306:	2300      	movs	r3, #0
 8009308:	633b      	str	r3, [r7, #48]	; 0x30
 800930a:	4b9b      	ldr	r3, [pc, #620]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 800930c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930e:	4a9a      	ldr	r2, [pc, #616]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 8009310:	f043 0301 	orr.w	r3, r3, #1
 8009314:	6313      	str	r3, [r2, #48]	; 0x30
 8009316:	4b98      	ldr	r3, [pc, #608]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 8009318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	633b      	str	r3, [r7, #48]	; 0x30
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009322:	2300      	movs	r3, #0
 8009324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009326:	4b94      	ldr	r3, [pc, #592]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 8009328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932a:	4a93      	ldr	r2, [pc, #588]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 800932c:	f043 0302 	orr.w	r3, r3, #2
 8009330:	6313      	str	r3, [r2, #48]	; 0x30
 8009332:	4b91      	ldr	r3, [pc, #580]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 8009334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800933c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800933e:	2300      	movs	r3, #0
 8009340:	62bb      	str	r3, [r7, #40]	; 0x28
 8009342:	4b8d      	ldr	r3, [pc, #564]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 8009344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009346:	4a8c      	ldr	r2, [pc, #560]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 8009348:	f043 0304 	orr.w	r3, r3, #4
 800934c:	6313      	str	r3, [r2, #48]	; 0x30
 800934e:	4b8a      	ldr	r3, [pc, #552]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 8009350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009352:	f003 0304 	and.w	r3, r3, #4
 8009356:	62bb      	str	r3, [r7, #40]	; 0x28
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOTOR5_Pin;
 800935a:	2340      	movs	r3, #64	; 0x40
 800935c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800935e:	2302      	movs	r3, #2
 8009360:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009362:	2300      	movs	r3, #0
 8009364:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009366:	2300      	movs	r3, #0
 8009368:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800936a:	2302      	movs	r3, #2
 800936c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MOTOR5_GPIO_Port, &GPIO_InitStruct);
 800936e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009372:	4619      	mov	r1, r3
 8009374:	4881      	ldr	r0, [pc, #516]	; (800957c <HAL_TIM_MspPostInit+0x298>)
 8009376:	f001 f90d 	bl	800a594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR7_Pin;
 800937a:	2302      	movs	r3, #2
 800937c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800937e:	2302      	movs	r3, #2
 8009380:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009382:	2300      	movs	r3, #0
 8009384:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009386:	2300      	movs	r3, #0
 8009388:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800938a:	2302      	movs	r3, #2
 800938c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MOTOR7_GPIO_Port, &GPIO_InitStruct);
 800938e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009392:	4619      	mov	r1, r3
 8009394:	487a      	ldr	r0, [pc, #488]	; (8009580 <HAL_TIM_MspPostInit+0x29c>)
 8009396:	f001 f8fd 	bl	800a594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR6_Pin;
 800939a:	2380      	movs	r3, #128	; 0x80
 800939c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800939e:	2302      	movs	r3, #2
 80093a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093a6:	2300      	movs	r3, #0
 80093a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80093aa:	2302      	movs	r3, #2
 80093ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MOTOR6_GPIO_Port, &GPIO_InitStruct);
 80093ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80093b2:	4619      	mov	r1, r3
 80093b4:	4873      	ldr	r0, [pc, #460]	; (8009584 <HAL_TIM_MspPostInit+0x2a0>)
 80093b6:	f001 f8ed 	bl	800a594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80093ba:	e119      	b.n	80095f0 <HAL_TIM_MspPostInit+0x30c>
  else if(timHandle->Instance==TIM4)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a71      	ldr	r2, [pc, #452]	; (8009588 <HAL_TIM_MspPostInit+0x2a4>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d11f      	bne.n	8009406 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80093c6:	2300      	movs	r3, #0
 80093c8:	627b      	str	r3, [r7, #36]	; 0x24
 80093ca:	4b6b      	ldr	r3, [pc, #428]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 80093cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ce:	4a6a      	ldr	r2, [pc, #424]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 80093d0:	f043 0308 	orr.w	r3, r3, #8
 80093d4:	6313      	str	r3, [r2, #48]	; 0x30
 80093d6:	4b68      	ldr	r3, [pc, #416]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 80093d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093da:	f003 0308 	and.w	r3, r3, #8
 80093de:	627b      	str	r3, [r7, #36]	; 0x24
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = MOTOR1_Pin|MOTOR2_Pin|MOTOR3_Pin|MOTOR4_Pin;
 80093e2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80093e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093e8:	2302      	movs	r3, #2
 80093ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093f0:	2300      	movs	r3, #0
 80093f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80093f4:	2302      	movs	r3, #2
 80093f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80093f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80093fc:	4619      	mov	r1, r3
 80093fe:	4863      	ldr	r0, [pc, #396]	; (800958c <HAL_TIM_MspPostInit+0x2a8>)
 8009400:	f001 f8c8 	bl	800a594 <HAL_GPIO_Init>
}
 8009404:	e0f4      	b.n	80095f0 <HAL_TIM_MspPostInit+0x30c>
  else if(timHandle->Instance==TIM5)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a61      	ldr	r2, [pc, #388]	; (8009590 <HAL_TIM_MspPostInit+0x2ac>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d11e      	bne.n	800944e <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009410:	2300      	movs	r3, #0
 8009412:	623b      	str	r3, [r7, #32]
 8009414:	4b58      	ldr	r3, [pc, #352]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 8009416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009418:	4a57      	ldr	r2, [pc, #348]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	6313      	str	r3, [r2, #48]	; 0x30
 8009420:	4b55      	ldr	r3, [pc, #340]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 8009422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	623b      	str	r3, [r7, #32]
 800942a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin;
 800942c:	2306      	movs	r3, #6
 800942e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009430:	2302      	movs	r3, #2
 8009432:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009434:	2300      	movs	r3, #0
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009438:	2300      	movs	r3, #0
 800943a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800943c:	2302      	movs	r3, #2
 800943e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009440:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009444:	4619      	mov	r1, r3
 8009446:	484d      	ldr	r0, [pc, #308]	; (800957c <HAL_TIM_MspPostInit+0x298>)
 8009448:	f001 f8a4 	bl	800a594 <HAL_GPIO_Init>
}
 800944c:	e0d0      	b.n	80095f0 <HAL_TIM_MspPostInit+0x30c>
  else if(timHandle->Instance==TIM8)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a50      	ldr	r2, [pc, #320]	; (8009594 <HAL_TIM_MspPostInit+0x2b0>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d11e      	bne.n	8009496 <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009458:	2300      	movs	r3, #0
 800945a:	61fb      	str	r3, [r7, #28]
 800945c:	4b46      	ldr	r3, [pc, #280]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 800945e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009460:	4a45      	ldr	r2, [pc, #276]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 8009462:	f043 0304 	orr.w	r3, r3, #4
 8009466:	6313      	str	r3, [r2, #48]	; 0x30
 8009468:	4b43      	ldr	r3, [pc, #268]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 800946a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR8_Pin;
 8009474:	2340      	movs	r3, #64	; 0x40
 8009476:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009478:	2302      	movs	r3, #2
 800947a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800947c:	2300      	movs	r3, #0
 800947e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009480:	2300      	movs	r3, #0
 8009482:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009484:	2303      	movs	r3, #3
 8009486:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MOTOR8_GPIO_Port, &GPIO_InitStruct);
 8009488:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800948c:	4619      	mov	r1, r3
 800948e:	483d      	ldr	r0, [pc, #244]	; (8009584 <HAL_TIM_MspPostInit+0x2a0>)
 8009490:	f001 f880 	bl	800a594 <HAL_GPIO_Init>
}
 8009494:	e0ac      	b.n	80095f0 <HAL_TIM_MspPostInit+0x30c>
  else if(timHandle->Instance==TIM10)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a3f      	ldr	r2, [pc, #252]	; (8009598 <HAL_TIM_MspPostInit+0x2b4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d11e      	bne.n	80094de <HAL_TIM_MspPostInit+0x1fa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80094a0:	2300      	movs	r3, #0
 80094a2:	61bb      	str	r3, [r7, #24]
 80094a4:	4b34      	ldr	r3, [pc, #208]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 80094a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a8:	4a33      	ldr	r2, [pc, #204]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 80094aa:	f043 0320 	orr.w	r3, r3, #32
 80094ae:	6313      	str	r3, [r2, #48]	; 0x30
 80094b0:	4b31      	ldr	r3, [pc, #196]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 80094b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b4:	f003 0320 	and.w	r3, r3, #32
 80094b8:	61bb      	str	r3, [r7, #24]
 80094ba:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80094bc:	2340      	movs	r3, #64	; 0x40
 80094be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094c0:	2302      	movs	r3, #2
 80094c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c4:	2300      	movs	r3, #0
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094c8:	2300      	movs	r3, #0
 80094ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80094cc:	2303      	movs	r3, #3
 80094ce:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80094d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80094d4:	4619      	mov	r1, r3
 80094d6:	4831      	ldr	r0, [pc, #196]	; (800959c <HAL_TIM_MspPostInit+0x2b8>)
 80094d8:	f001 f85c 	bl	800a594 <HAL_GPIO_Init>
}
 80094dc:	e088      	b.n	80095f0 <HAL_TIM_MspPostInit+0x30c>
  else if(timHandle->Instance==TIM12)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a2f      	ldr	r2, [pc, #188]	; (80095a0 <HAL_TIM_MspPostInit+0x2bc>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d11f      	bne.n	8009528 <HAL_TIM_MspPostInit+0x244>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094e8:	2300      	movs	r3, #0
 80094ea:	617b      	str	r3, [r7, #20]
 80094ec:	4b22      	ldr	r3, [pc, #136]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 80094ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f0:	4a21      	ldr	r2, [pc, #132]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 80094f2:	f043 0302 	orr.w	r3, r3, #2
 80094f6:	6313      	str	r3, [r2, #48]	; 0x30
 80094f8:	4b1f      	ldr	r3, [pc, #124]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 80094fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fc:	f003 0302 	and.w	r3, r3, #2
 8009500:	617b      	str	r3, [r7, #20]
 8009502:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO3_Pin|SERVO4_Pin;
 8009504:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009508:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800950a:	2302      	movs	r3, #2
 800950c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800950e:	2300      	movs	r3, #0
 8009510:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009512:	2300      	movs	r3, #0
 8009514:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8009516:	2309      	movs	r3, #9
 8009518:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800951a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800951e:	4619      	mov	r1, r3
 8009520:	4817      	ldr	r0, [pc, #92]	; (8009580 <HAL_TIM_MspPostInit+0x29c>)
 8009522:	f001 f837 	bl	800a594 <HAL_GPIO_Init>
}
 8009526:	e063      	b.n	80095f0 <HAL_TIM_MspPostInit+0x30c>
  else if(timHandle->Instance==TIM13)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a1d      	ldr	r2, [pc, #116]	; (80095a4 <HAL_TIM_MspPostInit+0x2c0>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d13a      	bne.n	80095a8 <HAL_TIM_MspPostInit+0x2c4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009532:	2300      	movs	r3, #0
 8009534:	613b      	str	r3, [r7, #16]
 8009536:	4b10      	ldr	r3, [pc, #64]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 8009538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953a:	4a0f      	ldr	r2, [pc, #60]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 800953c:	f043 0320 	orr.w	r3, r3, #32
 8009540:	6313      	str	r3, [r2, #48]	; 0x30
 8009542:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <HAL_TIM_MspPostInit+0x294>)
 8009544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009546:	f003 0320 	and.w	r3, r3, #32
 800954a:	613b      	str	r3, [r7, #16]
 800954c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO5_Pin;
 800954e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009552:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009554:	2302      	movs	r3, #2
 8009556:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009558:	2300      	movs	r3, #0
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800955c:	2300      	movs	r3, #0
 800955e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8009560:	2309      	movs	r3, #9
 8009562:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SERVO5_GPIO_Port, &GPIO_InitStruct);
 8009564:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009568:	4619      	mov	r1, r3
 800956a:	480c      	ldr	r0, [pc, #48]	; (800959c <HAL_TIM_MspPostInit+0x2b8>)
 800956c:	f001 f812 	bl	800a594 <HAL_GPIO_Init>
}
 8009570:	e03e      	b.n	80095f0 <HAL_TIM_MspPostInit+0x30c>
 8009572:	bf00      	nop
 8009574:	40000400 	.word	0x40000400
 8009578:	40023800 	.word	0x40023800
 800957c:	40020000 	.word	0x40020000
 8009580:	40020400 	.word	0x40020400
 8009584:	40020800 	.word	0x40020800
 8009588:	40000800 	.word	0x40000800
 800958c:	40020c00 	.word	0x40020c00
 8009590:	40000c00 	.word	0x40000c00
 8009594:	40010400 	.word	0x40010400
 8009598:	40014400 	.word	0x40014400
 800959c:	40021400 	.word	0x40021400
 80095a0:	40001800 	.word	0x40001800
 80095a4:	40001c00 	.word	0x40001c00
  else if(timHandle->Instance==TIM14)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a12      	ldr	r2, [pc, #72]	; (80095f8 <HAL_TIM_MspPostInit+0x314>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d11e      	bne.n	80095f0 <HAL_TIM_MspPostInit+0x30c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80095b2:	2300      	movs	r3, #0
 80095b4:	60fb      	str	r3, [r7, #12]
 80095b6:	4b11      	ldr	r3, [pc, #68]	; (80095fc <HAL_TIM_MspPostInit+0x318>)
 80095b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ba:	4a10      	ldr	r2, [pc, #64]	; (80095fc <HAL_TIM_MspPostInit+0x318>)
 80095bc:	f043 0320 	orr.w	r3, r3, #32
 80095c0:	6313      	str	r3, [r2, #48]	; 0x30
 80095c2:	4b0e      	ldr	r3, [pc, #56]	; (80095fc <HAL_TIM_MspPostInit+0x318>)
 80095c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c6:	f003 0320 	and.w	r3, r3, #32
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO6_Pin;
 80095ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095d4:	2302      	movs	r3, #2
 80095d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095d8:	2300      	movs	r3, #0
 80095da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095dc:	2300      	movs	r3, #0
 80095de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80095e0:	2309      	movs	r3, #9
 80095e2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SERVO6_GPIO_Port, &GPIO_InitStruct);
 80095e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80095e8:	4619      	mov	r1, r3
 80095ea:	4805      	ldr	r0, [pc, #20]	; (8009600 <HAL_TIM_MspPostInit+0x31c>)
 80095ec:	f000 ffd2 	bl	800a594 <HAL_GPIO_Init>
}
 80095f0:	bf00      	nop
 80095f2:	3748      	adds	r7, #72	; 0x48
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	40002000 	.word	0x40002000
 80095fc:	40023800 	.word	0x40023800
 8009600:	40021400 	.word	0x40021400

08009604 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8009608:	4b12      	ldr	r3, [pc, #72]	; (8009654 <MX_UART7_Init+0x50>)
 800960a:	4a13      	ldr	r2, [pc, #76]	; (8009658 <MX_UART7_Init+0x54>)
 800960c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 800960e:	4b11      	ldr	r3, [pc, #68]	; (8009654 <MX_UART7_Init+0x50>)
 8009610:	4a12      	ldr	r2, [pc, #72]	; (800965c <MX_UART7_Init+0x58>)
 8009612:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8009614:	4b0f      	ldr	r3, [pc, #60]	; (8009654 <MX_UART7_Init+0x50>)
 8009616:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800961a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 800961c:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <MX_UART7_Init+0x50>)
 800961e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009622:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8009624:	4b0b      	ldr	r3, [pc, #44]	; (8009654 <MX_UART7_Init+0x50>)
 8009626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800962a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800962c:	4b09      	ldr	r3, [pc, #36]	; (8009654 <MX_UART7_Init+0x50>)
 800962e:	220c      	movs	r2, #12
 8009630:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009632:	4b08      	ldr	r3, [pc, #32]	; (8009654 <MX_UART7_Init+0x50>)
 8009634:	2200      	movs	r2, #0
 8009636:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8009638:	4b06      	ldr	r3, [pc, #24]	; (8009654 <MX_UART7_Init+0x50>)
 800963a:	2200      	movs	r2, #0
 800963c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800963e:	4805      	ldr	r0, [pc, #20]	; (8009654 <MX_UART7_Init+0x50>)
 8009640:	f007 fb04 	bl	8010c4c <HAL_UART_Init>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 800964a:	f7fe fd65 	bl	8008118 <Error_Handler>
  }

}
 800964e:	bf00      	nop
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20007420 	.word	0x20007420
 8009658:	40007800 	.word	0x40007800
 800965c:	000186a0 	.word	0x000186a0

08009660 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8009664:	4b11      	ldr	r3, [pc, #68]	; (80096ac <MX_UART8_Init+0x4c>)
 8009666:	4a12      	ldr	r2, [pc, #72]	; (80096b0 <MX_UART8_Init+0x50>)
 8009668:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 800966a:	4b10      	ldr	r3, [pc, #64]	; (80096ac <MX_UART8_Init+0x4c>)
 800966c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8009670:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8009672:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <MX_UART8_Init+0x4c>)
 8009674:	2200      	movs	r2, #0
 8009676:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8009678:	4b0c      	ldr	r3, [pc, #48]	; (80096ac <MX_UART8_Init+0x4c>)
 800967a:	2200      	movs	r2, #0
 800967c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800967e:	4b0b      	ldr	r3, [pc, #44]	; (80096ac <MX_UART8_Init+0x4c>)
 8009680:	2200      	movs	r2, #0
 8009682:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8009684:	4b09      	ldr	r3, [pc, #36]	; (80096ac <MX_UART8_Init+0x4c>)
 8009686:	220c      	movs	r2, #12
 8009688:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800968a:	4b08      	ldr	r3, [pc, #32]	; (80096ac <MX_UART8_Init+0x4c>)
 800968c:	2200      	movs	r2, #0
 800968e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8009690:	4b06      	ldr	r3, [pc, #24]	; (80096ac <MX_UART8_Init+0x4c>)
 8009692:	2200      	movs	r2, #0
 8009694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8009696:	4805      	ldr	r0, [pc, #20]	; (80096ac <MX_UART8_Init+0x4c>)
 8009698:	f007 fad8 	bl	8010c4c <HAL_UART_Init>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80096a2:	f7fe fd39 	bl	8008118 <Error_Handler>
  }

}
 80096a6:	bf00      	nop
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20007560 	.word	0x20007560
 80096b0:	40007c00 	.word	0x40007c00

080096b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80096b8:	4b11      	ldr	r3, [pc, #68]	; (8009700 <MX_USART2_UART_Init+0x4c>)
 80096ba:	4a12      	ldr	r2, [pc, #72]	; (8009704 <MX_USART2_UART_Init+0x50>)
 80096bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80096be:	4b10      	ldr	r3, [pc, #64]	; (8009700 <MX_USART2_UART_Init+0x4c>)
 80096c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80096c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80096c6:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <MX_USART2_UART_Init+0x4c>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80096cc:	4b0c      	ldr	r3, [pc, #48]	; (8009700 <MX_USART2_UART_Init+0x4c>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80096d2:	4b0b      	ldr	r3, [pc, #44]	; (8009700 <MX_USART2_UART_Init+0x4c>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80096d8:	4b09      	ldr	r3, [pc, #36]	; (8009700 <MX_USART2_UART_Init+0x4c>)
 80096da:	220c      	movs	r2, #12
 80096dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80096de:	4b08      	ldr	r3, [pc, #32]	; (8009700 <MX_USART2_UART_Init+0x4c>)
 80096e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80096e4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80096e6:	4b06      	ldr	r3, [pc, #24]	; (8009700 <MX_USART2_UART_Init+0x4c>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80096ec:	4804      	ldr	r0, [pc, #16]	; (8009700 <MX_USART2_UART_Init+0x4c>)
 80096ee:	f007 faad 	bl	8010c4c <HAL_UART_Init>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80096f8:	f7fe fd0e 	bl	8008118 <Error_Handler>
  }

}
 80096fc:	bf00      	nop
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	200075a0 	.word	0x200075a0
 8009704:	40004400 	.word	0x40004400

08009708 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800970c:	4b11      	ldr	r3, [pc, #68]	; (8009754 <MX_USART3_UART_Init+0x4c>)
 800970e:	4a12      	ldr	r2, [pc, #72]	; (8009758 <MX_USART3_UART_Init+0x50>)
 8009710:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8009712:	4b10      	ldr	r3, [pc, #64]	; (8009754 <MX_USART3_UART_Init+0x4c>)
 8009714:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8009718:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800971a:	4b0e      	ldr	r3, [pc, #56]	; (8009754 <MX_USART3_UART_Init+0x4c>)
 800971c:	2200      	movs	r2, #0
 800971e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009720:	4b0c      	ldr	r3, [pc, #48]	; (8009754 <MX_USART3_UART_Init+0x4c>)
 8009722:	2200      	movs	r2, #0
 8009724:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009726:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <MX_USART3_UART_Init+0x4c>)
 8009728:	2200      	movs	r2, #0
 800972a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800972c:	4b09      	ldr	r3, [pc, #36]	; (8009754 <MX_USART3_UART_Init+0x4c>)
 800972e:	220c      	movs	r2, #12
 8009730:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009732:	4b08      	ldr	r3, [pc, #32]	; (8009754 <MX_USART3_UART_Init+0x4c>)
 8009734:	2200      	movs	r2, #0
 8009736:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009738:	4b06      	ldr	r3, [pc, #24]	; (8009754 <MX_USART3_UART_Init+0x4c>)
 800973a:	2200      	movs	r2, #0
 800973c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800973e:	4805      	ldr	r0, [pc, #20]	; (8009754 <MX_USART3_UART_Init+0x4c>)
 8009740:	f007 fa84 	bl	8010c4c <HAL_UART_Init>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800974a:	f7fe fce5 	bl	8008118 <Error_Handler>
  }

}
 800974e:	bf00      	nop
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	20007460 	.word	0x20007460
 8009758:	40004800 	.word	0x40004800

0800975c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b090      	sub	sp, #64	; 0x40
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	605a      	str	r2, [r3, #4]
 800976e:	609a      	str	r2, [r3, #8]
 8009770:	60da      	str	r2, [r3, #12]
 8009772:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a8c      	ldr	r2, [pc, #560]	; (80099ac <HAL_UART_MspInit+0x250>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d15c      	bne.n	8009838 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800977e:	2300      	movs	r3, #0
 8009780:	62bb      	str	r3, [r7, #40]	; 0x28
 8009782:	4b8b      	ldr	r3, [pc, #556]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	4a8a      	ldr	r2, [pc, #552]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800978c:	6413      	str	r3, [r2, #64]	; 0x40
 800978e:	4b88      	ldr	r3, [pc, #544]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009792:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28
 8009798:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800979a:	2300      	movs	r3, #0
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
 800979e:	4b84      	ldr	r3, [pc, #528]	; (80099b0 <HAL_UART_MspInit+0x254>)
 80097a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a2:	4a83      	ldr	r2, [pc, #524]	; (80099b0 <HAL_UART_MspInit+0x254>)
 80097a4:	f043 0310 	orr.w	r3, r3, #16
 80097a8:	6313      	str	r3, [r2, #48]	; 0x30
 80097aa:	4b81      	ldr	r3, [pc, #516]	; (80099b0 <HAL_UART_MspInit+0x254>)
 80097ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ae:	f003 0310 	and.w	r3, r3, #16
 80097b2:	627b      	str	r3, [r7, #36]	; 0x24
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 80097b6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80097ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097bc:	2302      	movs	r3, #2
 80097be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80097c0:	2301      	movs	r3, #1
 80097c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097c4:	2303      	movs	r3, #3
 80097c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80097c8:	2308      	movs	r3, #8
 80097ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80097cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097d0:	4619      	mov	r1, r3
 80097d2:	4878      	ldr	r0, [pc, #480]	; (80099b4 <HAL_UART_MspInit+0x258>)
 80097d4:	f000 fede 	bl	800a594 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80097d8:	4b77      	ldr	r3, [pc, #476]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 80097da:	4a78      	ldr	r2, [pc, #480]	; (80099bc <HAL_UART_MspInit+0x260>)
 80097dc:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80097de:	4b76      	ldr	r3, [pc, #472]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 80097e0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80097e4:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80097e6:	4b74      	ldr	r3, [pc, #464]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80097ec:	4b72      	ldr	r3, [pc, #456]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80097f2:	4b71      	ldr	r3, [pc, #452]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 80097f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097f8:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80097fa:	4b6f      	ldr	r3, [pc, #444]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009800:	4b6d      	ldr	r3, [pc, #436]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 8009802:	2200      	movs	r2, #0
 8009804:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8009806:	4b6c      	ldr	r3, [pc, #432]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 8009808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800980c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800980e:	4b6a      	ldr	r3, [pc, #424]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 8009810:	2200      	movs	r2, #0
 8009812:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009814:	4b68      	ldr	r3, [pc, #416]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 8009816:	2200      	movs	r2, #0
 8009818:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800981a:	4867      	ldr	r0, [pc, #412]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 800981c:	f000 fb10 	bl	8009e40 <HAL_DMA_Init>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8009826:	f7fe fc77 	bl	8008118 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a62      	ldr	r2, [pc, #392]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 800982e:	635a      	str	r2, [r3, #52]	; 0x34
 8009830:	4a61      	ldr	r2, [pc, #388]	; (80099b8 <HAL_UART_MspInit+0x25c>)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8009836:	e101      	b.n	8009a3c <HAL_UART_MspInit+0x2e0>
  else if(uartHandle->Instance==UART8)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a60      	ldr	r2, [pc, #384]	; (80099c0 <HAL_UART_MspInit+0x264>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d15b      	bne.n	80098fa <HAL_UART_MspInit+0x19e>
    __HAL_RCC_UART8_CLK_ENABLE();
 8009842:	2300      	movs	r3, #0
 8009844:	623b      	str	r3, [r7, #32]
 8009846:	4b5a      	ldr	r3, [pc, #360]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984a:	4a59      	ldr	r2, [pc, #356]	; (80099b0 <HAL_UART_MspInit+0x254>)
 800984c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009850:	6413      	str	r3, [r2, #64]	; 0x40
 8009852:	4b57      	ldr	r3, [pc, #348]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800985a:	623b      	str	r3, [r7, #32]
 800985c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800985e:	2300      	movs	r3, #0
 8009860:	61fb      	str	r3, [r7, #28]
 8009862:	4b53      	ldr	r3, [pc, #332]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009866:	4a52      	ldr	r2, [pc, #328]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009868:	f043 0310 	orr.w	r3, r3, #16
 800986c:	6313      	str	r3, [r2, #48]	; 0x30
 800986e:	4b50      	ldr	r3, [pc, #320]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009872:	f003 0310 	and.w	r3, r3, #16
 8009876:	61fb      	str	r3, [r7, #28]
 8009878:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART8_RX_Pin|UART8_TX_Pin;
 800987a:	2303      	movs	r3, #3
 800987c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800987e:	2302      	movs	r3, #2
 8009880:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009882:	2301      	movs	r3, #1
 8009884:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009886:	2303      	movs	r3, #3
 8009888:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800988a:	2308      	movs	r3, #8
 800988c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800988e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009892:	4619      	mov	r1, r3
 8009894:	4847      	ldr	r0, [pc, #284]	; (80099b4 <HAL_UART_MspInit+0x258>)
 8009896:	f000 fe7d 	bl	800a594 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 800989a:	4b4a      	ldr	r3, [pc, #296]	; (80099c4 <HAL_UART_MspInit+0x268>)
 800989c:	4a4a      	ldr	r2, [pc, #296]	; (80099c8 <HAL_UART_MspInit+0x26c>)
 800989e:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 80098a0:	4b48      	ldr	r3, [pc, #288]	; (80099c4 <HAL_UART_MspInit+0x268>)
 80098a2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80098a6:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80098a8:	4b46      	ldr	r3, [pc, #280]	; (80099c4 <HAL_UART_MspInit+0x268>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80098ae:	4b45      	ldr	r3, [pc, #276]	; (80099c4 <HAL_UART_MspInit+0x268>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80098b4:	4b43      	ldr	r3, [pc, #268]	; (80099c4 <HAL_UART_MspInit+0x268>)
 80098b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098ba:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80098bc:	4b41      	ldr	r3, [pc, #260]	; (80099c4 <HAL_UART_MspInit+0x268>)
 80098be:	2200      	movs	r2, #0
 80098c0:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80098c2:	4b40      	ldr	r3, [pc, #256]	; (80099c4 <HAL_UART_MspInit+0x268>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 80098c8:	4b3e      	ldr	r3, [pc, #248]	; (80099c4 <HAL_UART_MspInit+0x268>)
 80098ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098ce:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80098d0:	4b3c      	ldr	r3, [pc, #240]	; (80099c4 <HAL_UART_MspInit+0x268>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80098d6:	4b3b      	ldr	r3, [pc, #236]	; (80099c4 <HAL_UART_MspInit+0x268>)
 80098d8:	2200      	movs	r2, #0
 80098da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80098dc:	4839      	ldr	r0, [pc, #228]	; (80099c4 <HAL_UART_MspInit+0x268>)
 80098de:	f000 faaf 	bl	8009e40 <HAL_DMA_Init>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d001      	beq.n	80098ec <HAL_UART_MspInit+0x190>
      Error_Handler();
 80098e8:	f7fe fc16 	bl	8008118 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a35      	ldr	r2, [pc, #212]	; (80099c4 <HAL_UART_MspInit+0x268>)
 80098f0:	635a      	str	r2, [r3, #52]	; 0x34
 80098f2:	4a34      	ldr	r2, [pc, #208]	; (80099c4 <HAL_UART_MspInit+0x268>)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80098f8:	e0a0      	b.n	8009a3c <HAL_UART_MspInit+0x2e0>
  else if(uartHandle->Instance==USART2)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a33      	ldr	r2, [pc, #204]	; (80099cc <HAL_UART_MspInit+0x270>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d169      	bne.n	80099d8 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009904:	2300      	movs	r3, #0
 8009906:	61bb      	str	r3, [r7, #24]
 8009908:	4b29      	ldr	r3, [pc, #164]	; (80099b0 <HAL_UART_MspInit+0x254>)
 800990a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990c:	4a28      	ldr	r2, [pc, #160]	; (80099b0 <HAL_UART_MspInit+0x254>)
 800990e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009912:	6413      	str	r3, [r2, #64]	; 0x40
 8009914:	4b26      	ldr	r3, [pc, #152]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800991c:	61bb      	str	r3, [r7, #24]
 800991e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009920:	2300      	movs	r3, #0
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	4b22      	ldr	r3, [pc, #136]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009928:	4a21      	ldr	r2, [pc, #132]	; (80099b0 <HAL_UART_MspInit+0x254>)
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	6313      	str	r3, [r2, #48]	; 0x30
 8009930:	4b1f      	ldr	r3, [pc, #124]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800993c:	2300      	movs	r3, #0
 800993e:	613b      	str	r3, [r7, #16]
 8009940:	4b1b      	ldr	r3, [pc, #108]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009944:	4a1a      	ldr	r2, [pc, #104]	; (80099b0 <HAL_UART_MspInit+0x254>)
 8009946:	f043 0308 	orr.w	r3, r3, #8
 800994a:	6313      	str	r3, [r2, #48]	; 0x30
 800994c:	4b18      	ldr	r3, [pc, #96]	; (80099b0 <HAL_UART_MspInit+0x254>)
 800994e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009950:	f003 0308 	and.w	r3, r3, #8
 8009954:	613b      	str	r3, [r7, #16]
 8009956:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART2_CTS_Pin|USART2_RX_Pin;
 8009958:	2309      	movs	r3, #9
 800995a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800995c:	2302      	movs	r3, #2
 800995e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009960:	2300      	movs	r3, #0
 8009962:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009964:	2303      	movs	r3, #3
 8009966:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009968:	2307      	movs	r3, #7
 800996a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800996c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009970:	4619      	mov	r1, r3
 8009972:	4817      	ldr	r0, [pc, #92]	; (80099d0 <HAL_UART_MspInit+0x274>)
 8009974:	f000 fe0e 	bl	800a594 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_RTS_Pin|USART2_TX_Pin;
 8009978:	2330      	movs	r3, #48	; 0x30
 800997a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800997c:	2302      	movs	r3, #2
 800997e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009980:	2300      	movs	r3, #0
 8009982:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009984:	2303      	movs	r3, #3
 8009986:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009988:	2307      	movs	r3, #7
 800998a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800998c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009990:	4619      	mov	r1, r3
 8009992:	4810      	ldr	r0, [pc, #64]	; (80099d4 <HAL_UART_MspInit+0x278>)
 8009994:	f000 fdfe 	bl	800a594 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8009998:	2200      	movs	r2, #0
 800999a:	2105      	movs	r1, #5
 800999c:	2026      	movs	r0, #38	; 0x26
 800999e:	f000 fa25 	bl	8009dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80099a2:	2026      	movs	r0, #38	; 0x26
 80099a4:	f000 fa3e 	bl	8009e24 <HAL_NVIC_EnableIRQ>
}
 80099a8:	e048      	b.n	8009a3c <HAL_UART_MspInit+0x2e0>
 80099aa:	bf00      	nop
 80099ac:	40007800 	.word	0x40007800
 80099b0:	40023800 	.word	0x40023800
 80099b4:	40021000 	.word	0x40021000
 80099b8:	200074a0 	.word	0x200074a0
 80099bc:	40026058 	.word	0x40026058
 80099c0:	40007c00 	.word	0x40007c00
 80099c4:	20007500 	.word	0x20007500
 80099c8:	400260a0 	.word	0x400260a0
 80099cc:	40004400 	.word	0x40004400
 80099d0:	40020000 	.word	0x40020000
 80099d4:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART3)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a19      	ldr	r2, [pc, #100]	; (8009a44 <HAL_UART_MspInit+0x2e8>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d12c      	bne.n	8009a3c <HAL_UART_MspInit+0x2e0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80099e2:	2300      	movs	r3, #0
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	4b18      	ldr	r3, [pc, #96]	; (8009a48 <HAL_UART_MspInit+0x2ec>)
 80099e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ea:	4a17      	ldr	r2, [pc, #92]	; (8009a48 <HAL_UART_MspInit+0x2ec>)
 80099ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099f0:	6413      	str	r3, [r2, #64]	; 0x40
 80099f2:	4b15      	ldr	r3, [pc, #84]	; (8009a48 <HAL_UART_MspInit+0x2ec>)
 80099f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80099fe:	2300      	movs	r3, #0
 8009a00:	60bb      	str	r3, [r7, #8]
 8009a02:	4b11      	ldr	r3, [pc, #68]	; (8009a48 <HAL_UART_MspInit+0x2ec>)
 8009a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a06:	4a10      	ldr	r2, [pc, #64]	; (8009a48 <HAL_UART_MspInit+0x2ec>)
 8009a08:	f043 0308 	orr.w	r3, r3, #8
 8009a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8009a0e:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <HAL_UART_MspInit+0x2ec>)
 8009a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a12:	f003 0308 	and.w	r3, r3, #8
 8009a16:	60bb      	str	r3, [r7, #8]
 8009a18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8009a1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a20:	2302      	movs	r3, #2
 8009a22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009a2c:	2307      	movs	r3, #7
 8009a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a34:	4619      	mov	r1, r3
 8009a36:	4805      	ldr	r0, [pc, #20]	; (8009a4c <HAL_UART_MspInit+0x2f0>)
 8009a38:	f000 fdac 	bl	800a594 <HAL_GPIO_Init>
}
 8009a3c:	bf00      	nop
 8009a3e:	3740      	adds	r7, #64	; 0x40
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	40004800 	.word	0x40004800
 8009a48:	40023800 	.word	0x40023800
 8009a4c:	40020c00 	.word	0x40020c00

08009a50 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a54:	4b14      	ldr	r3, [pc, #80]	; (8009aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009a56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009a5c:	4b12      	ldr	r3, [pc, #72]	; (8009aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009a5e:	2204      	movs	r2, #4
 8009a60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a62:	4b11      	ldr	r3, [pc, #68]	; (8009aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009a64:	2202      	movs	r2, #2
 8009a66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a68:	4b0f      	ldr	r3, [pc, #60]	; (8009aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a6e:	4b0e      	ldr	r3, [pc, #56]	; (8009aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009a70:	2202      	movs	r2, #2
 8009a72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009a76:	2201      	movs	r2, #1
 8009a78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	; (8009aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a80:	4b09      	ldr	r3, [pc, #36]	; (8009aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009a86:	4b08      	ldr	r3, [pc, #32]	; (8009aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009a88:	2201      	movs	r2, #1
 8009a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009a8c:	4b06      	ldr	r3, [pc, #24]	; (8009aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a92:	4805      	ldr	r0, [pc, #20]	; (8009aa8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009a94:	f003 fea6 	bl	800d7e4 <HAL_PCD_Init>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8009a9e:	f7fe fb3b 	bl	8008118 <Error_Handler>
  }

}
 8009aa2:	bf00      	nop
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	200075e0 	.word	0x200075e0

08009aac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08a      	sub	sp, #40	; 0x28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ab4:	f107 0314 	add.w	r3, r7, #20
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]
 8009abc:	605a      	str	r2, [r3, #4]
 8009abe:	609a      	str	r2, [r3, #8]
 8009ac0:	60da      	str	r2, [r3, #12]
 8009ac2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009acc:	d13f      	bne.n	8009b4e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ace:	2300      	movs	r3, #0
 8009ad0:	613b      	str	r3, [r7, #16]
 8009ad2:	4b21      	ldr	r3, [pc, #132]	; (8009b58 <HAL_PCD_MspInit+0xac>)
 8009ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad6:	4a20      	ldr	r2, [pc, #128]	; (8009b58 <HAL_PCD_MspInit+0xac>)
 8009ad8:	f043 0301 	orr.w	r3, r3, #1
 8009adc:	6313      	str	r3, [r2, #48]	; 0x30
 8009ade:	4b1e      	ldr	r3, [pc, #120]	; (8009b58 <HAL_PCD_MspInit+0xac>)
 8009ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	613b      	str	r3, [r7, #16]
 8009ae8:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8009aea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009af0:	2302      	movs	r3, #2
 8009af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af4:	2300      	movs	r3, #0
 8009af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009af8:	2303      	movs	r3, #3
 8009afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009afc:	230a      	movs	r3, #10
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b00:	f107 0314 	add.w	r3, r7, #20
 8009b04:	4619      	mov	r1, r3
 8009b06:	4815      	ldr	r0, [pc, #84]	; (8009b5c <HAL_PCD_MspInit+0xb0>)
 8009b08:	f000 fd44 	bl	800a594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b12:	2300      	movs	r3, #0
 8009b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009b1a:	f107 0314 	add.w	r3, r7, #20
 8009b1e:	4619      	mov	r1, r3
 8009b20:	480e      	ldr	r0, [pc, #56]	; (8009b5c <HAL_PCD_MspInit+0xb0>)
 8009b22:	f000 fd37 	bl	800a594 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b26:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <HAL_PCD_MspInit+0xac>)
 8009b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2a:	4a0b      	ldr	r2, [pc, #44]	; (8009b58 <HAL_PCD_MspInit+0xac>)
 8009b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b30:	6353      	str	r3, [r2, #52]	; 0x34
 8009b32:	2300      	movs	r3, #0
 8009b34:	60fb      	str	r3, [r7, #12]
 8009b36:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <HAL_PCD_MspInit+0xac>)
 8009b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b3a:	4a07      	ldr	r2, [pc, #28]	; (8009b58 <HAL_PCD_MspInit+0xac>)
 8009b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b40:	6453      	str	r3, [r2, #68]	; 0x44
 8009b42:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <HAL_PCD_MspInit+0xac>)
 8009b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b4e:	bf00      	nop
 8009b50:	3728      	adds	r7, #40	; 0x28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	40023800 	.word	0x40023800
 8009b5c:	40020000 	.word	0x40020000

08009b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8009b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009b98 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009b64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009b66:	e003      	b.n	8009b70 <LoopCopyDataInit>

08009b68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009b68:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009b6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009b6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009b6e:	3104      	adds	r1, #4

08009b70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009b70:	480b      	ldr	r0, [pc, #44]	; (8009ba0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009b72:	4b0c      	ldr	r3, [pc, #48]	; (8009ba4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009b74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009b76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009b78:	d3f6      	bcc.n	8009b68 <CopyDataInit>
  ldr  r2, =_sbss
 8009b7a:	4a0b      	ldr	r2, [pc, #44]	; (8009ba8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009b7c:	e002      	b.n	8009b84 <LoopFillZerobss>

08009b7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009b7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009b80:	f842 3b04 	str.w	r3, [r2], #4

08009b84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009b84:	4b09      	ldr	r3, [pc, #36]	; (8009bac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009b86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009b88:	d3f9      	bcc.n	8009b7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009b8a:	f7fe fe89 	bl	80088a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009b8e:	f010 fb3b 	bl	801a208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009b92:	f7fe f995 	bl	8007ec0 <main>
  bx  lr    
 8009b96:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8009b98:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8009b9c:	0801f7dc 	.word	0x0801f7dc
  ldr  r0, =_sdata
 8009ba0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009ba4:	200002ec 	.word	0x200002ec
  ldr  r2, =_sbss
 8009ba8:	200002f0 	.word	0x200002f0
  ldr  r3, = _ebss
 8009bac:	20009aa0 	.word	0x20009aa0

08009bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009bb0:	e7fe      	b.n	8009bb0 <ADC_IRQHandler>
	...

08009bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009bb8:	4b0e      	ldr	r3, [pc, #56]	; (8009bf4 <HAL_Init+0x40>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a0d      	ldr	r2, [pc, #52]	; (8009bf4 <HAL_Init+0x40>)
 8009bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009bc4:	4b0b      	ldr	r3, [pc, #44]	; (8009bf4 <HAL_Init+0x40>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a0a      	ldr	r2, [pc, #40]	; (8009bf4 <HAL_Init+0x40>)
 8009bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009bd0:	4b08      	ldr	r3, [pc, #32]	; (8009bf4 <HAL_Init+0x40>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a07      	ldr	r2, [pc, #28]	; (8009bf4 <HAL_Init+0x40>)
 8009bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009bdc:	2003      	movs	r0, #3
 8009bde:	f000 f8fa 	bl	8009dd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009be2:	2000      	movs	r0, #0
 8009be4:	f7fe fc82 	bl	80084ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009be8:	f7fe fc54 	bl	8008494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	40023c00 	.word	0x40023c00

08009bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009bfc:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <HAL_IncTick+0x20>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	461a      	mov	r2, r3
 8009c02:	4b06      	ldr	r3, [pc, #24]	; (8009c1c <HAL_IncTick+0x24>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4413      	add	r3, r2
 8009c08:	4a04      	ldr	r2, [pc, #16]	; (8009c1c <HAL_IncTick+0x24>)
 8009c0a:	6013      	str	r3, [r2, #0]
}
 8009c0c:	bf00      	nop
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	20000110 	.word	0x20000110
 8009c1c:	200079e8 	.word	0x200079e8

08009c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0
  return uwTick;
 8009c24:	4b03      	ldr	r3, [pc, #12]	; (8009c34 <HAL_GetTick+0x14>)
 8009c26:	681b      	ldr	r3, [r3, #0]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	200079e8 	.word	0x200079e8

08009c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009c40:	f7ff ffee 	bl	8009c20 <HAL_GetTick>
 8009c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c50:	d005      	beq.n	8009c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009c52:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <HAL_Delay+0x40>)
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009c5e:	bf00      	nop
 8009c60:	f7ff ffde 	bl	8009c20 <HAL_GetTick>
 8009c64:	4602      	mov	r2, r0
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d8f7      	bhi.n	8009c60 <HAL_Delay+0x28>
  {
  }
}
 8009c70:	bf00      	nop
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20000110 	.word	0x20000110

08009c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	; (8009cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009c98:	4013      	ands	r3, r2
 8009c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009cae:	4a04      	ldr	r2, [pc, #16]	; (8009cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	60d3      	str	r3, [r2, #12]
}
 8009cb4:	bf00      	nop
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	e000ed00 	.word	0xe000ed00

08009cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009cc8:	4b04      	ldr	r3, [pc, #16]	; (8009cdc <__NVIC_GetPriorityGrouping+0x18>)
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	0a1b      	lsrs	r3, r3, #8
 8009cce:	f003 0307 	and.w	r3, r3, #7
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	e000ed00 	.word	0xe000ed00

08009ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	db0b      	blt.n	8009d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cf2:	79fb      	ldrb	r3, [r7, #7]
 8009cf4:	f003 021f 	and.w	r2, r3, #31
 8009cf8:	4907      	ldr	r1, [pc, #28]	; (8009d18 <__NVIC_EnableIRQ+0x38>)
 8009cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cfe:	095b      	lsrs	r3, r3, #5
 8009d00:	2001      	movs	r0, #1
 8009d02:	fa00 f202 	lsl.w	r2, r0, r2
 8009d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009d0a:	bf00      	nop
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	e000e100 	.word	0xe000e100

08009d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	6039      	str	r1, [r7, #0]
 8009d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	db0a      	blt.n	8009d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	490c      	ldr	r1, [pc, #48]	; (8009d68 <__NVIC_SetPriority+0x4c>)
 8009d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d3a:	0112      	lsls	r2, r2, #4
 8009d3c:	b2d2      	uxtb	r2, r2
 8009d3e:	440b      	add	r3, r1
 8009d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009d44:	e00a      	b.n	8009d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	4908      	ldr	r1, [pc, #32]	; (8009d6c <__NVIC_SetPriority+0x50>)
 8009d4c:	79fb      	ldrb	r3, [r7, #7]
 8009d4e:	f003 030f 	and.w	r3, r3, #15
 8009d52:	3b04      	subs	r3, #4
 8009d54:	0112      	lsls	r2, r2, #4
 8009d56:	b2d2      	uxtb	r2, r2
 8009d58:	440b      	add	r3, r1
 8009d5a:	761a      	strb	r2, [r3, #24]
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	e000e100 	.word	0xe000e100
 8009d6c:	e000ed00 	.word	0xe000ed00

08009d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b089      	sub	sp, #36	; 0x24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f003 0307 	and.w	r3, r3, #7
 8009d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	f1c3 0307 	rsb	r3, r3, #7
 8009d8a:	2b04      	cmp	r3, #4
 8009d8c:	bf28      	it	cs
 8009d8e:	2304      	movcs	r3, #4
 8009d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	3304      	adds	r3, #4
 8009d96:	2b06      	cmp	r3, #6
 8009d98:	d902      	bls.n	8009da0 <NVIC_EncodePriority+0x30>
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	3b03      	subs	r3, #3
 8009d9e:	e000      	b.n	8009da2 <NVIC_EncodePriority+0x32>
 8009da0:	2300      	movs	r3, #0
 8009da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009da4:	f04f 32ff 	mov.w	r2, #4294967295
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	fa02 f303 	lsl.w	r3, r2, r3
 8009dae:	43da      	mvns	r2, r3
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	401a      	ands	r2, r3
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009db8:	f04f 31ff 	mov.w	r1, #4294967295
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009dc2:	43d9      	mvns	r1, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009dc8:	4313      	orrs	r3, r2
         );
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3724      	adds	r7, #36	; 0x24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b082      	sub	sp, #8
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff ff4c 	bl	8009c7c <__NVIC_SetPriorityGrouping>
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009dfe:	f7ff ff61 	bl	8009cc4 <__NVIC_GetPriorityGrouping>
 8009e02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	68b9      	ldr	r1, [r7, #8]
 8009e08:	6978      	ldr	r0, [r7, #20]
 8009e0a:	f7ff ffb1 	bl	8009d70 <NVIC_EncodePriority>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e14:	4611      	mov	r1, r2
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7ff ff80 	bl	8009d1c <__NVIC_SetPriority>
}
 8009e1c:	bf00      	nop
 8009e1e:	3718      	adds	r7, #24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7ff ff54 	bl	8009ce0 <__NVIC_EnableIRQ>
}
 8009e38:	bf00      	nop
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009e4c:	f7ff fee8 	bl	8009c20 <HAL_GetTick>
 8009e50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e099      	b.n	8009f90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f022 0201 	bic.w	r2, r2, #1
 8009e7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e7c:	e00f      	b.n	8009e9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009e7e:	f7ff fecf 	bl	8009c20 <HAL_GetTick>
 8009e82:	4602      	mov	r2, r0
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	2b05      	cmp	r3, #5
 8009e8a:	d908      	bls.n	8009e9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2203      	movs	r2, #3
 8009e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e078      	b.n	8009f90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e8      	bne.n	8009e7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009eb4:	697a      	ldr	r2, [r7, #20]
 8009eb6:	4b38      	ldr	r3, [pc, #224]	; (8009f98 <HAL_DMA_Init+0x158>)
 8009eb8:	4013      	ands	r3, r2
 8009eba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a1b      	ldr	r3, [r3, #32]
 8009ee8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	2b04      	cmp	r3, #4
 8009ef6:	d107      	bne.n	8009f08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f00:	4313      	orrs	r3, r2
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f023 0307 	bic.w	r3, r3, #7
 8009f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	2b04      	cmp	r3, #4
 8009f30:	d117      	bne.n	8009f62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00e      	beq.n	8009f62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 faab 	bl	800a4a0 <DMA_CheckFifoParam>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d008      	beq.n	8009f62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2240      	movs	r2, #64	; 0x40
 8009f54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e016      	b.n	8009f90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fa62 	bl	800a434 <DMA_CalcBaseAndBitshift>
 8009f70:	4603      	mov	r3, r0
 8009f72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f78:	223f      	movs	r2, #63	; 0x3f
 8009f7a:	409a      	lsls	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	f010803f 	.word	0xf010803f

08009f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d101      	bne.n	8009fc2 <HAL_DMA_Start_IT+0x26>
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	e040      	b.n	800a044 <HAL_DMA_Start_IT+0xa8>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d12f      	bne.n	800a036 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2202      	movs	r2, #2
 8009fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	68b9      	ldr	r1, [r7, #8]
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 f9f4 	bl	800a3d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff4:	223f      	movs	r2, #63	; 0x3f
 8009ff6:	409a      	lsls	r2, r3
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f042 0216 	orr.w	r2, r2, #22
 800a00a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a010:	2b00      	cmp	r3, #0
 800a012:	d007      	beq.n	800a024 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f042 0208 	orr.w	r2, r2, #8
 800a022:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f042 0201 	orr.w	r2, r2, #1
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	e005      	b.n	800a042 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a03e:	2302      	movs	r3, #2
 800a040:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a042:	7dfb      	ldrb	r3, [r7, #23]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3718      	adds	r7, #24
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d004      	beq.n	800a06a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2280      	movs	r2, #128	; 0x80
 800a064:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e00c      	b.n	800a084 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2205      	movs	r2, #5
 800a06e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f022 0201 	bic.w	r2, r2, #1
 800a080:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a098:	2300      	movs	r3, #0
 800a09a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a09c:	4b92      	ldr	r3, [pc, #584]	; (800a2e8 <HAL_DMA_IRQHandler+0x258>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a92      	ldr	r2, [pc, #584]	; (800a2ec <HAL_DMA_IRQHandler+0x25c>)
 800a0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a6:	0a9b      	lsrs	r3, r3, #10
 800a0a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ba:	2208      	movs	r2, #8
 800a0bc:	409a      	lsls	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d01a      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 0304 	and.w	r3, r3, #4
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d013      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f022 0204 	bic.w	r2, r2, #4
 800a0e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0e8:	2208      	movs	r2, #8
 800a0ea:	409a      	lsls	r2, r3
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f4:	f043 0201 	orr.w	r2, r3, #1
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a100:	2201      	movs	r2, #1
 800a102:	409a      	lsls	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4013      	ands	r3, r2
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d012      	beq.n	800a132 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00b      	beq.n	800a132 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a11e:	2201      	movs	r2, #1
 800a120:	409a      	lsls	r2, r3
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12a:	f043 0202 	orr.w	r2, r3, #2
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a136:	2204      	movs	r2, #4
 800a138:	409a      	lsls	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	4013      	ands	r3, r2
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d012      	beq.n	800a168 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 0302 	and.w	r3, r3, #2
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a154:	2204      	movs	r2, #4
 800a156:	409a      	lsls	r2, r3
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a160:	f043 0204 	orr.w	r2, r3, #4
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a16c:	2210      	movs	r2, #16
 800a16e:	409a      	lsls	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4013      	ands	r3, r2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d043      	beq.n	800a200 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0308 	and.w	r3, r3, #8
 800a182:	2b00      	cmp	r3, #0
 800a184:	d03c      	beq.n	800a200 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a18a:	2210      	movs	r2, #16
 800a18c:	409a      	lsls	r2, r3
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d018      	beq.n	800a1d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d108      	bne.n	800a1c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d024      	beq.n	800a200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	4798      	blx	r3
 800a1be:	e01f      	b.n	800a200 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d01b      	beq.n	800a200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	4798      	blx	r3
 800a1d0:	e016      	b.n	800a200 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d107      	bne.n	800a1f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f022 0208 	bic.w	r2, r2, #8
 800a1ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d003      	beq.n	800a200 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a204:	2220      	movs	r2, #32
 800a206:	409a      	lsls	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	4013      	ands	r3, r2
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f000 808e 	beq.w	800a32e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 0310 	and.w	r3, r3, #16
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 8086 	beq.w	800a32e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a226:	2220      	movs	r2, #32
 800a228:	409a      	lsls	r2, r3
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b05      	cmp	r3, #5
 800a238:	d136      	bne.n	800a2a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f022 0216 	bic.w	r2, r2, #22
 800a248:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	695a      	ldr	r2, [r3, #20]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a258:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d103      	bne.n	800a26a <HAL_DMA_IRQHandler+0x1da>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a266:	2b00      	cmp	r3, #0
 800a268:	d007      	beq.n	800a27a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f022 0208 	bic.w	r2, r2, #8
 800a278:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a27e:	223f      	movs	r2, #63	; 0x3f
 800a280:	409a      	lsls	r2, r3
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d07d      	beq.n	800a39a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	4798      	blx	r3
        }
        return;
 800a2a6:	e078      	b.n	800a39a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d01c      	beq.n	800a2f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d108      	bne.n	800a2d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d030      	beq.n	800a32e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	4798      	blx	r3
 800a2d4:	e02b      	b.n	800a32e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d027      	beq.n	800a32e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	4798      	blx	r3
 800a2e6:	e022      	b.n	800a32e <HAL_DMA_IRQHandler+0x29e>
 800a2e8:	20000108 	.word	0x20000108
 800a2ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10f      	bne.n	800a31e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f022 0210 	bic.w	r2, r2, #16
 800a30c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a322:	2b00      	cmp	r3, #0
 800a324:	d003      	beq.n	800a32e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a332:	2b00      	cmp	r3, #0
 800a334:	d032      	beq.n	800a39c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d022      	beq.n	800a388 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2205      	movs	r2, #5
 800a346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f022 0201 	bic.w	r2, r2, #1
 800a358:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	3301      	adds	r3, #1
 800a35e:	60bb      	str	r3, [r7, #8]
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	429a      	cmp	r2, r3
 800a364:	d307      	bcc.n	800a376 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1f2      	bne.n	800a35a <HAL_DMA_IRQHandler+0x2ca>
 800a374:	e000      	b.n	800a378 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a376:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d005      	beq.n	800a39c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	4798      	blx	r3
 800a398:	e000      	b.n	800a39c <HAL_DMA_IRQHandler+0x30c>
        return;
 800a39a:	bf00      	nop
    }
  }
}
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop

0800a3a4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a3b2:	b2db      	uxtb	r3, r3
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a3f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	2b40      	cmp	r3, #64	; 0x40
 800a404:	d108      	bne.n	800a418 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a416:	e007      	b.n	800a428 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	60da      	str	r2, [r3, #12]
}
 800a428:	bf00      	nop
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	b2db      	uxtb	r3, r3
 800a442:	3b10      	subs	r3, #16
 800a444:	4a14      	ldr	r2, [pc, #80]	; (800a498 <DMA_CalcBaseAndBitshift+0x64>)
 800a446:	fba2 2303 	umull	r2, r3, r2, r3
 800a44a:	091b      	lsrs	r3, r3, #4
 800a44c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a44e:	4a13      	ldr	r2, [pc, #76]	; (800a49c <DMA_CalcBaseAndBitshift+0x68>)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4413      	add	r3, r2
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2b03      	cmp	r3, #3
 800a460:	d909      	bls.n	800a476 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a46a:	f023 0303 	bic.w	r3, r3, #3
 800a46e:	1d1a      	adds	r2, r3, #4
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	659a      	str	r2, [r3, #88]	; 0x58
 800a474:	e007      	b.n	800a486 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a47e:	f023 0303 	bic.w	r3, r3, #3
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	aaaaaaab 	.word	0xaaaaaaab
 800a49c:	0801f058 	.word	0x0801f058

0800a4a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d11f      	bne.n	800a4fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2b03      	cmp	r3, #3
 800a4be:	d855      	bhi.n	800a56c <DMA_CheckFifoParam+0xcc>
 800a4c0:	a201      	add	r2, pc, #4	; (adr r2, 800a4c8 <DMA_CheckFifoParam+0x28>)
 800a4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c6:	bf00      	nop
 800a4c8:	0800a4d9 	.word	0x0800a4d9
 800a4cc:	0800a4eb 	.word	0x0800a4eb
 800a4d0:	0800a4d9 	.word	0x0800a4d9
 800a4d4:	0800a56d 	.word	0x0800a56d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d045      	beq.n	800a570 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4e8:	e042      	b.n	800a570 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a4f2:	d13f      	bne.n	800a574 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4f8:	e03c      	b.n	800a574 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a502:	d121      	bne.n	800a548 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2b03      	cmp	r3, #3
 800a508:	d836      	bhi.n	800a578 <DMA_CheckFifoParam+0xd8>
 800a50a:	a201      	add	r2, pc, #4	; (adr r2, 800a510 <DMA_CheckFifoParam+0x70>)
 800a50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a510:	0800a521 	.word	0x0800a521
 800a514:	0800a527 	.word	0x0800a527
 800a518:	0800a521 	.word	0x0800a521
 800a51c:	0800a539 	.word	0x0800a539
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	73fb      	strb	r3, [r7, #15]
      break;
 800a524:	e02f      	b.n	800a586 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d024      	beq.n	800a57c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a536:	e021      	b.n	800a57c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a540:	d11e      	bne.n	800a580 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a546:	e01b      	b.n	800a580 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d902      	bls.n	800a554 <DMA_CheckFifoParam+0xb4>
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d003      	beq.n	800a55a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a552:	e018      	b.n	800a586 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	73fb      	strb	r3, [r7, #15]
      break;
 800a558:	e015      	b.n	800a586 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00e      	beq.n	800a584 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	73fb      	strb	r3, [r7, #15]
      break;
 800a56a:	e00b      	b.n	800a584 <DMA_CheckFifoParam+0xe4>
      break;
 800a56c:	bf00      	nop
 800a56e:	e00a      	b.n	800a586 <DMA_CheckFifoParam+0xe6>
      break;
 800a570:	bf00      	nop
 800a572:	e008      	b.n	800a586 <DMA_CheckFifoParam+0xe6>
      break;
 800a574:	bf00      	nop
 800a576:	e006      	b.n	800a586 <DMA_CheckFifoParam+0xe6>
      break;
 800a578:	bf00      	nop
 800a57a:	e004      	b.n	800a586 <DMA_CheckFifoParam+0xe6>
      break;
 800a57c:	bf00      	nop
 800a57e:	e002      	b.n	800a586 <DMA_CheckFifoParam+0xe6>
      break;   
 800a580:	bf00      	nop
 800a582:	e000      	b.n	800a586 <DMA_CheckFifoParam+0xe6>
      break;
 800a584:	bf00      	nop
    }
  } 
  
  return status; 
 800a586:	7bfb      	ldrb	r3, [r7, #15]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a594:	b480      	push	{r7}
 800a596:	b089      	sub	sp, #36	; 0x24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	61fb      	str	r3, [r7, #28]
 800a5ae:	e177      	b.n	800a8a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	f040 8166 	bne.w	800a89a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d00b      	beq.n	800a5ee <HAL_GPIO_Init+0x5a>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d007      	beq.n	800a5ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a5e2:	2b11      	cmp	r3, #17
 800a5e4:	d003      	beq.n	800a5ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	2b12      	cmp	r3, #18
 800a5ec:	d130      	bne.n	800a650 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	2203      	movs	r2, #3
 800a5fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a5fe:	43db      	mvns	r3, r3
 800a600:	69ba      	ldr	r2, [r7, #24]
 800a602:	4013      	ands	r3, r2
 800a604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	68da      	ldr	r2, [r3, #12]
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	005b      	lsls	r3, r3, #1
 800a60e:	fa02 f303 	lsl.w	r3, r2, r3
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	4313      	orrs	r3, r2
 800a616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a624:	2201      	movs	r2, #1
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	fa02 f303 	lsl.w	r3, r2, r3
 800a62c:	43db      	mvns	r3, r3
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	4013      	ands	r3, r2
 800a632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	091b      	lsrs	r3, r3, #4
 800a63a:	f003 0201 	and.w	r2, r3, #1
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	fa02 f303 	lsl.w	r3, r2, r3
 800a644:	69ba      	ldr	r2, [r7, #24]
 800a646:	4313      	orrs	r3, r2
 800a648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	69ba      	ldr	r2, [r7, #24]
 800a64e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	005b      	lsls	r3, r3, #1
 800a65a:	2203      	movs	r2, #3
 800a65c:	fa02 f303 	lsl.w	r3, r2, r3
 800a660:	43db      	mvns	r3, r3
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	4013      	ands	r3, r2
 800a666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	689a      	ldr	r2, [r3, #8]
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	005b      	lsls	r3, r3, #1
 800a670:	fa02 f303 	lsl.w	r3, r2, r3
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	4313      	orrs	r3, r2
 800a678:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	69ba      	ldr	r2, [r7, #24]
 800a67e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	2b02      	cmp	r3, #2
 800a686:	d003      	beq.n	800a690 <HAL_GPIO_Init+0xfc>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	2b12      	cmp	r3, #18
 800a68e:	d123      	bne.n	800a6d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	08da      	lsrs	r2, r3, #3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3208      	adds	r2, #8
 800a698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a69c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	f003 0307 	and.w	r3, r3, #7
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	220f      	movs	r2, #15
 800a6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ac:	43db      	mvns	r3, r3
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	691a      	ldr	r2, [r3, #16]
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	f003 0307 	and.w	r3, r3, #7
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c4:	69ba      	ldr	r2, [r7, #24]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	08da      	lsrs	r2, r3, #3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	3208      	adds	r2, #8
 800a6d2:	69b9      	ldr	r1, [r7, #24]
 800a6d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	2203      	movs	r2, #3
 800a6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e8:	43db      	mvns	r3, r3
 800a6ea:	69ba      	ldr	r2, [r7, #24]
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	f003 0203 	and.w	r2, r3, #3
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	4313      	orrs	r3, r2
 800a704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	69ba      	ldr	r2, [r7, #24]
 800a70a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 80c0 	beq.w	800a89a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a71a:	2300      	movs	r3, #0
 800a71c:	60fb      	str	r3, [r7, #12]
 800a71e:	4b65      	ldr	r3, [pc, #404]	; (800a8b4 <HAL_GPIO_Init+0x320>)
 800a720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a722:	4a64      	ldr	r2, [pc, #400]	; (800a8b4 <HAL_GPIO_Init+0x320>)
 800a724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a728:	6453      	str	r3, [r2, #68]	; 0x44
 800a72a:	4b62      	ldr	r3, [pc, #392]	; (800a8b4 <HAL_GPIO_Init+0x320>)
 800a72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a72e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a732:	60fb      	str	r3, [r7, #12]
 800a734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a736:	4a60      	ldr	r2, [pc, #384]	; (800a8b8 <HAL_GPIO_Init+0x324>)
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	089b      	lsrs	r3, r3, #2
 800a73c:	3302      	adds	r3, #2
 800a73e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	220f      	movs	r2, #15
 800a74e:	fa02 f303 	lsl.w	r3, r2, r3
 800a752:	43db      	mvns	r3, r3
 800a754:	69ba      	ldr	r2, [r7, #24]
 800a756:	4013      	ands	r3, r2
 800a758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a57      	ldr	r2, [pc, #348]	; (800a8bc <HAL_GPIO_Init+0x328>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d037      	beq.n	800a7d2 <HAL_GPIO_Init+0x23e>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4a56      	ldr	r2, [pc, #344]	; (800a8c0 <HAL_GPIO_Init+0x32c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d031      	beq.n	800a7ce <HAL_GPIO_Init+0x23a>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a55      	ldr	r2, [pc, #340]	; (800a8c4 <HAL_GPIO_Init+0x330>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d02b      	beq.n	800a7ca <HAL_GPIO_Init+0x236>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a54      	ldr	r2, [pc, #336]	; (800a8c8 <HAL_GPIO_Init+0x334>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d025      	beq.n	800a7c6 <HAL_GPIO_Init+0x232>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a53      	ldr	r2, [pc, #332]	; (800a8cc <HAL_GPIO_Init+0x338>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d01f      	beq.n	800a7c2 <HAL_GPIO_Init+0x22e>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a52      	ldr	r2, [pc, #328]	; (800a8d0 <HAL_GPIO_Init+0x33c>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d019      	beq.n	800a7be <HAL_GPIO_Init+0x22a>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a51      	ldr	r2, [pc, #324]	; (800a8d4 <HAL_GPIO_Init+0x340>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d013      	beq.n	800a7ba <HAL_GPIO_Init+0x226>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a50      	ldr	r2, [pc, #320]	; (800a8d8 <HAL_GPIO_Init+0x344>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d00d      	beq.n	800a7b6 <HAL_GPIO_Init+0x222>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a4f      	ldr	r2, [pc, #316]	; (800a8dc <HAL_GPIO_Init+0x348>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d007      	beq.n	800a7b2 <HAL_GPIO_Init+0x21e>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a4e      	ldr	r2, [pc, #312]	; (800a8e0 <HAL_GPIO_Init+0x34c>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d101      	bne.n	800a7ae <HAL_GPIO_Init+0x21a>
 800a7aa:	2309      	movs	r3, #9
 800a7ac:	e012      	b.n	800a7d4 <HAL_GPIO_Init+0x240>
 800a7ae:	230a      	movs	r3, #10
 800a7b0:	e010      	b.n	800a7d4 <HAL_GPIO_Init+0x240>
 800a7b2:	2308      	movs	r3, #8
 800a7b4:	e00e      	b.n	800a7d4 <HAL_GPIO_Init+0x240>
 800a7b6:	2307      	movs	r3, #7
 800a7b8:	e00c      	b.n	800a7d4 <HAL_GPIO_Init+0x240>
 800a7ba:	2306      	movs	r3, #6
 800a7bc:	e00a      	b.n	800a7d4 <HAL_GPIO_Init+0x240>
 800a7be:	2305      	movs	r3, #5
 800a7c0:	e008      	b.n	800a7d4 <HAL_GPIO_Init+0x240>
 800a7c2:	2304      	movs	r3, #4
 800a7c4:	e006      	b.n	800a7d4 <HAL_GPIO_Init+0x240>
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e004      	b.n	800a7d4 <HAL_GPIO_Init+0x240>
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	e002      	b.n	800a7d4 <HAL_GPIO_Init+0x240>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e000      	b.n	800a7d4 <HAL_GPIO_Init+0x240>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	69fa      	ldr	r2, [r7, #28]
 800a7d6:	f002 0203 	and.w	r2, r2, #3
 800a7da:	0092      	lsls	r2, r2, #2
 800a7dc:	4093      	lsls	r3, r2
 800a7de:	69ba      	ldr	r2, [r7, #24]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a7e4:	4934      	ldr	r1, [pc, #208]	; (800a8b8 <HAL_GPIO_Init+0x324>)
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	089b      	lsrs	r3, r3, #2
 800a7ea:	3302      	adds	r3, #2
 800a7ec:	69ba      	ldr	r2, [r7, #24]
 800a7ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a7f2:	4b3c      	ldr	r3, [pc, #240]	; (800a8e4 <HAL_GPIO_Init+0x350>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	43db      	mvns	r3, r3
 800a7fc:	69ba      	ldr	r2, [r7, #24]
 800a7fe:	4013      	ands	r3, r2
 800a800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a80e:	69ba      	ldr	r2, [r7, #24]
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	4313      	orrs	r3, r2
 800a814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a816:	4a33      	ldr	r2, [pc, #204]	; (800a8e4 <HAL_GPIO_Init+0x350>)
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a81c:	4b31      	ldr	r3, [pc, #196]	; (800a8e4 <HAL_GPIO_Init+0x350>)
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	43db      	mvns	r3, r3
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	4013      	ands	r3, r2
 800a82a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a834:	2b00      	cmp	r3, #0
 800a836:	d003      	beq.n	800a840 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a838:	69ba      	ldr	r2, [r7, #24]
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a840:	4a28      	ldr	r2, [pc, #160]	; (800a8e4 <HAL_GPIO_Init+0x350>)
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a846:	4b27      	ldr	r3, [pc, #156]	; (800a8e4 <HAL_GPIO_Init+0x350>)
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	43db      	mvns	r3, r3
 800a850:	69ba      	ldr	r2, [r7, #24]
 800a852:	4013      	ands	r3, r2
 800a854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	4313      	orrs	r3, r2
 800a868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a86a:	4a1e      	ldr	r2, [pc, #120]	; (800a8e4 <HAL_GPIO_Init+0x350>)
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a870:	4b1c      	ldr	r3, [pc, #112]	; (800a8e4 <HAL_GPIO_Init+0x350>)
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	43db      	mvns	r3, r3
 800a87a:	69ba      	ldr	r2, [r7, #24]
 800a87c:	4013      	ands	r3, r2
 800a87e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a88c:	69ba      	ldr	r2, [r7, #24]
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	4313      	orrs	r3, r2
 800a892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a894:	4a13      	ldr	r2, [pc, #76]	; (800a8e4 <HAL_GPIO_Init+0x350>)
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	3301      	adds	r3, #1
 800a89e:	61fb      	str	r3, [r7, #28]
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	2b0f      	cmp	r3, #15
 800a8a4:	f67f ae84 	bls.w	800a5b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a8a8:	bf00      	nop
 800a8aa:	3724      	adds	r7, #36	; 0x24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	40023800 	.word	0x40023800
 800a8b8:	40013800 	.word	0x40013800
 800a8bc:	40020000 	.word	0x40020000
 800a8c0:	40020400 	.word	0x40020400
 800a8c4:	40020800 	.word	0x40020800
 800a8c8:	40020c00 	.word	0x40020c00
 800a8cc:	40021000 	.word	0x40021000
 800a8d0:	40021400 	.word	0x40021400
 800a8d4:	40021800 	.word	0x40021800
 800a8d8:	40021c00 	.word	0x40021c00
 800a8dc:	40022000 	.word	0x40022000
 800a8e0:	40022400 	.word	0x40022400
 800a8e4:	40013c00 	.word	0x40013c00

0800a8e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	691a      	ldr	r2, [r3, #16]
 800a8f8:	887b      	ldrh	r3, [r7, #2]
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a900:	2301      	movs	r3, #1
 800a902:	73fb      	strb	r3, [r7, #15]
 800a904:	e001      	b.n	800a90a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a906:	2300      	movs	r3, #0
 800a908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	807b      	strh	r3, [r7, #2]
 800a924:	4613      	mov	r3, r2
 800a926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a928:	787b      	ldrb	r3, [r7, #1]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a92e:	887a      	ldrh	r2, [r7, #2]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a934:	e003      	b.n	800a93e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a936:	887b      	ldrh	r3, [r7, #2]
 800a938:	041a      	lsls	r2, r3, #16
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	619a      	str	r2, [r3, #24]
}
 800a93e:	bf00      	nop
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
	...

0800a94c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e11f      	b.n	800ab9e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d106      	bne.n	800a978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7fd f9de 	bl	8007d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2224      	movs	r2, #36	; 0x24
 800a97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f022 0201 	bic.w	r2, r2, #1
 800a98e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a99e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a9ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a9b0:	f003 fc70 	bl	800e294 <HAL_RCC_GetPCLK1Freq>
 800a9b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	4a7b      	ldr	r2, [pc, #492]	; (800aba8 <HAL_I2C_Init+0x25c>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d807      	bhi.n	800a9d0 <HAL_I2C_Init+0x84>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	4a7a      	ldr	r2, [pc, #488]	; (800abac <HAL_I2C_Init+0x260>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	bf94      	ite	ls
 800a9c8:	2301      	movls	r3, #1
 800a9ca:	2300      	movhi	r3, #0
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	e006      	b.n	800a9de <HAL_I2C_Init+0x92>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4a77      	ldr	r2, [pc, #476]	; (800abb0 <HAL_I2C_Init+0x264>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	bf94      	ite	ls
 800a9d8:	2301      	movls	r3, #1
 800a9da:	2300      	movhi	r3, #0
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e0db      	b.n	800ab9e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4a72      	ldr	r2, [pc, #456]	; (800abb4 <HAL_I2C_Init+0x268>)
 800a9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ee:	0c9b      	lsrs	r3, r3, #18
 800a9f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	430a      	orrs	r2, r1
 800aa04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	4a64      	ldr	r2, [pc, #400]	; (800aba8 <HAL_I2C_Init+0x25c>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d802      	bhi.n	800aa20 <HAL_I2C_Init+0xd4>
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	e009      	b.n	800aa34 <HAL_I2C_Init+0xe8>
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa26:	fb02 f303 	mul.w	r3, r2, r3
 800aa2a:	4a63      	ldr	r2, [pc, #396]	; (800abb8 <HAL_I2C_Init+0x26c>)
 800aa2c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa30:	099b      	lsrs	r3, r3, #6
 800aa32:	3301      	adds	r3, #1
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	6812      	ldr	r2, [r2, #0]
 800aa38:	430b      	orrs	r3, r1
 800aa3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800aa46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	4956      	ldr	r1, [pc, #344]	; (800aba8 <HAL_I2C_Init+0x25c>)
 800aa50:	428b      	cmp	r3, r1
 800aa52:	d80d      	bhi.n	800aa70 <HAL_I2C_Init+0x124>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	1e59      	subs	r1, r3, #1
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa62:	3301      	adds	r3, #1
 800aa64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	bf38      	it	cc
 800aa6c:	2304      	movcc	r3, #4
 800aa6e:	e04f      	b.n	800ab10 <HAL_I2C_Init+0x1c4>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d111      	bne.n	800aa9c <HAL_I2C_Init+0x150>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	1e58      	subs	r0, r3, #1
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6859      	ldr	r1, [r3, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	440b      	add	r3, r1
 800aa86:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	bf0c      	ite	eq
 800aa94:	2301      	moveq	r3, #1
 800aa96:	2300      	movne	r3, #0
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	e012      	b.n	800aac2 <HAL_I2C_Init+0x176>
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	1e58      	subs	r0, r3, #1
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6859      	ldr	r1, [r3, #4]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	440b      	add	r3, r1
 800aaaa:	0099      	lsls	r1, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	fbb0 f3f3 	udiv	r3, r0, r3
 800aab2:	3301      	adds	r3, #1
 800aab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	bf0c      	ite	eq
 800aabc:	2301      	moveq	r3, #1
 800aabe:	2300      	movne	r3, #0
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <HAL_I2C_Init+0x17e>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e022      	b.n	800ab10 <HAL_I2C_Init+0x1c4>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10e      	bne.n	800aaf0 <HAL_I2C_Init+0x1a4>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	1e58      	subs	r0, r3, #1
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6859      	ldr	r1, [r3, #4]
 800aada:	460b      	mov	r3, r1
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	440b      	add	r3, r1
 800aae0:	fbb0 f3f3 	udiv	r3, r0, r3
 800aae4:	3301      	adds	r3, #1
 800aae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaee:	e00f      	b.n	800ab10 <HAL_I2C_Init+0x1c4>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	1e58      	subs	r0, r3, #1
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6859      	ldr	r1, [r3, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	440b      	add	r3, r1
 800aafe:	0099      	lsls	r1, r3, #2
 800ab00:	440b      	add	r3, r1
 800ab02:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab06:	3301      	adds	r3, #1
 800ab08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	6809      	ldr	r1, [r1, #0]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	69da      	ldr	r2, [r3, #28]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	431a      	orrs	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	430a      	orrs	r2, r1
 800ab32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ab3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	6911      	ldr	r1, [r2, #16]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	68d2      	ldr	r2, [r2, #12]
 800ab4a:	4311      	orrs	r1, r2
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	6812      	ldr	r2, [r2, #0]
 800ab50:	430b      	orrs	r3, r1
 800ab52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	695a      	ldr	r2, [r3, #20]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	431a      	orrs	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	430a      	orrs	r2, r1
 800ab6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f042 0201 	orr.w	r2, r2, #1
 800ab7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2220      	movs	r2, #32
 800ab8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	000186a0 	.word	0x000186a0
 800abac:	001e847f 	.word	0x001e847f
 800abb0:	003d08ff 	.word	0x003d08ff
 800abb4:	431bde83 	.word	0x431bde83
 800abb8:	10624dd3 	.word	0x10624dd3

0800abbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b088      	sub	sp, #32
 800abc0:	af02      	add	r7, sp, #8
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	4608      	mov	r0, r1
 800abc6:	4611      	mov	r1, r2
 800abc8:	461a      	mov	r2, r3
 800abca:	4603      	mov	r3, r0
 800abcc:	817b      	strh	r3, [r7, #10]
 800abce:	460b      	mov	r3, r1
 800abd0:	813b      	strh	r3, [r7, #8]
 800abd2:	4613      	mov	r3, r2
 800abd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800abd6:	f7ff f823 	bl	8009c20 <HAL_GetTick>
 800abda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	2b20      	cmp	r3, #32
 800abe6:	f040 80d9 	bne.w	800ad9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	2319      	movs	r3, #25
 800abf0:	2201      	movs	r2, #1
 800abf2:	496d      	ldr	r1, [pc, #436]	; (800ada8 <HAL_I2C_Mem_Write+0x1ec>)
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f002 fb82 	bl	800d2fe <I2C_WaitOnFlagUntilTimeout>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ac00:	2302      	movs	r3, #2
 800ac02:	e0cc      	b.n	800ad9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d101      	bne.n	800ac12 <HAL_I2C_Mem_Write+0x56>
 800ac0e:	2302      	movs	r3, #2
 800ac10:	e0c5      	b.n	800ad9e <HAL_I2C_Mem_Write+0x1e2>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d007      	beq.n	800ac38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f042 0201 	orr.w	r2, r2, #1
 800ac36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2221      	movs	r2, #33	; 0x21
 800ac4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2240      	movs	r2, #64	; 0x40
 800ac54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6a3a      	ldr	r2, [r7, #32]
 800ac62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	4a4d      	ldr	r2, [pc, #308]	; (800adac <HAL_I2C_Mem_Write+0x1f0>)
 800ac78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ac7a:	88f8      	ldrh	r0, [r7, #6]
 800ac7c:	893a      	ldrh	r2, [r7, #8]
 800ac7e:	8979      	ldrh	r1, [r7, #10]
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	9301      	str	r3, [sp, #4]
 800ac84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	4603      	mov	r3, r0
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f002 f82c 	bl	800cce8 <I2C_RequestMemoryWrite>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d052      	beq.n	800ad3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e081      	b.n	800ad9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f002 fc03 	bl	800d4aa <I2C_WaitOnTXEFlagUntilTimeout>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00d      	beq.n	800acc6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acae:	2b04      	cmp	r3, #4
 800acb0:	d107      	bne.n	800acc2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e06b      	b.n	800ad9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acca:	781a      	ldrb	r2, [r3, #0]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ace0:	3b01      	subs	r3, #1
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acec:	b29b      	uxth	r3, r3
 800acee:	3b01      	subs	r3, #1
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	f003 0304 	and.w	r3, r3, #4
 800ad00:	2b04      	cmp	r3, #4
 800ad02:	d11b      	bne.n	800ad3c <HAL_I2C_Mem_Write+0x180>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d017      	beq.n	800ad3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	781a      	ldrb	r2, [r3, #0]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1c:	1c5a      	adds	r2, r3, #1
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad26:	3b01      	subs	r3, #1
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	3b01      	subs	r3, #1
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1aa      	bne.n	800ac9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f002 fbef 	bl	800d52c <I2C_WaitOnBTFFlagUntilTimeout>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00d      	beq.n	800ad70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad58:	2b04      	cmp	r3, #4
 800ad5a:	d107      	bne.n	800ad6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e016      	b.n	800ad9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2220      	movs	r2, #32
 800ad84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e000      	b.n	800ad9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ad9c:	2302      	movs	r3, #2
  }
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3718      	adds	r7, #24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	00100002 	.word	0x00100002
 800adac:	ffff0000 	.word	0xffff0000

0800adb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b08c      	sub	sp, #48	; 0x30
 800adb4:	af02      	add	r7, sp, #8
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	4608      	mov	r0, r1
 800adba:	4611      	mov	r1, r2
 800adbc:	461a      	mov	r2, r3
 800adbe:	4603      	mov	r3, r0
 800adc0:	817b      	strh	r3, [r7, #10]
 800adc2:	460b      	mov	r3, r1
 800adc4:	813b      	strh	r3, [r7, #8]
 800adc6:	4613      	mov	r3, r2
 800adc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800adca:	f7fe ff29 	bl	8009c20 <HAL_GetTick>
 800adce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b20      	cmp	r3, #32
 800adda:	f040 8208 	bne.w	800b1ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	9300      	str	r3, [sp, #0]
 800ade2:	2319      	movs	r3, #25
 800ade4:	2201      	movs	r2, #1
 800ade6:	497b      	ldr	r1, [pc, #492]	; (800afd4 <HAL_I2C_Mem_Read+0x224>)
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f002 fa88 	bl	800d2fe <I2C_WaitOnFlagUntilTimeout>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800adf4:	2302      	movs	r3, #2
 800adf6:	e1fb      	b.n	800b1f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d101      	bne.n	800ae06 <HAL_I2C_Mem_Read+0x56>
 800ae02:	2302      	movs	r3, #2
 800ae04:	e1f4      	b.n	800b1f0 <HAL_I2C_Mem_Read+0x440>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0301 	and.w	r3, r3, #1
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d007      	beq.n	800ae2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f042 0201 	orr.w	r2, r2, #1
 800ae2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2222      	movs	r2, #34	; 0x22
 800ae40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2240      	movs	r2, #64	; 0x40
 800ae48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ae5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	4a5b      	ldr	r2, [pc, #364]	; (800afd8 <HAL_I2C_Mem_Read+0x228>)
 800ae6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ae6e:	88f8      	ldrh	r0, [r7, #6]
 800ae70:	893a      	ldrh	r2, [r7, #8]
 800ae72:	8979      	ldrh	r1, [r7, #10]
 800ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae76:	9301      	str	r3, [sp, #4]
 800ae78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7a:	9300      	str	r3, [sp, #0]
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f001 ffc6 	bl	800ce10 <I2C_RequestMemoryRead>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e1b0      	b.n	800b1f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d113      	bne.n	800aebe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae96:	2300      	movs	r3, #0
 800ae98:	623b      	str	r3, [r7, #32]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	695b      	ldr	r3, [r3, #20]
 800aea0:	623b      	str	r3, [r7, #32]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	623b      	str	r3, [r7, #32]
 800aeaa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	e184      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d11b      	bne.n	800aefe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aed4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aed6:	2300      	movs	r3, #0
 800aed8:	61fb      	str	r3, [r7, #28]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	695b      	ldr	r3, [r3, #20]
 800aee0:	61fb      	str	r3, [r7, #28]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	61fb      	str	r3, [r7, #28]
 800aeea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	e164      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af02:	2b02      	cmp	r3, #2
 800af04:	d11b      	bne.n	800af3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af26:	2300      	movs	r3, #0
 800af28:	61bb      	str	r3, [r7, #24]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	61bb      	str	r3, [r7, #24]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	61bb      	str	r3, [r7, #24]
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	e144      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af3e:	2300      	movs	r3, #0
 800af40:	617b      	str	r3, [r7, #20]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	617b      	str	r3, [r7, #20]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800af54:	e138      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af5a:	2b03      	cmp	r3, #3
 800af5c:	f200 80f1 	bhi.w	800b142 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af64:	2b01      	cmp	r3, #1
 800af66:	d123      	bne.n	800afb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f002 fb1e 	bl	800d5ae <I2C_WaitOnRXNEFlagUntilTimeout>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d001      	beq.n	800af7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	e139      	b.n	800b1f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	691a      	ldr	r2, [r3, #16]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af86:	b2d2      	uxtb	r2, r2
 800af88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af98:	3b01      	subs	r3, #1
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	3b01      	subs	r3, #1
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	855a      	strh	r2, [r3, #42]	; 0x2a
 800afae:	e10b      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d14e      	bne.n	800b056 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800afb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	2200      	movs	r2, #0
 800afc0:	4906      	ldr	r1, [pc, #24]	; (800afdc <HAL_I2C_Mem_Read+0x22c>)
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f002 f99b 	bl	800d2fe <I2C_WaitOnFlagUntilTimeout>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d008      	beq.n	800afe0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e10e      	b.n	800b1f0 <HAL_I2C_Mem_Read+0x440>
 800afd2:	bf00      	nop
 800afd4:	00100002 	.word	0x00100002
 800afd8:	ffff0000 	.word	0xffff0000
 800afdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	691a      	ldr	r2, [r3, #16]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affa:	b2d2      	uxtb	r2, r2
 800affc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b00c:	3b01      	subs	r3, #1
 800b00e:	b29a      	uxth	r2, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b018:	b29b      	uxth	r3, r3
 800b01a:	3b01      	subs	r3, #1
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	691a      	ldr	r2, [r3, #16]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02c:	b2d2      	uxtb	r2, r2
 800b02e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b034:	1c5a      	adds	r2, r3, #1
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b03e:	3b01      	subs	r3, #1
 800b040:	b29a      	uxth	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	3b01      	subs	r3, #1
 800b04e:	b29a      	uxth	r2, r3
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b054:	e0b8      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05c:	2200      	movs	r2, #0
 800b05e:	4966      	ldr	r1, [pc, #408]	; (800b1f8 <HAL_I2C_Mem_Read+0x448>)
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f002 f94c 	bl	800d2fe <I2C_WaitOnFlagUntilTimeout>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e0bf      	b.n	800b1f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b07e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	691a      	ldr	r2, [r3, #16]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	b2d2      	uxtb	r2, r2
 800b08c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	1c5a      	adds	r2, r3, #1
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b09c:	3b01      	subs	r3, #1
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	494f      	ldr	r1, [pc, #316]	; (800b1f8 <HAL_I2C_Mem_Read+0x448>)
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f002 f91e 	bl	800d2fe <I2C_WaitOnFlagUntilTimeout>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e091      	b.n	800b1f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	691a      	ldr	r2, [r3, #16]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e6:	b2d2      	uxtb	r2, r2
 800b0e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b104:	b29b      	uxth	r3, r3
 800b106:	3b01      	subs	r3, #1
 800b108:	b29a      	uxth	r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	691a      	ldr	r2, [r3, #16]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b118:	b2d2      	uxtb	r2, r2
 800b11a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b120:	1c5a      	adds	r2, r3, #1
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b12a:	3b01      	subs	r3, #1
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b136:	b29b      	uxth	r3, r3
 800b138:	3b01      	subs	r3, #1
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b140:	e042      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b144:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f002 fa31 	bl	800d5ae <I2C_WaitOnRXNEFlagUntilTimeout>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	e04c      	b.n	800b1f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	691a      	ldr	r2, [r3, #16]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b160:	b2d2      	uxtb	r2, r2
 800b162:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b168:	1c5a      	adds	r2, r3, #1
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b172:	3b01      	subs	r3, #1
 800b174:	b29a      	uxth	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b17e:	b29b      	uxth	r3, r3
 800b180:	3b01      	subs	r3, #1
 800b182:	b29a      	uxth	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	f003 0304 	and.w	r3, r3, #4
 800b192:	2b04      	cmp	r3, #4
 800b194:	d118      	bne.n	800b1c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	691a      	ldr	r2, [r3, #16]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a0:	b2d2      	uxtb	r2, r2
 800b1a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f47f aec2 	bne.w	800af56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	e000      	b.n	800b1f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b1ee:	2302      	movs	r3, #2
  }
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3728      	adds	r7, #40	; 0x28
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	00010004 	.word	0x00010004

0800b1fc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b087      	sub	sp, #28
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	4608      	mov	r0, r1
 800b206:	4611      	mov	r1, r2
 800b208:	461a      	mov	r2, r3
 800b20a:	4603      	mov	r3, r0
 800b20c:	817b      	strh	r3, [r7, #10]
 800b20e:	460b      	mov	r3, r1
 800b210:	813b      	strh	r3, [r7, #8]
 800b212:	4613      	mov	r3, r2
 800b214:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800b216:	2300      	movs	r3, #0
 800b218:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b220:	b2db      	uxtb	r3, r3
 800b222:	2b20      	cmp	r3, #32
 800b224:	f040 809a 	bne.w	800b35c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800b228:	4b50      	ldr	r3, [pc, #320]	; (800b36c <HAL_I2C_Mem_Read_IT+0x170>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	08db      	lsrs	r3, r3, #3
 800b22e:	4a50      	ldr	r2, [pc, #320]	; (800b370 <HAL_I2C_Mem_Read_IT+0x174>)
 800b230:	fba2 2303 	umull	r2, r3, r2, r3
 800b234:	0a1a      	lsrs	r2, r3, #8
 800b236:	4613      	mov	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	009a      	lsls	r2, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	3b01      	subs	r3, #1
 800b246:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d116      	bne.n	800b27c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2220      	movs	r2, #32
 800b258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b268:	f043 0220 	orr.w	r2, r3, #32
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	e070      	b.n	800b35e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	f003 0302 	and.w	r3, r3, #2
 800b286:	2b02      	cmp	r3, #2
 800b288:	d0db      	beq.n	800b242 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b290:	2b01      	cmp	r3, #1
 800b292:	d101      	bne.n	800b298 <HAL_I2C_Mem_Read_IT+0x9c>
 800b294:	2302      	movs	r3, #2
 800b296:	e062      	b.n	800b35e <HAL_I2C_Mem_Read_IT+0x162>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d007      	beq.n	800b2be <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f042 0201 	orr.w	r2, r2, #1
 800b2bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2cc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2222      	movs	r2, #34	; 0x22
 800b2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2240      	movs	r2, #64	; 0x40
 800b2da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6a3a      	ldr	r2, [r7, #32]
 800b2e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b2ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	4a1d      	ldr	r2, [pc, #116]	; (800b374 <HAL_I2C_Mem_Read_IT+0x178>)
 800b2fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800b300:	897a      	ldrh	r2, [r7, #10]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800b306:	893a      	ldrh	r2, [r7, #8]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800b30c:	88fa      	ldrh	r2, [r7, #6]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b326:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b336:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b344:	2b00      	cmp	r3, #0
 800b346:	d007      	beq.n	800b358 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800b356:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	e000      	b.n	800b35e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800b35c:	2302      	movs	r3, #2
  }
}
 800b35e:	4618      	mov	r0, r3
 800b360:	371c      	adds	r7, #28
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	20000108 	.word	0x20000108
 800b370:	14f8b589 	.word	0x14f8b589
 800b374:	ffff0000 	.word	0xffff0000

0800b378 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08c      	sub	sp, #48	; 0x30
 800b37c:	af02      	add	r7, sp, #8
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	4608      	mov	r0, r1
 800b382:	4611      	mov	r1, r2
 800b384:	461a      	mov	r2, r3
 800b386:	4603      	mov	r3, r0
 800b388:	817b      	strh	r3, [r7, #10]
 800b38a:	460b      	mov	r3, r1
 800b38c:	813b      	strh	r3, [r7, #8]
 800b38e:	4613      	mov	r3, r2
 800b390:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b392:	f7fe fc45 	bl	8009c20 <HAL_GetTick>
 800b396:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800b398:	2300      	movs	r3, #0
 800b39a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b20      	cmp	r3, #32
 800b3a6:	f040 8123 	bne.w	800b5f0 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800b3aa:	4b94      	ldr	r3, [pc, #592]	; (800b5fc <HAL_I2C_Mem_Read_DMA+0x284>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	08db      	lsrs	r3, r3, #3
 800b3b0:	4a93      	ldr	r2, [pc, #588]	; (800b600 <HAL_I2C_Mem_Read_DMA+0x288>)
 800b3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b6:	0a1a      	lsrs	r2, r3, #8
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	009a      	lsls	r2, r3, #2
 800b3c0:	4413      	add	r3, r2
 800b3c2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d116      	bne.n	800b3fe <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2220      	movs	r2, #32
 800b3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ea:	f043 0220 	orr.w	r2, r3, #32
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e0f9      	b.n	800b5f2 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	f003 0302 	and.w	r3, r3, #2
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d0db      	beq.n	800b3c4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b412:	2b01      	cmp	r3, #1
 800b414:	d101      	bne.n	800b41a <HAL_I2C_Mem_Read_DMA+0xa2>
 800b416:	2302      	movs	r3, #2
 800b418:	e0eb      	b.n	800b5f2 <HAL_I2C_Mem_Read_DMA+0x27a>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 0301 	and.w	r3, r3, #1
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d007      	beq.n	800b440 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f042 0201 	orr.w	r2, r2, #1
 800b43e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b44e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2222      	movs	r2, #34	; 0x22
 800b454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2240      	movs	r2, #64	; 0x40
 800b45c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b46a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b470:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b476:	b29a      	uxth	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	4a61      	ldr	r2, [pc, #388]	; (800b604 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800b480:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b486:	2b00      	cmp	r3, #0
 800b488:	f000 8085 	beq.w	800b596 <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b490:	4a5d      	ldr	r2, [pc, #372]	; (800b608 <HAL_I2C_Mem_Read_DMA+0x290>)
 800b492:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b498:	4a5c      	ldr	r2, [pc, #368]	; (800b60c <HAL_I2C_Mem_Read_DMA+0x294>)
 800b49a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3310      	adds	r3, #16
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4d2:	f7fe fd63 	bl	8009f9c <HAL_DMA_Start_IT>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 800b4dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d144      	bne.n	800b56e <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800b4e4:	88f8      	ldrh	r0, [r7, #6]
 800b4e6:	893a      	ldrh	r2, [r7, #8]
 800b4e8:	8979      	ldrh	r1, [r7, #10]
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	2323      	movs	r3, #35	; 0x23
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	68f8      	ldr	r0, [r7, #12]
 800b4f6:	f001 fc8b 	bl	800ce10 <I2C_RequestMemoryRead>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d001      	beq.n	800b504 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	e076      	b.n	800b5f2 <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d108      	bne.n	800b51e <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b51a:	601a      	str	r2, [r3, #0]
 800b51c:	e007      	b.n	800b52e <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	685a      	ldr	r2, [r3, #4]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b52c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b52e:	2300      	movs	r3, #0
 800b530:	61bb      	str	r3, [r7, #24]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	695b      	ldr	r3, [r3, #20]
 800b538:	61bb      	str	r3, [r7, #24]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	61bb      	str	r3, [r7, #24]
 800b542:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685a      	ldr	r2, [r3, #4]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b55a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b56a:	605a      	str	r2, [r3, #4]
 800b56c:	e03e      	b.n	800b5ec <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2220      	movs	r2, #32
 800b572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b582:	f043 0210 	orr.w	r2, r3, #16
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	e02d      	b.n	800b5f2 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800b596:	88f8      	ldrh	r0, [r7, #6]
 800b598:	893a      	ldrh	r2, [r7, #8]
 800b59a:	8979      	ldrh	r1, [r7, #10]
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	9301      	str	r3, [sp, #4]
 800b5a0:	2323      	movs	r3, #35	; 0x23
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f001 fc32 	bl	800ce10 <I2C_RequestMemoryRead>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e01d      	b.n	800b5f2 <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	617b      	str	r3, [r7, #20]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	695b      	ldr	r3, [r3, #20]
 800b5c0:	617b      	str	r3, [r7, #20]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	617b      	str	r3, [r7, #20]
 800b5ca:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5da:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2220      	movs	r2, #32
 800b5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	e000      	b.n	800b5f2 <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 800b5f0:	2302      	movs	r3, #2
  }
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3728      	adds	r7, #40	; 0x28
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	20000108 	.word	0x20000108
 800b600:	14f8b589 	.word	0x14f8b589
 800b604:	ffff0000 	.word	0xffff0000
 800b608:	0800cfdd 	.word	0x0800cfdd
 800b60c:	0800d187 	.word	0x0800d187

0800b610 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800b618:	2300      	movs	r3, #0
 800b61a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b628:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b630:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b638:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	2b10      	cmp	r3, #16
 800b63e:	d003      	beq.n	800b648 <HAL_I2C_EV_IRQHandler+0x38>
 800b640:	7bfb      	ldrb	r3, [r7, #15]
 800b642:	2b40      	cmp	r3, #64	; 0x40
 800b644:	f040 80b6 	bne.w	800b7b4 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	699b      	ldr	r3, [r3, #24]
 800b64e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d10d      	bne.n	800b67e <HAL_I2C_EV_IRQHandler+0x6e>
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800b668:	d003      	beq.n	800b672 <HAL_I2C_EV_IRQHandler+0x62>
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b670:	d101      	bne.n	800b676 <HAL_I2C_EV_IRQHandler+0x66>
 800b672:	2301      	movs	r3, #1
 800b674:	e000      	b.n	800b678 <HAL_I2C_EV_IRQHandler+0x68>
 800b676:	2300      	movs	r3, #0
 800b678:	2b01      	cmp	r3, #1
 800b67a:	f000 8127 	beq.w	800b8cc <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	f003 0301 	and.w	r3, r3, #1
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00c      	beq.n	800b6a2 <HAL_I2C_EV_IRQHandler+0x92>
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	0a5b      	lsrs	r3, r3, #9
 800b68c:	f003 0301 	and.w	r3, r3, #1
 800b690:	2b00      	cmp	r3, #0
 800b692:	d006      	beq.n	800b6a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f002 f80f 	bl	800d6b8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fd12 	bl	800c0c4 <I2C_Master_SB>
 800b6a0:	e087      	b.n	800b7b2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	08db      	lsrs	r3, r3, #3
 800b6a6:	f003 0301 	and.w	r3, r3, #1
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d009      	beq.n	800b6c2 <HAL_I2C_EV_IRQHandler+0xb2>
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	0a5b      	lsrs	r3, r3, #9
 800b6b2:	f003 0301 	and.w	r3, r3, #1
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d003      	beq.n	800b6c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fd88 	bl	800c1d0 <I2C_Master_ADD10>
 800b6c0:	e077      	b.n	800b7b2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	085b      	lsrs	r3, r3, #1
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d009      	beq.n	800b6e2 <HAL_I2C_EV_IRQHandler+0xd2>
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	0a5b      	lsrs	r3, r3, #9
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fda2 	bl	800c224 <I2C_Master_ADDR>
 800b6e0:	e067      	b.n	800b7b2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	089b      	lsrs	r3, r3, #2
 800b6e6:	f003 0301 	and.w	r3, r3, #1
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d030      	beq.n	800b750 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6fc:	f000 80e8 	beq.w	800b8d0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	09db      	lsrs	r3, r3, #7
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00f      	beq.n	800b72c <HAL_I2C_EV_IRQHandler+0x11c>
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	0a9b      	lsrs	r3, r3, #10
 800b710:	f003 0301 	and.w	r3, r3, #1
 800b714:	2b00      	cmp	r3, #0
 800b716:	d009      	beq.n	800b72c <HAL_I2C_EV_IRQHandler+0x11c>
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	089b      	lsrs	r3, r3, #2
 800b71c:	f003 0301 	and.w	r3, r3, #1
 800b720:	2b00      	cmp	r3, #0
 800b722:	d103      	bne.n	800b72c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f9de 	bl	800bae6 <I2C_MasterTransmit_TXE>
 800b72a:	e042      	b.n	800b7b2 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	089b      	lsrs	r3, r3, #2
 800b730:	f003 0301 	and.w	r3, r3, #1
 800b734:	2b00      	cmp	r3, #0
 800b736:	f000 80cb 	beq.w	800b8d0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	0a5b      	lsrs	r3, r3, #9
 800b73e:	f003 0301 	and.w	r3, r3, #1
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 80c4 	beq.w	800b8d0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fa68 	bl	800bc1e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b74e:	e0bf      	b.n	800b8d0 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b75a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b75e:	f000 80b7 	beq.w	800b8d0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	099b      	lsrs	r3, r3, #6
 800b766:	f003 0301 	and.w	r3, r3, #1
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00f      	beq.n	800b78e <HAL_I2C_EV_IRQHandler+0x17e>
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	0a9b      	lsrs	r3, r3, #10
 800b772:	f003 0301 	and.w	r3, r3, #1
 800b776:	2b00      	cmp	r3, #0
 800b778:	d009      	beq.n	800b78e <HAL_I2C_EV_IRQHandler+0x17e>
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	089b      	lsrs	r3, r3, #2
 800b77e:	f003 0301 	and.w	r3, r3, #1
 800b782:	2b00      	cmp	r3, #0
 800b784:	d103      	bne.n	800b78e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 fb30 	bl	800bdec <I2C_MasterReceive_RXNE>
 800b78c:	e011      	b.n	800b7b2 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	089b      	lsrs	r3, r3, #2
 800b792:	f003 0301 	and.w	r3, r3, #1
 800b796:	2b00      	cmp	r3, #0
 800b798:	f000 809a 	beq.w	800b8d0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	0a5b      	lsrs	r3, r3, #9
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f000 8093 	beq.w	800b8d0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fba0 	bl	800bef0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b7b0:	e08e      	b.n	800b8d0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800b7b2:	e08d      	b.n	800b8d0 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d004      	beq.n	800b7c6 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	61fb      	str	r3, [r7, #28]
 800b7c4:	e007      	b.n	800b7d6 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	695b      	ldr	r3, [r3, #20]
 800b7d4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	085b      	lsrs	r3, r3, #1
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d012      	beq.n	800b808 <HAL_I2C_EV_IRQHandler+0x1f8>
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	0a5b      	lsrs	r3, r3, #9
 800b7e6:	f003 0301 	and.w	r3, r3, #1
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00c      	beq.n	800b808 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800b7fe:	69b9      	ldr	r1, [r7, #24]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 ff5e 	bl	800c6c2 <I2C_Slave_ADDR>
 800b806:	e066      	b.n	800b8d6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	091b      	lsrs	r3, r3, #4
 800b80c:	f003 0301 	and.w	r3, r3, #1
 800b810:	2b00      	cmp	r3, #0
 800b812:	d009      	beq.n	800b828 <HAL_I2C_EV_IRQHandler+0x218>
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	0a5b      	lsrs	r3, r3, #9
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d003      	beq.n	800b828 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 ff93 	bl	800c74c <I2C_Slave_STOPF>
 800b826:	e056      	b.n	800b8d6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	2b21      	cmp	r3, #33	; 0x21
 800b82c:	d002      	beq.n	800b834 <HAL_I2C_EV_IRQHandler+0x224>
 800b82e:	7bbb      	ldrb	r3, [r7, #14]
 800b830:	2b29      	cmp	r3, #41	; 0x29
 800b832:	d125      	bne.n	800b880 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	09db      	lsrs	r3, r3, #7
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00f      	beq.n	800b860 <HAL_I2C_EV_IRQHandler+0x250>
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	0a9b      	lsrs	r3, r3, #10
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d009      	beq.n	800b860 <HAL_I2C_EV_IRQHandler+0x250>
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	089b      	lsrs	r3, r3, #2
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	2b00      	cmp	r3, #0
 800b856:	d103      	bne.n	800b860 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fe74 	bl	800c546 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b85e:	e039      	b.n	800b8d4 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	089b      	lsrs	r3, r3, #2
 800b864:	f003 0301 	and.w	r3, r3, #1
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d033      	beq.n	800b8d4 <HAL_I2C_EV_IRQHandler+0x2c4>
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	0a5b      	lsrs	r3, r3, #9
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d02d      	beq.n	800b8d4 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 fea1 	bl	800c5c0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b87e:	e029      	b.n	800b8d4 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	099b      	lsrs	r3, r3, #6
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00f      	beq.n	800b8ac <HAL_I2C_EV_IRQHandler+0x29c>
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	0a9b      	lsrs	r3, r3, #10
 800b890:	f003 0301 	and.w	r3, r3, #1
 800b894:	2b00      	cmp	r3, #0
 800b896:	d009      	beq.n	800b8ac <HAL_I2C_EV_IRQHandler+0x29c>
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	089b      	lsrs	r3, r3, #2
 800b89c:	f003 0301 	and.w	r3, r3, #1
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d103      	bne.n	800b8ac <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 feac 	bl	800c602 <I2C_SlaveReceive_RXNE>
 800b8aa:	e014      	b.n	800b8d6 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	089b      	lsrs	r3, r3, #2
 800b8b0:	f003 0301 	and.w	r3, r3, #1
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00e      	beq.n	800b8d6 <HAL_I2C_EV_IRQHandler+0x2c6>
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	0a5b      	lsrs	r3, r3, #9
 800b8bc:	f003 0301 	and.w	r3, r3, #1
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d008      	beq.n	800b8d6 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 feda 	bl	800c67e <I2C_SlaveReceive_BTF>
 800b8ca:	e004      	b.n	800b8d6 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 800b8cc:	bf00      	nop
 800b8ce:	e002      	b.n	800b8d6 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b8d0:	bf00      	nop
 800b8d2:	e000      	b.n	800b8d6 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b8d4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800b8d6:	3720      	adds	r7, #32
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b08a      	sub	sp, #40	; 0x28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8fe:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	0a1b      	lsrs	r3, r3, #8
 800b904:	f003 0301 	and.w	r3, r3, #1
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00e      	beq.n	800b92a <HAL_I2C_ER_IRQHandler+0x4e>
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	0a1b      	lsrs	r3, r3, #8
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	d008      	beq.n	800b92a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91a:	f043 0301 	orr.w	r3, r3, #1
 800b91e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b928:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b92a:	6a3b      	ldr	r3, [r7, #32]
 800b92c:	0a5b      	lsrs	r3, r3, #9
 800b92e:	f003 0301 	and.w	r3, r3, #1
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00e      	beq.n	800b954 <HAL_I2C_ER_IRQHandler+0x78>
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	0a1b      	lsrs	r3, r3, #8
 800b93a:	f003 0301 	and.w	r3, r3, #1
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d008      	beq.n	800b954 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800b942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b944:	f043 0302 	orr.w	r3, r3, #2
 800b948:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800b952:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	0a9b      	lsrs	r3, r3, #10
 800b958:	f003 0301 	and.w	r3, r3, #1
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d03f      	beq.n	800b9e0 <HAL_I2C_ER_IRQHandler+0x104>
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	0a1b      	lsrs	r3, r3, #8
 800b964:	f003 0301 	and.w	r3, r3, #1
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d039      	beq.n	800b9e0 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800b96c:	7efb      	ldrb	r3, [r7, #27]
 800b96e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b974:	b29b      	uxth	r3, r3
 800b976:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b97e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b984:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800b986:	7ebb      	ldrb	r3, [r7, #26]
 800b988:	2b20      	cmp	r3, #32
 800b98a:	d112      	bne.n	800b9b2 <HAL_I2C_ER_IRQHandler+0xd6>
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d10f      	bne.n	800b9b2 <HAL_I2C_ER_IRQHandler+0xd6>
 800b992:	7cfb      	ldrb	r3, [r7, #19]
 800b994:	2b21      	cmp	r3, #33	; 0x21
 800b996:	d008      	beq.n	800b9aa <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800b998:	7cfb      	ldrb	r3, [r7, #19]
 800b99a:	2b29      	cmp	r3, #41	; 0x29
 800b99c:	d005      	beq.n	800b9aa <HAL_I2C_ER_IRQHandler+0xce>
 800b99e:	7cfb      	ldrb	r3, [r7, #19]
 800b9a0:	2b28      	cmp	r3, #40	; 0x28
 800b9a2:	d106      	bne.n	800b9b2 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2b21      	cmp	r3, #33	; 0x21
 800b9a8:	d103      	bne.n	800b9b2 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fffe 	bl	800c9ac <I2C_Slave_AF>
 800b9b0:	e016      	b.n	800b9e0 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b9ba:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	f043 0304 	orr.w	r3, r3, #4
 800b9c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800b9c4:	7efb      	ldrb	r3, [r7, #27]
 800b9c6:	2b10      	cmp	r3, #16
 800b9c8:	d002      	beq.n	800b9d0 <HAL_I2C_ER_IRQHandler+0xf4>
 800b9ca:	7efb      	ldrb	r3, [r7, #27]
 800b9cc:	2b40      	cmp	r3, #64	; 0x40
 800b9ce:	d107      	bne.n	800b9e0 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9de:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b9e0:	6a3b      	ldr	r3, [r7, #32]
 800b9e2:	0adb      	lsrs	r3, r3, #11
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00e      	beq.n	800ba0a <HAL_I2C_ER_IRQHandler+0x12e>
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	0a1b      	lsrs	r3, r3, #8
 800b9f0:	f003 0301 	and.w	r3, r3, #1
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d008      	beq.n	800ba0a <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fa:	f043 0308 	orr.w	r3, r3, #8
 800b9fe:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800ba08:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d008      	beq.n	800ba22 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	431a      	orrs	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f001 f835 	bl	800ca8c <I2C_ITError>
  }
}
 800ba22:	bf00      	nop
 800ba24:	3728      	adds	r7, #40	; 0x28
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b083      	sub	sp, #12
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ba32:	bf00      	nop
 800ba34:	370c      	adds	r7, #12
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b083      	sub	sp, #12
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ba46:	bf00      	nop
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ba5a:	bf00      	nop
 800ba5c:	370c      	adds	r7, #12
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr

0800ba66 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba66:	b480      	push	{r7}
 800ba68:	b083      	sub	sp, #12
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ba6e:	bf00      	nop
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b083      	sub	sp, #12
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	460b      	mov	r3, r1
 800ba84:	70fb      	strb	r3, [r7, #3]
 800ba86:	4613      	mov	r3, r2
 800ba88:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ba8a:	bf00      	nop
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba96:	b480      	push	{r7}
 800ba98:	b083      	sub	sp, #12
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800ba9e:	bf00      	nop
 800baa0:	370c      	adds	r7, #12
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800baaa:	b480      	push	{r7}
 800baac:	b083      	sub	sp, #12
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800bab2:	bf00      	nop
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bac6:	bf00      	nop
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bad2:	b480      	push	{r7}
 800bad4:	b083      	sub	sp, #12
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bada:	bf00      	nop
 800badc:	370c      	adds	r7, #12
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b084      	sub	sp, #16
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baf4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bafc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb02:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d150      	bne.n	800bbae <I2C_MasterTransmit_TXE+0xc8>
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
 800bb0e:	2b21      	cmp	r3, #33	; 0x21
 800bb10:	d14d      	bne.n	800bbae <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	2b08      	cmp	r3, #8
 800bb16:	d01d      	beq.n	800bb54 <I2C_MasterTransmit_TXE+0x6e>
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	2b20      	cmp	r3, #32
 800bb1c:	d01a      	beq.n	800bb54 <I2C_MasterTransmit_TXE+0x6e>
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb24:	d016      	beq.n	800bb54 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bb34:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2211      	movs	r2, #17
 800bb3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2220      	movs	r2, #32
 800bb48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7ff ff6c 	bl	800ba2a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bb52:	e060      	b.n	800bc16 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bb62:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb72:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2220      	movs	r2, #32
 800bb7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b40      	cmp	r3, #64	; 0x40
 800bb8c:	d107      	bne.n	800bb9e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7ff ff87 	bl	800baaa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bb9c:	e03b      	b.n	800bc16 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7ff ff3f 	bl	800ba2a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bbac:	e033      	b.n	800bc16 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800bbae:	7bfb      	ldrb	r3, [r7, #15]
 800bbb0:	2b21      	cmp	r3, #33	; 0x21
 800bbb2:	d005      	beq.n	800bbc0 <I2C_MasterTransmit_TXE+0xda>
 800bbb4:	7bbb      	ldrb	r3, [r7, #14]
 800bbb6:	2b40      	cmp	r3, #64	; 0x40
 800bbb8:	d12d      	bne.n	800bc16 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800bbba:	7bfb      	ldrb	r3, [r7, #15]
 800bbbc:	2b22      	cmp	r3, #34	; 0x22
 800bbbe:	d12a      	bne.n	800bc16 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d108      	bne.n	800bbdc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	685a      	ldr	r2, [r3, #4]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbd8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800bbda:	e01c      	b.n	800bc16 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	2b40      	cmp	r3, #64	; 0x40
 800bbe6:	d103      	bne.n	800bbf0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f898 	bl	800bd1e <I2C_MemoryTransmit_TXE_BTF>
}
 800bbee:	e012      	b.n	800bc16 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf4:	781a      	ldrb	r2, [r3, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800bc14:	e7ff      	b.n	800bc16 <I2C_MasterTransmit_TXE+0x130>
 800bc16:	bf00      	nop
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b084      	sub	sp, #16
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	2b21      	cmp	r3, #33	; 0x21
 800bc36:	d165      	bne.n	800bd04 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d012      	beq.n	800bc68 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc46:	781a      	ldrb	r2, [r3, #0]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc52:	1c5a      	adds	r2, r3, #1
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800bc66:	e056      	b.n	800bd16 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b08      	cmp	r3, #8
 800bc6c:	d01d      	beq.n	800bcaa <I2C_MasterTransmit_BTF+0x8c>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2b20      	cmp	r3, #32
 800bc72:	d01a      	beq.n	800bcaa <I2C_MasterTransmit_BTF+0x8c>
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc7a:	d016      	beq.n	800bcaa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	685a      	ldr	r2, [r3, #4]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bc8a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2211      	movs	r2, #17
 800bc90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2220      	movs	r2, #32
 800bc9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f7ff fec1 	bl	800ba2a <HAL_I2C_MasterTxCpltCallback>
}
 800bca8:	e035      	b.n	800bd16 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	685a      	ldr	r2, [r3, #4]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bcb8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcc8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2220      	movs	r2, #32
 800bcd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	2b40      	cmp	r3, #64	; 0x40
 800bce2:	d107      	bne.n	800bcf4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7ff fedc 	bl	800baaa <HAL_I2C_MemTxCpltCallback>
}
 800bcf2:	e010      	b.n	800bd16 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7ff fe94 	bl	800ba2a <HAL_I2C_MasterTxCpltCallback>
}
 800bd02:	e008      	b.n	800bd16 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b40      	cmp	r3, #64	; 0x40
 800bd0e:	d102      	bne.n	800bd16 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 f804 	bl	800bd1e <I2C_MemoryTransmit_TXE_BTF>
}
 800bd16:	bf00      	nop
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b083      	sub	sp, #12
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d11d      	bne.n	800bd6a <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d10b      	bne.n	800bd4e <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd46:	1c9a      	adds	r2, r3, #2
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800bd4c:	e048      	b.n	800bde0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	121b      	asrs	r3, r3, #8
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd62:	1c5a      	adds	r2, r3, #1
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bd68:	e03a      	b.n	800bde0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d10b      	bne.n	800bd8a <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd76:	b2da      	uxtb	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd82:	1c5a      	adds	r2, r3, #1
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bd88:	e02a      	b.n	800bde0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d126      	bne.n	800bde0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	2b22      	cmp	r3, #34	; 0x22
 800bd9c:	d108      	bne.n	800bdb0 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdac:	601a      	str	r2, [r3, #0]
}
 800bdae:	e017      	b.n	800bde0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	2b21      	cmp	r3, #33	; 0x21
 800bdba:	d111      	bne.n	800bde0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc0:	781a      	ldrb	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdcc:	1c5a      	adds	r2, r3, #1
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b22      	cmp	r3, #34	; 0x22
 800bdfe:	d173      	bne.n	800bee8 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be04:	b29b      	uxth	r3, r3
 800be06:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d920      	bls.n	800be50 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	691a      	ldr	r2, [r3, #16]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be18:	b2d2      	uxtb	r2, r2
 800be1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be20:	1c5a      	adds	r2, r3, #1
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	3b01      	subs	r3, #1
 800be2e:	b29a      	uxth	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be38:	b29b      	uxth	r3, r3
 800be3a:	2b03      	cmp	r3, #3
 800be3c:	d154      	bne.n	800bee8 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	685a      	ldr	r2, [r3, #4]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be4c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800be4e:	e04b      	b.n	800bee8 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be54:	2b02      	cmp	r3, #2
 800be56:	d047      	beq.n	800bee8 <I2C_MasterReceive_RXNE+0xfc>
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d002      	beq.n	800be64 <I2C_MasterReceive_RXNE+0x78>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d141      	bne.n	800bee8 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be72:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800be82:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	691a      	ldr	r2, [r3, #16]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	b2d2      	uxtb	r2, r2
 800be90:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	3b01      	subs	r3, #1
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2220      	movs	r2, #32
 800beae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b40      	cmp	r3, #64	; 0x40
 800bebc:	d10a      	bne.n	800bed4 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7fa ff39 	bl	8006d44 <HAL_I2C_MemRxCpltCallback>
}
 800bed2:	e009      	b.n	800bee8 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2212      	movs	r2, #18
 800bee0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f7ff fdab 	bl	800ba3e <HAL_I2C_MasterRxCpltCallback>
}
 800bee8:	bf00      	nop
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	2b04      	cmp	r3, #4
 800bf06:	d11b      	bne.n	800bf40 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf16:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	691a      	ldr	r2, [r3, #16]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf22:	b2d2      	uxtb	r2, r2
 800bf24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2a:	1c5a      	adds	r2, r3, #1
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	3b01      	subs	r3, #1
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800bf3e:	e0bd      	b.n	800c0bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	d129      	bne.n	800bf9e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	685a      	ldr	r2, [r3, #4]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf58:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b04      	cmp	r3, #4
 800bf5e:	d00a      	beq.n	800bf76 <I2C_MasterReceive_BTF+0x86>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d007      	beq.n	800bf76 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf74:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	691a      	ldr	r2, [r3, #16]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf80:	b2d2      	uxtb	r2, r2
 800bf82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf88:	1c5a      	adds	r2, r3, #1
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	3b01      	subs	r3, #1
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800bf9c:	e08e      	b.n	800c0bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d176      	bne.n	800c096 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d002      	beq.n	800bfb4 <I2C_MasterReceive_BTF+0xc4>
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2b10      	cmp	r3, #16
 800bfb2:	d108      	bne.n	800bfc6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	e019      	b.n	800bffa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2b04      	cmp	r3, #4
 800bfca:	d002      	beq.n	800bfd2 <I2C_MasterReceive_BTF+0xe2>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	d108      	bne.n	800bfe4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bfe0:	601a      	str	r2, [r3, #0]
 800bfe2:	e00a      	b.n	800bffa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b10      	cmp	r3, #16
 800bfe8:	d007      	beq.n	800bffa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bff8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	691a      	ldr	r2, [r3, #16]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c004:	b2d2      	uxtb	r2, r2
 800c006:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00c:	1c5a      	adds	r2, r3, #1
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c016:	b29b      	uxth	r3, r3
 800c018:	3b01      	subs	r3, #1
 800c01a:	b29a      	uxth	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	691a      	ldr	r2, [r3, #16]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02a:	b2d2      	uxtb	r2, r2
 800c02c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c032:	1c5a      	adds	r2, r3, #1
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	3b01      	subs	r3, #1
 800c040:	b29a      	uxth	r2, r3
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c054:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2220      	movs	r2, #32
 800c05a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b40      	cmp	r3, #64	; 0x40
 800c068:	d10a      	bne.n	800c080 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7fa fe63 	bl	8006d44 <HAL_I2C_MemRxCpltCallback>
}
 800c07e:	e01d      	b.n	800c0bc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2212      	movs	r2, #18
 800c08c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7ff fcd5 	bl	800ba3e <HAL_I2C_MasterRxCpltCallback>
}
 800c094:	e012      	b.n	800c0bc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	691a      	ldr	r2, [r3, #16]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a0:	b2d2      	uxtb	r2, r2
 800c0a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a8:	1c5a      	adds	r2, r3, #1
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c0bc:	bf00      	nop
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	2b40      	cmp	r3, #64	; 0x40
 800c0d6:	d117      	bne.n	800c108 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d109      	bne.n	800c0f4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c0f0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800c0f2:	e067      	b.n	800c1c4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	f043 0301 	orr.w	r3, r3, #1
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	611a      	str	r2, [r3, #16]
}
 800c106:	e05d      	b.n	800c1c4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c110:	d133      	bne.n	800c17a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	2b21      	cmp	r3, #33	; 0x21
 800c11c:	d109      	bne.n	800c132 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c122:	b2db      	uxtb	r3, r3
 800c124:	461a      	mov	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c12e:	611a      	str	r2, [r3, #16]
 800c130:	e008      	b.n	800c144 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c136:	b2db      	uxtb	r3, r3
 800c138:	f043 0301 	orr.w	r3, r3, #1
 800c13c:	b2da      	uxtb	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d004      	beq.n	800c156 <I2C_Master_SB+0x92>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c152:	2b00      	cmp	r3, #0
 800c154:	d108      	bne.n	800c168 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d032      	beq.n	800c1c4 <I2C_Master_SB+0x100>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c164:	2b00      	cmp	r3, #0
 800c166:	d02d      	beq.n	800c1c4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	685a      	ldr	r2, [r3, #4]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c176:	605a      	str	r2, [r3, #4]
}
 800c178:	e024      	b.n	800c1c4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10e      	bne.n	800c1a0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c186:	b29b      	uxth	r3, r3
 800c188:	11db      	asrs	r3, r3, #7
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	f003 0306 	and.w	r3, r3, #6
 800c190:	b2db      	uxtb	r3, r3
 800c192:	f063 030f 	orn	r3, r3, #15
 800c196:	b2da      	uxtb	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	611a      	str	r2, [r3, #16]
}
 800c19e:	e011      	b.n	800c1c4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d10d      	bne.n	800c1c4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	11db      	asrs	r3, r3, #7
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	f003 0306 	and.w	r3, r3, #6
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	f063 030e 	orn	r3, r3, #14
 800c1bc:	b2da      	uxtb	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	611a      	str	r2, [r3, #16]
}
 800c1c4:	bf00      	nop
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d103      	bne.n	800c1f4 <I2C_Master_ADD10+0x24>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d011      	beq.n	800c218 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d104      	bne.n	800c208 <I2C_Master_ADD10+0x38>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c204:	2b00      	cmp	r3, #0
 800c206:	d007      	beq.n	800c218 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	685a      	ldr	r2, [r3, #4]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c216:	605a      	str	r2, [r3, #4]
    }
  }
}
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800c224:	b480      	push	{r7}
 800c226:	b091      	sub	sp, #68	; 0x44
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c232:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c240:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b22      	cmp	r3, #34	; 0x22
 800c24c:	f040 8169 	bne.w	800c522 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10f      	bne.n	800c278 <I2C_Master_ADDR+0x54>
 800c258:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c25c:	2b40      	cmp	r3, #64	; 0x40
 800c25e:	d10b      	bne.n	800c278 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c260:	2300      	movs	r3, #0
 800c262:	633b      	str	r3, [r7, #48]	; 0x30
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	695b      	ldr	r3, [r3, #20]
 800c26a:	633b      	str	r3, [r7, #48]	; 0x30
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	699b      	ldr	r3, [r3, #24]
 800c272:	633b      	str	r3, [r7, #48]	; 0x30
 800c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c276:	e160      	b.n	800c53a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d11d      	bne.n	800c2bc <I2C_Master_ADDR+0x98>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c288:	d118      	bne.n	800c2bc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c28a:	2300      	movs	r3, #0
 800c28c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	699b      	ldr	r3, [r3, #24]
 800c29c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2ae:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b4:	1c5a      	adds	r2, r3, #1
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	651a      	str	r2, [r3, #80]	; 0x50
 800c2ba:	e13e      	b.n	800c53a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d113      	bne.n	800c2ee <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	695b      	ldr	r3, [r3, #20]
 800c2d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	699b      	ldr	r3, [r3, #24]
 800c2d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2da:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2ea:	601a      	str	r2, [r3, #0]
 800c2ec:	e115      	b.n	800c51a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	f040 808a 	bne.w	800c40e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800c2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c300:	d137      	bne.n	800c372 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c310:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c31c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c320:	d113      	bne.n	800c34a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c330:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c332:	2300      	movs	r3, #0
 800c334:	627b      	str	r3, [r7, #36]	; 0x24
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	695b      	ldr	r3, [r3, #20]
 800c33c:	627b      	str	r3, [r7, #36]	; 0x24
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	699b      	ldr	r3, [r3, #24]
 800c344:	627b      	str	r3, [r7, #36]	; 0x24
 800c346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c348:	e0e7      	b.n	800c51a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c34a:	2300      	movs	r3, #0
 800c34c:	623b      	str	r3, [r7, #32]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	695b      	ldr	r3, [r3, #20]
 800c354:	623b      	str	r3, [r7, #32]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	699b      	ldr	r3, [r3, #24]
 800c35c:	623b      	str	r3, [r7, #32]
 800c35e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c36e:	601a      	str	r2, [r3, #0]
 800c370:	e0d3      	b.n	800c51a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800c372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c374:	2b08      	cmp	r3, #8
 800c376:	d02e      	beq.n	800c3d6 <I2C_Master_ADDR+0x1b2>
 800c378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37a:	2b20      	cmp	r3, #32
 800c37c:	d02b      	beq.n	800c3d6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800c37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c380:	2b12      	cmp	r3, #18
 800c382:	d102      	bne.n	800c38a <I2C_Master_ADDR+0x166>
 800c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c386:	2b01      	cmp	r3, #1
 800c388:	d125      	bne.n	800c3d6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800c38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38c:	2b04      	cmp	r3, #4
 800c38e:	d00e      	beq.n	800c3ae <I2C_Master_ADDR+0x18a>
 800c390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c392:	2b02      	cmp	r3, #2
 800c394:	d00b      	beq.n	800c3ae <I2C_Master_ADDR+0x18a>
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	2b10      	cmp	r3, #16
 800c39a:	d008      	beq.n	800c3ae <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3aa:	601a      	str	r2, [r3, #0]
 800c3ac:	e007      	b.n	800c3be <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c3bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c3be:	2300      	movs	r3, #0
 800c3c0:	61fb      	str	r3, [r7, #28]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	695b      	ldr	r3, [r3, #20]
 800c3c8:	61fb      	str	r3, [r7, #28]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	61fb      	str	r3, [r7, #28]
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	e0a1      	b.n	800c51a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3e4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	61bb      	str	r3, [r7, #24]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	61bb      	str	r3, [r7, #24]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	61bb      	str	r3, [r7, #24]
 800c3fa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c40a:	601a      	str	r2, [r3, #0]
 800c40c:	e085      	b.n	800c51a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c412:	b29b      	uxth	r3, r3
 800c414:	2b02      	cmp	r3, #2
 800c416:	d14d      	bne.n	800c4b4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	2b04      	cmp	r3, #4
 800c41c:	d016      	beq.n	800c44c <I2C_Master_ADDR+0x228>
 800c41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c420:	2b02      	cmp	r3, #2
 800c422:	d013      	beq.n	800c44c <I2C_Master_ADDR+0x228>
 800c424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c426:	2b10      	cmp	r3, #16
 800c428:	d010      	beq.n	800c44c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c438:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c448:	601a      	str	r2, [r3, #0]
 800c44a:	e007      	b.n	800c45c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c45a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c46a:	d117      	bne.n	800c49c <I2C_Master_ADDR+0x278>
 800c46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c472:	d00b      	beq.n	800c48c <I2C_Master_ADDR+0x268>
 800c474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c476:	2b01      	cmp	r3, #1
 800c478:	d008      	beq.n	800c48c <I2C_Master_ADDR+0x268>
 800c47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47c:	2b08      	cmp	r3, #8
 800c47e:	d005      	beq.n	800c48c <I2C_Master_ADDR+0x268>
 800c480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c482:	2b10      	cmp	r3, #16
 800c484:	d002      	beq.n	800c48c <I2C_Master_ADDR+0x268>
 800c486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c488:	2b20      	cmp	r3, #32
 800c48a:	d107      	bne.n	800c49c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	685a      	ldr	r2, [r3, #4]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c49a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c49c:	2300      	movs	r3, #0
 800c49e:	617b      	str	r3, [r7, #20]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	695b      	ldr	r3, [r3, #20]
 800c4a6:	617b      	str	r3, [r7, #20]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	617b      	str	r3, [r7, #20]
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	e032      	b.n	800c51a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c4c2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4d2:	d117      	bne.n	800c504 <I2C_Master_ADDR+0x2e0>
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c4da:	d00b      	beq.n	800c4f4 <I2C_Master_ADDR+0x2d0>
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d008      	beq.n	800c4f4 <I2C_Master_ADDR+0x2d0>
 800c4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e4:	2b08      	cmp	r3, #8
 800c4e6:	d005      	beq.n	800c4f4 <I2C_Master_ADDR+0x2d0>
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ea:	2b10      	cmp	r3, #16
 800c4ec:	d002      	beq.n	800c4f4 <I2C_Master_ADDR+0x2d0>
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f0:	2b20      	cmp	r3, #32
 800c4f2:	d107      	bne.n	800c504 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	685a      	ldr	r2, [r3, #4]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c502:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c504:	2300      	movs	r3, #0
 800c506:	613b      	str	r3, [r7, #16]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	695b      	ldr	r3, [r3, #20]
 800c50e:	613b      	str	r3, [r7, #16]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	613b      	str	r3, [r7, #16]
 800c518:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800c520:	e00b      	b.n	800c53a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c522:	2300      	movs	r3, #0
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	695b      	ldr	r3, [r3, #20]
 800c52c:	60fb      	str	r3, [r7, #12]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	699b      	ldr	r3, [r3, #24]
 800c534:	60fb      	str	r3, [r7, #12]
 800c536:	68fb      	ldr	r3, [r7, #12]
}
 800c538:	e7ff      	b.n	800c53a <I2C_Master_ADDR+0x316>
 800c53a:	bf00      	nop
 800c53c:	3744      	adds	r7, #68	; 0x44
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr

0800c546 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b084      	sub	sp, #16
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c554:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d02b      	beq.n	800c5b8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c564:	781a      	ldrb	r2, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c570:	1c5a      	adds	r2, r3, #1
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	3b01      	subs	r3, #1
 800c57e:	b29a      	uxth	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c588:	b29b      	uxth	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d114      	bne.n	800c5b8 <I2C_SlaveTransmit_TXE+0x72>
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
 800c590:	2b29      	cmp	r3, #41	; 0x29
 800c592:	d111      	bne.n	800c5b8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5a2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2221      	movs	r2, #33	; 0x21
 800c5a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2228      	movs	r2, #40	; 0x28
 800c5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7ff fa4d 	bl	800ba52 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800c5b8:	bf00      	nop
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d011      	beq.n	800c5f6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d6:	781a      	ldrb	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e2:	1c5a      	adds	r2, r3, #1
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	b29a      	uxth	r2, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800c5f6:	bf00      	nop
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr

0800c602 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c610:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c616:	b29b      	uxth	r3, r3
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d02c      	beq.n	800c676 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	691a      	ldr	r2, [r3, #16]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c626:	b2d2      	uxtb	r2, r2
 800c628:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62e:	1c5a      	adds	r2, r3, #1
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c638:	b29b      	uxth	r3, r3
 800c63a:	3b01      	subs	r3, #1
 800c63c:	b29a      	uxth	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c646:	b29b      	uxth	r3, r3
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d114      	bne.n	800c676 <I2C_SlaveReceive_RXNE+0x74>
 800c64c:	7bfb      	ldrb	r3, [r7, #15]
 800c64e:	2b2a      	cmp	r3, #42	; 0x2a
 800c650:	d111      	bne.n	800c676 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c660:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2222      	movs	r2, #34	; 0x22
 800c666:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2228      	movs	r2, #40	; 0x28
 800c66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7ff f9f8 	bl	800ba66 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800c676:	bf00      	nop
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c67e:	b480      	push	{r7}
 800c680:	b083      	sub	sp, #12
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d012      	beq.n	800c6b6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	691a      	ldr	r2, [r3, #16]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69a:	b2d2      	uxtb	r2, r2
 800c69c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a2:	1c5a      	adds	r2, r3, #1
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	b29a      	uxth	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800c6b6:	bf00      	nop
 800c6b8:	370c      	adds	r7, #12
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b084      	sub	sp, #16
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c6dc:	2b28      	cmp	r3, #40	; 0x28
 800c6de:	d127      	bne.n	800c730 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6ee:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	089b      	lsrs	r3, r3, #2
 800c6f4:	f003 0301 	and.w	r3, r3, #1
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	09db      	lsrs	r3, r3, #7
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d103      	bne.n	800c714 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	81bb      	strh	r3, [r7, #12]
 800c712:	e002      	b.n	800c71a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800c722:	89ba      	ldrh	r2, [r7, #12]
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	4619      	mov	r1, r3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7ff f9a6 	bl	800ba7a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c72e:	e008      	b.n	800c742 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f06f 0202 	mvn.w	r2, #2
 800c738:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800c742:	bf00      	nop
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
	...

0800c74c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c75a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	685a      	ldr	r2, [r3, #4]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c76a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800c76c:	2300      	movs	r3, #0
 800c76e:	60bb      	str	r3, [r7, #8]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	695b      	ldr	r3, [r3, #20]
 800c776:	60bb      	str	r3, [r7, #8]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f042 0201 	orr.w	r2, r2, #1
 800c786:	601a      	str	r2, [r3, #0]
 800c788:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c798:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7a8:	d172      	bne.n	800c890 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
 800c7ac:	2b22      	cmp	r3, #34	; 0x22
 800c7ae:	d002      	beq.n	800c7b6 <I2C_Slave_STOPF+0x6a>
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
 800c7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c7b4:	d135      	bne.n	800c822 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d005      	beq.n	800c7da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d2:	f043 0204 	orr.w	r2, r3, #4
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	685a      	ldr	r2, [r3, #4]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c7e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fd fdd8 	bl	800a3a4 <HAL_DMA_GetState>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d049      	beq.n	800c88e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fe:	4a69      	ldr	r2, [pc, #420]	; (800c9a4 <I2C_Slave_STOPF+0x258>)
 800c800:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c806:	4618      	mov	r0, r3
 800c808:	f7fd fc20 	bl	800a04c <HAL_DMA_Abort_IT>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d03d      	beq.n	800c88e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c81c:	4610      	mov	r0, r2
 800c81e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c820:	e035      	b.n	800c88e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c834:	b29b      	uxth	r3, r3
 800c836:	2b00      	cmp	r3, #0
 800c838:	d005      	beq.n	800c846 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c83e:	f043 0204 	orr.w	r2, r3, #4
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c854:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fd fda2 	bl	800a3a4 <HAL_DMA_GetState>
 800c860:	4603      	mov	r3, r0
 800c862:	2b01      	cmp	r3, #1
 800c864:	d014      	beq.n	800c890 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c86a:	4a4e      	ldr	r2, [pc, #312]	; (800c9a4 <I2C_Slave_STOPF+0x258>)
 800c86c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c872:	4618      	mov	r0, r3
 800c874:	f7fd fbea 	bl	800a04c <HAL_DMA_Abort_IT>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d008      	beq.n	800c890 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c888:	4610      	mov	r0, r2
 800c88a:	4798      	blx	r3
 800c88c:	e000      	b.n	800c890 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c88e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c894:	b29b      	uxth	r3, r3
 800c896:	2b00      	cmp	r3, #0
 800c898:	d03e      	beq.n	800c918 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	695b      	ldr	r3, [r3, #20]
 800c8a0:	f003 0304 	and.w	r3, r3, #4
 800c8a4:	2b04      	cmp	r3, #4
 800c8a6:	d112      	bne.n	800c8ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	691a      	ldr	r2, [r3, #16]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b2:	b2d2      	uxtb	r2, r2
 800c8b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ba:	1c5a      	adds	r2, r3, #1
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	695b      	ldr	r3, [r3, #20]
 800c8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d8:	2b40      	cmp	r3, #64	; 0x40
 800c8da:	d112      	bne.n	800c902 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	691a      	ldr	r2, [r3, #16]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e6:	b2d2      	uxtb	r2, r2
 800c8e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c906:	b29b      	uxth	r3, r3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d005      	beq.n	800c918 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c910:	f043 0204 	orr.w	r2, r3, #4
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d003      	beq.n	800c928 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f8b3 	bl	800ca8c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800c926:	e039      	b.n	800c99c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c928:	7bfb      	ldrb	r3, [r7, #15]
 800c92a:	2b2a      	cmp	r3, #42	; 0x2a
 800c92c:	d109      	bne.n	800c942 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2228      	movs	r2, #40	; 0x28
 800c938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7ff f892 	bl	800ba66 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b28      	cmp	r3, #40	; 0x28
 800c94c:	d111      	bne.n	800c972 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	4a15      	ldr	r2, [pc, #84]	; (800c9a8 <I2C_Slave_STOPF+0x25c>)
 800c952:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2220      	movs	r2, #32
 800c95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7ff f893 	bl	800ba96 <HAL_I2C_ListenCpltCallback>
}
 800c970:	e014      	b.n	800c99c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c976:	2b22      	cmp	r3, #34	; 0x22
 800c978:	d002      	beq.n	800c980 <I2C_Slave_STOPF+0x234>
 800c97a:	7bfb      	ldrb	r3, [r7, #15]
 800c97c:	2b22      	cmp	r3, #34	; 0x22
 800c97e:	d10d      	bne.n	800c99c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2220      	movs	r2, #32
 800c98a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7ff f865 	bl	800ba66 <HAL_I2C_SlaveRxCpltCallback>
}
 800c99c:	bf00      	nop
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	0800d201 	.word	0x0800d201
 800c9a8:	ffff0000 	.word	0xffff0000

0800c9ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	2b08      	cmp	r3, #8
 800c9c6:	d002      	beq.n	800c9ce <I2C_Slave_AF+0x22>
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	2b20      	cmp	r3, #32
 800c9cc:	d129      	bne.n	800ca22 <I2C_Slave_AF+0x76>
 800c9ce:	7bfb      	ldrb	r3, [r7, #15]
 800c9d0:	2b28      	cmp	r3, #40	; 0x28
 800c9d2:	d126      	bne.n	800ca22 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a2c      	ldr	r2, [pc, #176]	; (800ca88 <I2C_Slave_AF+0xdc>)
 800c9d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	685a      	ldr	r2, [r3, #4]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c9e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c9f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca02:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2220      	movs	r2, #32
 800ca0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2200      	movs	r2, #0
 800ca16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7ff f83b 	bl	800ba96 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800ca20:	e02e      	b.n	800ca80 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ca22:	7bfb      	ldrb	r3, [r7, #15]
 800ca24:	2b21      	cmp	r3, #33	; 0x21
 800ca26:	d126      	bne.n	800ca76 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a17      	ldr	r2, [pc, #92]	; (800ca88 <I2C_Slave_AF+0xdc>)
 800ca2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2221      	movs	r2, #33	; 0x21
 800ca32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2220      	movs	r2, #32
 800ca38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ca52:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ca5c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca6c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7fe ffef 	bl	800ba52 <HAL_I2C_SlaveTxCpltCallback>
}
 800ca74:	e004      	b.n	800ca80 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ca7e:	615a      	str	r2, [r3, #20]
}
 800ca80:	bf00      	nop
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	ffff0000 	.word	0xffff0000

0800ca8c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca9a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	2b10      	cmp	r3, #16
 800caa6:	d10a      	bne.n	800cabe <I2C_ITError+0x32>
 800caa8:	7bfb      	ldrb	r3, [r7, #15]
 800caaa:	2b22      	cmp	r3, #34	; 0x22
 800caac:	d107      	bne.n	800cabe <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cabc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
 800cac0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cac4:	2b28      	cmp	r3, #40	; 0x28
 800cac6:	d107      	bne.n	800cad8 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2228      	movs	r2, #40	; 0x28
 800cad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800cad6:	e015      	b.n	800cb04 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cae6:	d006      	beq.n	800caf6 <I2C_ITError+0x6a>
 800cae8:	7bfb      	ldrb	r3, [r7, #15]
 800caea:	2b60      	cmp	r3, #96	; 0x60
 800caec:	d003      	beq.n	800caf6 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2220      	movs	r2, #32
 800caf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2200      	movs	r2, #0
 800cafa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb12:	d162      	bne.n	800cbda <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d020      	beq.n	800cb74 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb36:	4a6a      	ldr	r2, [pc, #424]	; (800cce0 <I2C_ITError+0x254>)
 800cb38:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7fd fa84 	bl	800a04c <HAL_DMA_Abort_IT>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	f000 8089 	beq.w	800cc5e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f022 0201 	bic.w	r2, r2, #1
 800cb5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2220      	movs	r2, #32
 800cb60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cb6e:	4610      	mov	r0, r2
 800cb70:	4798      	blx	r3
 800cb72:	e074      	b.n	800cc5e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb78:	4a59      	ldr	r2, [pc, #356]	; (800cce0 <I2C_ITError+0x254>)
 800cb7a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7fd fa63 	bl	800a04c <HAL_DMA_Abort_IT>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d068      	beq.n	800cc5e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	695b      	ldr	r3, [r3, #20]
 800cb92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb96:	2b40      	cmp	r3, #64	; 0x40
 800cb98:	d10b      	bne.n	800cbb2 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	691a      	ldr	r2, [r3, #16]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba4:	b2d2      	uxtb	r2, r2
 800cba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbac:	1c5a      	adds	r2, r3, #1
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f022 0201 	bic.w	r2, r2, #1
 800cbc0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2220      	movs	r2, #32
 800cbc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cbd4:	4610      	mov	r0, r2
 800cbd6:	4798      	blx	r3
 800cbd8:	e041      	b.n	800cc5e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	2b60      	cmp	r3, #96	; 0x60
 800cbe4:	d125      	bne.n	800cc32 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2220      	movs	r2, #32
 800cbea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	695b      	ldr	r3, [r3, #20]
 800cbfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbfe:	2b40      	cmp	r3, #64	; 0x40
 800cc00:	d10b      	bne.n	800cc1a <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	691a      	ldr	r2, [r3, #16]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0c:	b2d2      	uxtb	r2, r2
 800cc0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc14:	1c5a      	adds	r2, r3, #1
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f022 0201 	bic.w	r2, r2, #1
 800cc28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7fe ff51 	bl	800bad2 <HAL_I2C_AbortCpltCallback>
 800cc30:	e015      	b.n	800cc5e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	695b      	ldr	r3, [r3, #20]
 800cc38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc3c:	2b40      	cmp	r3, #64	; 0x40
 800cc3e:	d10b      	bne.n	800cc58 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	691a      	ldr	r2, [r3, #16]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4a:	b2d2      	uxtb	r2, r2
 800cc4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7fe ff30 	bl	800babe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	f003 0301 	and.w	r3, r3, #1
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d10e      	bne.n	800cc8c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d109      	bne.n	800cc8c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d104      	bne.n	800cc8c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d007      	beq.n	800cc9c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cc9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cca2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca8:	f003 0304 	and.w	r3, r3, #4
 800ccac:	2b04      	cmp	r3, #4
 800ccae:	d113      	bne.n	800ccd8 <I2C_ITError+0x24c>
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
 800ccb2:	2b28      	cmp	r3, #40	; 0x28
 800ccb4:	d110      	bne.n	800ccd8 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4a0a      	ldr	r2, [pc, #40]	; (800cce4 <I2C_ITError+0x258>)
 800ccba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2220      	movs	r2, #32
 800ccc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7fe fedf 	bl	800ba96 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ccd8:	bf00      	nop
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	0800d201 	.word	0x0800d201
 800cce4:	ffff0000 	.word	0xffff0000

0800cce8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b088      	sub	sp, #32
 800ccec:	af02      	add	r7, sp, #8
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	817b      	strh	r3, [r7, #10]
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	813b      	strh	r3, [r7, #8]
 800ccfe:	4613      	mov	r3, r2
 800cd00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	6a3b      	ldr	r3, [r7, #32]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f000 faed 	bl	800d2fe <I2C_WaitOnFlagUntilTimeout>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00c      	beq.n	800cd44 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d003      	beq.n	800cd40 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800cd40:	2303      	movs	r3, #3
 800cd42:	e05f      	b.n	800ce04 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cd44:	897b      	ldrh	r3, [r7, #10]
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	461a      	mov	r2, r3
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cd52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	6a3a      	ldr	r2, [r7, #32]
 800cd58:	492c      	ldr	r1, [pc, #176]	; (800ce0c <I2C_RequestMemoryWrite+0x124>)
 800cd5a:	68f8      	ldr	r0, [r7, #12]
 800cd5c:	f000 fb26 	bl	800d3ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800cd66:	2301      	movs	r3, #1
 800cd68:	e04c      	b.n	800ce04 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	617b      	str	r3, [r7, #20]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	695b      	ldr	r3, [r3, #20]
 800cd74:	617b      	str	r3, [r7, #20]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	699b      	ldr	r3, [r3, #24]
 800cd7c:	617b      	str	r3, [r7, #20]
 800cd7e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd82:	6a39      	ldr	r1, [r7, #32]
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f000 fb90 	bl	800d4aa <I2C_WaitOnTXEFlagUntilTimeout>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00d      	beq.n	800cdac <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd94:	2b04      	cmp	r3, #4
 800cd96:	d107      	bne.n	800cda8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cda6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	e02b      	b.n	800ce04 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cdac:	88fb      	ldrh	r3, [r7, #6]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d105      	bne.n	800cdbe <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cdb2:	893b      	ldrh	r3, [r7, #8]
 800cdb4:	b2da      	uxtb	r2, r3
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	611a      	str	r2, [r3, #16]
 800cdbc:	e021      	b.n	800ce02 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cdbe:	893b      	ldrh	r3, [r7, #8]
 800cdc0:	0a1b      	lsrs	r3, r3, #8
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	b2da      	uxtb	r2, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cdcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdce:	6a39      	ldr	r1, [r7, #32]
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f000 fb6a 	bl	800d4aa <I2C_WaitOnTXEFlagUntilTimeout>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00d      	beq.n	800cdf8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cde0:	2b04      	cmp	r3, #4
 800cde2:	d107      	bne.n	800cdf4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	e005      	b.n	800ce04 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cdf8:	893b      	ldrh	r3, [r7, #8]
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3718      	adds	r7, #24
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	00010002 	.word	0x00010002

0800ce10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b088      	sub	sp, #32
 800ce14:	af02      	add	r7, sp, #8
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	4608      	mov	r0, r1
 800ce1a:	4611      	mov	r1, r2
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	4603      	mov	r3, r0
 800ce20:	817b      	strh	r3, [r7, #10]
 800ce22:	460b      	mov	r3, r1
 800ce24:	813b      	strh	r3, [r7, #8]
 800ce26:	4613      	mov	r3, r2
 800ce28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4c:	9300      	str	r3, [sp, #0]
 800ce4e:	6a3b      	ldr	r3, [r7, #32]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ce56:	68f8      	ldr	r0, [r7, #12]
 800ce58:	f000 fa51 	bl	800d2fe <I2C_WaitOnFlagUntilTimeout>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00c      	beq.n	800ce7c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d003      	beq.n	800ce78 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	e0a9      	b.n	800cfd0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ce7c:	897b      	ldrh	r3, [r7, #10]
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	461a      	mov	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ce8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ce8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8e:	6a3a      	ldr	r2, [r7, #32]
 800ce90:	4951      	ldr	r1, [pc, #324]	; (800cfd8 <I2C_RequestMemoryRead+0x1c8>)
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f000 fa8a 	bl	800d3ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d001      	beq.n	800cea2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e096      	b.n	800cfd0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cea2:	2300      	movs	r3, #0
 800cea4:	617b      	str	r3, [r7, #20]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	695b      	ldr	r3, [r3, #20]
 800ceac:	617b      	str	r3, [r7, #20]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	699b      	ldr	r3, [r3, #24]
 800ceb4:	617b      	str	r3, [r7, #20]
 800ceb6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ceb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceba:	6a39      	ldr	r1, [r7, #32]
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f000 faf4 	bl	800d4aa <I2C_WaitOnTXEFlagUntilTimeout>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00d      	beq.n	800cee4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cecc:	2b04      	cmp	r3, #4
 800cece:	d107      	bne.n	800cee0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cede:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cee0:	2301      	movs	r3, #1
 800cee2:	e075      	b.n	800cfd0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cee4:	88fb      	ldrh	r3, [r7, #6]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d105      	bne.n	800cef6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ceea:	893b      	ldrh	r3, [r7, #8]
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	611a      	str	r2, [r3, #16]
 800cef4:	e021      	b.n	800cf3a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cef6:	893b      	ldrh	r3, [r7, #8]
 800cef8:	0a1b      	lsrs	r3, r3, #8
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	b2da      	uxtb	r2, r3
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf06:	6a39      	ldr	r1, [r7, #32]
 800cf08:	68f8      	ldr	r0, [r7, #12]
 800cf0a:	f000 face 	bl	800d4aa <I2C_WaitOnTXEFlagUntilTimeout>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00d      	beq.n	800cf30 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf18:	2b04      	cmp	r3, #4
 800cf1a:	d107      	bne.n	800cf2c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e04f      	b.n	800cfd0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cf30:	893b      	ldrh	r3, [r7, #8]
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf3c:	6a39      	ldr	r1, [r7, #32]
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	f000 fab3 	bl	800d4aa <I2C_WaitOnTXEFlagUntilTimeout>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00d      	beq.n	800cf66 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf4e:	2b04      	cmp	r3, #4
 800cf50:	d107      	bne.n	800cf62 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e034      	b.n	800cfd0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	6a3b      	ldr	r3, [r7, #32]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f000 f9bb 	bl	800d2fe <I2C_WaitOnFlagUntilTimeout>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00c      	beq.n	800cfa8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800cfa4:	2303      	movs	r3, #3
 800cfa6:	e013      	b.n	800cfd0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800cfa8:	897b      	ldrh	r3, [r7, #10]
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	f043 0301 	orr.w	r3, r3, #1
 800cfb0:	b2da      	uxtb	r2, r3
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfba:	6a3a      	ldr	r2, [r7, #32]
 800cfbc:	4906      	ldr	r1, [pc, #24]	; (800cfd8 <I2C_RequestMemoryRead+0x1c8>)
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f000 f9f4 	bl	800d3ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e000      	b.n	800cfd0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800cfce:	2300      	movs	r3, #0
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	00010002 	.word	0x00010002

0800cfdc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b086      	sub	sp, #24
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cff0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cff8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffe:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	685a      	ldr	r2, [r3, #4]
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d00e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d014:	2b00      	cmp	r3, #0
 800d016:	d003      	beq.n	800d020 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d01c:	2200      	movs	r2, #0
 800d01e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d024:	2b00      	cmp	r3, #0
 800d026:	d003      	beq.n	800d030 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02c:	2200      	movs	r2, #0
 800d02e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800d030:	7cfb      	ldrb	r3, [r7, #19]
 800d032:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800d036:	2b21      	cmp	r3, #33	; 0x21
 800d038:	d007      	beq.n	800d04a <I2C_DMAXferCplt+0x6e>
 800d03a:	7cfb      	ldrb	r3, [r7, #19]
 800d03c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800d040:	2b22      	cmp	r3, #34	; 0x22
 800d042:	d131      	bne.n	800d0a8 <I2C_DMAXferCplt+0xcc>
 800d044:	7cbb      	ldrb	r3, [r7, #18]
 800d046:	2b20      	cmp	r3, #32
 800d048:	d12e      	bne.n	800d0a8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	685a      	ldr	r2, [r3, #4]
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d058:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	2200      	movs	r2, #0
 800d05e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800d060:	7cfb      	ldrb	r3, [r7, #19]
 800d062:	2b29      	cmp	r3, #41	; 0x29
 800d064:	d10a      	bne.n	800d07c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	2221      	movs	r2, #33	; 0x21
 800d06a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	2228      	movs	r2, #40	; 0x28
 800d070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d074:	6978      	ldr	r0, [r7, #20]
 800d076:	f7fe fcec 	bl	800ba52 <HAL_I2C_SlaveTxCpltCallback>
 800d07a:	e00c      	b.n	800d096 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d07c:	7cfb      	ldrb	r3, [r7, #19]
 800d07e:	2b2a      	cmp	r3, #42	; 0x2a
 800d080:	d109      	bne.n	800d096 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	2222      	movs	r2, #34	; 0x22
 800d086:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	2228      	movs	r2, #40	; 0x28
 800d08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d090:	6978      	ldr	r0, [r7, #20]
 800d092:	f7fe fce8 	bl	800ba66 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	685a      	ldr	r2, [r3, #4]
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800d0a4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800d0a6:	e06a      	b.n	800d17e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d064      	beq.n	800d17e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d107      	bne.n	800d0ce <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d0cc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	685a      	ldr	r2, [r3, #4]
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d0dc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d0e4:	d009      	beq.n	800d0fa <I2C_DMAXferCplt+0x11e>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2b08      	cmp	r3, #8
 800d0ea:	d006      	beq.n	800d0fa <I2C_DMAXferCplt+0x11e>
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d0f2:	d002      	beq.n	800d0fa <I2C_DMAXferCplt+0x11e>
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2b20      	cmp	r3, #32
 800d0f8:	d107      	bne.n	800d10a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d108:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d118:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	685a      	ldr	r2, [r3, #4]
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d128:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	2200      	movs	r2, #0
 800d12e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d134:	2b00      	cmp	r3, #0
 800d136:	d003      	beq.n	800d140 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800d138:	6978      	ldr	r0, [r7, #20]
 800d13a:	f7fe fcc0 	bl	800babe <HAL_I2C_ErrorCallback>
}
 800d13e:	e01e      	b.n	800d17e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	2220      	movs	r2, #32
 800d144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	2b40      	cmp	r3, #64	; 0x40
 800d152:	d10a      	bne.n	800d16a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	2200      	movs	r2, #0
 800d158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	2200      	movs	r2, #0
 800d160:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800d162:	6978      	ldr	r0, [r7, #20]
 800d164:	f7f9 fdee 	bl	8006d44 <HAL_I2C_MemRxCpltCallback>
}
 800d168:	e009      	b.n	800d17e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	2212      	movs	r2, #18
 800d176:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800d178:	6978      	ldr	r0, [r7, #20]
 800d17a:	f7fe fc60 	bl	800ba3e <HAL_I2C_MasterRxCpltCallback>
}
 800d17e:	bf00      	nop
 800d180:	3718      	adds	r7, #24
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b084      	sub	sp, #16
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d192:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d003      	beq.n	800d1a4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d003      	beq.n	800d1b4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f7fd f903 	bl	800a3c0 <HAL_DMA_GetError>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	d01b      	beq.n	800d1f8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1ce:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2220      	movs	r2, #32
 800d1da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ea:	f043 0210 	orr.w	r2, r3, #16
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f7fe fc63 	bl	800babe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d1f8:	bf00      	nop
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d214:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d003      	beq.n	800d226 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d222:	2200      	movs	r2, #0
 800d224:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d232:	2200      	movs	r2, #0
 800d234:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d244:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2200      	movs	r2, #0
 800d24a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d250:	2b00      	cmp	r3, #0
 800d252:	d003      	beq.n	800d25c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d258:	2200      	movs	r2, #0
 800d25a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d260:	2b00      	cmp	r3, #0
 800d262:	d003      	beq.n	800d26c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d268:	2200      	movs	r2, #0
 800d26a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f022 0201 	bic.w	r2, r2, #1
 800d27a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d282:	b2db      	uxtb	r3, r3
 800d284:	2b60      	cmp	r3, #96	; 0x60
 800d286:	d10e      	bne.n	800d2a6 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2220      	movs	r2, #32
 800d28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2200      	movs	r2, #0
 800d294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2200      	movs	r2, #0
 800d29c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d29e:	68f8      	ldr	r0, [r7, #12]
 800d2a0:	f7fe fc17 	bl	800bad2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d2a4:	e027      	b.n	800d2f6 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d2a6:	7afb      	ldrb	r3, [r7, #11]
 800d2a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d2ac:	2b28      	cmp	r3, #40	; 0x28
 800d2ae:	d117      	bne.n	800d2e0 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f042 0201 	orr.w	r2, r2, #1
 800d2be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d2ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2228      	movs	r2, #40	; 0x28
 800d2da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d2de:	e007      	b.n	800d2f0 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2220      	movs	r2, #32
 800d2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f7fe fbe4 	bl	800babe <HAL_I2C_ErrorCallback>
}
 800d2f6:	bf00      	nop
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b084      	sub	sp, #16
 800d302:	af00      	add	r7, sp, #0
 800d304:	60f8      	str	r0, [r7, #12]
 800d306:	60b9      	str	r1, [r7, #8]
 800d308:	603b      	str	r3, [r7, #0]
 800d30a:	4613      	mov	r3, r2
 800d30c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d30e:	e025      	b.n	800d35c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d316:	d021      	beq.n	800d35c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d318:	f7fc fc82 	bl	8009c20 <HAL_GetTick>
 800d31c:	4602      	mov	r2, r0
 800d31e:	69bb      	ldr	r3, [r7, #24]
 800d320:	1ad3      	subs	r3, r2, r3
 800d322:	683a      	ldr	r2, [r7, #0]
 800d324:	429a      	cmp	r2, r3
 800d326:	d302      	bcc.n	800d32e <I2C_WaitOnFlagUntilTimeout+0x30>
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d116      	bne.n	800d35c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2200      	movs	r2, #0
 800d332:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2220      	movs	r2, #32
 800d338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d348:	f043 0220 	orr.w	r2, r3, #32
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2200      	movs	r2, #0
 800d354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d358:	2301      	movs	r3, #1
 800d35a:	e023      	b.n	800d3a4 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	0c1b      	lsrs	r3, r3, #16
 800d360:	b2db      	uxtb	r3, r3
 800d362:	2b01      	cmp	r3, #1
 800d364:	d10d      	bne.n	800d382 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	695b      	ldr	r3, [r3, #20]
 800d36c:	43da      	mvns	r2, r3
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	4013      	ands	r3, r2
 800d372:	b29b      	uxth	r3, r3
 800d374:	2b00      	cmp	r3, #0
 800d376:	bf0c      	ite	eq
 800d378:	2301      	moveq	r3, #1
 800d37a:	2300      	movne	r3, #0
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	461a      	mov	r2, r3
 800d380:	e00c      	b.n	800d39c <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	699b      	ldr	r3, [r3, #24]
 800d388:	43da      	mvns	r2, r3
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	4013      	ands	r3, r2
 800d38e:	b29b      	uxth	r3, r3
 800d390:	2b00      	cmp	r3, #0
 800d392:	bf0c      	ite	eq
 800d394:	2301      	moveq	r3, #1
 800d396:	2300      	movne	r3, #0
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	461a      	mov	r2, r3
 800d39c:	79fb      	ldrb	r3, [r7, #7]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d0b6      	beq.n	800d310 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	607a      	str	r2, [r7, #4]
 800d3b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d3ba:	e051      	b.n	800d460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	695b      	ldr	r3, [r3, #20]
 800d3c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3ca:	d123      	bne.n	800d414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d3e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2220      	movs	r2, #32
 800d3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d400:	f043 0204 	orr.w	r2, r3, #4
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d410:	2301      	movs	r3, #1
 800d412:	e046      	b.n	800d4a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41a:	d021      	beq.n	800d460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d41c:	f7fc fc00 	bl	8009c20 <HAL_GetTick>
 800d420:	4602      	mov	r2, r0
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	1ad3      	subs	r3, r2, r3
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d302      	bcc.n	800d432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d116      	bne.n	800d460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2220      	movs	r2, #32
 800d43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2200      	movs	r2, #0
 800d444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44c:	f043 0220 	orr.w	r2, r3, #32
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2200      	movs	r2, #0
 800d458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	e020      	b.n	800d4a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	0c1b      	lsrs	r3, r3, #16
 800d464:	b2db      	uxtb	r3, r3
 800d466:	2b01      	cmp	r3, #1
 800d468:	d10c      	bne.n	800d484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	695b      	ldr	r3, [r3, #20]
 800d470:	43da      	mvns	r2, r3
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	4013      	ands	r3, r2
 800d476:	b29b      	uxth	r3, r3
 800d478:	2b00      	cmp	r3, #0
 800d47a:	bf14      	ite	ne
 800d47c:	2301      	movne	r3, #1
 800d47e:	2300      	moveq	r3, #0
 800d480:	b2db      	uxtb	r3, r3
 800d482:	e00b      	b.n	800d49c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	699b      	ldr	r3, [r3, #24]
 800d48a:	43da      	mvns	r2, r3
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	4013      	ands	r3, r2
 800d490:	b29b      	uxth	r3, r3
 800d492:	2b00      	cmp	r3, #0
 800d494:	bf14      	ite	ne
 800d496:	2301      	movne	r3, #1
 800d498:	2300      	moveq	r3, #0
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d18d      	bne.n	800d3bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b084      	sub	sp, #16
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	60f8      	str	r0, [r7, #12]
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d4b6:	e02d      	b.n	800d514 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f000 f8ce 	bl	800d65a <I2C_IsAcknowledgeFailed>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d001      	beq.n	800d4c8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e02d      	b.n	800d524 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ce:	d021      	beq.n	800d514 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4d0:	f7fc fba6 	bl	8009c20 <HAL_GetTick>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	68ba      	ldr	r2, [r7, #8]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d302      	bcc.n	800d4e6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d116      	bne.n	800d514 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2220      	movs	r2, #32
 800d4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d500:	f043 0220 	orr.w	r2, r3, #32
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d510:	2301      	movs	r3, #1
 800d512:	e007      	b.n	800d524 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	695b      	ldr	r3, [r3, #20]
 800d51a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d51e:	2b80      	cmp	r3, #128	; 0x80
 800d520:	d1ca      	bne.n	800d4b8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3710      	adds	r7, #16
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d538:	e02d      	b.n	800d596 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	f000 f88d 	bl	800d65a <I2C_IsAcknowledgeFailed>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d001      	beq.n	800d54a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	e02d      	b.n	800d5a6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d550:	d021      	beq.n	800d596 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d552:	f7fc fb65 	bl	8009c20 <HAL_GetTick>
 800d556:	4602      	mov	r2, r0
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	68ba      	ldr	r2, [r7, #8]
 800d55e:	429a      	cmp	r2, r3
 800d560:	d302      	bcc.n	800d568 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d116      	bne.n	800d596 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2200      	movs	r2, #0
 800d56c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2220      	movs	r2, #32
 800d572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2200      	movs	r2, #0
 800d57a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d582:	f043 0220 	orr.w	r2, r3, #32
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	e007      	b.n	800d5a6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	695b      	ldr	r3, [r3, #20]
 800d59c:	f003 0304 	and.w	r3, r3, #4
 800d5a0:	2b04      	cmp	r3, #4
 800d5a2:	d1ca      	bne.n	800d53a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b084      	sub	sp, #16
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	60f8      	str	r0, [r7, #12]
 800d5b6:	60b9      	str	r1, [r7, #8]
 800d5b8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d5ba:	e042      	b.n	800d642 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	695b      	ldr	r3, [r3, #20]
 800d5c2:	f003 0310 	and.w	r3, r3, #16
 800d5c6:	2b10      	cmp	r3, #16
 800d5c8:	d119      	bne.n	800d5fe <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f06f 0210 	mvn.w	r2, #16
 800d5d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2220      	movs	r2, #32
 800d5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e029      	b.n	800d652 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5fe:	f7fc fb0f 	bl	8009c20 <HAL_GetTick>
 800d602:	4602      	mov	r2, r0
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	68ba      	ldr	r2, [r7, #8]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d302      	bcc.n	800d614 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d116      	bne.n	800d642 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2200      	movs	r2, #0
 800d618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2220      	movs	r2, #32
 800d61e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2200      	movs	r2, #0
 800d626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62e:	f043 0220 	orr.w	r2, r3, #32
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d63e:	2301      	movs	r3, #1
 800d640:	e007      	b.n	800d652 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	695b      	ldr	r3, [r3, #20]
 800d648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d64c:	2b40      	cmp	r3, #64	; 0x40
 800d64e:	d1b5      	bne.n	800d5bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d650:	2300      	movs	r3, #0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d65a:	b480      	push	{r7}
 800d65c:	b083      	sub	sp, #12
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	695b      	ldr	r3, [r3, #20]
 800d668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d66c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d670:	d11b      	bne.n	800d6aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d67a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2220      	movs	r2, #32
 800d686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d696:	f043 0204 	orr.w	r2, r3, #4
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	e000      	b.n	800d6ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b083      	sub	sp, #12
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d6c8:	d103      	bne.n	800d6d2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800d6d0:	e007      	b.n	800d6e2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d6da:	d102      	bne.n	800d6e2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2208      	movs	r2, #8
 800d6e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800d6e2:	bf00      	nop
 800d6e4:	370c      	adds	r7, #12
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr

0800d6ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	b083      	sub	sp, #12
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
 800d6f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	2b20      	cmp	r3, #32
 800d702:	d129      	bne.n	800d758 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2224      	movs	r2, #36	; 0x24
 800d708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f022 0201 	bic.w	r2, r2, #1
 800d71a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f022 0210 	bic.w	r2, r2, #16
 800d72a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	430a      	orrs	r2, r1
 800d73a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f042 0201 	orr.w	r2, r2, #1
 800d74a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2220      	movs	r2, #32
 800d750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d754:	2300      	movs	r3, #0
 800d756:	e000      	b.n	800d75a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800d758:	2302      	movs	r3, #2
  }
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d766:	b480      	push	{r7}
 800d768:	b085      	sub	sp, #20
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800d770:	2300      	movs	r3, #0
 800d772:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b20      	cmp	r3, #32
 800d77e:	d12a      	bne.n	800d7d6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2224      	movs	r2, #36	; 0x24
 800d784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f022 0201 	bic.w	r2, r2, #1
 800d796:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800d7a0:	89fb      	ldrh	r3, [r7, #14]
 800d7a2:	f023 030f 	bic.w	r3, r3, #15
 800d7a6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	89fb      	ldrh	r3, [r7, #14]
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	89fa      	ldrh	r2, [r7, #14]
 800d7b8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f042 0201 	orr.w	r2, r2, #1
 800d7c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2220      	movs	r2, #32
 800d7ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e000      	b.n	800d7d8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800d7d6:	2302      	movs	r3, #2
  }
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3714      	adds	r7, #20
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7e6:	b08f      	sub	sp, #60	; 0x3c
 800d7e8:	af0a      	add	r7, sp, #40	; 0x28
 800d7ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d101      	bne.n	800d7f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e10f      	b.n	800da16 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800d802:	b2db      	uxtb	r3, r3
 800d804:	2b00      	cmp	r3, #0
 800d806:	d106      	bne.n	800d816 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f7fc f94b 	bl	8009aac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2203      	movs	r2, #3
 800d81a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d826:	2b00      	cmp	r3, #0
 800d828:	d102      	bne.n	800d830 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4618      	mov	r0, r3
 800d836:	f004 fefa 	bl	801262e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	603b      	str	r3, [r7, #0]
 800d840:	687e      	ldr	r6, [r7, #4]
 800d842:	466d      	mov	r5, sp
 800d844:	f106 0410 	add.w	r4, r6, #16
 800d848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d84a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d84c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d84e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d850:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d854:	e885 0003 	stmia.w	r5, {r0, r1}
 800d858:	1d33      	adds	r3, r6, #4
 800d85a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d85c:	6838      	ldr	r0, [r7, #0]
 800d85e:	f004 fe85 	bl	801256c <USB_CoreInit>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d005      	beq.n	800d874 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2202      	movs	r2, #2
 800d86c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800d870:	2301      	movs	r3, #1
 800d872:	e0d0      	b.n	800da16 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	2100      	movs	r1, #0
 800d87a:	4618      	mov	r0, r3
 800d87c:	f004 fee8 	bl	8012650 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d880:	2300      	movs	r3, #0
 800d882:	73fb      	strb	r3, [r7, #15]
 800d884:	e04a      	b.n	800d91c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d886:	7bfa      	ldrb	r2, [r7, #15]
 800d888:	6879      	ldr	r1, [r7, #4]
 800d88a:	4613      	mov	r3, r2
 800d88c:	00db      	lsls	r3, r3, #3
 800d88e:	1a9b      	subs	r3, r3, r2
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	440b      	add	r3, r1
 800d894:	333d      	adds	r3, #61	; 0x3d
 800d896:	2201      	movs	r2, #1
 800d898:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d89a:	7bfa      	ldrb	r2, [r7, #15]
 800d89c:	6879      	ldr	r1, [r7, #4]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	00db      	lsls	r3, r3, #3
 800d8a2:	1a9b      	subs	r3, r3, r2
 800d8a4:	009b      	lsls	r3, r3, #2
 800d8a6:	440b      	add	r3, r1
 800d8a8:	333c      	adds	r3, #60	; 0x3c
 800d8aa:	7bfa      	ldrb	r2, [r7, #15]
 800d8ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d8ae:	7bfa      	ldrb	r2, [r7, #15]
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
 800d8b2:	b298      	uxth	r0, r3
 800d8b4:	6879      	ldr	r1, [r7, #4]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	1a9b      	subs	r3, r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	440b      	add	r3, r1
 800d8c0:	3342      	adds	r3, #66	; 0x42
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d8c6:	7bfa      	ldrb	r2, [r7, #15]
 800d8c8:	6879      	ldr	r1, [r7, #4]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	00db      	lsls	r3, r3, #3
 800d8ce:	1a9b      	subs	r3, r3, r2
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	440b      	add	r3, r1
 800d8d4:	333f      	adds	r3, #63	; 0x3f
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d8da:	7bfa      	ldrb	r2, [r7, #15]
 800d8dc:	6879      	ldr	r1, [r7, #4]
 800d8de:	4613      	mov	r3, r2
 800d8e0:	00db      	lsls	r3, r3, #3
 800d8e2:	1a9b      	subs	r3, r3, r2
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	440b      	add	r3, r1
 800d8e8:	3344      	adds	r3, #68	; 0x44
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d8ee:	7bfa      	ldrb	r2, [r7, #15]
 800d8f0:	6879      	ldr	r1, [r7, #4]
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	00db      	lsls	r3, r3, #3
 800d8f6:	1a9b      	subs	r3, r3, r2
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	440b      	add	r3, r1
 800d8fc:	3348      	adds	r3, #72	; 0x48
 800d8fe:	2200      	movs	r2, #0
 800d900:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d902:	7bfa      	ldrb	r2, [r7, #15]
 800d904:	6879      	ldr	r1, [r7, #4]
 800d906:	4613      	mov	r3, r2
 800d908:	00db      	lsls	r3, r3, #3
 800d90a:	1a9b      	subs	r3, r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	440b      	add	r3, r1
 800d910:	3350      	adds	r3, #80	; 0x50
 800d912:	2200      	movs	r2, #0
 800d914:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d916:	7bfb      	ldrb	r3, [r7, #15]
 800d918:	3301      	adds	r3, #1
 800d91a:	73fb      	strb	r3, [r7, #15]
 800d91c:	7bfa      	ldrb	r2, [r7, #15]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	429a      	cmp	r2, r3
 800d924:	d3af      	bcc.n	800d886 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d926:	2300      	movs	r3, #0
 800d928:	73fb      	strb	r3, [r7, #15]
 800d92a:	e044      	b.n	800d9b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d92c:	7bfa      	ldrb	r2, [r7, #15]
 800d92e:	6879      	ldr	r1, [r7, #4]
 800d930:	4613      	mov	r3, r2
 800d932:	00db      	lsls	r3, r3, #3
 800d934:	1a9b      	subs	r3, r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	440b      	add	r3, r1
 800d93a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800d93e:	2200      	movs	r2, #0
 800d940:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d942:	7bfa      	ldrb	r2, [r7, #15]
 800d944:	6879      	ldr	r1, [r7, #4]
 800d946:	4613      	mov	r3, r2
 800d948:	00db      	lsls	r3, r3, #3
 800d94a:	1a9b      	subs	r3, r3, r2
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	440b      	add	r3, r1
 800d950:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800d954:	7bfa      	ldrb	r2, [r7, #15]
 800d956:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d958:	7bfa      	ldrb	r2, [r7, #15]
 800d95a:	6879      	ldr	r1, [r7, #4]
 800d95c:	4613      	mov	r3, r2
 800d95e:	00db      	lsls	r3, r3, #3
 800d960:	1a9b      	subs	r3, r3, r2
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	440b      	add	r3, r1
 800d966:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d96a:	2200      	movs	r2, #0
 800d96c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d96e:	7bfa      	ldrb	r2, [r7, #15]
 800d970:	6879      	ldr	r1, [r7, #4]
 800d972:	4613      	mov	r3, r2
 800d974:	00db      	lsls	r3, r3, #3
 800d976:	1a9b      	subs	r3, r3, r2
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	440b      	add	r3, r1
 800d97c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d980:	2200      	movs	r2, #0
 800d982:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d984:	7bfa      	ldrb	r2, [r7, #15]
 800d986:	6879      	ldr	r1, [r7, #4]
 800d988:	4613      	mov	r3, r2
 800d98a:	00db      	lsls	r3, r3, #3
 800d98c:	1a9b      	subs	r3, r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	440b      	add	r3, r1
 800d992:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d996:	2200      	movs	r2, #0
 800d998:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d99a:	7bfa      	ldrb	r2, [r7, #15]
 800d99c:	6879      	ldr	r1, [r7, #4]
 800d99e:	4613      	mov	r3, r2
 800d9a0:	00db      	lsls	r3, r3, #3
 800d9a2:	1a9b      	subs	r3, r3, r2
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	440b      	add	r3, r1
 800d9a8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d9b0:	7bfb      	ldrb	r3, [r7, #15]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	73fb      	strb	r3, [r7, #15]
 800d9b6:	7bfa      	ldrb	r2, [r7, #15]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d3b5      	bcc.n	800d92c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	603b      	str	r3, [r7, #0]
 800d9c6:	687e      	ldr	r6, [r7, #4]
 800d9c8:	466d      	mov	r5, sp
 800d9ca:	f106 0410 	add.w	r4, r6, #16
 800d9ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d9d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d9d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d9da:	e885 0003 	stmia.w	r5, {r0, r1}
 800d9de:	1d33      	adds	r3, r6, #4
 800d9e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d9e2:	6838      	ldr	r0, [r7, #0]
 800d9e4:	f004 fe5e 	bl	80126a4 <USB_DevInit>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d005      	beq.n	800d9fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2202      	movs	r2, #2
 800d9f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e00d      	b.n	800da16 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2201      	movs	r2, #1
 800da06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4618      	mov	r0, r3
 800da10:	f005 f80d 	bl	8012a2e <USB_DevDisconnect>

  return HAL_OK;
 800da14:	2300      	movs	r3, #0
}
 800da16:	4618      	mov	r0, r3
 800da18:	3714      	adds	r7, #20
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800da20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b086      	sub	sp, #24
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d101      	bne.n	800da32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800da2e:	2301      	movs	r3, #1
 800da30:	e25b      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f003 0301 	and.w	r3, r3, #1
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d075      	beq.n	800db2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800da3e:	4ba3      	ldr	r3, [pc, #652]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	f003 030c 	and.w	r3, r3, #12
 800da46:	2b04      	cmp	r3, #4
 800da48:	d00c      	beq.n	800da64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800da4a:	4ba0      	ldr	r3, [pc, #640]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800da52:	2b08      	cmp	r3, #8
 800da54:	d112      	bne.n	800da7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800da56:	4b9d      	ldr	r3, [pc, #628]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da62:	d10b      	bne.n	800da7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da64:	4b99      	ldr	r3, [pc, #612]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d05b      	beq.n	800db28 <HAL_RCC_OscConfig+0x108>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d157      	bne.n	800db28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800da78:	2301      	movs	r3, #1
 800da7a:	e236      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da84:	d106      	bne.n	800da94 <HAL_RCC_OscConfig+0x74>
 800da86:	4b91      	ldr	r3, [pc, #580]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a90      	ldr	r2, [pc, #576]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800da8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da90:	6013      	str	r3, [r2, #0]
 800da92:	e01d      	b.n	800dad0 <HAL_RCC_OscConfig+0xb0>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800da9c:	d10c      	bne.n	800dab8 <HAL_RCC_OscConfig+0x98>
 800da9e:	4b8b      	ldr	r3, [pc, #556]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a8a      	ldr	r2, [pc, #552]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800daa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800daa8:	6013      	str	r3, [r2, #0]
 800daaa:	4b88      	ldr	r3, [pc, #544]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a87      	ldr	r2, [pc, #540]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dab4:	6013      	str	r3, [r2, #0]
 800dab6:	e00b      	b.n	800dad0 <HAL_RCC_OscConfig+0xb0>
 800dab8:	4b84      	ldr	r3, [pc, #528]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a83      	ldr	r2, [pc, #524]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dabe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dac2:	6013      	str	r3, [r2, #0]
 800dac4:	4b81      	ldr	r3, [pc, #516]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a80      	ldr	r2, [pc, #512]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800daca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d013      	beq.n	800db00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dad8:	f7fc f8a2 	bl	8009c20 <HAL_GetTick>
 800dadc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dade:	e008      	b.n	800daf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dae0:	f7fc f89e 	bl	8009c20 <HAL_GetTick>
 800dae4:	4602      	mov	r2, r0
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	2b64      	cmp	r3, #100	; 0x64
 800daec:	d901      	bls.n	800daf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800daee:	2303      	movs	r3, #3
 800daf0:	e1fb      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800daf2:	4b76      	ldr	r3, [pc, #472]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d0f0      	beq.n	800dae0 <HAL_RCC_OscConfig+0xc0>
 800dafe:	e014      	b.n	800db2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db00:	f7fc f88e 	bl	8009c20 <HAL_GetTick>
 800db04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db06:	e008      	b.n	800db1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800db08:	f7fc f88a 	bl	8009c20 <HAL_GetTick>
 800db0c:	4602      	mov	r2, r0
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	2b64      	cmp	r3, #100	; 0x64
 800db14:	d901      	bls.n	800db1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800db16:	2303      	movs	r3, #3
 800db18:	e1e7      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db1a:	4b6c      	ldr	r3, [pc, #432]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db22:	2b00      	cmp	r3, #0
 800db24:	d1f0      	bne.n	800db08 <HAL_RCC_OscConfig+0xe8>
 800db26:	e000      	b.n	800db2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f003 0302 	and.w	r3, r3, #2
 800db32:	2b00      	cmp	r3, #0
 800db34:	d063      	beq.n	800dbfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800db36:	4b65      	ldr	r3, [pc, #404]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	f003 030c 	and.w	r3, r3, #12
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00b      	beq.n	800db5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800db42:	4b62      	ldr	r3, [pc, #392]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800db4a:	2b08      	cmp	r3, #8
 800db4c:	d11c      	bne.n	800db88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800db4e:	4b5f      	ldr	r3, [pc, #380]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db56:	2b00      	cmp	r3, #0
 800db58:	d116      	bne.n	800db88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800db5a:	4b5c      	ldr	r3, [pc, #368]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f003 0302 	and.w	r3, r3, #2
 800db62:	2b00      	cmp	r3, #0
 800db64:	d005      	beq.n	800db72 <HAL_RCC_OscConfig+0x152>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d001      	beq.n	800db72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800db6e:	2301      	movs	r3, #1
 800db70:	e1bb      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db72:	4b56      	ldr	r3, [pc, #344]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	00db      	lsls	r3, r3, #3
 800db80:	4952      	ldr	r1, [pc, #328]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800db82:	4313      	orrs	r3, r2
 800db84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800db86:	e03a      	b.n	800dbfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d020      	beq.n	800dbd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800db90:	4b4f      	ldr	r3, [pc, #316]	; (800dcd0 <HAL_RCC_OscConfig+0x2b0>)
 800db92:	2201      	movs	r2, #1
 800db94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db96:	f7fc f843 	bl	8009c20 <HAL_GetTick>
 800db9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800db9c:	e008      	b.n	800dbb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800db9e:	f7fc f83f 	bl	8009c20 <HAL_GetTick>
 800dba2:	4602      	mov	r2, r0
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	2b02      	cmp	r3, #2
 800dbaa:	d901      	bls.n	800dbb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800dbac:	2303      	movs	r3, #3
 800dbae:	e19c      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dbb0:	4b46      	ldr	r3, [pc, #280]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f003 0302 	and.w	r3, r3, #2
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d0f0      	beq.n	800db9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dbbc:	4b43      	ldr	r3, [pc, #268]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	691b      	ldr	r3, [r3, #16]
 800dbc8:	00db      	lsls	r3, r3, #3
 800dbca:	4940      	ldr	r1, [pc, #256]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	600b      	str	r3, [r1, #0]
 800dbd0:	e015      	b.n	800dbfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dbd2:	4b3f      	ldr	r3, [pc, #252]	; (800dcd0 <HAL_RCC_OscConfig+0x2b0>)
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbd8:	f7fc f822 	bl	8009c20 <HAL_GetTick>
 800dbdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dbde:	e008      	b.n	800dbf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dbe0:	f7fc f81e 	bl	8009c20 <HAL_GetTick>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d901      	bls.n	800dbf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800dbee:	2303      	movs	r3, #3
 800dbf0:	e17b      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dbf2:	4b36      	ldr	r3, [pc, #216]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f003 0302 	and.w	r3, r3, #2
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d1f0      	bne.n	800dbe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f003 0308 	and.w	r3, r3, #8
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d030      	beq.n	800dc6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	695b      	ldr	r3, [r3, #20]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d016      	beq.n	800dc40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dc12:	4b30      	ldr	r3, [pc, #192]	; (800dcd4 <HAL_RCC_OscConfig+0x2b4>)
 800dc14:	2201      	movs	r2, #1
 800dc16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc18:	f7fc f802 	bl	8009c20 <HAL_GetTick>
 800dc1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dc1e:	e008      	b.n	800dc32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dc20:	f7fb fffe 	bl	8009c20 <HAL_GetTick>
 800dc24:	4602      	mov	r2, r0
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	2b02      	cmp	r3, #2
 800dc2c:	d901      	bls.n	800dc32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800dc2e:	2303      	movs	r3, #3
 800dc30:	e15b      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dc32:	4b26      	ldr	r3, [pc, #152]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dc34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc36:	f003 0302 	and.w	r3, r3, #2
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d0f0      	beq.n	800dc20 <HAL_RCC_OscConfig+0x200>
 800dc3e:	e015      	b.n	800dc6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dc40:	4b24      	ldr	r3, [pc, #144]	; (800dcd4 <HAL_RCC_OscConfig+0x2b4>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dc46:	f7fb ffeb 	bl	8009c20 <HAL_GetTick>
 800dc4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dc4c:	e008      	b.n	800dc60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dc4e:	f7fb ffe7 	bl	8009c20 <HAL_GetTick>
 800dc52:	4602      	mov	r2, r0
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	1ad3      	subs	r3, r2, r3
 800dc58:	2b02      	cmp	r3, #2
 800dc5a:	d901      	bls.n	800dc60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800dc5c:	2303      	movs	r3, #3
 800dc5e:	e144      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dc60:	4b1a      	ldr	r3, [pc, #104]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dc62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc64:	f003 0302 	and.w	r3, r3, #2
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1f0      	bne.n	800dc4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f003 0304 	and.w	r3, r3, #4
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	f000 80a0 	beq.w	800ddba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dc7e:	4b13      	ldr	r3, [pc, #76]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10f      	bne.n	800dcaa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	60bb      	str	r3, [r7, #8]
 800dc8e:	4b0f      	ldr	r3, [pc, #60]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc92:	4a0e      	ldr	r2, [pc, #56]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dc94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc98:	6413      	str	r3, [r2, #64]	; 0x40
 800dc9a:	4b0c      	ldr	r3, [pc, #48]	; (800dccc <HAL_RCC_OscConfig+0x2ac>)
 800dc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dca2:	60bb      	str	r3, [r7, #8]
 800dca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dca6:	2301      	movs	r3, #1
 800dca8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dcaa:	4b0b      	ldr	r3, [pc, #44]	; (800dcd8 <HAL_RCC_OscConfig+0x2b8>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d121      	bne.n	800dcfa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dcb6:	4b08      	ldr	r3, [pc, #32]	; (800dcd8 <HAL_RCC_OscConfig+0x2b8>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a07      	ldr	r2, [pc, #28]	; (800dcd8 <HAL_RCC_OscConfig+0x2b8>)
 800dcbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dcc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dcc2:	f7fb ffad 	bl	8009c20 <HAL_GetTick>
 800dcc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dcc8:	e011      	b.n	800dcee <HAL_RCC_OscConfig+0x2ce>
 800dcca:	bf00      	nop
 800dccc:	40023800 	.word	0x40023800
 800dcd0:	42470000 	.word	0x42470000
 800dcd4:	42470e80 	.word	0x42470e80
 800dcd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dcdc:	f7fb ffa0 	bl	8009c20 <HAL_GetTick>
 800dce0:	4602      	mov	r2, r0
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	d901      	bls.n	800dcee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800dcea:	2303      	movs	r3, #3
 800dcec:	e0fd      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dcee:	4b81      	ldr	r3, [pc, #516]	; (800def4 <HAL_RCC_OscConfig+0x4d4>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d0f0      	beq.n	800dcdc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d106      	bne.n	800dd10 <HAL_RCC_OscConfig+0x2f0>
 800dd02:	4b7d      	ldr	r3, [pc, #500]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800dd04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd06:	4a7c      	ldr	r2, [pc, #496]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800dd08:	f043 0301 	orr.w	r3, r3, #1
 800dd0c:	6713      	str	r3, [r2, #112]	; 0x70
 800dd0e:	e01c      	b.n	800dd4a <HAL_RCC_OscConfig+0x32a>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	2b05      	cmp	r3, #5
 800dd16:	d10c      	bne.n	800dd32 <HAL_RCC_OscConfig+0x312>
 800dd18:	4b77      	ldr	r3, [pc, #476]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800dd1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd1c:	4a76      	ldr	r2, [pc, #472]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800dd1e:	f043 0304 	orr.w	r3, r3, #4
 800dd22:	6713      	str	r3, [r2, #112]	; 0x70
 800dd24:	4b74      	ldr	r3, [pc, #464]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800dd26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd28:	4a73      	ldr	r2, [pc, #460]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800dd2a:	f043 0301 	orr.w	r3, r3, #1
 800dd2e:	6713      	str	r3, [r2, #112]	; 0x70
 800dd30:	e00b      	b.n	800dd4a <HAL_RCC_OscConfig+0x32a>
 800dd32:	4b71      	ldr	r3, [pc, #452]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800dd34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd36:	4a70      	ldr	r2, [pc, #448]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800dd38:	f023 0301 	bic.w	r3, r3, #1
 800dd3c:	6713      	str	r3, [r2, #112]	; 0x70
 800dd3e:	4b6e      	ldr	r3, [pc, #440]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800dd40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd42:	4a6d      	ldr	r2, [pc, #436]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800dd44:	f023 0304 	bic.w	r3, r3, #4
 800dd48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	689b      	ldr	r3, [r3, #8]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d015      	beq.n	800dd7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd52:	f7fb ff65 	bl	8009c20 <HAL_GetTick>
 800dd56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dd58:	e00a      	b.n	800dd70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dd5a:	f7fb ff61 	bl	8009c20 <HAL_GetTick>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d901      	bls.n	800dd70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800dd6c:	2303      	movs	r3, #3
 800dd6e:	e0bc      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dd70:	4b61      	ldr	r3, [pc, #388]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800dd72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd74:	f003 0302 	and.w	r3, r3, #2
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d0ee      	beq.n	800dd5a <HAL_RCC_OscConfig+0x33a>
 800dd7c:	e014      	b.n	800dda8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dd7e:	f7fb ff4f 	bl	8009c20 <HAL_GetTick>
 800dd82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dd84:	e00a      	b.n	800dd9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dd86:	f7fb ff4b 	bl	8009c20 <HAL_GetTick>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	1ad3      	subs	r3, r2, r3
 800dd90:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d901      	bls.n	800dd9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800dd98:	2303      	movs	r3, #3
 800dd9a:	e0a6      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dd9c:	4b56      	ldr	r3, [pc, #344]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800dd9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda0:	f003 0302 	and.w	r3, r3, #2
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1ee      	bne.n	800dd86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dda8:	7dfb      	ldrb	r3, [r7, #23]
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d105      	bne.n	800ddba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ddae:	4b52      	ldr	r3, [pc, #328]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800ddb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb2:	4a51      	ldr	r2, [pc, #324]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800ddb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ddb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	699b      	ldr	r3, [r3, #24]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f000 8092 	beq.w	800dee8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ddc4:	4b4c      	ldr	r3, [pc, #304]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	f003 030c 	and.w	r3, r3, #12
 800ddcc:	2b08      	cmp	r3, #8
 800ddce:	d05c      	beq.n	800de8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	699b      	ldr	r3, [r3, #24]
 800ddd4:	2b02      	cmp	r3, #2
 800ddd6:	d141      	bne.n	800de5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ddd8:	4b48      	ldr	r3, [pc, #288]	; (800defc <HAL_RCC_OscConfig+0x4dc>)
 800ddda:	2200      	movs	r2, #0
 800dddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ddde:	f7fb ff1f 	bl	8009c20 <HAL_GetTick>
 800dde2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dde4:	e008      	b.n	800ddf8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dde6:	f7fb ff1b 	bl	8009c20 <HAL_GetTick>
 800ddea:	4602      	mov	r2, r0
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	1ad3      	subs	r3, r2, r3
 800ddf0:	2b02      	cmp	r3, #2
 800ddf2:	d901      	bls.n	800ddf8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	e078      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ddf8:	4b3f      	ldr	r3, [pc, #252]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de00:	2b00      	cmp	r3, #0
 800de02:	d1f0      	bne.n	800dde6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	69da      	ldr	r2, [r3, #28]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6a1b      	ldr	r3, [r3, #32]
 800de0c:	431a      	orrs	r2, r3
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de12:	019b      	lsls	r3, r3, #6
 800de14:	431a      	orrs	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de1a:	085b      	lsrs	r3, r3, #1
 800de1c:	3b01      	subs	r3, #1
 800de1e:	041b      	lsls	r3, r3, #16
 800de20:	431a      	orrs	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de26:	061b      	lsls	r3, r3, #24
 800de28:	4933      	ldr	r1, [pc, #204]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800de2a:	4313      	orrs	r3, r2
 800de2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800de2e:	4b33      	ldr	r3, [pc, #204]	; (800defc <HAL_RCC_OscConfig+0x4dc>)
 800de30:	2201      	movs	r2, #1
 800de32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de34:	f7fb fef4 	bl	8009c20 <HAL_GetTick>
 800de38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800de3a:	e008      	b.n	800de4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800de3c:	f7fb fef0 	bl	8009c20 <HAL_GetTick>
 800de40:	4602      	mov	r2, r0
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	1ad3      	subs	r3, r2, r3
 800de46:	2b02      	cmp	r3, #2
 800de48:	d901      	bls.n	800de4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800de4a:	2303      	movs	r3, #3
 800de4c:	e04d      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800de4e:	4b2a      	ldr	r3, [pc, #168]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de56:	2b00      	cmp	r3, #0
 800de58:	d0f0      	beq.n	800de3c <HAL_RCC_OscConfig+0x41c>
 800de5a:	e045      	b.n	800dee8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de5c:	4b27      	ldr	r3, [pc, #156]	; (800defc <HAL_RCC_OscConfig+0x4dc>)
 800de5e:	2200      	movs	r2, #0
 800de60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de62:	f7fb fedd 	bl	8009c20 <HAL_GetTick>
 800de66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de68:	e008      	b.n	800de7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800de6a:	f7fb fed9 	bl	8009c20 <HAL_GetTick>
 800de6e:	4602      	mov	r2, r0
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	2b02      	cmp	r3, #2
 800de76:	d901      	bls.n	800de7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800de78:	2303      	movs	r3, #3
 800de7a:	e036      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de7c:	4b1e      	ldr	r3, [pc, #120]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de84:	2b00      	cmp	r3, #0
 800de86:	d1f0      	bne.n	800de6a <HAL_RCC_OscConfig+0x44a>
 800de88:	e02e      	b.n	800dee8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	699b      	ldr	r3, [r3, #24]
 800de8e:	2b01      	cmp	r3, #1
 800de90:	d101      	bne.n	800de96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	e029      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800de96:	4b18      	ldr	r3, [pc, #96]	; (800def8 <HAL_RCC_OscConfig+0x4d8>)
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	69db      	ldr	r3, [r3, #28]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d11c      	bne.n	800dee4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d115      	bne.n	800dee4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800debe:	4013      	ands	r3, r2
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d10d      	bne.n	800dee4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d106      	bne.n	800dee4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d001      	beq.n	800dee8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800dee4:	2301      	movs	r3, #1
 800dee6:	e000      	b.n	800deea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3718      	adds	r7, #24
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	40007000 	.word	0x40007000
 800def8:	40023800 	.word	0x40023800
 800defc:	42470060 	.word	0x42470060

0800df00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d101      	bne.n	800df14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800df10:	2301      	movs	r3, #1
 800df12:	e0cc      	b.n	800e0ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800df14:	4b68      	ldr	r3, [pc, #416]	; (800e0b8 <HAL_RCC_ClockConfig+0x1b8>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f003 030f 	and.w	r3, r3, #15
 800df1c:	683a      	ldr	r2, [r7, #0]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d90c      	bls.n	800df3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df22:	4b65      	ldr	r3, [pc, #404]	; (800e0b8 <HAL_RCC_ClockConfig+0x1b8>)
 800df24:	683a      	ldr	r2, [r7, #0]
 800df26:	b2d2      	uxtb	r2, r2
 800df28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800df2a:	4b63      	ldr	r3, [pc, #396]	; (800e0b8 <HAL_RCC_ClockConfig+0x1b8>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f003 030f 	and.w	r3, r3, #15
 800df32:	683a      	ldr	r2, [r7, #0]
 800df34:	429a      	cmp	r2, r3
 800df36:	d001      	beq.n	800df3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800df38:	2301      	movs	r3, #1
 800df3a:	e0b8      	b.n	800e0ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f003 0302 	and.w	r3, r3, #2
 800df44:	2b00      	cmp	r3, #0
 800df46:	d020      	beq.n	800df8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	2b00      	cmp	r3, #0
 800df52:	d005      	beq.n	800df60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800df54:	4b59      	ldr	r3, [pc, #356]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800df56:	689b      	ldr	r3, [r3, #8]
 800df58:	4a58      	ldr	r2, [pc, #352]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800df5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800df5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f003 0308 	and.w	r3, r3, #8
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d005      	beq.n	800df78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800df6c:	4b53      	ldr	r3, [pc, #332]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800df6e:	689b      	ldr	r3, [r3, #8]
 800df70:	4a52      	ldr	r2, [pc, #328]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800df72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800df76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800df78:	4b50      	ldr	r3, [pc, #320]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	494d      	ldr	r1, [pc, #308]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800df86:	4313      	orrs	r3, r2
 800df88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f003 0301 	and.w	r3, r3, #1
 800df92:	2b00      	cmp	r3, #0
 800df94:	d044      	beq.n	800e020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d107      	bne.n	800dfae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800df9e:	4b47      	ldr	r3, [pc, #284]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d119      	bne.n	800dfde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e07f      	b.n	800e0ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	2b02      	cmp	r3, #2
 800dfb4:	d003      	beq.n	800dfbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dfba:	2b03      	cmp	r3, #3
 800dfbc:	d107      	bne.n	800dfce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dfbe:	4b3f      	ldr	r3, [pc, #252]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d109      	bne.n	800dfde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e06f      	b.n	800e0ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dfce:	4b3b      	ldr	r3, [pc, #236]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f003 0302 	and.w	r3, r3, #2
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d101      	bne.n	800dfde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e067      	b.n	800e0ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dfde:	4b37      	ldr	r3, [pc, #220]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	f023 0203 	bic.w	r2, r3, #3
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	4934      	ldr	r1, [pc, #208]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800dfec:	4313      	orrs	r3, r2
 800dfee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dff0:	f7fb fe16 	bl	8009c20 <HAL_GetTick>
 800dff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dff6:	e00a      	b.n	800e00e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dff8:	f7fb fe12 	bl	8009c20 <HAL_GetTick>
 800dffc:	4602      	mov	r2, r0
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	f241 3288 	movw	r2, #5000	; 0x1388
 800e006:	4293      	cmp	r3, r2
 800e008:	d901      	bls.n	800e00e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e00a:	2303      	movs	r3, #3
 800e00c:	e04f      	b.n	800e0ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e00e:	4b2b      	ldr	r3, [pc, #172]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	f003 020c 	and.w	r2, r3, #12
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d1eb      	bne.n	800dff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e020:	4b25      	ldr	r3, [pc, #148]	; (800e0b8 <HAL_RCC_ClockConfig+0x1b8>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f003 030f 	and.w	r3, r3, #15
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d20c      	bcs.n	800e048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e02e:	4b22      	ldr	r3, [pc, #136]	; (800e0b8 <HAL_RCC_ClockConfig+0x1b8>)
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	b2d2      	uxtb	r2, r2
 800e034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e036:	4b20      	ldr	r3, [pc, #128]	; (800e0b8 <HAL_RCC_ClockConfig+0x1b8>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f003 030f 	and.w	r3, r3, #15
 800e03e:	683a      	ldr	r2, [r7, #0]
 800e040:	429a      	cmp	r2, r3
 800e042:	d001      	beq.n	800e048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e044:	2301      	movs	r3, #1
 800e046:	e032      	b.n	800e0ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f003 0304 	and.w	r3, r3, #4
 800e050:	2b00      	cmp	r3, #0
 800e052:	d008      	beq.n	800e066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e054:	4b19      	ldr	r3, [pc, #100]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	4916      	ldr	r1, [pc, #88]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800e062:	4313      	orrs	r3, r2
 800e064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f003 0308 	and.w	r3, r3, #8
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d009      	beq.n	800e086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e072:	4b12      	ldr	r3, [pc, #72]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800e074:	689b      	ldr	r3, [r3, #8]
 800e076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	691b      	ldr	r3, [r3, #16]
 800e07e:	00db      	lsls	r3, r3, #3
 800e080:	490e      	ldr	r1, [pc, #56]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800e082:	4313      	orrs	r3, r2
 800e084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e086:	f000 f821 	bl	800e0cc <HAL_RCC_GetSysClockFreq>
 800e08a:	4601      	mov	r1, r0
 800e08c:	4b0b      	ldr	r3, [pc, #44]	; (800e0bc <HAL_RCC_ClockConfig+0x1bc>)
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	091b      	lsrs	r3, r3, #4
 800e092:	f003 030f 	and.w	r3, r3, #15
 800e096:	4a0a      	ldr	r2, [pc, #40]	; (800e0c0 <HAL_RCC_ClockConfig+0x1c0>)
 800e098:	5cd3      	ldrb	r3, [r2, r3]
 800e09a:	fa21 f303 	lsr.w	r3, r1, r3
 800e09e:	4a09      	ldr	r2, [pc, #36]	; (800e0c4 <HAL_RCC_ClockConfig+0x1c4>)
 800e0a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e0a2:	4b09      	ldr	r3, [pc, #36]	; (800e0c8 <HAL_RCC_ClockConfig+0x1c8>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fa fa20 	bl	80084ec <HAL_InitTick>

  return HAL_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	40023c00 	.word	0x40023c00
 800e0bc:	40023800 	.word	0x40023800
 800e0c0:	0801f040 	.word	0x0801f040
 800e0c4:	20000108 	.word	0x20000108
 800e0c8:	2000010c 	.word	0x2000010c

0800e0cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	607b      	str	r3, [r7, #4]
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	60fb      	str	r3, [r7, #12]
 800e0da:	2300      	movs	r3, #0
 800e0dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e0e2:	4b63      	ldr	r3, [pc, #396]	; (800e270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e0e4:	689b      	ldr	r3, [r3, #8]
 800e0e6:	f003 030c 	and.w	r3, r3, #12
 800e0ea:	2b04      	cmp	r3, #4
 800e0ec:	d007      	beq.n	800e0fe <HAL_RCC_GetSysClockFreq+0x32>
 800e0ee:	2b08      	cmp	r3, #8
 800e0f0:	d008      	beq.n	800e104 <HAL_RCC_GetSysClockFreq+0x38>
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	f040 80b4 	bne.w	800e260 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e0f8:	4b5e      	ldr	r3, [pc, #376]	; (800e274 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800e0fa:	60bb      	str	r3, [r7, #8]
       break;
 800e0fc:	e0b3      	b.n	800e266 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e0fe:	4b5e      	ldr	r3, [pc, #376]	; (800e278 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800e100:	60bb      	str	r3, [r7, #8]
      break;
 800e102:	e0b0      	b.n	800e266 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e104:	4b5a      	ldr	r3, [pc, #360]	; (800e270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e10c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e10e:	4b58      	ldr	r3, [pc, #352]	; (800e270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e116:	2b00      	cmp	r3, #0
 800e118:	d04a      	beq.n	800e1b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e11a:	4b55      	ldr	r3, [pc, #340]	; (800e270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	099b      	lsrs	r3, r3, #6
 800e120:	f04f 0400 	mov.w	r4, #0
 800e124:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e128:	f04f 0200 	mov.w	r2, #0
 800e12c:	ea03 0501 	and.w	r5, r3, r1
 800e130:	ea04 0602 	and.w	r6, r4, r2
 800e134:	4629      	mov	r1, r5
 800e136:	4632      	mov	r2, r6
 800e138:	f04f 0300 	mov.w	r3, #0
 800e13c:	f04f 0400 	mov.w	r4, #0
 800e140:	0154      	lsls	r4, r2, #5
 800e142:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800e146:	014b      	lsls	r3, r1, #5
 800e148:	4619      	mov	r1, r3
 800e14a:	4622      	mov	r2, r4
 800e14c:	1b49      	subs	r1, r1, r5
 800e14e:	eb62 0206 	sbc.w	r2, r2, r6
 800e152:	f04f 0300 	mov.w	r3, #0
 800e156:	f04f 0400 	mov.w	r4, #0
 800e15a:	0194      	lsls	r4, r2, #6
 800e15c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800e160:	018b      	lsls	r3, r1, #6
 800e162:	1a5b      	subs	r3, r3, r1
 800e164:	eb64 0402 	sbc.w	r4, r4, r2
 800e168:	f04f 0100 	mov.w	r1, #0
 800e16c:	f04f 0200 	mov.w	r2, #0
 800e170:	00e2      	lsls	r2, r4, #3
 800e172:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800e176:	00d9      	lsls	r1, r3, #3
 800e178:	460b      	mov	r3, r1
 800e17a:	4614      	mov	r4, r2
 800e17c:	195b      	adds	r3, r3, r5
 800e17e:	eb44 0406 	adc.w	r4, r4, r6
 800e182:	f04f 0100 	mov.w	r1, #0
 800e186:	f04f 0200 	mov.w	r2, #0
 800e18a:	0262      	lsls	r2, r4, #9
 800e18c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800e190:	0259      	lsls	r1, r3, #9
 800e192:	460b      	mov	r3, r1
 800e194:	4614      	mov	r4, r2
 800e196:	4618      	mov	r0, r3
 800e198:	4621      	mov	r1, r4
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f04f 0400 	mov.w	r4, #0
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	4623      	mov	r3, r4
 800e1a4:	f7f2 fede 	bl	8000f64 <__aeabi_uldivmod>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	460c      	mov	r4, r1
 800e1ac:	60fb      	str	r3, [r7, #12]
 800e1ae:	e049      	b.n	800e244 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e1b0:	4b2f      	ldr	r3, [pc, #188]	; (800e270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	099b      	lsrs	r3, r3, #6
 800e1b6:	f04f 0400 	mov.w	r4, #0
 800e1ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e1be:	f04f 0200 	mov.w	r2, #0
 800e1c2:	ea03 0501 	and.w	r5, r3, r1
 800e1c6:	ea04 0602 	and.w	r6, r4, r2
 800e1ca:	4629      	mov	r1, r5
 800e1cc:	4632      	mov	r2, r6
 800e1ce:	f04f 0300 	mov.w	r3, #0
 800e1d2:	f04f 0400 	mov.w	r4, #0
 800e1d6:	0154      	lsls	r4, r2, #5
 800e1d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800e1dc:	014b      	lsls	r3, r1, #5
 800e1de:	4619      	mov	r1, r3
 800e1e0:	4622      	mov	r2, r4
 800e1e2:	1b49      	subs	r1, r1, r5
 800e1e4:	eb62 0206 	sbc.w	r2, r2, r6
 800e1e8:	f04f 0300 	mov.w	r3, #0
 800e1ec:	f04f 0400 	mov.w	r4, #0
 800e1f0:	0194      	lsls	r4, r2, #6
 800e1f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800e1f6:	018b      	lsls	r3, r1, #6
 800e1f8:	1a5b      	subs	r3, r3, r1
 800e1fa:	eb64 0402 	sbc.w	r4, r4, r2
 800e1fe:	f04f 0100 	mov.w	r1, #0
 800e202:	f04f 0200 	mov.w	r2, #0
 800e206:	00e2      	lsls	r2, r4, #3
 800e208:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800e20c:	00d9      	lsls	r1, r3, #3
 800e20e:	460b      	mov	r3, r1
 800e210:	4614      	mov	r4, r2
 800e212:	195b      	adds	r3, r3, r5
 800e214:	eb44 0406 	adc.w	r4, r4, r6
 800e218:	f04f 0100 	mov.w	r1, #0
 800e21c:	f04f 0200 	mov.w	r2, #0
 800e220:	02a2      	lsls	r2, r4, #10
 800e222:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800e226:	0299      	lsls	r1, r3, #10
 800e228:	460b      	mov	r3, r1
 800e22a:	4614      	mov	r4, r2
 800e22c:	4618      	mov	r0, r3
 800e22e:	4621      	mov	r1, r4
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f04f 0400 	mov.w	r4, #0
 800e236:	461a      	mov	r2, r3
 800e238:	4623      	mov	r3, r4
 800e23a:	f7f2 fe93 	bl	8000f64 <__aeabi_uldivmod>
 800e23e:	4603      	mov	r3, r0
 800e240:	460c      	mov	r4, r1
 800e242:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e244:	4b0a      	ldr	r3, [pc, #40]	; (800e270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	0c1b      	lsrs	r3, r3, #16
 800e24a:	f003 0303 	and.w	r3, r3, #3
 800e24e:	3301      	adds	r3, #1
 800e250:	005b      	lsls	r3, r3, #1
 800e252:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e254:	68fa      	ldr	r2, [r7, #12]
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	fbb2 f3f3 	udiv	r3, r2, r3
 800e25c:	60bb      	str	r3, [r7, #8]
      break;
 800e25e:	e002      	b.n	800e266 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e260:	4b04      	ldr	r3, [pc, #16]	; (800e274 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800e262:	60bb      	str	r3, [r7, #8]
      break;
 800e264:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e266:	68bb      	ldr	r3, [r7, #8]
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3714      	adds	r7, #20
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e270:	40023800 	.word	0x40023800
 800e274:	00f42400 	.word	0x00f42400
 800e278:	007a1200 	.word	0x007a1200

0800e27c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e27c:	b480      	push	{r7}
 800e27e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e280:	4b03      	ldr	r3, [pc, #12]	; (800e290 <HAL_RCC_GetHCLKFreq+0x14>)
 800e282:	681b      	ldr	r3, [r3, #0]
}
 800e284:	4618      	mov	r0, r3
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	20000108 	.word	0x20000108

0800e294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e298:	f7ff fff0 	bl	800e27c <HAL_RCC_GetHCLKFreq>
 800e29c:	4601      	mov	r1, r0
 800e29e:	4b05      	ldr	r3, [pc, #20]	; (800e2b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e2a0:	689b      	ldr	r3, [r3, #8]
 800e2a2:	0a9b      	lsrs	r3, r3, #10
 800e2a4:	f003 0307 	and.w	r3, r3, #7
 800e2a8:	4a03      	ldr	r2, [pc, #12]	; (800e2b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e2aa:	5cd3      	ldrb	r3, [r2, r3]
 800e2ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	40023800 	.word	0x40023800
 800e2b8:	0801f050 	.word	0x0801f050

0800e2bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e2c0:	f7ff ffdc 	bl	800e27c <HAL_RCC_GetHCLKFreq>
 800e2c4:	4601      	mov	r1, r0
 800e2c6:	4b05      	ldr	r3, [pc, #20]	; (800e2dc <HAL_RCC_GetPCLK2Freq+0x20>)
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	0b5b      	lsrs	r3, r3, #13
 800e2cc:	f003 0307 	and.w	r3, r3, #7
 800e2d0:	4a03      	ldr	r2, [pc, #12]	; (800e2e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e2d2:	5cd3      	ldrb	r3, [r2, r3]
 800e2d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	40023800 	.word	0x40023800
 800e2e0:	0801f050 	.word	0x0801f050

0800e2e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	220f      	movs	r2, #15
 800e2f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e2f4:	4b12      	ldr	r3, [pc, #72]	; (800e340 <HAL_RCC_GetClockConfig+0x5c>)
 800e2f6:	689b      	ldr	r3, [r3, #8]
 800e2f8:	f003 0203 	and.w	r2, r3, #3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e300:	4b0f      	ldr	r3, [pc, #60]	; (800e340 <HAL_RCC_GetClockConfig+0x5c>)
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e30c:	4b0c      	ldr	r3, [pc, #48]	; (800e340 <HAL_RCC_GetClockConfig+0x5c>)
 800e30e:	689b      	ldr	r3, [r3, #8]
 800e310:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e318:	4b09      	ldr	r3, [pc, #36]	; (800e340 <HAL_RCC_GetClockConfig+0x5c>)
 800e31a:	689b      	ldr	r3, [r3, #8]
 800e31c:	08db      	lsrs	r3, r3, #3
 800e31e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e326:	4b07      	ldr	r3, [pc, #28]	; (800e344 <HAL_RCC_GetClockConfig+0x60>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f003 020f 	and.w	r2, r3, #15
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	601a      	str	r2, [r3, #0]
}
 800e332:	bf00      	nop
 800e334:	370c      	adds	r7, #12
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr
 800e33e:	bf00      	nop
 800e340:	40023800 	.word	0x40023800
 800e344:	40023c00 	.word	0x40023c00

0800e348 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d101      	bne.n	800e35a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e356:	2301      	movs	r3, #1
 800e358:	e022      	b.n	800e3a0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e360:	b2db      	uxtb	r3, r3
 800e362:	2b00      	cmp	r3, #0
 800e364:	d105      	bne.n	800e372 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2200      	movs	r2, #0
 800e36a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f7f9 fefb 	bl	8008168 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2203      	movs	r2, #3
 800e376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f814 	bl	800e3a8 <HAL_SD_InitCard>
 800e380:	4603      	mov	r3, r0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d001      	beq.n	800e38a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e386:	2301      	movs	r3, #1
 800e388:	e00a      	b.n	800e3a0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2201      	movs	r2, #1
 800e39a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3708      	adds	r7, #8
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e3a8:	b5b0      	push	{r4, r5, r7, lr}
 800e3aa:	b08e      	sub	sp, #56	; 0x38
 800e3ac:	af04      	add	r7, sp, #16
 800e3ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800e3c4:	2376      	movs	r3, #118	; 0x76
 800e3c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681d      	ldr	r5, [r3, #0]
 800e3cc:	466c      	mov	r4, sp
 800e3ce:	f107 0314 	add.w	r3, r7, #20
 800e3d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e3d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e3da:	f107 0308 	add.w	r3, r7, #8
 800e3de:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	f003 fb5f 	bl	8011aa4 <SDIO_Init>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e031      	b.n	800e45c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800e3f8:	4b1a      	ldr	r3, [pc, #104]	; (800e464 <HAL_SD_InitCard+0xbc>)
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4618      	mov	r0, r3
 800e404:	f003 fb97 	bl	8011b36 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800e408:	4b16      	ldr	r3, [pc, #88]	; (800e464 <HAL_SD_InitCard+0xbc>)
 800e40a:	2201      	movs	r2, #1
 800e40c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 ffdc 	bl	800f3cc <SD_PowerON>
 800e414:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e416:	6a3b      	ldr	r3, [r7, #32]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d00b      	beq.n	800e434 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2201      	movs	r2, #1
 800e420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e428:	6a3b      	ldr	r3, [r7, #32]
 800e42a:	431a      	orrs	r2, r3
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e430:	2301      	movs	r3, #1
 800e432:	e013      	b.n	800e45c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 fefb 	bl	800f230 <SD_InitCard>
 800e43a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e43c:	6a3b      	ldr	r3, [r7, #32]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00b      	beq.n	800e45a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2201      	movs	r2, #1
 800e446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e44e:	6a3b      	ldr	r3, [r7, #32]
 800e450:	431a      	orrs	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	e000      	b.n	800e45c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3728      	adds	r7, #40	; 0x28
 800e460:	46bd      	mov	sp, r7
 800e462:	bdb0      	pop	{r4, r5, r7, pc}
 800e464:	422580a0 	.word	0x422580a0

0800e468 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b08c      	sub	sp, #48	; 0x30
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	607a      	str	r2, [r7, #4]
 800e474:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d107      	bne.n	800e490 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e484:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e48c:	2301      	movs	r3, #1
 800e48e:	e0c9      	b.n	800e624 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e496:	b2db      	uxtb	r3, r3
 800e498:	2b01      	cmp	r3, #1
 800e49a:	f040 80c2 	bne.w	800e622 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	441a      	add	r2, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d907      	bls.n	800e4c2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e0b0      	b.n	800e624 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2203      	movs	r2, #3
 800e4c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	6812      	ldr	r2, [r2, #0]
 800e4dc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800e4e0:	f043 0302 	orr.w	r3, r3, #2
 800e4e4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ea:	4a50      	ldr	r2, [pc, #320]	; (800e62c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800e4ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4f2:	4a4f      	ldr	r2, [pc, #316]	; (800e630 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800e4f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3380      	adds	r3, #128	; 0x80
 800e508:	4619      	mov	r1, r3
 800e50a:	68ba      	ldr	r2, [r7, #8]
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	025b      	lsls	r3, r3, #9
 800e510:	089b      	lsrs	r3, r3, #2
 800e512:	f7fb fd43 	bl	8009f9c <HAL_DMA_Start_IT>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d017      	beq.n	800e54c <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800e52a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a40      	ldr	r2, [pc, #256]	; (800e634 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e532:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e538:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e548:	2301      	movs	r3, #1
 800e54a:	e06b      	b.n	800e624 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800e54c:	4b3a      	ldr	r3, [pc, #232]	; (800e638 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800e54e:	2201      	movs	r2, #1
 800e550:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e556:	2b01      	cmp	r3, #1
 800e558:	d002      	beq.n	800e560 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800e55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55c:	025b      	lsls	r3, r3, #9
 800e55e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e568:	4618      	mov	r0, r3
 800e56a:	f003 fb77 	bl	8011c5c <SDMMC_CmdBlockLength>
 800e56e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00f      	beq.n	800e596 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4a2e      	ldr	r2, [pc, #184]	; (800e634 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e57c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e584:	431a      	orrs	r2, r3
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2201      	movs	r2, #1
 800e58e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	e046      	b.n	800e624 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e596:	f04f 33ff 	mov.w	r3, #4294967295
 800e59a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	025b      	lsls	r3, r3, #9
 800e5a0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e5a2:	2390      	movs	r3, #144	; 0x90
 800e5a4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e5a6:	2302      	movs	r3, #2
 800e5a8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f107 0210 	add.w	r2, r7, #16
 800e5ba:	4611      	mov	r1, r2
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f003 fb21 	bl	8011c04 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d90a      	bls.n	800e5de <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2282      	movs	r2, #130	; 0x82
 800e5cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f003 fb85 	bl	8011ce4 <SDMMC_CmdReadMultiBlock>
 800e5da:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e5dc:	e009      	b.n	800e5f2 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2281      	movs	r2, #129	; 0x81
 800e5e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f003 fb58 	bl	8011ca0 <SDMMC_CmdReadSingleBlock>
 800e5f0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800e5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d012      	beq.n	800e61e <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a0d      	ldr	r2, [pc, #52]	; (800e634 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e5fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e606:	431a      	orrs	r2, r3
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2201      	movs	r2, #1
 800e610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2200      	movs	r2, #0
 800e618:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e61a:	2301      	movs	r3, #1
 800e61c:	e002      	b.n	800e624 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800e61e:	2300      	movs	r3, #0
 800e620:	e000      	b.n	800e624 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800e622:	2302      	movs	r3, #2
  }
}
 800e624:	4618      	mov	r0, r3
 800e626:	3730      	adds	r7, #48	; 0x30
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}
 800e62c:	0800f03f 	.word	0x0800f03f
 800e630:	0800f0b1 	.word	0x0800f0b1
 800e634:	004005ff 	.word	0x004005ff
 800e638:	4225858c 	.word	0x4225858c

0800e63c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b08c      	sub	sp, #48	; 0x30
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
 800e648:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d107      	bne.n	800e664 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e658:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e660:	2301      	movs	r3, #1
 800e662:	e0ce      	b.n	800e802 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	f040 80c7 	bne.w	800e800 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2200      	movs	r2, #0
 800e676:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	441a      	add	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e682:	429a      	cmp	r2, r3
 800e684:	d907      	bls.n	800e696 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e68a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e692:	2301      	movs	r3, #1
 800e694:	e0b5      	b.n	800e802 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2203      	movs	r2, #3
 800e69a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ac:	68fa      	ldr	r2, [r7, #12]
 800e6ae:	6812      	ldr	r2, [r2, #0]
 800e6b0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800e6b4:	f043 0302 	orr.w	r3, r3, #2
 800e6b8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6be:	4a53      	ldr	r2, [pc, #332]	; (800e80c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800e6c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c6:	4a52      	ldr	r2, [pc, #328]	; (800e810 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800e6c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d002      	beq.n	800e6e0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800e6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6dc:	025b      	lsls	r3, r3, #9
 800e6de:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f003 fab7 	bl	8011c5c <SDMMC_CmdBlockLength>
 800e6ee:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00f      	beq.n	800e716 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4a46      	ldr	r2, [pc, #280]	; (800e814 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800e6fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e704:	431a      	orrs	r2, r3
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2201      	movs	r2, #1
 800e70e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e712:	2301      	movs	r3, #1
 800e714:	e075      	b.n	800e802 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	2b01      	cmp	r3, #1
 800e71a:	d90a      	bls.n	800e732 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	22a0      	movs	r2, #160	; 0xa0
 800e720:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e728:	4618      	mov	r0, r3
 800e72a:	f003 fb1f 	bl	8011d6c <SDMMC_CmdWriteMultiBlock>
 800e72e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e730:	e009      	b.n	800e746 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2290      	movs	r2, #144	; 0x90
 800e736:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e73e:	4618      	mov	r0, r3
 800e740:	f003 faf2 	bl	8011d28 <SDMMC_CmdWriteSingleBlock>
 800e744:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d012      	beq.n	800e772 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a30      	ldr	r2, [pc, #192]	; (800e814 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800e752:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75a:	431a      	orrs	r2, r3
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2201      	movs	r2, #1
 800e764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2200      	movs	r2, #0
 800e76c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e76e:	2301      	movs	r3, #1
 800e770:	e047      	b.n	800e802 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800e772:	4b29      	ldr	r3, [pc, #164]	; (800e818 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800e774:	2201      	movs	r2, #1
 800e776:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e77c:	68b9      	ldr	r1, [r7, #8]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	3380      	adds	r3, #128	; 0x80
 800e784:	461a      	mov	r2, r3
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	025b      	lsls	r3, r3, #9
 800e78a:	089b      	lsrs	r3, r3, #2
 800e78c:	f7fb fc06 	bl	8009f9c <HAL_DMA_Start_IT>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d01c      	beq.n	800e7d0 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	6812      	ldr	r2, [r2, #0]
 800e7a0:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800e7a4:	f023 0302 	bic.w	r3, r3, #2
 800e7a8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a19      	ldr	r2, [pc, #100]	; (800e814 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800e7b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e018      	b.n	800e802 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e7d4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	025b      	lsls	r3, r3, #9
 800e7da:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e7dc:	2390      	movs	r3, #144	; 0x90
 800e7de:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f107 0210 	add.w	r2, r7, #16
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f003 fa04 	bl	8011c04 <SDIO_ConfigData>

      return HAL_OK;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	e000      	b.n	800e802 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800e800:	2302      	movs	r3, #2
  }
}
 800e802:	4618      	mov	r0, r3
 800e804:	3730      	adds	r7, #48	; 0x30
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	0800f015 	.word	0x0800f015
 800e810:	0800f0b1 	.word	0x0800f0b1
 800e814:	004005ff 	.word	0x004005ff
 800e818:	4225858c 	.word	0x4225858c

0800e81c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e828:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e834:	2b00      	cmp	r3, #0
 800e836:	d008      	beq.n	800e84a <HAL_SD_IRQHandler+0x2e>
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f003 0308 	and.w	r3, r3, #8
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d003      	beq.n	800e84a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 ffd8 	bl	800f7f8 <SD_Read_IT>
 800e848:	e165      	b.n	800eb16 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e854:	2b00      	cmp	r3, #0
 800e856:	f000 808f 	beq.w	800e978 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e862:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	6812      	ldr	r2, [r2, #0]
 800e86e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800e872:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800e876:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f022 0201 	bic.w	r2, r2, #1
 800e886:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f003 0308 	and.w	r3, r3, #8
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d039      	beq.n	800e906 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	f003 0302 	and.w	r3, r3, #2
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d104      	bne.n	800e8a6 <HAL_SD_IRQHandler+0x8a>
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f003 0320 	and.w	r3, r3, #32
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d011      	beq.n	800e8ca <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f003 fa80 	bl	8011db0 <SDMMC_CmdStopTransfer>
 800e8b0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d008      	beq.n	800e8ca <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	431a      	orrs	r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f000 f92f 	bl	800eb28 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f240 523a 	movw	r2, #1338	; 0x53a
 800e8d2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f003 0301 	and.w	r3, r3, #1
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d104      	bne.n	800e8f6 <HAL_SD_IRQHandler+0xda>
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f003 0302 	and.w	r3, r3, #2
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d003      	beq.n	800e8fe <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f004 f98c 	bl	8012c14 <HAL_SD_RxCpltCallback>
 800e8fc:	e10b      	b.n	800eb16 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f004 f97e 	bl	8012c00 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e904:	e107      	b.n	800eb16 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f000 8102 	beq.w	800eb16 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f003 0320 	and.w	r3, r3, #32
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d011      	beq.n	800e940 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4618      	mov	r0, r3
 800e922:	f003 fa45 	bl	8011db0 <SDMMC_CmdStopTransfer>
 800e926:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d008      	beq.n	800e940 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	431a      	orrs	r2, r3
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 f8f4 	bl	800eb28 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f003 0301 	and.w	r3, r3, #1
 800e946:	2b00      	cmp	r3, #0
 800e948:	f040 80e5 	bne.w	800eb16 <HAL_SD_IRQHandler+0x2fa>
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f003 0302 	and.w	r3, r3, #2
 800e952:	2b00      	cmp	r3, #0
 800e954:	f040 80df 	bne.w	800eb16 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f022 0208 	bic.w	r2, r2, #8
 800e966:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2201      	movs	r2, #1
 800e96c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f004 f945 	bl	8012c00 <HAL_SD_TxCpltCallback>
}
 800e976:	e0ce      	b.n	800eb16 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e97e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e982:	2b00      	cmp	r3, #0
 800e984:	d008      	beq.n	800e998 <HAL_SD_IRQHandler+0x17c>
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f003 0308 	and.w	r3, r3, #8
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d003      	beq.n	800e998 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 ff82 	bl	800f89a <SD_Write_IT>
 800e996:	e0be      	b.n	800eb16 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e99e:	f240 233a 	movw	r3, #570	; 0x23a
 800e9a2:	4013      	ands	r3, r2
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f000 80b6 	beq.w	800eb16 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9b0:	f003 0302 	and.w	r3, r3, #2
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d005      	beq.n	800e9c4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9bc:	f043 0202 	orr.w	r2, r3, #2
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ca:	f003 0308 	and.w	r3, r3, #8
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d005      	beq.n	800e9de <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9d6:	f043 0208 	orr.w	r2, r3, #8
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9e4:	f003 0320 	and.w	r3, r3, #32
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d005      	beq.n	800e9f8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f0:	f043 0220 	orr.w	r2, r3, #32
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9fe:	f003 0310 	and.w	r3, r3, #16
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d005      	beq.n	800ea12 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea0a:	f043 0210 	orr.w	r2, r3, #16
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d005      	beq.n	800ea2c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea24:	f043 0208 	orr.w	r2, r3, #8
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f240 723a 	movw	r2, #1850	; 0x73a
 800ea34:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	6812      	ldr	r2, [r2, #0]
 800ea40:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800ea44:	f023 0302 	bic.w	r3, r3, #2
 800ea48:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f003 f9ae 	bl	8011db0 <SDMMC_CmdStopTransfer>
 800ea54:	4602      	mov	r2, r0
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea5a:	431a      	orrs	r2, r3
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f003 0308 	and.w	r3, r3, #8
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00a      	beq.n	800ea80 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2200      	movs	r2, #0
 800ea76:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f000 f855 	bl	800eb28 <HAL_SD_ErrorCallback>
}
 800ea7e:	e04a      	b.n	800eb16 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d045      	beq.n	800eb16 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f003 0310 	and.w	r3, r3, #16
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d104      	bne.n	800ea9e <HAL_SD_IRQHandler+0x282>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f003 0320 	and.w	r3, r3, #32
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d011      	beq.n	800eac2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaa2:	4a1f      	ldr	r2, [pc, #124]	; (800eb20 <HAL_SD_IRQHandler+0x304>)
 800eaa4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fb face 	bl	800a04c <HAL_DMA_Abort_IT>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d02f      	beq.n	800eb16 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaba:	4618      	mov	r0, r3
 800eabc:	f000 fb4a 	bl	800f154 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800eac0:	e029      	b.n	800eb16 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f003 0301 	and.w	r3, r3, #1
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d104      	bne.n	800ead6 <HAL_SD_IRQHandler+0x2ba>
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f003 0302 	and.w	r3, r3, #2
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d011      	beq.n	800eafa <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eada:	4a12      	ldr	r2, [pc, #72]	; (800eb24 <HAL_SD_IRQHandler+0x308>)
 800eadc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fb fab2 	bl	800a04c <HAL_DMA_Abort_IT>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d013      	beq.n	800eb16 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f000 fb65 	bl	800f1c2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800eaf8:	e00d      	b.n	800eb16 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2200      	movs	r2, #0
 800eafe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2201      	movs	r2, #1
 800eb04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f004 f86c 	bl	8012bec <HAL_SD_AbortCallback>
}
 800eb14:	e7ff      	b.n	800eb16 <HAL_SD_IRQHandler+0x2fa>
 800eb16:	bf00      	nop
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	0800f155 	.word	0x0800f155
 800eb24:	0800f1c3 	.word	0x0800f1c3

0800eb28 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800eb30:	bf00      	nop
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb4a:	0f9b      	lsrs	r3, r3, #30
 800eb4c:	b2da      	uxtb	r2, r3
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb56:	0e9b      	lsrs	r3, r3, #26
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	f003 030f 	and.w	r3, r3, #15
 800eb5e:	b2da      	uxtb	r2, r3
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb68:	0e1b      	lsrs	r3, r3, #24
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	f003 0303 	and.w	r3, r3, #3
 800eb70:	b2da      	uxtb	r2, r3
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb7a:	0c1b      	lsrs	r3, r3, #16
 800eb7c:	b2da      	uxtb	r2, r3
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb86:	0a1b      	lsrs	r3, r3, #8
 800eb88:	b2da      	uxtb	r2, r3
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb92:	b2da      	uxtb	r2, r3
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb9c:	0d1b      	lsrs	r3, r3, #20
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eba8:	0c1b      	lsrs	r3, r3, #16
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	f003 030f 	and.w	r3, r3, #15
 800ebb0:	b2da      	uxtb	r2, r3
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebba:	0bdb      	lsrs	r3, r3, #15
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	f003 0301 	and.w	r3, r3, #1
 800ebc2:	b2da      	uxtb	r2, r3
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebcc:	0b9b      	lsrs	r3, r3, #14
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	f003 0301 	and.w	r3, r3, #1
 800ebd4:	b2da      	uxtb	r2, r3
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebde:	0b5b      	lsrs	r3, r3, #13
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	f003 0301 	and.w	r3, r3, #1
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebf0:	0b1b      	lsrs	r3, r3, #12
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	f003 0301 	and.w	r3, r3, #1
 800ebf8:	b2da      	uxtb	r2, r3
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	2200      	movs	r2, #0
 800ec02:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d163      	bne.n	800ecd4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec10:	009a      	lsls	r2, r3, #2
 800ec12:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ec16:	4013      	ands	r3, r2
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ec1c:	0f92      	lsrs	r2, r2, #30
 800ec1e:	431a      	orrs	r2, r3
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec28:	0edb      	lsrs	r3, r3, #27
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	f003 0307 	and.w	r3, r3, #7
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec3a:	0e1b      	lsrs	r3, r3, #24
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	f003 0307 	and.w	r3, r3, #7
 800ec42:	b2da      	uxtb	r2, r3
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec4c:	0d5b      	lsrs	r3, r3, #21
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	f003 0307 	and.w	r3, r3, #7
 800ec54:	b2da      	uxtb	r2, r3
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec5e:	0c9b      	lsrs	r3, r3, #18
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	f003 0307 	and.w	r3, r3, #7
 800ec66:	b2da      	uxtb	r2, r3
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec70:	0bdb      	lsrs	r3, r3, #15
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	f003 0307 	and.w	r3, r3, #7
 800ec78:	b2da      	uxtb	r2, r3
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	691b      	ldr	r3, [r3, #16]
 800ec82:	1c5a      	adds	r2, r3, #1
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	7e1b      	ldrb	r3, [r3, #24]
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	f003 0307 	and.w	r3, r3, #7
 800ec92:	3302      	adds	r3, #2
 800ec94:	2201      	movs	r2, #1
 800ec96:	fa02 f303 	lsl.w	r3, r2, r3
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ec9e:	fb02 f203 	mul.w	r2, r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	7a1b      	ldrb	r3, [r3, #8]
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	f003 030f 	and.w	r3, r3, #15
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	409a      	lsls	r2, r3
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ecc0:	0a52      	lsrs	r2, r2, #9
 800ecc2:	fb02 f203 	mul.w	r2, r2, r3
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecd0:	661a      	str	r2, [r3, #96]	; 0x60
 800ecd2:	e031      	b.n	800ed38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d11d      	bne.n	800ed18 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ece0:	041b      	lsls	r3, r3, #16
 800ece2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecea:	0c1b      	lsrs	r3, r3, #16
 800ecec:	431a      	orrs	r2, r3
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	691b      	ldr	r3, [r3, #16]
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	029a      	lsls	r2, r3, #10
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed0c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	661a      	str	r2, [r3, #96]	; 0x60
 800ed16:	e00f      	b.n	800ed38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a58      	ldr	r2, [pc, #352]	; (800ee80 <HAL_SD_GetCardCSD+0x344>)
 800ed1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ed34:	2301      	movs	r3, #1
 800ed36:	e09d      	b.n	800ee74 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed3c:	0b9b      	lsrs	r3, r3, #14
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	f003 0301 	and.w	r3, r3, #1
 800ed44:	b2da      	uxtb	r2, r3
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed4e:	09db      	lsrs	r3, r3, #7
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed56:	b2da      	uxtb	r2, r3
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed66:	b2da      	uxtb	r2, r3
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed70:	0fdb      	lsrs	r3, r3, #31
 800ed72:	b2da      	uxtb	r2, r3
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed7c:	0f5b      	lsrs	r3, r3, #29
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	f003 0303 	and.w	r3, r3, #3
 800ed84:	b2da      	uxtb	r2, r3
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed8e:	0e9b      	lsrs	r3, r3, #26
 800ed90:	b2db      	uxtb	r3, r3
 800ed92:	f003 0307 	and.w	r3, r3, #7
 800ed96:	b2da      	uxtb	r2, r3
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eda0:	0d9b      	lsrs	r3, r3, #22
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	f003 030f 	and.w	r3, r3, #15
 800eda8:	b2da      	uxtb	r2, r3
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edb2:	0d5b      	lsrs	r3, r3, #21
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	f003 0301 	and.w	r3, r3, #1
 800edba:	b2da      	uxtb	r2, r3
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edce:	0c1b      	lsrs	r3, r3, #16
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	f003 0301 	and.w	r3, r3, #1
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ede2:	0bdb      	lsrs	r3, r3, #15
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	f003 0301 	and.w	r3, r3, #1
 800edea:	b2da      	uxtb	r2, r3
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edf6:	0b9b      	lsrs	r3, r3, #14
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	f003 0301 	and.w	r3, r3, #1
 800edfe:	b2da      	uxtb	r2, r3
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee0a:	0b5b      	lsrs	r3, r3, #13
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	f003 0301 	and.w	r3, r3, #1
 800ee12:	b2da      	uxtb	r2, r3
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee1e:	0b1b      	lsrs	r3, r3, #12
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	f003 0301 	and.w	r3, r3, #1
 800ee26:	b2da      	uxtb	r2, r3
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee32:	0a9b      	lsrs	r3, r3, #10
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	f003 0303 	and.w	r3, r3, #3
 800ee3a:	b2da      	uxtb	r2, r3
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee46:	0a1b      	lsrs	r3, r3, #8
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	f003 0303 	and.w	r3, r3, #3
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee5a:	085b      	lsrs	r3, r3, #1
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee62:	b2da      	uxtb	r2, r3
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ee72:	2300      	movs	r3, #0
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr
 800ee80:	004005ff 	.word	0x004005ff

0800ee84 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	370c      	adds	r7, #12
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800eedc:	b5b0      	push	{r4, r5, r7, lr}
 800eede:	b08e      	sub	sp, #56	; 0x38
 800eee0:	af04      	add	r7, sp, #16
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2203      	movs	r2, #3
 800eeea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eef2:	2b03      	cmp	r3, #3
 800eef4:	d02e      	beq.n	800ef54 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eefc:	d106      	bne.n	800ef0c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef02:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	639a      	str	r2, [r3, #56]	; 0x38
 800ef0a:	e029      	b.n	800ef60 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef12:	d10a      	bne.n	800ef2a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 fb0f 	bl	800f538 <SD_WideBus_Enable>
 800ef1a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef22:	431a      	orrs	r2, r3
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	639a      	str	r2, [r3, #56]	; 0x38
 800ef28:	e01a      	b.n	800ef60 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d10a      	bne.n	800ef46 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 fb4c 	bl	800f5ce <SD_WideBus_Disable>
 800ef36:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3e:	431a      	orrs	r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	639a      	str	r2, [r3, #56]	; 0x38
 800ef44:	e00c      	b.n	800ef60 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	639a      	str	r2, [r3, #56]	; 0x38
 800ef52:	e005      	b.n	800ef60 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d009      	beq.n	800ef7c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a18      	ldr	r2, [pc, #96]	; (800efd0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800ef6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2201      	movs	r2, #1
 800ef74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	e024      	b.n	800efc6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	689b      	ldr	r3, [r3, #8]
 800ef86:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	695b      	ldr	r3, [r3, #20]
 800ef96:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	699b      	ldr	r3, [r3, #24]
 800ef9c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681d      	ldr	r5, [r3, #0]
 800efa2:	466c      	mov	r4, sp
 800efa4:	f107 0318 	add.w	r3, r7, #24
 800efa8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800efac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800efb0:	f107 030c 	add.w	r3, r7, #12
 800efb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800efb6:	4628      	mov	r0, r5
 800efb8:	f002 fd74 	bl	8011aa4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2201      	movs	r2, #1
 800efc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800efc4:	2300      	movs	r3, #0
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3728      	adds	r7, #40	; 0x28
 800efca:	46bd      	mov	sp, r7
 800efcc:	bdb0      	pop	{r4, r5, r7, pc}
 800efce:	bf00      	nop
 800efd0:	004005ff 	.word	0x004005ff

0800efd4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b086      	sub	sp, #24
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800efdc:	2300      	movs	r3, #0
 800efde:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800efe0:	f107 030c 	add.w	r3, r7, #12
 800efe4:	4619      	mov	r1, r3
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 fa7e 	bl	800f4e8 <SD_SendStatus>
 800efec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d005      	beq.n	800f000 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	431a      	orrs	r2, r3
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	0a5b      	lsrs	r3, r3, #9
 800f004:	f003 030f 	and.w	r3, r3, #15
 800f008:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f00a:	693b      	ldr	r3, [r7, #16]
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3718      	adds	r7, #24
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f014:	b480      	push	{r7}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f020:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f030:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f032:	bf00      	nop
 800f034:	3714      	adds	r7, #20
 800f036:	46bd      	mov	sp, r7
 800f038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03c:	4770      	bx	lr

0800f03e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f03e:	b580      	push	{r7, lr}
 800f040:	b084      	sub	sp, #16
 800f042:	af00      	add	r7, sp, #0
 800f044:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f04a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f050:	2b82      	cmp	r3, #130	; 0x82
 800f052:	d111      	bne.n	800f078 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4618      	mov	r0, r3
 800f05a:	f002 fea9 	bl	8011db0 <SDMMC_CmdStopTransfer>
 800f05e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d008      	beq.n	800f078 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	431a      	orrs	r2, r3
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800f072:	68f8      	ldr	r0, [r7, #12]
 800f074:	f7ff fd58 	bl	800eb28 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f022 0208 	bic.w	r2, r2, #8
 800f086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f240 523a 	movw	r2, #1338	; 0x53a
 800f090:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2201      	movs	r2, #1
 800f096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2200      	movs	r2, #0
 800f09e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	f003 fdb7 	bl	8012c14 <HAL_SD_RxCpltCallback>
#endif
}
 800f0a6:	bf00      	nop
 800f0a8:	3710      	adds	r7, #16
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
	...

0800f0b0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0bc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7fb f97e 	bl	800a3c0 <HAL_DMA_GetError>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b02      	cmp	r3, #2
 800f0c8:	d03e      	beq.n	800f148 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d002      	beq.n	800f0e6 <SD_DMAError+0x36>
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2b01      	cmp	r3, #1
 800f0e4:	d12d      	bne.n	800f142 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4a19      	ldr	r2, [pc, #100]	; (800f150 <SD_DMAError+0xa0>)
 800f0ec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800f0fc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f102:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800f10a:	6978      	ldr	r0, [r7, #20]
 800f10c:	f7ff ff62 	bl	800efd4 <HAL_SD_GetCardState>
 800f110:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	2b06      	cmp	r3, #6
 800f116:	d002      	beq.n	800f11e <SD_DMAError+0x6e>
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	2b05      	cmp	r3, #5
 800f11c:	d10a      	bne.n	800f134 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	4618      	mov	r0, r3
 800f124:	f002 fe44 	bl	8011db0 <SDMMC_CmdStopTransfer>
 800f128:	4602      	mov	r2, r0
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f12e:	431a      	orrs	r2, r3
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	2201      	movs	r2, #1
 800f138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	2200      	movs	r2, #0
 800f140:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800f142:	6978      	ldr	r0, [r7, #20]
 800f144:	f7ff fcf0 	bl	800eb28 <HAL_SD_ErrorCallback>
#endif
  }
}
 800f148:	bf00      	nop
 800f14a:	3718      	adds	r7, #24
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}
 800f150:	004005ff 	.word	0x004005ff

0800f154 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f160:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f240 523a 	movw	r2, #1338	; 0x53a
 800f16a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	f7ff ff31 	bl	800efd4 <HAL_SD_GetCardState>
 800f172:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2201      	movs	r2, #1
 800f178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2200      	movs	r2, #0
 800f180:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	2b06      	cmp	r3, #6
 800f186:	d002      	beq.n	800f18e <SD_DMATxAbort+0x3a>
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	2b05      	cmp	r3, #5
 800f18c:	d10a      	bne.n	800f1a4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	4618      	mov	r0, r3
 800f194:	f002 fe0c 	bl	8011db0 <SDMMC_CmdStopTransfer>
 800f198:	4602      	mov	r2, r0
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f19e:	431a      	orrs	r2, r3
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d103      	bne.n	800f1b4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f1ac:	68f8      	ldr	r0, [r7, #12]
 800f1ae:	f003 fd1d 	bl	8012bec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f1b2:	e002      	b.n	800f1ba <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f1b4:	68f8      	ldr	r0, [r7, #12]
 800f1b6:	f7ff fcb7 	bl	800eb28 <HAL_SD_ErrorCallback>
}
 800f1ba:	bf00      	nop
 800f1bc:	3710      	adds	r7, #16
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800f1c2:	b580      	push	{r7, lr}
 800f1c4:	b084      	sub	sp, #16
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ce:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f240 523a 	movw	r2, #1338	; 0x53a
 800f1d8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f7ff fefa 	bl	800efd4 <HAL_SD_GetCardState>
 800f1e0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	2b06      	cmp	r3, #6
 800f1f4:	d002      	beq.n	800f1fc <SD_DMARxAbort+0x3a>
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	2b05      	cmp	r3, #5
 800f1fa:	d10a      	bne.n	800f212 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	4618      	mov	r0, r3
 800f202:	f002 fdd5 	bl	8011db0 <SDMMC_CmdStopTransfer>
 800f206:	4602      	mov	r2, r0
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f20c:	431a      	orrs	r2, r3
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f216:	2b00      	cmp	r3, #0
 800f218:	d103      	bne.n	800f222 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f003 fce6 	bl	8012bec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f220:	e002      	b.n	800f228 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f222:	68f8      	ldr	r0, [r7, #12]
 800f224:	f7ff fc80 	bl	800eb28 <HAL_SD_ErrorCallback>
}
 800f228:	bf00      	nop
 800f22a:	3710      	adds	r7, #16
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f230:	b5b0      	push	{r4, r5, r7, lr}
 800f232:	b094      	sub	sp, #80	; 0x50
 800f234:	af04      	add	r7, sp, #16
 800f236:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800f238:	2301      	movs	r3, #1
 800f23a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4618      	mov	r0, r3
 800f242:	f002 fc87 	bl	8011b54 <SDIO_GetPowerState>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d102      	bne.n	800f252 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f24c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f250:	e0b7      	b.n	800f3c2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f256:	2b03      	cmp	r3, #3
 800f258:	d02f      	beq.n	800f2ba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4618      	mov	r0, r3
 800f260:	f002 feb0 	bl	8011fc4 <SDMMC_CmdSendCID>
 800f264:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d001      	beq.n	800f270 <SD_InitCard+0x40>
    {
      return errorstate;
 800f26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f26e:	e0a8      	b.n	800f3c2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2100      	movs	r1, #0
 800f276:	4618      	mov	r0, r3
 800f278:	f002 fcb1 	bl	8011bde <SDIO_GetResponse>
 800f27c:	4602      	mov	r2, r0
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2104      	movs	r1, #4
 800f288:	4618      	mov	r0, r3
 800f28a:	f002 fca8 	bl	8011bde <SDIO_GetResponse>
 800f28e:	4602      	mov	r2, r0
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2108      	movs	r1, #8
 800f29a:	4618      	mov	r0, r3
 800f29c:	f002 fc9f 	bl	8011bde <SDIO_GetResponse>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	210c      	movs	r1, #12
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f002 fc96 	bl	8011bde <SDIO_GetResponse>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2be:	2b03      	cmp	r3, #3
 800f2c0:	d00d      	beq.n	800f2de <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f107 020e 	add.w	r2, r7, #14
 800f2ca:	4611      	mov	r1, r2
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f002 feb6 	bl	801203e <SDMMC_CmdSetRelAdd>
 800f2d2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d001      	beq.n	800f2de <SD_InitCard+0xae>
    {
      return errorstate;
 800f2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2dc:	e071      	b.n	800f3c2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2e2:	2b03      	cmp	r3, #3
 800f2e4:	d036      	beq.n	800f354 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f2e6:	89fb      	ldrh	r3, [r7, #14]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681a      	ldr	r2, [r3, #0]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2f6:	041b      	lsls	r3, r3, #16
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	4610      	mov	r0, r2
 800f2fc:	f002 fe80 	bl	8012000 <SDMMC_CmdSendCSD>
 800f300:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f304:	2b00      	cmp	r3, #0
 800f306:	d001      	beq.n	800f30c <SD_InitCard+0xdc>
    {
      return errorstate;
 800f308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f30a:	e05a      	b.n	800f3c2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2100      	movs	r1, #0
 800f312:	4618      	mov	r0, r3
 800f314:	f002 fc63 	bl	8011bde <SDIO_GetResponse>
 800f318:	4602      	mov	r2, r0
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2104      	movs	r1, #4
 800f324:	4618      	mov	r0, r3
 800f326:	f002 fc5a 	bl	8011bde <SDIO_GetResponse>
 800f32a:	4602      	mov	r2, r0
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	2108      	movs	r1, #8
 800f336:	4618      	mov	r0, r3
 800f338:	f002 fc51 	bl	8011bde <SDIO_GetResponse>
 800f33c:	4602      	mov	r2, r0
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	210c      	movs	r1, #12
 800f348:	4618      	mov	r0, r3
 800f34a:	f002 fc48 	bl	8011bde <SDIO_GetResponse>
 800f34e:	4602      	mov	r2, r0
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2104      	movs	r1, #4
 800f35a:	4618      	mov	r0, r3
 800f35c:	f002 fc3f 	bl	8011bde <SDIO_GetResponse>
 800f360:	4603      	mov	r3, r0
 800f362:	0d1a      	lsrs	r2, r3, #20
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f368:	f107 0310 	add.w	r3, r7, #16
 800f36c:	4619      	mov	r1, r3
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff fbe4 	bl	800eb3c <HAL_SD_GetCardCSD>
 800f374:	4603      	mov	r3, r0
 800f376:	2b00      	cmp	r3, #0
 800f378:	d002      	beq.n	800f380 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f37a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f37e:	e020      	b.n	800f3c2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6819      	ldr	r1, [r3, #0]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f388:	041b      	lsls	r3, r3, #16
 800f38a:	f04f 0400 	mov.w	r4, #0
 800f38e:	461a      	mov	r2, r3
 800f390:	4623      	mov	r3, r4
 800f392:	4608      	mov	r0, r1
 800f394:	f002 fd2e 	bl	8011df4 <SDMMC_CmdSelDesel>
 800f398:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d001      	beq.n	800f3a4 <SD_InitCard+0x174>
  {
    return errorstate;
 800f3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3a2:	e00e      	b.n	800f3c2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681d      	ldr	r5, [r3, #0]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	466c      	mov	r4, sp
 800f3ac:	f103 0210 	add.w	r2, r3, #16
 800f3b0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f3b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f3b6:	3304      	adds	r3, #4
 800f3b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	f002 fb72 	bl	8011aa4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3740      	adds	r7, #64	; 0x40
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f3cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b086      	sub	sp, #24
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	617b      	str	r3, [r7, #20]
 800f3dc:	2300      	movs	r3, #0
 800f3de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f002 fd28 	bl	8011e3a <SDMMC_CmdGoIdleState>
 800f3ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d001      	beq.n	800f3f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	e072      	b.n	800f4dc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f002 fd3b 	bl	8011e76 <SDMMC_CmdOperCond>
 800f400:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d00d      	beq.n	800f424 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4618      	mov	r0, r3
 800f414:	f002 fd11 	bl	8011e3a <SDMMC_CmdGoIdleState>
 800f418:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d004      	beq.n	800f42a <SD_PowerON+0x5e>
    {
      return errorstate;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	e05b      	b.n	800f4dc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2201      	movs	r2, #1
 800f428:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d137      	bne.n	800f4a2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2100      	movs	r1, #0
 800f438:	4618      	mov	r0, r3
 800f43a:	f002 fd3b 	bl	8011eb4 <SDMMC_CmdAppCommand>
 800f43e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d02d      	beq.n	800f4a2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f446:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f44a:	e047      	b.n	800f4dc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2100      	movs	r1, #0
 800f452:	4618      	mov	r0, r3
 800f454:	f002 fd2e 	bl	8011eb4 <SDMMC_CmdAppCommand>
 800f458:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d001      	beq.n	800f464 <SD_PowerON+0x98>
    {
      return errorstate;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	e03b      	b.n	800f4dc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	491e      	ldr	r1, [pc, #120]	; (800f4e4 <SD_PowerON+0x118>)
 800f46a:	4618      	mov	r0, r3
 800f46c:	f002 fd44 	bl	8011ef8 <SDMMC_CmdAppOperCommand>
 800f470:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d002      	beq.n	800f47e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f478:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f47c:	e02e      	b.n	800f4dc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	2100      	movs	r1, #0
 800f484:	4618      	mov	r0, r3
 800f486:	f002 fbaa 	bl	8011bde <SDIO_GetResponse>
 800f48a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	0fdb      	lsrs	r3, r3, #31
 800f490:	2b01      	cmp	r3, #1
 800f492:	d101      	bne.n	800f498 <SD_PowerON+0xcc>
 800f494:	2301      	movs	r3, #1
 800f496:	e000      	b.n	800f49a <SD_PowerON+0xce>
 800f498:	2300      	movs	r3, #0
 800f49a:	613b      	str	r3, [r7, #16]

    count++;
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d802      	bhi.n	800f4b2 <SD_PowerON+0xe6>
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d0cc      	beq.n	800f44c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d902      	bls.n	800f4c2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f4bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f4c0:	e00c      	b.n	800f4dc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d003      	beq.n	800f4d4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	645a      	str	r2, [r3, #68]	; 0x44
 800f4d2:	e002      	b.n	800f4da <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800f4da:	2300      	movs	r3, #0
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3718      	adds	r7, #24
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	c1100000 	.word	0xc1100000

0800f4e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d102      	bne.n	800f4fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f4f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f4fc:	e018      	b.n	800f530 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f506:	041b      	lsls	r3, r3, #16
 800f508:	4619      	mov	r1, r3
 800f50a:	4610      	mov	r0, r2
 800f50c:	f002 fdb8 	bl	8012080 <SDMMC_CmdSendStatus>
 800f510:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d001      	beq.n	800f51c <SD_SendStatus+0x34>
  {
    return errorstate;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	e009      	b.n	800f530 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2100      	movs	r1, #0
 800f522:	4618      	mov	r0, r3
 800f524:	f002 fb5b 	bl	8011bde <SDIO_GetResponse>
 800f528:	4602      	mov	r2, r0
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f52e:	2300      	movs	r3, #0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3710      	adds	r7, #16
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b086      	sub	sp, #24
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f540:	2300      	movs	r3, #0
 800f542:	60fb      	str	r3, [r7, #12]
 800f544:	2300      	movs	r3, #0
 800f546:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	2100      	movs	r1, #0
 800f54e:	4618      	mov	r0, r3
 800f550:	f002 fb45 	bl	8011bde <SDIO_GetResponse>
 800f554:	4603      	mov	r3, r0
 800f556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f55a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f55e:	d102      	bne.n	800f566 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f564:	e02f      	b.n	800f5c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f566:	f107 030c 	add.w	r3, r7, #12
 800f56a:	4619      	mov	r1, r3
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 f879 	bl	800f664 <SD_FindSCR>
 800f572:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d001      	beq.n	800f57e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	e023      	b.n	800f5c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f584:	2b00      	cmp	r3, #0
 800f586:	d01c      	beq.n	800f5c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681a      	ldr	r2, [r3, #0]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f590:	041b      	lsls	r3, r3, #16
 800f592:	4619      	mov	r1, r3
 800f594:	4610      	mov	r0, r2
 800f596:	f002 fc8d 	bl	8011eb4 <SDMMC_CmdAppCommand>
 800f59a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d001      	beq.n	800f5a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	e00f      	b.n	800f5c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2102      	movs	r1, #2
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f002 fcc6 	bl	8011f3e <SDMMC_CmdBusWidth>
 800f5b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d001      	beq.n	800f5be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	e003      	b.n	800f5c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	e001      	b.n	800f5c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f5c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3718      	adds	r7, #24
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}

0800f5ce <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f5ce:	b580      	push	{r7, lr}
 800f5d0:	b086      	sub	sp, #24
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	60fb      	str	r3, [r7, #12]
 800f5da:	2300      	movs	r3, #0
 800f5dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f002 fafa 	bl	8011bde <SDIO_GetResponse>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f5f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f5f4:	d102      	bne.n	800f5fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f5f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f5fa:	e02f      	b.n	800f65c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f5fc:	f107 030c 	add.w	r3, r7, #12
 800f600:	4619      	mov	r1, r3
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f000 f82e 	bl	800f664 <SD_FindSCR>
 800f608:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d001      	beq.n	800f614 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	e023      	b.n	800f65c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d01c      	beq.n	800f658 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f626:	041b      	lsls	r3, r3, #16
 800f628:	4619      	mov	r1, r3
 800f62a:	4610      	mov	r0, r2
 800f62c:	f002 fc42 	bl	8011eb4 <SDMMC_CmdAppCommand>
 800f630:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d001      	beq.n	800f63c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	e00f      	b.n	800f65c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2100      	movs	r1, #0
 800f642:	4618      	mov	r0, r3
 800f644:	f002 fc7b 	bl	8011f3e <SDMMC_CmdBusWidth>
 800f648:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d001      	beq.n	800f654 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	e003      	b.n	800f65c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f654:	2300      	movs	r3, #0
 800f656:	e001      	b.n	800f65c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f658:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3718      	adds	r7, #24
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f664:	b590      	push	{r4, r7, lr}
 800f666:	b08f      	sub	sp, #60	; 0x3c
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f66e:	f7fa fad7 	bl	8009c20 <HAL_GetTick>
 800f672:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f674:	2300      	movs	r3, #0
 800f676:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800f678:	2300      	movs	r3, #0
 800f67a:	60bb      	str	r3, [r7, #8]
 800f67c:	2300      	movs	r3, #0
 800f67e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2108      	movs	r1, #8
 800f68a:	4618      	mov	r0, r3
 800f68c:	f002 fae6 	bl	8011c5c <SDMMC_CmdBlockLength>
 800f690:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f694:	2b00      	cmp	r3, #0
 800f696:	d001      	beq.n	800f69c <SD_FindSCR+0x38>
  {
    return errorstate;
 800f698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69a:	e0a9      	b.n	800f7f0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6a4:	041b      	lsls	r3, r3, #16
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	4610      	mov	r0, r2
 800f6aa:	f002 fc03 	bl	8011eb4 <SDMMC_CmdAppCommand>
 800f6ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d001      	beq.n	800f6ba <SD_FindSCR+0x56>
  {
    return errorstate;
 800f6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b8:	e09a      	b.n	800f7f0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f6be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f6c0:	2308      	movs	r3, #8
 800f6c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800f6c4:	2330      	movs	r3, #48	; 0x30
 800f6c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800f6c8:	2302      	movs	r3, #2
 800f6ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f107 0210 	add.w	r2, r7, #16
 800f6dc:	4611      	mov	r1, r2
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f002 fa90 	bl	8011c04 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f002 fc4a 	bl	8011f82 <SDMMC_CmdSendSCR>
 800f6ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d022      	beq.n	800f73c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800f6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f8:	e07a      	b.n	800f7f0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00e      	beq.n	800f726 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6819      	ldr	r1, [r3, #0]
 800f70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	f107 0208 	add.w	r2, r7, #8
 800f714:	18d4      	adds	r4, r2, r3
 800f716:	4608      	mov	r0, r1
 800f718:	f002 f9ef 	bl	8011afa <SDIO_ReadFIFO>
 800f71c:	4603      	mov	r3, r0
 800f71e:	6023      	str	r3, [r4, #0]
      index++;
 800f720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f722:	3301      	adds	r3, #1
 800f724:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f726:	f7fa fa7b 	bl	8009c20 <HAL_GetTick>
 800f72a:	4602      	mov	r2, r0
 800f72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72e:	1ad3      	subs	r3, r2, r3
 800f730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f734:	d102      	bne.n	800f73c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f736:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f73a:	e059      	b.n	800f7f0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f742:	f240 432a 	movw	r3, #1066	; 0x42a
 800f746:	4013      	ands	r3, r2
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d0d6      	beq.n	800f6fa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f752:	f003 0308 	and.w	r3, r3, #8
 800f756:	2b00      	cmp	r3, #0
 800f758:	d005      	beq.n	800f766 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2208      	movs	r2, #8
 800f760:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f762:	2308      	movs	r3, #8
 800f764:	e044      	b.n	800f7f0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f76c:	f003 0302 	and.w	r3, r3, #2
 800f770:	2b00      	cmp	r3, #0
 800f772:	d005      	beq.n	800f780 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2202      	movs	r2, #2
 800f77a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f77c:	2302      	movs	r3, #2
 800f77e:	e037      	b.n	800f7f0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f786:	f003 0320 	and.w	r3, r3, #32
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d005      	beq.n	800f79a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	2220      	movs	r2, #32
 800f794:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f796:	2320      	movs	r3, #32
 800f798:	e02a      	b.n	800f7f0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f240 523a 	movw	r2, #1338	; 0x53a
 800f7a2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	061a      	lsls	r2, r3, #24
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	021b      	lsls	r3, r3, #8
 800f7ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f7b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	0a1b      	lsrs	r3, r3, #8
 800f7b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f7ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	0e1b      	lsrs	r3, r3, #24
 800f7c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c4:	601a      	str	r2, [r3, #0]
    scr++;
 800f7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c8:	3304      	adds	r3, #4
 800f7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	061a      	lsls	r2, r3, #24
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	021b      	lsls	r3, r3, #8
 800f7d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f7d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	0a1b      	lsrs	r3, r3, #8
 800f7de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f7e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	0e1b      	lsrs	r3, r3, #24
 800f7e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f7ee:	2300      	movs	r3, #0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	373c      	adds	r7, #60	; 0x3c
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd90      	pop	{r4, r7, pc}

0800f7f8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b086      	sub	sp, #24
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f804:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f80a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d03f      	beq.n	800f892 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800f812:	2300      	movs	r3, #0
 800f814:	617b      	str	r3, [r7, #20]
 800f816:	e033      	b.n	800f880 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4618      	mov	r0, r3
 800f81e:	f002 f96c 	bl	8011afa <SDIO_ReadFIFO>
 800f822:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	b2da      	uxtb	r2, r3
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	3301      	adds	r3, #1
 800f830:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	3b01      	subs	r3, #1
 800f836:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	0a1b      	lsrs	r3, r3, #8
 800f83c:	b2da      	uxtb	r2, r3
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	3301      	adds	r3, #1
 800f846:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	3b01      	subs	r3, #1
 800f84c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	0c1b      	lsrs	r3, r3, #16
 800f852:	b2da      	uxtb	r2, r3
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	3301      	adds	r3, #1
 800f85c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	3b01      	subs	r3, #1
 800f862:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	0e1b      	lsrs	r3, r3, #24
 800f868:	b2da      	uxtb	r2, r3
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	3301      	adds	r3, #1
 800f872:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	3b01      	subs	r3, #1
 800f878:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	3301      	adds	r3, #1
 800f87e:	617b      	str	r3, [r7, #20]
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	2b07      	cmp	r3, #7
 800f884:	d9c8      	bls.n	800f818 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	693a      	ldr	r2, [r7, #16]
 800f890:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800f892:	bf00      	nop
 800f894:	3718      	adds	r7, #24
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b086      	sub	sp, #24
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6a1b      	ldr	r3, [r3, #32]
 800f8a6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ac:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d043      	beq.n	800f93c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	617b      	str	r3, [r7, #20]
 800f8b8:	e037      	b.n	800f92a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	3b01      	subs	r3, #1
 800f8ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	021a      	lsls	r2, r3, #8
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	3b01      	subs	r3, #1
 800f8e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	041a      	lsls	r2, r3, #16
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	061a      	lsls	r2, r3, #24
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	4313      	orrs	r3, r2
 800f906:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	3301      	adds	r3, #1
 800f90c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	3b01      	subs	r3, #1
 800f912:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f107 0208 	add.w	r2, r7, #8
 800f91c:	4611      	mov	r1, r2
 800f91e:	4618      	mov	r0, r3
 800f920:	f002 f8f8 	bl	8011b14 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	3301      	adds	r3, #1
 800f928:	617b      	str	r3, [r7, #20]
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	2b07      	cmp	r3, #7
 800f92e:	d9c4      	bls.n	800f8ba <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	693a      	ldr	r2, [r7, #16]
 800f93a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800f93c:	bf00      	nop
 800f93e:	3718      	adds	r7, #24
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d101      	bne.n	800f956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f952:	2301      	movs	r3, #1
 800f954:	e056      	b.n	800fa04 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2200      	movs	r2, #0
 800f95a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f962:	b2db      	uxtb	r3, r3
 800f964:	2b00      	cmp	r3, #0
 800f966:	d106      	bne.n	800f976 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7f8 fd27 	bl	80083c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2202      	movs	r2, #2
 800f97a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f98c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	685a      	ldr	r2, [r3, #4]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	689b      	ldr	r3, [r3, #8]
 800f996:	431a      	orrs	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	68db      	ldr	r3, [r3, #12]
 800f99c:	431a      	orrs	r2, r3
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	691b      	ldr	r3, [r3, #16]
 800f9a2:	431a      	orrs	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	695b      	ldr	r3, [r3, #20]
 800f9a8:	431a      	orrs	r2, r3
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	699b      	ldr	r3, [r3, #24]
 800f9ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f9b2:	431a      	orrs	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	69db      	ldr	r3, [r3, #28]
 800f9b8:	431a      	orrs	r2, r3
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6a1b      	ldr	r3, [r3, #32]
 800f9be:	ea42 0103 	orr.w	r1, r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	430a      	orrs	r2, r1
 800f9cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	699b      	ldr	r3, [r3, #24]
 800f9d2:	0c1b      	lsrs	r3, r3, #16
 800f9d4:	f003 0104 	and.w	r1, r3, #4
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	430a      	orrs	r2, r1
 800f9e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	69da      	ldr	r2, [r3, #28]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f9f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2201      	movs	r2, #1
 800f9fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800fa02:	2300      	movs	r3, #0
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d101      	bne.n	800fa1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	e01d      	b.n	800fa5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d106      	bne.n	800fa38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f7f9 fb2c 	bl	8009090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2202      	movs	r2, #2
 800fa3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	3304      	adds	r3, #4
 800fa48:	4619      	mov	r1, r3
 800fa4a:	4610      	mov	r0, r2
 800fa4c:	f000 fc08 	bl	8010260 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2201      	movs	r2, #1
 800fa54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa58:	2300      	movs	r3, #0
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3708      	adds	r7, #8
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fa62:	b480      	push	{r7}
 800fa64:	b085      	sub	sp, #20
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	68da      	ldr	r2, [r3, #12]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f042 0201 	orr.w	r2, r2, #1
 800fa78:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	689b      	ldr	r3, [r3, #8]
 800fa80:	f003 0307 	and.w	r3, r3, #7
 800fa84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2b06      	cmp	r3, #6
 800fa8a:	d007      	beq.n	800fa9c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	681a      	ldr	r2, [r3, #0]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f042 0201 	orr.w	r2, r2, #1
 800fa9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fa9c:	2300      	movs	r3, #0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3714      	adds	r7, #20
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr

0800faaa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b082      	sub	sp, #8
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d101      	bne.n	800fabc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fab8:	2301      	movs	r3, #1
 800faba:	e01d      	b.n	800faf8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fac2:	b2db      	uxtb	r3, r3
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d106      	bne.n	800fad6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f7f9 fb6b 	bl	80091ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2202      	movs	r2, #2
 800fada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681a      	ldr	r2, [r3, #0]
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	3304      	adds	r3, #4
 800fae6:	4619      	mov	r1, r3
 800fae8:	4610      	mov	r0, r2
 800faea:	f000 fbb9 	bl	8010260 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2201      	movs	r2, #1
 800faf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d101      	bne.n	800fb12 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	e01d      	b.n	800fb4e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d106      	bne.n	800fb2c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2200      	movs	r2, #0
 800fb22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7f9 fb94 	bl	8009254 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2202      	movs	r2, #2
 800fb30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	3304      	adds	r3, #4
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	4610      	mov	r0, r2
 800fb40:	f000 fb8e 	bl	8010260 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fb4c:	2300      	movs	r3, #0
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3708      	adds	r7, #8
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}

0800fb56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fb56:	b580      	push	{r7, lr}
 800fb58:	b082      	sub	sp, #8
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	691b      	ldr	r3, [r3, #16]
 800fb64:	f003 0302 	and.w	r3, r3, #2
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	d122      	bne.n	800fbb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	68db      	ldr	r3, [r3, #12]
 800fb72:	f003 0302 	and.w	r3, r3, #2
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	d11b      	bne.n	800fbb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	f06f 0202 	mvn.w	r2, #2
 800fb82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2201      	movs	r2, #1
 800fb88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	699b      	ldr	r3, [r3, #24]
 800fb90:	f003 0303 	and.w	r3, r3, #3
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d003      	beq.n	800fba0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f7f7 f9e9 	bl	8006f70 <HAL_TIM_IC_CaptureCallback>
 800fb9e:	e005      	b.n	800fbac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f000 fb3f 	bl	8010224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f000 fb46 	bl	8010238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	691b      	ldr	r3, [r3, #16]
 800fbb8:	f003 0304 	and.w	r3, r3, #4
 800fbbc:	2b04      	cmp	r3, #4
 800fbbe:	d122      	bne.n	800fc06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	f003 0304 	and.w	r3, r3, #4
 800fbca:	2b04      	cmp	r3, #4
 800fbcc:	d11b      	bne.n	800fc06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f06f 0204 	mvn.w	r2, #4
 800fbd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2202      	movs	r2, #2
 800fbdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	699b      	ldr	r3, [r3, #24]
 800fbe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d003      	beq.n	800fbf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f7f7 f9bf 	bl	8006f70 <HAL_TIM_IC_CaptureCallback>
 800fbf2:	e005      	b.n	800fc00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 fb15 	bl	8010224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 fb1c 	bl	8010238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2200      	movs	r2, #0
 800fc04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	691b      	ldr	r3, [r3, #16]
 800fc0c:	f003 0308 	and.w	r3, r3, #8
 800fc10:	2b08      	cmp	r3, #8
 800fc12:	d122      	bne.n	800fc5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	68db      	ldr	r3, [r3, #12]
 800fc1a:	f003 0308 	and.w	r3, r3, #8
 800fc1e:	2b08      	cmp	r3, #8
 800fc20:	d11b      	bne.n	800fc5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	f06f 0208 	mvn.w	r2, #8
 800fc2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2204      	movs	r2, #4
 800fc30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	69db      	ldr	r3, [r3, #28]
 800fc38:	f003 0303 	and.w	r3, r3, #3
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d003      	beq.n	800fc48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f7f7 f995 	bl	8006f70 <HAL_TIM_IC_CaptureCallback>
 800fc46:	e005      	b.n	800fc54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f000 faeb 	bl	8010224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 faf2 	bl	8010238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2200      	movs	r2, #0
 800fc58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	691b      	ldr	r3, [r3, #16]
 800fc60:	f003 0310 	and.w	r3, r3, #16
 800fc64:	2b10      	cmp	r3, #16
 800fc66:	d122      	bne.n	800fcae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	f003 0310 	and.w	r3, r3, #16
 800fc72:	2b10      	cmp	r3, #16
 800fc74:	d11b      	bne.n	800fcae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f06f 0210 	mvn.w	r2, #16
 800fc7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2208      	movs	r2, #8
 800fc84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	69db      	ldr	r3, [r3, #28]
 800fc8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d003      	beq.n	800fc9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f7f7 f96b 	bl	8006f70 <HAL_TIM_IC_CaptureCallback>
 800fc9a:	e005      	b.n	800fca8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f000 fac1 	bl	8010224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 fac8 	bl	8010238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	691b      	ldr	r3, [r3, #16]
 800fcb4:	f003 0301 	and.w	r3, r3, #1
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d10e      	bne.n	800fcda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	f003 0301 	and.w	r3, r3, #1
 800fcc6:	2b01      	cmp	r3, #1
 800fcc8:	d107      	bne.n	800fcda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f06f 0201 	mvn.w	r2, #1
 800fcd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f7f8 fa07 	bl	80080e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	691b      	ldr	r3, [r3, #16]
 800fce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fce4:	2b80      	cmp	r3, #128	; 0x80
 800fce6:	d10e      	bne.n	800fd06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	68db      	ldr	r3, [r3, #12]
 800fcee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcf2:	2b80      	cmp	r3, #128	; 0x80
 800fcf4:	d107      	bne.n	800fd06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fcfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 ff99 	bl	8010c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	691b      	ldr	r3, [r3, #16]
 800fd0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd10:	2b40      	cmp	r3, #64	; 0x40
 800fd12:	d10e      	bne.n	800fd32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd1e:	2b40      	cmp	r3, #64	; 0x40
 800fd20:	d107      	bne.n	800fd32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fd2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 fa8d 	bl	801024c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	691b      	ldr	r3, [r3, #16]
 800fd38:	f003 0320 	and.w	r3, r3, #32
 800fd3c:	2b20      	cmp	r3, #32
 800fd3e:	d10e      	bne.n	800fd5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	f003 0320 	and.w	r3, r3, #32
 800fd4a:	2b20      	cmp	r3, #32
 800fd4c:	d107      	bne.n	800fd5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f06f 0220 	mvn.w	r2, #32
 800fd56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f000 ff63 	bl	8010c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fd5e:	bf00      	nop
 800fd60:	3708      	adds	r7, #8
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}

0800fd66 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800fd66:	b580      	push	{r7, lr}
 800fd68:	b084      	sub	sp, #16
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	60f8      	str	r0, [r7, #12]
 800fd6e:	60b9      	str	r1, [r7, #8]
 800fd70:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d101      	bne.n	800fd80 <HAL_TIM_IC_ConfigChannel+0x1a>
 800fd7c:	2302      	movs	r3, #2
 800fd7e:	e08a      	b.n	800fe96 <HAL_TIM_IC_ConfigChannel+0x130>
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2201      	movs	r2, #1
 800fd84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	2202      	movs	r2, #2
 800fd8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d11b      	bne.n	800fdce <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	6818      	ldr	r0, [r3, #0]
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	6819      	ldr	r1, [r3, #0]
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	685a      	ldr	r2, [r3, #4]
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	f000 fcab 	bl	8010700 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	699a      	ldr	r2, [r3, #24]
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f022 020c 	bic.w	r2, r2, #12
 800fdb8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	6999      	ldr	r1, [r3, #24]
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	689a      	ldr	r2, [r3, #8]
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	430a      	orrs	r2, r1
 800fdca:	619a      	str	r2, [r3, #24]
 800fdcc:	e05a      	b.n	800fe84 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2b04      	cmp	r3, #4
 800fdd2:	d11c      	bne.n	800fe0e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	6818      	ldr	r0, [r3, #0]
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	6819      	ldr	r1, [r3, #0]
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	685a      	ldr	r2, [r3, #4]
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	f000 fd2f 	bl	8010846 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	699a      	ldr	r2, [r3, #24]
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fdf6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	6999      	ldr	r1, [r3, #24]
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	021a      	lsls	r2, r3, #8
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	430a      	orrs	r2, r1
 800fe0a:	619a      	str	r2, [r3, #24]
 800fe0c:	e03a      	b.n	800fe84 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2b08      	cmp	r3, #8
 800fe12:	d11b      	bne.n	800fe4c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	6818      	ldr	r0, [r3, #0]
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	6819      	ldr	r1, [r3, #0]
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	685a      	ldr	r2, [r3, #4]
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	68db      	ldr	r3, [r3, #12]
 800fe24:	f000 fd7c 	bl	8010920 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	69da      	ldr	r2, [r3, #28]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	f022 020c 	bic.w	r2, r2, #12
 800fe36:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	69d9      	ldr	r1, [r3, #28]
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	689a      	ldr	r2, [r3, #8]
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	430a      	orrs	r2, r1
 800fe48:	61da      	str	r2, [r3, #28]
 800fe4a:	e01b      	b.n	800fe84 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6818      	ldr	r0, [r3, #0]
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	6819      	ldr	r1, [r3, #0]
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	685a      	ldr	r2, [r3, #4]
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	f000 fd9c 	bl	8010998 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	69da      	ldr	r2, [r3, #28]
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fe6e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	69d9      	ldr	r1, [r3, #28]
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	689b      	ldr	r3, [r3, #8]
 800fe7a:	021a      	lsls	r2, r3, #8
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	430a      	orrs	r2, r1
 800fe82:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2201      	movs	r2, #1
 800fe88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe94:	2300      	movs	r3, #0
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3710      	adds	r7, #16
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
	...

0800fea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b084      	sub	sp, #16
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d101      	bne.n	800feba <HAL_TIM_PWM_ConfigChannel+0x1a>
 800feb6:	2302      	movs	r3, #2
 800feb8:	e0b4      	b.n	8010024 <HAL_TIM_PWM_ConfigChannel+0x184>
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2201      	movs	r2, #1
 800febe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2202      	movs	r2, #2
 800fec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2b0c      	cmp	r3, #12
 800fece:	f200 809f 	bhi.w	8010010 <HAL_TIM_PWM_ConfigChannel+0x170>
 800fed2:	a201      	add	r2, pc, #4	; (adr r2, 800fed8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800fed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed8:	0800ff0d 	.word	0x0800ff0d
 800fedc:	08010011 	.word	0x08010011
 800fee0:	08010011 	.word	0x08010011
 800fee4:	08010011 	.word	0x08010011
 800fee8:	0800ff4d 	.word	0x0800ff4d
 800feec:	08010011 	.word	0x08010011
 800fef0:	08010011 	.word	0x08010011
 800fef4:	08010011 	.word	0x08010011
 800fef8:	0800ff8f 	.word	0x0800ff8f
 800fefc:	08010011 	.word	0x08010011
 800ff00:	08010011 	.word	0x08010011
 800ff04:	08010011 	.word	0x08010011
 800ff08:	0800ffcf 	.word	0x0800ffcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	68b9      	ldr	r1, [r7, #8]
 800ff12:	4618      	mov	r0, r3
 800ff14:	f000 fa44 	bl	80103a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	699a      	ldr	r2, [r3, #24]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	f042 0208 	orr.w	r2, r2, #8
 800ff26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	699a      	ldr	r2, [r3, #24]
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	f022 0204 	bic.w	r2, r2, #4
 800ff36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	6999      	ldr	r1, [r3, #24]
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	691a      	ldr	r2, [r3, #16]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	430a      	orrs	r2, r1
 800ff48:	619a      	str	r2, [r3, #24]
      break;
 800ff4a:	e062      	b.n	8010012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	68b9      	ldr	r1, [r7, #8]
 800ff52:	4618      	mov	r0, r3
 800ff54:	f000 fa94 	bl	8010480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	699a      	ldr	r2, [r3, #24]
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	699a      	ldr	r2, [r3, #24]
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	6999      	ldr	r1, [r3, #24]
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	691b      	ldr	r3, [r3, #16]
 800ff82:	021a      	lsls	r2, r3, #8
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	430a      	orrs	r2, r1
 800ff8a:	619a      	str	r2, [r3, #24]
      break;
 800ff8c:	e041      	b.n	8010012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	68b9      	ldr	r1, [r7, #8]
 800ff94:	4618      	mov	r0, r3
 800ff96:	f000 fae9 	bl	801056c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	69da      	ldr	r2, [r3, #28]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	f042 0208 	orr.w	r2, r2, #8
 800ffa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	69da      	ldr	r2, [r3, #28]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f022 0204 	bic.w	r2, r2, #4
 800ffb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	69d9      	ldr	r1, [r3, #28]
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	691a      	ldr	r2, [r3, #16]
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	430a      	orrs	r2, r1
 800ffca:	61da      	str	r2, [r3, #28]
      break;
 800ffcc:	e021      	b.n	8010012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	68b9      	ldr	r1, [r7, #8]
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f000 fb3d 	bl	8010654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	69da      	ldr	r2, [r3, #28]
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ffe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	69da      	ldr	r2, [r3, #28]
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	69d9      	ldr	r1, [r3, #28]
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	691b      	ldr	r3, [r3, #16]
 8010004:	021a      	lsls	r2, r3, #8
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	430a      	orrs	r2, r1
 801000c:	61da      	str	r2, [r3, #28]
      break;
 801000e:	e000      	b.n	8010012 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8010010:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2201      	movs	r2, #1
 8010016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	2200      	movs	r2, #0
 801001e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010022:	2300      	movs	r3, #0
}
 8010024:	4618      	mov	r0, r3
 8010026:	3710      	adds	r7, #16
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801003c:	2b01      	cmp	r3, #1
 801003e:	d101      	bne.n	8010044 <HAL_TIM_ConfigClockSource+0x18>
 8010040:	2302      	movs	r3, #2
 8010042:	e0a6      	b.n	8010192 <HAL_TIM_ConfigClockSource+0x166>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2201      	movs	r2, #1
 8010048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2202      	movs	r2, #2
 8010050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	689b      	ldr	r3, [r3, #8]
 801005a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010062:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801006a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	68fa      	ldr	r2, [r7, #12]
 8010072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	2b40      	cmp	r3, #64	; 0x40
 801007a:	d067      	beq.n	801014c <HAL_TIM_ConfigClockSource+0x120>
 801007c:	2b40      	cmp	r3, #64	; 0x40
 801007e:	d80b      	bhi.n	8010098 <HAL_TIM_ConfigClockSource+0x6c>
 8010080:	2b10      	cmp	r3, #16
 8010082:	d073      	beq.n	801016c <HAL_TIM_ConfigClockSource+0x140>
 8010084:	2b10      	cmp	r3, #16
 8010086:	d802      	bhi.n	801008e <HAL_TIM_ConfigClockSource+0x62>
 8010088:	2b00      	cmp	r3, #0
 801008a:	d06f      	beq.n	801016c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801008c:	e078      	b.n	8010180 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801008e:	2b20      	cmp	r3, #32
 8010090:	d06c      	beq.n	801016c <HAL_TIM_ConfigClockSource+0x140>
 8010092:	2b30      	cmp	r3, #48	; 0x30
 8010094:	d06a      	beq.n	801016c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8010096:	e073      	b.n	8010180 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010098:	2b70      	cmp	r3, #112	; 0x70
 801009a:	d00d      	beq.n	80100b8 <HAL_TIM_ConfigClockSource+0x8c>
 801009c:	2b70      	cmp	r3, #112	; 0x70
 801009e:	d804      	bhi.n	80100aa <HAL_TIM_ConfigClockSource+0x7e>
 80100a0:	2b50      	cmp	r3, #80	; 0x50
 80100a2:	d033      	beq.n	801010c <HAL_TIM_ConfigClockSource+0xe0>
 80100a4:	2b60      	cmp	r3, #96	; 0x60
 80100a6:	d041      	beq.n	801012c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80100a8:	e06a      	b.n	8010180 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80100aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100ae:	d066      	beq.n	801017e <HAL_TIM_ConfigClockSource+0x152>
 80100b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80100b4:	d017      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80100b6:	e063      	b.n	8010180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6818      	ldr	r0, [r3, #0]
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	6899      	ldr	r1, [r3, #8]
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	685a      	ldr	r2, [r3, #4]
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	f000 fcbe 	bl	8010a48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	689b      	ldr	r3, [r3, #8]
 80100d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80100da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	68fa      	ldr	r2, [r7, #12]
 80100e2:	609a      	str	r2, [r3, #8]
      break;
 80100e4:	e04c      	b.n	8010180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6818      	ldr	r0, [r3, #0]
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	6899      	ldr	r1, [r3, #8]
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	685a      	ldr	r2, [r3, #4]
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	f000 fca7 	bl	8010a48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	689a      	ldr	r2, [r3, #8]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010108:	609a      	str	r2, [r3, #8]
      break;
 801010a:	e039      	b.n	8010180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6818      	ldr	r0, [r3, #0]
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	6859      	ldr	r1, [r3, #4]
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	68db      	ldr	r3, [r3, #12]
 8010118:	461a      	mov	r2, r3
 801011a:	f000 fb65 	bl	80107e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	2150      	movs	r1, #80	; 0x50
 8010124:	4618      	mov	r0, r3
 8010126:	f000 fc74 	bl	8010a12 <TIM_ITRx_SetConfig>
      break;
 801012a:	e029      	b.n	8010180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6818      	ldr	r0, [r3, #0]
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	6859      	ldr	r1, [r3, #4]
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	68db      	ldr	r3, [r3, #12]
 8010138:	461a      	mov	r2, r3
 801013a:	f000 fbc1 	bl	80108c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2160      	movs	r1, #96	; 0x60
 8010144:	4618      	mov	r0, r3
 8010146:	f000 fc64 	bl	8010a12 <TIM_ITRx_SetConfig>
      break;
 801014a:	e019      	b.n	8010180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6818      	ldr	r0, [r3, #0]
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	6859      	ldr	r1, [r3, #4]
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	461a      	mov	r2, r3
 801015a:	f000 fb45 	bl	80107e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	2140      	movs	r1, #64	; 0x40
 8010164:	4618      	mov	r0, r3
 8010166:	f000 fc54 	bl	8010a12 <TIM_ITRx_SetConfig>
      break;
 801016a:	e009      	b.n	8010180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681a      	ldr	r2, [r3, #0]
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	4619      	mov	r1, r3
 8010176:	4610      	mov	r0, r2
 8010178:	f000 fc4b 	bl	8010a12 <TIM_ITRx_SetConfig>
      break;
 801017c:	e000      	b.n	8010180 <HAL_TIM_ConfigClockSource+0x154>
      break;
 801017e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2201      	movs	r2, #1
 8010184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2200      	movs	r2, #0
 801018c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010190:	2300      	movs	r3, #0
}
 8010192:	4618      	mov	r0, r3
 8010194:	3710      	adds	r7, #16
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
	...

0801019c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80101a6:	2300      	movs	r3, #0
 80101a8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	2b0c      	cmp	r3, #12
 80101ae:	d831      	bhi.n	8010214 <HAL_TIM_ReadCapturedValue+0x78>
 80101b0:	a201      	add	r2, pc, #4	; (adr r2, 80101b8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80101b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b6:	bf00      	nop
 80101b8:	080101ed 	.word	0x080101ed
 80101bc:	08010215 	.word	0x08010215
 80101c0:	08010215 	.word	0x08010215
 80101c4:	08010215 	.word	0x08010215
 80101c8:	080101f7 	.word	0x080101f7
 80101cc:	08010215 	.word	0x08010215
 80101d0:	08010215 	.word	0x08010215
 80101d4:	08010215 	.word	0x08010215
 80101d8:	08010201 	.word	0x08010201
 80101dc:	08010215 	.word	0x08010215
 80101e0:	08010215 	.word	0x08010215
 80101e4:	08010215 	.word	0x08010215
 80101e8:	0801020b 	.word	0x0801020b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101f2:	60fb      	str	r3, [r7, #12]

      break;
 80101f4:	e00f      	b.n	8010216 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101fc:	60fb      	str	r3, [r7, #12]

      break;
 80101fe:	e00a      	b.n	8010216 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010206:	60fb      	str	r3, [r7, #12]

      break;
 8010208:	e005      	b.n	8010216 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010210:	60fb      	str	r3, [r7, #12]

      break;
 8010212:	e000      	b.n	8010216 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8010214:	bf00      	nop
  }

  return tmpreg;
 8010216:	68fb      	ldr	r3, [r7, #12]
}
 8010218:	4618      	mov	r0, r3
 801021a:	3714      	adds	r7, #20
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr

08010224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010224:	b480      	push	{r7}
 8010226:	b083      	sub	sp, #12
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801022c:	bf00      	nop
 801022e:	370c      	adds	r7, #12
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr

08010238 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010238:	b480      	push	{r7}
 801023a:	b083      	sub	sp, #12
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010240:	bf00      	nop
 8010242:	370c      	adds	r7, #12
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr

0801024c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010254:	bf00      	nop
 8010256:	370c      	adds	r7, #12
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr

08010260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010260:	b480      	push	{r7}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	4a40      	ldr	r2, [pc, #256]	; (8010374 <TIM_Base_SetConfig+0x114>)
 8010274:	4293      	cmp	r3, r2
 8010276:	d013      	beq.n	80102a0 <TIM_Base_SetConfig+0x40>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801027e:	d00f      	beq.n	80102a0 <TIM_Base_SetConfig+0x40>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4a3d      	ldr	r2, [pc, #244]	; (8010378 <TIM_Base_SetConfig+0x118>)
 8010284:	4293      	cmp	r3, r2
 8010286:	d00b      	beq.n	80102a0 <TIM_Base_SetConfig+0x40>
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	4a3c      	ldr	r2, [pc, #240]	; (801037c <TIM_Base_SetConfig+0x11c>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d007      	beq.n	80102a0 <TIM_Base_SetConfig+0x40>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	4a3b      	ldr	r2, [pc, #236]	; (8010380 <TIM_Base_SetConfig+0x120>)
 8010294:	4293      	cmp	r3, r2
 8010296:	d003      	beq.n	80102a0 <TIM_Base_SetConfig+0x40>
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	4a3a      	ldr	r2, [pc, #232]	; (8010384 <TIM_Base_SetConfig+0x124>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d108      	bne.n	80102b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	685b      	ldr	r3, [r3, #4]
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	4313      	orrs	r3, r2
 80102b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4a2f      	ldr	r2, [pc, #188]	; (8010374 <TIM_Base_SetConfig+0x114>)
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d02b      	beq.n	8010312 <TIM_Base_SetConfig+0xb2>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102c0:	d027      	beq.n	8010312 <TIM_Base_SetConfig+0xb2>
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	4a2c      	ldr	r2, [pc, #176]	; (8010378 <TIM_Base_SetConfig+0x118>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d023      	beq.n	8010312 <TIM_Base_SetConfig+0xb2>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	4a2b      	ldr	r2, [pc, #172]	; (801037c <TIM_Base_SetConfig+0x11c>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d01f      	beq.n	8010312 <TIM_Base_SetConfig+0xb2>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	4a2a      	ldr	r2, [pc, #168]	; (8010380 <TIM_Base_SetConfig+0x120>)
 80102d6:	4293      	cmp	r3, r2
 80102d8:	d01b      	beq.n	8010312 <TIM_Base_SetConfig+0xb2>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	4a29      	ldr	r2, [pc, #164]	; (8010384 <TIM_Base_SetConfig+0x124>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d017      	beq.n	8010312 <TIM_Base_SetConfig+0xb2>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4a28      	ldr	r2, [pc, #160]	; (8010388 <TIM_Base_SetConfig+0x128>)
 80102e6:	4293      	cmp	r3, r2
 80102e8:	d013      	beq.n	8010312 <TIM_Base_SetConfig+0xb2>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4a27      	ldr	r2, [pc, #156]	; (801038c <TIM_Base_SetConfig+0x12c>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d00f      	beq.n	8010312 <TIM_Base_SetConfig+0xb2>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4a26      	ldr	r2, [pc, #152]	; (8010390 <TIM_Base_SetConfig+0x130>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d00b      	beq.n	8010312 <TIM_Base_SetConfig+0xb2>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4a25      	ldr	r2, [pc, #148]	; (8010394 <TIM_Base_SetConfig+0x134>)
 80102fe:	4293      	cmp	r3, r2
 8010300:	d007      	beq.n	8010312 <TIM_Base_SetConfig+0xb2>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4a24      	ldr	r2, [pc, #144]	; (8010398 <TIM_Base_SetConfig+0x138>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d003      	beq.n	8010312 <TIM_Base_SetConfig+0xb2>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	4a23      	ldr	r2, [pc, #140]	; (801039c <TIM_Base_SetConfig+0x13c>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d108      	bne.n	8010324 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	68db      	ldr	r3, [r3, #12]
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	4313      	orrs	r3, r2
 8010322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	695b      	ldr	r3, [r3, #20]
 801032e:	4313      	orrs	r3, r2
 8010330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	68fa      	ldr	r2, [r7, #12]
 8010336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	689a      	ldr	r2, [r3, #8]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4a0a      	ldr	r2, [pc, #40]	; (8010374 <TIM_Base_SetConfig+0x114>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d003      	beq.n	8010358 <TIM_Base_SetConfig+0xf8>
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	4a0c      	ldr	r2, [pc, #48]	; (8010384 <TIM_Base_SetConfig+0x124>)
 8010354:	4293      	cmp	r3, r2
 8010356:	d103      	bne.n	8010360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	691a      	ldr	r2, [r3, #16]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2201      	movs	r2, #1
 8010364:	615a      	str	r2, [r3, #20]
}
 8010366:	bf00      	nop
 8010368:	3714      	adds	r7, #20
 801036a:	46bd      	mov	sp, r7
 801036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010370:	4770      	bx	lr
 8010372:	bf00      	nop
 8010374:	40010000 	.word	0x40010000
 8010378:	40000400 	.word	0x40000400
 801037c:	40000800 	.word	0x40000800
 8010380:	40000c00 	.word	0x40000c00
 8010384:	40010400 	.word	0x40010400
 8010388:	40014000 	.word	0x40014000
 801038c:	40014400 	.word	0x40014400
 8010390:	40014800 	.word	0x40014800
 8010394:	40001800 	.word	0x40001800
 8010398:	40001c00 	.word	0x40001c00
 801039c:	40002000 	.word	0x40002000

080103a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b087      	sub	sp, #28
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6a1b      	ldr	r3, [r3, #32]
 80103ae:	f023 0201 	bic.w	r2, r3, #1
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a1b      	ldr	r3, [r3, #32]
 80103ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	699b      	ldr	r3, [r3, #24]
 80103c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	f023 0303 	bic.w	r3, r3, #3
 80103d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	68fa      	ldr	r2, [r7, #12]
 80103de:	4313      	orrs	r3, r2
 80103e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	f023 0302 	bic.w	r3, r3, #2
 80103e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	689b      	ldr	r3, [r3, #8]
 80103ee:	697a      	ldr	r2, [r7, #20]
 80103f0:	4313      	orrs	r3, r2
 80103f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	4a20      	ldr	r2, [pc, #128]	; (8010478 <TIM_OC1_SetConfig+0xd8>)
 80103f8:	4293      	cmp	r3, r2
 80103fa:	d003      	beq.n	8010404 <TIM_OC1_SetConfig+0x64>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4a1f      	ldr	r2, [pc, #124]	; (801047c <TIM_OC1_SetConfig+0xdc>)
 8010400:	4293      	cmp	r3, r2
 8010402:	d10c      	bne.n	801041e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	f023 0308 	bic.w	r3, r3, #8
 801040a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	697a      	ldr	r2, [r7, #20]
 8010412:	4313      	orrs	r3, r2
 8010414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	f023 0304 	bic.w	r3, r3, #4
 801041c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	4a15      	ldr	r2, [pc, #84]	; (8010478 <TIM_OC1_SetConfig+0xd8>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d003      	beq.n	801042e <TIM_OC1_SetConfig+0x8e>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	4a14      	ldr	r2, [pc, #80]	; (801047c <TIM_OC1_SetConfig+0xdc>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d111      	bne.n	8010452 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801043c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	695b      	ldr	r3, [r3, #20]
 8010442:	693a      	ldr	r2, [r7, #16]
 8010444:	4313      	orrs	r3, r2
 8010446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	699b      	ldr	r3, [r3, #24]
 801044c:	693a      	ldr	r2, [r7, #16]
 801044e:	4313      	orrs	r3, r2
 8010450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	693a      	ldr	r2, [r7, #16]
 8010456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	68fa      	ldr	r2, [r7, #12]
 801045c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	685a      	ldr	r2, [r3, #4]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	697a      	ldr	r2, [r7, #20]
 801046a:	621a      	str	r2, [r3, #32]
}
 801046c:	bf00      	nop
 801046e:	371c      	adds	r7, #28
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr
 8010478:	40010000 	.word	0x40010000
 801047c:	40010400 	.word	0x40010400

08010480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010480:	b480      	push	{r7}
 8010482:	b087      	sub	sp, #28
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6a1b      	ldr	r3, [r3, #32]
 801048e:	f023 0210 	bic.w	r2, r3, #16
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6a1b      	ldr	r3, [r3, #32]
 801049a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	699b      	ldr	r3, [r3, #24]
 80104a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80104b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	021b      	lsls	r3, r3, #8
 80104be:	68fa      	ldr	r2, [r7, #12]
 80104c0:	4313      	orrs	r3, r2
 80104c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	f023 0320 	bic.w	r3, r3, #32
 80104ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	689b      	ldr	r3, [r3, #8]
 80104d0:	011b      	lsls	r3, r3, #4
 80104d2:	697a      	ldr	r2, [r7, #20]
 80104d4:	4313      	orrs	r3, r2
 80104d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4a22      	ldr	r2, [pc, #136]	; (8010564 <TIM_OC2_SetConfig+0xe4>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d003      	beq.n	80104e8 <TIM_OC2_SetConfig+0x68>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a21      	ldr	r2, [pc, #132]	; (8010568 <TIM_OC2_SetConfig+0xe8>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d10d      	bne.n	8010504 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	68db      	ldr	r3, [r3, #12]
 80104f4:	011b      	lsls	r3, r3, #4
 80104f6:	697a      	ldr	r2, [r7, #20]
 80104f8:	4313      	orrs	r3, r2
 80104fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	4a17      	ldr	r2, [pc, #92]	; (8010564 <TIM_OC2_SetConfig+0xe4>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d003      	beq.n	8010514 <TIM_OC2_SetConfig+0x94>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	4a16      	ldr	r2, [pc, #88]	; (8010568 <TIM_OC2_SetConfig+0xe8>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d113      	bne.n	801053c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801051a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	695b      	ldr	r3, [r3, #20]
 8010528:	009b      	lsls	r3, r3, #2
 801052a:	693a      	ldr	r2, [r7, #16]
 801052c:	4313      	orrs	r3, r2
 801052e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	699b      	ldr	r3, [r3, #24]
 8010534:	009b      	lsls	r3, r3, #2
 8010536:	693a      	ldr	r2, [r7, #16]
 8010538:	4313      	orrs	r3, r2
 801053a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	693a      	ldr	r2, [r7, #16]
 8010540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	685a      	ldr	r2, [r3, #4]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	697a      	ldr	r2, [r7, #20]
 8010554:	621a      	str	r2, [r3, #32]
}
 8010556:	bf00      	nop
 8010558:	371c      	adds	r7, #28
 801055a:	46bd      	mov	sp, r7
 801055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	40010000 	.word	0x40010000
 8010568:	40010400 	.word	0x40010400

0801056c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801056c:	b480      	push	{r7}
 801056e:	b087      	sub	sp, #28
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6a1b      	ldr	r3, [r3, #32]
 801057a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a1b      	ldr	r3, [r3, #32]
 8010586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	685b      	ldr	r3, [r3, #4]
 801058c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	69db      	ldr	r3, [r3, #28]
 8010592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801059a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	f023 0303 	bic.w	r3, r3, #3
 80105a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	68fa      	ldr	r2, [r7, #12]
 80105aa:	4313      	orrs	r3, r2
 80105ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80105b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	689b      	ldr	r3, [r3, #8]
 80105ba:	021b      	lsls	r3, r3, #8
 80105bc:	697a      	ldr	r2, [r7, #20]
 80105be:	4313      	orrs	r3, r2
 80105c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	4a21      	ldr	r2, [pc, #132]	; (801064c <TIM_OC3_SetConfig+0xe0>)
 80105c6:	4293      	cmp	r3, r2
 80105c8:	d003      	beq.n	80105d2 <TIM_OC3_SetConfig+0x66>
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	4a20      	ldr	r2, [pc, #128]	; (8010650 <TIM_OC3_SetConfig+0xe4>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d10d      	bne.n	80105ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	68db      	ldr	r3, [r3, #12]
 80105de:	021b      	lsls	r3, r3, #8
 80105e0:	697a      	ldr	r2, [r7, #20]
 80105e2:	4313      	orrs	r3, r2
 80105e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80105ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	4a16      	ldr	r2, [pc, #88]	; (801064c <TIM_OC3_SetConfig+0xe0>)
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d003      	beq.n	80105fe <TIM_OC3_SetConfig+0x92>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	4a15      	ldr	r2, [pc, #84]	; (8010650 <TIM_OC3_SetConfig+0xe4>)
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d113      	bne.n	8010626 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801060c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	695b      	ldr	r3, [r3, #20]
 8010612:	011b      	lsls	r3, r3, #4
 8010614:	693a      	ldr	r2, [r7, #16]
 8010616:	4313      	orrs	r3, r2
 8010618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	699b      	ldr	r3, [r3, #24]
 801061e:	011b      	lsls	r3, r3, #4
 8010620:	693a      	ldr	r2, [r7, #16]
 8010622:	4313      	orrs	r3, r2
 8010624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	693a      	ldr	r2, [r7, #16]
 801062a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	68fa      	ldr	r2, [r7, #12]
 8010630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	685a      	ldr	r2, [r3, #4]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	697a      	ldr	r2, [r7, #20]
 801063e:	621a      	str	r2, [r3, #32]
}
 8010640:	bf00      	nop
 8010642:	371c      	adds	r7, #28
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr
 801064c:	40010000 	.word	0x40010000
 8010650:	40010400 	.word	0x40010400

08010654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010654:	b480      	push	{r7}
 8010656:	b087      	sub	sp, #28
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6a1b      	ldr	r3, [r3, #32]
 8010662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6a1b      	ldr	r3, [r3, #32]
 801066e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	69db      	ldr	r3, [r3, #28]
 801067a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801068a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	021b      	lsls	r3, r3, #8
 8010692:	68fa      	ldr	r2, [r7, #12]
 8010694:	4313      	orrs	r3, r2
 8010696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801069e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	031b      	lsls	r3, r3, #12
 80106a6:	693a      	ldr	r2, [r7, #16]
 80106a8:	4313      	orrs	r3, r2
 80106aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	4a12      	ldr	r2, [pc, #72]	; (80106f8 <TIM_OC4_SetConfig+0xa4>)
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d003      	beq.n	80106bc <TIM_OC4_SetConfig+0x68>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4a11      	ldr	r2, [pc, #68]	; (80106fc <TIM_OC4_SetConfig+0xa8>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d109      	bne.n	80106d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80106c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	695b      	ldr	r3, [r3, #20]
 80106c8:	019b      	lsls	r3, r3, #6
 80106ca:	697a      	ldr	r2, [r7, #20]
 80106cc:	4313      	orrs	r3, r2
 80106ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	697a      	ldr	r2, [r7, #20]
 80106d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	685a      	ldr	r2, [r3, #4]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	693a      	ldr	r2, [r7, #16]
 80106e8:	621a      	str	r2, [r3, #32]
}
 80106ea:	bf00      	nop
 80106ec:	371c      	adds	r7, #28
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr
 80106f6:	bf00      	nop
 80106f8:	40010000 	.word	0x40010000
 80106fc:	40010400 	.word	0x40010400

08010700 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010700:	b480      	push	{r7}
 8010702:	b087      	sub	sp, #28
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	607a      	str	r2, [r7, #4]
 801070c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	6a1b      	ldr	r3, [r3, #32]
 8010712:	f023 0201 	bic.w	r2, r3, #1
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	699b      	ldr	r3, [r3, #24]
 801071e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	6a1b      	ldr	r3, [r3, #32]
 8010724:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	4a28      	ldr	r2, [pc, #160]	; (80107cc <TIM_TI1_SetConfig+0xcc>)
 801072a:	4293      	cmp	r3, r2
 801072c:	d01b      	beq.n	8010766 <TIM_TI1_SetConfig+0x66>
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010734:	d017      	beq.n	8010766 <TIM_TI1_SetConfig+0x66>
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	4a25      	ldr	r2, [pc, #148]	; (80107d0 <TIM_TI1_SetConfig+0xd0>)
 801073a:	4293      	cmp	r3, r2
 801073c:	d013      	beq.n	8010766 <TIM_TI1_SetConfig+0x66>
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	4a24      	ldr	r2, [pc, #144]	; (80107d4 <TIM_TI1_SetConfig+0xd4>)
 8010742:	4293      	cmp	r3, r2
 8010744:	d00f      	beq.n	8010766 <TIM_TI1_SetConfig+0x66>
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	4a23      	ldr	r2, [pc, #140]	; (80107d8 <TIM_TI1_SetConfig+0xd8>)
 801074a:	4293      	cmp	r3, r2
 801074c:	d00b      	beq.n	8010766 <TIM_TI1_SetConfig+0x66>
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	4a22      	ldr	r2, [pc, #136]	; (80107dc <TIM_TI1_SetConfig+0xdc>)
 8010752:	4293      	cmp	r3, r2
 8010754:	d007      	beq.n	8010766 <TIM_TI1_SetConfig+0x66>
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	4a21      	ldr	r2, [pc, #132]	; (80107e0 <TIM_TI1_SetConfig+0xe0>)
 801075a:	4293      	cmp	r3, r2
 801075c:	d003      	beq.n	8010766 <TIM_TI1_SetConfig+0x66>
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	4a20      	ldr	r2, [pc, #128]	; (80107e4 <TIM_TI1_SetConfig+0xe4>)
 8010762:	4293      	cmp	r3, r2
 8010764:	d101      	bne.n	801076a <TIM_TI1_SetConfig+0x6a>
 8010766:	2301      	movs	r3, #1
 8010768:	e000      	b.n	801076c <TIM_TI1_SetConfig+0x6c>
 801076a:	2300      	movs	r3, #0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d008      	beq.n	8010782 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	f023 0303 	bic.w	r3, r3, #3
 8010776:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8010778:	697a      	ldr	r2, [r7, #20]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	4313      	orrs	r3, r2
 801077e:	617b      	str	r3, [r7, #20]
 8010780:	e003      	b.n	801078a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	f043 0301 	orr.w	r3, r3, #1
 8010788:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010790:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	011b      	lsls	r3, r3, #4
 8010796:	b2db      	uxtb	r3, r3
 8010798:	697a      	ldr	r2, [r7, #20]
 801079a:	4313      	orrs	r3, r2
 801079c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	f023 030a 	bic.w	r3, r3, #10
 80107a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	f003 030a 	and.w	r3, r3, #10
 80107ac:	693a      	ldr	r2, [r7, #16]
 80107ae:	4313      	orrs	r3, r2
 80107b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	697a      	ldr	r2, [r7, #20]
 80107b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	693a      	ldr	r2, [r7, #16]
 80107bc:	621a      	str	r2, [r3, #32]
}
 80107be:	bf00      	nop
 80107c0:	371c      	adds	r7, #28
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr
 80107ca:	bf00      	nop
 80107cc:	40010000 	.word	0x40010000
 80107d0:	40000400 	.word	0x40000400
 80107d4:	40000800 	.word	0x40000800
 80107d8:	40000c00 	.word	0x40000c00
 80107dc:	40010400 	.word	0x40010400
 80107e0:	40014000 	.word	0x40014000
 80107e4:	40001800 	.word	0x40001800

080107e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b087      	sub	sp, #28
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6a1b      	ldr	r3, [r3, #32]
 80107f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	6a1b      	ldr	r3, [r3, #32]
 80107fe:	f023 0201 	bic.w	r2, r3, #1
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	699b      	ldr	r3, [r3, #24]
 801080a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	011b      	lsls	r3, r3, #4
 8010818:	693a      	ldr	r2, [r7, #16]
 801081a:	4313      	orrs	r3, r2
 801081c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	f023 030a 	bic.w	r3, r3, #10
 8010824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010826:	697a      	ldr	r2, [r7, #20]
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	4313      	orrs	r3, r2
 801082c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	693a      	ldr	r2, [r7, #16]
 8010832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	697a      	ldr	r2, [r7, #20]
 8010838:	621a      	str	r2, [r3, #32]
}
 801083a:	bf00      	nop
 801083c:	371c      	adds	r7, #28
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr

08010846 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010846:	b480      	push	{r7}
 8010848:	b087      	sub	sp, #28
 801084a:	af00      	add	r7, sp, #0
 801084c:	60f8      	str	r0, [r7, #12]
 801084e:	60b9      	str	r1, [r7, #8]
 8010850:	607a      	str	r2, [r7, #4]
 8010852:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	6a1b      	ldr	r3, [r3, #32]
 8010858:	f023 0210 	bic.w	r2, r3, #16
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	699b      	ldr	r3, [r3, #24]
 8010864:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	6a1b      	ldr	r3, [r3, #32]
 801086a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010872:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	021b      	lsls	r3, r3, #8
 8010878:	697a      	ldr	r2, [r7, #20]
 801087a:	4313      	orrs	r3, r2
 801087c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	031b      	lsls	r3, r3, #12
 801088a:	b29b      	uxth	r3, r3
 801088c:	697a      	ldr	r2, [r7, #20]
 801088e:	4313      	orrs	r3, r2
 8010890:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010898:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	011b      	lsls	r3, r3, #4
 801089e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80108a2:	693a      	ldr	r2, [r7, #16]
 80108a4:	4313      	orrs	r3, r2
 80108a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	697a      	ldr	r2, [r7, #20]
 80108ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	693a      	ldr	r2, [r7, #16]
 80108b2:	621a      	str	r2, [r3, #32]
}
 80108b4:	bf00      	nop
 80108b6:	371c      	adds	r7, #28
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr

080108c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b087      	sub	sp, #28
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	6a1b      	ldr	r3, [r3, #32]
 80108d0:	f023 0210 	bic.w	r2, r3, #16
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	699b      	ldr	r3, [r3, #24]
 80108dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	6a1b      	ldr	r3, [r3, #32]
 80108e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80108ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	031b      	lsls	r3, r3, #12
 80108f0:	697a      	ldr	r2, [r7, #20]
 80108f2:	4313      	orrs	r3, r2
 80108f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80108fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	011b      	lsls	r3, r3, #4
 8010902:	693a      	ldr	r2, [r7, #16]
 8010904:	4313      	orrs	r3, r2
 8010906:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	697a      	ldr	r2, [r7, #20]
 801090c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	693a      	ldr	r2, [r7, #16]
 8010912:	621a      	str	r2, [r3, #32]
}
 8010914:	bf00      	nop
 8010916:	371c      	adds	r7, #28
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010920:	b480      	push	{r7}
 8010922:	b087      	sub	sp, #28
 8010924:	af00      	add	r7, sp, #0
 8010926:	60f8      	str	r0, [r7, #12]
 8010928:	60b9      	str	r1, [r7, #8]
 801092a:	607a      	str	r2, [r7, #4]
 801092c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	6a1b      	ldr	r3, [r3, #32]
 8010932:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	69db      	ldr	r3, [r3, #28]
 801093e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	6a1b      	ldr	r3, [r3, #32]
 8010944:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f023 0303 	bic.w	r3, r3, #3
 801094c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801094e:	697a      	ldr	r2, [r7, #20]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	4313      	orrs	r3, r2
 8010954:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801095c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	011b      	lsls	r3, r3, #4
 8010962:	b2db      	uxtb	r3, r3
 8010964:	697a      	ldr	r2, [r7, #20]
 8010966:	4313      	orrs	r3, r2
 8010968:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801096a:	693b      	ldr	r3, [r7, #16]
 801096c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8010970:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	021b      	lsls	r3, r3, #8
 8010976:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801097a:	693a      	ldr	r2, [r7, #16]
 801097c:	4313      	orrs	r3, r2
 801097e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	697a      	ldr	r2, [r7, #20]
 8010984:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	693a      	ldr	r2, [r7, #16]
 801098a:	621a      	str	r2, [r3, #32]
}
 801098c:	bf00      	nop
 801098e:	371c      	adds	r7, #28
 8010990:	46bd      	mov	sp, r7
 8010992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010996:	4770      	bx	lr

08010998 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010998:	b480      	push	{r7}
 801099a:	b087      	sub	sp, #28
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	607a      	str	r2, [r7, #4]
 80109a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	6a1b      	ldr	r3, [r3, #32]
 80109aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	69db      	ldr	r3, [r3, #28]
 80109b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	6a1b      	ldr	r3, [r3, #32]
 80109bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	021b      	lsls	r3, r3, #8
 80109ca:	697a      	ldr	r2, [r7, #20]
 80109cc:	4313      	orrs	r3, r2
 80109ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80109d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	031b      	lsls	r3, r3, #12
 80109dc:	b29b      	uxth	r3, r3
 80109de:	697a      	ldr	r2, [r7, #20]
 80109e0:	4313      	orrs	r3, r2
 80109e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80109ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	031b      	lsls	r3, r3, #12
 80109f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80109f4:	693a      	ldr	r2, [r7, #16]
 80109f6:	4313      	orrs	r3, r2
 80109f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	697a      	ldr	r2, [r7, #20]
 80109fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	693a      	ldr	r2, [r7, #16]
 8010a04:	621a      	str	r2, [r3, #32]
}
 8010a06:	bf00      	nop
 8010a08:	371c      	adds	r7, #28
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr

08010a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010a12:	b480      	push	{r7}
 8010a14:	b085      	sub	sp, #20
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010a2a:	683a      	ldr	r2, [r7, #0]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	f043 0307 	orr.w	r3, r3, #7
 8010a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	68fa      	ldr	r2, [r7, #12]
 8010a3a:	609a      	str	r2, [r3, #8]
}
 8010a3c:	bf00      	nop
 8010a3e:	3714      	adds	r7, #20
 8010a40:	46bd      	mov	sp, r7
 8010a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a46:	4770      	bx	lr

08010a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b087      	sub	sp, #28
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
 8010a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	689b      	ldr	r3, [r3, #8]
 8010a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	021a      	lsls	r2, r3, #8
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	431a      	orrs	r2, r3
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	697a      	ldr	r2, [r7, #20]
 8010a72:	4313      	orrs	r3, r2
 8010a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	697a      	ldr	r2, [r7, #20]
 8010a7a:	609a      	str	r2, [r3, #8]
}
 8010a7c:	bf00      	nop
 8010a7e:	371c      	adds	r7, #28
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr

08010a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b085      	sub	sp, #20
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a98:	2b01      	cmp	r3, #1
 8010a9a:	d101      	bne.n	8010aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010a9c:	2302      	movs	r3, #2
 8010a9e:	e05a      	b.n	8010b56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2202      	movs	r2, #2
 8010aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	689b      	ldr	r3, [r3, #8]
 8010abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	4313      	orrs	r3, r2
 8010ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	68fa      	ldr	r2, [r7, #12]
 8010ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	4a21      	ldr	r2, [pc, #132]	; (8010b64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	d022      	beq.n	8010b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010aec:	d01d      	beq.n	8010b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4a1d      	ldr	r2, [pc, #116]	; (8010b68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010af4:	4293      	cmp	r3, r2
 8010af6:	d018      	beq.n	8010b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	4a1b      	ldr	r2, [pc, #108]	; (8010b6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d013      	beq.n	8010b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	4a1a      	ldr	r2, [pc, #104]	; (8010b70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d00e      	beq.n	8010b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	4a18      	ldr	r2, [pc, #96]	; (8010b74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010b12:	4293      	cmp	r3, r2
 8010b14:	d009      	beq.n	8010b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	4a17      	ldr	r2, [pc, #92]	; (8010b78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d004      	beq.n	8010b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4a15      	ldr	r2, [pc, #84]	; (8010b7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d10c      	bne.n	8010b44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	68ba      	ldr	r2, [r7, #8]
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	68ba      	ldr	r2, [r7, #8]
 8010b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2201      	movs	r2, #1
 8010b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2200      	movs	r2, #0
 8010b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010b54:	2300      	movs	r3, #0
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3714      	adds	r7, #20
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop
 8010b64:	40010000 	.word	0x40010000
 8010b68:	40000400 	.word	0x40000400
 8010b6c:	40000800 	.word	0x40000800
 8010b70:	40000c00 	.word	0x40000c00
 8010b74:	40010400 	.word	0x40010400
 8010b78:	40014000 	.word	0x40014000
 8010b7c:	40001800 	.word	0x40001800

08010b80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b085      	sub	sp, #20
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b94:	2b01      	cmp	r3, #1
 8010b96:	d101      	bne.n	8010b9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010b98:	2302      	movs	r3, #2
 8010b9a:	e03d      	b.n	8010c18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	689b      	ldr	r3, [r3, #8]
 8010bbc:	4313      	orrs	r3, r2
 8010bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	4313      	orrs	r3, r2
 8010bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	4313      	orrs	r3, r2
 8010bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	4313      	orrs	r3, r2
 8010be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	695b      	ldr	r3, [r3, #20]
 8010bf4:	4313      	orrs	r3, r2
 8010bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	69db      	ldr	r3, [r3, #28]
 8010c02:	4313      	orrs	r3, r2
 8010c04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	68fa      	ldr	r2, [r7, #12]
 8010c0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2200      	movs	r2, #0
 8010c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010c16:	2300      	movs	r3, #0
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3714      	adds	r7, #20
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr

08010c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010c2c:	bf00      	nop
 8010c2e:	370c      	adds	r7, #12
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr

08010c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010c40:	bf00      	nop
 8010c42:	370c      	adds	r7, #12
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d101      	bne.n	8010c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	e03f      	b.n	8010cde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010c64:	b2db      	uxtb	r3, r3
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d106      	bne.n	8010c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f7f8 fd72 	bl	800975c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2224      	movs	r2, #36	; 0x24
 8010c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	68da      	ldr	r2, [r3, #12]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f000 fb8b 	bl	80113ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	691a      	ldr	r2, [r3, #16]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	695a      	ldr	r2, [r3, #20]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	68da      	ldr	r2, [r3, #12]
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2220      	movs	r2, #32
 8010cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2220      	movs	r2, #32
 8010cd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010cdc:	2300      	movs	r3, #0
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3708      	adds	r7, #8
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
	...

08010ce8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b086      	sub	sp, #24
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	60f8      	str	r0, [r7, #12]
 8010cf0:	60b9      	str	r1, [r7, #8]
 8010cf2:	4613      	mov	r3, r2
 8010cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	2b20      	cmp	r3, #32
 8010d00:	d166      	bne.n	8010dd0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d002      	beq.n	8010d0e <HAL_UART_Receive_DMA+0x26>
 8010d08:	88fb      	ldrh	r3, [r7, #6]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d101      	bne.n	8010d12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010d0e:	2301      	movs	r3, #1
 8010d10:	e05f      	b.n	8010dd2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d101      	bne.n	8010d20 <HAL_UART_Receive_DMA+0x38>
 8010d1c:	2302      	movs	r3, #2
 8010d1e:	e058      	b.n	8010dd2 <HAL_UART_Receive_DMA+0xea>
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2201      	movs	r2, #1
 8010d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8010d28:	68ba      	ldr	r2, [r7, #8]
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	88fa      	ldrh	r2, [r7, #6]
 8010d32:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	2200      	movs	r2, #0
 8010d38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2222      	movs	r2, #34	; 0x22
 8010d3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d46:	4a25      	ldr	r2, [pc, #148]	; (8010ddc <HAL_UART_Receive_DMA+0xf4>)
 8010d48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d4e:	4a24      	ldr	r2, [pc, #144]	; (8010de0 <HAL_UART_Receive_DMA+0xf8>)
 8010d50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d56:	4a23      	ldr	r2, [pc, #140]	; (8010de4 <HAL_UART_Receive_DMA+0xfc>)
 8010d58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d5e:	2200      	movs	r2, #0
 8010d60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8010d62:	f107 0308 	add.w	r3, r7, #8
 8010d66:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	3304      	adds	r3, #4
 8010d72:	4619      	mov	r1, r3
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	88fb      	ldrh	r3, [r7, #6]
 8010d7a:	f7f9 f90f 	bl	8009f9c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8010d7e:	2300      	movs	r3, #0
 8010d80:	613b      	str	r3, [r7, #16]
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	613b      	str	r3, [r7, #16]
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	613b      	str	r3, [r7, #16]
 8010d92:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2200      	movs	r2, #0
 8010d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	68da      	ldr	r2, [r3, #12]
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010daa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	695a      	ldr	r2, [r3, #20]
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f042 0201 	orr.w	r2, r2, #1
 8010dba:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	695a      	ldr	r2, [r3, #20]
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010dca:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	e000      	b.n	8010dd2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010dd0:	2302      	movs	r3, #2
  }
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3718      	adds	r7, #24
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	08011025 	.word	0x08011025
 8010de0:	0801108d 	.word	0x0801108d
 8010de4:	080110a9 	.word	0x080110a9

08010de8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b088      	sub	sp, #32
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	68db      	ldr	r3, [r3, #12]
 8010dfe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	695b      	ldr	r3, [r3, #20]
 8010e06:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010e10:	69fb      	ldr	r3, [r7, #28]
 8010e12:	f003 030f 	and.w	r3, r3, #15
 8010e16:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d10d      	bne.n	8010e3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010e1e:	69fb      	ldr	r3, [r7, #28]
 8010e20:	f003 0320 	and.w	r3, r3, #32
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d008      	beq.n	8010e3a <HAL_UART_IRQHandler+0x52>
 8010e28:	69bb      	ldr	r3, [r7, #24]
 8010e2a:	f003 0320 	and.w	r3, r3, #32
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d003      	beq.n	8010e3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f000 fa38 	bl	80112a8 <UART_Receive_IT>
      return;
 8010e38:	e0d1      	b.n	8010fde <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	f000 80b0 	beq.w	8010fa2 <HAL_UART_IRQHandler+0x1ba>
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	f003 0301 	and.w	r3, r3, #1
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d105      	bne.n	8010e58 <HAL_UART_IRQHandler+0x70>
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f000 80a5 	beq.w	8010fa2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	f003 0301 	and.w	r3, r3, #1
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d00a      	beq.n	8010e78 <HAL_UART_IRQHandler+0x90>
 8010e62:	69bb      	ldr	r3, [r7, #24]
 8010e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d005      	beq.n	8010e78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e70:	f043 0201 	orr.w	r2, r3, #1
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010e78:	69fb      	ldr	r3, [r7, #28]
 8010e7a:	f003 0304 	and.w	r3, r3, #4
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d00a      	beq.n	8010e98 <HAL_UART_IRQHandler+0xb0>
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	f003 0301 	and.w	r3, r3, #1
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d005      	beq.n	8010e98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e90:	f043 0202 	orr.w	r2, r3, #2
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010e98:	69fb      	ldr	r3, [r7, #28]
 8010e9a:	f003 0302 	and.w	r3, r3, #2
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d00a      	beq.n	8010eb8 <HAL_UART_IRQHandler+0xd0>
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	f003 0301 	and.w	r3, r3, #1
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d005      	beq.n	8010eb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eb0:	f043 0204 	orr.w	r2, r3, #4
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	f003 0308 	and.w	r3, r3, #8
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d00f      	beq.n	8010ee2 <HAL_UART_IRQHandler+0xfa>
 8010ec2:	69bb      	ldr	r3, [r7, #24]
 8010ec4:	f003 0320 	and.w	r3, r3, #32
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d104      	bne.n	8010ed6 <HAL_UART_IRQHandler+0xee>
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	f003 0301 	and.w	r3, r3, #1
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d005      	beq.n	8010ee2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eda:	f043 0208 	orr.w	r2, r3, #8
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d078      	beq.n	8010fdc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	f003 0320 	and.w	r3, r3, #32
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d007      	beq.n	8010f04 <HAL_UART_IRQHandler+0x11c>
 8010ef4:	69bb      	ldr	r3, [r7, #24]
 8010ef6:	f003 0320 	and.w	r3, r3, #32
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d002      	beq.n	8010f04 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 f9d2 	bl	80112a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	695b      	ldr	r3, [r3, #20]
 8010f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f0e:	2b40      	cmp	r3, #64	; 0x40
 8010f10:	bf0c      	ite	eq
 8010f12:	2301      	moveq	r3, #1
 8010f14:	2300      	movne	r3, #0
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f1e:	f003 0308 	and.w	r3, r3, #8
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d102      	bne.n	8010f2c <HAL_UART_IRQHandler+0x144>
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d031      	beq.n	8010f90 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f000 f91b 	bl	8011168 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	695b      	ldr	r3, [r3, #20]
 8010f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f3c:	2b40      	cmp	r3, #64	; 0x40
 8010f3e:	d123      	bne.n	8010f88 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	695a      	ldr	r2, [r3, #20]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f4e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d013      	beq.n	8010f80 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f5c:	4a21      	ldr	r2, [pc, #132]	; (8010fe4 <HAL_UART_IRQHandler+0x1fc>)
 8010f5e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7f9 f871 	bl	800a04c <HAL_DMA_Abort_IT>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d016      	beq.n	8010f9e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f76:	687a      	ldr	r2, [r7, #4]
 8010f78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010f7a:	4610      	mov	r0, r2
 8010f7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f7e:	e00e      	b.n	8010f9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f000 f845 	bl	8011010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f86:	e00a      	b.n	8010f9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f000 f841 	bl	8011010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f8e:	e006      	b.n	8010f9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f000 f83d 	bl	8011010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010f9c:	e01e      	b.n	8010fdc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f9e:	bf00      	nop
    return;
 8010fa0:	e01c      	b.n	8010fdc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010fa2:	69fb      	ldr	r3, [r7, #28]
 8010fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d008      	beq.n	8010fbe <HAL_UART_IRQHandler+0x1d6>
 8010fac:	69bb      	ldr	r3, [r7, #24]
 8010fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d003      	beq.n	8010fbe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f000 f908 	bl	80111cc <UART_Transmit_IT>
    return;
 8010fbc:	e00f      	b.n	8010fde <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d00a      	beq.n	8010fde <HAL_UART_IRQHandler+0x1f6>
 8010fc8:	69bb      	ldr	r3, [r7, #24]
 8010fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d005      	beq.n	8010fde <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f000 f950 	bl	8011278 <UART_EndTransmit_IT>
    return;
 8010fd8:	bf00      	nop
 8010fda:	e000      	b.n	8010fde <HAL_UART_IRQHandler+0x1f6>
    return;
 8010fdc:	bf00      	nop
  }
}
 8010fde:	3720      	adds	r7, #32
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}
 8010fe4:	080111a5 	.word	0x080111a5

08010fe8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010ff0:	bf00      	nop
 8010ff2:	370c      	adds	r7, #12
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8011004:	bf00      	nop
 8011006:	370c      	adds	r7, #12
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr

08011010 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011010:	b480      	push	{r7}
 8011012:	b083      	sub	sp, #12
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011018:	bf00      	nop
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr

08011024 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011030:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801103c:	2b00      	cmp	r3, #0
 801103e:	d11e      	bne.n	801107e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	2200      	movs	r2, #0
 8011044:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	68da      	ldr	r2, [r3, #12]
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011054:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	695a      	ldr	r2, [r3, #20]
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	f022 0201 	bic.w	r2, r2, #1
 8011064:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	695a      	ldr	r2, [r3, #20]
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011074:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	2220      	movs	r2, #32
 801107a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 801107e:	68f8      	ldr	r0, [r7, #12]
 8011080:	f7f5 fed4 	bl	8006e2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011084:	bf00      	nop
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011098:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 801109a:	68f8      	ldr	r0, [r7, #12]
 801109c:	f7ff ffae 	bl	8010ffc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80110a0:	bf00      	nop
 80110a2:	3710      	adds	r7, #16
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80110b0:	2300      	movs	r3, #0
 80110b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	695b      	ldr	r3, [r3, #20]
 80110c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110c4:	2b80      	cmp	r3, #128	; 0x80
 80110c6:	bf0c      	ite	eq
 80110c8:	2301      	moveq	r3, #1
 80110ca:	2300      	movne	r3, #0
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80110d6:	b2db      	uxtb	r3, r3
 80110d8:	2b21      	cmp	r3, #33	; 0x21
 80110da:	d108      	bne.n	80110ee <UART_DMAError+0x46>
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d005      	beq.n	80110ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	2200      	movs	r2, #0
 80110e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80110e8:	68b8      	ldr	r0, [r7, #8]
 80110ea:	f000 f827 	bl	801113c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	695b      	ldr	r3, [r3, #20]
 80110f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110f8:	2b40      	cmp	r3, #64	; 0x40
 80110fa:	bf0c      	ite	eq
 80110fc:	2301      	moveq	r3, #1
 80110fe:	2300      	movne	r3, #0
 8011100:	b2db      	uxtb	r3, r3
 8011102:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801110a:	b2db      	uxtb	r3, r3
 801110c:	2b22      	cmp	r3, #34	; 0x22
 801110e:	d108      	bne.n	8011122 <UART_DMAError+0x7a>
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d005      	beq.n	8011122 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	2200      	movs	r2, #0
 801111a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801111c:	68b8      	ldr	r0, [r7, #8]
 801111e:	f000 f823 	bl	8011168 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011126:	f043 0210 	orr.w	r2, r3, #16
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801112e:	68b8      	ldr	r0, [r7, #8]
 8011130:	f7ff ff6e 	bl	8011010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011134:	bf00      	nop
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801113c:	b480      	push	{r7}
 801113e:	b083      	sub	sp, #12
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	68da      	ldr	r2, [r3, #12]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8011152:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2220      	movs	r2, #32
 8011158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 801115c:	bf00      	nop
 801115e:	370c      	adds	r7, #12
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	68da      	ldr	r2, [r3, #12]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801117e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	695a      	ldr	r2, [r3, #20]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	f022 0201 	bic.w	r2, r2, #1
 801118e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2220      	movs	r2, #32
 8011194:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8011198:	bf00      	nop
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	2200      	movs	r2, #0
 80111b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	2200      	movs	r2, #0
 80111bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80111be:	68f8      	ldr	r0, [r7, #12]
 80111c0:	f7ff ff26 	bl	8011010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80111c4:	bf00      	nop
 80111c6:	3710      	adds	r7, #16
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}

080111cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80111cc:	b480      	push	{r7}
 80111ce:	b085      	sub	sp, #20
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	2b21      	cmp	r3, #33	; 0x21
 80111de:	d144      	bne.n	801126a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	689b      	ldr	r3, [r3, #8]
 80111e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80111e8:	d11a      	bne.n	8011220 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6a1b      	ldr	r3, [r3, #32]
 80111ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	881b      	ldrh	r3, [r3, #0]
 80111f4:	461a      	mov	r2, r3
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80111fe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	691b      	ldr	r3, [r3, #16]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d105      	bne.n	8011214 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6a1b      	ldr	r3, [r3, #32]
 801120c:	1c9a      	adds	r2, r3, #2
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	621a      	str	r2, [r3, #32]
 8011212:	e00e      	b.n	8011232 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6a1b      	ldr	r3, [r3, #32]
 8011218:	1c5a      	adds	r2, r3, #1
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	621a      	str	r2, [r3, #32]
 801121e:	e008      	b.n	8011232 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6a1b      	ldr	r3, [r3, #32]
 8011224:	1c59      	adds	r1, r3, #1
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	6211      	str	r1, [r2, #32]
 801122a:	781a      	ldrb	r2, [r3, #0]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011236:	b29b      	uxth	r3, r3
 8011238:	3b01      	subs	r3, #1
 801123a:	b29b      	uxth	r3, r3
 801123c:	687a      	ldr	r2, [r7, #4]
 801123e:	4619      	mov	r1, r3
 8011240:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011242:	2b00      	cmp	r3, #0
 8011244:	d10f      	bne.n	8011266 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	68da      	ldr	r2, [r3, #12]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011254:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	68da      	ldr	r2, [r3, #12]
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011264:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011266:	2300      	movs	r3, #0
 8011268:	e000      	b.n	801126c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801126a:	2302      	movs	r3, #2
  }
}
 801126c:	4618      	mov	r0, r3
 801126e:	3714      	adds	r7, #20
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr

08011278 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	68da      	ldr	r2, [r3, #12]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801128e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2220      	movs	r2, #32
 8011294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f7ff fea5 	bl	8010fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801129e:	2300      	movs	r3, #0
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3708      	adds	r7, #8
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}

080112a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b084      	sub	sp, #16
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	2b22      	cmp	r3, #34	; 0x22
 80112ba:	d171      	bne.n	80113a0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	689b      	ldr	r3, [r3, #8]
 80112c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80112c4:	d123      	bne.n	801130e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112ca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	691b      	ldr	r3, [r3, #16]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d10e      	bne.n	80112f2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	685b      	ldr	r3, [r3, #4]
 80112da:	b29b      	uxth	r3, r3
 80112dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112ea:	1c9a      	adds	r2, r3, #2
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	629a      	str	r2, [r3, #40]	; 0x28
 80112f0:	e029      	b.n	8011346 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	b2db      	uxtb	r3, r3
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011306:	1c5a      	adds	r2, r3, #1
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	629a      	str	r2, [r3, #40]	; 0x28
 801130c:	e01b      	b.n	8011346 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	691b      	ldr	r3, [r3, #16]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d10a      	bne.n	801132c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	6858      	ldr	r0, [r3, #4]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011320:	1c59      	adds	r1, r3, #1
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	6291      	str	r1, [r2, #40]	; 0x28
 8011326:	b2c2      	uxtb	r2, r0
 8011328:	701a      	strb	r2, [r3, #0]
 801132a:	e00c      	b.n	8011346 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	b2da      	uxtb	r2, r3
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011338:	1c58      	adds	r0, r3, #1
 801133a:	6879      	ldr	r1, [r7, #4]
 801133c:	6288      	str	r0, [r1, #40]	; 0x28
 801133e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011342:	b2d2      	uxtb	r2, r2
 8011344:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801134a:	b29b      	uxth	r3, r3
 801134c:	3b01      	subs	r3, #1
 801134e:	b29b      	uxth	r3, r3
 8011350:	687a      	ldr	r2, [r7, #4]
 8011352:	4619      	mov	r1, r3
 8011354:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011356:	2b00      	cmp	r3, #0
 8011358:	d120      	bne.n	801139c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	68da      	ldr	r2, [r3, #12]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f022 0220 	bic.w	r2, r2, #32
 8011368:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	68da      	ldr	r2, [r3, #12]
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011378:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	695a      	ldr	r2, [r3, #20]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	f022 0201 	bic.w	r2, r2, #1
 8011388:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2220      	movs	r2, #32
 801138e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f7f5 fd4a 	bl	8006e2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8011398:	2300      	movs	r3, #0
 801139a:	e002      	b.n	80113a2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801139c:	2300      	movs	r3, #0
 801139e:	e000      	b.n	80113a2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80113a0:	2302      	movs	r3, #2
  }
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3710      	adds	r7, #16
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
	...

080113ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80113ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b0:	b085      	sub	sp, #20
 80113b2:	af00      	add	r7, sp, #0
 80113b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	691b      	ldr	r3, [r3, #16]
 80113bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	68da      	ldr	r2, [r3, #12]
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	430a      	orrs	r2, r1
 80113ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	689a      	ldr	r2, [r3, #8]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	691b      	ldr	r3, [r3, #16]
 80113d4:	431a      	orrs	r2, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	695b      	ldr	r3, [r3, #20]
 80113da:	431a      	orrs	r2, r3
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	69db      	ldr	r3, [r3, #28]
 80113e0:	4313      	orrs	r3, r2
 80113e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	68db      	ldr	r3, [r3, #12]
 80113ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80113ee:	f023 030c 	bic.w	r3, r3, #12
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	6812      	ldr	r2, [r2, #0]
 80113f6:	68f9      	ldr	r1, [r7, #12]
 80113f8:	430b      	orrs	r3, r1
 80113fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	695b      	ldr	r3, [r3, #20]
 8011402:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	699a      	ldr	r2, [r3, #24]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	430a      	orrs	r2, r1
 8011410:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	69db      	ldr	r3, [r3, #28]
 8011416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801141a:	f040 818b 	bne.w	8011734 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	4ac1      	ldr	r2, [pc, #772]	; (8011728 <UART_SetConfig+0x37c>)
 8011424:	4293      	cmp	r3, r2
 8011426:	d005      	beq.n	8011434 <UART_SetConfig+0x88>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	4abf      	ldr	r2, [pc, #764]	; (801172c <UART_SetConfig+0x380>)
 801142e:	4293      	cmp	r3, r2
 8011430:	f040 80bd 	bne.w	80115ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011434:	f7fc ff42 	bl	800e2bc <HAL_RCC_GetPCLK2Freq>
 8011438:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	461d      	mov	r5, r3
 801143e:	f04f 0600 	mov.w	r6, #0
 8011442:	46a8      	mov	r8, r5
 8011444:	46b1      	mov	r9, r6
 8011446:	eb18 0308 	adds.w	r3, r8, r8
 801144a:	eb49 0409 	adc.w	r4, r9, r9
 801144e:	4698      	mov	r8, r3
 8011450:	46a1      	mov	r9, r4
 8011452:	eb18 0805 	adds.w	r8, r8, r5
 8011456:	eb49 0906 	adc.w	r9, r9, r6
 801145a:	f04f 0100 	mov.w	r1, #0
 801145e:	f04f 0200 	mov.w	r2, #0
 8011462:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011466:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801146a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801146e:	4688      	mov	r8, r1
 8011470:	4691      	mov	r9, r2
 8011472:	eb18 0005 	adds.w	r0, r8, r5
 8011476:	eb49 0106 	adc.w	r1, r9, r6
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	461d      	mov	r5, r3
 8011480:	f04f 0600 	mov.w	r6, #0
 8011484:	196b      	adds	r3, r5, r5
 8011486:	eb46 0406 	adc.w	r4, r6, r6
 801148a:	461a      	mov	r2, r3
 801148c:	4623      	mov	r3, r4
 801148e:	f7ef fd69 	bl	8000f64 <__aeabi_uldivmod>
 8011492:	4603      	mov	r3, r0
 8011494:	460c      	mov	r4, r1
 8011496:	461a      	mov	r2, r3
 8011498:	4ba5      	ldr	r3, [pc, #660]	; (8011730 <UART_SetConfig+0x384>)
 801149a:	fba3 2302 	umull	r2, r3, r3, r2
 801149e:	095b      	lsrs	r3, r3, #5
 80114a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	461d      	mov	r5, r3
 80114a8:	f04f 0600 	mov.w	r6, #0
 80114ac:	46a9      	mov	r9, r5
 80114ae:	46b2      	mov	sl, r6
 80114b0:	eb19 0309 	adds.w	r3, r9, r9
 80114b4:	eb4a 040a 	adc.w	r4, sl, sl
 80114b8:	4699      	mov	r9, r3
 80114ba:	46a2      	mov	sl, r4
 80114bc:	eb19 0905 	adds.w	r9, r9, r5
 80114c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80114c4:	f04f 0100 	mov.w	r1, #0
 80114c8:	f04f 0200 	mov.w	r2, #0
 80114cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80114d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80114d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80114d8:	4689      	mov	r9, r1
 80114da:	4692      	mov	sl, r2
 80114dc:	eb19 0005 	adds.w	r0, r9, r5
 80114e0:	eb4a 0106 	adc.w	r1, sl, r6
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	461d      	mov	r5, r3
 80114ea:	f04f 0600 	mov.w	r6, #0
 80114ee:	196b      	adds	r3, r5, r5
 80114f0:	eb46 0406 	adc.w	r4, r6, r6
 80114f4:	461a      	mov	r2, r3
 80114f6:	4623      	mov	r3, r4
 80114f8:	f7ef fd34 	bl	8000f64 <__aeabi_uldivmod>
 80114fc:	4603      	mov	r3, r0
 80114fe:	460c      	mov	r4, r1
 8011500:	461a      	mov	r2, r3
 8011502:	4b8b      	ldr	r3, [pc, #556]	; (8011730 <UART_SetConfig+0x384>)
 8011504:	fba3 1302 	umull	r1, r3, r3, r2
 8011508:	095b      	lsrs	r3, r3, #5
 801150a:	2164      	movs	r1, #100	; 0x64
 801150c:	fb01 f303 	mul.w	r3, r1, r3
 8011510:	1ad3      	subs	r3, r2, r3
 8011512:	00db      	lsls	r3, r3, #3
 8011514:	3332      	adds	r3, #50	; 0x32
 8011516:	4a86      	ldr	r2, [pc, #536]	; (8011730 <UART_SetConfig+0x384>)
 8011518:	fba2 2303 	umull	r2, r3, r2, r3
 801151c:	095b      	lsrs	r3, r3, #5
 801151e:	005b      	lsls	r3, r3, #1
 8011520:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011524:	4498      	add	r8, r3
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	461d      	mov	r5, r3
 801152a:	f04f 0600 	mov.w	r6, #0
 801152e:	46a9      	mov	r9, r5
 8011530:	46b2      	mov	sl, r6
 8011532:	eb19 0309 	adds.w	r3, r9, r9
 8011536:	eb4a 040a 	adc.w	r4, sl, sl
 801153a:	4699      	mov	r9, r3
 801153c:	46a2      	mov	sl, r4
 801153e:	eb19 0905 	adds.w	r9, r9, r5
 8011542:	eb4a 0a06 	adc.w	sl, sl, r6
 8011546:	f04f 0100 	mov.w	r1, #0
 801154a:	f04f 0200 	mov.w	r2, #0
 801154e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011552:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011556:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801155a:	4689      	mov	r9, r1
 801155c:	4692      	mov	sl, r2
 801155e:	eb19 0005 	adds.w	r0, r9, r5
 8011562:	eb4a 0106 	adc.w	r1, sl, r6
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	461d      	mov	r5, r3
 801156c:	f04f 0600 	mov.w	r6, #0
 8011570:	196b      	adds	r3, r5, r5
 8011572:	eb46 0406 	adc.w	r4, r6, r6
 8011576:	461a      	mov	r2, r3
 8011578:	4623      	mov	r3, r4
 801157a:	f7ef fcf3 	bl	8000f64 <__aeabi_uldivmod>
 801157e:	4603      	mov	r3, r0
 8011580:	460c      	mov	r4, r1
 8011582:	461a      	mov	r2, r3
 8011584:	4b6a      	ldr	r3, [pc, #424]	; (8011730 <UART_SetConfig+0x384>)
 8011586:	fba3 1302 	umull	r1, r3, r3, r2
 801158a:	095b      	lsrs	r3, r3, #5
 801158c:	2164      	movs	r1, #100	; 0x64
 801158e:	fb01 f303 	mul.w	r3, r1, r3
 8011592:	1ad3      	subs	r3, r2, r3
 8011594:	00db      	lsls	r3, r3, #3
 8011596:	3332      	adds	r3, #50	; 0x32
 8011598:	4a65      	ldr	r2, [pc, #404]	; (8011730 <UART_SetConfig+0x384>)
 801159a:	fba2 2303 	umull	r2, r3, r2, r3
 801159e:	095b      	lsrs	r3, r3, #5
 80115a0:	f003 0207 	and.w	r2, r3, #7
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	4442      	add	r2, r8
 80115aa:	609a      	str	r2, [r3, #8]
 80115ac:	e26f      	b.n	8011a8e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80115ae:	f7fc fe71 	bl	800e294 <HAL_RCC_GetPCLK1Freq>
 80115b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	461d      	mov	r5, r3
 80115b8:	f04f 0600 	mov.w	r6, #0
 80115bc:	46a8      	mov	r8, r5
 80115be:	46b1      	mov	r9, r6
 80115c0:	eb18 0308 	adds.w	r3, r8, r8
 80115c4:	eb49 0409 	adc.w	r4, r9, r9
 80115c8:	4698      	mov	r8, r3
 80115ca:	46a1      	mov	r9, r4
 80115cc:	eb18 0805 	adds.w	r8, r8, r5
 80115d0:	eb49 0906 	adc.w	r9, r9, r6
 80115d4:	f04f 0100 	mov.w	r1, #0
 80115d8:	f04f 0200 	mov.w	r2, #0
 80115dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80115e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80115e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80115e8:	4688      	mov	r8, r1
 80115ea:	4691      	mov	r9, r2
 80115ec:	eb18 0005 	adds.w	r0, r8, r5
 80115f0:	eb49 0106 	adc.w	r1, r9, r6
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	685b      	ldr	r3, [r3, #4]
 80115f8:	461d      	mov	r5, r3
 80115fa:	f04f 0600 	mov.w	r6, #0
 80115fe:	196b      	adds	r3, r5, r5
 8011600:	eb46 0406 	adc.w	r4, r6, r6
 8011604:	461a      	mov	r2, r3
 8011606:	4623      	mov	r3, r4
 8011608:	f7ef fcac 	bl	8000f64 <__aeabi_uldivmod>
 801160c:	4603      	mov	r3, r0
 801160e:	460c      	mov	r4, r1
 8011610:	461a      	mov	r2, r3
 8011612:	4b47      	ldr	r3, [pc, #284]	; (8011730 <UART_SetConfig+0x384>)
 8011614:	fba3 2302 	umull	r2, r3, r3, r2
 8011618:	095b      	lsrs	r3, r3, #5
 801161a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	461d      	mov	r5, r3
 8011622:	f04f 0600 	mov.w	r6, #0
 8011626:	46a9      	mov	r9, r5
 8011628:	46b2      	mov	sl, r6
 801162a:	eb19 0309 	adds.w	r3, r9, r9
 801162e:	eb4a 040a 	adc.w	r4, sl, sl
 8011632:	4699      	mov	r9, r3
 8011634:	46a2      	mov	sl, r4
 8011636:	eb19 0905 	adds.w	r9, r9, r5
 801163a:	eb4a 0a06 	adc.w	sl, sl, r6
 801163e:	f04f 0100 	mov.w	r1, #0
 8011642:	f04f 0200 	mov.w	r2, #0
 8011646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801164a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801164e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011652:	4689      	mov	r9, r1
 8011654:	4692      	mov	sl, r2
 8011656:	eb19 0005 	adds.w	r0, r9, r5
 801165a:	eb4a 0106 	adc.w	r1, sl, r6
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	461d      	mov	r5, r3
 8011664:	f04f 0600 	mov.w	r6, #0
 8011668:	196b      	adds	r3, r5, r5
 801166a:	eb46 0406 	adc.w	r4, r6, r6
 801166e:	461a      	mov	r2, r3
 8011670:	4623      	mov	r3, r4
 8011672:	f7ef fc77 	bl	8000f64 <__aeabi_uldivmod>
 8011676:	4603      	mov	r3, r0
 8011678:	460c      	mov	r4, r1
 801167a:	461a      	mov	r2, r3
 801167c:	4b2c      	ldr	r3, [pc, #176]	; (8011730 <UART_SetConfig+0x384>)
 801167e:	fba3 1302 	umull	r1, r3, r3, r2
 8011682:	095b      	lsrs	r3, r3, #5
 8011684:	2164      	movs	r1, #100	; 0x64
 8011686:	fb01 f303 	mul.w	r3, r1, r3
 801168a:	1ad3      	subs	r3, r2, r3
 801168c:	00db      	lsls	r3, r3, #3
 801168e:	3332      	adds	r3, #50	; 0x32
 8011690:	4a27      	ldr	r2, [pc, #156]	; (8011730 <UART_SetConfig+0x384>)
 8011692:	fba2 2303 	umull	r2, r3, r2, r3
 8011696:	095b      	lsrs	r3, r3, #5
 8011698:	005b      	lsls	r3, r3, #1
 801169a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801169e:	4498      	add	r8, r3
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	461d      	mov	r5, r3
 80116a4:	f04f 0600 	mov.w	r6, #0
 80116a8:	46a9      	mov	r9, r5
 80116aa:	46b2      	mov	sl, r6
 80116ac:	eb19 0309 	adds.w	r3, r9, r9
 80116b0:	eb4a 040a 	adc.w	r4, sl, sl
 80116b4:	4699      	mov	r9, r3
 80116b6:	46a2      	mov	sl, r4
 80116b8:	eb19 0905 	adds.w	r9, r9, r5
 80116bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80116c0:	f04f 0100 	mov.w	r1, #0
 80116c4:	f04f 0200 	mov.w	r2, #0
 80116c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80116cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80116d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80116d4:	4689      	mov	r9, r1
 80116d6:	4692      	mov	sl, r2
 80116d8:	eb19 0005 	adds.w	r0, r9, r5
 80116dc:	eb4a 0106 	adc.w	r1, sl, r6
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	461d      	mov	r5, r3
 80116e6:	f04f 0600 	mov.w	r6, #0
 80116ea:	196b      	adds	r3, r5, r5
 80116ec:	eb46 0406 	adc.w	r4, r6, r6
 80116f0:	461a      	mov	r2, r3
 80116f2:	4623      	mov	r3, r4
 80116f4:	f7ef fc36 	bl	8000f64 <__aeabi_uldivmod>
 80116f8:	4603      	mov	r3, r0
 80116fa:	460c      	mov	r4, r1
 80116fc:	461a      	mov	r2, r3
 80116fe:	4b0c      	ldr	r3, [pc, #48]	; (8011730 <UART_SetConfig+0x384>)
 8011700:	fba3 1302 	umull	r1, r3, r3, r2
 8011704:	095b      	lsrs	r3, r3, #5
 8011706:	2164      	movs	r1, #100	; 0x64
 8011708:	fb01 f303 	mul.w	r3, r1, r3
 801170c:	1ad3      	subs	r3, r2, r3
 801170e:	00db      	lsls	r3, r3, #3
 8011710:	3332      	adds	r3, #50	; 0x32
 8011712:	4a07      	ldr	r2, [pc, #28]	; (8011730 <UART_SetConfig+0x384>)
 8011714:	fba2 2303 	umull	r2, r3, r2, r3
 8011718:	095b      	lsrs	r3, r3, #5
 801171a:	f003 0207 	and.w	r2, r3, #7
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	4442      	add	r2, r8
 8011724:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8011726:	e1b2      	b.n	8011a8e <UART_SetConfig+0x6e2>
 8011728:	40011000 	.word	0x40011000
 801172c:	40011400 	.word	0x40011400
 8011730:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4ad7      	ldr	r2, [pc, #860]	; (8011a98 <UART_SetConfig+0x6ec>)
 801173a:	4293      	cmp	r3, r2
 801173c:	d005      	beq.n	801174a <UART_SetConfig+0x39e>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	4ad6      	ldr	r2, [pc, #856]	; (8011a9c <UART_SetConfig+0x6f0>)
 8011744:	4293      	cmp	r3, r2
 8011746:	f040 80d1 	bne.w	80118ec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801174a:	f7fc fdb7 	bl	800e2bc <HAL_RCC_GetPCLK2Freq>
 801174e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	469a      	mov	sl, r3
 8011754:	f04f 0b00 	mov.w	fp, #0
 8011758:	46d0      	mov	r8, sl
 801175a:	46d9      	mov	r9, fp
 801175c:	eb18 0308 	adds.w	r3, r8, r8
 8011760:	eb49 0409 	adc.w	r4, r9, r9
 8011764:	4698      	mov	r8, r3
 8011766:	46a1      	mov	r9, r4
 8011768:	eb18 080a 	adds.w	r8, r8, sl
 801176c:	eb49 090b 	adc.w	r9, r9, fp
 8011770:	f04f 0100 	mov.w	r1, #0
 8011774:	f04f 0200 	mov.w	r2, #0
 8011778:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801177c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011780:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011784:	4688      	mov	r8, r1
 8011786:	4691      	mov	r9, r2
 8011788:	eb1a 0508 	adds.w	r5, sl, r8
 801178c:	eb4b 0609 	adc.w	r6, fp, r9
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	685b      	ldr	r3, [r3, #4]
 8011794:	4619      	mov	r1, r3
 8011796:	f04f 0200 	mov.w	r2, #0
 801179a:	f04f 0300 	mov.w	r3, #0
 801179e:	f04f 0400 	mov.w	r4, #0
 80117a2:	0094      	lsls	r4, r2, #2
 80117a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80117a8:	008b      	lsls	r3, r1, #2
 80117aa:	461a      	mov	r2, r3
 80117ac:	4623      	mov	r3, r4
 80117ae:	4628      	mov	r0, r5
 80117b0:	4631      	mov	r1, r6
 80117b2:	f7ef fbd7 	bl	8000f64 <__aeabi_uldivmod>
 80117b6:	4603      	mov	r3, r0
 80117b8:	460c      	mov	r4, r1
 80117ba:	461a      	mov	r2, r3
 80117bc:	4bb8      	ldr	r3, [pc, #736]	; (8011aa0 <UART_SetConfig+0x6f4>)
 80117be:	fba3 2302 	umull	r2, r3, r3, r2
 80117c2:	095b      	lsrs	r3, r3, #5
 80117c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	469b      	mov	fp, r3
 80117cc:	f04f 0c00 	mov.w	ip, #0
 80117d0:	46d9      	mov	r9, fp
 80117d2:	46e2      	mov	sl, ip
 80117d4:	eb19 0309 	adds.w	r3, r9, r9
 80117d8:	eb4a 040a 	adc.w	r4, sl, sl
 80117dc:	4699      	mov	r9, r3
 80117de:	46a2      	mov	sl, r4
 80117e0:	eb19 090b 	adds.w	r9, r9, fp
 80117e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80117e8:	f04f 0100 	mov.w	r1, #0
 80117ec:	f04f 0200 	mov.w	r2, #0
 80117f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80117f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80117f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80117fc:	4689      	mov	r9, r1
 80117fe:	4692      	mov	sl, r2
 8011800:	eb1b 0509 	adds.w	r5, fp, r9
 8011804:	eb4c 060a 	adc.w	r6, ip, sl
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	4619      	mov	r1, r3
 801180e:	f04f 0200 	mov.w	r2, #0
 8011812:	f04f 0300 	mov.w	r3, #0
 8011816:	f04f 0400 	mov.w	r4, #0
 801181a:	0094      	lsls	r4, r2, #2
 801181c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011820:	008b      	lsls	r3, r1, #2
 8011822:	461a      	mov	r2, r3
 8011824:	4623      	mov	r3, r4
 8011826:	4628      	mov	r0, r5
 8011828:	4631      	mov	r1, r6
 801182a:	f7ef fb9b 	bl	8000f64 <__aeabi_uldivmod>
 801182e:	4603      	mov	r3, r0
 8011830:	460c      	mov	r4, r1
 8011832:	461a      	mov	r2, r3
 8011834:	4b9a      	ldr	r3, [pc, #616]	; (8011aa0 <UART_SetConfig+0x6f4>)
 8011836:	fba3 1302 	umull	r1, r3, r3, r2
 801183a:	095b      	lsrs	r3, r3, #5
 801183c:	2164      	movs	r1, #100	; 0x64
 801183e:	fb01 f303 	mul.w	r3, r1, r3
 8011842:	1ad3      	subs	r3, r2, r3
 8011844:	011b      	lsls	r3, r3, #4
 8011846:	3332      	adds	r3, #50	; 0x32
 8011848:	4a95      	ldr	r2, [pc, #596]	; (8011aa0 <UART_SetConfig+0x6f4>)
 801184a:	fba2 2303 	umull	r2, r3, r2, r3
 801184e:	095b      	lsrs	r3, r3, #5
 8011850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011854:	4498      	add	r8, r3
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	469b      	mov	fp, r3
 801185a:	f04f 0c00 	mov.w	ip, #0
 801185e:	46d9      	mov	r9, fp
 8011860:	46e2      	mov	sl, ip
 8011862:	eb19 0309 	adds.w	r3, r9, r9
 8011866:	eb4a 040a 	adc.w	r4, sl, sl
 801186a:	4699      	mov	r9, r3
 801186c:	46a2      	mov	sl, r4
 801186e:	eb19 090b 	adds.w	r9, r9, fp
 8011872:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011876:	f04f 0100 	mov.w	r1, #0
 801187a:	f04f 0200 	mov.w	r2, #0
 801187e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011882:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011886:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801188a:	4689      	mov	r9, r1
 801188c:	4692      	mov	sl, r2
 801188e:	eb1b 0509 	adds.w	r5, fp, r9
 8011892:	eb4c 060a 	adc.w	r6, ip, sl
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	4619      	mov	r1, r3
 801189c:	f04f 0200 	mov.w	r2, #0
 80118a0:	f04f 0300 	mov.w	r3, #0
 80118a4:	f04f 0400 	mov.w	r4, #0
 80118a8:	0094      	lsls	r4, r2, #2
 80118aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80118ae:	008b      	lsls	r3, r1, #2
 80118b0:	461a      	mov	r2, r3
 80118b2:	4623      	mov	r3, r4
 80118b4:	4628      	mov	r0, r5
 80118b6:	4631      	mov	r1, r6
 80118b8:	f7ef fb54 	bl	8000f64 <__aeabi_uldivmod>
 80118bc:	4603      	mov	r3, r0
 80118be:	460c      	mov	r4, r1
 80118c0:	461a      	mov	r2, r3
 80118c2:	4b77      	ldr	r3, [pc, #476]	; (8011aa0 <UART_SetConfig+0x6f4>)
 80118c4:	fba3 1302 	umull	r1, r3, r3, r2
 80118c8:	095b      	lsrs	r3, r3, #5
 80118ca:	2164      	movs	r1, #100	; 0x64
 80118cc:	fb01 f303 	mul.w	r3, r1, r3
 80118d0:	1ad3      	subs	r3, r2, r3
 80118d2:	011b      	lsls	r3, r3, #4
 80118d4:	3332      	adds	r3, #50	; 0x32
 80118d6:	4a72      	ldr	r2, [pc, #456]	; (8011aa0 <UART_SetConfig+0x6f4>)
 80118d8:	fba2 2303 	umull	r2, r3, r2, r3
 80118dc:	095b      	lsrs	r3, r3, #5
 80118de:	f003 020f 	and.w	r2, r3, #15
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	4442      	add	r2, r8
 80118e8:	609a      	str	r2, [r3, #8]
 80118ea:	e0d0      	b.n	8011a8e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80118ec:	f7fc fcd2 	bl	800e294 <HAL_RCC_GetPCLK1Freq>
 80118f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	469a      	mov	sl, r3
 80118f6:	f04f 0b00 	mov.w	fp, #0
 80118fa:	46d0      	mov	r8, sl
 80118fc:	46d9      	mov	r9, fp
 80118fe:	eb18 0308 	adds.w	r3, r8, r8
 8011902:	eb49 0409 	adc.w	r4, r9, r9
 8011906:	4698      	mov	r8, r3
 8011908:	46a1      	mov	r9, r4
 801190a:	eb18 080a 	adds.w	r8, r8, sl
 801190e:	eb49 090b 	adc.w	r9, r9, fp
 8011912:	f04f 0100 	mov.w	r1, #0
 8011916:	f04f 0200 	mov.w	r2, #0
 801191a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801191e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011922:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011926:	4688      	mov	r8, r1
 8011928:	4691      	mov	r9, r2
 801192a:	eb1a 0508 	adds.w	r5, sl, r8
 801192e:	eb4b 0609 	adc.w	r6, fp, r9
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	685b      	ldr	r3, [r3, #4]
 8011936:	4619      	mov	r1, r3
 8011938:	f04f 0200 	mov.w	r2, #0
 801193c:	f04f 0300 	mov.w	r3, #0
 8011940:	f04f 0400 	mov.w	r4, #0
 8011944:	0094      	lsls	r4, r2, #2
 8011946:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801194a:	008b      	lsls	r3, r1, #2
 801194c:	461a      	mov	r2, r3
 801194e:	4623      	mov	r3, r4
 8011950:	4628      	mov	r0, r5
 8011952:	4631      	mov	r1, r6
 8011954:	f7ef fb06 	bl	8000f64 <__aeabi_uldivmod>
 8011958:	4603      	mov	r3, r0
 801195a:	460c      	mov	r4, r1
 801195c:	461a      	mov	r2, r3
 801195e:	4b50      	ldr	r3, [pc, #320]	; (8011aa0 <UART_SetConfig+0x6f4>)
 8011960:	fba3 2302 	umull	r2, r3, r3, r2
 8011964:	095b      	lsrs	r3, r3, #5
 8011966:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	469b      	mov	fp, r3
 801196e:	f04f 0c00 	mov.w	ip, #0
 8011972:	46d9      	mov	r9, fp
 8011974:	46e2      	mov	sl, ip
 8011976:	eb19 0309 	adds.w	r3, r9, r9
 801197a:	eb4a 040a 	adc.w	r4, sl, sl
 801197e:	4699      	mov	r9, r3
 8011980:	46a2      	mov	sl, r4
 8011982:	eb19 090b 	adds.w	r9, r9, fp
 8011986:	eb4a 0a0c 	adc.w	sl, sl, ip
 801198a:	f04f 0100 	mov.w	r1, #0
 801198e:	f04f 0200 	mov.w	r2, #0
 8011992:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011996:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801199a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801199e:	4689      	mov	r9, r1
 80119a0:	4692      	mov	sl, r2
 80119a2:	eb1b 0509 	adds.w	r5, fp, r9
 80119a6:	eb4c 060a 	adc.w	r6, ip, sl
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	4619      	mov	r1, r3
 80119b0:	f04f 0200 	mov.w	r2, #0
 80119b4:	f04f 0300 	mov.w	r3, #0
 80119b8:	f04f 0400 	mov.w	r4, #0
 80119bc:	0094      	lsls	r4, r2, #2
 80119be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80119c2:	008b      	lsls	r3, r1, #2
 80119c4:	461a      	mov	r2, r3
 80119c6:	4623      	mov	r3, r4
 80119c8:	4628      	mov	r0, r5
 80119ca:	4631      	mov	r1, r6
 80119cc:	f7ef faca 	bl	8000f64 <__aeabi_uldivmod>
 80119d0:	4603      	mov	r3, r0
 80119d2:	460c      	mov	r4, r1
 80119d4:	461a      	mov	r2, r3
 80119d6:	4b32      	ldr	r3, [pc, #200]	; (8011aa0 <UART_SetConfig+0x6f4>)
 80119d8:	fba3 1302 	umull	r1, r3, r3, r2
 80119dc:	095b      	lsrs	r3, r3, #5
 80119de:	2164      	movs	r1, #100	; 0x64
 80119e0:	fb01 f303 	mul.w	r3, r1, r3
 80119e4:	1ad3      	subs	r3, r2, r3
 80119e6:	011b      	lsls	r3, r3, #4
 80119e8:	3332      	adds	r3, #50	; 0x32
 80119ea:	4a2d      	ldr	r2, [pc, #180]	; (8011aa0 <UART_SetConfig+0x6f4>)
 80119ec:	fba2 2303 	umull	r2, r3, r2, r3
 80119f0:	095b      	lsrs	r3, r3, #5
 80119f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80119f6:	4498      	add	r8, r3
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	469b      	mov	fp, r3
 80119fc:	f04f 0c00 	mov.w	ip, #0
 8011a00:	46d9      	mov	r9, fp
 8011a02:	46e2      	mov	sl, ip
 8011a04:	eb19 0309 	adds.w	r3, r9, r9
 8011a08:	eb4a 040a 	adc.w	r4, sl, sl
 8011a0c:	4699      	mov	r9, r3
 8011a0e:	46a2      	mov	sl, r4
 8011a10:	eb19 090b 	adds.w	r9, r9, fp
 8011a14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011a18:	f04f 0100 	mov.w	r1, #0
 8011a1c:	f04f 0200 	mov.w	r2, #0
 8011a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011a24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011a28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011a2c:	4689      	mov	r9, r1
 8011a2e:	4692      	mov	sl, r2
 8011a30:	eb1b 0509 	adds.w	r5, fp, r9
 8011a34:	eb4c 060a 	adc.w	r6, ip, sl
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	f04f 0200 	mov.w	r2, #0
 8011a42:	f04f 0300 	mov.w	r3, #0
 8011a46:	f04f 0400 	mov.w	r4, #0
 8011a4a:	0094      	lsls	r4, r2, #2
 8011a4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011a50:	008b      	lsls	r3, r1, #2
 8011a52:	461a      	mov	r2, r3
 8011a54:	4623      	mov	r3, r4
 8011a56:	4628      	mov	r0, r5
 8011a58:	4631      	mov	r1, r6
 8011a5a:	f7ef fa83 	bl	8000f64 <__aeabi_uldivmod>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	460c      	mov	r4, r1
 8011a62:	461a      	mov	r2, r3
 8011a64:	4b0e      	ldr	r3, [pc, #56]	; (8011aa0 <UART_SetConfig+0x6f4>)
 8011a66:	fba3 1302 	umull	r1, r3, r3, r2
 8011a6a:	095b      	lsrs	r3, r3, #5
 8011a6c:	2164      	movs	r1, #100	; 0x64
 8011a6e:	fb01 f303 	mul.w	r3, r1, r3
 8011a72:	1ad3      	subs	r3, r2, r3
 8011a74:	011b      	lsls	r3, r3, #4
 8011a76:	3332      	adds	r3, #50	; 0x32
 8011a78:	4a09      	ldr	r2, [pc, #36]	; (8011aa0 <UART_SetConfig+0x6f4>)
 8011a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8011a7e:	095b      	lsrs	r3, r3, #5
 8011a80:	f003 020f 	and.w	r2, r3, #15
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	4442      	add	r2, r8
 8011a8a:	609a      	str	r2, [r3, #8]
}
 8011a8c:	e7ff      	b.n	8011a8e <UART_SetConfig+0x6e2>
 8011a8e:	bf00      	nop
 8011a90:	3714      	adds	r7, #20
 8011a92:	46bd      	mov	sp, r7
 8011a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a98:	40011000 	.word	0x40011000
 8011a9c:	40011400 	.word	0x40011400
 8011aa0:	51eb851f 	.word	0x51eb851f

08011aa4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8011aa4:	b084      	sub	sp, #16
 8011aa6:	b480      	push	{r7}
 8011aa8:	b085      	sub	sp, #20
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	6078      	str	r0, [r7, #4]
 8011aae:	f107 001c 	add.w	r0, r7, #28
 8011ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011aba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011abc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011abe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011ac2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8011ac6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8011aca:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8011ace:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011ad0:	68fa      	ldr	r2, [r7, #12]
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011ade:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011ae2:	68fa      	ldr	r2, [r7, #12]
 8011ae4:	431a      	orrs	r2, r3
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011aea:	2300      	movs	r3, #0
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3714      	adds	r7, #20
 8011af0:	46bd      	mov	sp, r7
 8011af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af6:	b004      	add	sp, #16
 8011af8:	4770      	bx	lr

08011afa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8011afa:	b480      	push	{r7}
 8011afc:	b083      	sub	sp, #12
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	370c      	adds	r7, #12
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b12:	4770      	bx	lr

08011b14 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8011b14:	b480      	push	{r7}
 8011b16:	b083      	sub	sp, #12
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	681a      	ldr	r2, [r3, #0]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011b28:	2300      	movs	r3, #0
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	370c      	adds	r7, #12
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b34:	4770      	bx	lr

08011b36 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8011b36:	b580      	push	{r7, lr}
 8011b38:	b082      	sub	sp, #8
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2203      	movs	r2, #3
 8011b42:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8011b44:	2002      	movs	r0, #2
 8011b46:	f7f8 f877 	bl	8009c38 <HAL_Delay>
  
  return HAL_OK;
 8011b4a:	2300      	movs	r3, #0
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3708      	adds	r7, #8
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8011b54:	b480      	push	{r7}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	f003 0303 	and.w	r3, r3, #3
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	370c      	adds	r7, #12
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr

08011b70 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8011b70:	b480      	push	{r7}
 8011b72:	b085      	sub	sp, #20
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	681a      	ldr	r2, [r3, #0]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011b8e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011b94:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011b9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011b9c:	68fa      	ldr	r2, [r7, #12]
 8011b9e:	4313      	orrs	r3, r2
 8011ba0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011baa:	f023 030f 	bic.w	r3, r3, #15
 8011bae:	68fa      	ldr	r2, [r7, #12]
 8011bb0:	431a      	orrs	r2, r3
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011bb6:	2300      	movs	r3, #0
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3714      	adds	r7, #20
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr

08011bc4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8011bc4:	b480      	push	{r7}
 8011bc6:	b083      	sub	sp, #12
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	691b      	ldr	r3, [r3, #16]
 8011bd0:	b2db      	uxtb	r3, r3
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	370c      	adds	r7, #12
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bdc:	4770      	bx	lr

08011bde <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8011bde:	b480      	push	{r7}
 8011be0:	b085      	sub	sp, #20
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	6078      	str	r0, [r7, #4]
 8011be6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	3314      	adds	r3, #20
 8011bec:	461a      	mov	r2, r3
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	4413      	add	r3, r2
 8011bf2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	681b      	ldr	r3, [r3, #0]
}  
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3714      	adds	r7, #20
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c02:	4770      	bx	lr

08011c04 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8011c04:	b480      	push	{r7}
 8011c06:	b085      	sub	sp, #20
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	681a      	ldr	r2, [r3, #0]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	685a      	ldr	r2, [r3, #4]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011c2a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011c30:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011c36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011c38:	68fa      	ldr	r2, [r7, #12]
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c42:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	431a      	orrs	r2, r3
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011c4e:	2300      	movs	r3, #0

}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3714      	adds	r7, #20
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr

08011c5c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b088      	sub	sp, #32
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011c6a:	2310      	movs	r3, #16
 8011c6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011c6e:	2340      	movs	r3, #64	; 0x40
 8011c70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011c72:	2300      	movs	r3, #0
 8011c74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011c7c:	f107 0308 	add.w	r3, r7, #8
 8011c80:	4619      	mov	r1, r3
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f7ff ff74 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8011c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c8c:	2110      	movs	r1, #16
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f000 fa40 	bl	8012114 <SDMMC_GetCmdResp1>
 8011c94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c96:	69fb      	ldr	r3, [r7, #28]
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3720      	adds	r7, #32
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b088      	sub	sp, #32
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011cae:	2311      	movs	r3, #17
 8011cb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011cb2:	2340      	movs	r3, #64	; 0x40
 8011cb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011cbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011cc0:	f107 0308 	add.w	r3, r7, #8
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f7ff ff52 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cd0:	2111      	movs	r1, #17
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f000 fa1e 	bl	8012114 <SDMMC_GetCmdResp1>
 8011cd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011cda:	69fb      	ldr	r3, [r7, #28]
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3720      	adds	r7, #32
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}

08011ce4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b088      	sub	sp, #32
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011cf2:	2312      	movs	r3, #18
 8011cf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011cf6:	2340      	movs	r3, #64	; 0x40
 8011cf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011d04:	f107 0308 	add.w	r3, r7, #8
 8011d08:	4619      	mov	r1, r3
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f7ff ff30 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d14:	2112      	movs	r1, #18
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f000 f9fc 	bl	8012114 <SDMMC_GetCmdResp1>
 8011d1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d1e:	69fb      	ldr	r3, [r7, #28]
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3720      	adds	r7, #32
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b088      	sub	sp, #32
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011d36:	2318      	movs	r3, #24
 8011d38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011d3a:	2340      	movs	r3, #64	; 0x40
 8011d3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011d48:	f107 0308 	add.w	r3, r7, #8
 8011d4c:	4619      	mov	r1, r3
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f7ff ff0e 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d58:	2118      	movs	r1, #24
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f000 f9da 	bl	8012114 <SDMMC_GetCmdResp1>
 8011d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d62:	69fb      	ldr	r3, [r7, #28]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3720      	adds	r7, #32
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}

08011d6c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b088      	sub	sp, #32
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011d7a:	2319      	movs	r3, #25
 8011d7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011d7e:	2340      	movs	r3, #64	; 0x40
 8011d80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011d82:	2300      	movs	r3, #0
 8011d84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011d8c:	f107 0308 	add.w	r3, r7, #8
 8011d90:	4619      	mov	r1, r3
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f7ff feec 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d9c:	2119      	movs	r1, #25
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f000 f9b8 	bl	8012114 <SDMMC_GetCmdResp1>
 8011da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011da6:	69fb      	ldr	r3, [r7, #28]
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3720      	adds	r7, #32
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b088      	sub	sp, #32
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011db8:	2300      	movs	r3, #0
 8011dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011dbc:	230c      	movs	r3, #12
 8011dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011dc0:	2340      	movs	r3, #64	; 0x40
 8011dc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011dce:	f107 0308 	add.w	r3, r7, #8
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f7ff fecb 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8011dda:	4a05      	ldr	r2, [pc, #20]	; (8011df0 <SDMMC_CmdStopTransfer+0x40>)
 8011ddc:	210c      	movs	r1, #12
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f000 f998 	bl	8012114 <SDMMC_GetCmdResp1>
 8011de4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011de6:	69fb      	ldr	r3, [r7, #28]
}
 8011de8:	4618      	mov	r0, r3
 8011dea:	3720      	adds	r7, #32
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}
 8011df0:	05f5e100 	.word	0x05f5e100

08011df4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b08a      	sub	sp, #40	; 0x28
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	60f8      	str	r0, [r7, #12]
 8011dfc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011e04:	2307      	movs	r3, #7
 8011e06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011e08:	2340      	movs	r3, #64	; 0x40
 8011e0a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e14:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011e16:	f107 0310 	add.w	r3, r7, #16
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	68f8      	ldr	r0, [r7, #12]
 8011e1e:	f7ff fea7 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8011e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e26:	2107      	movs	r1, #7
 8011e28:	68f8      	ldr	r0, [r7, #12]
 8011e2a:	f000 f973 	bl	8012114 <SDMMC_GetCmdResp1>
 8011e2e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	3728      	adds	r7, #40	; 0x28
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}

08011e3a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8011e3a:	b580      	push	{r7, lr}
 8011e3c:	b088      	sub	sp, #32
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8011e42:	2300      	movs	r3, #0
 8011e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011e46:	2300      	movs	r3, #0
 8011e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011e58:	f107 0308 	add.w	r3, r7, #8
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f7ff fe86 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	f000 f92d 	bl	80120c4 <SDMMC_GetCmdError>
 8011e6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e6c:	69fb      	ldr	r3, [r7, #28]
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3720      	adds	r7, #32
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b088      	sub	sp, #32
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011e7e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011e82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011e84:	2308      	movs	r3, #8
 8011e86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011e88:	2340      	movs	r3, #64	; 0x40
 8011e8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011e96:	f107 0308 	add.w	r3, r7, #8
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f7ff fe67 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f000 fb16 	bl	80124d4 <SDMMC_GetCmdResp7>
 8011ea8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011eaa:	69fb      	ldr	r3, [r7, #28]
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3720      	adds	r7, #32
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b088      	sub	sp, #32
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011ec2:	2337      	movs	r3, #55	; 0x37
 8011ec4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011ec6:	2340      	movs	r3, #64	; 0x40
 8011ec8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ed2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011ed4:	f107 0308 	add.w	r3, r7, #8
 8011ed8:	4619      	mov	r1, r3
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f7ff fe48 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8011ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ee4:	2137      	movs	r1, #55	; 0x37
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f000 f914 	bl	8012114 <SDMMC_GetCmdResp1>
 8011eec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011eee:	69fb      	ldr	r3, [r7, #28]
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3720      	adds	r7, #32
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b088      	sub	sp, #32
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011f0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011f0e:	2329      	movs	r3, #41	; 0x29
 8011f10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f12:	2340      	movs	r3, #64	; 0x40
 8011f14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011f16:	2300      	movs	r3, #0
 8011f18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f20:	f107 0308 	add.w	r3, r7, #8
 8011f24:	4619      	mov	r1, r3
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f7ff fe22 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f000 fa23 	bl	8012378 <SDMMC_GetCmdResp3>
 8011f32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f34:	69fb      	ldr	r3, [r7, #28]
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3720      	adds	r7, #32
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}

08011f3e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8011f3e:	b580      	push	{r7, lr}
 8011f40:	b088      	sub	sp, #32
 8011f42:	af00      	add	r7, sp, #0
 8011f44:	6078      	str	r0, [r7, #4]
 8011f46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011f4c:	2306      	movs	r3, #6
 8011f4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f50:	2340      	movs	r3, #64	; 0x40
 8011f52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011f54:	2300      	movs	r3, #0
 8011f56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f5e:	f107 0308 	add.w	r3, r7, #8
 8011f62:	4619      	mov	r1, r3
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f7ff fe03 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8011f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f6e:	2106      	movs	r1, #6
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f000 f8cf 	bl	8012114 <SDMMC_GetCmdResp1>
 8011f76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f78:	69fb      	ldr	r3, [r7, #28]
}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	3720      	adds	r7, #32
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}

08011f82 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8011f82:	b580      	push	{r7, lr}
 8011f84:	b088      	sub	sp, #32
 8011f86:	af00      	add	r7, sp, #0
 8011f88:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011f8e:	2333      	movs	r3, #51	; 0x33
 8011f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f92:	2340      	movs	r3, #64	; 0x40
 8011f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011f96:	2300      	movs	r3, #0
 8011f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011fa0:	f107 0308 	add.w	r3, r7, #8
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f7ff fde2 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8011fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fb0:	2133      	movs	r1, #51	; 0x33
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f000 f8ae 	bl	8012114 <SDMMC_GetCmdResp1>
 8011fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fba:	69fb      	ldr	r3, [r7, #28]
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3720      	adds	r7, #32
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b088      	sub	sp, #32
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011fd0:	2302      	movs	r3, #2
 8011fd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8011fd4:	23c0      	movs	r3, #192	; 0xc0
 8011fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fe0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011fe2:	f107 0308 	add.w	r3, r7, #8
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	6878      	ldr	r0, [r7, #4]
 8011fea:	f7ff fdc1 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f000 f97c 	bl	80122ec <SDMMC_GetCmdResp2>
 8011ff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ff6:	69fb      	ldr	r3, [r7, #28]
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3720      	adds	r7, #32
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}

08012000 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b088      	sub	sp, #32
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801200e:	2309      	movs	r3, #9
 8012010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8012012:	23c0      	movs	r3, #192	; 0xc0
 8012014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012016:	2300      	movs	r3, #0
 8012018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801201a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801201e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012020:	f107 0308 	add.w	r3, r7, #8
 8012024:	4619      	mov	r1, r3
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f7ff fda2 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f000 f95d 	bl	80122ec <SDMMC_GetCmdResp2>
 8012032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012034:	69fb      	ldr	r3, [r7, #28]
}
 8012036:	4618      	mov	r0, r3
 8012038:	3720      	adds	r7, #32
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}

0801203e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801203e:	b580      	push	{r7, lr}
 8012040:	b088      	sub	sp, #32
 8012042:	af00      	add	r7, sp, #0
 8012044:	6078      	str	r0, [r7, #4]
 8012046:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012048:	2300      	movs	r3, #0
 801204a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801204c:	2303      	movs	r3, #3
 801204e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012050:	2340      	movs	r3, #64	; 0x40
 8012052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012054:	2300      	movs	r3, #0
 8012056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801205c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801205e:	f107 0308 	add.w	r3, r7, #8
 8012062:	4619      	mov	r1, r3
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f7ff fd83 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801206a:	683a      	ldr	r2, [r7, #0]
 801206c:	2103      	movs	r1, #3
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f000 f9bc 	bl	80123ec <SDMMC_GetCmdResp6>
 8012074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012076:	69fb      	ldr	r3, [r7, #28]
}
 8012078:	4618      	mov	r0, r3
 801207a:	3720      	adds	r7, #32
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b088      	sub	sp, #32
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
 8012088:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801208e:	230d      	movs	r3, #13
 8012090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012092:	2340      	movs	r3, #64	; 0x40
 8012094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012096:	2300      	movs	r3, #0
 8012098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801209a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801209e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80120a0:	f107 0308 	add.w	r3, r7, #8
 80120a4:	4619      	mov	r1, r3
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f7ff fd62 	bl	8011b70 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80120ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80120b0:	210d      	movs	r1, #13
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f000 f82e 	bl	8012114 <SDMMC_GetCmdResp1>
 80120b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120ba:	69fb      	ldr	r3, [r7, #28]
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3720      	adds	r7, #32
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80120c4:	b490      	push	{r4, r7}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80120cc:	4b0f      	ldr	r3, [pc, #60]	; (801210c <SDMMC_GetCmdError+0x48>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	4a0f      	ldr	r2, [pc, #60]	; (8012110 <SDMMC_GetCmdError+0x4c>)
 80120d2:	fba2 2303 	umull	r2, r3, r2, r3
 80120d6:	0a5b      	lsrs	r3, r3, #9
 80120d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80120dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80120e0:	4623      	mov	r3, r4
 80120e2:	1e5c      	subs	r4, r3, #1
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d102      	bne.n	80120ee <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80120e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80120ec:	e009      	b.n	8012102 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d0f2      	beq.n	80120e0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	22c5      	movs	r2, #197	; 0xc5
 80120fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012100:	2300      	movs	r3, #0
}
 8012102:	4618      	mov	r0, r3
 8012104:	3708      	adds	r7, #8
 8012106:	46bd      	mov	sp, r7
 8012108:	bc90      	pop	{r4, r7}
 801210a:	4770      	bx	lr
 801210c:	20000108 	.word	0x20000108
 8012110:	10624dd3 	.word	0x10624dd3

08012114 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012114:	b590      	push	{r4, r7, lr}
 8012116:	b087      	sub	sp, #28
 8012118:	af00      	add	r7, sp, #0
 801211a:	60f8      	str	r0, [r7, #12]
 801211c:	460b      	mov	r3, r1
 801211e:	607a      	str	r2, [r7, #4]
 8012120:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012122:	4b6f      	ldr	r3, [pc, #444]	; (80122e0 <SDMMC_GetCmdResp1+0x1cc>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	4a6f      	ldr	r2, [pc, #444]	; (80122e4 <SDMMC_GetCmdResp1+0x1d0>)
 8012128:	fba2 2303 	umull	r2, r3, r2, r3
 801212c:	0a5b      	lsrs	r3, r3, #9
 801212e:	687a      	ldr	r2, [r7, #4]
 8012130:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012134:	4623      	mov	r3, r4
 8012136:	1e5c      	subs	r4, r3, #1
 8012138:	2b00      	cmp	r3, #0
 801213a:	d102      	bne.n	8012142 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801213c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012140:	e0c9      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012146:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801214e:	2b00      	cmp	r3, #0
 8012150:	d0f0      	beq.n	8012134 <SDMMC_GetCmdResp1+0x20>
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012158:	2b00      	cmp	r3, #0
 801215a:	d1eb      	bne.n	8012134 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012160:	f003 0304 	and.w	r3, r3, #4
 8012164:	2b00      	cmp	r3, #0
 8012166:	d004      	beq.n	8012172 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2204      	movs	r2, #4
 801216c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801216e:	2304      	movs	r3, #4
 8012170:	e0b1      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012176:	f003 0301 	and.w	r3, r3, #1
 801217a:	2b00      	cmp	r3, #0
 801217c:	d004      	beq.n	8012188 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2201      	movs	r2, #1
 8012182:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012184:	2301      	movs	r3, #1
 8012186:	e0a6      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	22c5      	movs	r2, #197	; 0xc5
 801218c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801218e:	68f8      	ldr	r0, [r7, #12]
 8012190:	f7ff fd18 	bl	8011bc4 <SDIO_GetCommandResponse>
 8012194:	4603      	mov	r3, r0
 8012196:	461a      	mov	r2, r3
 8012198:	7afb      	ldrb	r3, [r7, #11]
 801219a:	4293      	cmp	r3, r2
 801219c:	d001      	beq.n	80121a2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801219e:	2301      	movs	r3, #1
 80121a0:	e099      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80121a2:	2100      	movs	r1, #0
 80121a4:	68f8      	ldr	r0, [r7, #12]
 80121a6:	f7ff fd1a 	bl	8011bde <SDIO_GetResponse>
 80121aa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80121ac:	693a      	ldr	r2, [r7, #16]
 80121ae:	4b4e      	ldr	r3, [pc, #312]	; (80122e8 <SDMMC_GetCmdResp1+0x1d4>)
 80121b0:	4013      	ands	r3, r2
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d101      	bne.n	80121ba <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80121b6:	2300      	movs	r3, #0
 80121b8:	e08d      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	da02      	bge.n	80121c6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80121c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80121c4:	e087      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d001      	beq.n	80121d4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80121d0:	2340      	movs	r3, #64	; 0x40
 80121d2:	e080      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d001      	beq.n	80121e2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80121de:	2380      	movs	r3, #128	; 0x80
 80121e0:	e079      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d002      	beq.n	80121f2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80121ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121f0:	e071      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80121f2:	693b      	ldr	r3, [r7, #16]
 80121f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d002      	beq.n	8012202 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80121fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012200:	e069      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012208:	2b00      	cmp	r3, #0
 801220a:	d002      	beq.n	8012212 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801220c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012210:	e061      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012212:	693b      	ldr	r3, [r7, #16]
 8012214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012218:	2b00      	cmp	r3, #0
 801221a:	d002      	beq.n	8012222 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801221c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012220:	e059      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012228:	2b00      	cmp	r3, #0
 801222a:	d002      	beq.n	8012232 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801222c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012230:	e051      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012232:	693b      	ldr	r3, [r7, #16]
 8012234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012238:	2b00      	cmp	r3, #0
 801223a:	d002      	beq.n	8012242 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801223c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012240:	e049      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012248:	2b00      	cmp	r3, #0
 801224a:	d002      	beq.n	8012252 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801224c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012250:	e041      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012258:	2b00      	cmp	r3, #0
 801225a:	d002      	beq.n	8012262 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 801225c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012260:	e039      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012268:	2b00      	cmp	r3, #0
 801226a:	d002      	beq.n	8012272 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801226c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012270:	e031      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012278:	2b00      	cmp	r3, #0
 801227a:	d002      	beq.n	8012282 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801227c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012280:	e029      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012288:	2b00      	cmp	r3, #0
 801228a:	d002      	beq.n	8012292 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801228c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012290:	e021      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012298:	2b00      	cmp	r3, #0
 801229a:	d002      	beq.n	80122a2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801229c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80122a0:	e019      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80122a2:	693b      	ldr	r3, [r7, #16]
 80122a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d002      	beq.n	80122b2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80122ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80122b0:	e011      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d002      	beq.n	80122c2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80122bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80122c0:	e009      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80122c2:	693b      	ldr	r3, [r7, #16]
 80122c4:	f003 0308 	and.w	r3, r3, #8
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d002      	beq.n	80122d2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80122cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80122d0:	e001      	b.n	80122d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80122d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	371c      	adds	r7, #28
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd90      	pop	{r4, r7, pc}
 80122de:	bf00      	nop
 80122e0:	20000108 	.word	0x20000108
 80122e4:	10624dd3 	.word	0x10624dd3
 80122e8:	fdffe008 	.word	0xfdffe008

080122ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80122ec:	b490      	push	{r4, r7}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80122f4:	4b1e      	ldr	r3, [pc, #120]	; (8012370 <SDMMC_GetCmdResp2+0x84>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	4a1e      	ldr	r2, [pc, #120]	; (8012374 <SDMMC_GetCmdResp2+0x88>)
 80122fa:	fba2 2303 	umull	r2, r3, r2, r3
 80122fe:	0a5b      	lsrs	r3, r3, #9
 8012300:	f241 3288 	movw	r2, #5000	; 0x1388
 8012304:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012308:	4623      	mov	r3, r4
 801230a:	1e5c      	subs	r4, r3, #1
 801230c:	2b00      	cmp	r3, #0
 801230e:	d102      	bne.n	8012316 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012310:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012314:	e026      	b.n	8012364 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801231a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012322:	2b00      	cmp	r3, #0
 8012324:	d0f0      	beq.n	8012308 <SDMMC_GetCmdResp2+0x1c>
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801232c:	2b00      	cmp	r3, #0
 801232e:	d1eb      	bne.n	8012308 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012334:	f003 0304 	and.w	r3, r3, #4
 8012338:	2b00      	cmp	r3, #0
 801233a:	d004      	beq.n	8012346 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2204      	movs	r2, #4
 8012340:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012342:	2304      	movs	r3, #4
 8012344:	e00e      	b.n	8012364 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801234a:	f003 0301 	and.w	r3, r3, #1
 801234e:	2b00      	cmp	r3, #0
 8012350:	d004      	beq.n	801235c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2201      	movs	r2, #1
 8012356:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012358:	2301      	movs	r3, #1
 801235a:	e003      	b.n	8012364 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	22c5      	movs	r2, #197	; 0xc5
 8012360:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012362:	2300      	movs	r3, #0
}
 8012364:	4618      	mov	r0, r3
 8012366:	3710      	adds	r7, #16
 8012368:	46bd      	mov	sp, r7
 801236a:	bc90      	pop	{r4, r7}
 801236c:	4770      	bx	lr
 801236e:	bf00      	nop
 8012370:	20000108 	.word	0x20000108
 8012374:	10624dd3 	.word	0x10624dd3

08012378 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8012378:	b490      	push	{r4, r7}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012380:	4b18      	ldr	r3, [pc, #96]	; (80123e4 <SDMMC_GetCmdResp3+0x6c>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	4a18      	ldr	r2, [pc, #96]	; (80123e8 <SDMMC_GetCmdResp3+0x70>)
 8012386:	fba2 2303 	umull	r2, r3, r2, r3
 801238a:	0a5b      	lsrs	r3, r3, #9
 801238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012390:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012394:	4623      	mov	r3, r4
 8012396:	1e5c      	subs	r4, r3, #1
 8012398:	2b00      	cmp	r3, #0
 801239a:	d102      	bne.n	80123a2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801239c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80123a0:	e01b      	b.n	80123da <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d0f0      	beq.n	8012394 <SDMMC_GetCmdResp3+0x1c>
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d1eb      	bne.n	8012394 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123c0:	f003 0304 	and.w	r3, r3, #4
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d004      	beq.n	80123d2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2204      	movs	r2, #4
 80123cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80123ce:	2304      	movs	r3, #4
 80123d0:	e003      	b.n	80123da <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	22c5      	movs	r2, #197	; 0xc5
 80123d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80123d8:	2300      	movs	r3, #0
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3710      	adds	r7, #16
 80123de:	46bd      	mov	sp, r7
 80123e0:	bc90      	pop	{r4, r7}
 80123e2:	4770      	bx	lr
 80123e4:	20000108 	.word	0x20000108
 80123e8:	10624dd3 	.word	0x10624dd3

080123ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80123ec:	b590      	push	{r4, r7, lr}
 80123ee:	b087      	sub	sp, #28
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	460b      	mov	r3, r1
 80123f6:	607a      	str	r2, [r7, #4]
 80123f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80123fa:	4b34      	ldr	r3, [pc, #208]	; (80124cc <SDMMC_GetCmdResp6+0xe0>)
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	4a34      	ldr	r2, [pc, #208]	; (80124d0 <SDMMC_GetCmdResp6+0xe4>)
 8012400:	fba2 2303 	umull	r2, r3, r2, r3
 8012404:	0a5b      	lsrs	r3, r3, #9
 8012406:	f241 3288 	movw	r2, #5000	; 0x1388
 801240a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801240e:	4623      	mov	r3, r4
 8012410:	1e5c      	subs	r4, r3, #1
 8012412:	2b00      	cmp	r3, #0
 8012414:	d102      	bne.n	801241c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012416:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801241a:	e052      	b.n	80124c2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012420:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012428:	2b00      	cmp	r3, #0
 801242a:	d0f0      	beq.n	801240e <SDMMC_GetCmdResp6+0x22>
 801242c:	697b      	ldr	r3, [r7, #20]
 801242e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012432:	2b00      	cmp	r3, #0
 8012434:	d1eb      	bne.n	801240e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801243a:	f003 0304 	and.w	r3, r3, #4
 801243e:	2b00      	cmp	r3, #0
 8012440:	d004      	beq.n	801244c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	2204      	movs	r2, #4
 8012446:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012448:	2304      	movs	r3, #4
 801244a:	e03a      	b.n	80124c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012450:	f003 0301 	and.w	r3, r3, #1
 8012454:	2b00      	cmp	r3, #0
 8012456:	d004      	beq.n	8012462 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	2201      	movs	r2, #1
 801245c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801245e:	2301      	movs	r3, #1
 8012460:	e02f      	b.n	80124c2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8012462:	68f8      	ldr	r0, [r7, #12]
 8012464:	f7ff fbae 	bl	8011bc4 <SDIO_GetCommandResponse>
 8012468:	4603      	mov	r3, r0
 801246a:	461a      	mov	r2, r3
 801246c:	7afb      	ldrb	r3, [r7, #11]
 801246e:	4293      	cmp	r3, r2
 8012470:	d001      	beq.n	8012476 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012472:	2301      	movs	r3, #1
 8012474:	e025      	b.n	80124c2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	22c5      	movs	r2, #197	; 0xc5
 801247a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801247c:	2100      	movs	r1, #0
 801247e:	68f8      	ldr	r0, [r7, #12]
 8012480:	f7ff fbad 	bl	8011bde <SDIO_GetResponse>
 8012484:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801248c:	2b00      	cmp	r3, #0
 801248e:	d106      	bne.n	801249e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	0c1b      	lsrs	r3, r3, #16
 8012494:	b29a      	uxth	r2, r3
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801249a:	2300      	movs	r3, #0
 801249c:	e011      	b.n	80124c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d002      	beq.n	80124ae <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80124a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80124ac:	e009      	b.n	80124c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80124ae:	693b      	ldr	r3, [r7, #16]
 80124b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d002      	beq.n	80124be <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80124b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124bc:	e001      	b.n	80124c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80124be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	371c      	adds	r7, #28
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd90      	pop	{r4, r7, pc}
 80124ca:	bf00      	nop
 80124cc:	20000108 	.word	0x20000108
 80124d0:	10624dd3 	.word	0x10624dd3

080124d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80124d4:	b490      	push	{r4, r7}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80124dc:	4b21      	ldr	r3, [pc, #132]	; (8012564 <SDMMC_GetCmdResp7+0x90>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	4a21      	ldr	r2, [pc, #132]	; (8012568 <SDMMC_GetCmdResp7+0x94>)
 80124e2:	fba2 2303 	umull	r2, r3, r2, r3
 80124e6:	0a5b      	lsrs	r3, r3, #9
 80124e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80124ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80124f0:	4623      	mov	r3, r4
 80124f2:	1e5c      	subs	r4, r3, #1
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d102      	bne.n	80124fe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80124f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80124fc:	e02c      	b.n	8012558 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012502:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801250a:	2b00      	cmp	r3, #0
 801250c:	d0f0      	beq.n	80124f0 <SDMMC_GetCmdResp7+0x1c>
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012514:	2b00      	cmp	r3, #0
 8012516:	d1eb      	bne.n	80124f0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801251c:	f003 0304 	and.w	r3, r3, #4
 8012520:	2b00      	cmp	r3, #0
 8012522:	d004      	beq.n	801252e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2204      	movs	r2, #4
 8012528:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801252a:	2304      	movs	r3, #4
 801252c:	e014      	b.n	8012558 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012532:	f003 0301 	and.w	r3, r3, #1
 8012536:	2b00      	cmp	r3, #0
 8012538:	d004      	beq.n	8012544 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2201      	movs	r2, #1
 801253e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012540:	2301      	movs	r3, #1
 8012542:	e009      	b.n	8012558 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801254c:	2b00      	cmp	r3, #0
 801254e:	d002      	beq.n	8012556 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	2240      	movs	r2, #64	; 0x40
 8012554:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012556:	2300      	movs	r3, #0
  
}
 8012558:	4618      	mov	r0, r3
 801255a:	3710      	adds	r7, #16
 801255c:	46bd      	mov	sp, r7
 801255e:	bc90      	pop	{r4, r7}
 8012560:	4770      	bx	lr
 8012562:	bf00      	nop
 8012564:	20000108 	.word	0x20000108
 8012568:	10624dd3 	.word	0x10624dd3

0801256c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801256c:	b084      	sub	sp, #16
 801256e:	b580      	push	{r7, lr}
 8012570:	b084      	sub	sp, #16
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
 8012576:	f107 001c 	add.w	r0, r7, #28
 801257a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012580:	2b01      	cmp	r3, #1
 8012582:	d122      	bne.n	80125ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012588:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8012598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801259c:	687a      	ldr	r2, [r7, #4]
 801259e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	68db      	ldr	r3, [r3, #12]
 80125a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80125ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ae:	2b01      	cmp	r3, #1
 80125b0:	d105      	bne.n	80125be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f000 fa4e 	bl	8012a60 <USB_CoreReset>
 80125c4:	4603      	mov	r3, r0
 80125c6:	73fb      	strb	r3, [r7, #15]
 80125c8:	e01a      	b.n	8012600 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	68db      	ldr	r3, [r3, #12]
 80125ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f000 fa42 	bl	8012a60 <USB_CoreReset>
 80125dc:	4603      	mov	r3, r0
 80125de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80125e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d106      	bne.n	80125f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	639a      	str	r2, [r3, #56]	; 0x38
 80125f2:	e005      	b.n	8012600 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012602:	2b01      	cmp	r3, #1
 8012604:	d10b      	bne.n	801261e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	689b      	ldr	r3, [r3, #8]
 801260a:	f043 0206 	orr.w	r2, r3, #6
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	689b      	ldr	r3, [r3, #8]
 8012616:	f043 0220 	orr.w	r2, r3, #32
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801261e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012620:	4618      	mov	r0, r3
 8012622:	3710      	adds	r7, #16
 8012624:	46bd      	mov	sp, r7
 8012626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801262a:	b004      	add	sp, #16
 801262c:	4770      	bx	lr

0801262e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801262e:	b480      	push	{r7}
 8012630:	b083      	sub	sp, #12
 8012632:	af00      	add	r7, sp, #0
 8012634:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	689b      	ldr	r3, [r3, #8]
 801263a:	f023 0201 	bic.w	r2, r3, #1
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012642:	2300      	movs	r3, #0
}
 8012644:	4618      	mov	r0, r3
 8012646:	370c      	adds	r7, #12
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr

08012650 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b082      	sub	sp, #8
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
 8012658:	460b      	mov	r3, r1
 801265a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	68db      	ldr	r3, [r3, #12]
 8012660:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012668:	78fb      	ldrb	r3, [r7, #3]
 801266a:	2b01      	cmp	r3, #1
 801266c:	d106      	bne.n	801267c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	68db      	ldr	r3, [r3, #12]
 8012672:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	60da      	str	r2, [r3, #12]
 801267a:	e00b      	b.n	8012694 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 801267c:	78fb      	ldrb	r3, [r7, #3]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d106      	bne.n	8012690 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	68db      	ldr	r3, [r3, #12]
 8012686:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	60da      	str	r2, [r3, #12]
 801268e:	e001      	b.n	8012694 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8012690:	2301      	movs	r3, #1
 8012692:	e003      	b.n	801269c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8012694:	2032      	movs	r0, #50	; 0x32
 8012696:	f7f7 facf 	bl	8009c38 <HAL_Delay>

  return HAL_OK;
 801269a:	2300      	movs	r3, #0
}
 801269c:	4618      	mov	r0, r3
 801269e:	3708      	adds	r7, #8
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80126a4:	b084      	sub	sp, #16
 80126a6:	b580      	push	{r7, lr}
 80126a8:	b086      	sub	sp, #24
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	6078      	str	r0, [r7, #4]
 80126ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80126b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80126b6:	2300      	movs	r3, #0
 80126b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80126be:	2300      	movs	r3, #0
 80126c0:	613b      	str	r3, [r7, #16]
 80126c2:	e009      	b.n	80126d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	693b      	ldr	r3, [r7, #16]
 80126c8:	3340      	adds	r3, #64	; 0x40
 80126ca:	009b      	lsls	r3, r3, #2
 80126cc:	4413      	add	r3, r2
 80126ce:	2200      	movs	r2, #0
 80126d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	3301      	adds	r3, #1
 80126d6:	613b      	str	r3, [r7, #16]
 80126d8:	693b      	ldr	r3, [r7, #16]
 80126da:	2b0e      	cmp	r3, #14
 80126dc:	d9f2      	bls.n	80126c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80126de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d11c      	bne.n	801271e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	68fa      	ldr	r2, [r7, #12]
 80126ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80126f2:	f043 0302 	orr.w	r3, r3, #2
 80126f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012708:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012714:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	639a      	str	r2, [r3, #56]	; 0x38
 801271c:	e00b      	b.n	8012736 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012722:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801272e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801273c:	461a      	mov	r2, r3
 801273e:	2300      	movs	r3, #0
 8012740:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012748:	4619      	mov	r1, r3
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012750:	461a      	mov	r2, r3
 8012752:	680b      	ldr	r3, [r1, #0]
 8012754:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012758:	2b01      	cmp	r3, #1
 801275a:	d10c      	bne.n	8012776 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801275e:	2b00      	cmp	r3, #0
 8012760:	d104      	bne.n	801276c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012762:	2100      	movs	r1, #0
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f000 f949 	bl	80129fc <USB_SetDevSpeed>
 801276a:	e008      	b.n	801277e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801276c:	2101      	movs	r1, #1
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f000 f944 	bl	80129fc <USB_SetDevSpeed>
 8012774:	e003      	b.n	801277e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012776:	2103      	movs	r1, #3
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f000 f93f 	bl	80129fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801277e:	2110      	movs	r1, #16
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f000 f8f3 	bl	801296c <USB_FlushTxFifo>
 8012786:	4603      	mov	r3, r0
 8012788:	2b00      	cmp	r3, #0
 801278a:	d001      	beq.n	8012790 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 801278c:	2301      	movs	r3, #1
 801278e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 f911 	bl	80129b8 <USB_FlushRxFifo>
 8012796:	4603      	mov	r3, r0
 8012798:	2b00      	cmp	r3, #0
 801279a:	d001      	beq.n	80127a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 801279c:	2301      	movs	r3, #1
 801279e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127a6:	461a      	mov	r2, r3
 80127a8:	2300      	movs	r3, #0
 80127aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127b2:	461a      	mov	r2, r3
 80127b4:	2300      	movs	r3, #0
 80127b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127be:	461a      	mov	r2, r3
 80127c0:	2300      	movs	r3, #0
 80127c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80127c4:	2300      	movs	r3, #0
 80127c6:	613b      	str	r3, [r7, #16]
 80127c8:	e043      	b.n	8012852 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	015a      	lsls	r2, r3, #5
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	4413      	add	r3, r2
 80127d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80127dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80127e0:	d118      	bne.n	8012814 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d10a      	bne.n	80127fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	015a      	lsls	r2, r3, #5
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	4413      	add	r3, r2
 80127f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127f4:	461a      	mov	r2, r3
 80127f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80127fa:	6013      	str	r3, [r2, #0]
 80127fc:	e013      	b.n	8012826 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	015a      	lsls	r2, r3, #5
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	4413      	add	r3, r2
 8012806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801280a:	461a      	mov	r2, r3
 801280c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012810:	6013      	str	r3, [r2, #0]
 8012812:	e008      	b.n	8012826 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	015a      	lsls	r2, r3, #5
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	4413      	add	r3, r2
 801281c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012820:	461a      	mov	r2, r3
 8012822:	2300      	movs	r3, #0
 8012824:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	015a      	lsls	r2, r3, #5
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	4413      	add	r3, r2
 801282e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012832:	461a      	mov	r2, r3
 8012834:	2300      	movs	r3, #0
 8012836:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	015a      	lsls	r2, r3, #5
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	4413      	add	r3, r2
 8012840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012844:	461a      	mov	r2, r3
 8012846:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801284a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	3301      	adds	r3, #1
 8012850:	613b      	str	r3, [r7, #16]
 8012852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012854:	693a      	ldr	r2, [r7, #16]
 8012856:	429a      	cmp	r2, r3
 8012858:	d3b7      	bcc.n	80127ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801285a:	2300      	movs	r3, #0
 801285c:	613b      	str	r3, [r7, #16]
 801285e:	e043      	b.n	80128e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	015a      	lsls	r2, r3, #5
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	4413      	add	r3, r2
 8012868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012876:	d118      	bne.n	80128aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8012878:	693b      	ldr	r3, [r7, #16]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d10a      	bne.n	8012894 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	015a      	lsls	r2, r3, #5
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	4413      	add	r3, r2
 8012886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801288a:	461a      	mov	r2, r3
 801288c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012890:	6013      	str	r3, [r2, #0]
 8012892:	e013      	b.n	80128bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	015a      	lsls	r2, r3, #5
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	4413      	add	r3, r2
 801289c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128a0:	461a      	mov	r2, r3
 80128a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80128a6:	6013      	str	r3, [r2, #0]
 80128a8:	e008      	b.n	80128bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80128aa:	693b      	ldr	r3, [r7, #16]
 80128ac:	015a      	lsls	r2, r3, #5
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	4413      	add	r3, r2
 80128b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128b6:	461a      	mov	r2, r3
 80128b8:	2300      	movs	r3, #0
 80128ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	015a      	lsls	r2, r3, #5
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	4413      	add	r3, r2
 80128c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128c8:	461a      	mov	r2, r3
 80128ca:	2300      	movs	r3, #0
 80128cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80128ce:	693b      	ldr	r3, [r7, #16]
 80128d0:	015a      	lsls	r2, r3, #5
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	4413      	add	r3, r2
 80128d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128da:	461a      	mov	r2, r3
 80128dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80128e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	3301      	adds	r3, #1
 80128e6:	613b      	str	r3, [r7, #16]
 80128e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ea:	693a      	ldr	r2, [r7, #16]
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d3b7      	bcc.n	8012860 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128f6:	691b      	ldr	r3, [r3, #16]
 80128f8:	68fa      	ldr	r2, [r7, #12]
 80128fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80128fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012902:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2200      	movs	r2, #0
 8012908:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012910:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012914:	2b00      	cmp	r3, #0
 8012916:	d105      	bne.n	8012924 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	699b      	ldr	r3, [r3, #24]
 801291c:	f043 0210 	orr.w	r2, r3, #16
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	699a      	ldr	r2, [r3, #24]
 8012928:	4b0f      	ldr	r3, [pc, #60]	; (8012968 <USB_DevInit+0x2c4>)
 801292a:	4313      	orrs	r3, r2
 801292c:	687a      	ldr	r2, [r7, #4]
 801292e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012932:	2b00      	cmp	r3, #0
 8012934:	d005      	beq.n	8012942 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	699b      	ldr	r3, [r3, #24]
 801293a:	f043 0208 	orr.w	r2, r3, #8
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012944:	2b01      	cmp	r3, #1
 8012946:	d107      	bne.n	8012958 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	699b      	ldr	r3, [r3, #24]
 801294c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012950:	f043 0304 	orr.w	r3, r3, #4
 8012954:	687a      	ldr	r2, [r7, #4]
 8012956:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012958:	7dfb      	ldrb	r3, [r7, #23]
}
 801295a:	4618      	mov	r0, r3
 801295c:	3718      	adds	r7, #24
 801295e:	46bd      	mov	sp, r7
 8012960:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012964:	b004      	add	sp, #16
 8012966:	4770      	bx	lr
 8012968:	803c3800 	.word	0x803c3800

0801296c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801296c:	b480      	push	{r7}
 801296e:	b085      	sub	sp, #20
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
 8012974:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8012976:	2300      	movs	r3, #0
 8012978:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	019b      	lsls	r3, r3, #6
 801297e:	f043 0220 	orr.w	r2, r3, #32
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	3301      	adds	r3, #1
 801298a:	60fb      	str	r3, [r7, #12]
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	4a09      	ldr	r2, [pc, #36]	; (80129b4 <USB_FlushTxFifo+0x48>)
 8012990:	4293      	cmp	r3, r2
 8012992:	d901      	bls.n	8012998 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012994:	2303      	movs	r3, #3
 8012996:	e006      	b.n	80129a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	691b      	ldr	r3, [r3, #16]
 801299c:	f003 0320 	and.w	r3, r3, #32
 80129a0:	2b20      	cmp	r3, #32
 80129a2:	d0f0      	beq.n	8012986 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80129a4:	2300      	movs	r3, #0
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	3714      	adds	r7, #20
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	4770      	bx	lr
 80129b2:	bf00      	nop
 80129b4:	00030d40 	.word	0x00030d40

080129b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80129b8:	b480      	push	{r7}
 80129ba:	b085      	sub	sp, #20
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80129c0:	2300      	movs	r3, #0
 80129c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2210      	movs	r2, #16
 80129c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	3301      	adds	r3, #1
 80129ce:	60fb      	str	r3, [r7, #12]
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	4a09      	ldr	r2, [pc, #36]	; (80129f8 <USB_FlushRxFifo+0x40>)
 80129d4:	4293      	cmp	r3, r2
 80129d6:	d901      	bls.n	80129dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80129d8:	2303      	movs	r3, #3
 80129da:	e006      	b.n	80129ea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	691b      	ldr	r3, [r3, #16]
 80129e0:	f003 0310 	and.w	r3, r3, #16
 80129e4:	2b10      	cmp	r3, #16
 80129e6:	d0f0      	beq.n	80129ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80129e8:	2300      	movs	r3, #0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3714      	adds	r7, #20
 80129ee:	46bd      	mov	sp, r7
 80129f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f4:	4770      	bx	lr
 80129f6:	bf00      	nop
 80129f8:	00030d40 	.word	0x00030d40

080129fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80129fc:	b480      	push	{r7}
 80129fe:	b085      	sub	sp, #20
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	460b      	mov	r3, r1
 8012a06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a12:	681a      	ldr	r2, [r3, #0]
 8012a14:	78fb      	ldrb	r3, [r7, #3]
 8012a16:	68f9      	ldr	r1, [r7, #12]
 8012a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a1c:	4313      	orrs	r3, r2
 8012a1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012a20:	2300      	movs	r3, #0
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3714      	adds	r7, #20
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr

08012a2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012a2e:	b580      	push	{r7, lr}
 8012a30:	b084      	sub	sp, #16
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a40:	685b      	ldr	r3, [r3, #4]
 8012a42:	68fa      	ldr	r2, [r7, #12]
 8012a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012a48:	f043 0302 	orr.w	r3, r3, #2
 8012a4c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012a4e:	2003      	movs	r0, #3
 8012a50:	f7f7 f8f2 	bl	8009c38 <HAL_Delay>

  return HAL_OK;
 8012a54:	2300      	movs	r3, #0
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3710      	adds	r7, #16
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
	...

08012a60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012a60:	b480      	push	{r7}
 8012a62:	b085      	sub	sp, #20
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	3301      	adds	r3, #1
 8012a70:	60fb      	str	r3, [r7, #12]
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	4a13      	ldr	r2, [pc, #76]	; (8012ac4 <USB_CoreReset+0x64>)
 8012a76:	4293      	cmp	r3, r2
 8012a78:	d901      	bls.n	8012a7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012a7a:	2303      	movs	r3, #3
 8012a7c:	e01b      	b.n	8012ab6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	691b      	ldr	r3, [r3, #16]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	daf2      	bge.n	8012a6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012a86:	2300      	movs	r3, #0
 8012a88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	691b      	ldr	r3, [r3, #16]
 8012a8e:	f043 0201 	orr.w	r2, r3, #1
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	3301      	adds	r3, #1
 8012a9a:	60fb      	str	r3, [r7, #12]
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	4a09      	ldr	r2, [pc, #36]	; (8012ac4 <USB_CoreReset+0x64>)
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	d901      	bls.n	8012aa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012aa4:	2303      	movs	r3, #3
 8012aa6:	e006      	b.n	8012ab6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	691b      	ldr	r3, [r3, #16]
 8012aac:	f003 0301 	and.w	r3, r3, #1
 8012ab0:	2b01      	cmp	r3, #1
 8012ab2:	d0f0      	beq.n	8012a96 <USB_CoreReset+0x36>

  return HAL_OK;
 8012ab4:	2300      	movs	r3, #0
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	3714      	adds	r7, #20
 8012aba:	46bd      	mov	sp, r7
 8012abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac0:	4770      	bx	lr
 8012ac2:	bf00      	nop
 8012ac4:	00030d40 	.word	0x00030d40

08012ac8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012acc:	4904      	ldr	r1, [pc, #16]	; (8012ae0 <MX_FATFS_Init+0x18>)
 8012ace:	4805      	ldr	r0, [pc, #20]	; (8012ae4 <MX_FATFS_Init+0x1c>)
 8012ad0:	f002 fda6 	bl	8015620 <FATFS_LinkDriver>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	4b03      	ldr	r3, [pc, #12]	; (8012ae8 <MX_FATFS_Init+0x20>)
 8012ada:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8012adc:	bf00      	nop
 8012ade:	bd80      	pop	{r7, pc}
 8012ae0:	200079f0 	.word	0x200079f0
 8012ae4:	0801f060 	.word	0x0801f060
 8012ae8:	200079ec 	.word	0x200079ec

08012aec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012aec:	b480      	push	{r7}
 8012aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012af0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	46bd      	mov	sp, r7
 8012af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afa:	4770      	bx	lr

08012afc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012b02:	2300      	movs	r3, #0
 8012b04:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012b06:	f000 f896 	bl	8012c36 <BSP_SD_IsDetected>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	2b01      	cmp	r3, #1
 8012b0e:	d001      	beq.n	8012b14 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8012b10:	2301      	movs	r3, #1
 8012b12:	e012      	b.n	8012b3a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8012b14:	480b      	ldr	r0, [pc, #44]	; (8012b44 <BSP_SD_Init+0x48>)
 8012b16:	f7fb fc17 	bl	800e348 <HAL_SD_Init>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012b1e:	79fb      	ldrb	r3, [r7, #7]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d109      	bne.n	8012b38 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8012b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012b28:	4806      	ldr	r0, [pc, #24]	; (8012b44 <BSP_SD_Init+0x48>)
 8012b2a:	f7fc f9d7 	bl	800eedc <HAL_SD_ConfigWideBusOperation>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d001      	beq.n	8012b38 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012b34:	2301      	movs	r3, #1
 8012b36:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012b38:	79fb      	ldrb	r3, [r7, #7]
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3708      	adds	r7, #8
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	20007084 	.word	0x20007084

08012b48 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b086      	sub	sp, #24
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012b54:	2300      	movs	r3, #0
 8012b56:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	68ba      	ldr	r2, [r7, #8]
 8012b5c:	68f9      	ldr	r1, [r7, #12]
 8012b5e:	4806      	ldr	r0, [pc, #24]	; (8012b78 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012b60:	f7fb fc82 	bl	800e468 <HAL_SD_ReadBlocks_DMA>
 8012b64:	4603      	mov	r3, r0
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d001      	beq.n	8012b6e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3718      	adds	r7, #24
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	20007084 	.word	0x20007084

08012b7c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b086      	sub	sp, #24
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	60f8      	str	r0, [r7, #12]
 8012b84:	60b9      	str	r1, [r7, #8]
 8012b86:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	68ba      	ldr	r2, [r7, #8]
 8012b90:	68f9      	ldr	r1, [r7, #12]
 8012b92:	4806      	ldr	r0, [pc, #24]	; (8012bac <BSP_SD_WriteBlocks_DMA+0x30>)
 8012b94:	f7fb fd52 	bl	800e63c <HAL_SD_WriteBlocks_DMA>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d001      	beq.n	8012ba2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	3718      	adds	r7, #24
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}
 8012bac:	20007084 	.word	0x20007084

08012bb0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012bb4:	4805      	ldr	r0, [pc, #20]	; (8012bcc <BSP_SD_GetCardState+0x1c>)
 8012bb6:	f7fc fa0d 	bl	800efd4 <HAL_SD_GetCardState>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	2b04      	cmp	r3, #4
 8012bbe:	bf14      	ite	ne
 8012bc0:	2301      	movne	r3, #1
 8012bc2:	2300      	moveq	r3, #0
 8012bc4:	b2db      	uxtb	r3, r3
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	20007084 	.word	0x20007084

08012bd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8012bd8:	6879      	ldr	r1, [r7, #4]
 8012bda:	4803      	ldr	r0, [pc, #12]	; (8012be8 <BSP_SD_GetCardInfo+0x18>)
 8012bdc:	f7fc f952 	bl	800ee84 <HAL_SD_GetCardInfo>
}
 8012be0:	bf00      	nop
 8012be2:	3708      	adds	r7, #8
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}
 8012be8:	20007084 	.word	0x20007084

08012bec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b082      	sub	sp, #8
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8012bf4:	f000 f818 	bl	8012c28 <BSP_SD_AbortCallback>
}
 8012bf8:	bf00      	nop
 8012bfa:	3708      	adds	r7, #8
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b082      	sub	sp, #8
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012c08:	f000 f9b4 	bl	8012f74 <BSP_SD_WriteCpltCallback>
}
 8012c0c:	bf00      	nop
 8012c0e:	3708      	adds	r7, #8
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012c1c:	f000 f9bc 	bl	8012f98 <BSP_SD_ReadCpltCallback>
}
 8012c20:	bf00      	nop
 8012c22:	3708      	adds	r7, #8
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}

08012c28 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012c28:	b480      	push	{r7}
 8012c2a:	af00      	add	r7, sp, #0

}
 8012c2c:	bf00      	nop
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c34:	4770      	bx	lr

08012c36 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012c36:	b580      	push	{r7, lr}
 8012c38:	b082      	sub	sp, #8
 8012c3a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012c40:	f000 f80c 	bl	8012c5c <BSP_PlatformIsDetected>
 8012c44:	4603      	mov	r3, r0
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d101      	bne.n	8012c4e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012c4e:	79fb      	ldrb	r3, [r7, #7]
 8012c50:	b2db      	uxtb	r3, r3
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	3708      	adds	r7, #8
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}
	...

08012c5c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012c62:	2301      	movs	r3, #1
 8012c64:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012c66:	2108      	movs	r1, #8
 8012c68:	4806      	ldr	r0, [pc, #24]	; (8012c84 <BSP_PlatformIsDetected+0x28>)
 8012c6a:	f7f7 fe3d 	bl	800a8e8 <HAL_GPIO_ReadPin>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d001      	beq.n	8012c78 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8012c74:	2300      	movs	r3, #0
 8012c76:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012c78:	79fb      	ldrb	r3, [r7, #7]
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	3708      	adds	r7, #8
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	bf00      	nop
 8012c84:	40021800 	.word	0x40021800

08012c88 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8012c90:	f002 fdb0 	bl	80157f4 <osKernelGetTickCount>
 8012c94:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8012c96:	e006      	b.n	8012ca6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012c98:	f7ff ff8a 	bl	8012bb0 <BSP_SD_GetCardState>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d101      	bne.n	8012ca6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	e009      	b.n	8012cba <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8012ca6:	f002 fda5 	bl	80157f4 <osKernelGetTickCount>
 8012caa:	4602      	mov	r2, r0
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	1ad3      	subs	r3, r2, r3
 8012cb0:	687a      	ldr	r2, [r7, #4]
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d8f0      	bhi.n	8012c98 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3710      	adds	r7, #16
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}
	...

08012cc4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b082      	sub	sp, #8
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	4603      	mov	r3, r0
 8012ccc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012cce:	4b0b      	ldr	r3, [pc, #44]	; (8012cfc <SD_CheckStatus+0x38>)
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012cd4:	f7ff ff6c 	bl	8012bb0 <BSP_SD_GetCardState>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d107      	bne.n	8012cee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012cde:	4b07      	ldr	r3, [pc, #28]	; (8012cfc <SD_CheckStatus+0x38>)
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	f023 0301 	bic.w	r3, r3, #1
 8012ce8:	b2da      	uxtb	r2, r3
 8012cea:	4b04      	ldr	r3, [pc, #16]	; (8012cfc <SD_CheckStatus+0x38>)
 8012cec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012cee:	4b03      	ldr	r3, [pc, #12]	; (8012cfc <SD_CheckStatus+0x38>)
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	b2db      	uxtb	r3, r3
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	20000111 	.word	0x20000111

08012d00 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	4603      	mov	r3, r0
 8012d08:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8012d0a:	4b1c      	ldr	r3, [pc, #112]	; (8012d7c <SD_initialize+0x7c>)
 8012d0c:	2201      	movs	r2, #1
 8012d0e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8012d10:	f002 fd18 	bl	8015744 <osKernelGetState>
 8012d14:	4603      	mov	r3, r0
 8012d16:	2b02      	cmp	r3, #2
 8012d18:	d129      	bne.n	8012d6e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8012d1a:	f7ff feef 	bl	8012afc <BSP_SD_Init>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d107      	bne.n	8012d34 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8012d24:	79fb      	ldrb	r3, [r7, #7]
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7ff ffcc 	bl	8012cc4 <SD_CheckStatus>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	461a      	mov	r2, r3
 8012d30:	4b12      	ldr	r3, [pc, #72]	; (8012d7c <SD_initialize+0x7c>)
 8012d32:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8012d34:	4b11      	ldr	r3, [pc, #68]	; (8012d7c <SD_initialize+0x7c>)
 8012d36:	781b      	ldrb	r3, [r3, #0]
 8012d38:	b2db      	uxtb	r3, r3
 8012d3a:	2b01      	cmp	r3, #1
 8012d3c:	d017      	beq.n	8012d6e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8012d3e:	4b10      	ldr	r3, [pc, #64]	; (8012d80 <SD_initialize+0x80>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d107      	bne.n	8012d56 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8012d46:	2200      	movs	r2, #0
 8012d48:	2102      	movs	r1, #2
 8012d4a:	200a      	movs	r0, #10
 8012d4c:	f002 ffe0 	bl	8015d10 <osMessageQueueNew>
 8012d50:	4602      	mov	r2, r0
 8012d52:	4b0b      	ldr	r3, [pc, #44]	; (8012d80 <SD_initialize+0x80>)
 8012d54:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 8012d56:	4b0a      	ldr	r3, [pc, #40]	; (8012d80 <SD_initialize+0x80>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d107      	bne.n	8012d6e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8012d5e:	4b07      	ldr	r3, [pc, #28]	; (8012d7c <SD_initialize+0x7c>)
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	b2db      	uxtb	r3, r3
 8012d64:	f043 0301 	orr.w	r3, r3, #1
 8012d68:	b2da      	uxtb	r2, r3
 8012d6a:	4b04      	ldr	r3, [pc, #16]	; (8012d7c <SD_initialize+0x7c>)
 8012d6c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8012d6e:	4b03      	ldr	r3, [pc, #12]	; (8012d7c <SD_initialize+0x7c>)
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	b2db      	uxtb	r3, r3
}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3708      	adds	r7, #8
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}
 8012d7c:	20000111 	.word	0x20000111
 8012d80:	20000990 	.word	0x20000990

08012d84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b082      	sub	sp, #8
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012d8e:	79fb      	ldrb	r3, [r7, #7]
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7ff ff97 	bl	8012cc4 <SD_CheckStatus>
 8012d96:	4603      	mov	r3, r0
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3708      	adds	r7, #8
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}

08012da0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b088      	sub	sp, #32
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	60b9      	str	r1, [r7, #8]
 8012da8:	607a      	str	r2, [r7, #4]
 8012daa:	603b      	str	r3, [r7, #0]
 8012dac:	4603      	mov	r3, r0
 8012dae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012db0:	2301      	movs	r3, #1
 8012db2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012db4:	f247 5030 	movw	r0, #30000	; 0x7530
 8012db8:	f7ff ff66 	bl	8012c88 <SD_CheckStatusWithTimeout>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	da01      	bge.n	8012dc6 <SD_read+0x26>
  {
    return res;
 8012dc2:	7ffb      	ldrb	r3, [r7, #31]
 8012dc4:	e02f      	b.n	8012e26 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8012dc6:	683a      	ldr	r2, [r7, #0]
 8012dc8:	6879      	ldr	r1, [r7, #4]
 8012dca:	68b8      	ldr	r0, [r7, #8]
 8012dcc:	f7ff febc 	bl	8012b48 <BSP_SD_ReadBlocks_DMA>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8012dd4:	7fbb      	ldrb	r3, [r7, #30]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d124      	bne.n	8012e24 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8012dda:	4b15      	ldr	r3, [pc, #84]	; (8012e30 <SD_read+0x90>)
 8012ddc:	6818      	ldr	r0, [r3, #0]
 8012dde:	f107 0112 	add.w	r1, r7, #18
 8012de2:	f247 5330 	movw	r3, #30000	; 0x7530
 8012de6:	2200      	movs	r2, #0
 8012de8:	f003 f88c 	bl	8015f04 <osMessageQueueGet>
 8012dec:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8012dee:	69bb      	ldr	r3, [r7, #24]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d117      	bne.n	8012e24 <SD_read+0x84>
 8012df4:	8a7b      	ldrh	r3, [r7, #18]
 8012df6:	2b01      	cmp	r3, #1
 8012df8:	d114      	bne.n	8012e24 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8012dfa:	f002 fcfb 	bl	80157f4 <osKernelGetTickCount>
 8012dfe:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8012e00:	e007      	b.n	8012e12 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012e02:	f7ff fed5 	bl	8012bb0 <BSP_SD_GetCardState>
 8012e06:	4603      	mov	r3, r0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d102      	bne.n	8012e12 <SD_read+0x72>
              {
                res = RES_OK;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8012e10:	e008      	b.n	8012e24 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8012e12:	f002 fcef 	bl	80157f4 <osKernelGetTickCount>
 8012e16:	4602      	mov	r2, r0
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	1ad3      	subs	r3, r2, r3
 8012e1c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d9ee      	bls.n	8012e02 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8012e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3720      	adds	r7, #32
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	20000990 	.word	0x20000990

08012e34 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b088      	sub	sp, #32
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	60b9      	str	r1, [r7, #8]
 8012e3c:	607a      	str	r2, [r7, #4]
 8012e3e:	603b      	str	r3, [r7, #0]
 8012e40:	4603      	mov	r3, r0
 8012e42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012e44:	2301      	movs	r3, #1
 8012e46:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012e48:	f247 5030 	movw	r0, #30000	; 0x7530
 8012e4c:	f7ff ff1c 	bl	8012c88 <SD_CheckStatusWithTimeout>
 8012e50:	4603      	mov	r3, r0
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	da01      	bge.n	8012e5a <SD_write+0x26>
  {
    return res;
 8012e56:	7ffb      	ldrb	r3, [r7, #31]
 8012e58:	e02d      	b.n	8012eb6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012e5a:	683a      	ldr	r2, [r7, #0]
 8012e5c:	6879      	ldr	r1, [r7, #4]
 8012e5e:	68b8      	ldr	r0, [r7, #8]
 8012e60:	f7ff fe8c 	bl	8012b7c <BSP_SD_WriteBlocks_DMA>
 8012e64:	4603      	mov	r3, r0
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d124      	bne.n	8012eb4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8012e6a:	4b15      	ldr	r3, [pc, #84]	; (8012ec0 <SD_write+0x8c>)
 8012e6c:	6818      	ldr	r0, [r3, #0]
 8012e6e:	f107 0112 	add.w	r1, r7, #18
 8012e72:	f247 5330 	movw	r3, #30000	; 0x7530
 8012e76:	2200      	movs	r2, #0
 8012e78:	f003 f844 	bl	8015f04 <osMessageQueueGet>
 8012e7c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8012e7e:	69bb      	ldr	r3, [r7, #24]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d117      	bne.n	8012eb4 <SD_write+0x80>
 8012e84:	8a7b      	ldrh	r3, [r7, #18]
 8012e86:	2b02      	cmp	r3, #2
 8012e88:	d114      	bne.n	8012eb4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8012e8a:	f002 fcb3 	bl	80157f4 <osKernelGetTickCount>
 8012e8e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8012e90:	e007      	b.n	8012ea2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012e92:	f7ff fe8d 	bl	8012bb0 <BSP_SD_GetCardState>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d102      	bne.n	8012ea2 <SD_write+0x6e>
          {
            res = RES_OK;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	77fb      	strb	r3, [r7, #31]
            break;
 8012ea0:	e008      	b.n	8012eb4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8012ea2:	f002 fca7 	bl	80157f4 <osKernelGetTickCount>
 8012ea6:	4602      	mov	r2, r0
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	1ad3      	subs	r3, r2, r3
 8012eac:	f247 522f 	movw	r2, #29999	; 0x752f
 8012eb0:	4293      	cmp	r3, r2
 8012eb2:	d9ee      	bls.n	8012e92 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8012eb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3720      	adds	r7, #32
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	20000990 	.word	0x20000990

08012ec4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b08c      	sub	sp, #48	; 0x30
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	4603      	mov	r3, r0
 8012ecc:	603a      	str	r2, [r7, #0]
 8012ece:	71fb      	strb	r3, [r7, #7]
 8012ed0:	460b      	mov	r3, r1
 8012ed2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012eda:	4b25      	ldr	r3, [pc, #148]	; (8012f70 <SD_ioctl+0xac>)
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	b2db      	uxtb	r3, r3
 8012ee0:	f003 0301 	and.w	r3, r3, #1
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d001      	beq.n	8012eec <SD_ioctl+0x28>
 8012ee8:	2303      	movs	r3, #3
 8012eea:	e03c      	b.n	8012f66 <SD_ioctl+0xa2>

  switch (cmd)
 8012eec:	79bb      	ldrb	r3, [r7, #6]
 8012eee:	2b03      	cmp	r3, #3
 8012ef0:	d834      	bhi.n	8012f5c <SD_ioctl+0x98>
 8012ef2:	a201      	add	r2, pc, #4	; (adr r2, 8012ef8 <SD_ioctl+0x34>)
 8012ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ef8:	08012f09 	.word	0x08012f09
 8012efc:	08012f11 	.word	0x08012f11
 8012f00:	08012f29 	.word	0x08012f29
 8012f04:	08012f43 	.word	0x08012f43
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012f0e:	e028      	b.n	8012f62 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012f10:	f107 030c 	add.w	r3, r7, #12
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7ff fe5b 	bl	8012bd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012f20:	2300      	movs	r3, #0
 8012f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012f26:	e01c      	b.n	8012f62 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012f28:	f107 030c 	add.w	r3, r7, #12
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7ff fe4f 	bl	8012bd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f34:	b29a      	uxth	r2, r3
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012f40:	e00f      	b.n	8012f62 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012f42:	f107 030c 	add.w	r3, r7, #12
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7ff fe42 	bl	8012bd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f4e:	0a5a      	lsrs	r2, r3, #9
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012f54:	2300      	movs	r3, #0
 8012f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012f5a:	e002      	b.n	8012f62 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012f5c:	2304      	movs	r3, #4
 8012f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3730      	adds	r7, #48	; 0x30
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	20000111 	.word	0x20000111

08012f74 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b082      	sub	sp, #8
 8012f78:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8012f7a:	2302      	movs	r3, #2
 8012f7c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8012f7e:	4b05      	ldr	r3, [pc, #20]	; (8012f94 <BSP_SD_WriteCpltCallback+0x20>)
 8012f80:	6818      	ldr	r0, [r3, #0]
 8012f82:	1db9      	adds	r1, r7, #6
 8012f84:	2300      	movs	r3, #0
 8012f86:	2200      	movs	r2, #0
 8012f88:	f002 ff48 	bl	8015e1c <osMessageQueuePut>
#endif
}
 8012f8c:	bf00      	nop
 8012f8e:	3708      	adds	r7, #8
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	20000990 	.word	0x20000990

08012f98 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8012fa2:	4b05      	ldr	r3, [pc, #20]	; (8012fb8 <BSP_SD_ReadCpltCallback+0x20>)
 8012fa4:	6818      	ldr	r0, [r3, #0]
 8012fa6:	1db9      	adds	r1, r7, #6
 8012fa8:	2300      	movs	r3, #0
 8012faa:	2200      	movs	r2, #0
 8012fac:	f002 ff36 	bl	8015e1c <osMessageQueuePut>
#endif
}
 8012fb0:	bf00      	nop
 8012fb2:	3708      	adds	r7, #8
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	20000990 	.word	0x20000990

08012fbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b084      	sub	sp, #16
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012fc6:	79fb      	ldrb	r3, [r7, #7]
 8012fc8:	4a08      	ldr	r2, [pc, #32]	; (8012fec <disk_status+0x30>)
 8012fca:	009b      	lsls	r3, r3, #2
 8012fcc:	4413      	add	r3, r2
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	79fa      	ldrb	r2, [r7, #7]
 8012fd4:	4905      	ldr	r1, [pc, #20]	; (8012fec <disk_status+0x30>)
 8012fd6:	440a      	add	r2, r1
 8012fd8:	7a12      	ldrb	r2, [r2, #8]
 8012fda:	4610      	mov	r0, r2
 8012fdc:	4798      	blx	r3
 8012fde:	4603      	mov	r3, r0
 8012fe0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}
 8012fec:	200009bc 	.word	0x200009bc

08012ff0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b084      	sub	sp, #16
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012ffe:	79fb      	ldrb	r3, [r7, #7]
 8013000:	4a0d      	ldr	r2, [pc, #52]	; (8013038 <disk_initialize+0x48>)
 8013002:	5cd3      	ldrb	r3, [r2, r3]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d111      	bne.n	801302c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8013008:	79fb      	ldrb	r3, [r7, #7]
 801300a:	4a0b      	ldr	r2, [pc, #44]	; (8013038 <disk_initialize+0x48>)
 801300c:	2101      	movs	r1, #1
 801300e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013010:	79fb      	ldrb	r3, [r7, #7]
 8013012:	4a09      	ldr	r2, [pc, #36]	; (8013038 <disk_initialize+0x48>)
 8013014:	009b      	lsls	r3, r3, #2
 8013016:	4413      	add	r3, r2
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	79fa      	ldrb	r2, [r7, #7]
 801301e:	4906      	ldr	r1, [pc, #24]	; (8013038 <disk_initialize+0x48>)
 8013020:	440a      	add	r2, r1
 8013022:	7a12      	ldrb	r2, [r2, #8]
 8013024:	4610      	mov	r0, r2
 8013026:	4798      	blx	r3
 8013028:	4603      	mov	r3, r0
 801302a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801302c:	7bfb      	ldrb	r3, [r7, #15]
}
 801302e:	4618      	mov	r0, r3
 8013030:	3710      	adds	r7, #16
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}
 8013036:	bf00      	nop
 8013038:	200009bc 	.word	0x200009bc

0801303c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801303c:	b590      	push	{r4, r7, lr}
 801303e:	b087      	sub	sp, #28
 8013040:	af00      	add	r7, sp, #0
 8013042:	60b9      	str	r1, [r7, #8]
 8013044:	607a      	str	r2, [r7, #4]
 8013046:	603b      	str	r3, [r7, #0]
 8013048:	4603      	mov	r3, r0
 801304a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801304c:	7bfb      	ldrb	r3, [r7, #15]
 801304e:	4a0a      	ldr	r2, [pc, #40]	; (8013078 <disk_read+0x3c>)
 8013050:	009b      	lsls	r3, r3, #2
 8013052:	4413      	add	r3, r2
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	689c      	ldr	r4, [r3, #8]
 8013058:	7bfb      	ldrb	r3, [r7, #15]
 801305a:	4a07      	ldr	r2, [pc, #28]	; (8013078 <disk_read+0x3c>)
 801305c:	4413      	add	r3, r2
 801305e:	7a18      	ldrb	r0, [r3, #8]
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	687a      	ldr	r2, [r7, #4]
 8013064:	68b9      	ldr	r1, [r7, #8]
 8013066:	47a0      	blx	r4
 8013068:	4603      	mov	r3, r0
 801306a:	75fb      	strb	r3, [r7, #23]
  return res;
 801306c:	7dfb      	ldrb	r3, [r7, #23]
}
 801306e:	4618      	mov	r0, r3
 8013070:	371c      	adds	r7, #28
 8013072:	46bd      	mov	sp, r7
 8013074:	bd90      	pop	{r4, r7, pc}
 8013076:	bf00      	nop
 8013078:	200009bc 	.word	0x200009bc

0801307c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801307c:	b590      	push	{r4, r7, lr}
 801307e:	b087      	sub	sp, #28
 8013080:	af00      	add	r7, sp, #0
 8013082:	60b9      	str	r1, [r7, #8]
 8013084:	607a      	str	r2, [r7, #4]
 8013086:	603b      	str	r3, [r7, #0]
 8013088:	4603      	mov	r3, r0
 801308a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801308c:	7bfb      	ldrb	r3, [r7, #15]
 801308e:	4a0a      	ldr	r2, [pc, #40]	; (80130b8 <disk_write+0x3c>)
 8013090:	009b      	lsls	r3, r3, #2
 8013092:	4413      	add	r3, r2
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	68dc      	ldr	r4, [r3, #12]
 8013098:	7bfb      	ldrb	r3, [r7, #15]
 801309a:	4a07      	ldr	r2, [pc, #28]	; (80130b8 <disk_write+0x3c>)
 801309c:	4413      	add	r3, r2
 801309e:	7a18      	ldrb	r0, [r3, #8]
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	687a      	ldr	r2, [r7, #4]
 80130a4:	68b9      	ldr	r1, [r7, #8]
 80130a6:	47a0      	blx	r4
 80130a8:	4603      	mov	r3, r0
 80130aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80130ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	371c      	adds	r7, #28
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd90      	pop	{r4, r7, pc}
 80130b6:	bf00      	nop
 80130b8:	200009bc 	.word	0x200009bc

080130bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	4603      	mov	r3, r0
 80130c4:	603a      	str	r2, [r7, #0]
 80130c6:	71fb      	strb	r3, [r7, #7]
 80130c8:	460b      	mov	r3, r1
 80130ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80130cc:	79fb      	ldrb	r3, [r7, #7]
 80130ce:	4a09      	ldr	r2, [pc, #36]	; (80130f4 <disk_ioctl+0x38>)
 80130d0:	009b      	lsls	r3, r3, #2
 80130d2:	4413      	add	r3, r2
 80130d4:	685b      	ldr	r3, [r3, #4]
 80130d6:	691b      	ldr	r3, [r3, #16]
 80130d8:	79fa      	ldrb	r2, [r7, #7]
 80130da:	4906      	ldr	r1, [pc, #24]	; (80130f4 <disk_ioctl+0x38>)
 80130dc:	440a      	add	r2, r1
 80130de:	7a10      	ldrb	r0, [r2, #8]
 80130e0:	79b9      	ldrb	r1, [r7, #6]
 80130e2:	683a      	ldr	r2, [r7, #0]
 80130e4:	4798      	blx	r3
 80130e6:	4603      	mov	r3, r0
 80130e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80130ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80130ec:	4618      	mov	r0, r3
 80130ee:	3710      	adds	r7, #16
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}
 80130f4:	200009bc 	.word	0x200009bc

080130f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80130f8:	b480      	push	{r7}
 80130fa:	b085      	sub	sp, #20
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	3301      	adds	r3, #1
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013108:	89fb      	ldrh	r3, [r7, #14]
 801310a:	021b      	lsls	r3, r3, #8
 801310c:	b21a      	sxth	r2, r3
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	b21b      	sxth	r3, r3
 8013114:	4313      	orrs	r3, r2
 8013116:	b21b      	sxth	r3, r3
 8013118:	81fb      	strh	r3, [r7, #14]
	return rv;
 801311a:	89fb      	ldrh	r3, [r7, #14]
}
 801311c:	4618      	mov	r0, r3
 801311e:	3714      	adds	r7, #20
 8013120:	46bd      	mov	sp, r7
 8013122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013126:	4770      	bx	lr

08013128 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013128:	b480      	push	{r7}
 801312a:	b085      	sub	sp, #20
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	3303      	adds	r3, #3
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	021b      	lsls	r3, r3, #8
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	3202      	adds	r2, #2
 8013140:	7812      	ldrb	r2, [r2, #0]
 8013142:	4313      	orrs	r3, r2
 8013144:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	021b      	lsls	r3, r3, #8
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	3201      	adds	r2, #1
 801314e:	7812      	ldrb	r2, [r2, #0]
 8013150:	4313      	orrs	r3, r2
 8013152:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	021b      	lsls	r3, r3, #8
 8013158:	687a      	ldr	r2, [r7, #4]
 801315a:	7812      	ldrb	r2, [r2, #0]
 801315c:	4313      	orrs	r3, r2
 801315e:	60fb      	str	r3, [r7, #12]
	return rv;
 8013160:	68fb      	ldr	r3, [r7, #12]
}
 8013162:	4618      	mov	r0, r3
 8013164:	3714      	adds	r7, #20
 8013166:	46bd      	mov	sp, r7
 8013168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316c:	4770      	bx	lr

0801316e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801316e:	b480      	push	{r7}
 8013170:	b083      	sub	sp, #12
 8013172:	af00      	add	r7, sp, #0
 8013174:	6078      	str	r0, [r7, #4]
 8013176:	460b      	mov	r3, r1
 8013178:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	1c5a      	adds	r2, r3, #1
 801317e:	607a      	str	r2, [r7, #4]
 8013180:	887a      	ldrh	r2, [r7, #2]
 8013182:	b2d2      	uxtb	r2, r2
 8013184:	701a      	strb	r2, [r3, #0]
 8013186:	887b      	ldrh	r3, [r7, #2]
 8013188:	0a1b      	lsrs	r3, r3, #8
 801318a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	1c5a      	adds	r2, r3, #1
 8013190:	607a      	str	r2, [r7, #4]
 8013192:	887a      	ldrh	r2, [r7, #2]
 8013194:	b2d2      	uxtb	r2, r2
 8013196:	701a      	strb	r2, [r3, #0]
}
 8013198:	bf00      	nop
 801319a:	370c      	adds	r7, #12
 801319c:	46bd      	mov	sp, r7
 801319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a2:	4770      	bx	lr

080131a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80131a4:	b480      	push	{r7}
 80131a6:	b083      	sub	sp, #12
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
 80131ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	1c5a      	adds	r2, r3, #1
 80131b2:	607a      	str	r2, [r7, #4]
 80131b4:	683a      	ldr	r2, [r7, #0]
 80131b6:	b2d2      	uxtb	r2, r2
 80131b8:	701a      	strb	r2, [r3, #0]
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	0a1b      	lsrs	r3, r3, #8
 80131be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	1c5a      	adds	r2, r3, #1
 80131c4:	607a      	str	r2, [r7, #4]
 80131c6:	683a      	ldr	r2, [r7, #0]
 80131c8:	b2d2      	uxtb	r2, r2
 80131ca:	701a      	strb	r2, [r3, #0]
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	0a1b      	lsrs	r3, r3, #8
 80131d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	1c5a      	adds	r2, r3, #1
 80131d6:	607a      	str	r2, [r7, #4]
 80131d8:	683a      	ldr	r2, [r7, #0]
 80131da:	b2d2      	uxtb	r2, r2
 80131dc:	701a      	strb	r2, [r3, #0]
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	0a1b      	lsrs	r3, r3, #8
 80131e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	1c5a      	adds	r2, r3, #1
 80131e8:	607a      	str	r2, [r7, #4]
 80131ea:	683a      	ldr	r2, [r7, #0]
 80131ec:	b2d2      	uxtb	r2, r2
 80131ee:	701a      	strb	r2, [r3, #0]
}
 80131f0:	bf00      	nop
 80131f2:	370c      	adds	r7, #12
 80131f4:	46bd      	mov	sp, r7
 80131f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fa:	4770      	bx	lr

080131fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80131fc:	b480      	push	{r7}
 80131fe:	b087      	sub	sp, #28
 8013200:	af00      	add	r7, sp, #0
 8013202:	60f8      	str	r0, [r7, #12]
 8013204:	60b9      	str	r1, [r7, #8]
 8013206:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d00d      	beq.n	8013232 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013216:	693a      	ldr	r2, [r7, #16]
 8013218:	1c53      	adds	r3, r2, #1
 801321a:	613b      	str	r3, [r7, #16]
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	1c59      	adds	r1, r3, #1
 8013220:	6179      	str	r1, [r7, #20]
 8013222:	7812      	ldrb	r2, [r2, #0]
 8013224:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	3b01      	subs	r3, #1
 801322a:	607b      	str	r3, [r7, #4]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d1f1      	bne.n	8013216 <mem_cpy+0x1a>
	}
}
 8013232:	bf00      	nop
 8013234:	371c      	adds	r7, #28
 8013236:	46bd      	mov	sp, r7
 8013238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323c:	4770      	bx	lr

0801323e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801323e:	b480      	push	{r7}
 8013240:	b087      	sub	sp, #28
 8013242:	af00      	add	r7, sp, #0
 8013244:	60f8      	str	r0, [r7, #12]
 8013246:	60b9      	str	r1, [r7, #8]
 8013248:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	1c5a      	adds	r2, r3, #1
 8013252:	617a      	str	r2, [r7, #20]
 8013254:	68ba      	ldr	r2, [r7, #8]
 8013256:	b2d2      	uxtb	r2, r2
 8013258:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	3b01      	subs	r3, #1
 801325e:	607b      	str	r3, [r7, #4]
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d1f3      	bne.n	801324e <mem_set+0x10>
}
 8013266:	bf00      	nop
 8013268:	371c      	adds	r7, #28
 801326a:	46bd      	mov	sp, r7
 801326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013270:	4770      	bx	lr

08013272 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8013272:	b480      	push	{r7}
 8013274:	b089      	sub	sp, #36	; 0x24
 8013276:	af00      	add	r7, sp, #0
 8013278:	60f8      	str	r0, [r7, #12]
 801327a:	60b9      	str	r1, [r7, #8]
 801327c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	61fb      	str	r3, [r7, #28]
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013286:	2300      	movs	r3, #0
 8013288:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801328a:	69fb      	ldr	r3, [r7, #28]
 801328c:	1c5a      	adds	r2, r3, #1
 801328e:	61fa      	str	r2, [r7, #28]
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	4619      	mov	r1, r3
 8013294:	69bb      	ldr	r3, [r7, #24]
 8013296:	1c5a      	adds	r2, r3, #1
 8013298:	61ba      	str	r2, [r7, #24]
 801329a:	781b      	ldrb	r3, [r3, #0]
 801329c:	1acb      	subs	r3, r1, r3
 801329e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	3b01      	subs	r3, #1
 80132a4:	607b      	str	r3, [r7, #4]
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d002      	beq.n	80132b2 <mem_cmp+0x40>
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d0eb      	beq.n	801328a <mem_cmp+0x18>

	return r;
 80132b2:	697b      	ldr	r3, [r7, #20]
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	3724      	adds	r7, #36	; 0x24
 80132b8:	46bd      	mov	sp, r7
 80132ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132be:	4770      	bx	lr

080132c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
 80132c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80132ca:	e002      	b.n	80132d2 <chk_chr+0x12>
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	3301      	adds	r3, #1
 80132d0:	607b      	str	r3, [r7, #4]
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	781b      	ldrb	r3, [r3, #0]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d005      	beq.n	80132e6 <chk_chr+0x26>
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	781b      	ldrb	r3, [r3, #0]
 80132de:	461a      	mov	r2, r3
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	4293      	cmp	r3, r2
 80132e4:	d1f2      	bne.n	80132cc <chk_chr+0xc>
	return *str;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	781b      	ldrb	r3, [r3, #0]
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	370c      	adds	r7, #12
 80132ee:	46bd      	mov	sp, r7
 80132f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f4:	4770      	bx	lr

080132f6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80132f6:	b580      	push	{r7, lr}
 80132f8:	b082      	sub	sp, #8
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d009      	beq.n	8013318 <lock_fs+0x22>
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	691b      	ldr	r3, [r3, #16]
 8013308:	4618      	mov	r0, r3
 801330a:	f002 f9bf 	bl	801568c <ff_req_grant>
 801330e:	4603      	mov	r3, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d001      	beq.n	8013318 <lock_fs+0x22>
 8013314:	2301      	movs	r3, #1
 8013316:	e000      	b.n	801331a <lock_fs+0x24>
 8013318:	2300      	movs	r3, #0
}
 801331a:	4618      	mov	r0, r3
 801331c:	3708      	adds	r7, #8
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}

08013322 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8013322:	b580      	push	{r7, lr}
 8013324:	b082      	sub	sp, #8
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
 801332a:	460b      	mov	r3, r1
 801332c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d00d      	beq.n	8013350 <unlock_fs+0x2e>
 8013334:	78fb      	ldrb	r3, [r7, #3]
 8013336:	2b0c      	cmp	r3, #12
 8013338:	d00a      	beq.n	8013350 <unlock_fs+0x2e>
 801333a:	78fb      	ldrb	r3, [r7, #3]
 801333c:	2b0b      	cmp	r3, #11
 801333e:	d007      	beq.n	8013350 <unlock_fs+0x2e>
 8013340:	78fb      	ldrb	r3, [r7, #3]
 8013342:	2b0f      	cmp	r3, #15
 8013344:	d004      	beq.n	8013350 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	691b      	ldr	r3, [r3, #16]
 801334a:	4618      	mov	r0, r3
 801334c:	f002 f9b3 	bl	80156b6 <ff_rel_grant>
	}
}
 8013350:	bf00      	nop
 8013352:	3708      	adds	r7, #8
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013358:	b480      	push	{r7}
 801335a:	b085      	sub	sp, #20
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013362:	2300      	movs	r3, #0
 8013364:	60bb      	str	r3, [r7, #8]
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	60fb      	str	r3, [r7, #12]
 801336a:	e029      	b.n	80133c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801336c:	4a27      	ldr	r2, [pc, #156]	; (801340c <chk_lock+0xb4>)
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	011b      	lsls	r3, r3, #4
 8013372:	4413      	add	r3, r2
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d01d      	beq.n	80133b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801337a:	4a24      	ldr	r2, [pc, #144]	; (801340c <chk_lock+0xb4>)
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	011b      	lsls	r3, r3, #4
 8013380:	4413      	add	r3, r2
 8013382:	681a      	ldr	r2, [r3, #0]
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	429a      	cmp	r2, r3
 801338a:	d116      	bne.n	80133ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801338c:	4a1f      	ldr	r2, [pc, #124]	; (801340c <chk_lock+0xb4>)
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	011b      	lsls	r3, r3, #4
 8013392:	4413      	add	r3, r2
 8013394:	3304      	adds	r3, #4
 8013396:	681a      	ldr	r2, [r3, #0]
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801339c:	429a      	cmp	r2, r3
 801339e:	d10c      	bne.n	80133ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80133a0:	4a1a      	ldr	r2, [pc, #104]	; (801340c <chk_lock+0xb4>)
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	011b      	lsls	r3, r3, #4
 80133a6:	4413      	add	r3, r2
 80133a8:	3308      	adds	r3, #8
 80133aa:	681a      	ldr	r2, [r3, #0]
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d102      	bne.n	80133ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80133b4:	e007      	b.n	80133c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80133b6:	2301      	movs	r3, #1
 80133b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	3301      	adds	r3, #1
 80133be:	60fb      	str	r3, [r7, #12]
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	2b01      	cmp	r3, #1
 80133c4:	d9d2      	bls.n	801336c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	2b02      	cmp	r3, #2
 80133ca:	d109      	bne.n	80133e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d102      	bne.n	80133d8 <chk_lock+0x80>
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	2b02      	cmp	r3, #2
 80133d6:	d101      	bne.n	80133dc <chk_lock+0x84>
 80133d8:	2300      	movs	r3, #0
 80133da:	e010      	b.n	80133fe <chk_lock+0xa6>
 80133dc:	2312      	movs	r3, #18
 80133de:	e00e      	b.n	80133fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d108      	bne.n	80133f8 <chk_lock+0xa0>
 80133e6:	4a09      	ldr	r2, [pc, #36]	; (801340c <chk_lock+0xb4>)
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	011b      	lsls	r3, r3, #4
 80133ec:	4413      	add	r3, r2
 80133ee:	330c      	adds	r3, #12
 80133f0:	881b      	ldrh	r3, [r3, #0]
 80133f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80133f6:	d101      	bne.n	80133fc <chk_lock+0xa4>
 80133f8:	2310      	movs	r3, #16
 80133fa:	e000      	b.n	80133fe <chk_lock+0xa6>
 80133fc:	2300      	movs	r3, #0
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3714      	adds	r7, #20
 8013402:	46bd      	mov	sp, r7
 8013404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013408:	4770      	bx	lr
 801340a:	bf00      	nop
 801340c:	2000099c 	.word	0x2000099c

08013410 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013410:	b480      	push	{r7}
 8013412:	b083      	sub	sp, #12
 8013414:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013416:	2300      	movs	r3, #0
 8013418:	607b      	str	r3, [r7, #4]
 801341a:	e002      	b.n	8013422 <enq_lock+0x12>
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	3301      	adds	r3, #1
 8013420:	607b      	str	r3, [r7, #4]
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2b01      	cmp	r3, #1
 8013426:	d806      	bhi.n	8013436 <enq_lock+0x26>
 8013428:	4a09      	ldr	r2, [pc, #36]	; (8013450 <enq_lock+0x40>)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	011b      	lsls	r3, r3, #4
 801342e:	4413      	add	r3, r2
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d1f2      	bne.n	801341c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	2b02      	cmp	r3, #2
 801343a:	bf14      	ite	ne
 801343c:	2301      	movne	r3, #1
 801343e:	2300      	moveq	r3, #0
 8013440:	b2db      	uxtb	r3, r3
}
 8013442:	4618      	mov	r0, r3
 8013444:	370c      	adds	r7, #12
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop
 8013450:	2000099c 	.word	0x2000099c

08013454 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013454:	b480      	push	{r7}
 8013456:	b085      	sub	sp, #20
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
 801345c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801345e:	2300      	movs	r3, #0
 8013460:	60fb      	str	r3, [r7, #12]
 8013462:	e01f      	b.n	80134a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013464:	4a41      	ldr	r2, [pc, #260]	; (801356c <inc_lock+0x118>)
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	011b      	lsls	r3, r3, #4
 801346a:	4413      	add	r3, r2
 801346c:	681a      	ldr	r2, [r3, #0]
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	429a      	cmp	r2, r3
 8013474:	d113      	bne.n	801349e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8013476:	4a3d      	ldr	r2, [pc, #244]	; (801356c <inc_lock+0x118>)
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	011b      	lsls	r3, r3, #4
 801347c:	4413      	add	r3, r2
 801347e:	3304      	adds	r3, #4
 8013480:	681a      	ldr	r2, [r3, #0]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8013486:	429a      	cmp	r2, r3
 8013488:	d109      	bne.n	801349e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801348a:	4a38      	ldr	r2, [pc, #224]	; (801356c <inc_lock+0x118>)
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	011b      	lsls	r3, r3, #4
 8013490:	4413      	add	r3, r2
 8013492:	3308      	adds	r3, #8
 8013494:	681a      	ldr	r2, [r3, #0]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801349a:	429a      	cmp	r2, r3
 801349c:	d006      	beq.n	80134ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	3301      	adds	r3, #1
 80134a2:	60fb      	str	r3, [r7, #12]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d9dc      	bls.n	8013464 <inc_lock+0x10>
 80134aa:	e000      	b.n	80134ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80134ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	2b02      	cmp	r3, #2
 80134b2:	d132      	bne.n	801351a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80134b4:	2300      	movs	r3, #0
 80134b6:	60fb      	str	r3, [r7, #12]
 80134b8:	e002      	b.n	80134c0 <inc_lock+0x6c>
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	3301      	adds	r3, #1
 80134be:	60fb      	str	r3, [r7, #12]
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	2b01      	cmp	r3, #1
 80134c4:	d806      	bhi.n	80134d4 <inc_lock+0x80>
 80134c6:	4a29      	ldr	r2, [pc, #164]	; (801356c <inc_lock+0x118>)
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	011b      	lsls	r3, r3, #4
 80134cc:	4413      	add	r3, r2
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d1f2      	bne.n	80134ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	2b02      	cmp	r3, #2
 80134d8:	d101      	bne.n	80134de <inc_lock+0x8a>
 80134da:	2300      	movs	r3, #0
 80134dc:	e040      	b.n	8013560 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681a      	ldr	r2, [r3, #0]
 80134e2:	4922      	ldr	r1, [pc, #136]	; (801356c <inc_lock+0x118>)
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	011b      	lsls	r3, r3, #4
 80134e8:	440b      	add	r3, r1
 80134ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	689a      	ldr	r2, [r3, #8]
 80134f0:	491e      	ldr	r1, [pc, #120]	; (801356c <inc_lock+0x118>)
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	011b      	lsls	r3, r3, #4
 80134f6:	440b      	add	r3, r1
 80134f8:	3304      	adds	r3, #4
 80134fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	695a      	ldr	r2, [r3, #20]
 8013500:	491a      	ldr	r1, [pc, #104]	; (801356c <inc_lock+0x118>)
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	011b      	lsls	r3, r3, #4
 8013506:	440b      	add	r3, r1
 8013508:	3308      	adds	r3, #8
 801350a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801350c:	4a17      	ldr	r2, [pc, #92]	; (801356c <inc_lock+0x118>)
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	011b      	lsls	r3, r3, #4
 8013512:	4413      	add	r3, r2
 8013514:	330c      	adds	r3, #12
 8013516:	2200      	movs	r2, #0
 8013518:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d009      	beq.n	8013534 <inc_lock+0xe0>
 8013520:	4a12      	ldr	r2, [pc, #72]	; (801356c <inc_lock+0x118>)
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	011b      	lsls	r3, r3, #4
 8013526:	4413      	add	r3, r2
 8013528:	330c      	adds	r3, #12
 801352a:	881b      	ldrh	r3, [r3, #0]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d001      	beq.n	8013534 <inc_lock+0xe0>
 8013530:	2300      	movs	r3, #0
 8013532:	e015      	b.n	8013560 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d108      	bne.n	801354c <inc_lock+0xf8>
 801353a:	4a0c      	ldr	r2, [pc, #48]	; (801356c <inc_lock+0x118>)
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	011b      	lsls	r3, r3, #4
 8013540:	4413      	add	r3, r2
 8013542:	330c      	adds	r3, #12
 8013544:	881b      	ldrh	r3, [r3, #0]
 8013546:	3301      	adds	r3, #1
 8013548:	b29a      	uxth	r2, r3
 801354a:	e001      	b.n	8013550 <inc_lock+0xfc>
 801354c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013550:	4906      	ldr	r1, [pc, #24]	; (801356c <inc_lock+0x118>)
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	011b      	lsls	r3, r3, #4
 8013556:	440b      	add	r3, r1
 8013558:	330c      	adds	r3, #12
 801355a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	3301      	adds	r3, #1
}
 8013560:	4618      	mov	r0, r3
 8013562:	3714      	adds	r7, #20
 8013564:	46bd      	mov	sp, r7
 8013566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356a:	4770      	bx	lr
 801356c:	2000099c 	.word	0x2000099c

08013570 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013570:	b480      	push	{r7}
 8013572:	b085      	sub	sp, #20
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	3b01      	subs	r3, #1
 801357c:	607b      	str	r3, [r7, #4]
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	2b01      	cmp	r3, #1
 8013582:	d825      	bhi.n	80135d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8013584:	4a17      	ldr	r2, [pc, #92]	; (80135e4 <dec_lock+0x74>)
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	011b      	lsls	r3, r3, #4
 801358a:	4413      	add	r3, r2
 801358c:	330c      	adds	r3, #12
 801358e:	881b      	ldrh	r3, [r3, #0]
 8013590:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8013592:	89fb      	ldrh	r3, [r7, #14]
 8013594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013598:	d101      	bne.n	801359e <dec_lock+0x2e>
 801359a:	2300      	movs	r3, #0
 801359c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801359e:	89fb      	ldrh	r3, [r7, #14]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d002      	beq.n	80135aa <dec_lock+0x3a>
 80135a4:	89fb      	ldrh	r3, [r7, #14]
 80135a6:	3b01      	subs	r3, #1
 80135a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80135aa:	4a0e      	ldr	r2, [pc, #56]	; (80135e4 <dec_lock+0x74>)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	011b      	lsls	r3, r3, #4
 80135b0:	4413      	add	r3, r2
 80135b2:	330c      	adds	r3, #12
 80135b4:	89fa      	ldrh	r2, [r7, #14]
 80135b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80135b8:	89fb      	ldrh	r3, [r7, #14]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d105      	bne.n	80135ca <dec_lock+0x5a>
 80135be:	4a09      	ldr	r2, [pc, #36]	; (80135e4 <dec_lock+0x74>)
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	011b      	lsls	r3, r3, #4
 80135c4:	4413      	add	r3, r2
 80135c6:	2200      	movs	r2, #0
 80135c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80135ca:	2300      	movs	r3, #0
 80135cc:	737b      	strb	r3, [r7, #13]
 80135ce:	e001      	b.n	80135d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80135d0:	2302      	movs	r3, #2
 80135d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80135d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80135d6:	4618      	mov	r0, r3
 80135d8:	3714      	adds	r7, #20
 80135da:	46bd      	mov	sp, r7
 80135dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e0:	4770      	bx	lr
 80135e2:	bf00      	nop
 80135e4:	2000099c 	.word	0x2000099c

080135e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80135e8:	b480      	push	{r7}
 80135ea:	b085      	sub	sp, #20
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80135f0:	2300      	movs	r3, #0
 80135f2:	60fb      	str	r3, [r7, #12]
 80135f4:	e010      	b.n	8013618 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80135f6:	4a0d      	ldr	r2, [pc, #52]	; (801362c <clear_lock+0x44>)
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	011b      	lsls	r3, r3, #4
 80135fc:	4413      	add	r3, r2
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	687a      	ldr	r2, [r7, #4]
 8013602:	429a      	cmp	r2, r3
 8013604:	d105      	bne.n	8013612 <clear_lock+0x2a>
 8013606:	4a09      	ldr	r2, [pc, #36]	; (801362c <clear_lock+0x44>)
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	011b      	lsls	r3, r3, #4
 801360c:	4413      	add	r3, r2
 801360e:	2200      	movs	r2, #0
 8013610:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	3301      	adds	r3, #1
 8013616:	60fb      	str	r3, [r7, #12]
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	2b01      	cmp	r3, #1
 801361c:	d9eb      	bls.n	80135f6 <clear_lock+0xe>
	}
}
 801361e:	bf00      	nop
 8013620:	3714      	adds	r7, #20
 8013622:	46bd      	mov	sp, r7
 8013624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013628:	4770      	bx	lr
 801362a:	bf00      	nop
 801362c:	2000099c 	.word	0x2000099c

08013630 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b086      	sub	sp, #24
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013638:	2300      	movs	r3, #0
 801363a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	78db      	ldrb	r3, [r3, #3]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d034      	beq.n	80136ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013648:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	7858      	ldrb	r0, [r3, #1]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013654:	2301      	movs	r3, #1
 8013656:	697a      	ldr	r2, [r7, #20]
 8013658:	f7ff fd10 	bl	801307c <disk_write>
 801365c:	4603      	mov	r3, r0
 801365e:	2b00      	cmp	r3, #0
 8013660:	d002      	beq.n	8013668 <sync_window+0x38>
			res = FR_DISK_ERR;
 8013662:	2301      	movs	r3, #1
 8013664:	73fb      	strb	r3, [r7, #15]
 8013666:	e022      	b.n	80136ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2200      	movs	r2, #0
 801366c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013672:	697a      	ldr	r2, [r7, #20]
 8013674:	1ad2      	subs	r2, r2, r3
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	6a1b      	ldr	r3, [r3, #32]
 801367a:	429a      	cmp	r2, r3
 801367c:	d217      	bcs.n	80136ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	789b      	ldrb	r3, [r3, #2]
 8013682:	613b      	str	r3, [r7, #16]
 8013684:	e010      	b.n	80136a8 <sync_window+0x78>
					wsect += fs->fsize;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6a1b      	ldr	r3, [r3, #32]
 801368a:	697a      	ldr	r2, [r7, #20]
 801368c:	4413      	add	r3, r2
 801368e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	7858      	ldrb	r0, [r3, #1]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801369a:	2301      	movs	r3, #1
 801369c:	697a      	ldr	r2, [r7, #20]
 801369e:	f7ff fced 	bl	801307c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	3b01      	subs	r3, #1
 80136a6:	613b      	str	r3, [r7, #16]
 80136a8:	693b      	ldr	r3, [r7, #16]
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d8eb      	bhi.n	8013686 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80136ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	3718      	adds	r7, #24
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b084      	sub	sp, #16
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80136c2:	2300      	movs	r3, #0
 80136c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136ca:	683a      	ldr	r2, [r7, #0]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d01b      	beq.n	8013708 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f7ff ffad 	bl	8013630 <sync_window>
 80136d6:	4603      	mov	r3, r0
 80136d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80136da:	7bfb      	ldrb	r3, [r7, #15]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d113      	bne.n	8013708 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	7858      	ldrb	r0, [r3, #1]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80136ea:	2301      	movs	r3, #1
 80136ec:	683a      	ldr	r2, [r7, #0]
 80136ee:	f7ff fca5 	bl	801303c <disk_read>
 80136f2:	4603      	mov	r3, r0
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d004      	beq.n	8013702 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80136f8:	f04f 33ff 	mov.w	r3, #4294967295
 80136fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80136fe:	2301      	movs	r3, #1
 8013700:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	683a      	ldr	r2, [r7, #0]
 8013706:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8013708:	7bfb      	ldrb	r3, [r7, #15]
}
 801370a:	4618      	mov	r0, r3
 801370c:	3710      	adds	r7, #16
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
	...

08013714 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b084      	sub	sp, #16
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f7ff ff87 	bl	8013630 <sync_window>
 8013722:	4603      	mov	r3, r0
 8013724:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013726:	7bfb      	ldrb	r3, [r7, #15]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d159      	bne.n	80137e0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	2b03      	cmp	r3, #3
 8013732:	d149      	bne.n	80137c8 <sync_fs+0xb4>
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	791b      	ldrb	r3, [r3, #4]
 8013738:	2b01      	cmp	r3, #1
 801373a:	d145      	bne.n	80137c8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	899b      	ldrh	r3, [r3, #12]
 8013746:	461a      	mov	r2, r3
 8013748:	2100      	movs	r1, #0
 801374a:	f7ff fd78 	bl	801323e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	3338      	adds	r3, #56	; 0x38
 8013752:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013756:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801375a:	4618      	mov	r0, r3
 801375c:	f7ff fd07 	bl	801316e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	3338      	adds	r3, #56	; 0x38
 8013764:	4921      	ldr	r1, [pc, #132]	; (80137ec <sync_fs+0xd8>)
 8013766:	4618      	mov	r0, r3
 8013768:	f7ff fd1c 	bl	80131a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	3338      	adds	r3, #56	; 0x38
 8013770:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013774:	491e      	ldr	r1, [pc, #120]	; (80137f0 <sync_fs+0xdc>)
 8013776:	4618      	mov	r0, r3
 8013778:	f7ff fd14 	bl	80131a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	3338      	adds	r3, #56	; 0x38
 8013780:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	699b      	ldr	r3, [r3, #24]
 8013788:	4619      	mov	r1, r3
 801378a:	4610      	mov	r0, r2
 801378c:	f7ff fd0a 	bl	80131a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	3338      	adds	r3, #56	; 0x38
 8013794:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	695b      	ldr	r3, [r3, #20]
 801379c:	4619      	mov	r1, r3
 801379e:	4610      	mov	r0, r2
 80137a0:	f7ff fd00 	bl	80131a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137a8:	1c5a      	adds	r2, r3, #1
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	7858      	ldrb	r0, [r3, #1]
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80137bc:	2301      	movs	r3, #1
 80137be:	f7ff fc5d 	bl	801307c <disk_write>
			fs->fsi_flag = 0;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2200      	movs	r2, #0
 80137c6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	785b      	ldrb	r3, [r3, #1]
 80137cc:	2200      	movs	r2, #0
 80137ce:	2100      	movs	r1, #0
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7ff fc73 	bl	80130bc <disk_ioctl>
 80137d6:	4603      	mov	r3, r0
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d001      	beq.n	80137e0 <sync_fs+0xcc>
 80137dc:	2301      	movs	r3, #1
 80137de:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80137e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	3710      	adds	r7, #16
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}
 80137ea:	bf00      	nop
 80137ec:	41615252 	.word	0x41615252
 80137f0:	61417272 	.word	0x61417272

080137f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80137f4:	b480      	push	{r7}
 80137f6:	b083      	sub	sp, #12
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	3b02      	subs	r3, #2
 8013802:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	69db      	ldr	r3, [r3, #28]
 8013808:	3b02      	subs	r3, #2
 801380a:	683a      	ldr	r2, [r7, #0]
 801380c:	429a      	cmp	r2, r3
 801380e:	d301      	bcc.n	8013814 <clust2sect+0x20>
 8013810:	2300      	movs	r3, #0
 8013812:	e008      	b.n	8013826 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	895b      	ldrh	r3, [r3, #10]
 8013818:	461a      	mov	r2, r3
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	fb03 f202 	mul.w	r2, r3, r2
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013824:	4413      	add	r3, r2
}
 8013826:	4618      	mov	r0, r3
 8013828:	370c      	adds	r7, #12
 801382a:	46bd      	mov	sp, r7
 801382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013830:	4770      	bx	lr

08013832 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013832:	b580      	push	{r7, lr}
 8013834:	b086      	sub	sp, #24
 8013836:	af00      	add	r7, sp, #0
 8013838:	6078      	str	r0, [r7, #4]
 801383a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	2b01      	cmp	r3, #1
 8013846:	d904      	bls.n	8013852 <get_fat+0x20>
 8013848:	693b      	ldr	r3, [r7, #16]
 801384a:	69db      	ldr	r3, [r3, #28]
 801384c:	683a      	ldr	r2, [r7, #0]
 801384e:	429a      	cmp	r2, r3
 8013850:	d302      	bcc.n	8013858 <get_fat+0x26>
		val = 1;	/* Internal error */
 8013852:	2301      	movs	r3, #1
 8013854:	617b      	str	r3, [r7, #20]
 8013856:	e0b7      	b.n	80139c8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013858:	f04f 33ff 	mov.w	r3, #4294967295
 801385c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	781b      	ldrb	r3, [r3, #0]
 8013862:	2b02      	cmp	r3, #2
 8013864:	d05a      	beq.n	801391c <get_fat+0xea>
 8013866:	2b03      	cmp	r3, #3
 8013868:	d07d      	beq.n	8013966 <get_fat+0x134>
 801386a:	2b01      	cmp	r3, #1
 801386c:	f040 80a2 	bne.w	80139b4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	60fb      	str	r3, [r7, #12]
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	085b      	lsrs	r3, r3, #1
 8013878:	68fa      	ldr	r2, [r7, #12]
 801387a:	4413      	add	r3, r2
 801387c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	899b      	ldrh	r3, [r3, #12]
 8013886:	4619      	mov	r1, r3
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	fbb3 f3f1 	udiv	r3, r3, r1
 801388e:	4413      	add	r3, r2
 8013890:	4619      	mov	r1, r3
 8013892:	6938      	ldr	r0, [r7, #16]
 8013894:	f7ff ff10 	bl	80136b8 <move_window>
 8013898:	4603      	mov	r3, r0
 801389a:	2b00      	cmp	r3, #0
 801389c:	f040 808d 	bne.w	80139ba <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	1c5a      	adds	r2, r3, #1
 80138a4:	60fa      	str	r2, [r7, #12]
 80138a6:	693a      	ldr	r2, [r7, #16]
 80138a8:	8992      	ldrh	r2, [r2, #12]
 80138aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80138ae:	fb02 f201 	mul.w	r2, r2, r1
 80138b2:	1a9b      	subs	r3, r3, r2
 80138b4:	693a      	ldr	r2, [r7, #16]
 80138b6:	4413      	add	r3, r2
 80138b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80138bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	899b      	ldrh	r3, [r3, #12]
 80138c6:	4619      	mov	r1, r3
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80138ce:	4413      	add	r3, r2
 80138d0:	4619      	mov	r1, r3
 80138d2:	6938      	ldr	r0, [r7, #16]
 80138d4:	f7ff fef0 	bl	80136b8 <move_window>
 80138d8:	4603      	mov	r3, r0
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d16f      	bne.n	80139be <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	899b      	ldrh	r3, [r3, #12]
 80138e2:	461a      	mov	r2, r3
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80138ea:	fb02 f201 	mul.w	r2, r2, r1
 80138ee:	1a9b      	subs	r3, r3, r2
 80138f0:	693a      	ldr	r2, [r7, #16]
 80138f2:	4413      	add	r3, r2
 80138f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80138f8:	021b      	lsls	r3, r3, #8
 80138fa:	461a      	mov	r2, r3
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	4313      	orrs	r3, r2
 8013900:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	f003 0301 	and.w	r3, r3, #1
 8013908:	2b00      	cmp	r3, #0
 801390a:	d002      	beq.n	8013912 <get_fat+0xe0>
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	091b      	lsrs	r3, r3, #4
 8013910:	e002      	b.n	8013918 <get_fat+0xe6>
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013918:	617b      	str	r3, [r7, #20]
			break;
 801391a:	e055      	b.n	80139c8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	899b      	ldrh	r3, [r3, #12]
 8013924:	085b      	lsrs	r3, r3, #1
 8013926:	b29b      	uxth	r3, r3
 8013928:	4619      	mov	r1, r3
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013930:	4413      	add	r3, r2
 8013932:	4619      	mov	r1, r3
 8013934:	6938      	ldr	r0, [r7, #16]
 8013936:	f7ff febf 	bl	80136b8 <move_window>
 801393a:	4603      	mov	r3, r0
 801393c:	2b00      	cmp	r3, #0
 801393e:	d140      	bne.n	80139c2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	005b      	lsls	r3, r3, #1
 801394a:	693a      	ldr	r2, [r7, #16]
 801394c:	8992      	ldrh	r2, [r2, #12]
 801394e:	fbb3 f0f2 	udiv	r0, r3, r2
 8013952:	fb02 f200 	mul.w	r2, r2, r0
 8013956:	1a9b      	subs	r3, r3, r2
 8013958:	440b      	add	r3, r1
 801395a:	4618      	mov	r0, r3
 801395c:	f7ff fbcc 	bl	80130f8 <ld_word>
 8013960:	4603      	mov	r3, r0
 8013962:	617b      	str	r3, [r7, #20]
			break;
 8013964:	e030      	b.n	80139c8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	899b      	ldrh	r3, [r3, #12]
 801396e:	089b      	lsrs	r3, r3, #2
 8013970:	b29b      	uxth	r3, r3
 8013972:	4619      	mov	r1, r3
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	fbb3 f3f1 	udiv	r3, r3, r1
 801397a:	4413      	add	r3, r2
 801397c:	4619      	mov	r1, r3
 801397e:	6938      	ldr	r0, [r7, #16]
 8013980:	f7ff fe9a 	bl	80136b8 <move_window>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d11d      	bne.n	80139c6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	009b      	lsls	r3, r3, #2
 8013994:	693a      	ldr	r2, [r7, #16]
 8013996:	8992      	ldrh	r2, [r2, #12]
 8013998:	fbb3 f0f2 	udiv	r0, r3, r2
 801399c:	fb02 f200 	mul.w	r2, r2, r0
 80139a0:	1a9b      	subs	r3, r3, r2
 80139a2:	440b      	add	r3, r1
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7ff fbbf 	bl	8013128 <ld_dword>
 80139aa:	4603      	mov	r3, r0
 80139ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80139b0:	617b      	str	r3, [r7, #20]
			break;
 80139b2:	e009      	b.n	80139c8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80139b4:	2301      	movs	r3, #1
 80139b6:	617b      	str	r3, [r7, #20]
 80139b8:	e006      	b.n	80139c8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80139ba:	bf00      	nop
 80139bc:	e004      	b.n	80139c8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80139be:	bf00      	nop
 80139c0:	e002      	b.n	80139c8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80139c2:	bf00      	nop
 80139c4:	e000      	b.n	80139c8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80139c6:	bf00      	nop
		}
	}

	return val;
 80139c8:	697b      	ldr	r3, [r7, #20]
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3718      	adds	r7, #24
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}

080139d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80139d2:	b590      	push	{r4, r7, lr}
 80139d4:	b089      	sub	sp, #36	; 0x24
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	60f8      	str	r0, [r7, #12]
 80139da:	60b9      	str	r1, [r7, #8]
 80139dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80139de:	2302      	movs	r3, #2
 80139e0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	2b01      	cmp	r3, #1
 80139e6:	f240 8106 	bls.w	8013bf6 <put_fat+0x224>
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	69db      	ldr	r3, [r3, #28]
 80139ee:	68ba      	ldr	r2, [r7, #8]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	f080 8100 	bcs.w	8013bf6 <put_fat+0x224>
		switch (fs->fs_type) {
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	2b02      	cmp	r3, #2
 80139fc:	f000 8088 	beq.w	8013b10 <put_fat+0x13e>
 8013a00:	2b03      	cmp	r3, #3
 8013a02:	f000 80b0 	beq.w	8013b66 <put_fat+0x194>
 8013a06:	2b01      	cmp	r3, #1
 8013a08:	f040 80f5 	bne.w	8013bf6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	61bb      	str	r3, [r7, #24]
 8013a10:	69bb      	ldr	r3, [r7, #24]
 8013a12:	085b      	lsrs	r3, r3, #1
 8013a14:	69ba      	ldr	r2, [r7, #24]
 8013a16:	4413      	add	r3, r2
 8013a18:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	899b      	ldrh	r3, [r3, #12]
 8013a22:	4619      	mov	r1, r3
 8013a24:	69bb      	ldr	r3, [r7, #24]
 8013a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8013a2a:	4413      	add	r3, r2
 8013a2c:	4619      	mov	r1, r3
 8013a2e:	68f8      	ldr	r0, [r7, #12]
 8013a30:	f7ff fe42 	bl	80136b8 <move_window>
 8013a34:	4603      	mov	r3, r0
 8013a36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013a38:	7ffb      	ldrb	r3, [r7, #31]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	f040 80d4 	bne.w	8013be8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013a46:	69bb      	ldr	r3, [r7, #24]
 8013a48:	1c5a      	adds	r2, r3, #1
 8013a4a:	61ba      	str	r2, [r7, #24]
 8013a4c:	68fa      	ldr	r2, [r7, #12]
 8013a4e:	8992      	ldrh	r2, [r2, #12]
 8013a50:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a54:	fb02 f200 	mul.w	r2, r2, r0
 8013a58:	1a9b      	subs	r3, r3, r2
 8013a5a:	440b      	add	r3, r1
 8013a5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	f003 0301 	and.w	r3, r3, #1
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d00d      	beq.n	8013a84 <put_fat+0xb2>
 8013a68:	697b      	ldr	r3, [r7, #20]
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	b25b      	sxtb	r3, r3
 8013a6e:	f003 030f 	and.w	r3, r3, #15
 8013a72:	b25a      	sxtb	r2, r3
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	b2db      	uxtb	r3, r3
 8013a78:	011b      	lsls	r3, r3, #4
 8013a7a:	b25b      	sxtb	r3, r3
 8013a7c:	4313      	orrs	r3, r2
 8013a7e:	b25b      	sxtb	r3, r3
 8013a80:	b2db      	uxtb	r3, r3
 8013a82:	e001      	b.n	8013a88 <put_fat+0xb6>
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	b2db      	uxtb	r3, r3
 8013a88:	697a      	ldr	r2, [r7, #20]
 8013a8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	2201      	movs	r2, #1
 8013a90:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	899b      	ldrh	r3, [r3, #12]
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	69bb      	ldr	r3, [r7, #24]
 8013a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013aa2:	4413      	add	r3, r2
 8013aa4:	4619      	mov	r1, r3
 8013aa6:	68f8      	ldr	r0, [r7, #12]
 8013aa8:	f7ff fe06 	bl	80136b8 <move_window>
 8013aac:	4603      	mov	r3, r0
 8013aae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013ab0:	7ffb      	ldrb	r3, [r7, #31]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	f040 809a 	bne.w	8013bec <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	899b      	ldrh	r3, [r3, #12]
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	69bb      	ldr	r3, [r7, #24]
 8013ac6:	fbb3 f0f2 	udiv	r0, r3, r2
 8013aca:	fb02 f200 	mul.w	r2, r2, r0
 8013ace:	1a9b      	subs	r3, r3, r2
 8013ad0:	440b      	add	r3, r1
 8013ad2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	f003 0301 	and.w	r3, r3, #1
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d003      	beq.n	8013ae6 <put_fat+0x114>
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	091b      	lsrs	r3, r3, #4
 8013ae2:	b2db      	uxtb	r3, r3
 8013ae4:	e00e      	b.n	8013b04 <put_fat+0x132>
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	b25b      	sxtb	r3, r3
 8013aec:	f023 030f 	bic.w	r3, r3, #15
 8013af0:	b25a      	sxtb	r2, r3
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	0a1b      	lsrs	r3, r3, #8
 8013af6:	b25b      	sxtb	r3, r3
 8013af8:	f003 030f 	and.w	r3, r3, #15
 8013afc:	b25b      	sxtb	r3, r3
 8013afe:	4313      	orrs	r3, r2
 8013b00:	b25b      	sxtb	r3, r3
 8013b02:	b2db      	uxtb	r3, r3
 8013b04:	697a      	ldr	r2, [r7, #20]
 8013b06:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	2201      	movs	r2, #1
 8013b0c:	70da      	strb	r2, [r3, #3]
			break;
 8013b0e:	e072      	b.n	8013bf6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	899b      	ldrh	r3, [r3, #12]
 8013b18:	085b      	lsrs	r3, r3, #1
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	4619      	mov	r1, r3
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b24:	4413      	add	r3, r2
 8013b26:	4619      	mov	r1, r3
 8013b28:	68f8      	ldr	r0, [r7, #12]
 8013b2a:	f7ff fdc5 	bl	80136b8 <move_window>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013b32:	7ffb      	ldrb	r3, [r7, #31]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d15b      	bne.n	8013bf0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	005b      	lsls	r3, r3, #1
 8013b42:	68fa      	ldr	r2, [r7, #12]
 8013b44:	8992      	ldrh	r2, [r2, #12]
 8013b46:	fbb3 f0f2 	udiv	r0, r3, r2
 8013b4a:	fb02 f200 	mul.w	r2, r2, r0
 8013b4e:	1a9b      	subs	r3, r3, r2
 8013b50:	440b      	add	r3, r1
 8013b52:	687a      	ldr	r2, [r7, #4]
 8013b54:	b292      	uxth	r2, r2
 8013b56:	4611      	mov	r1, r2
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7ff fb08 	bl	801316e <st_word>
			fs->wflag = 1;
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	2201      	movs	r2, #1
 8013b62:	70da      	strb	r2, [r3, #3]
			break;
 8013b64:	e047      	b.n	8013bf6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	899b      	ldrh	r3, [r3, #12]
 8013b6e:	089b      	lsrs	r3, r3, #2
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	4619      	mov	r1, r3
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b7a:	4413      	add	r3, r2
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	68f8      	ldr	r0, [r7, #12]
 8013b80:	f7ff fd9a 	bl	80136b8 <move_window>
 8013b84:	4603      	mov	r3, r0
 8013b86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013b88:	7ffb      	ldrb	r3, [r7, #31]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d132      	bne.n	8013bf4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	009b      	lsls	r3, r3, #2
 8013b9e:	68fa      	ldr	r2, [r7, #12]
 8013ba0:	8992      	ldrh	r2, [r2, #12]
 8013ba2:	fbb3 f0f2 	udiv	r0, r3, r2
 8013ba6:	fb02 f200 	mul.w	r2, r2, r0
 8013baa:	1a9b      	subs	r3, r3, r2
 8013bac:	440b      	add	r3, r1
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7ff faba 	bl	8013128 <ld_dword>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013bba:	4323      	orrs	r3, r4
 8013bbc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013bc4:	68bb      	ldr	r3, [r7, #8]
 8013bc6:	009b      	lsls	r3, r3, #2
 8013bc8:	68fa      	ldr	r2, [r7, #12]
 8013bca:	8992      	ldrh	r2, [r2, #12]
 8013bcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8013bd0:	fb02 f200 	mul.w	r2, r2, r0
 8013bd4:	1a9b      	subs	r3, r3, r2
 8013bd6:	440b      	add	r3, r1
 8013bd8:	6879      	ldr	r1, [r7, #4]
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7ff fae2 	bl	80131a4 <st_dword>
			fs->wflag = 1;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	2201      	movs	r2, #1
 8013be4:	70da      	strb	r2, [r3, #3]
			break;
 8013be6:	e006      	b.n	8013bf6 <put_fat+0x224>
			if (res != FR_OK) break;
 8013be8:	bf00      	nop
 8013bea:	e004      	b.n	8013bf6 <put_fat+0x224>
			if (res != FR_OK) break;
 8013bec:	bf00      	nop
 8013bee:	e002      	b.n	8013bf6 <put_fat+0x224>
			if (res != FR_OK) break;
 8013bf0:	bf00      	nop
 8013bf2:	e000      	b.n	8013bf6 <put_fat+0x224>
			if (res != FR_OK) break;
 8013bf4:	bf00      	nop
		}
	}
	return res;
 8013bf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3724      	adds	r7, #36	; 0x24
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd90      	pop	{r4, r7, pc}

08013c00 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b088      	sub	sp, #32
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	60f8      	str	r0, [r7, #12]
 8013c08:	60b9      	str	r1, [r7, #8]
 8013c0a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	2b01      	cmp	r3, #1
 8013c1a:	d904      	bls.n	8013c26 <remove_chain+0x26>
 8013c1c:	69bb      	ldr	r3, [r7, #24]
 8013c1e:	69db      	ldr	r3, [r3, #28]
 8013c20:	68ba      	ldr	r2, [r7, #8]
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d301      	bcc.n	8013c2a <remove_chain+0x2a>
 8013c26:	2302      	movs	r3, #2
 8013c28:	e04b      	b.n	8013cc2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d00c      	beq.n	8013c4a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013c30:	f04f 32ff 	mov.w	r2, #4294967295
 8013c34:	6879      	ldr	r1, [r7, #4]
 8013c36:	69b8      	ldr	r0, [r7, #24]
 8013c38:	f7ff fecb 	bl	80139d2 <put_fat>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013c40:	7ffb      	ldrb	r3, [r7, #31]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d001      	beq.n	8013c4a <remove_chain+0x4a>
 8013c46:	7ffb      	ldrb	r3, [r7, #31]
 8013c48:	e03b      	b.n	8013cc2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013c4a:	68b9      	ldr	r1, [r7, #8]
 8013c4c:	68f8      	ldr	r0, [r7, #12]
 8013c4e:	f7ff fdf0 	bl	8013832 <get_fat>
 8013c52:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d031      	beq.n	8013cbe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	2b01      	cmp	r3, #1
 8013c5e:	d101      	bne.n	8013c64 <remove_chain+0x64>
 8013c60:	2302      	movs	r3, #2
 8013c62:	e02e      	b.n	8013cc2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c6a:	d101      	bne.n	8013c70 <remove_chain+0x70>
 8013c6c:	2301      	movs	r3, #1
 8013c6e:	e028      	b.n	8013cc2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013c70:	2200      	movs	r2, #0
 8013c72:	68b9      	ldr	r1, [r7, #8]
 8013c74:	69b8      	ldr	r0, [r7, #24]
 8013c76:	f7ff feac 	bl	80139d2 <put_fat>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013c7e:	7ffb      	ldrb	r3, [r7, #31]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d001      	beq.n	8013c88 <remove_chain+0x88>
 8013c84:	7ffb      	ldrb	r3, [r7, #31]
 8013c86:	e01c      	b.n	8013cc2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013c88:	69bb      	ldr	r3, [r7, #24]
 8013c8a:	699a      	ldr	r2, [r3, #24]
 8013c8c:	69bb      	ldr	r3, [r7, #24]
 8013c8e:	69db      	ldr	r3, [r3, #28]
 8013c90:	3b02      	subs	r3, #2
 8013c92:	429a      	cmp	r2, r3
 8013c94:	d20b      	bcs.n	8013cae <remove_chain+0xae>
			fs->free_clst++;
 8013c96:	69bb      	ldr	r3, [r7, #24]
 8013c98:	699b      	ldr	r3, [r3, #24]
 8013c9a:	1c5a      	adds	r2, r3, #1
 8013c9c:	69bb      	ldr	r3, [r7, #24]
 8013c9e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8013ca0:	69bb      	ldr	r3, [r7, #24]
 8013ca2:	791b      	ldrb	r3, [r3, #4]
 8013ca4:	f043 0301 	orr.w	r3, r3, #1
 8013ca8:	b2da      	uxtb	r2, r3
 8013caa:	69bb      	ldr	r3, [r7, #24]
 8013cac:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013cb2:	69bb      	ldr	r3, [r7, #24]
 8013cb4:	69db      	ldr	r3, [r3, #28]
 8013cb6:	68ba      	ldr	r2, [r7, #8]
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d3c6      	bcc.n	8013c4a <remove_chain+0x4a>
 8013cbc:	e000      	b.n	8013cc0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013cbe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013cc0:	2300      	movs	r3, #0
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3720      	adds	r7, #32
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}

08013cca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013cca:	b580      	push	{r7, lr}
 8013ccc:	b088      	sub	sp, #32
 8013cce:	af00      	add	r7, sp, #0
 8013cd0:	6078      	str	r0, [r7, #4]
 8013cd2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d10d      	bne.n	8013cfc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013ce0:	693b      	ldr	r3, [r7, #16]
 8013ce2:	695b      	ldr	r3, [r3, #20]
 8013ce4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013ce6:	69bb      	ldr	r3, [r7, #24]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d004      	beq.n	8013cf6 <create_chain+0x2c>
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	69db      	ldr	r3, [r3, #28]
 8013cf0:	69ba      	ldr	r2, [r7, #24]
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d31b      	bcc.n	8013d2e <create_chain+0x64>
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	61bb      	str	r3, [r7, #24]
 8013cfa:	e018      	b.n	8013d2e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013cfc:	6839      	ldr	r1, [r7, #0]
 8013cfe:	6878      	ldr	r0, [r7, #4]
 8013d00:	f7ff fd97 	bl	8013832 <get_fat>
 8013d04:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2b01      	cmp	r3, #1
 8013d0a:	d801      	bhi.n	8013d10 <create_chain+0x46>
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	e070      	b.n	8013df2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d16:	d101      	bne.n	8013d1c <create_chain+0x52>
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	e06a      	b.n	8013df2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013d1c:	693b      	ldr	r3, [r7, #16]
 8013d1e:	69db      	ldr	r3, [r3, #28]
 8013d20:	68fa      	ldr	r2, [r7, #12]
 8013d22:	429a      	cmp	r2, r3
 8013d24:	d201      	bcs.n	8013d2a <create_chain+0x60>
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	e063      	b.n	8013df2 <create_chain+0x128>
		scl = clst;
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013d2e:	69bb      	ldr	r3, [r7, #24]
 8013d30:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013d32:	69fb      	ldr	r3, [r7, #28]
 8013d34:	3301      	adds	r3, #1
 8013d36:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013d38:	693b      	ldr	r3, [r7, #16]
 8013d3a:	69db      	ldr	r3, [r3, #28]
 8013d3c:	69fa      	ldr	r2, [r7, #28]
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d307      	bcc.n	8013d52 <create_chain+0x88>
				ncl = 2;
 8013d42:	2302      	movs	r3, #2
 8013d44:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013d46:	69fa      	ldr	r2, [r7, #28]
 8013d48:	69bb      	ldr	r3, [r7, #24]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d901      	bls.n	8013d52 <create_chain+0x88>
 8013d4e:	2300      	movs	r3, #0
 8013d50:	e04f      	b.n	8013df2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013d52:	69f9      	ldr	r1, [r7, #28]
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f7ff fd6c 	bl	8013832 <get_fat>
 8013d5a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d00e      	beq.n	8013d80 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2b01      	cmp	r3, #1
 8013d66:	d003      	beq.n	8013d70 <create_chain+0xa6>
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d6e:	d101      	bne.n	8013d74 <create_chain+0xaa>
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	e03e      	b.n	8013df2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013d74:	69fa      	ldr	r2, [r7, #28]
 8013d76:	69bb      	ldr	r3, [r7, #24]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d1da      	bne.n	8013d32 <create_chain+0x68>
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	e038      	b.n	8013df2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013d80:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013d82:	f04f 32ff 	mov.w	r2, #4294967295
 8013d86:	69f9      	ldr	r1, [r7, #28]
 8013d88:	6938      	ldr	r0, [r7, #16]
 8013d8a:	f7ff fe22 	bl	80139d2 <put_fat>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013d92:	7dfb      	ldrb	r3, [r7, #23]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d109      	bne.n	8013dac <create_chain+0xe2>
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d006      	beq.n	8013dac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013d9e:	69fa      	ldr	r2, [r7, #28]
 8013da0:	6839      	ldr	r1, [r7, #0]
 8013da2:	6938      	ldr	r0, [r7, #16]
 8013da4:	f7ff fe15 	bl	80139d2 <put_fat>
 8013da8:	4603      	mov	r3, r0
 8013daa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013dac:	7dfb      	ldrb	r3, [r7, #23]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d116      	bne.n	8013de0 <create_chain+0x116>
		fs->last_clst = ncl;
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	69fa      	ldr	r2, [r7, #28]
 8013db6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	699a      	ldr	r2, [r3, #24]
 8013dbc:	693b      	ldr	r3, [r7, #16]
 8013dbe:	69db      	ldr	r3, [r3, #28]
 8013dc0:	3b02      	subs	r3, #2
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	d804      	bhi.n	8013dd0 <create_chain+0x106>
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	699b      	ldr	r3, [r3, #24]
 8013dca:	1e5a      	subs	r2, r3, #1
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	791b      	ldrb	r3, [r3, #4]
 8013dd4:	f043 0301 	orr.w	r3, r3, #1
 8013dd8:	b2da      	uxtb	r2, r3
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	711a      	strb	r2, [r3, #4]
 8013dde:	e007      	b.n	8013df0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013de0:	7dfb      	ldrb	r3, [r7, #23]
 8013de2:	2b01      	cmp	r3, #1
 8013de4:	d102      	bne.n	8013dec <create_chain+0x122>
 8013de6:	f04f 33ff 	mov.w	r3, #4294967295
 8013dea:	e000      	b.n	8013dee <create_chain+0x124>
 8013dec:	2301      	movs	r3, #1
 8013dee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013df0:	69fb      	ldr	r3, [r7, #28]
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3720      	adds	r7, #32
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}

08013dfa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013dfa:	b480      	push	{r7}
 8013dfc:	b087      	sub	sp, #28
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
 8013e02:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e0e:	3304      	adds	r3, #4
 8013e10:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	899b      	ldrh	r3, [r3, #12]
 8013e16:	461a      	mov	r2, r3
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e1e:	68fa      	ldr	r2, [r7, #12]
 8013e20:	8952      	ldrh	r2, [r2, #10]
 8013e22:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e26:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	1d1a      	adds	r2, r3, #4
 8013e2c:	613a      	str	r2, [r7, #16]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d101      	bne.n	8013e3c <clmt_clust+0x42>
 8013e38:	2300      	movs	r3, #0
 8013e3a:	e010      	b.n	8013e5e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8013e3c:	697a      	ldr	r2, [r7, #20]
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d307      	bcc.n	8013e54 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8013e44:	697a      	ldr	r2, [r7, #20]
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	1ad3      	subs	r3, r2, r3
 8013e4a:	617b      	str	r3, [r7, #20]
 8013e4c:	693b      	ldr	r3, [r7, #16]
 8013e4e:	3304      	adds	r3, #4
 8013e50:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013e52:	e7e9      	b.n	8013e28 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8013e54:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	681a      	ldr	r2, [r3, #0]
 8013e5a:	697b      	ldr	r3, [r7, #20]
 8013e5c:	4413      	add	r3, r2
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	371c      	adds	r7, #28
 8013e62:	46bd      	mov	sp, r7
 8013e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e68:	4770      	bx	lr

08013e6a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013e6a:	b580      	push	{r7, lr}
 8013e6c:	b086      	sub	sp, #24
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
 8013e72:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013e80:	d204      	bcs.n	8013e8c <dir_sdi+0x22>
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	f003 031f 	and.w	r3, r3, #31
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d001      	beq.n	8013e90 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013e8c:	2302      	movs	r3, #2
 8013e8e:	e071      	b.n	8013f74 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	683a      	ldr	r2, [r7, #0]
 8013e94:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	689b      	ldr	r3, [r3, #8]
 8013e9a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d106      	bne.n	8013eb0 <dir_sdi+0x46>
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	2b02      	cmp	r3, #2
 8013ea8:	d902      	bls.n	8013eb0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eae:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013eb0:	697b      	ldr	r3, [r7, #20]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d10c      	bne.n	8013ed0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	095b      	lsrs	r3, r3, #5
 8013eba:	693a      	ldr	r2, [r7, #16]
 8013ebc:	8912      	ldrh	r2, [r2, #8]
 8013ebe:	4293      	cmp	r3, r2
 8013ec0:	d301      	bcc.n	8013ec6 <dir_sdi+0x5c>
 8013ec2:	2302      	movs	r3, #2
 8013ec4:	e056      	b.n	8013f74 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	61da      	str	r2, [r3, #28]
 8013ece:	e02d      	b.n	8013f2c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013ed0:	693b      	ldr	r3, [r7, #16]
 8013ed2:	895b      	ldrh	r3, [r3, #10]
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	899b      	ldrh	r3, [r3, #12]
 8013eda:	fb03 f302 	mul.w	r3, r3, r2
 8013ede:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013ee0:	e019      	b.n	8013f16 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6979      	ldr	r1, [r7, #20]
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7ff fca3 	bl	8013832 <get_fat>
 8013eec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ef4:	d101      	bne.n	8013efa <dir_sdi+0x90>
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	e03c      	b.n	8013f74 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013efa:	697b      	ldr	r3, [r7, #20]
 8013efc:	2b01      	cmp	r3, #1
 8013efe:	d904      	bls.n	8013f0a <dir_sdi+0xa0>
 8013f00:	693b      	ldr	r3, [r7, #16]
 8013f02:	69db      	ldr	r3, [r3, #28]
 8013f04:	697a      	ldr	r2, [r7, #20]
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d301      	bcc.n	8013f0e <dir_sdi+0xa4>
 8013f0a:	2302      	movs	r3, #2
 8013f0c:	e032      	b.n	8013f74 <dir_sdi+0x10a>
			ofs -= csz;
 8013f0e:	683a      	ldr	r2, [r7, #0]
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	1ad3      	subs	r3, r2, r3
 8013f14:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013f16:	683a      	ldr	r2, [r7, #0]
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d2e1      	bcs.n	8013ee2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8013f1e:	6979      	ldr	r1, [r7, #20]
 8013f20:	6938      	ldr	r0, [r7, #16]
 8013f22:	f7ff fc67 	bl	80137f4 <clust2sect>
 8013f26:	4602      	mov	r2, r0
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	697a      	ldr	r2, [r7, #20]
 8013f30:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	69db      	ldr	r3, [r3, #28]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d101      	bne.n	8013f3e <dir_sdi+0xd4>
 8013f3a:	2302      	movs	r3, #2
 8013f3c:	e01a      	b.n	8013f74 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	69da      	ldr	r2, [r3, #28]
 8013f42:	693b      	ldr	r3, [r7, #16]
 8013f44:	899b      	ldrh	r3, [r3, #12]
 8013f46:	4619      	mov	r1, r3
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8013f4e:	441a      	add	r2, r3
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013f54:	693b      	ldr	r3, [r7, #16]
 8013f56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	899b      	ldrh	r3, [r3, #12]
 8013f5e:	461a      	mov	r2, r3
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	fbb3 f0f2 	udiv	r0, r3, r2
 8013f66:	fb02 f200 	mul.w	r2, r2, r0
 8013f6a:	1a9b      	subs	r3, r3, r2
 8013f6c:	18ca      	adds	r2, r1, r3
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013f72:	2300      	movs	r3, #0
}
 8013f74:	4618      	mov	r0, r3
 8013f76:	3718      	adds	r7, #24
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}

08013f7c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b086      	sub	sp, #24
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	695b      	ldr	r3, [r3, #20]
 8013f90:	3320      	adds	r3, #32
 8013f92:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	69db      	ldr	r3, [r3, #28]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d003      	beq.n	8013fa4 <dir_next+0x28>
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013fa2:	d301      	bcc.n	8013fa8 <dir_next+0x2c>
 8013fa4:	2304      	movs	r3, #4
 8013fa6:	e0bb      	b.n	8014120 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	899b      	ldrh	r3, [r3, #12]
 8013fac:	461a      	mov	r2, r3
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8013fb4:	fb02 f201 	mul.w	r2, r2, r1
 8013fb8:	1a9b      	subs	r3, r3, r2
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	f040 809d 	bne.w	80140fa <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	69db      	ldr	r3, [r3, #28]
 8013fc4:	1c5a      	adds	r2, r3, #1
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	699b      	ldr	r3, [r3, #24]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d10b      	bne.n	8013fea <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	095b      	lsrs	r3, r3, #5
 8013fd6:	68fa      	ldr	r2, [r7, #12]
 8013fd8:	8912      	ldrh	r2, [r2, #8]
 8013fda:	4293      	cmp	r3, r2
 8013fdc:	f0c0 808d 	bcc.w	80140fa <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	61da      	str	r2, [r3, #28]
 8013fe6:	2304      	movs	r3, #4
 8013fe8:	e09a      	b.n	8014120 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	899b      	ldrh	r3, [r3, #12]
 8013fee:	461a      	mov	r2, r3
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ff6:	68fa      	ldr	r2, [r7, #12]
 8013ff8:	8952      	ldrh	r2, [r2, #10]
 8013ffa:	3a01      	subs	r2, #1
 8013ffc:	4013      	ands	r3, r2
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d17b      	bne.n	80140fa <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	699b      	ldr	r3, [r3, #24]
 8014008:	4619      	mov	r1, r3
 801400a:	4610      	mov	r0, r2
 801400c:	f7ff fc11 	bl	8013832 <get_fat>
 8014010:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014012:	697b      	ldr	r3, [r7, #20]
 8014014:	2b01      	cmp	r3, #1
 8014016:	d801      	bhi.n	801401c <dir_next+0xa0>
 8014018:	2302      	movs	r3, #2
 801401a:	e081      	b.n	8014120 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014022:	d101      	bne.n	8014028 <dir_next+0xac>
 8014024:	2301      	movs	r3, #1
 8014026:	e07b      	b.n	8014120 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	69db      	ldr	r3, [r3, #28]
 801402c:	697a      	ldr	r2, [r7, #20]
 801402e:	429a      	cmp	r2, r3
 8014030:	d359      	bcc.n	80140e6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8014032:	683b      	ldr	r3, [r7, #0]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d104      	bne.n	8014042 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2200      	movs	r2, #0
 801403c:	61da      	str	r2, [r3, #28]
 801403e:	2304      	movs	r3, #4
 8014040:	e06e      	b.n	8014120 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	699b      	ldr	r3, [r3, #24]
 8014048:	4619      	mov	r1, r3
 801404a:	4610      	mov	r0, r2
 801404c:	f7ff fe3d 	bl	8013cca <create_chain>
 8014050:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d101      	bne.n	801405c <dir_next+0xe0>
 8014058:	2307      	movs	r3, #7
 801405a:	e061      	b.n	8014120 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	2b01      	cmp	r3, #1
 8014060:	d101      	bne.n	8014066 <dir_next+0xea>
 8014062:	2302      	movs	r3, #2
 8014064:	e05c      	b.n	8014120 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801406c:	d101      	bne.n	8014072 <dir_next+0xf6>
 801406e:	2301      	movs	r3, #1
 8014070:	e056      	b.n	8014120 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	f7ff fadc 	bl	8013630 <sync_window>
 8014078:	4603      	mov	r3, r0
 801407a:	2b00      	cmp	r3, #0
 801407c:	d001      	beq.n	8014082 <dir_next+0x106>
 801407e:	2301      	movs	r3, #1
 8014080:	e04e      	b.n	8014120 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	899b      	ldrh	r3, [r3, #12]
 801408c:	461a      	mov	r2, r3
 801408e:	2100      	movs	r1, #0
 8014090:	f7ff f8d5 	bl	801323e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014094:	2300      	movs	r3, #0
 8014096:	613b      	str	r3, [r7, #16]
 8014098:	6979      	ldr	r1, [r7, #20]
 801409a:	68f8      	ldr	r0, [r7, #12]
 801409c:	f7ff fbaa 	bl	80137f4 <clust2sect>
 80140a0:	4602      	mov	r2, r0
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	635a      	str	r2, [r3, #52]	; 0x34
 80140a6:	e012      	b.n	80140ce <dir_next+0x152>
						fs->wflag = 1;
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	2201      	movs	r2, #1
 80140ac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80140ae:	68f8      	ldr	r0, [r7, #12]
 80140b0:	f7ff fabe 	bl	8013630 <sync_window>
 80140b4:	4603      	mov	r3, r0
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d001      	beq.n	80140be <dir_next+0x142>
 80140ba:	2301      	movs	r3, #1
 80140bc:	e030      	b.n	8014120 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	3301      	adds	r3, #1
 80140c2:	613b      	str	r3, [r7, #16]
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140c8:	1c5a      	adds	r2, r3, #1
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	635a      	str	r2, [r3, #52]	; 0x34
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	895b      	ldrh	r3, [r3, #10]
 80140d2:	461a      	mov	r2, r3
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	4293      	cmp	r3, r2
 80140d8:	d3e6      	bcc.n	80140a8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80140de:	693b      	ldr	r3, [r7, #16]
 80140e0:	1ad2      	subs	r2, r2, r3
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	697a      	ldr	r2, [r7, #20]
 80140ea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80140ec:	6979      	ldr	r1, [r7, #20]
 80140ee:	68f8      	ldr	r0, [r7, #12]
 80140f0:	f7ff fb80 	bl	80137f4 <clust2sect>
 80140f4:	4602      	mov	r2, r0
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	68ba      	ldr	r2, [r7, #8]
 80140fe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	899b      	ldrh	r3, [r3, #12]
 801410a:	461a      	mov	r2, r3
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	fbb3 f0f2 	udiv	r0, r3, r2
 8014112:	fb02 f200 	mul.w	r2, r2, r0
 8014116:	1a9b      	subs	r3, r3, r2
 8014118:	18ca      	adds	r2, r1, r3
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801411e:	2300      	movs	r3, #0
}
 8014120:	4618      	mov	r0, r3
 8014122:	3718      	adds	r7, #24
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b086      	sub	sp, #24
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8014138:	2100      	movs	r1, #0
 801413a:	6878      	ldr	r0, [r7, #4]
 801413c:	f7ff fe95 	bl	8013e6a <dir_sdi>
 8014140:	4603      	mov	r3, r0
 8014142:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014144:	7dfb      	ldrb	r3, [r7, #23]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d12b      	bne.n	80141a2 <dir_alloc+0x7a>
		n = 0;
 801414a:	2300      	movs	r3, #0
 801414c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	69db      	ldr	r3, [r3, #28]
 8014152:	4619      	mov	r1, r3
 8014154:	68f8      	ldr	r0, [r7, #12]
 8014156:	f7ff faaf 	bl	80136b8 <move_window>
 801415a:	4603      	mov	r3, r0
 801415c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801415e:	7dfb      	ldrb	r3, [r7, #23]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d11d      	bne.n	80141a0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6a1b      	ldr	r3, [r3, #32]
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	2be5      	cmp	r3, #229	; 0xe5
 801416c:	d004      	beq.n	8014178 <dir_alloc+0x50>
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6a1b      	ldr	r3, [r3, #32]
 8014172:	781b      	ldrb	r3, [r3, #0]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d107      	bne.n	8014188 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014178:	693b      	ldr	r3, [r7, #16]
 801417a:	3301      	adds	r3, #1
 801417c:	613b      	str	r3, [r7, #16]
 801417e:	693a      	ldr	r2, [r7, #16]
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	429a      	cmp	r2, r3
 8014184:	d102      	bne.n	801418c <dir_alloc+0x64>
 8014186:	e00c      	b.n	80141a2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014188:	2300      	movs	r3, #0
 801418a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801418c:	2101      	movs	r1, #1
 801418e:	6878      	ldr	r0, [r7, #4]
 8014190:	f7ff fef4 	bl	8013f7c <dir_next>
 8014194:	4603      	mov	r3, r0
 8014196:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014198:	7dfb      	ldrb	r3, [r7, #23]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d0d7      	beq.n	801414e <dir_alloc+0x26>
 801419e:	e000      	b.n	80141a2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80141a0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80141a2:	7dfb      	ldrb	r3, [r7, #23]
 80141a4:	2b04      	cmp	r3, #4
 80141a6:	d101      	bne.n	80141ac <dir_alloc+0x84>
 80141a8:	2307      	movs	r3, #7
 80141aa:	75fb      	strb	r3, [r7, #23]
	return res;
 80141ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80141ae:	4618      	mov	r0, r3
 80141b0:	3718      	adds	r7, #24
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}

080141b6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80141b6:	b580      	push	{r7, lr}
 80141b8:	b084      	sub	sp, #16
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	6078      	str	r0, [r7, #4]
 80141be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80141c0:	683b      	ldr	r3, [r7, #0]
 80141c2:	331a      	adds	r3, #26
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7fe ff97 	bl	80130f8 <ld_word>
 80141ca:	4603      	mov	r3, r0
 80141cc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	781b      	ldrb	r3, [r3, #0]
 80141d2:	2b03      	cmp	r3, #3
 80141d4:	d109      	bne.n	80141ea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	3314      	adds	r3, #20
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fe ff8c 	bl	80130f8 <ld_word>
 80141e0:	4603      	mov	r3, r0
 80141e2:	041b      	lsls	r3, r3, #16
 80141e4:	68fa      	ldr	r2, [r7, #12]
 80141e6:	4313      	orrs	r3, r2
 80141e8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80141ea:	68fb      	ldr	r3, [r7, #12]
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3710      	adds	r7, #16
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}

080141f4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b084      	sub	sp, #16
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	60f8      	str	r0, [r7, #12]
 80141fc:	60b9      	str	r1, [r7, #8]
 80141fe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	331a      	adds	r3, #26
 8014204:	687a      	ldr	r2, [r7, #4]
 8014206:	b292      	uxth	r2, r2
 8014208:	4611      	mov	r1, r2
 801420a:	4618      	mov	r0, r3
 801420c:	f7fe ffaf 	bl	801316e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	781b      	ldrb	r3, [r3, #0]
 8014214:	2b03      	cmp	r3, #3
 8014216:	d109      	bne.n	801422c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	f103 0214 	add.w	r2, r3, #20
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	0c1b      	lsrs	r3, r3, #16
 8014222:	b29b      	uxth	r3, r3
 8014224:	4619      	mov	r1, r3
 8014226:	4610      	mov	r0, r2
 8014228:	f7fe ffa1 	bl	801316e <st_word>
	}
}
 801422c:	bf00      	nop
 801422e:	3710      	adds	r7, #16
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}

08014234 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b086      	sub	sp, #24
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014242:	2100      	movs	r1, #0
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f7ff fe10 	bl	8013e6a <dir_sdi>
 801424a:	4603      	mov	r3, r0
 801424c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801424e:	7dfb      	ldrb	r3, [r7, #23]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d001      	beq.n	8014258 <dir_find+0x24>
 8014254:	7dfb      	ldrb	r3, [r7, #23]
 8014256:	e03e      	b.n	80142d6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	69db      	ldr	r3, [r3, #28]
 801425c:	4619      	mov	r1, r3
 801425e:	6938      	ldr	r0, [r7, #16]
 8014260:	f7ff fa2a 	bl	80136b8 <move_window>
 8014264:	4603      	mov	r3, r0
 8014266:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014268:	7dfb      	ldrb	r3, [r7, #23]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d12f      	bne.n	80142ce <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	6a1b      	ldr	r3, [r3, #32]
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014276:	7bfb      	ldrb	r3, [r7, #15]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d102      	bne.n	8014282 <dir_find+0x4e>
 801427c:	2304      	movs	r3, #4
 801427e:	75fb      	strb	r3, [r7, #23]
 8014280:	e028      	b.n	80142d4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	6a1b      	ldr	r3, [r3, #32]
 8014286:	330b      	adds	r3, #11
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801428e:	b2da      	uxtb	r2, r3
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	6a1b      	ldr	r3, [r3, #32]
 8014298:	330b      	adds	r3, #11
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	f003 0308 	and.w	r3, r3, #8
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d10a      	bne.n	80142ba <dir_find+0x86>
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6a18      	ldr	r0, [r3, #32]
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	3324      	adds	r3, #36	; 0x24
 80142ac:	220b      	movs	r2, #11
 80142ae:	4619      	mov	r1, r3
 80142b0:	f7fe ffdf 	bl	8013272 <mem_cmp>
 80142b4:	4603      	mov	r3, r0
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d00b      	beq.n	80142d2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80142ba:	2100      	movs	r1, #0
 80142bc:	6878      	ldr	r0, [r7, #4]
 80142be:	f7ff fe5d 	bl	8013f7c <dir_next>
 80142c2:	4603      	mov	r3, r0
 80142c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80142c6:	7dfb      	ldrb	r3, [r7, #23]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d0c5      	beq.n	8014258 <dir_find+0x24>
 80142cc:	e002      	b.n	80142d4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80142ce:	bf00      	nop
 80142d0:	e000      	b.n	80142d4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80142d2:	bf00      	nop

	return res;
 80142d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80142d6:	4618      	mov	r0, r3
 80142d8:	3718      	adds	r7, #24
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}

080142de <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80142de:	b580      	push	{r7, lr}
 80142e0:	b084      	sub	sp, #16
 80142e2:	af00      	add	r7, sp, #0
 80142e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80142ec:	2101      	movs	r1, #1
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f7ff ff1a 	bl	8014128 <dir_alloc>
 80142f4:	4603      	mov	r3, r0
 80142f6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80142f8:	7bfb      	ldrb	r3, [r7, #15]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d11c      	bne.n	8014338 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	69db      	ldr	r3, [r3, #28]
 8014302:	4619      	mov	r1, r3
 8014304:	68b8      	ldr	r0, [r7, #8]
 8014306:	f7ff f9d7 	bl	80136b8 <move_window>
 801430a:	4603      	mov	r3, r0
 801430c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801430e:	7bfb      	ldrb	r3, [r7, #15]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d111      	bne.n	8014338 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	6a1b      	ldr	r3, [r3, #32]
 8014318:	2220      	movs	r2, #32
 801431a:	2100      	movs	r1, #0
 801431c:	4618      	mov	r0, r3
 801431e:	f7fe ff8e 	bl	801323e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	6a18      	ldr	r0, [r3, #32]
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	3324      	adds	r3, #36	; 0x24
 801432a:	220b      	movs	r2, #11
 801432c:	4619      	mov	r1, r3
 801432e:	f7fe ff65 	bl	80131fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	2201      	movs	r2, #1
 8014336:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8014338:	7bfb      	ldrb	r3, [r7, #15]
}
 801433a:	4618      	mov	r0, r3
 801433c:	3710      	adds	r7, #16
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}
	...

08014344 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b088      	sub	sp, #32
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	60fb      	str	r3, [r7, #12]
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	3324      	adds	r3, #36	; 0x24
 8014358:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801435a:	220b      	movs	r2, #11
 801435c:	2120      	movs	r1, #32
 801435e:	68b8      	ldr	r0, [r7, #8]
 8014360:	f7fe ff6d 	bl	801323e <mem_set>
	si = i = 0; ni = 8;
 8014364:	2300      	movs	r3, #0
 8014366:	613b      	str	r3, [r7, #16]
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	617b      	str	r3, [r7, #20]
 801436c:	2308      	movs	r3, #8
 801436e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	1c5a      	adds	r2, r3, #1
 8014374:	617a      	str	r2, [r7, #20]
 8014376:	68fa      	ldr	r2, [r7, #12]
 8014378:	4413      	add	r3, r2
 801437a:	781b      	ldrb	r3, [r3, #0]
 801437c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801437e:	7ffb      	ldrb	r3, [r7, #31]
 8014380:	2b20      	cmp	r3, #32
 8014382:	d94b      	bls.n	801441c <create_name+0xd8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014384:	7ffb      	ldrb	r3, [r7, #31]
 8014386:	2b2f      	cmp	r3, #47	; 0x2f
 8014388:	d006      	beq.n	8014398 <create_name+0x54>
 801438a:	7ffb      	ldrb	r3, [r7, #31]
 801438c:	2b5c      	cmp	r3, #92	; 0x5c
 801438e:	d110      	bne.n	80143b2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014390:	e002      	b.n	8014398 <create_name+0x54>
 8014392:	697b      	ldr	r3, [r7, #20]
 8014394:	3301      	adds	r3, #1
 8014396:	617b      	str	r3, [r7, #20]
 8014398:	68fa      	ldr	r2, [r7, #12]
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	4413      	add	r3, r2
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	2b2f      	cmp	r3, #47	; 0x2f
 80143a2:	d0f6      	beq.n	8014392 <create_name+0x4e>
 80143a4:	68fa      	ldr	r2, [r7, #12]
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	4413      	add	r3, r2
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	2b5c      	cmp	r3, #92	; 0x5c
 80143ae:	d0f0      	beq.n	8014392 <create_name+0x4e>
			break;
 80143b0:	e035      	b.n	801441e <create_name+0xda>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80143b2:	7ffb      	ldrb	r3, [r7, #31]
 80143b4:	2b2e      	cmp	r3, #46	; 0x2e
 80143b6:	d003      	beq.n	80143c0 <create_name+0x7c>
 80143b8:	693a      	ldr	r2, [r7, #16]
 80143ba:	69bb      	ldr	r3, [r7, #24]
 80143bc:	429a      	cmp	r2, r3
 80143be:	d30c      	bcc.n	80143da <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80143c0:	69bb      	ldr	r3, [r7, #24]
 80143c2:	2b0b      	cmp	r3, #11
 80143c4:	d002      	beq.n	80143cc <create_name+0x88>
 80143c6:	7ffb      	ldrb	r3, [r7, #31]
 80143c8:	2b2e      	cmp	r3, #46	; 0x2e
 80143ca:	d001      	beq.n	80143d0 <create_name+0x8c>
 80143cc:	2306      	movs	r3, #6
 80143ce:	e041      	b.n	8014454 <create_name+0x110>
			i = 8; ni = 11;				/* Goto extension */
 80143d0:	2308      	movs	r3, #8
 80143d2:	613b      	str	r3, [r7, #16]
 80143d4:	230b      	movs	r3, #11
 80143d6:	61bb      	str	r3, [r7, #24]
			continue;
 80143d8:	e01f      	b.n	801441a <create_name+0xd6>
		}
		if (c >= 0x80) {				/* Extended character? */
 80143da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	da01      	bge.n	80143e6 <create_name+0xa2>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
#else
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
 80143e2:	2306      	movs	r3, #6
 80143e4:	e036      	b.n	8014454 <create_name+0x110>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80143e6:	7ffb      	ldrb	r3, [r7, #31]
 80143e8:	4619      	mov	r1, r3
 80143ea:	481c      	ldr	r0, [pc, #112]	; (801445c <create_name+0x118>)
 80143ec:	f7fe ff68 	bl	80132c0 <chk_chr>
 80143f0:	4603      	mov	r3, r0
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d001      	beq.n	80143fa <create_name+0xb6>
 80143f6:	2306      	movs	r3, #6
 80143f8:	e02c      	b.n	8014454 <create_name+0x110>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80143fa:	7ffb      	ldrb	r3, [r7, #31]
 80143fc:	2b60      	cmp	r3, #96	; 0x60
 80143fe:	d905      	bls.n	801440c <create_name+0xc8>
 8014400:	7ffb      	ldrb	r3, [r7, #31]
 8014402:	2b7a      	cmp	r3, #122	; 0x7a
 8014404:	d802      	bhi.n	801440c <create_name+0xc8>
 8014406:	7ffb      	ldrb	r3, [r7, #31]
 8014408:	3b20      	subs	r3, #32
 801440a:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	1c5a      	adds	r2, r3, #1
 8014410:	613a      	str	r2, [r7, #16]
 8014412:	68ba      	ldr	r2, [r7, #8]
 8014414:	4413      	add	r3, r2
 8014416:	7ffa      	ldrb	r2, [r7, #31]
 8014418:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801441a:	e7a9      	b.n	8014370 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801441c:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801441e:	68fa      	ldr	r2, [r7, #12]
 8014420:	697b      	ldr	r3, [r7, #20]
 8014422:	441a      	add	r2, r3
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8014428:	693b      	ldr	r3, [r7, #16]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d101      	bne.n	8014432 <create_name+0xee>
 801442e:	2306      	movs	r3, #6
 8014430:	e010      	b.n	8014454 <create_name+0x110>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	2be5      	cmp	r3, #229	; 0xe5
 8014438:	d102      	bne.n	8014440 <create_name+0xfc>
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	2205      	movs	r2, #5
 801443e:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8014440:	7ffb      	ldrb	r3, [r7, #31]
 8014442:	2b20      	cmp	r3, #32
 8014444:	d801      	bhi.n	801444a <create_name+0x106>
 8014446:	2204      	movs	r2, #4
 8014448:	e000      	b.n	801444c <create_name+0x108>
 801444a:	2200      	movs	r2, #0
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	330b      	adds	r3, #11
 8014450:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8014452:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8014454:	4618      	mov	r0, r3
 8014456:	3720      	adds	r7, #32
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}
 801445c:	0801ea34 	.word	0x0801ea34

08014460 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b086      	sub	sp, #24
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
 8014468:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014474:	e002      	b.n	801447c <follow_path+0x1c>
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	3301      	adds	r3, #1
 801447a:	603b      	str	r3, [r7, #0]
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	781b      	ldrb	r3, [r3, #0]
 8014480:	2b2f      	cmp	r3, #47	; 0x2f
 8014482:	d0f8      	beq.n	8014476 <follow_path+0x16>
 8014484:	683b      	ldr	r3, [r7, #0]
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	2b5c      	cmp	r3, #92	; 0x5c
 801448a:	d0f4      	beq.n	8014476 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801448c:	693b      	ldr	r3, [r7, #16]
 801448e:	2200      	movs	r2, #0
 8014490:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	2b1f      	cmp	r3, #31
 8014498:	d80a      	bhi.n	80144b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2280      	movs	r2, #128	; 0x80
 801449e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80144a2:	2100      	movs	r1, #0
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f7ff fce0 	bl	8013e6a <dir_sdi>
 80144aa:	4603      	mov	r3, r0
 80144ac:	75fb      	strb	r3, [r7, #23]
 80144ae:	e048      	b.n	8014542 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80144b0:	463b      	mov	r3, r7
 80144b2:	4619      	mov	r1, r3
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f7ff ff45 	bl	8014344 <create_name>
 80144ba:	4603      	mov	r3, r0
 80144bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80144be:	7dfb      	ldrb	r3, [r7, #23]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d139      	bne.n	8014538 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80144c4:	6878      	ldr	r0, [r7, #4]
 80144c6:	f7ff feb5 	bl	8014234 <dir_find>
 80144ca:	4603      	mov	r3, r0
 80144cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80144d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80144d6:	7dfb      	ldrb	r3, [r7, #23]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d00a      	beq.n	80144f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80144dc:	7dfb      	ldrb	r3, [r7, #23]
 80144de:	2b04      	cmp	r3, #4
 80144e0:	d12c      	bne.n	801453c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80144e2:	7afb      	ldrb	r3, [r7, #11]
 80144e4:	f003 0304 	and.w	r3, r3, #4
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d127      	bne.n	801453c <follow_path+0xdc>
 80144ec:	2305      	movs	r3, #5
 80144ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80144f0:	e024      	b.n	801453c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80144f2:	7afb      	ldrb	r3, [r7, #11]
 80144f4:	f003 0304 	and.w	r3, r3, #4
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d121      	bne.n	8014540 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80144fc:	693b      	ldr	r3, [r7, #16]
 80144fe:	799b      	ldrb	r3, [r3, #6]
 8014500:	f003 0310 	and.w	r3, r3, #16
 8014504:	2b00      	cmp	r3, #0
 8014506:	d102      	bne.n	801450e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014508:	2305      	movs	r3, #5
 801450a:	75fb      	strb	r3, [r7, #23]
 801450c:	e019      	b.n	8014542 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	695b      	ldr	r3, [r3, #20]
 8014518:	68fa      	ldr	r2, [r7, #12]
 801451a:	8992      	ldrh	r2, [r2, #12]
 801451c:	fbb3 f0f2 	udiv	r0, r3, r2
 8014520:	fb02 f200 	mul.w	r2, r2, r0
 8014524:	1a9b      	subs	r3, r3, r2
 8014526:	440b      	add	r3, r1
 8014528:	4619      	mov	r1, r3
 801452a:	68f8      	ldr	r0, [r7, #12]
 801452c:	f7ff fe43 	bl	80141b6 <ld_clust>
 8014530:	4602      	mov	r2, r0
 8014532:	693b      	ldr	r3, [r7, #16]
 8014534:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014536:	e7bb      	b.n	80144b0 <follow_path+0x50>
			if (res != FR_OK) break;
 8014538:	bf00      	nop
 801453a:	e002      	b.n	8014542 <follow_path+0xe2>
				break;
 801453c:	bf00      	nop
 801453e:	e000      	b.n	8014542 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014540:	bf00      	nop
			}
		}
	}

	return res;
 8014542:	7dfb      	ldrb	r3, [r7, #23]
}
 8014544:	4618      	mov	r0, r3
 8014546:	3718      	adds	r7, #24
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}

0801454c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801454c:	b480      	push	{r7}
 801454e:	b087      	sub	sp, #28
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014554:	f04f 33ff 	mov.w	r3, #4294967295
 8014558:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d031      	beq.n	80145c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	617b      	str	r3, [r7, #20]
 8014568:	e002      	b.n	8014570 <get_ldnumber+0x24>
 801456a:	697b      	ldr	r3, [r7, #20]
 801456c:	3301      	adds	r3, #1
 801456e:	617b      	str	r3, [r7, #20]
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	2b20      	cmp	r3, #32
 8014576:	d903      	bls.n	8014580 <get_ldnumber+0x34>
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	2b3a      	cmp	r3, #58	; 0x3a
 801457e:	d1f4      	bne.n	801456a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	2b3a      	cmp	r3, #58	; 0x3a
 8014586:	d11c      	bne.n	80145c2 <get_ldnumber+0x76>
			tp = *path;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	1c5a      	adds	r2, r3, #1
 8014592:	60fa      	str	r2, [r7, #12]
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	3b30      	subs	r3, #48	; 0x30
 8014598:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801459a:	68bb      	ldr	r3, [r7, #8]
 801459c:	2b09      	cmp	r3, #9
 801459e:	d80e      	bhi.n	80145be <get_ldnumber+0x72>
 80145a0:	68fa      	ldr	r2, [r7, #12]
 80145a2:	697b      	ldr	r3, [r7, #20]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d10a      	bne.n	80145be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d107      	bne.n	80145be <get_ldnumber+0x72>
					vol = (int)i;
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	3301      	adds	r3, #1
 80145b6:	617b      	str	r3, [r7, #20]
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	697a      	ldr	r2, [r7, #20]
 80145bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	e002      	b.n	80145c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80145c2:	2300      	movs	r3, #0
 80145c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80145c6:	693b      	ldr	r3, [r7, #16]
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	371c      	adds	r7, #28
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr

080145d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b082      	sub	sp, #8
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	2200      	movs	r2, #0
 80145e2:	70da      	strb	r2, [r3, #3]
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f04f 32ff 	mov.w	r2, #4294967295
 80145ea:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80145ec:	6839      	ldr	r1, [r7, #0]
 80145ee:	6878      	ldr	r0, [r7, #4]
 80145f0:	f7ff f862 	bl	80136b8 <move_window>
 80145f4:	4603      	mov	r3, r0
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d001      	beq.n	80145fe <check_fs+0x2a>
 80145fa:	2304      	movs	r3, #4
 80145fc:	e038      	b.n	8014670 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	3338      	adds	r3, #56	; 0x38
 8014602:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014606:	4618      	mov	r0, r3
 8014608:	f7fe fd76 	bl	80130f8 <ld_word>
 801460c:	4603      	mov	r3, r0
 801460e:	461a      	mov	r2, r3
 8014610:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014614:	429a      	cmp	r2, r3
 8014616:	d001      	beq.n	801461c <check_fs+0x48>
 8014618:	2303      	movs	r3, #3
 801461a:	e029      	b.n	8014670 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014622:	2be9      	cmp	r3, #233	; 0xe9
 8014624:	d009      	beq.n	801463a <check_fs+0x66>
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801462c:	2beb      	cmp	r3, #235	; 0xeb
 801462e:	d11e      	bne.n	801466e <check_fs+0x9a>
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014636:	2b90      	cmp	r3, #144	; 0x90
 8014638:	d119      	bne.n	801466e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	3338      	adds	r3, #56	; 0x38
 801463e:	3336      	adds	r3, #54	; 0x36
 8014640:	4618      	mov	r0, r3
 8014642:	f7fe fd71 	bl	8013128 <ld_dword>
 8014646:	4603      	mov	r3, r0
 8014648:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801464c:	4a0a      	ldr	r2, [pc, #40]	; (8014678 <check_fs+0xa4>)
 801464e:	4293      	cmp	r3, r2
 8014650:	d101      	bne.n	8014656 <check_fs+0x82>
 8014652:	2300      	movs	r3, #0
 8014654:	e00c      	b.n	8014670 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	3338      	adds	r3, #56	; 0x38
 801465a:	3352      	adds	r3, #82	; 0x52
 801465c:	4618      	mov	r0, r3
 801465e:	f7fe fd63 	bl	8013128 <ld_dword>
 8014662:	4602      	mov	r2, r0
 8014664:	4b05      	ldr	r3, [pc, #20]	; (801467c <check_fs+0xa8>)
 8014666:	429a      	cmp	r2, r3
 8014668:	d101      	bne.n	801466e <check_fs+0x9a>
 801466a:	2300      	movs	r3, #0
 801466c:	e000      	b.n	8014670 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801466e:	2302      	movs	r3, #2
}
 8014670:	4618      	mov	r0, r3
 8014672:	3708      	adds	r7, #8
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}
 8014678:	00544146 	.word	0x00544146
 801467c:	33544146 	.word	0x33544146

08014680 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b096      	sub	sp, #88	; 0x58
 8014684:	af00      	add	r7, sp, #0
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	60b9      	str	r1, [r7, #8]
 801468a:	4613      	mov	r3, r2
 801468c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	2200      	movs	r2, #0
 8014692:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014694:	68f8      	ldr	r0, [r7, #12]
 8014696:	f7ff ff59 	bl	801454c <get_ldnumber>
 801469a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801469c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801469e:	2b00      	cmp	r3, #0
 80146a0:	da01      	bge.n	80146a6 <find_volume+0x26>
 80146a2:	230b      	movs	r3, #11
 80146a4:	e26c      	b.n	8014b80 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80146a6:	4aa4      	ldr	r2, [pc, #656]	; (8014938 <find_volume+0x2b8>)
 80146a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80146b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d101      	bne.n	80146ba <find_volume+0x3a>
 80146b6:	230c      	movs	r3, #12
 80146b8:	e262      	b.n	8014b80 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 80146ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80146bc:	f7fe fe1b 	bl	80132f6 <lock_fs>
 80146c0:	4603      	mov	r3, r0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d101      	bne.n	80146ca <find_volume+0x4a>
 80146c6:	230f      	movs	r3, #15
 80146c8:	e25a      	b.n	8014b80 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80146ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80146d0:	79fb      	ldrb	r3, [r7, #7]
 80146d2:	f023 0301 	bic.w	r3, r3, #1
 80146d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80146d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146da:	781b      	ldrb	r3, [r3, #0]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d01a      	beq.n	8014716 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80146e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e2:	785b      	ldrb	r3, [r3, #1]
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7fe fc69 	bl	8012fbc <disk_status>
 80146ea:	4603      	mov	r3, r0
 80146ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80146f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80146f4:	f003 0301 	and.w	r3, r3, #1
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d10c      	bne.n	8014716 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80146fc:	79fb      	ldrb	r3, [r7, #7]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d007      	beq.n	8014712 <find_volume+0x92>
 8014702:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014706:	f003 0304 	and.w	r3, r3, #4
 801470a:	2b00      	cmp	r3, #0
 801470c:	d001      	beq.n	8014712 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801470e:	230a      	movs	r3, #10
 8014710:	e236      	b.n	8014b80 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8014712:	2300      	movs	r3, #0
 8014714:	e234      	b.n	8014b80 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014718:	2200      	movs	r2, #0
 801471a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801471c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801471e:	b2da      	uxtb	r2, r3
 8014720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014722:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014726:	785b      	ldrb	r3, [r3, #1]
 8014728:	4618      	mov	r0, r3
 801472a:	f7fe fc61 	bl	8012ff0 <disk_initialize>
 801472e:	4603      	mov	r3, r0
 8014730:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014738:	f003 0301 	and.w	r3, r3, #1
 801473c:	2b00      	cmp	r3, #0
 801473e:	d001      	beq.n	8014744 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014740:	2303      	movs	r3, #3
 8014742:	e21d      	b.n	8014b80 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014744:	79fb      	ldrb	r3, [r7, #7]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d007      	beq.n	801475a <find_volume+0xda>
 801474a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801474e:	f003 0304 	and.w	r3, r3, #4
 8014752:	2b00      	cmp	r3, #0
 8014754:	d001      	beq.n	801475a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8014756:	230a      	movs	r3, #10
 8014758:	e212      	b.n	8014b80 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475c:	7858      	ldrb	r0, [r3, #1]
 801475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014760:	330c      	adds	r3, #12
 8014762:	461a      	mov	r2, r3
 8014764:	2102      	movs	r1, #2
 8014766:	f7fe fca9 	bl	80130bc <disk_ioctl>
 801476a:	4603      	mov	r3, r0
 801476c:	2b00      	cmp	r3, #0
 801476e:	d001      	beq.n	8014774 <find_volume+0xf4>
 8014770:	2301      	movs	r3, #1
 8014772:	e205      	b.n	8014b80 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8014774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014776:	899b      	ldrh	r3, [r3, #12]
 8014778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801477c:	d80d      	bhi.n	801479a <find_volume+0x11a>
 801477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014780:	899b      	ldrh	r3, [r3, #12]
 8014782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014786:	d308      	bcc.n	801479a <find_volume+0x11a>
 8014788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801478a:	899b      	ldrh	r3, [r3, #12]
 801478c:	461a      	mov	r2, r3
 801478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014790:	899b      	ldrh	r3, [r3, #12]
 8014792:	3b01      	subs	r3, #1
 8014794:	4013      	ands	r3, r2
 8014796:	2b00      	cmp	r3, #0
 8014798:	d001      	beq.n	801479e <find_volume+0x11e>
 801479a:	2301      	movs	r3, #1
 801479c:	e1f0      	b.n	8014b80 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801479e:	2300      	movs	r3, #0
 80147a0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80147a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80147a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80147a6:	f7ff ff15 	bl	80145d4 <check_fs>
 80147aa:	4603      	mov	r3, r0
 80147ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80147b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147b4:	2b02      	cmp	r3, #2
 80147b6:	d14b      	bne.n	8014850 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80147b8:	2300      	movs	r3, #0
 80147ba:	643b      	str	r3, [r7, #64]	; 0x40
 80147bc:	e01f      	b.n	80147fe <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80147be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80147c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147c6:	011b      	lsls	r3, r3, #4
 80147c8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80147cc:	4413      	add	r3, r2
 80147ce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80147d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d2:	3304      	adds	r3, #4
 80147d4:	781b      	ldrb	r3, [r3, #0]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d006      	beq.n	80147e8 <find_volume+0x168>
 80147da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147dc:	3308      	adds	r3, #8
 80147de:	4618      	mov	r0, r3
 80147e0:	f7fe fca2 	bl	8013128 <ld_dword>
 80147e4:	4602      	mov	r2, r0
 80147e6:	e000      	b.n	80147ea <find_volume+0x16a>
 80147e8:	2200      	movs	r2, #0
 80147ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147ec:	009b      	lsls	r3, r3, #2
 80147ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80147f2:	440b      	add	r3, r1
 80147f4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80147f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147fa:	3301      	adds	r3, #1
 80147fc:	643b      	str	r3, [r7, #64]	; 0x40
 80147fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014800:	2b03      	cmp	r3, #3
 8014802:	d9dc      	bls.n	80147be <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014804:	2300      	movs	r3, #0
 8014806:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801480a:	2b00      	cmp	r3, #0
 801480c:	d002      	beq.n	8014814 <find_volume+0x194>
 801480e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014810:	3b01      	subs	r3, #1
 8014812:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014816:	009b      	lsls	r3, r3, #2
 8014818:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801481c:	4413      	add	r3, r2
 801481e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014822:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014826:	2b00      	cmp	r3, #0
 8014828:	d005      	beq.n	8014836 <find_volume+0x1b6>
 801482a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801482c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801482e:	f7ff fed1 	bl	80145d4 <check_fs>
 8014832:	4603      	mov	r3, r0
 8014834:	e000      	b.n	8014838 <find_volume+0x1b8>
 8014836:	2303      	movs	r3, #3
 8014838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801483c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014840:	2b01      	cmp	r3, #1
 8014842:	d905      	bls.n	8014850 <find_volume+0x1d0>
 8014844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014846:	3301      	adds	r3, #1
 8014848:	643b      	str	r3, [r7, #64]	; 0x40
 801484a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801484c:	2b03      	cmp	r3, #3
 801484e:	d9e1      	bls.n	8014814 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014854:	2b04      	cmp	r3, #4
 8014856:	d101      	bne.n	801485c <find_volume+0x1dc>
 8014858:	2301      	movs	r3, #1
 801485a:	e191      	b.n	8014b80 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801485c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014860:	2b01      	cmp	r3, #1
 8014862:	d901      	bls.n	8014868 <find_volume+0x1e8>
 8014864:	230d      	movs	r3, #13
 8014866:	e18b      	b.n	8014b80 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801486a:	3338      	adds	r3, #56	; 0x38
 801486c:	330b      	adds	r3, #11
 801486e:	4618      	mov	r0, r3
 8014870:	f7fe fc42 	bl	80130f8 <ld_word>
 8014874:	4603      	mov	r3, r0
 8014876:	461a      	mov	r2, r3
 8014878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801487a:	899b      	ldrh	r3, [r3, #12]
 801487c:	429a      	cmp	r2, r3
 801487e:	d001      	beq.n	8014884 <find_volume+0x204>
 8014880:	230d      	movs	r3, #13
 8014882:	e17d      	b.n	8014b80 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014886:	3338      	adds	r3, #56	; 0x38
 8014888:	3316      	adds	r3, #22
 801488a:	4618      	mov	r0, r3
 801488c:	f7fe fc34 	bl	80130f8 <ld_word>
 8014890:	4603      	mov	r3, r0
 8014892:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014896:	2b00      	cmp	r3, #0
 8014898:	d106      	bne.n	80148a8 <find_volume+0x228>
 801489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801489c:	3338      	adds	r3, #56	; 0x38
 801489e:	3324      	adds	r3, #36	; 0x24
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7fe fc41 	bl	8013128 <ld_dword>
 80148a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80148a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80148ac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80148ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80148b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80148b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ba:	789b      	ldrb	r3, [r3, #2]
 80148bc:	2b01      	cmp	r3, #1
 80148be:	d005      	beq.n	80148cc <find_volume+0x24c>
 80148c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c2:	789b      	ldrb	r3, [r3, #2]
 80148c4:	2b02      	cmp	r3, #2
 80148c6:	d001      	beq.n	80148cc <find_volume+0x24c>
 80148c8:	230d      	movs	r3, #13
 80148ca:	e159      	b.n	8014b80 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80148cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ce:	789b      	ldrb	r3, [r3, #2]
 80148d0:	461a      	mov	r2, r3
 80148d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148d4:	fb02 f303 	mul.w	r3, r2, r3
 80148d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80148da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148e0:	b29a      	uxth	r2, r3
 80148e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80148e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e8:	895b      	ldrh	r3, [r3, #10]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d008      	beq.n	8014900 <find_volume+0x280>
 80148ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f0:	895b      	ldrh	r3, [r3, #10]
 80148f2:	461a      	mov	r2, r3
 80148f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f6:	895b      	ldrh	r3, [r3, #10]
 80148f8:	3b01      	subs	r3, #1
 80148fa:	4013      	ands	r3, r2
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d001      	beq.n	8014904 <find_volume+0x284>
 8014900:	230d      	movs	r3, #13
 8014902:	e13d      	b.n	8014b80 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014906:	3338      	adds	r3, #56	; 0x38
 8014908:	3311      	adds	r3, #17
 801490a:	4618      	mov	r0, r3
 801490c:	f7fe fbf4 	bl	80130f8 <ld_word>
 8014910:	4603      	mov	r3, r0
 8014912:	461a      	mov	r2, r3
 8014914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014916:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801491a:	891b      	ldrh	r3, [r3, #8]
 801491c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801491e:	8992      	ldrh	r2, [r2, #12]
 8014920:	0952      	lsrs	r2, r2, #5
 8014922:	b292      	uxth	r2, r2
 8014924:	fbb3 f1f2 	udiv	r1, r3, r2
 8014928:	fb02 f201 	mul.w	r2, r2, r1
 801492c:	1a9b      	subs	r3, r3, r2
 801492e:	b29b      	uxth	r3, r3
 8014930:	2b00      	cmp	r3, #0
 8014932:	d003      	beq.n	801493c <find_volume+0x2bc>
 8014934:	230d      	movs	r3, #13
 8014936:	e123      	b.n	8014b80 <find_volume+0x500>
 8014938:	20000994 	.word	0x20000994

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801493c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801493e:	3338      	adds	r3, #56	; 0x38
 8014940:	3313      	adds	r3, #19
 8014942:	4618      	mov	r0, r3
 8014944:	f7fe fbd8 	bl	80130f8 <ld_word>
 8014948:	4603      	mov	r3, r0
 801494a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801494c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801494e:	2b00      	cmp	r3, #0
 8014950:	d106      	bne.n	8014960 <find_volume+0x2e0>
 8014952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014954:	3338      	adds	r3, #56	; 0x38
 8014956:	3320      	adds	r3, #32
 8014958:	4618      	mov	r0, r3
 801495a:	f7fe fbe5 	bl	8013128 <ld_dword>
 801495e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014962:	3338      	adds	r3, #56	; 0x38
 8014964:	330e      	adds	r3, #14
 8014966:	4618      	mov	r0, r3
 8014968:	f7fe fbc6 	bl	80130f8 <ld_word>
 801496c:	4603      	mov	r3, r0
 801496e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014970:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014972:	2b00      	cmp	r3, #0
 8014974:	d101      	bne.n	801497a <find_volume+0x2fa>
 8014976:	230d      	movs	r3, #13
 8014978:	e102      	b.n	8014b80 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801497a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801497c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801497e:	4413      	add	r3, r2
 8014980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014982:	8911      	ldrh	r1, [r2, #8]
 8014984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014986:	8992      	ldrh	r2, [r2, #12]
 8014988:	0952      	lsrs	r2, r2, #5
 801498a:	b292      	uxth	r2, r2
 801498c:	fbb1 f2f2 	udiv	r2, r1, r2
 8014990:	b292      	uxth	r2, r2
 8014992:	4413      	add	r3, r2
 8014994:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801499a:	429a      	cmp	r2, r3
 801499c:	d201      	bcs.n	80149a2 <find_volume+0x322>
 801499e:	230d      	movs	r3, #13
 80149a0:	e0ee      	b.n	8014b80 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80149a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80149a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a6:	1ad3      	subs	r3, r2, r3
 80149a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149aa:	8952      	ldrh	r2, [r2, #10]
 80149ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80149b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80149b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d101      	bne.n	80149bc <find_volume+0x33c>
 80149b8:	230d      	movs	r3, #13
 80149ba:	e0e1      	b.n	8014b80 <find_volume+0x500>
		fmt = FS_FAT32;
 80149bc:	2303      	movs	r3, #3
 80149be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80149c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80149c8:	4293      	cmp	r3, r2
 80149ca:	d802      	bhi.n	80149d2 <find_volume+0x352>
 80149cc:	2302      	movs	r3, #2
 80149ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80149d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80149d8:	4293      	cmp	r3, r2
 80149da:	d802      	bhi.n	80149e2 <find_volume+0x362>
 80149dc:	2301      	movs	r3, #1
 80149de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80149e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e4:	1c9a      	adds	r2, r3, #2
 80149e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149e8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80149ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80149ee:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80149f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80149f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149f4:	441a      	add	r2, r3
 80149f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80149fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80149fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149fe:	441a      	add	r2, r3
 8014a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a02:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8014a04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a08:	2b03      	cmp	r3, #3
 8014a0a:	d11e      	bne.n	8014a4a <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a0e:	3338      	adds	r3, #56	; 0x38
 8014a10:	332a      	adds	r3, #42	; 0x2a
 8014a12:	4618      	mov	r0, r3
 8014a14:	f7fe fb70 	bl	80130f8 <ld_word>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d001      	beq.n	8014a22 <find_volume+0x3a2>
 8014a1e:	230d      	movs	r3, #13
 8014a20:	e0ae      	b.n	8014b80 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a24:	891b      	ldrh	r3, [r3, #8]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d001      	beq.n	8014a2e <find_volume+0x3ae>
 8014a2a:	230d      	movs	r3, #13
 8014a2c:	e0a8      	b.n	8014b80 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a30:	3338      	adds	r3, #56	; 0x38
 8014a32:	332c      	adds	r3, #44	; 0x2c
 8014a34:	4618      	mov	r0, r3
 8014a36:	f7fe fb77 	bl	8013128 <ld_dword>
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a3e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a42:	69db      	ldr	r3, [r3, #28]
 8014a44:	009b      	lsls	r3, r3, #2
 8014a46:	647b      	str	r3, [r7, #68]	; 0x44
 8014a48:	e01f      	b.n	8014a8a <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a4c:	891b      	ldrh	r3, [r3, #8]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d101      	bne.n	8014a56 <find_volume+0x3d6>
 8014a52:	230d      	movs	r3, #13
 8014a54:	e094      	b.n	8014b80 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a5c:	441a      	add	r2, r3
 8014a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a60:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014a62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a66:	2b02      	cmp	r3, #2
 8014a68:	d103      	bne.n	8014a72 <find_volume+0x3f2>
 8014a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a6c:	69db      	ldr	r3, [r3, #28]
 8014a6e:	005b      	lsls	r3, r3, #1
 8014a70:	e00a      	b.n	8014a88 <find_volume+0x408>
 8014a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a74:	69da      	ldr	r2, [r3, #28]
 8014a76:	4613      	mov	r3, r2
 8014a78:	005b      	lsls	r3, r3, #1
 8014a7a:	4413      	add	r3, r2
 8014a7c:	085a      	lsrs	r2, r3, #1
 8014a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a80:	69db      	ldr	r3, [r3, #28]
 8014a82:	f003 0301 	and.w	r3, r3, #1
 8014a86:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014a88:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8c:	6a1a      	ldr	r2, [r3, #32]
 8014a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a90:	899b      	ldrh	r3, [r3, #12]
 8014a92:	4619      	mov	r1, r3
 8014a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a96:	440b      	add	r3, r1
 8014a98:	3b01      	subs	r3, #1
 8014a9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a9c:	8989      	ldrh	r1, [r1, #12]
 8014a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d201      	bcs.n	8014aaa <find_volume+0x42a>
 8014aa6:	230d      	movs	r3, #13
 8014aa8:	e06a      	b.n	8014b80 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aac:	f04f 32ff 	mov.w	r2, #4294967295
 8014ab0:	619a      	str	r2, [r3, #24]
 8014ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ab4:	699a      	ldr	r2, [r3, #24]
 8014ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ab8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8014aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014abc:	2280      	movs	r2, #128	; 0x80
 8014abe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014ac0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014ac4:	2b03      	cmp	r3, #3
 8014ac6:	d149      	bne.n	8014b5c <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aca:	3338      	adds	r3, #56	; 0x38
 8014acc:	3330      	adds	r3, #48	; 0x30
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f7fe fb12 	bl	80130f8 <ld_word>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	2b01      	cmp	r3, #1
 8014ad8:	d140      	bne.n	8014b5c <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014adc:	3301      	adds	r3, #1
 8014ade:	4619      	mov	r1, r3
 8014ae0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014ae2:	f7fe fde9 	bl	80136b8 <move_window>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d137      	bne.n	8014b5c <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8014aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aee:	2200      	movs	r2, #0
 8014af0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014af4:	3338      	adds	r3, #56	; 0x38
 8014af6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7fe fafc 	bl	80130f8 <ld_word>
 8014b00:	4603      	mov	r3, r0
 8014b02:	461a      	mov	r2, r3
 8014b04:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d127      	bne.n	8014b5c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b0e:	3338      	adds	r3, #56	; 0x38
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7fe fb09 	bl	8013128 <ld_dword>
 8014b16:	4602      	mov	r2, r0
 8014b18:	4b1b      	ldr	r3, [pc, #108]	; (8014b88 <find_volume+0x508>)
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	d11e      	bne.n	8014b5c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b20:	3338      	adds	r3, #56	; 0x38
 8014b22:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7fe fafe 	bl	8013128 <ld_dword>
 8014b2c:	4602      	mov	r2, r0
 8014b2e:	4b17      	ldr	r3, [pc, #92]	; (8014b8c <find_volume+0x50c>)
 8014b30:	429a      	cmp	r2, r3
 8014b32:	d113      	bne.n	8014b5c <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b36:	3338      	adds	r3, #56	; 0x38
 8014b38:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7fe faf3 	bl	8013128 <ld_dword>
 8014b42:	4602      	mov	r2, r0
 8014b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b46:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b4a:	3338      	adds	r3, #56	; 0x38
 8014b4c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014b50:	4618      	mov	r0, r3
 8014b52:	f7fe fae9 	bl	8013128 <ld_dword>
 8014b56:	4602      	mov	r2, r0
 8014b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b5a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b5e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014b62:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014b64:	4b0a      	ldr	r3, [pc, #40]	; (8014b90 <find_volume+0x510>)
 8014b66:	881b      	ldrh	r3, [r3, #0]
 8014b68:	3301      	adds	r3, #1
 8014b6a:	b29a      	uxth	r2, r3
 8014b6c:	4b08      	ldr	r3, [pc, #32]	; (8014b90 <find_volume+0x510>)
 8014b6e:	801a      	strh	r2, [r3, #0]
 8014b70:	4b07      	ldr	r3, [pc, #28]	; (8014b90 <find_volume+0x510>)
 8014b72:	881a      	ldrh	r2, [r3, #0]
 8014b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b76:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014b78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014b7a:	f7fe fd35 	bl	80135e8 <clear_lock>
#endif
	return FR_OK;
 8014b7e:	2300      	movs	r3, #0
}
 8014b80:	4618      	mov	r0, r3
 8014b82:	3758      	adds	r7, #88	; 0x58
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}
 8014b88:	41615252 	.word	0x41615252
 8014b8c:	61417272 	.word	0x61417272
 8014b90:	20000998 	.word	0x20000998

08014b94 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b084      	sub	sp, #16
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
 8014b9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014b9e:	2309      	movs	r3, #9
 8014ba0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d02e      	beq.n	8014c06 <validate+0x72>
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d02a      	beq.n	8014c06 <validate+0x72>
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	781b      	ldrb	r3, [r3, #0]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d025      	beq.n	8014c06 <validate+0x72>
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	889a      	ldrh	r2, [r3, #4]
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	88db      	ldrh	r3, [r3, #6]
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	d11e      	bne.n	8014c06 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7fe fb92 	bl	80132f6 <lock_fs>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d014      	beq.n	8014c02 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	785b      	ldrb	r3, [r3, #1]
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fe f9ec 	bl	8012fbc <disk_status>
 8014be4:	4603      	mov	r3, r0
 8014be6:	f003 0301 	and.w	r3, r3, #1
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d102      	bne.n	8014bf4 <validate+0x60>
				res = FR_OK;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	73fb      	strb	r3, [r7, #15]
 8014bf2:	e008      	b.n	8014c06 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	2100      	movs	r1, #0
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7fe fb91 	bl	8013322 <unlock_fs>
 8014c00:	e001      	b.n	8014c06 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014c02:	230f      	movs	r3, #15
 8014c04:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014c06:	7bfb      	ldrb	r3, [r7, #15]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d102      	bne.n	8014c12 <validate+0x7e>
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	e000      	b.n	8014c14 <validate+0x80>
 8014c12:	2300      	movs	r3, #0
 8014c14:	683a      	ldr	r2, [r7, #0]
 8014c16:	6013      	str	r3, [r2, #0]
	return res;
 8014c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3710      	adds	r7, #16
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}
	...

08014c24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b088      	sub	sp, #32
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	4613      	mov	r3, r2
 8014c30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014c36:	f107 0310 	add.w	r3, r7, #16
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7ff fc86 	bl	801454c <get_ldnumber>
 8014c40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014c42:	69fb      	ldr	r3, [r7, #28]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	da01      	bge.n	8014c4c <f_mount+0x28>
 8014c48:	230b      	movs	r3, #11
 8014c4a:	e048      	b.n	8014cde <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014c4c:	4a26      	ldr	r2, [pc, #152]	; (8014ce8 <f_mount+0xc4>)
 8014c4e:	69fb      	ldr	r3, [r7, #28]
 8014c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014c56:	69bb      	ldr	r3, [r7, #24]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d00f      	beq.n	8014c7c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014c5c:	69b8      	ldr	r0, [r7, #24]
 8014c5e:	f7fe fcc3 	bl	80135e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8014c62:	69bb      	ldr	r3, [r7, #24]
 8014c64:	691b      	ldr	r3, [r3, #16]
 8014c66:	4618      	mov	r0, r3
 8014c68:	f000 fd04 	bl	8015674 <ff_del_syncobj>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d101      	bne.n	8014c76 <f_mount+0x52>
 8014c72:	2302      	movs	r3, #2
 8014c74:	e033      	b.n	8014cde <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014c76:	69bb      	ldr	r3, [r7, #24]
 8014c78:	2200      	movs	r2, #0
 8014c7a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d00f      	beq.n	8014ca2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	2200      	movs	r2, #0
 8014c86:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014c88:	69fb      	ldr	r3, [r7, #28]
 8014c8a:	b2da      	uxtb	r2, r3
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	3310      	adds	r3, #16
 8014c90:	4619      	mov	r1, r3
 8014c92:	4610      	mov	r0, r2
 8014c94:	f000 fcd3 	bl	801563e <ff_cre_syncobj>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d101      	bne.n	8014ca2 <f_mount+0x7e>
 8014c9e:	2302      	movs	r3, #2
 8014ca0:	e01d      	b.n	8014cde <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014ca2:	68fa      	ldr	r2, [r7, #12]
 8014ca4:	4910      	ldr	r1, [pc, #64]	; (8014ce8 <f_mount+0xc4>)
 8014ca6:	69fb      	ldr	r3, [r7, #28]
 8014ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d002      	beq.n	8014cb8 <f_mount+0x94>
 8014cb2:	79fb      	ldrb	r3, [r7, #7]
 8014cb4:	2b01      	cmp	r3, #1
 8014cb6:	d001      	beq.n	8014cbc <f_mount+0x98>
 8014cb8:	2300      	movs	r3, #0
 8014cba:	e010      	b.n	8014cde <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014cbc:	f107 010c 	add.w	r1, r7, #12
 8014cc0:	f107 0308 	add.w	r3, r7, #8
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7ff fcda 	bl	8014680 <find_volume>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	7dfa      	ldrb	r2, [r7, #23]
 8014cd4:	4611      	mov	r1, r2
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f7fe fb23 	bl	8013322 <unlock_fs>
 8014cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3720      	adds	r7, #32
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	20000994 	.word	0x20000994

08014cec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b098      	sub	sp, #96	; 0x60
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	60f8      	str	r0, [r7, #12]
 8014cf4:	60b9      	str	r1, [r7, #8]
 8014cf6:	4613      	mov	r3, r2
 8014cf8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d101      	bne.n	8014d04 <f_open+0x18>
 8014d00:	2309      	movs	r3, #9
 8014d02:	e1c2      	b.n	801508a <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014d04:	79fb      	ldrb	r3, [r7, #7]
 8014d06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014d0a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014d0c:	79fa      	ldrb	r2, [r7, #7]
 8014d0e:	f107 0110 	add.w	r1, r7, #16
 8014d12:	f107 0308 	add.w	r3, r7, #8
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7ff fcb2 	bl	8014680 <find_volume>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014d22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	f040 819f 	bne.w	801506a <f_open+0x37e>
		dj.obj.fs = fs;
 8014d2c:	693b      	ldr	r3, [r7, #16]
 8014d2e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014d30:	68ba      	ldr	r2, [r7, #8]
 8014d32:	f107 0314 	add.w	r3, r7, #20
 8014d36:	4611      	mov	r1, r2
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7ff fb91 	bl	8014460 <follow_path>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d11a      	bne.n	8014d82 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014d4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014d50:	b25b      	sxtb	r3, r3
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	da03      	bge.n	8014d5e <f_open+0x72>
				res = FR_INVALID_NAME;
 8014d56:	2306      	movs	r3, #6
 8014d58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014d5c:	e011      	b.n	8014d82 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014d5e:	79fb      	ldrb	r3, [r7, #7]
 8014d60:	f023 0301 	bic.w	r3, r3, #1
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	bf14      	ite	ne
 8014d68:	2301      	movne	r3, #1
 8014d6a:	2300      	moveq	r3, #0
 8014d6c:	b2db      	uxtb	r3, r3
 8014d6e:	461a      	mov	r2, r3
 8014d70:	f107 0314 	add.w	r3, r7, #20
 8014d74:	4611      	mov	r1, r2
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7fe faee 	bl	8013358 <chk_lock>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014d82:	79fb      	ldrb	r3, [r7, #7]
 8014d84:	f003 031c 	and.w	r3, r3, #28
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d07f      	beq.n	8014e8c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d017      	beq.n	8014dc4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014d94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d98:	2b04      	cmp	r3, #4
 8014d9a:	d10e      	bne.n	8014dba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014d9c:	f7fe fb38 	bl	8013410 <enq_lock>
 8014da0:	4603      	mov	r3, r0
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d006      	beq.n	8014db4 <f_open+0xc8>
 8014da6:	f107 0314 	add.w	r3, r7, #20
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7ff fa97 	bl	80142de <dir_register>
 8014db0:	4603      	mov	r3, r0
 8014db2:	e000      	b.n	8014db6 <f_open+0xca>
 8014db4:	2312      	movs	r3, #18
 8014db6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014dba:	79fb      	ldrb	r3, [r7, #7]
 8014dbc:	f043 0308 	orr.w	r3, r3, #8
 8014dc0:	71fb      	strb	r3, [r7, #7]
 8014dc2:	e010      	b.n	8014de6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014dc4:	7ebb      	ldrb	r3, [r7, #26]
 8014dc6:	f003 0311 	and.w	r3, r3, #17
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d003      	beq.n	8014dd6 <f_open+0xea>
					res = FR_DENIED;
 8014dce:	2307      	movs	r3, #7
 8014dd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014dd4:	e007      	b.n	8014de6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014dd6:	79fb      	ldrb	r3, [r7, #7]
 8014dd8:	f003 0304 	and.w	r3, r3, #4
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d002      	beq.n	8014de6 <f_open+0xfa>
 8014de0:	2308      	movs	r3, #8
 8014de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014de6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d168      	bne.n	8014ec0 <f_open+0x1d4>
 8014dee:	79fb      	ldrb	r3, [r7, #7]
 8014df0:	f003 0308 	and.w	r3, r3, #8
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d063      	beq.n	8014ec0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014df8:	f7fd fe78 	bl	8012aec <get_fattime>
 8014dfc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e00:	330e      	adds	r3, #14
 8014e02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014e04:	4618      	mov	r0, r3
 8014e06:	f7fe f9cd 	bl	80131a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e0c:	3316      	adds	r3, #22
 8014e0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014e10:	4618      	mov	r0, r3
 8014e12:	f7fe f9c7 	bl	80131a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e18:	330b      	adds	r3, #11
 8014e1a:	2220      	movs	r2, #32
 8014e1c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014e1e:	693b      	ldr	r3, [r7, #16]
 8014e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e22:	4611      	mov	r1, r2
 8014e24:	4618      	mov	r0, r3
 8014e26:	f7ff f9c6 	bl	80141b6 <ld_clust>
 8014e2a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014e30:	2200      	movs	r2, #0
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7ff f9de 	bl	80141f4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e3a:	331c      	adds	r3, #28
 8014e3c:	2100      	movs	r1, #0
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f7fe f9b0 	bl	80131a4 <st_dword>
					fs->wflag = 1;
 8014e44:	693b      	ldr	r3, [r7, #16]
 8014e46:	2201      	movs	r2, #1
 8014e48:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d037      	beq.n	8014ec0 <f_open+0x1d4>
						dw = fs->winsect;
 8014e50:	693b      	ldr	r3, [r7, #16]
 8014e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e54:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014e56:	f107 0314 	add.w	r3, r7, #20
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f7fe fece 	bl	8013c00 <remove_chain>
 8014e64:	4603      	mov	r3, r0
 8014e66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014e6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d126      	bne.n	8014ec0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014e76:	4618      	mov	r0, r3
 8014e78:	f7fe fc1e 	bl	80136b8 <move_window>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014e86:	3a01      	subs	r2, #1
 8014e88:	615a      	str	r2, [r3, #20]
 8014e8a:	e019      	b.n	8014ec0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014e8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d115      	bne.n	8014ec0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014e94:	7ebb      	ldrb	r3, [r7, #26]
 8014e96:	f003 0310 	and.w	r3, r3, #16
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d003      	beq.n	8014ea6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8014e9e:	2304      	movs	r3, #4
 8014ea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014ea4:	e00c      	b.n	8014ec0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014ea6:	79fb      	ldrb	r3, [r7, #7]
 8014ea8:	f003 0302 	and.w	r3, r3, #2
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d007      	beq.n	8014ec0 <f_open+0x1d4>
 8014eb0:	7ebb      	ldrb	r3, [r7, #26]
 8014eb2:	f003 0301 	and.w	r3, r3, #1
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d002      	beq.n	8014ec0 <f_open+0x1d4>
						res = FR_DENIED;
 8014eba:	2307      	movs	r3, #7
 8014ebc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d128      	bne.n	8014f1a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014ec8:	79fb      	ldrb	r3, [r7, #7]
 8014eca:	f003 0308 	and.w	r3, r3, #8
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d003      	beq.n	8014eda <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014ed2:	79fb      	ldrb	r3, [r7, #7]
 8014ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ed8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014eda:	693b      	ldr	r3, [r7, #16]
 8014edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014ee8:	79fb      	ldrb	r3, [r7, #7]
 8014eea:	f023 0301 	bic.w	r3, r3, #1
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	bf14      	ite	ne
 8014ef2:	2301      	movne	r3, #1
 8014ef4:	2300      	moveq	r3, #0
 8014ef6:	b2db      	uxtb	r3, r3
 8014ef8:	461a      	mov	r2, r3
 8014efa:	f107 0314 	add.w	r3, r7, #20
 8014efe:	4611      	mov	r1, r2
 8014f00:	4618      	mov	r0, r3
 8014f02:	f7fe faa7 	bl	8013454 <inc_lock>
 8014f06:	4602      	mov	r2, r0
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	691b      	ldr	r3, [r3, #16]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d102      	bne.n	8014f1a <f_open+0x22e>
 8014f14:	2302      	movs	r3, #2
 8014f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014f1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	f040 80a3 	bne.w	801506a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014f24:	693b      	ldr	r3, [r7, #16]
 8014f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f28:	4611      	mov	r1, r2
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7ff f943 	bl	80141b6 <ld_clust>
 8014f30:	4602      	mov	r2, r0
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f38:	331c      	adds	r3, #28
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7fe f8f4 	bl	8013128 <ld_dword>
 8014f40:	4602      	mov	r2, r0
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	2200      	movs	r2, #0
 8014f4a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014f4c:	693a      	ldr	r2, [r7, #16]
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	88da      	ldrh	r2, [r3, #6]
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	79fa      	ldrb	r2, [r7, #7]
 8014f5e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	2200      	movs	r2, #0
 8014f64:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	2200      	movs	r2, #0
 8014f70:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	3330      	adds	r3, #48	; 0x30
 8014f76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014f7a:	2100      	movs	r1, #0
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f7fe f95e 	bl	801323e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014f82:	79fb      	ldrb	r3, [r7, #7]
 8014f84:	f003 0320 	and.w	r3, r3, #32
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d06e      	beq.n	801506a <f_open+0x37e>
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	68db      	ldr	r3, [r3, #12]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d06a      	beq.n	801506a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	68da      	ldr	r2, [r3, #12]
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	895b      	ldrh	r3, [r3, #10]
 8014fa0:	461a      	mov	r2, r3
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	899b      	ldrh	r3, [r3, #12]
 8014fa6:	fb03 f302 	mul.w	r3, r3, r2
 8014faa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	689b      	ldr	r3, [r3, #8]
 8014fb0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	68db      	ldr	r3, [r3, #12]
 8014fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8014fb8:	e016      	b.n	8014fe8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f7fe fc37 	bl	8013832 <get_fat>
 8014fc4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014fc8:	2b01      	cmp	r3, #1
 8014fca:	d802      	bhi.n	8014fd2 <f_open+0x2e6>
 8014fcc:	2302      	movs	r3, #2
 8014fce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fd8:	d102      	bne.n	8014fe0 <f_open+0x2f4>
 8014fda:	2301      	movs	r3, #1
 8014fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014fe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014fe4:	1ad3      	subs	r3, r2, r3
 8014fe6:	657b      	str	r3, [r7, #84]	; 0x54
 8014fe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d103      	bne.n	8014ff8 <f_open+0x30c>
 8014ff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d8e0      	bhi.n	8014fba <f_open+0x2ce>
				}
				fp->clust = clst;
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014ffc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015002:	2b00      	cmp	r3, #0
 8015004:	d131      	bne.n	801506a <f_open+0x37e>
 8015006:	693b      	ldr	r3, [r7, #16]
 8015008:	899b      	ldrh	r3, [r3, #12]
 801500a:	461a      	mov	r2, r3
 801500c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801500e:	fbb3 f1f2 	udiv	r1, r3, r2
 8015012:	fb02 f201 	mul.w	r2, r2, r1
 8015016:	1a9b      	subs	r3, r3, r2
 8015018:	2b00      	cmp	r3, #0
 801501a:	d026      	beq.n	801506a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801501c:	693b      	ldr	r3, [r7, #16]
 801501e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015020:	4618      	mov	r0, r3
 8015022:	f7fe fbe7 	bl	80137f4 <clust2sect>
 8015026:	6478      	str	r0, [r7, #68]	; 0x44
 8015028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801502a:	2b00      	cmp	r3, #0
 801502c:	d103      	bne.n	8015036 <f_open+0x34a>
						res = FR_INT_ERR;
 801502e:	2302      	movs	r3, #2
 8015030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015034:	e019      	b.n	801506a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	899b      	ldrh	r3, [r3, #12]
 801503a:	461a      	mov	r2, r3
 801503c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801503e:	fbb3 f2f2 	udiv	r2, r3, r2
 8015042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015044:	441a      	add	r2, r3
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	7858      	ldrb	r0, [r3, #1]
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	6a1a      	ldr	r2, [r3, #32]
 8015058:	2301      	movs	r3, #1
 801505a:	f7fd ffef 	bl	801303c <disk_read>
 801505e:	4603      	mov	r3, r0
 8015060:	2b00      	cmp	r3, #0
 8015062:	d002      	beq.n	801506a <f_open+0x37e>
 8015064:	2301      	movs	r3, #1
 8015066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801506a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801506e:	2b00      	cmp	r3, #0
 8015070:	d002      	beq.n	8015078 <f_open+0x38c>
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	2200      	movs	r2, #0
 8015076:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015078:	693b      	ldr	r3, [r7, #16]
 801507a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801507e:	4611      	mov	r1, r2
 8015080:	4618      	mov	r0, r3
 8015082:	f7fe f94e 	bl	8013322 <unlock_fs>
 8015086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801508a:	4618      	mov	r0, r3
 801508c:	3760      	adds	r7, #96	; 0x60
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}

08015092 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8015092:	b580      	push	{r7, lr}
 8015094:	b08c      	sub	sp, #48	; 0x30
 8015096:	af00      	add	r7, sp, #0
 8015098:	60f8      	str	r0, [r7, #12]
 801509a:	60b9      	str	r1, [r7, #8]
 801509c:	607a      	str	r2, [r7, #4]
 801509e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80150a0:	68bb      	ldr	r3, [r7, #8]
 80150a2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	2200      	movs	r2, #0
 80150a8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	f107 0210 	add.w	r2, r7, #16
 80150b0:	4611      	mov	r1, r2
 80150b2:	4618      	mov	r0, r3
 80150b4:	f7ff fd6e 	bl	8014b94 <validate>
 80150b8:	4603      	mov	r3, r0
 80150ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80150be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d107      	bne.n	80150d6 <f_write+0x44>
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	7d5b      	ldrb	r3, [r3, #21]
 80150ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80150ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d009      	beq.n	80150ea <f_write+0x58>
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80150dc:	4611      	mov	r1, r2
 80150de:	4618      	mov	r0, r3
 80150e0:	f7fe f91f 	bl	8013322 <unlock_fs>
 80150e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150e8:	e192      	b.n	8015410 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	7d1b      	ldrb	r3, [r3, #20]
 80150ee:	f003 0302 	and.w	r3, r3, #2
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d106      	bne.n	8015104 <f_write+0x72>
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	2107      	movs	r1, #7
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7fe f911 	bl	8013322 <unlock_fs>
 8015100:	2307      	movs	r3, #7
 8015102:	e185      	b.n	8015410 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	699a      	ldr	r2, [r3, #24]
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	441a      	add	r2, r3
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	699b      	ldr	r3, [r3, #24]
 8015110:	429a      	cmp	r2, r3
 8015112:	f080 816a 	bcs.w	80153ea <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	699b      	ldr	r3, [r3, #24]
 801511a:	43db      	mvns	r3, r3
 801511c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801511e:	e164      	b.n	80153ea <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	699b      	ldr	r3, [r3, #24]
 8015124:	693a      	ldr	r2, [r7, #16]
 8015126:	8992      	ldrh	r2, [r2, #12]
 8015128:	fbb3 f1f2 	udiv	r1, r3, r2
 801512c:	fb02 f201 	mul.w	r2, r2, r1
 8015130:	1a9b      	subs	r3, r3, r2
 8015132:	2b00      	cmp	r3, #0
 8015134:	f040 810f 	bne.w	8015356 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	699b      	ldr	r3, [r3, #24]
 801513c:	693a      	ldr	r2, [r7, #16]
 801513e:	8992      	ldrh	r2, [r2, #12]
 8015140:	fbb3 f3f2 	udiv	r3, r3, r2
 8015144:	693a      	ldr	r2, [r7, #16]
 8015146:	8952      	ldrh	r2, [r2, #10]
 8015148:	3a01      	subs	r2, #1
 801514a:	4013      	ands	r3, r2
 801514c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d14d      	bne.n	80151f0 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	699b      	ldr	r3, [r3, #24]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d10c      	bne.n	8015176 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	689b      	ldr	r3, [r3, #8]
 8015160:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015164:	2b00      	cmp	r3, #0
 8015166:	d11a      	bne.n	801519e <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	2100      	movs	r1, #0
 801516c:	4618      	mov	r0, r3
 801516e:	f7fe fdac 	bl	8013cca <create_chain>
 8015172:	62b8      	str	r0, [r7, #40]	; 0x28
 8015174:	e013      	b.n	801519e <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801517a:	2b00      	cmp	r3, #0
 801517c:	d007      	beq.n	801518e <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	699b      	ldr	r3, [r3, #24]
 8015182:	4619      	mov	r1, r3
 8015184:	68f8      	ldr	r0, [r7, #12]
 8015186:	f7fe fe38 	bl	8013dfa <clmt_clust>
 801518a:	62b8      	str	r0, [r7, #40]	; 0x28
 801518c:	e007      	b.n	801519e <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801518e:	68fa      	ldr	r2, [r7, #12]
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	69db      	ldr	r3, [r3, #28]
 8015194:	4619      	mov	r1, r3
 8015196:	4610      	mov	r0, r2
 8015198:	f7fe fd97 	bl	8013cca <create_chain>
 801519c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	f000 8127 	beq.w	80153f4 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80151a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a8:	2b01      	cmp	r3, #1
 80151aa:	d109      	bne.n	80151c0 <f_write+0x12e>
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	2202      	movs	r2, #2
 80151b0:	755a      	strb	r2, [r3, #21]
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	2102      	movs	r1, #2
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7fe f8b3 	bl	8013322 <unlock_fs>
 80151bc:	2302      	movs	r3, #2
 80151be:	e127      	b.n	8015410 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80151c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151c6:	d109      	bne.n	80151dc <f_write+0x14a>
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	2201      	movs	r2, #1
 80151cc:	755a      	strb	r2, [r3, #21]
 80151ce:	693b      	ldr	r3, [r7, #16]
 80151d0:	2101      	movs	r1, #1
 80151d2:	4618      	mov	r0, r3
 80151d4:	f7fe f8a5 	bl	8013322 <unlock_fs>
 80151d8:	2301      	movs	r3, #1
 80151da:	e119      	b.n	8015410 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80151e0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	689b      	ldr	r3, [r3, #8]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d102      	bne.n	80151f0 <f_write+0x15e>
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80151ee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	7d1b      	ldrb	r3, [r3, #20]
 80151f4:	b25b      	sxtb	r3, r3
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	da1d      	bge.n	8015236 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	7858      	ldrb	r0, [r3, #1]
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	6a1a      	ldr	r2, [r3, #32]
 8015208:	2301      	movs	r3, #1
 801520a:	f7fd ff37 	bl	801307c <disk_write>
 801520e:	4603      	mov	r3, r0
 8015210:	2b00      	cmp	r3, #0
 8015212:	d009      	beq.n	8015228 <f_write+0x196>
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	2201      	movs	r2, #1
 8015218:	755a      	strb	r2, [r3, #21]
 801521a:	693b      	ldr	r3, [r7, #16]
 801521c:	2101      	movs	r1, #1
 801521e:	4618      	mov	r0, r3
 8015220:	f7fe f87f 	bl	8013322 <unlock_fs>
 8015224:	2301      	movs	r3, #1
 8015226:	e0f3      	b.n	8015410 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	7d1b      	ldrb	r3, [r3, #20]
 801522c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015230:	b2da      	uxtb	r2, r3
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015236:	693a      	ldr	r2, [r7, #16]
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	69db      	ldr	r3, [r3, #28]
 801523c:	4619      	mov	r1, r3
 801523e:	4610      	mov	r0, r2
 8015240:	f7fe fad8 	bl	80137f4 <clust2sect>
 8015244:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015246:	697b      	ldr	r3, [r7, #20]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d109      	bne.n	8015260 <f_write+0x1ce>
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	2202      	movs	r2, #2
 8015250:	755a      	strb	r2, [r3, #21]
 8015252:	693b      	ldr	r3, [r7, #16]
 8015254:	2102      	movs	r1, #2
 8015256:	4618      	mov	r0, r3
 8015258:	f7fe f863 	bl	8013322 <unlock_fs>
 801525c:	2302      	movs	r3, #2
 801525e:	e0d7      	b.n	8015410 <f_write+0x37e>
			sect += csect;
 8015260:	697a      	ldr	r2, [r7, #20]
 8015262:	69bb      	ldr	r3, [r7, #24]
 8015264:	4413      	add	r3, r2
 8015266:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015268:	693b      	ldr	r3, [r7, #16]
 801526a:	899b      	ldrh	r3, [r3, #12]
 801526c:	461a      	mov	r2, r3
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	fbb3 f3f2 	udiv	r3, r3, r2
 8015274:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015276:	6a3b      	ldr	r3, [r7, #32]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d048      	beq.n	801530e <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801527c:	69ba      	ldr	r2, [r7, #24]
 801527e:	6a3b      	ldr	r3, [r7, #32]
 8015280:	4413      	add	r3, r2
 8015282:	693a      	ldr	r2, [r7, #16]
 8015284:	8952      	ldrh	r2, [r2, #10]
 8015286:	4293      	cmp	r3, r2
 8015288:	d905      	bls.n	8015296 <f_write+0x204>
					cc = fs->csize - csect;
 801528a:	693b      	ldr	r3, [r7, #16]
 801528c:	895b      	ldrh	r3, [r3, #10]
 801528e:	461a      	mov	r2, r3
 8015290:	69bb      	ldr	r3, [r7, #24]
 8015292:	1ad3      	subs	r3, r2, r3
 8015294:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015296:	693b      	ldr	r3, [r7, #16]
 8015298:	7858      	ldrb	r0, [r3, #1]
 801529a:	6a3b      	ldr	r3, [r7, #32]
 801529c:	697a      	ldr	r2, [r7, #20]
 801529e:	69f9      	ldr	r1, [r7, #28]
 80152a0:	f7fd feec 	bl	801307c <disk_write>
 80152a4:	4603      	mov	r3, r0
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d009      	beq.n	80152be <f_write+0x22c>
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	2201      	movs	r2, #1
 80152ae:	755a      	strb	r2, [r3, #21]
 80152b0:	693b      	ldr	r3, [r7, #16]
 80152b2:	2101      	movs	r1, #1
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7fe f834 	bl	8013322 <unlock_fs>
 80152ba:	2301      	movs	r3, #1
 80152bc:	e0a8      	b.n	8015410 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	6a1a      	ldr	r2, [r3, #32]
 80152c2:	697b      	ldr	r3, [r7, #20]
 80152c4:	1ad3      	subs	r3, r2, r3
 80152c6:	6a3a      	ldr	r2, [r7, #32]
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d918      	bls.n	80152fe <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	6a1a      	ldr	r2, [r3, #32]
 80152d6:	697b      	ldr	r3, [r7, #20]
 80152d8:	1ad3      	subs	r3, r2, r3
 80152da:	693a      	ldr	r2, [r7, #16]
 80152dc:	8992      	ldrh	r2, [r2, #12]
 80152de:	fb02 f303 	mul.w	r3, r2, r3
 80152e2:	69fa      	ldr	r2, [r7, #28]
 80152e4:	18d1      	adds	r1, r2, r3
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	899b      	ldrh	r3, [r3, #12]
 80152ea:	461a      	mov	r2, r3
 80152ec:	f7fd ff86 	bl	80131fc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	7d1b      	ldrb	r3, [r3, #20]
 80152f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152f8:	b2da      	uxtb	r2, r3
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80152fe:	693b      	ldr	r3, [r7, #16]
 8015300:	899b      	ldrh	r3, [r3, #12]
 8015302:	461a      	mov	r2, r3
 8015304:	6a3b      	ldr	r3, [r7, #32]
 8015306:	fb02 f303 	mul.w	r3, r2, r3
 801530a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801530c:	e050      	b.n	80153b0 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	6a1b      	ldr	r3, [r3, #32]
 8015312:	697a      	ldr	r2, [r7, #20]
 8015314:	429a      	cmp	r2, r3
 8015316:	d01b      	beq.n	8015350 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	699a      	ldr	r2, [r3, #24]
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015320:	429a      	cmp	r2, r3
 8015322:	d215      	bcs.n	8015350 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	7858      	ldrb	r0, [r3, #1]
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801532e:	2301      	movs	r3, #1
 8015330:	697a      	ldr	r2, [r7, #20]
 8015332:	f7fd fe83 	bl	801303c <disk_read>
 8015336:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015338:	2b00      	cmp	r3, #0
 801533a:	d009      	beq.n	8015350 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	2201      	movs	r2, #1
 8015340:	755a      	strb	r2, [r3, #21]
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	2101      	movs	r1, #1
 8015346:	4618      	mov	r0, r3
 8015348:	f7fd ffeb 	bl	8013322 <unlock_fs>
 801534c:	2301      	movs	r3, #1
 801534e:	e05f      	b.n	8015410 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	697a      	ldr	r2, [r7, #20]
 8015354:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015356:	693b      	ldr	r3, [r7, #16]
 8015358:	899b      	ldrh	r3, [r3, #12]
 801535a:	4618      	mov	r0, r3
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	699b      	ldr	r3, [r3, #24]
 8015360:	693a      	ldr	r2, [r7, #16]
 8015362:	8992      	ldrh	r2, [r2, #12]
 8015364:	fbb3 f1f2 	udiv	r1, r3, r2
 8015368:	fb02 f201 	mul.w	r2, r2, r1
 801536c:	1a9b      	subs	r3, r3, r2
 801536e:	1ac3      	subs	r3, r0, r3
 8015370:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	429a      	cmp	r2, r3
 8015378:	d901      	bls.n	801537e <f_write+0x2ec>
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	699b      	ldr	r3, [r3, #24]
 8015388:	693a      	ldr	r2, [r7, #16]
 801538a:	8992      	ldrh	r2, [r2, #12]
 801538c:	fbb3 f0f2 	udiv	r0, r3, r2
 8015390:	fb02 f200 	mul.w	r2, r2, r0
 8015394:	1a9b      	subs	r3, r3, r2
 8015396:	440b      	add	r3, r1
 8015398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801539a:	69f9      	ldr	r1, [r7, #28]
 801539c:	4618      	mov	r0, r3
 801539e:	f7fd ff2d 	bl	80131fc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	7d1b      	ldrb	r3, [r3, #20]
 80153a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80153aa:	b2da      	uxtb	r2, r3
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80153b0:	69fa      	ldr	r2, [r7, #28]
 80153b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b4:	4413      	add	r3, r2
 80153b6:	61fb      	str	r3, [r7, #28]
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	699a      	ldr	r2, [r3, #24]
 80153bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153be:	441a      	add	r2, r3
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	619a      	str	r2, [r3, #24]
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	68da      	ldr	r2, [r3, #12]
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	699b      	ldr	r3, [r3, #24]
 80153cc:	429a      	cmp	r2, r3
 80153ce:	bf38      	it	cc
 80153d0:	461a      	movcc	r2, r3
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	60da      	str	r2, [r3, #12]
 80153d6:	683b      	ldr	r3, [r7, #0]
 80153d8:	681a      	ldr	r2, [r3, #0]
 80153da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153dc:	441a      	add	r2, r3
 80153de:	683b      	ldr	r3, [r7, #0]
 80153e0:	601a      	str	r2, [r3, #0]
 80153e2:	687a      	ldr	r2, [r7, #4]
 80153e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e6:	1ad3      	subs	r3, r2, r3
 80153e8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	f47f ae97 	bne.w	8015120 <f_write+0x8e>
 80153f2:	e000      	b.n	80153f6 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80153f4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	7d1b      	ldrb	r3, [r3, #20]
 80153fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153fe:	b2da      	uxtb	r2, r3
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015404:	693b      	ldr	r3, [r7, #16]
 8015406:	2100      	movs	r1, #0
 8015408:	4618      	mov	r0, r3
 801540a:	f7fd ff8a 	bl	8013322 <unlock_fs>
 801540e:	2300      	movs	r3, #0
}
 8015410:	4618      	mov	r0, r3
 8015412:	3730      	adds	r7, #48	; 0x30
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b086      	sub	sp, #24
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f107 0208 	add.w	r2, r7, #8
 8015426:	4611      	mov	r1, r2
 8015428:	4618      	mov	r0, r3
 801542a:	f7ff fbb3 	bl	8014b94 <validate>
 801542e:	4603      	mov	r3, r0
 8015430:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015432:	7dfb      	ldrb	r3, [r7, #23]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d16d      	bne.n	8015514 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	7d1b      	ldrb	r3, [r3, #20]
 801543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015440:	2b00      	cmp	r3, #0
 8015442:	d067      	beq.n	8015514 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	7d1b      	ldrb	r3, [r3, #20]
 8015448:	b25b      	sxtb	r3, r3
 801544a:	2b00      	cmp	r3, #0
 801544c:	da1a      	bge.n	8015484 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801544e:	68bb      	ldr	r3, [r7, #8]
 8015450:	7858      	ldrb	r0, [r3, #1]
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6a1a      	ldr	r2, [r3, #32]
 801545c:	2301      	movs	r3, #1
 801545e:	f7fd fe0d 	bl	801307c <disk_write>
 8015462:	4603      	mov	r3, r0
 8015464:	2b00      	cmp	r3, #0
 8015466:	d006      	beq.n	8015476 <f_sync+0x5e>
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	2101      	movs	r1, #1
 801546c:	4618      	mov	r0, r3
 801546e:	f7fd ff58 	bl	8013322 <unlock_fs>
 8015472:	2301      	movs	r3, #1
 8015474:	e055      	b.n	8015522 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	7d1b      	ldrb	r3, [r3, #20]
 801547a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801547e:	b2da      	uxtb	r2, r3
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015484:	f7fd fb32 	bl	8012aec <get_fattime>
 8015488:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801548a:	68ba      	ldr	r2, [r7, #8]
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015490:	4619      	mov	r1, r3
 8015492:	4610      	mov	r0, r2
 8015494:	f7fe f910 	bl	80136b8 <move_window>
 8015498:	4603      	mov	r3, r0
 801549a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801549c:	7dfb      	ldrb	r3, [r7, #23]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d138      	bne.n	8015514 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154a6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	330b      	adds	r3, #11
 80154ac:	781a      	ldrb	r2, [r3, #0]
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	330b      	adds	r3, #11
 80154b2:	f042 0220 	orr.w	r2, r2, #32
 80154b6:	b2d2      	uxtb	r2, r2
 80154b8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	6818      	ldr	r0, [r3, #0]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	689b      	ldr	r3, [r3, #8]
 80154c2:	461a      	mov	r2, r3
 80154c4:	68f9      	ldr	r1, [r7, #12]
 80154c6:	f7fe fe95 	bl	80141f4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	f103 021c 	add.w	r2, r3, #28
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	68db      	ldr	r3, [r3, #12]
 80154d4:	4619      	mov	r1, r3
 80154d6:	4610      	mov	r0, r2
 80154d8:	f7fd fe64 	bl	80131a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	3316      	adds	r3, #22
 80154e0:	6939      	ldr	r1, [r7, #16]
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7fd fe5e 	bl	80131a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	3312      	adds	r3, #18
 80154ec:	2100      	movs	r1, #0
 80154ee:	4618      	mov	r0, r3
 80154f0:	f7fd fe3d 	bl	801316e <st_word>
					fs->wflag = 1;
 80154f4:	68bb      	ldr	r3, [r7, #8]
 80154f6:	2201      	movs	r2, #1
 80154f8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	4618      	mov	r0, r3
 80154fe:	f7fe f909 	bl	8013714 <sync_fs>
 8015502:	4603      	mov	r3, r0
 8015504:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	7d1b      	ldrb	r3, [r3, #20]
 801550a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801550e:	b2da      	uxtb	r2, r3
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015514:	68bb      	ldr	r3, [r7, #8]
 8015516:	7dfa      	ldrb	r2, [r7, #23]
 8015518:	4611      	mov	r1, r2
 801551a:	4618      	mov	r0, r3
 801551c:	f7fd ff01 	bl	8013322 <unlock_fs>
 8015520:	7dfb      	ldrb	r3, [r7, #23]
}
 8015522:	4618      	mov	r0, r3
 8015524:	3718      	adds	r7, #24
 8015526:	46bd      	mov	sp, r7
 8015528:	bd80      	pop	{r7, pc}

0801552a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801552a:	b580      	push	{r7, lr}
 801552c:	b084      	sub	sp, #16
 801552e:	af00      	add	r7, sp, #0
 8015530:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	f7ff ff70 	bl	8015418 <f_sync>
 8015538:	4603      	mov	r3, r0
 801553a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801553c:	7bfb      	ldrb	r3, [r7, #15]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d11d      	bne.n	801557e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f107 0208 	add.w	r2, r7, #8
 8015548:	4611      	mov	r1, r2
 801554a:	4618      	mov	r0, r3
 801554c:	f7ff fb22 	bl	8014b94 <validate>
 8015550:	4603      	mov	r3, r0
 8015552:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015554:	7bfb      	ldrb	r3, [r7, #15]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d111      	bne.n	801557e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	691b      	ldr	r3, [r3, #16]
 801555e:	4618      	mov	r0, r3
 8015560:	f7fe f806 	bl	8013570 <dec_lock>
 8015564:	4603      	mov	r3, r0
 8015566:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015568:	7bfb      	ldrb	r3, [r7, #15]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d102      	bne.n	8015574 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	2200      	movs	r2, #0
 8015572:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015574:	68bb      	ldr	r3, [r7, #8]
 8015576:	2100      	movs	r1, #0
 8015578:	4618      	mov	r0, r3
 801557a:	f7fd fed2 	bl	8013322 <unlock_fs>
#endif
		}
	}
	return res;
 801557e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015580:	4618      	mov	r0, r3
 8015582:	3710      	adds	r7, #16
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}

08015588 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015588:	b480      	push	{r7}
 801558a:	b087      	sub	sp, #28
 801558c:	af00      	add	r7, sp, #0
 801558e:	60f8      	str	r0, [r7, #12]
 8015590:	60b9      	str	r1, [r7, #8]
 8015592:	4613      	mov	r3, r2
 8015594:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015596:	2301      	movs	r3, #1
 8015598:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801559a:	2300      	movs	r3, #0
 801559c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801559e:	4b1f      	ldr	r3, [pc, #124]	; (801561c <FATFS_LinkDriverEx+0x94>)
 80155a0:	7a5b      	ldrb	r3, [r3, #9]
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d131      	bne.n	801560c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80155a8:	4b1c      	ldr	r3, [pc, #112]	; (801561c <FATFS_LinkDriverEx+0x94>)
 80155aa:	7a5b      	ldrb	r3, [r3, #9]
 80155ac:	b2db      	uxtb	r3, r3
 80155ae:	461a      	mov	r2, r3
 80155b0:	4b1a      	ldr	r3, [pc, #104]	; (801561c <FATFS_LinkDriverEx+0x94>)
 80155b2:	2100      	movs	r1, #0
 80155b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80155b6:	4b19      	ldr	r3, [pc, #100]	; (801561c <FATFS_LinkDriverEx+0x94>)
 80155b8:	7a5b      	ldrb	r3, [r3, #9]
 80155ba:	b2db      	uxtb	r3, r3
 80155bc:	4a17      	ldr	r2, [pc, #92]	; (801561c <FATFS_LinkDriverEx+0x94>)
 80155be:	009b      	lsls	r3, r3, #2
 80155c0:	4413      	add	r3, r2
 80155c2:	68fa      	ldr	r2, [r7, #12]
 80155c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80155c6:	4b15      	ldr	r3, [pc, #84]	; (801561c <FATFS_LinkDriverEx+0x94>)
 80155c8:	7a5b      	ldrb	r3, [r3, #9]
 80155ca:	b2db      	uxtb	r3, r3
 80155cc:	461a      	mov	r2, r3
 80155ce:	4b13      	ldr	r3, [pc, #76]	; (801561c <FATFS_LinkDriverEx+0x94>)
 80155d0:	4413      	add	r3, r2
 80155d2:	79fa      	ldrb	r2, [r7, #7]
 80155d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80155d6:	4b11      	ldr	r3, [pc, #68]	; (801561c <FATFS_LinkDriverEx+0x94>)
 80155d8:	7a5b      	ldrb	r3, [r3, #9]
 80155da:	b2db      	uxtb	r3, r3
 80155dc:	1c5a      	adds	r2, r3, #1
 80155de:	b2d1      	uxtb	r1, r2
 80155e0:	4a0e      	ldr	r2, [pc, #56]	; (801561c <FATFS_LinkDriverEx+0x94>)
 80155e2:	7251      	strb	r1, [r2, #9]
 80155e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80155e6:	7dbb      	ldrb	r3, [r7, #22]
 80155e8:	3330      	adds	r3, #48	; 0x30
 80155ea:	b2da      	uxtb	r2, r3
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	3301      	adds	r3, #1
 80155f4:	223a      	movs	r2, #58	; 0x3a
 80155f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	3302      	adds	r3, #2
 80155fc:	222f      	movs	r2, #47	; 0x2f
 80155fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	3303      	adds	r3, #3
 8015604:	2200      	movs	r2, #0
 8015606:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015608:	2300      	movs	r3, #0
 801560a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801560c:	7dfb      	ldrb	r3, [r7, #23]
}
 801560e:	4618      	mov	r0, r3
 8015610:	371c      	adds	r7, #28
 8015612:	46bd      	mov	sp, r7
 8015614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015618:	4770      	bx	lr
 801561a:	bf00      	nop
 801561c:	200009bc 	.word	0x200009bc

08015620 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b082      	sub	sp, #8
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801562a:	2200      	movs	r2, #0
 801562c:	6839      	ldr	r1, [r7, #0]
 801562e:	6878      	ldr	r0, [r7, #4]
 8015630:	f7ff ffaa 	bl	8015588 <FATFS_LinkDriverEx>
 8015634:	4603      	mov	r3, r0
}
 8015636:	4618      	mov	r0, r3
 8015638:	3708      	adds	r7, #8
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}

0801563e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801563e:	b580      	push	{r7, lr}
 8015640:	b084      	sub	sp, #16
 8015642:	af00      	add	r7, sp, #0
 8015644:	4603      	mov	r3, r0
 8015646:	6039      	str	r1, [r7, #0]
 8015648:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801564a:	2200      	movs	r2, #0
 801564c:	2101      	movs	r1, #1
 801564e:	2001      	movs	r0, #1
 8015650:	f000 f9cc 	bl	80159ec <osSemaphoreNew>
 8015654:	4602      	mov	r2, r0
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801565a:	683b      	ldr	r3, [r7, #0]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	2b00      	cmp	r3, #0
 8015660:	bf14      	ite	ne
 8015662:	2301      	movne	r3, #1
 8015664:	2300      	moveq	r3, #0
 8015666:	b2db      	uxtb	r3, r3
 8015668:	60fb      	str	r3, [r7, #12]

    return ret;
 801566a:	68fb      	ldr	r3, [r7, #12]
}
 801566c:	4618      	mov	r0, r3
 801566e:	3710      	adds	r7, #16
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}

08015674 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b082      	sub	sp, #8
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801567c:	6878      	ldr	r0, [r7, #4]
 801567e:	f000 fb11 	bl	8015ca4 <osSemaphoreDelete>
#endif
    return 1;
 8015682:	2301      	movs	r3, #1
}
 8015684:	4618      	mov	r0, r3
 8015686:	3708      	adds	r7, #8
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}

0801568c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b084      	sub	sp, #16
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015694:	2300      	movs	r3, #0
 8015696:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8015698:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f000 fa43 	bl	8015b28 <osSemaphoreAcquire>
 80156a2:	4603      	mov	r3, r0
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d101      	bne.n	80156ac <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80156a8:	2301      	movs	r3, #1
 80156aa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80156ac:	68fb      	ldr	r3, [r7, #12]
}
 80156ae:	4618      	mov	r0, r3
 80156b0:	3710      	adds	r7, #16
 80156b2:	46bd      	mov	sp, r7
 80156b4:	bd80      	pop	{r7, pc}

080156b6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80156b6:	b580      	push	{r7, lr}
 80156b8:	b082      	sub	sp, #8
 80156ba:	af00      	add	r7, sp, #0
 80156bc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80156be:	6878      	ldr	r0, [r7, #4]
 80156c0:	f000 fa98 	bl	8015bf4 <osSemaphoreRelease>
#endif
}
 80156c4:	bf00      	nop
 80156c6:	3708      	adds	r7, #8
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}

080156cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80156cc:	b480      	push	{r7}
 80156ce:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80156d0:	bf00      	nop
 80156d2:	46bd      	mov	sp, r7
 80156d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d8:	4770      	bx	lr
	...

080156dc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80156dc:	b480      	push	{r7}
 80156de:	b085      	sub	sp, #20
 80156e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80156e2:	f3ef 8305 	mrs	r3, IPSR
 80156e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80156e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d10f      	bne.n	801570e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80156ee:	f3ef 8310 	mrs	r3, PRIMASK
 80156f2:	607b      	str	r3, [r7, #4]
  return(result);
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d105      	bne.n	8015706 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80156fa:	f3ef 8311 	mrs	r3, BASEPRI
 80156fe:	603b      	str	r3, [r7, #0]
  return(result);
 8015700:	683b      	ldr	r3, [r7, #0]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d007      	beq.n	8015716 <osKernelInitialize+0x3a>
 8015706:	4b0e      	ldr	r3, [pc, #56]	; (8015740 <osKernelInitialize+0x64>)
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	2b02      	cmp	r3, #2
 801570c:	d103      	bne.n	8015716 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801570e:	f06f 0305 	mvn.w	r3, #5
 8015712:	60fb      	str	r3, [r7, #12]
 8015714:	e00c      	b.n	8015730 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015716:	4b0a      	ldr	r3, [pc, #40]	; (8015740 <osKernelInitialize+0x64>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d105      	bne.n	801572a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801571e:	4b08      	ldr	r3, [pc, #32]	; (8015740 <osKernelInitialize+0x64>)
 8015720:	2201      	movs	r2, #1
 8015722:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015724:	2300      	movs	r3, #0
 8015726:	60fb      	str	r3, [r7, #12]
 8015728:	e002      	b.n	8015730 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801572a:	f04f 33ff 	mov.w	r3, #4294967295
 801572e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8015730:	68fb      	ldr	r3, [r7, #12]
}
 8015732:	4618      	mov	r0, r3
 8015734:	3714      	adds	r7, #20
 8015736:	46bd      	mov	sp, r7
 8015738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573c:	4770      	bx	lr
 801573e:	bf00      	nop
 8015740:	200009c8 	.word	0x200009c8

08015744 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8015744:	b580      	push	{r7, lr}
 8015746:	b082      	sub	sp, #8
 8015748:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 801574a:	f002 fb3d 	bl	8017dc8 <xTaskGetSchedulerState>
 801574e:	4603      	mov	r3, r0
 8015750:	2b00      	cmp	r3, #0
 8015752:	d004      	beq.n	801575e <osKernelGetState+0x1a>
 8015754:	2b02      	cmp	r3, #2
 8015756:	d105      	bne.n	8015764 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8015758:	2302      	movs	r3, #2
 801575a:	607b      	str	r3, [r7, #4]
      break;
 801575c:	e00c      	b.n	8015778 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 801575e:	2303      	movs	r3, #3
 8015760:	607b      	str	r3, [r7, #4]
      break;
 8015762:	e009      	b.n	8015778 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8015764:	4b07      	ldr	r3, [pc, #28]	; (8015784 <osKernelGetState+0x40>)
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	2b01      	cmp	r3, #1
 801576a:	d102      	bne.n	8015772 <osKernelGetState+0x2e>
        state = osKernelReady;
 801576c:	2301      	movs	r3, #1
 801576e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8015770:	e001      	b.n	8015776 <osKernelGetState+0x32>
        state = osKernelInactive;
 8015772:	2300      	movs	r3, #0
 8015774:	607b      	str	r3, [r7, #4]
      break;
 8015776:	bf00      	nop
  }

  return (state);
 8015778:	687b      	ldr	r3, [r7, #4]
}
 801577a:	4618      	mov	r0, r3
 801577c:	3708      	adds	r7, #8
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	200009c8 	.word	0x200009c8

08015788 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801578e:	f3ef 8305 	mrs	r3, IPSR
 8015792:	60bb      	str	r3, [r7, #8]
  return(result);
 8015794:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015796:	2b00      	cmp	r3, #0
 8015798:	d10f      	bne.n	80157ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801579a:	f3ef 8310 	mrs	r3, PRIMASK
 801579e:	607b      	str	r3, [r7, #4]
  return(result);
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d105      	bne.n	80157b2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80157a6:	f3ef 8311 	mrs	r3, BASEPRI
 80157aa:	603b      	str	r3, [r7, #0]
  return(result);
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d007      	beq.n	80157c2 <osKernelStart+0x3a>
 80157b2:	4b0f      	ldr	r3, [pc, #60]	; (80157f0 <osKernelStart+0x68>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	2b02      	cmp	r3, #2
 80157b8:	d103      	bne.n	80157c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80157ba:	f06f 0305 	mvn.w	r3, #5
 80157be:	60fb      	str	r3, [r7, #12]
 80157c0:	e010      	b.n	80157e4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80157c2:	4b0b      	ldr	r3, [pc, #44]	; (80157f0 <osKernelStart+0x68>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	2b01      	cmp	r3, #1
 80157c8:	d109      	bne.n	80157de <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80157ca:	f7ff ff7f 	bl	80156cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80157ce:	4b08      	ldr	r3, [pc, #32]	; (80157f0 <osKernelStart+0x68>)
 80157d0:	2202      	movs	r2, #2
 80157d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80157d4:	f001 feb0 	bl	8017538 <vTaskStartScheduler>
      stat = osOK;
 80157d8:	2300      	movs	r3, #0
 80157da:	60fb      	str	r3, [r7, #12]
 80157dc:	e002      	b.n	80157e4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80157de:	f04f 33ff 	mov.w	r3, #4294967295
 80157e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80157e4:	68fb      	ldr	r3, [r7, #12]
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3710      	adds	r7, #16
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}
 80157ee:	bf00      	nop
 80157f0:	200009c8 	.word	0x200009c8

080157f4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b084      	sub	sp, #16
 80157f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80157fa:	f3ef 8305 	mrs	r3, IPSR
 80157fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8015800:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8015802:	2b00      	cmp	r3, #0
 8015804:	d10f      	bne.n	8015826 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015806:	f3ef 8310 	mrs	r3, PRIMASK
 801580a:	607b      	str	r3, [r7, #4]
  return(result);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d105      	bne.n	801581e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015812:	f3ef 8311 	mrs	r3, BASEPRI
 8015816:	603b      	str	r3, [r7, #0]
  return(result);
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d007      	beq.n	801582e <osKernelGetTickCount+0x3a>
 801581e:	4b08      	ldr	r3, [pc, #32]	; (8015840 <osKernelGetTickCount+0x4c>)
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	2b02      	cmp	r3, #2
 8015824:	d103      	bne.n	801582e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8015826:	f001 ffa5 	bl	8017774 <xTaskGetTickCountFromISR>
 801582a:	60f8      	str	r0, [r7, #12]
 801582c:	e002      	b.n	8015834 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 801582e:	f001 ff91 	bl	8017754 <xTaskGetTickCount>
 8015832:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8015834:	68fb      	ldr	r3, [r7, #12]
}
 8015836:	4618      	mov	r0, r3
 8015838:	3710      	adds	r7, #16
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}
 801583e:	bf00      	nop
 8015840:	200009c8 	.word	0x200009c8

08015844 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015844:	b580      	push	{r7, lr}
 8015846:	b090      	sub	sp, #64	; 0x40
 8015848:	af04      	add	r7, sp, #16
 801584a:	60f8      	str	r0, [r7, #12]
 801584c:	60b9      	str	r1, [r7, #8]
 801584e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015850:	2300      	movs	r3, #0
 8015852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015854:	f3ef 8305 	mrs	r3, IPSR
 8015858:	61fb      	str	r3, [r7, #28]
  return(result);
 801585a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 801585c:	2b00      	cmp	r3, #0
 801585e:	f040 808f 	bne.w	8015980 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015862:	f3ef 8310 	mrs	r3, PRIMASK
 8015866:	61bb      	str	r3, [r7, #24]
  return(result);
 8015868:	69bb      	ldr	r3, [r7, #24]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d105      	bne.n	801587a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801586e:	f3ef 8311 	mrs	r3, BASEPRI
 8015872:	617b      	str	r3, [r7, #20]
  return(result);
 8015874:	697b      	ldr	r3, [r7, #20]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d003      	beq.n	8015882 <osThreadNew+0x3e>
 801587a:	4b44      	ldr	r3, [pc, #272]	; (801598c <osThreadNew+0x148>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	2b02      	cmp	r3, #2
 8015880:	d07e      	beq.n	8015980 <osThreadNew+0x13c>
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d07b      	beq.n	8015980 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8015888:	2380      	movs	r3, #128	; 0x80
 801588a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801588c:	2318      	movs	r3, #24
 801588e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8015890:	2300      	movs	r3, #0
 8015892:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8015894:	f04f 33ff 	mov.w	r3, #4294967295
 8015898:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d045      	beq.n	801592c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d002      	beq.n	80158ae <osThreadNew+0x6a>
        name = attr->name;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	699b      	ldr	r3, [r3, #24]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d002      	beq.n	80158bc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	699b      	ldr	r3, [r3, #24]
 80158ba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80158bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d008      	beq.n	80158d4 <osThreadNew+0x90>
 80158c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158c4:	2b38      	cmp	r3, #56	; 0x38
 80158c6:	d805      	bhi.n	80158d4 <osThreadNew+0x90>
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	685b      	ldr	r3, [r3, #4]
 80158cc:	f003 0301 	and.w	r3, r3, #1
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d001      	beq.n	80158d8 <osThreadNew+0x94>
        return (NULL);
 80158d4:	2300      	movs	r3, #0
 80158d6:	e054      	b.n	8015982 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	695b      	ldr	r3, [r3, #20]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d003      	beq.n	80158e8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	695b      	ldr	r3, [r3, #20]
 80158e4:	089b      	lsrs	r3, r3, #2
 80158e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	689b      	ldr	r3, [r3, #8]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d00e      	beq.n	801590e <osThreadNew+0xca>
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	68db      	ldr	r3, [r3, #12]
 80158f4:	2b5b      	cmp	r3, #91	; 0x5b
 80158f6:	d90a      	bls.n	801590e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d006      	beq.n	801590e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	695b      	ldr	r3, [r3, #20]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d002      	beq.n	801590e <osThreadNew+0xca>
        mem = 1;
 8015908:	2301      	movs	r3, #1
 801590a:	623b      	str	r3, [r7, #32]
 801590c:	e010      	b.n	8015930 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	689b      	ldr	r3, [r3, #8]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d10c      	bne.n	8015930 <osThreadNew+0xec>
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	68db      	ldr	r3, [r3, #12]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d108      	bne.n	8015930 <osThreadNew+0xec>
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	691b      	ldr	r3, [r3, #16]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d104      	bne.n	8015930 <osThreadNew+0xec>
          mem = 0;
 8015926:	2300      	movs	r3, #0
 8015928:	623b      	str	r3, [r7, #32]
 801592a:	e001      	b.n	8015930 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 801592c:	2300      	movs	r3, #0
 801592e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8015930:	6a3b      	ldr	r3, [r7, #32]
 8015932:	2b01      	cmp	r3, #1
 8015934:	d110      	bne.n	8015958 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801593a:	687a      	ldr	r2, [r7, #4]
 801593c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801593e:	9202      	str	r2, [sp, #8]
 8015940:	9301      	str	r3, [sp, #4]
 8015942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015944:	9300      	str	r3, [sp, #0]
 8015946:	68bb      	ldr	r3, [r7, #8]
 8015948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801594a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801594c:	68f8      	ldr	r0, [r7, #12]
 801594e:	f001 fc21 	bl	8017194 <xTaskCreateStatic>
 8015952:	4603      	mov	r3, r0
 8015954:	613b      	str	r3, [r7, #16]
 8015956:	e013      	b.n	8015980 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8015958:	6a3b      	ldr	r3, [r7, #32]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d110      	bne.n	8015980 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015960:	b29a      	uxth	r2, r3
 8015962:	f107 0310 	add.w	r3, r7, #16
 8015966:	9301      	str	r3, [sp, #4]
 8015968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801596a:	9300      	str	r3, [sp, #0]
 801596c:	68bb      	ldr	r3, [r7, #8]
 801596e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015970:	68f8      	ldr	r0, [r7, #12]
 8015972:	f001 fc69 	bl	8017248 <xTaskCreate>
 8015976:	4603      	mov	r3, r0
 8015978:	2b01      	cmp	r3, #1
 801597a:	d001      	beq.n	8015980 <osThreadNew+0x13c>
          hTask = NULL;
 801597c:	2300      	movs	r3, #0
 801597e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015980:	693b      	ldr	r3, [r7, #16]
}
 8015982:	4618      	mov	r0, r3
 8015984:	3730      	adds	r7, #48	; 0x30
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}
 801598a:	bf00      	nop
 801598c:	200009c8 	.word	0x200009c8

08015990 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8015990:	b580      	push	{r7, lr}
 8015992:	b086      	sub	sp, #24
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015998:	f3ef 8305 	mrs	r3, IPSR
 801599c:	613b      	str	r3, [r7, #16]
  return(result);
 801599e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d10f      	bne.n	80159c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80159a4:	f3ef 8310 	mrs	r3, PRIMASK
 80159a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d105      	bne.n	80159bc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80159b0:	f3ef 8311 	mrs	r3, BASEPRI
 80159b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d007      	beq.n	80159cc <osDelay+0x3c>
 80159bc:	4b0a      	ldr	r3, [pc, #40]	; (80159e8 <osDelay+0x58>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	2b02      	cmp	r3, #2
 80159c2:	d103      	bne.n	80159cc <osDelay+0x3c>
    stat = osErrorISR;
 80159c4:	f06f 0305 	mvn.w	r3, #5
 80159c8:	617b      	str	r3, [r7, #20]
 80159ca:	e007      	b.n	80159dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80159cc:	2300      	movs	r3, #0
 80159ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d002      	beq.n	80159dc <osDelay+0x4c>
      vTaskDelay(ticks);
 80159d6:	6878      	ldr	r0, [r7, #4]
 80159d8:	f001 fd7a 	bl	80174d0 <vTaskDelay>
    }
  }

  return (stat);
 80159dc:	697b      	ldr	r3, [r7, #20]
}
 80159de:	4618      	mov	r0, r3
 80159e0:	3718      	adds	r7, #24
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bd80      	pop	{r7, pc}
 80159e6:	bf00      	nop
 80159e8:	200009c8 	.word	0x200009c8

080159ec <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b08c      	sub	sp, #48	; 0x30
 80159f0:	af02      	add	r7, sp, #8
 80159f2:	60f8      	str	r0, [r7, #12]
 80159f4:	60b9      	str	r1, [r7, #8]
 80159f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80159f8:	2300      	movs	r3, #0
 80159fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80159fc:	f3ef 8305 	mrs	r3, IPSR
 8015a00:	61bb      	str	r3, [r7, #24]
  return(result);
 8015a02:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	f040 8087 	bne.w	8015b18 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8015a0e:	617b      	str	r3, [r7, #20]
  return(result);
 8015a10:	697b      	ldr	r3, [r7, #20]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d105      	bne.n	8015a22 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015a16:	f3ef 8311 	mrs	r3, BASEPRI
 8015a1a:	613b      	str	r3, [r7, #16]
  return(result);
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d003      	beq.n	8015a2a <osSemaphoreNew+0x3e>
 8015a22:	4b40      	ldr	r3, [pc, #256]	; (8015b24 <osSemaphoreNew+0x138>)
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	2b02      	cmp	r3, #2
 8015a28:	d076      	beq.n	8015b18 <osSemaphoreNew+0x12c>
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d073      	beq.n	8015b18 <osSemaphoreNew+0x12c>
 8015a30:	68ba      	ldr	r2, [r7, #8]
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d86f      	bhi.n	8015b18 <osSemaphoreNew+0x12c>
    mem = -1;
 8015a38:	f04f 33ff 	mov.w	r3, #4294967295
 8015a3c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d015      	beq.n	8015a70 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	689b      	ldr	r3, [r3, #8]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d006      	beq.n	8015a5a <osSemaphoreNew+0x6e>
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	2b4f      	cmp	r3, #79	; 0x4f
 8015a52:	d902      	bls.n	8015a5a <osSemaphoreNew+0x6e>
        mem = 1;
 8015a54:	2301      	movs	r3, #1
 8015a56:	623b      	str	r3, [r7, #32]
 8015a58:	e00c      	b.n	8015a74 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	689b      	ldr	r3, [r3, #8]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d108      	bne.n	8015a74 <osSemaphoreNew+0x88>
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	68db      	ldr	r3, [r3, #12]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d104      	bne.n	8015a74 <osSemaphoreNew+0x88>
          mem = 0;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	623b      	str	r3, [r7, #32]
 8015a6e:	e001      	b.n	8015a74 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8015a70:	2300      	movs	r3, #0
 8015a72:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8015a74:	6a3b      	ldr	r3, [r7, #32]
 8015a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a7a:	d04d      	beq.n	8015b18 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	2b01      	cmp	r3, #1
 8015a80:	d129      	bne.n	8015ad6 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8015a82:	6a3b      	ldr	r3, [r7, #32]
 8015a84:	2b01      	cmp	r3, #1
 8015a86:	d10b      	bne.n	8015aa0 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	689a      	ldr	r2, [r3, #8]
 8015a8c:	2303      	movs	r3, #3
 8015a8e:	9300      	str	r3, [sp, #0]
 8015a90:	4613      	mov	r3, r2
 8015a92:	2200      	movs	r2, #0
 8015a94:	2100      	movs	r1, #0
 8015a96:	2001      	movs	r0, #1
 8015a98:	f000 fbf6 	bl	8016288 <xQueueGenericCreateStatic>
 8015a9c:	6278      	str	r0, [r7, #36]	; 0x24
 8015a9e:	e005      	b.n	8015aac <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8015aa0:	2203      	movs	r2, #3
 8015aa2:	2100      	movs	r1, #0
 8015aa4:	2001      	movs	r0, #1
 8015aa6:	f000 fc62 	bl	801636e <xQueueGenericCreate>
 8015aaa:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d022      	beq.n	8015af8 <osSemaphoreNew+0x10c>
 8015ab2:	68bb      	ldr	r3, [r7, #8]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d01f      	beq.n	8015af8 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015ab8:	2300      	movs	r3, #0
 8015aba:	2200      	movs	r2, #0
 8015abc:	2100      	movs	r1, #0
 8015abe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ac0:	f000 fd1e 	bl	8016500 <xQueueGenericSend>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	2b01      	cmp	r3, #1
 8015ac8:	d016      	beq.n	8015af8 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8015aca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015acc:	f001 f991 	bl	8016df2 <vQueueDelete>
            hSemaphore = NULL;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8015ad4:	e010      	b.n	8015af8 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8015ad6:	6a3b      	ldr	r3, [r7, #32]
 8015ad8:	2b01      	cmp	r3, #1
 8015ada:	d108      	bne.n	8015aee <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	689b      	ldr	r3, [r3, #8]
 8015ae0:	461a      	mov	r2, r3
 8015ae2:	68b9      	ldr	r1, [r7, #8]
 8015ae4:	68f8      	ldr	r0, [r7, #12]
 8015ae6:	f000 fca4 	bl	8016432 <xQueueCreateCountingSemaphoreStatic>
 8015aea:	6278      	str	r0, [r7, #36]	; 0x24
 8015aec:	e004      	b.n	8015af8 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015aee:	68b9      	ldr	r1, [r7, #8]
 8015af0:	68f8      	ldr	r0, [r7, #12]
 8015af2:	f000 fcd3 	bl	801649c <xQueueCreateCountingSemaphore>
 8015af6:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d00c      	beq.n	8015b18 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d003      	beq.n	8015b0c <osSemaphoreNew+0x120>
          name = attr->name;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	61fb      	str	r3, [r7, #28]
 8015b0a:	e001      	b.n	8015b10 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015b10:	69f9      	ldr	r1, [r7, #28]
 8015b12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b14:	f001 fab8 	bl	8017088 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	3728      	adds	r7, #40	; 0x28
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bd80      	pop	{r7, pc}
 8015b22:	bf00      	nop
 8015b24:	200009c8 	.word	0x200009c8

08015b28 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b088      	sub	sp, #32
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
 8015b30:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015b36:	2300      	movs	r3, #0
 8015b38:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8015b3a:	69bb      	ldr	r3, [r7, #24]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d103      	bne.n	8015b48 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015b40:	f06f 0303 	mvn.w	r3, #3
 8015b44:	61fb      	str	r3, [r7, #28]
 8015b46:	e04b      	b.n	8015be0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b48:	f3ef 8305 	mrs	r3, IPSR
 8015b4c:	617b      	str	r3, [r7, #20]
  return(result);
 8015b4e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d10f      	bne.n	8015b74 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015b54:	f3ef 8310 	mrs	r3, PRIMASK
 8015b58:	613b      	str	r3, [r7, #16]
  return(result);
 8015b5a:	693b      	ldr	r3, [r7, #16]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d105      	bne.n	8015b6c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015b60:	f3ef 8311 	mrs	r3, BASEPRI
 8015b64:	60fb      	str	r3, [r7, #12]
  return(result);
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d026      	beq.n	8015bba <osSemaphoreAcquire+0x92>
 8015b6c:	4b1f      	ldr	r3, [pc, #124]	; (8015bec <osSemaphoreAcquire+0xc4>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	2b02      	cmp	r3, #2
 8015b72:	d122      	bne.n	8015bba <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8015b74:	683b      	ldr	r3, [r7, #0]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d003      	beq.n	8015b82 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8015b7a:	f06f 0303 	mvn.w	r3, #3
 8015b7e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8015b80:	e02d      	b.n	8015bde <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8015b82:	2300      	movs	r3, #0
 8015b84:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8015b86:	f107 0308 	add.w	r3, r7, #8
 8015b8a:	461a      	mov	r2, r3
 8015b8c:	2100      	movs	r1, #0
 8015b8e:	69b8      	ldr	r0, [r7, #24]
 8015b90:	f001 f8b2 	bl	8016cf8 <xQueueReceiveFromISR>
 8015b94:	4603      	mov	r3, r0
 8015b96:	2b01      	cmp	r3, #1
 8015b98:	d003      	beq.n	8015ba2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8015b9a:	f06f 0302 	mvn.w	r3, #2
 8015b9e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8015ba0:	e01d      	b.n	8015bde <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8015ba2:	68bb      	ldr	r3, [r7, #8]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d01a      	beq.n	8015bde <osSemaphoreAcquire+0xb6>
 8015ba8:	4b11      	ldr	r3, [pc, #68]	; (8015bf0 <osSemaphoreAcquire+0xc8>)
 8015baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bae:	601a      	str	r2, [r3, #0]
 8015bb0:	f3bf 8f4f 	dsb	sy
 8015bb4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8015bb8:	e011      	b.n	8015bde <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8015bba:	6839      	ldr	r1, [r7, #0]
 8015bbc:	69b8      	ldr	r0, [r7, #24]
 8015bbe:	f000 ff93 	bl	8016ae8 <xQueueSemaphoreTake>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	2b01      	cmp	r3, #1
 8015bc6:	d00b      	beq.n	8015be0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d003      	beq.n	8015bd6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8015bce:	f06f 0301 	mvn.w	r3, #1
 8015bd2:	61fb      	str	r3, [r7, #28]
 8015bd4:	e004      	b.n	8015be0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8015bd6:	f06f 0302 	mvn.w	r3, #2
 8015bda:	61fb      	str	r3, [r7, #28]
 8015bdc:	e000      	b.n	8015be0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8015bde:	bf00      	nop
      }
    }
  }

  return (stat);
 8015be0:	69fb      	ldr	r3, [r7, #28]
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3720      	adds	r7, #32
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}
 8015bea:	bf00      	nop
 8015bec:	200009c8 	.word	0x200009c8
 8015bf0:	e000ed04 	.word	0xe000ed04

08015bf4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b088      	sub	sp, #32
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015c00:	2300      	movs	r3, #0
 8015c02:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8015c04:	69bb      	ldr	r3, [r7, #24]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d103      	bne.n	8015c12 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015c0a:	f06f 0303 	mvn.w	r3, #3
 8015c0e:	61fb      	str	r3, [r7, #28]
 8015c10:	e03e      	b.n	8015c90 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c12:	f3ef 8305 	mrs	r3, IPSR
 8015c16:	617b      	str	r3, [r7, #20]
  return(result);
 8015c18:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d10f      	bne.n	8015c3e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8015c22:	613b      	str	r3, [r7, #16]
  return(result);
 8015c24:	693b      	ldr	r3, [r7, #16]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d105      	bne.n	8015c36 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015c2a:	f3ef 8311 	mrs	r3, BASEPRI
 8015c2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d01e      	beq.n	8015c74 <osSemaphoreRelease+0x80>
 8015c36:	4b19      	ldr	r3, [pc, #100]	; (8015c9c <osSemaphoreRelease+0xa8>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	2b02      	cmp	r3, #2
 8015c3c:	d11a      	bne.n	8015c74 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8015c3e:	2300      	movs	r3, #0
 8015c40:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015c42:	f107 0308 	add.w	r3, r7, #8
 8015c46:	4619      	mov	r1, r3
 8015c48:	69b8      	ldr	r0, [r7, #24]
 8015c4a:	f000 fde7 	bl	801681c <xQueueGiveFromISR>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	2b01      	cmp	r3, #1
 8015c52:	d003      	beq.n	8015c5c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8015c54:	f06f 0302 	mvn.w	r3, #2
 8015c58:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015c5a:	e018      	b.n	8015c8e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8015c5c:	68bb      	ldr	r3, [r7, #8]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d015      	beq.n	8015c8e <osSemaphoreRelease+0x9a>
 8015c62:	4b0f      	ldr	r3, [pc, #60]	; (8015ca0 <osSemaphoreRelease+0xac>)
 8015c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c68:	601a      	str	r2, [r3, #0]
 8015c6a:	f3bf 8f4f 	dsb	sy
 8015c6e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015c72:	e00c      	b.n	8015c8e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015c74:	2300      	movs	r3, #0
 8015c76:	2200      	movs	r2, #0
 8015c78:	2100      	movs	r1, #0
 8015c7a:	69b8      	ldr	r0, [r7, #24]
 8015c7c:	f000 fc40 	bl	8016500 <xQueueGenericSend>
 8015c80:	4603      	mov	r3, r0
 8015c82:	2b01      	cmp	r3, #1
 8015c84:	d004      	beq.n	8015c90 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8015c86:	f06f 0302 	mvn.w	r3, #2
 8015c8a:	61fb      	str	r3, [r7, #28]
 8015c8c:	e000      	b.n	8015c90 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015c8e:	bf00      	nop
    }
  }

  return (stat);
 8015c90:	69fb      	ldr	r3, [r7, #28]
}
 8015c92:	4618      	mov	r0, r3
 8015c94:	3720      	adds	r7, #32
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bd80      	pop	{r7, pc}
 8015c9a:	bf00      	nop
 8015c9c:	200009c8 	.word	0x200009c8
 8015ca0:	e000ed04 	.word	0xe000ed04

08015ca4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b088      	sub	sp, #32
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015cb0:	f3ef 8305 	mrs	r3, IPSR
 8015cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8015cb6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d10f      	bne.n	8015cdc <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8015cc0:	613b      	str	r3, [r7, #16]
  return(result);
 8015cc2:	693b      	ldr	r3, [r7, #16]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d105      	bne.n	8015cd4 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015cc8:	f3ef 8311 	mrs	r3, BASEPRI
 8015ccc:	60fb      	str	r3, [r7, #12]
  return(result);
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d007      	beq.n	8015ce4 <osSemaphoreDelete+0x40>
 8015cd4:	4b0d      	ldr	r3, [pc, #52]	; (8015d0c <osSemaphoreDelete+0x68>)
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	2b02      	cmp	r3, #2
 8015cda:	d103      	bne.n	8015ce4 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8015cdc:	f06f 0305 	mvn.w	r3, #5
 8015ce0:	61fb      	str	r3, [r7, #28]
 8015ce2:	e00e      	b.n	8015d02 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8015ce4:	69bb      	ldr	r3, [r7, #24]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d103      	bne.n	8015cf2 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8015cea:	f06f 0303 	mvn.w	r3, #3
 8015cee:	61fb      	str	r3, [r7, #28]
 8015cf0:	e007      	b.n	8015d02 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8015cf2:	69b8      	ldr	r0, [r7, #24]
 8015cf4:	f001 f9f0 	bl	80170d8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8015cfc:	69b8      	ldr	r0, [r7, #24]
 8015cfe:	f001 f878 	bl	8016df2 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8015d02:	69fb      	ldr	r3, [r7, #28]
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3720      	adds	r7, #32
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}
 8015d0c:	200009c8 	.word	0x200009c8

08015d10 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b08c      	sub	sp, #48	; 0x30
 8015d14:	af02      	add	r7, sp, #8
 8015d16:	60f8      	str	r0, [r7, #12]
 8015d18:	60b9      	str	r1, [r7, #8]
 8015d1a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015d20:	f3ef 8305 	mrs	r3, IPSR
 8015d24:	61bb      	str	r3, [r7, #24]
  return(result);
 8015d26:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d170      	bne.n	8015e0e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8015d30:	617b      	str	r3, [r7, #20]
  return(result);
 8015d32:	697b      	ldr	r3, [r7, #20]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d105      	bne.n	8015d44 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015d38:	f3ef 8311 	mrs	r3, BASEPRI
 8015d3c:	613b      	str	r3, [r7, #16]
  return(result);
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d003      	beq.n	8015d4c <osMessageQueueNew+0x3c>
 8015d44:	4b34      	ldr	r3, [pc, #208]	; (8015e18 <osMessageQueueNew+0x108>)
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	2b02      	cmp	r3, #2
 8015d4a:	d060      	beq.n	8015e0e <osMessageQueueNew+0xfe>
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d05d      	beq.n	8015e0e <osMessageQueueNew+0xfe>
 8015d52:	68bb      	ldr	r3, [r7, #8]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d05a      	beq.n	8015e0e <osMessageQueueNew+0xfe>
    mem = -1;
 8015d58:	f04f 33ff 	mov.w	r3, #4294967295
 8015d5c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d029      	beq.n	8015db8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	689b      	ldr	r3, [r3, #8]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d012      	beq.n	8015d92 <osMessageQueueNew+0x82>
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	68db      	ldr	r3, [r3, #12]
 8015d70:	2b4f      	cmp	r3, #79	; 0x4f
 8015d72:	d90e      	bls.n	8015d92 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d00a      	beq.n	8015d92 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	695a      	ldr	r2, [r3, #20]
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	68b9      	ldr	r1, [r7, #8]
 8015d84:	fb01 f303 	mul.w	r3, r1, r3
 8015d88:	429a      	cmp	r2, r3
 8015d8a:	d302      	bcc.n	8015d92 <osMessageQueueNew+0x82>
        mem = 1;
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	623b      	str	r3, [r7, #32]
 8015d90:	e014      	b.n	8015dbc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	689b      	ldr	r3, [r3, #8]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d110      	bne.n	8015dbc <osMessageQueueNew+0xac>
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	68db      	ldr	r3, [r3, #12]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d10c      	bne.n	8015dbc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d108      	bne.n	8015dbc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	695b      	ldr	r3, [r3, #20]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d104      	bne.n	8015dbc <osMessageQueueNew+0xac>
          mem = 0;
 8015db2:	2300      	movs	r3, #0
 8015db4:	623b      	str	r3, [r7, #32]
 8015db6:	e001      	b.n	8015dbc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8015db8:	2300      	movs	r3, #0
 8015dba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8015dbc:	6a3b      	ldr	r3, [r7, #32]
 8015dbe:	2b01      	cmp	r3, #1
 8015dc0:	d10c      	bne.n	8015ddc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	691a      	ldr	r2, [r3, #16]
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	6899      	ldr	r1, [r3, #8]
 8015dca:	2300      	movs	r3, #0
 8015dcc:	9300      	str	r3, [sp, #0]
 8015dce:	460b      	mov	r3, r1
 8015dd0:	68b9      	ldr	r1, [r7, #8]
 8015dd2:	68f8      	ldr	r0, [r7, #12]
 8015dd4:	f000 fa58 	bl	8016288 <xQueueGenericCreateStatic>
 8015dd8:	6278      	str	r0, [r7, #36]	; 0x24
 8015dda:	e008      	b.n	8015dee <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8015ddc:	6a3b      	ldr	r3, [r7, #32]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d105      	bne.n	8015dee <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8015de2:	2200      	movs	r2, #0
 8015de4:	68b9      	ldr	r1, [r7, #8]
 8015de6:	68f8      	ldr	r0, [r7, #12]
 8015de8:	f000 fac1 	bl	801636e <xQueueGenericCreate>
 8015dec:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8015dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d00c      	beq.n	8015e0e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d003      	beq.n	8015e02 <osMessageQueueNew+0xf2>
        name = attr->name;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	61fb      	str	r3, [r7, #28]
 8015e00:	e001      	b.n	8015e06 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8015e02:	2300      	movs	r3, #0
 8015e04:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8015e06:	69f9      	ldr	r1, [r7, #28]
 8015e08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e0a:	f001 f93d 	bl	8017088 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8015e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015e10:	4618      	mov	r0, r3
 8015e12:	3728      	adds	r7, #40	; 0x28
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}
 8015e18:	200009c8 	.word	0x200009c8

08015e1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b08a      	sub	sp, #40	; 0x28
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	60f8      	str	r0, [r7, #12]
 8015e24:	60b9      	str	r1, [r7, #8]
 8015e26:	603b      	str	r3, [r7, #0]
 8015e28:	4613      	mov	r3, r2
 8015e2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015e30:	2300      	movs	r3, #0
 8015e32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e34:	f3ef 8305 	mrs	r3, IPSR
 8015e38:	61fb      	str	r3, [r7, #28]
  return(result);
 8015e3a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d10f      	bne.n	8015e60 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e40:	f3ef 8310 	mrs	r3, PRIMASK
 8015e44:	61bb      	str	r3, [r7, #24]
  return(result);
 8015e46:	69bb      	ldr	r3, [r7, #24]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d105      	bne.n	8015e58 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8015e50:	617b      	str	r3, [r7, #20]
  return(result);
 8015e52:	697b      	ldr	r3, [r7, #20]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d02c      	beq.n	8015eb2 <osMessageQueuePut+0x96>
 8015e58:	4b28      	ldr	r3, [pc, #160]	; (8015efc <osMessageQueuePut+0xe0>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	2b02      	cmp	r3, #2
 8015e5e:	d128      	bne.n	8015eb2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015e60:	6a3b      	ldr	r3, [r7, #32]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d005      	beq.n	8015e72 <osMessageQueuePut+0x56>
 8015e66:	68bb      	ldr	r3, [r7, #8]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d002      	beq.n	8015e72 <osMessageQueuePut+0x56>
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d003      	beq.n	8015e7a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8015e72:	f06f 0303 	mvn.w	r3, #3
 8015e76:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015e78:	e039      	b.n	8015eee <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8015e7e:	f107 0210 	add.w	r2, r7, #16
 8015e82:	2300      	movs	r3, #0
 8015e84:	68b9      	ldr	r1, [r7, #8]
 8015e86:	6a38      	ldr	r0, [r7, #32]
 8015e88:	f000 fc34 	bl	80166f4 <xQueueGenericSendFromISR>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	2b01      	cmp	r3, #1
 8015e90:	d003      	beq.n	8015e9a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8015e92:	f06f 0302 	mvn.w	r3, #2
 8015e96:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015e98:	e029      	b.n	8015eee <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8015e9a:	693b      	ldr	r3, [r7, #16]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d026      	beq.n	8015eee <osMessageQueuePut+0xd2>
 8015ea0:	4b17      	ldr	r3, [pc, #92]	; (8015f00 <osMessageQueuePut+0xe4>)
 8015ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ea6:	601a      	str	r2, [r3, #0]
 8015ea8:	f3bf 8f4f 	dsb	sy
 8015eac:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015eb0:	e01d      	b.n	8015eee <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015eb2:	6a3b      	ldr	r3, [r7, #32]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d002      	beq.n	8015ebe <osMessageQueuePut+0xa2>
 8015eb8:	68bb      	ldr	r3, [r7, #8]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d103      	bne.n	8015ec6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8015ebe:	f06f 0303 	mvn.w	r3, #3
 8015ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8015ec4:	e014      	b.n	8015ef0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	683a      	ldr	r2, [r7, #0]
 8015eca:	68b9      	ldr	r1, [r7, #8]
 8015ecc:	6a38      	ldr	r0, [r7, #32]
 8015ece:	f000 fb17 	bl	8016500 <xQueueGenericSend>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	2b01      	cmp	r3, #1
 8015ed6:	d00b      	beq.n	8015ef0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d003      	beq.n	8015ee6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8015ede:	f06f 0301 	mvn.w	r3, #1
 8015ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8015ee4:	e004      	b.n	8015ef0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8015ee6:	f06f 0302 	mvn.w	r3, #2
 8015eea:	627b      	str	r3, [r7, #36]	; 0x24
 8015eec:	e000      	b.n	8015ef0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015eee:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8015ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	3728      	adds	r7, #40	; 0x28
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
 8015efa:	bf00      	nop
 8015efc:	200009c8 	.word	0x200009c8
 8015f00:	e000ed04 	.word	0xe000ed04

08015f04 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b08a      	sub	sp, #40	; 0x28
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	60f8      	str	r0, [r7, #12]
 8015f0c:	60b9      	str	r1, [r7, #8]
 8015f0e:	607a      	str	r2, [r7, #4]
 8015f10:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015f16:	2300      	movs	r3, #0
 8015f18:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f1a:	f3ef 8305 	mrs	r3, IPSR
 8015f1e:	61fb      	str	r3, [r7, #28]
  return(result);
 8015f20:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d10f      	bne.n	8015f46 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f26:	f3ef 8310 	mrs	r3, PRIMASK
 8015f2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8015f2c:	69bb      	ldr	r3, [r7, #24]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d105      	bne.n	8015f3e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015f32:	f3ef 8311 	mrs	r3, BASEPRI
 8015f36:	617b      	str	r3, [r7, #20]
  return(result);
 8015f38:	697b      	ldr	r3, [r7, #20]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d02c      	beq.n	8015f98 <osMessageQueueGet+0x94>
 8015f3e:	4b28      	ldr	r3, [pc, #160]	; (8015fe0 <osMessageQueueGet+0xdc>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	2b02      	cmp	r3, #2
 8015f44:	d128      	bne.n	8015f98 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015f46:	6a3b      	ldr	r3, [r7, #32]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d005      	beq.n	8015f58 <osMessageQueueGet+0x54>
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d002      	beq.n	8015f58 <osMessageQueueGet+0x54>
 8015f52:	683b      	ldr	r3, [r7, #0]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d003      	beq.n	8015f60 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8015f58:	f06f 0303 	mvn.w	r3, #3
 8015f5c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015f5e:	e038      	b.n	8015fd2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8015f60:	2300      	movs	r3, #0
 8015f62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8015f64:	f107 0310 	add.w	r3, r7, #16
 8015f68:	461a      	mov	r2, r3
 8015f6a:	68b9      	ldr	r1, [r7, #8]
 8015f6c:	6a38      	ldr	r0, [r7, #32]
 8015f6e:	f000 fec3 	bl	8016cf8 <xQueueReceiveFromISR>
 8015f72:	4603      	mov	r3, r0
 8015f74:	2b01      	cmp	r3, #1
 8015f76:	d003      	beq.n	8015f80 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8015f78:	f06f 0302 	mvn.w	r3, #2
 8015f7c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015f7e:	e028      	b.n	8015fd2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8015f80:	693b      	ldr	r3, [r7, #16]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d025      	beq.n	8015fd2 <osMessageQueueGet+0xce>
 8015f86:	4b17      	ldr	r3, [pc, #92]	; (8015fe4 <osMessageQueueGet+0xe0>)
 8015f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f8c:	601a      	str	r2, [r3, #0]
 8015f8e:	f3bf 8f4f 	dsb	sy
 8015f92:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015f96:	e01c      	b.n	8015fd2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015f98:	6a3b      	ldr	r3, [r7, #32]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d002      	beq.n	8015fa4 <osMessageQueueGet+0xa0>
 8015f9e:	68bb      	ldr	r3, [r7, #8]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d103      	bne.n	8015fac <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8015fa4:	f06f 0303 	mvn.w	r3, #3
 8015fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8015faa:	e013      	b.n	8015fd4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015fac:	683a      	ldr	r2, [r7, #0]
 8015fae:	68b9      	ldr	r1, [r7, #8]
 8015fb0:	6a38      	ldr	r0, [r7, #32]
 8015fb2:	f000 fcbd 	bl	8016930 <xQueueReceive>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	2b01      	cmp	r3, #1
 8015fba:	d00b      	beq.n	8015fd4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d003      	beq.n	8015fca <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8015fc2:	f06f 0301 	mvn.w	r3, #1
 8015fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8015fc8:	e004      	b.n	8015fd4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8015fca:	f06f 0302 	mvn.w	r3, #2
 8015fce:	627b      	str	r3, [r7, #36]	; 0x24
 8015fd0:	e000      	b.n	8015fd4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015fd2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8015fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	3728      	adds	r7, #40	; 0x28
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
 8015fde:	bf00      	nop
 8015fe0:	200009c8 	.word	0x200009c8
 8015fe4:	e000ed04 	.word	0xe000ed04

08015fe8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015fe8:	b480      	push	{r7}
 8015fea:	b085      	sub	sp, #20
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	60f8      	str	r0, [r7, #12]
 8015ff0:	60b9      	str	r1, [r7, #8]
 8015ff2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	4a07      	ldr	r2, [pc, #28]	; (8016014 <vApplicationGetIdleTaskMemory+0x2c>)
 8015ff8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	4a06      	ldr	r2, [pc, #24]	; (8016018 <vApplicationGetIdleTaskMemory+0x30>)
 8015ffe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2280      	movs	r2, #128	; 0x80
 8016004:	601a      	str	r2, [r3, #0]
}
 8016006:	bf00      	nop
 8016008:	3714      	adds	r7, #20
 801600a:	46bd      	mov	sp, r7
 801600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016010:	4770      	bx	lr
 8016012:	bf00      	nop
 8016014:	200009cc 	.word	0x200009cc
 8016018:	20000a28 	.word	0x20000a28

0801601c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801601c:	b480      	push	{r7}
 801601e:	b085      	sub	sp, #20
 8016020:	af00      	add	r7, sp, #0
 8016022:	60f8      	str	r0, [r7, #12]
 8016024:	60b9      	str	r1, [r7, #8]
 8016026:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	4a07      	ldr	r2, [pc, #28]	; (8016048 <vApplicationGetTimerTaskMemory+0x2c>)
 801602c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	4a06      	ldr	r2, [pc, #24]	; (801604c <vApplicationGetTimerTaskMemory+0x30>)
 8016032:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f44f 7280 	mov.w	r2, #256	; 0x100
 801603a:	601a      	str	r2, [r3, #0]
}
 801603c:	bf00      	nop
 801603e:	3714      	adds	r7, #20
 8016040:	46bd      	mov	sp, r7
 8016042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016046:	4770      	bx	lr
 8016048:	20000c28 	.word	0x20000c28
 801604c:	20000c84 	.word	0x20000c84

08016050 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016050:	b480      	push	{r7}
 8016052:	b083      	sub	sp, #12
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f103 0208 	add.w	r2, r3, #8
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f04f 32ff 	mov.w	r2, #4294967295
 8016068:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f103 0208 	add.w	r2, r3, #8
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f103 0208 	add.w	r2, r3, #8
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	2200      	movs	r2, #0
 8016082:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016084:	bf00      	nop
 8016086:	370c      	adds	r7, #12
 8016088:	46bd      	mov	sp, r7
 801608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608e:	4770      	bx	lr

08016090 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016090:	b480      	push	{r7}
 8016092:	b083      	sub	sp, #12
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	2200      	movs	r2, #0
 801609c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801609e:	bf00      	nop
 80160a0:	370c      	adds	r7, #12
 80160a2:	46bd      	mov	sp, r7
 80160a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a8:	4770      	bx	lr

080160aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80160aa:	b480      	push	{r7}
 80160ac:	b085      	sub	sp, #20
 80160ae:	af00      	add	r7, sp, #0
 80160b0:	6078      	str	r0, [r7, #4]
 80160b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	68fa      	ldr	r2, [r7, #12]
 80160be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	689a      	ldr	r2, [r3, #8]
 80160c4:	683b      	ldr	r3, [r7, #0]
 80160c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	689b      	ldr	r3, [r3, #8]
 80160cc:	683a      	ldr	r2, [r7, #0]
 80160ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	683a      	ldr	r2, [r7, #0]
 80160d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	687a      	ldr	r2, [r7, #4]
 80160da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	1c5a      	adds	r2, r3, #1
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	601a      	str	r2, [r3, #0]
}
 80160e6:	bf00      	nop
 80160e8:	3714      	adds	r7, #20
 80160ea:	46bd      	mov	sp, r7
 80160ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f0:	4770      	bx	lr

080160f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80160f2:	b480      	push	{r7}
 80160f4:	b085      	sub	sp, #20
 80160f6:	af00      	add	r7, sp, #0
 80160f8:	6078      	str	r0, [r7, #4]
 80160fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80160fc:	683b      	ldr	r3, [r7, #0]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016102:	68bb      	ldr	r3, [r7, #8]
 8016104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016108:	d103      	bne.n	8016112 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	691b      	ldr	r3, [r3, #16]
 801610e:	60fb      	str	r3, [r7, #12]
 8016110:	e00c      	b.n	801612c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	3308      	adds	r3, #8
 8016116:	60fb      	str	r3, [r7, #12]
 8016118:	e002      	b.n	8016120 <vListInsert+0x2e>
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	60fb      	str	r3, [r7, #12]
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	68ba      	ldr	r2, [r7, #8]
 8016128:	429a      	cmp	r2, r3
 801612a:	d2f6      	bcs.n	801611a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	685a      	ldr	r2, [r3, #4]
 8016130:	683b      	ldr	r3, [r7, #0]
 8016132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016134:	683b      	ldr	r3, [r7, #0]
 8016136:	685b      	ldr	r3, [r3, #4]
 8016138:	683a      	ldr	r2, [r7, #0]
 801613a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	68fa      	ldr	r2, [r7, #12]
 8016140:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	683a      	ldr	r2, [r7, #0]
 8016146:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	687a      	ldr	r2, [r7, #4]
 801614c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	1c5a      	adds	r2, r3, #1
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	601a      	str	r2, [r3, #0]
}
 8016158:	bf00      	nop
 801615a:	3714      	adds	r7, #20
 801615c:	46bd      	mov	sp, r7
 801615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016162:	4770      	bx	lr

08016164 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016164:	b480      	push	{r7}
 8016166:	b085      	sub	sp, #20
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	691b      	ldr	r3, [r3, #16]
 8016170:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	685b      	ldr	r3, [r3, #4]
 8016176:	687a      	ldr	r2, [r7, #4]
 8016178:	6892      	ldr	r2, [r2, #8]
 801617a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	689b      	ldr	r3, [r3, #8]
 8016180:	687a      	ldr	r2, [r7, #4]
 8016182:	6852      	ldr	r2, [r2, #4]
 8016184:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	685b      	ldr	r3, [r3, #4]
 801618a:	687a      	ldr	r2, [r7, #4]
 801618c:	429a      	cmp	r2, r3
 801618e:	d103      	bne.n	8016198 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	689a      	ldr	r2, [r3, #8]
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	2200      	movs	r2, #0
 801619c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	1e5a      	subs	r2, r3, #1
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	681b      	ldr	r3, [r3, #0]
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	3714      	adds	r7, #20
 80161b0:	46bd      	mov	sp, r7
 80161b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b6:	4770      	bx	lr

080161b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b084      	sub	sp, #16
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
 80161c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d109      	bne.n	80161e0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80161cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161d0:	f383 8811 	msr	BASEPRI, r3
 80161d4:	f3bf 8f6f 	isb	sy
 80161d8:	f3bf 8f4f 	dsb	sy
 80161dc:	60bb      	str	r3, [r7, #8]
 80161de:	e7fe      	b.n	80161de <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80161e0:	f002 fc3c 	bl	8018a5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	681a      	ldr	r2, [r3, #0]
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80161ec:	68f9      	ldr	r1, [r7, #12]
 80161ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80161f0:	fb01 f303 	mul.w	r3, r1, r3
 80161f4:	441a      	add	r2, r3
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	2200      	movs	r2, #0
 80161fe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	681a      	ldr	r2, [r3, #0]
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	681a      	ldr	r2, [r3, #0]
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016210:	3b01      	subs	r3, #1
 8016212:	68f9      	ldr	r1, [r7, #12]
 8016214:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016216:	fb01 f303 	mul.w	r3, r1, r3
 801621a:	441a      	add	r2, r3
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	22ff      	movs	r2, #255	; 0xff
 8016224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	22ff      	movs	r2, #255	; 0xff
 801622c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d114      	bne.n	8016260 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	691b      	ldr	r3, [r3, #16]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d01a      	beq.n	8016274 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	3310      	adds	r3, #16
 8016242:	4618      	mov	r0, r3
 8016244:	f001 fc0a 	bl	8017a5c <xTaskRemoveFromEventList>
 8016248:	4603      	mov	r3, r0
 801624a:	2b00      	cmp	r3, #0
 801624c:	d012      	beq.n	8016274 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801624e:	4b0d      	ldr	r3, [pc, #52]	; (8016284 <xQueueGenericReset+0xcc>)
 8016250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016254:	601a      	str	r2, [r3, #0]
 8016256:	f3bf 8f4f 	dsb	sy
 801625a:	f3bf 8f6f 	isb	sy
 801625e:	e009      	b.n	8016274 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	3310      	adds	r3, #16
 8016264:	4618      	mov	r0, r3
 8016266:	f7ff fef3 	bl	8016050 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	3324      	adds	r3, #36	; 0x24
 801626e:	4618      	mov	r0, r3
 8016270:	f7ff feee 	bl	8016050 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016274:	f002 fc20 	bl	8018ab8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016278:	2301      	movs	r3, #1
}
 801627a:	4618      	mov	r0, r3
 801627c:	3710      	adds	r7, #16
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}
 8016282:	bf00      	nop
 8016284:	e000ed04 	.word	0xe000ed04

08016288 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016288:	b580      	push	{r7, lr}
 801628a:	b08e      	sub	sp, #56	; 0x38
 801628c:	af02      	add	r7, sp, #8
 801628e:	60f8      	str	r0, [r7, #12]
 8016290:	60b9      	str	r1, [r7, #8]
 8016292:	607a      	str	r2, [r7, #4]
 8016294:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d109      	bne.n	80162b0 <xQueueGenericCreateStatic+0x28>
 801629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162a0:	f383 8811 	msr	BASEPRI, r3
 80162a4:	f3bf 8f6f 	isb	sy
 80162a8:	f3bf 8f4f 	dsb	sy
 80162ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80162ae:	e7fe      	b.n	80162ae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d109      	bne.n	80162ca <xQueueGenericCreateStatic+0x42>
 80162b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ba:	f383 8811 	msr	BASEPRI, r3
 80162be:	f3bf 8f6f 	isb	sy
 80162c2:	f3bf 8f4f 	dsb	sy
 80162c6:	627b      	str	r3, [r7, #36]	; 0x24
 80162c8:	e7fe      	b.n	80162c8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d002      	beq.n	80162d6 <xQueueGenericCreateStatic+0x4e>
 80162d0:	68bb      	ldr	r3, [r7, #8]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d001      	beq.n	80162da <xQueueGenericCreateStatic+0x52>
 80162d6:	2301      	movs	r3, #1
 80162d8:	e000      	b.n	80162dc <xQueueGenericCreateStatic+0x54>
 80162da:	2300      	movs	r3, #0
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d109      	bne.n	80162f4 <xQueueGenericCreateStatic+0x6c>
 80162e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162e4:	f383 8811 	msr	BASEPRI, r3
 80162e8:	f3bf 8f6f 	isb	sy
 80162ec:	f3bf 8f4f 	dsb	sy
 80162f0:	623b      	str	r3, [r7, #32]
 80162f2:	e7fe      	b.n	80162f2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d102      	bne.n	8016300 <xQueueGenericCreateStatic+0x78>
 80162fa:	68bb      	ldr	r3, [r7, #8]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d101      	bne.n	8016304 <xQueueGenericCreateStatic+0x7c>
 8016300:	2301      	movs	r3, #1
 8016302:	e000      	b.n	8016306 <xQueueGenericCreateStatic+0x7e>
 8016304:	2300      	movs	r3, #0
 8016306:	2b00      	cmp	r3, #0
 8016308:	d109      	bne.n	801631e <xQueueGenericCreateStatic+0x96>
 801630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801630e:	f383 8811 	msr	BASEPRI, r3
 8016312:	f3bf 8f6f 	isb	sy
 8016316:	f3bf 8f4f 	dsb	sy
 801631a:	61fb      	str	r3, [r7, #28]
 801631c:	e7fe      	b.n	801631c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801631e:	2350      	movs	r3, #80	; 0x50
 8016320:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016322:	697b      	ldr	r3, [r7, #20]
 8016324:	2b50      	cmp	r3, #80	; 0x50
 8016326:	d009      	beq.n	801633c <xQueueGenericCreateStatic+0xb4>
 8016328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801632c:	f383 8811 	msr	BASEPRI, r3
 8016330:	f3bf 8f6f 	isb	sy
 8016334:	f3bf 8f4f 	dsb	sy
 8016338:	61bb      	str	r3, [r7, #24]
 801633a:	e7fe      	b.n	801633a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801633c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801633e:	683b      	ldr	r3, [r7, #0]
 8016340:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016344:	2b00      	cmp	r3, #0
 8016346:	d00d      	beq.n	8016364 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801634a:	2201      	movs	r2, #1
 801634c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016350:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016356:	9300      	str	r3, [sp, #0]
 8016358:	4613      	mov	r3, r2
 801635a:	687a      	ldr	r2, [r7, #4]
 801635c:	68b9      	ldr	r1, [r7, #8]
 801635e:	68f8      	ldr	r0, [r7, #12]
 8016360:	f000 f844 	bl	80163ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016366:	4618      	mov	r0, r3
 8016368:	3730      	adds	r7, #48	; 0x30
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}

0801636e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801636e:	b580      	push	{r7, lr}
 8016370:	b08a      	sub	sp, #40	; 0x28
 8016372:	af02      	add	r7, sp, #8
 8016374:	60f8      	str	r0, [r7, #12]
 8016376:	60b9      	str	r1, [r7, #8]
 8016378:	4613      	mov	r3, r2
 801637a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d109      	bne.n	8016396 <xQueueGenericCreate+0x28>
 8016382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016386:	f383 8811 	msr	BASEPRI, r3
 801638a:	f3bf 8f6f 	isb	sy
 801638e:	f3bf 8f4f 	dsb	sy
 8016392:	613b      	str	r3, [r7, #16]
 8016394:	e7fe      	b.n	8016394 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016396:	68bb      	ldr	r3, [r7, #8]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d102      	bne.n	80163a2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801639c:	2300      	movs	r3, #0
 801639e:	61fb      	str	r3, [r7, #28]
 80163a0:	e004      	b.n	80163ac <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	68ba      	ldr	r2, [r7, #8]
 80163a6:	fb02 f303 	mul.w	r3, r2, r3
 80163aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80163ac:	69fb      	ldr	r3, [r7, #28]
 80163ae:	3350      	adds	r3, #80	; 0x50
 80163b0:	4618      	mov	r0, r3
 80163b2:	f002 fc6d 	bl	8018c90 <pvPortMalloc>
 80163b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80163b8:	69bb      	ldr	r3, [r7, #24]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d011      	beq.n	80163e2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80163be:	69bb      	ldr	r3, [r7, #24]
 80163c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80163c2:	697b      	ldr	r3, [r7, #20]
 80163c4:	3350      	adds	r3, #80	; 0x50
 80163c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80163c8:	69bb      	ldr	r3, [r7, #24]
 80163ca:	2200      	movs	r2, #0
 80163cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80163d0:	79fa      	ldrb	r2, [r7, #7]
 80163d2:	69bb      	ldr	r3, [r7, #24]
 80163d4:	9300      	str	r3, [sp, #0]
 80163d6:	4613      	mov	r3, r2
 80163d8:	697a      	ldr	r2, [r7, #20]
 80163da:	68b9      	ldr	r1, [r7, #8]
 80163dc:	68f8      	ldr	r0, [r7, #12]
 80163de:	f000 f805 	bl	80163ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80163e2:	69bb      	ldr	r3, [r7, #24]
	}
 80163e4:	4618      	mov	r0, r3
 80163e6:	3720      	adds	r7, #32
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}

080163ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b084      	sub	sp, #16
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	60f8      	str	r0, [r7, #12]
 80163f4:	60b9      	str	r1, [r7, #8]
 80163f6:	607a      	str	r2, [r7, #4]
 80163f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d103      	bne.n	8016408 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016400:	69bb      	ldr	r3, [r7, #24]
 8016402:	69ba      	ldr	r2, [r7, #24]
 8016404:	601a      	str	r2, [r3, #0]
 8016406:	e002      	b.n	801640e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016408:	69bb      	ldr	r3, [r7, #24]
 801640a:	687a      	ldr	r2, [r7, #4]
 801640c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801640e:	69bb      	ldr	r3, [r7, #24]
 8016410:	68fa      	ldr	r2, [r7, #12]
 8016412:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016414:	69bb      	ldr	r3, [r7, #24]
 8016416:	68ba      	ldr	r2, [r7, #8]
 8016418:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801641a:	2101      	movs	r1, #1
 801641c:	69b8      	ldr	r0, [r7, #24]
 801641e:	f7ff fecb 	bl	80161b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016422:	69bb      	ldr	r3, [r7, #24]
 8016424:	78fa      	ldrb	r2, [r7, #3]
 8016426:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801642a:	bf00      	nop
 801642c:	3710      	adds	r7, #16
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}

08016432 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016432:	b580      	push	{r7, lr}
 8016434:	b08a      	sub	sp, #40	; 0x28
 8016436:	af02      	add	r7, sp, #8
 8016438:	60f8      	str	r0, [r7, #12]
 801643a:	60b9      	str	r1, [r7, #8]
 801643c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d109      	bne.n	8016458 <xQueueCreateCountingSemaphoreStatic+0x26>
 8016444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016448:	f383 8811 	msr	BASEPRI, r3
 801644c:	f3bf 8f6f 	isb	sy
 8016450:	f3bf 8f4f 	dsb	sy
 8016454:	61bb      	str	r3, [r7, #24]
 8016456:	e7fe      	b.n	8016456 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016458:	68ba      	ldr	r2, [r7, #8]
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	429a      	cmp	r2, r3
 801645e:	d909      	bls.n	8016474 <xQueueCreateCountingSemaphoreStatic+0x42>
 8016460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016464:	f383 8811 	msr	BASEPRI, r3
 8016468:	f3bf 8f6f 	isb	sy
 801646c:	f3bf 8f4f 	dsb	sy
 8016470:	617b      	str	r3, [r7, #20]
 8016472:	e7fe      	b.n	8016472 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016474:	2302      	movs	r3, #2
 8016476:	9300      	str	r3, [sp, #0]
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	2200      	movs	r2, #0
 801647c:	2100      	movs	r1, #0
 801647e:	68f8      	ldr	r0, [r7, #12]
 8016480:	f7ff ff02 	bl	8016288 <xQueueGenericCreateStatic>
 8016484:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016486:	69fb      	ldr	r3, [r7, #28]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d002      	beq.n	8016492 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801648c:	69fb      	ldr	r3, [r7, #28]
 801648e:	68ba      	ldr	r2, [r7, #8]
 8016490:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016492:	69fb      	ldr	r3, [r7, #28]
	}
 8016494:	4618      	mov	r0, r3
 8016496:	3720      	adds	r7, #32
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}

0801649c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801649c:	b580      	push	{r7, lr}
 801649e:	b086      	sub	sp, #24
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
 80164a4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d109      	bne.n	80164c0 <xQueueCreateCountingSemaphore+0x24>
 80164ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164b0:	f383 8811 	msr	BASEPRI, r3
 80164b4:	f3bf 8f6f 	isb	sy
 80164b8:	f3bf 8f4f 	dsb	sy
 80164bc:	613b      	str	r3, [r7, #16]
 80164be:	e7fe      	b.n	80164be <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80164c0:	683a      	ldr	r2, [r7, #0]
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	429a      	cmp	r2, r3
 80164c6:	d909      	bls.n	80164dc <xQueueCreateCountingSemaphore+0x40>
 80164c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164cc:	f383 8811 	msr	BASEPRI, r3
 80164d0:	f3bf 8f6f 	isb	sy
 80164d4:	f3bf 8f4f 	dsb	sy
 80164d8:	60fb      	str	r3, [r7, #12]
 80164da:	e7fe      	b.n	80164da <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80164dc:	2202      	movs	r2, #2
 80164de:	2100      	movs	r1, #0
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	f7ff ff44 	bl	801636e <xQueueGenericCreate>
 80164e6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80164e8:	697b      	ldr	r3, [r7, #20]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d002      	beq.n	80164f4 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80164ee:	697b      	ldr	r3, [r7, #20]
 80164f0:	683a      	ldr	r2, [r7, #0]
 80164f2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80164f4:	697b      	ldr	r3, [r7, #20]
	}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3718      	adds	r7, #24
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
	...

08016500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b08e      	sub	sp, #56	; 0x38
 8016504:	af00      	add	r7, sp, #0
 8016506:	60f8      	str	r0, [r7, #12]
 8016508:	60b9      	str	r1, [r7, #8]
 801650a:	607a      	str	r2, [r7, #4]
 801650c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801650e:	2300      	movs	r3, #0
 8016510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016518:	2b00      	cmp	r3, #0
 801651a:	d109      	bne.n	8016530 <xQueueGenericSend+0x30>
 801651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016520:	f383 8811 	msr	BASEPRI, r3
 8016524:	f3bf 8f6f 	isb	sy
 8016528:	f3bf 8f4f 	dsb	sy
 801652c:	62bb      	str	r3, [r7, #40]	; 0x28
 801652e:	e7fe      	b.n	801652e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016530:	68bb      	ldr	r3, [r7, #8]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d103      	bne.n	801653e <xQueueGenericSend+0x3e>
 8016536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801653a:	2b00      	cmp	r3, #0
 801653c:	d101      	bne.n	8016542 <xQueueGenericSend+0x42>
 801653e:	2301      	movs	r3, #1
 8016540:	e000      	b.n	8016544 <xQueueGenericSend+0x44>
 8016542:	2300      	movs	r3, #0
 8016544:	2b00      	cmp	r3, #0
 8016546:	d109      	bne.n	801655c <xQueueGenericSend+0x5c>
 8016548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801654c:	f383 8811 	msr	BASEPRI, r3
 8016550:	f3bf 8f6f 	isb	sy
 8016554:	f3bf 8f4f 	dsb	sy
 8016558:	627b      	str	r3, [r7, #36]	; 0x24
 801655a:	e7fe      	b.n	801655a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	2b02      	cmp	r3, #2
 8016560:	d103      	bne.n	801656a <xQueueGenericSend+0x6a>
 8016562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016566:	2b01      	cmp	r3, #1
 8016568:	d101      	bne.n	801656e <xQueueGenericSend+0x6e>
 801656a:	2301      	movs	r3, #1
 801656c:	e000      	b.n	8016570 <xQueueGenericSend+0x70>
 801656e:	2300      	movs	r3, #0
 8016570:	2b00      	cmp	r3, #0
 8016572:	d109      	bne.n	8016588 <xQueueGenericSend+0x88>
 8016574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016578:	f383 8811 	msr	BASEPRI, r3
 801657c:	f3bf 8f6f 	isb	sy
 8016580:	f3bf 8f4f 	dsb	sy
 8016584:	623b      	str	r3, [r7, #32]
 8016586:	e7fe      	b.n	8016586 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016588:	f001 fc1e 	bl	8017dc8 <xTaskGetSchedulerState>
 801658c:	4603      	mov	r3, r0
 801658e:	2b00      	cmp	r3, #0
 8016590:	d102      	bne.n	8016598 <xQueueGenericSend+0x98>
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d101      	bne.n	801659c <xQueueGenericSend+0x9c>
 8016598:	2301      	movs	r3, #1
 801659a:	e000      	b.n	801659e <xQueueGenericSend+0x9e>
 801659c:	2300      	movs	r3, #0
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d109      	bne.n	80165b6 <xQueueGenericSend+0xb6>
 80165a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165a6:	f383 8811 	msr	BASEPRI, r3
 80165aa:	f3bf 8f6f 	isb	sy
 80165ae:	f3bf 8f4f 	dsb	sy
 80165b2:	61fb      	str	r3, [r7, #28]
 80165b4:	e7fe      	b.n	80165b4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80165b6:	f002 fa51 	bl	8018a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80165ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80165be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165c2:	429a      	cmp	r2, r3
 80165c4:	d302      	bcc.n	80165cc <xQueueGenericSend+0xcc>
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	2b02      	cmp	r3, #2
 80165ca:	d129      	bne.n	8016620 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80165cc:	683a      	ldr	r2, [r7, #0]
 80165ce:	68b9      	ldr	r1, [r7, #8]
 80165d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80165d2:	f000 fc48 	bl	8016e66 <prvCopyDataToQueue>
 80165d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80165d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d010      	beq.n	8016602 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80165e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165e2:	3324      	adds	r3, #36	; 0x24
 80165e4:	4618      	mov	r0, r3
 80165e6:	f001 fa39 	bl	8017a5c <xTaskRemoveFromEventList>
 80165ea:	4603      	mov	r3, r0
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d013      	beq.n	8016618 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80165f0:	4b3f      	ldr	r3, [pc, #252]	; (80166f0 <xQueueGenericSend+0x1f0>)
 80165f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165f6:	601a      	str	r2, [r3, #0]
 80165f8:	f3bf 8f4f 	dsb	sy
 80165fc:	f3bf 8f6f 	isb	sy
 8016600:	e00a      	b.n	8016618 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016604:	2b00      	cmp	r3, #0
 8016606:	d007      	beq.n	8016618 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016608:	4b39      	ldr	r3, [pc, #228]	; (80166f0 <xQueueGenericSend+0x1f0>)
 801660a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801660e:	601a      	str	r2, [r3, #0]
 8016610:	f3bf 8f4f 	dsb	sy
 8016614:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016618:	f002 fa4e 	bl	8018ab8 <vPortExitCritical>
				return pdPASS;
 801661c:	2301      	movs	r3, #1
 801661e:	e063      	b.n	80166e8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d103      	bne.n	801662e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016626:	f002 fa47 	bl	8018ab8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801662a:	2300      	movs	r3, #0
 801662c:	e05c      	b.n	80166e8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016630:	2b00      	cmp	r3, #0
 8016632:	d106      	bne.n	8016642 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016634:	f107 0314 	add.w	r3, r7, #20
 8016638:	4618      	mov	r0, r3
 801663a:	f001 fa71 	bl	8017b20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801663e:	2301      	movs	r3, #1
 8016640:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016642:	f002 fa39 	bl	8018ab8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016646:	f000 ffdb 	bl	8017600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801664a:	f002 fa07 	bl	8018a5c <vPortEnterCritical>
 801664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016654:	b25b      	sxtb	r3, r3
 8016656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801665a:	d103      	bne.n	8016664 <xQueueGenericSend+0x164>
 801665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801665e:	2200      	movs	r2, #0
 8016660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801666a:	b25b      	sxtb	r3, r3
 801666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016670:	d103      	bne.n	801667a <xQueueGenericSend+0x17a>
 8016672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016674:	2200      	movs	r2, #0
 8016676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801667a:	f002 fa1d 	bl	8018ab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801667e:	1d3a      	adds	r2, r7, #4
 8016680:	f107 0314 	add.w	r3, r7, #20
 8016684:	4611      	mov	r1, r2
 8016686:	4618      	mov	r0, r3
 8016688:	f001 fa60 	bl	8017b4c <xTaskCheckForTimeOut>
 801668c:	4603      	mov	r3, r0
 801668e:	2b00      	cmp	r3, #0
 8016690:	d124      	bne.n	80166dc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016694:	f000 fcdf 	bl	8017056 <prvIsQueueFull>
 8016698:	4603      	mov	r3, r0
 801669a:	2b00      	cmp	r3, #0
 801669c:	d018      	beq.n	80166d0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a0:	3310      	adds	r3, #16
 80166a2:	687a      	ldr	r2, [r7, #4]
 80166a4:	4611      	mov	r1, r2
 80166a6:	4618      	mov	r0, r3
 80166a8:	f001 f98a 	bl	80179c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80166ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166ae:	f000 fc6a 	bl	8016f86 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80166b2:	f000 ffb3 	bl	801761c <xTaskResumeAll>
 80166b6:	4603      	mov	r3, r0
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	f47f af7c 	bne.w	80165b6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80166be:	4b0c      	ldr	r3, [pc, #48]	; (80166f0 <xQueueGenericSend+0x1f0>)
 80166c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166c4:	601a      	str	r2, [r3, #0]
 80166c6:	f3bf 8f4f 	dsb	sy
 80166ca:	f3bf 8f6f 	isb	sy
 80166ce:	e772      	b.n	80165b6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80166d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166d2:	f000 fc58 	bl	8016f86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80166d6:	f000 ffa1 	bl	801761c <xTaskResumeAll>
 80166da:	e76c      	b.n	80165b6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80166dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166de:	f000 fc52 	bl	8016f86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80166e2:	f000 ff9b 	bl	801761c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80166e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80166e8:	4618      	mov	r0, r3
 80166ea:	3738      	adds	r7, #56	; 0x38
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}
 80166f0:	e000ed04 	.word	0xe000ed04

080166f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b08e      	sub	sp, #56	; 0x38
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	60f8      	str	r0, [r7, #12]
 80166fc:	60b9      	str	r1, [r7, #8]
 80166fe:	607a      	str	r2, [r7, #4]
 8016700:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016708:	2b00      	cmp	r3, #0
 801670a:	d109      	bne.n	8016720 <xQueueGenericSendFromISR+0x2c>
 801670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016710:	f383 8811 	msr	BASEPRI, r3
 8016714:	f3bf 8f6f 	isb	sy
 8016718:	f3bf 8f4f 	dsb	sy
 801671c:	627b      	str	r3, [r7, #36]	; 0x24
 801671e:	e7fe      	b.n	801671e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016720:	68bb      	ldr	r3, [r7, #8]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d103      	bne.n	801672e <xQueueGenericSendFromISR+0x3a>
 8016726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801672a:	2b00      	cmp	r3, #0
 801672c:	d101      	bne.n	8016732 <xQueueGenericSendFromISR+0x3e>
 801672e:	2301      	movs	r3, #1
 8016730:	e000      	b.n	8016734 <xQueueGenericSendFromISR+0x40>
 8016732:	2300      	movs	r3, #0
 8016734:	2b00      	cmp	r3, #0
 8016736:	d109      	bne.n	801674c <xQueueGenericSendFromISR+0x58>
 8016738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801673c:	f383 8811 	msr	BASEPRI, r3
 8016740:	f3bf 8f6f 	isb	sy
 8016744:	f3bf 8f4f 	dsb	sy
 8016748:	623b      	str	r3, [r7, #32]
 801674a:	e7fe      	b.n	801674a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801674c:	683b      	ldr	r3, [r7, #0]
 801674e:	2b02      	cmp	r3, #2
 8016750:	d103      	bne.n	801675a <xQueueGenericSendFromISR+0x66>
 8016752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016756:	2b01      	cmp	r3, #1
 8016758:	d101      	bne.n	801675e <xQueueGenericSendFromISR+0x6a>
 801675a:	2301      	movs	r3, #1
 801675c:	e000      	b.n	8016760 <xQueueGenericSendFromISR+0x6c>
 801675e:	2300      	movs	r3, #0
 8016760:	2b00      	cmp	r3, #0
 8016762:	d109      	bne.n	8016778 <xQueueGenericSendFromISR+0x84>
 8016764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016768:	f383 8811 	msr	BASEPRI, r3
 801676c:	f3bf 8f6f 	isb	sy
 8016770:	f3bf 8f4f 	dsb	sy
 8016774:	61fb      	str	r3, [r7, #28]
 8016776:	e7fe      	b.n	8016776 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016778:	f002 fa4c 	bl	8018c14 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801677c:	f3ef 8211 	mrs	r2, BASEPRI
 8016780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016784:	f383 8811 	msr	BASEPRI, r3
 8016788:	f3bf 8f6f 	isb	sy
 801678c:	f3bf 8f4f 	dsb	sy
 8016790:	61ba      	str	r2, [r7, #24]
 8016792:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016794:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016796:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801679a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801679e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d302      	bcc.n	80167aa <xQueueGenericSendFromISR+0xb6>
 80167a4:	683b      	ldr	r3, [r7, #0]
 80167a6:	2b02      	cmp	r3, #2
 80167a8:	d12c      	bne.n	8016804 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80167aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80167b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80167b4:	683a      	ldr	r2, [r7, #0]
 80167b6:	68b9      	ldr	r1, [r7, #8]
 80167b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167ba:	f000 fb54 	bl	8016e66 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80167be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80167c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167c6:	d112      	bne.n	80167ee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80167c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d016      	beq.n	80167fe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80167d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167d2:	3324      	adds	r3, #36	; 0x24
 80167d4:	4618      	mov	r0, r3
 80167d6:	f001 f941 	bl	8017a5c <xTaskRemoveFromEventList>
 80167da:	4603      	mov	r3, r0
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d00e      	beq.n	80167fe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d00b      	beq.n	80167fe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2201      	movs	r2, #1
 80167ea:	601a      	str	r2, [r3, #0]
 80167ec:	e007      	b.n	80167fe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80167ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80167f2:	3301      	adds	r3, #1
 80167f4:	b2db      	uxtb	r3, r3
 80167f6:	b25a      	sxtb	r2, r3
 80167f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80167fe:	2301      	movs	r3, #1
 8016800:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8016802:	e001      	b.n	8016808 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016804:	2300      	movs	r3, #0
 8016806:	637b      	str	r3, [r7, #52]	; 0x34
 8016808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801680a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801680c:	693b      	ldr	r3, [r7, #16]
 801680e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016814:	4618      	mov	r0, r3
 8016816:	3738      	adds	r7, #56	; 0x38
 8016818:	46bd      	mov	sp, r7
 801681a:	bd80      	pop	{r7, pc}

0801681c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b08e      	sub	sp, #56	; 0x38
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801682c:	2b00      	cmp	r3, #0
 801682e:	d109      	bne.n	8016844 <xQueueGiveFromISR+0x28>
	__asm volatile
 8016830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016834:	f383 8811 	msr	BASEPRI, r3
 8016838:	f3bf 8f6f 	isb	sy
 801683c:	f3bf 8f4f 	dsb	sy
 8016840:	623b      	str	r3, [r7, #32]
 8016842:	e7fe      	b.n	8016842 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016848:	2b00      	cmp	r3, #0
 801684a:	d009      	beq.n	8016860 <xQueueGiveFromISR+0x44>
 801684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016850:	f383 8811 	msr	BASEPRI, r3
 8016854:	f3bf 8f6f 	isb	sy
 8016858:	f3bf 8f4f 	dsb	sy
 801685c:	61fb      	str	r3, [r7, #28]
 801685e:	e7fe      	b.n	801685e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d103      	bne.n	8016870 <xQueueGiveFromISR+0x54>
 8016868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801686a:	689b      	ldr	r3, [r3, #8]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d101      	bne.n	8016874 <xQueueGiveFromISR+0x58>
 8016870:	2301      	movs	r3, #1
 8016872:	e000      	b.n	8016876 <xQueueGiveFromISR+0x5a>
 8016874:	2300      	movs	r3, #0
 8016876:	2b00      	cmp	r3, #0
 8016878:	d109      	bne.n	801688e <xQueueGiveFromISR+0x72>
 801687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801687e:	f383 8811 	msr	BASEPRI, r3
 8016882:	f3bf 8f6f 	isb	sy
 8016886:	f3bf 8f4f 	dsb	sy
 801688a:	61bb      	str	r3, [r7, #24]
 801688c:	e7fe      	b.n	801688c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801688e:	f002 f9c1 	bl	8018c14 <vPortValidateInterruptPriority>
	__asm volatile
 8016892:	f3ef 8211 	mrs	r2, BASEPRI
 8016896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801689a:	f383 8811 	msr	BASEPRI, r3
 801689e:	f3bf 8f6f 	isb	sy
 80168a2:	f3bf 8f4f 	dsb	sy
 80168a6:	617a      	str	r2, [r7, #20]
 80168a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80168aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80168ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80168ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80168b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80168b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168ba:	429a      	cmp	r2, r3
 80168bc:	d22b      	bcs.n	8016916 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80168be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80168c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80168c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168ca:	1c5a      	adds	r2, r3, #1
 80168cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80168d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80168d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168d8:	d112      	bne.n	8016900 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80168da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d016      	beq.n	8016910 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80168e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168e4:	3324      	adds	r3, #36	; 0x24
 80168e6:	4618      	mov	r0, r3
 80168e8:	f001 f8b8 	bl	8017a5c <xTaskRemoveFromEventList>
 80168ec:	4603      	mov	r3, r0
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d00e      	beq.n	8016910 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d00b      	beq.n	8016910 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80168f8:	683b      	ldr	r3, [r7, #0]
 80168fa:	2201      	movs	r2, #1
 80168fc:	601a      	str	r2, [r3, #0]
 80168fe:	e007      	b.n	8016910 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016904:	3301      	adds	r3, #1
 8016906:	b2db      	uxtb	r3, r3
 8016908:	b25a      	sxtb	r2, r3
 801690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801690c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016910:	2301      	movs	r3, #1
 8016912:	637b      	str	r3, [r7, #52]	; 0x34
 8016914:	e001      	b.n	801691a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016916:	2300      	movs	r3, #0
 8016918:	637b      	str	r3, [r7, #52]	; 0x34
 801691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801691c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016926:	4618      	mov	r0, r3
 8016928:	3738      	adds	r7, #56	; 0x38
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}
	...

08016930 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b08c      	sub	sp, #48	; 0x30
 8016934:	af00      	add	r7, sp, #0
 8016936:	60f8      	str	r0, [r7, #12]
 8016938:	60b9      	str	r1, [r7, #8]
 801693a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801693c:	2300      	movs	r3, #0
 801693e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016946:	2b00      	cmp	r3, #0
 8016948:	d109      	bne.n	801695e <xQueueReceive+0x2e>
	__asm volatile
 801694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801694e:	f383 8811 	msr	BASEPRI, r3
 8016952:	f3bf 8f6f 	isb	sy
 8016956:	f3bf 8f4f 	dsb	sy
 801695a:	623b      	str	r3, [r7, #32]
 801695c:	e7fe      	b.n	801695c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801695e:	68bb      	ldr	r3, [r7, #8]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d103      	bne.n	801696c <xQueueReceive+0x3c>
 8016964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016968:	2b00      	cmp	r3, #0
 801696a:	d101      	bne.n	8016970 <xQueueReceive+0x40>
 801696c:	2301      	movs	r3, #1
 801696e:	e000      	b.n	8016972 <xQueueReceive+0x42>
 8016970:	2300      	movs	r3, #0
 8016972:	2b00      	cmp	r3, #0
 8016974:	d109      	bne.n	801698a <xQueueReceive+0x5a>
 8016976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801697a:	f383 8811 	msr	BASEPRI, r3
 801697e:	f3bf 8f6f 	isb	sy
 8016982:	f3bf 8f4f 	dsb	sy
 8016986:	61fb      	str	r3, [r7, #28]
 8016988:	e7fe      	b.n	8016988 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801698a:	f001 fa1d 	bl	8017dc8 <xTaskGetSchedulerState>
 801698e:	4603      	mov	r3, r0
 8016990:	2b00      	cmp	r3, #0
 8016992:	d102      	bne.n	801699a <xQueueReceive+0x6a>
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d101      	bne.n	801699e <xQueueReceive+0x6e>
 801699a:	2301      	movs	r3, #1
 801699c:	e000      	b.n	80169a0 <xQueueReceive+0x70>
 801699e:	2300      	movs	r3, #0
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d109      	bne.n	80169b8 <xQueueReceive+0x88>
 80169a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169a8:	f383 8811 	msr	BASEPRI, r3
 80169ac:	f3bf 8f6f 	isb	sy
 80169b0:	f3bf 8f4f 	dsb	sy
 80169b4:	61bb      	str	r3, [r7, #24]
 80169b6:	e7fe      	b.n	80169b6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80169b8:	f002 f850 	bl	8018a5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80169bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169c0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80169c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d01f      	beq.n	8016a08 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80169c8:	68b9      	ldr	r1, [r7, #8]
 80169ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80169cc:	f000 fab5 	bl	8016f3a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80169d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d2:	1e5a      	subs	r2, r3, #1
 80169d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169d6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80169d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169da:	691b      	ldr	r3, [r3, #16]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d00f      	beq.n	8016a00 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80169e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e2:	3310      	adds	r3, #16
 80169e4:	4618      	mov	r0, r3
 80169e6:	f001 f839 	bl	8017a5c <xTaskRemoveFromEventList>
 80169ea:	4603      	mov	r3, r0
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d007      	beq.n	8016a00 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80169f0:	4b3c      	ldr	r3, [pc, #240]	; (8016ae4 <xQueueReceive+0x1b4>)
 80169f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169f6:	601a      	str	r2, [r3, #0]
 80169f8:	f3bf 8f4f 	dsb	sy
 80169fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016a00:	f002 f85a 	bl	8018ab8 <vPortExitCritical>
				return pdPASS;
 8016a04:	2301      	movs	r3, #1
 8016a06:	e069      	b.n	8016adc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d103      	bne.n	8016a16 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016a0e:	f002 f853 	bl	8018ab8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016a12:	2300      	movs	r3, #0
 8016a14:	e062      	b.n	8016adc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d106      	bne.n	8016a2a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016a1c:	f107 0310 	add.w	r3, r7, #16
 8016a20:	4618      	mov	r0, r3
 8016a22:	f001 f87d 	bl	8017b20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016a26:	2301      	movs	r3, #1
 8016a28:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016a2a:	f002 f845 	bl	8018ab8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016a2e:	f000 fde7 	bl	8017600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016a32:	f002 f813 	bl	8018a5c <vPortEnterCritical>
 8016a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016a3c:	b25b      	sxtb	r3, r3
 8016a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a42:	d103      	bne.n	8016a4c <xQueueReceive+0x11c>
 8016a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a46:	2200      	movs	r2, #0
 8016a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016a52:	b25b      	sxtb	r3, r3
 8016a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a58:	d103      	bne.n	8016a62 <xQueueReceive+0x132>
 8016a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016a62:	f002 f829 	bl	8018ab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016a66:	1d3a      	adds	r2, r7, #4
 8016a68:	f107 0310 	add.w	r3, r7, #16
 8016a6c:	4611      	mov	r1, r2
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f001 f86c 	bl	8017b4c <xTaskCheckForTimeOut>
 8016a74:	4603      	mov	r3, r0
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d123      	bne.n	8016ac2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a7c:	f000 fad5 	bl	801702a <prvIsQueueEmpty>
 8016a80:	4603      	mov	r3, r0
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d017      	beq.n	8016ab6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a88:	3324      	adds	r3, #36	; 0x24
 8016a8a:	687a      	ldr	r2, [r7, #4]
 8016a8c:	4611      	mov	r1, r2
 8016a8e:	4618      	mov	r0, r3
 8016a90:	f000 ff96 	bl	80179c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a96:	f000 fa76 	bl	8016f86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016a9a:	f000 fdbf 	bl	801761c <xTaskResumeAll>
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d189      	bne.n	80169b8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8016aa4:	4b0f      	ldr	r3, [pc, #60]	; (8016ae4 <xQueueReceive+0x1b4>)
 8016aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016aaa:	601a      	str	r2, [r3, #0]
 8016aac:	f3bf 8f4f 	dsb	sy
 8016ab0:	f3bf 8f6f 	isb	sy
 8016ab4:	e780      	b.n	80169b8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ab8:	f000 fa65 	bl	8016f86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016abc:	f000 fdae 	bl	801761c <xTaskResumeAll>
 8016ac0:	e77a      	b.n	80169b8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ac4:	f000 fa5f 	bl	8016f86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016ac8:	f000 fda8 	bl	801761c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ace:	f000 faac 	bl	801702a <prvIsQueueEmpty>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	f43f af6f 	beq.w	80169b8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016ada:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016adc:	4618      	mov	r0, r3
 8016ade:	3730      	adds	r7, #48	; 0x30
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}
 8016ae4:	e000ed04 	.word	0xe000ed04

08016ae8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b08e      	sub	sp, #56	; 0x38
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
 8016af0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016af2:	2300      	movs	r3, #0
 8016af4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016afa:	2300      	movs	r3, #0
 8016afc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d109      	bne.n	8016b18 <xQueueSemaphoreTake+0x30>
 8016b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b08:	f383 8811 	msr	BASEPRI, r3
 8016b0c:	f3bf 8f6f 	isb	sy
 8016b10:	f3bf 8f4f 	dsb	sy
 8016b14:	623b      	str	r3, [r7, #32]
 8016b16:	e7fe      	b.n	8016b16 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d009      	beq.n	8016b34 <xQueueSemaphoreTake+0x4c>
 8016b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b24:	f383 8811 	msr	BASEPRI, r3
 8016b28:	f3bf 8f6f 	isb	sy
 8016b2c:	f3bf 8f4f 	dsb	sy
 8016b30:	61fb      	str	r3, [r7, #28]
 8016b32:	e7fe      	b.n	8016b32 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016b34:	f001 f948 	bl	8017dc8 <xTaskGetSchedulerState>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d102      	bne.n	8016b44 <xQueueSemaphoreTake+0x5c>
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d101      	bne.n	8016b48 <xQueueSemaphoreTake+0x60>
 8016b44:	2301      	movs	r3, #1
 8016b46:	e000      	b.n	8016b4a <xQueueSemaphoreTake+0x62>
 8016b48:	2300      	movs	r3, #0
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d109      	bne.n	8016b62 <xQueueSemaphoreTake+0x7a>
 8016b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b52:	f383 8811 	msr	BASEPRI, r3
 8016b56:	f3bf 8f6f 	isb	sy
 8016b5a:	f3bf 8f4f 	dsb	sy
 8016b5e:	61bb      	str	r3, [r7, #24]
 8016b60:	e7fe      	b.n	8016b60 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016b62:	f001 ff7b 	bl	8018a5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b6a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d024      	beq.n	8016bbc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b74:	1e5a      	subs	r2, r3, #1
 8016b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b78:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d104      	bne.n	8016b8c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016b82:	f001 fa93 	bl	80180ac <pvTaskIncrementMutexHeldCount>
 8016b86:	4602      	mov	r2, r0
 8016b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b8a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b8e:	691b      	ldr	r3, [r3, #16]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d00f      	beq.n	8016bb4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b96:	3310      	adds	r3, #16
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f000 ff5f 	bl	8017a5c <xTaskRemoveFromEventList>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d007      	beq.n	8016bb4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016ba4:	4b53      	ldr	r3, [pc, #332]	; (8016cf4 <xQueueSemaphoreTake+0x20c>)
 8016ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016baa:	601a      	str	r2, [r3, #0]
 8016bac:	f3bf 8f4f 	dsb	sy
 8016bb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016bb4:	f001 ff80 	bl	8018ab8 <vPortExitCritical>
				return pdPASS;
 8016bb8:	2301      	movs	r3, #1
 8016bba:	e096      	b.n	8016cea <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d110      	bne.n	8016be4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d009      	beq.n	8016bdc <xQueueSemaphoreTake+0xf4>
 8016bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bcc:	f383 8811 	msr	BASEPRI, r3
 8016bd0:	f3bf 8f6f 	isb	sy
 8016bd4:	f3bf 8f4f 	dsb	sy
 8016bd8:	617b      	str	r3, [r7, #20]
 8016bda:	e7fe      	b.n	8016bda <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016bdc:	f001 ff6c 	bl	8018ab8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016be0:	2300      	movs	r3, #0
 8016be2:	e082      	b.n	8016cea <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d106      	bne.n	8016bf8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016bea:	f107 030c 	add.w	r3, r7, #12
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f000 ff96 	bl	8017b20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016bf8:	f001 ff5e 	bl	8018ab8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016bfc:	f000 fd00 	bl	8017600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016c00:	f001 ff2c 	bl	8018a5c <vPortEnterCritical>
 8016c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016c0a:	b25b      	sxtb	r3, r3
 8016c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c10:	d103      	bne.n	8016c1a <xQueueSemaphoreTake+0x132>
 8016c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c14:	2200      	movs	r2, #0
 8016c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c20:	b25b      	sxtb	r3, r3
 8016c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c26:	d103      	bne.n	8016c30 <xQueueSemaphoreTake+0x148>
 8016c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016c30:	f001 ff42 	bl	8018ab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016c34:	463a      	mov	r2, r7
 8016c36:	f107 030c 	add.w	r3, r7, #12
 8016c3a:	4611      	mov	r1, r2
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f000 ff85 	bl	8017b4c <xTaskCheckForTimeOut>
 8016c42:	4603      	mov	r3, r0
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d132      	bne.n	8016cae <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016c48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c4a:	f000 f9ee 	bl	801702a <prvIsQueueEmpty>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d026      	beq.n	8016ca2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d109      	bne.n	8016c70 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8016c5c:	f001 fefe 	bl	8018a5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c62:	689b      	ldr	r3, [r3, #8]
 8016c64:	4618      	mov	r0, r3
 8016c66:	f001 f8cd 	bl	8017e04 <xTaskPriorityInherit>
 8016c6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016c6c:	f001 ff24 	bl	8018ab8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c72:	3324      	adds	r3, #36	; 0x24
 8016c74:	683a      	ldr	r2, [r7, #0]
 8016c76:	4611      	mov	r1, r2
 8016c78:	4618      	mov	r0, r3
 8016c7a:	f000 fea1 	bl	80179c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c80:	f000 f981 	bl	8016f86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016c84:	f000 fcca 	bl	801761c <xTaskResumeAll>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	f47f af69 	bne.w	8016b62 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8016c90:	4b18      	ldr	r3, [pc, #96]	; (8016cf4 <xQueueSemaphoreTake+0x20c>)
 8016c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c96:	601a      	str	r2, [r3, #0]
 8016c98:	f3bf 8f4f 	dsb	sy
 8016c9c:	f3bf 8f6f 	isb	sy
 8016ca0:	e75f      	b.n	8016b62 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016ca2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016ca4:	f000 f96f 	bl	8016f86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016ca8:	f000 fcb8 	bl	801761c <xTaskResumeAll>
 8016cac:	e759      	b.n	8016b62 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016cb0:	f000 f969 	bl	8016f86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016cb4:	f000 fcb2 	bl	801761c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016cb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016cba:	f000 f9b6 	bl	801702a <prvIsQueueEmpty>
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	f43f af4e 	beq.w	8016b62 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d00d      	beq.n	8016ce8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8016ccc:	f001 fec6 	bl	8018a5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016cd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016cd2:	f000 f8b0 	bl	8016e36 <prvGetDisinheritPriorityAfterTimeout>
 8016cd6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cda:	689b      	ldr	r3, [r3, #8]
 8016cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f001 f964 	bl	8017fac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016ce4:	f001 fee8 	bl	8018ab8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016ce8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016cea:	4618      	mov	r0, r3
 8016cec:	3738      	adds	r7, #56	; 0x38
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	bd80      	pop	{r7, pc}
 8016cf2:	bf00      	nop
 8016cf4:	e000ed04 	.word	0xe000ed04

08016cf8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b08e      	sub	sp, #56	; 0x38
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	60f8      	str	r0, [r7, #12]
 8016d00:	60b9      	str	r1, [r7, #8]
 8016d02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d109      	bne.n	8016d22 <xQueueReceiveFromISR+0x2a>
 8016d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d12:	f383 8811 	msr	BASEPRI, r3
 8016d16:	f3bf 8f6f 	isb	sy
 8016d1a:	f3bf 8f4f 	dsb	sy
 8016d1e:	623b      	str	r3, [r7, #32]
 8016d20:	e7fe      	b.n	8016d20 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d103      	bne.n	8016d30 <xQueueReceiveFromISR+0x38>
 8016d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d101      	bne.n	8016d34 <xQueueReceiveFromISR+0x3c>
 8016d30:	2301      	movs	r3, #1
 8016d32:	e000      	b.n	8016d36 <xQueueReceiveFromISR+0x3e>
 8016d34:	2300      	movs	r3, #0
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d109      	bne.n	8016d4e <xQueueReceiveFromISR+0x56>
 8016d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d3e:	f383 8811 	msr	BASEPRI, r3
 8016d42:	f3bf 8f6f 	isb	sy
 8016d46:	f3bf 8f4f 	dsb	sy
 8016d4a:	61fb      	str	r3, [r7, #28]
 8016d4c:	e7fe      	b.n	8016d4c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016d4e:	f001 ff61 	bl	8018c14 <vPortValidateInterruptPriority>
	__asm volatile
 8016d52:	f3ef 8211 	mrs	r2, BASEPRI
 8016d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d5a:	f383 8811 	msr	BASEPRI, r3
 8016d5e:	f3bf 8f6f 	isb	sy
 8016d62:	f3bf 8f4f 	dsb	sy
 8016d66:	61ba      	str	r2, [r7, #24]
 8016d68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016d6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d02f      	beq.n	8016dda <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016d84:	68b9      	ldr	r1, [r7, #8]
 8016d86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d88:	f000 f8d7 	bl	8016f3a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d8e:	1e5a      	subs	r2, r3, #1
 8016d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016d94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d9c:	d112      	bne.n	8016dc4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016da0:	691b      	ldr	r3, [r3, #16]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d016      	beq.n	8016dd4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016da8:	3310      	adds	r3, #16
 8016daa:	4618      	mov	r0, r3
 8016dac:	f000 fe56 	bl	8017a5c <xTaskRemoveFromEventList>
 8016db0:	4603      	mov	r3, r0
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d00e      	beq.n	8016dd4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d00b      	beq.n	8016dd4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	2201      	movs	r2, #1
 8016dc0:	601a      	str	r2, [r3, #0]
 8016dc2:	e007      	b.n	8016dd4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dc8:	3301      	adds	r3, #1
 8016dca:	b2db      	uxtb	r3, r3
 8016dcc:	b25a      	sxtb	r2, r3
 8016dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8016dd8:	e001      	b.n	8016dde <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8016dda:	2300      	movs	r3, #0
 8016ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8016dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016de0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016de2:	693b      	ldr	r3, [r7, #16]
 8016de4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	3738      	adds	r7, #56	; 0x38
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}

08016df2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016df2:	b580      	push	{r7, lr}
 8016df4:	b084      	sub	sp, #16
 8016df6:	af00      	add	r7, sp, #0
 8016df8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d109      	bne.n	8016e18 <vQueueDelete+0x26>
	__asm volatile
 8016e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e08:	f383 8811 	msr	BASEPRI, r3
 8016e0c:	f3bf 8f6f 	isb	sy
 8016e10:	f3bf 8f4f 	dsb	sy
 8016e14:	60bb      	str	r3, [r7, #8]
 8016e16:	e7fe      	b.n	8016e16 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016e18:	68f8      	ldr	r0, [r7, #12]
 8016e1a:	f000 f95d 	bl	80170d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d102      	bne.n	8016e2e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8016e28:	68f8      	ldr	r0, [r7, #12]
 8016e2a:	f001 fff3 	bl	8018e14 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016e2e:	bf00      	nop
 8016e30:	3710      	adds	r7, #16
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}

08016e36 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016e36:	b480      	push	{r7}
 8016e38:	b085      	sub	sp, #20
 8016e3a:	af00      	add	r7, sp, #0
 8016e3c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d006      	beq.n	8016e54 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016e50:	60fb      	str	r3, [r7, #12]
 8016e52:	e001      	b.n	8016e58 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016e54:	2300      	movs	r3, #0
 8016e56:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016e58:	68fb      	ldr	r3, [r7, #12]
	}
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	3714      	adds	r7, #20
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e64:	4770      	bx	lr

08016e66 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016e66:	b580      	push	{r7, lr}
 8016e68:	b086      	sub	sp, #24
 8016e6a:	af00      	add	r7, sp, #0
 8016e6c:	60f8      	str	r0, [r7, #12]
 8016e6e:	60b9      	str	r1, [r7, #8]
 8016e70:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016e72:	2300      	movs	r3, #0
 8016e74:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e7a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d10d      	bne.n	8016ea0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d14d      	bne.n	8016f28 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	689b      	ldr	r3, [r3, #8]
 8016e90:	4618      	mov	r0, r3
 8016e92:	f001 f81f 	bl	8017ed4 <xTaskPriorityDisinherit>
 8016e96:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	609a      	str	r2, [r3, #8]
 8016e9e:	e043      	b.n	8016f28 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d119      	bne.n	8016eda <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	6858      	ldr	r0, [r3, #4]
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016eae:	461a      	mov	r2, r3
 8016eb0:	68b9      	ldr	r1, [r7, #8]
 8016eb2:	f003 f9cd 	bl	801a250 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	685a      	ldr	r2, [r3, #4]
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ebe:	441a      	add	r2, r3
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	685a      	ldr	r2, [r3, #4]
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	689b      	ldr	r3, [r3, #8]
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d32b      	bcc.n	8016f28 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	681a      	ldr	r2, [r3, #0]
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	605a      	str	r2, [r3, #4]
 8016ed8:	e026      	b.n	8016f28 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	68d8      	ldr	r0, [r3, #12]
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ee2:	461a      	mov	r2, r3
 8016ee4:	68b9      	ldr	r1, [r7, #8]
 8016ee6:	f003 f9b3 	bl	801a250 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	68da      	ldr	r2, [r3, #12]
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ef2:	425b      	negs	r3, r3
 8016ef4:	441a      	add	r2, r3
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	68da      	ldr	r2, [r3, #12]
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	429a      	cmp	r2, r3
 8016f04:	d207      	bcs.n	8016f16 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	689a      	ldr	r2, [r3, #8]
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f0e:	425b      	negs	r3, r3
 8016f10:	441a      	add	r2, r3
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	2b02      	cmp	r3, #2
 8016f1a:	d105      	bne.n	8016f28 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016f1c:	693b      	ldr	r3, [r7, #16]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d002      	beq.n	8016f28 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016f22:	693b      	ldr	r3, [r7, #16]
 8016f24:	3b01      	subs	r3, #1
 8016f26:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016f28:	693b      	ldr	r3, [r7, #16]
 8016f2a:	1c5a      	adds	r2, r3, #1
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016f30:	697b      	ldr	r3, [r7, #20]
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3718      	adds	r7, #24
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}

08016f3a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016f3a:	b580      	push	{r7, lr}
 8016f3c:	b082      	sub	sp, #8
 8016f3e:	af00      	add	r7, sp, #0
 8016f40:	6078      	str	r0, [r7, #4]
 8016f42:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d018      	beq.n	8016f7e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	68da      	ldr	r2, [r3, #12]
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f54:	441a      	add	r2, r3
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	68da      	ldr	r2, [r3, #12]
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	689b      	ldr	r3, [r3, #8]
 8016f62:	429a      	cmp	r2, r3
 8016f64:	d303      	bcc.n	8016f6e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	681a      	ldr	r2, [r3, #0]
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	68d9      	ldr	r1, [r3, #12]
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f76:	461a      	mov	r2, r3
 8016f78:	6838      	ldr	r0, [r7, #0]
 8016f7a:	f003 f969 	bl	801a250 <memcpy>
	}
}
 8016f7e:	bf00      	nop
 8016f80:	3708      	adds	r7, #8
 8016f82:	46bd      	mov	sp, r7
 8016f84:	bd80      	pop	{r7, pc}

08016f86 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016f86:	b580      	push	{r7, lr}
 8016f88:	b084      	sub	sp, #16
 8016f8a:	af00      	add	r7, sp, #0
 8016f8c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016f8e:	f001 fd65 	bl	8018a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f98:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016f9a:	e011      	b.n	8016fc0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d012      	beq.n	8016fca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	3324      	adds	r3, #36	; 0x24
 8016fa8:	4618      	mov	r0, r3
 8016faa:	f000 fd57 	bl	8017a5c <xTaskRemoveFromEventList>
 8016fae:	4603      	mov	r3, r0
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d001      	beq.n	8016fb8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016fb4:	f000 fe2a 	bl	8017c0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016fb8:	7bfb      	ldrb	r3, [r7, #15]
 8016fba:	3b01      	subs	r3, #1
 8016fbc:	b2db      	uxtb	r3, r3
 8016fbe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	dce9      	bgt.n	8016f9c <prvUnlockQueue+0x16>
 8016fc8:	e000      	b.n	8016fcc <prvUnlockQueue+0x46>
					break;
 8016fca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	22ff      	movs	r2, #255	; 0xff
 8016fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016fd4:	f001 fd70 	bl	8018ab8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016fd8:	f001 fd40 	bl	8018a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016fe2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016fe4:	e011      	b.n	801700a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	691b      	ldr	r3, [r3, #16]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d012      	beq.n	8017014 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	3310      	adds	r3, #16
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f000 fd32 	bl	8017a5c <xTaskRemoveFromEventList>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d001      	beq.n	8017002 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016ffe:	f000 fe05 	bl	8017c0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017002:	7bbb      	ldrb	r3, [r7, #14]
 8017004:	3b01      	subs	r3, #1
 8017006:	b2db      	uxtb	r3, r3
 8017008:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801700a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801700e:	2b00      	cmp	r3, #0
 8017010:	dce9      	bgt.n	8016fe6 <prvUnlockQueue+0x60>
 8017012:	e000      	b.n	8017016 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017014:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	22ff      	movs	r2, #255	; 0xff
 801701a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801701e:	f001 fd4b 	bl	8018ab8 <vPortExitCritical>
}
 8017022:	bf00      	nop
 8017024:	3710      	adds	r7, #16
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}

0801702a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801702a:	b580      	push	{r7, lr}
 801702c:	b084      	sub	sp, #16
 801702e:	af00      	add	r7, sp, #0
 8017030:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017032:	f001 fd13 	bl	8018a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801703a:	2b00      	cmp	r3, #0
 801703c:	d102      	bne.n	8017044 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801703e:	2301      	movs	r3, #1
 8017040:	60fb      	str	r3, [r7, #12]
 8017042:	e001      	b.n	8017048 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017044:	2300      	movs	r3, #0
 8017046:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017048:	f001 fd36 	bl	8018ab8 <vPortExitCritical>

	return xReturn;
 801704c:	68fb      	ldr	r3, [r7, #12]
}
 801704e:	4618      	mov	r0, r3
 8017050:	3710      	adds	r7, #16
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}

08017056 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017056:	b580      	push	{r7, lr}
 8017058:	b084      	sub	sp, #16
 801705a:	af00      	add	r7, sp, #0
 801705c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801705e:	f001 fcfd 	bl	8018a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801706a:	429a      	cmp	r2, r3
 801706c:	d102      	bne.n	8017074 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801706e:	2301      	movs	r3, #1
 8017070:	60fb      	str	r3, [r7, #12]
 8017072:	e001      	b.n	8017078 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017074:	2300      	movs	r3, #0
 8017076:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017078:	f001 fd1e 	bl	8018ab8 <vPortExitCritical>

	return xReturn;
 801707c:	68fb      	ldr	r3, [r7, #12]
}
 801707e:	4618      	mov	r0, r3
 8017080:	3710      	adds	r7, #16
 8017082:	46bd      	mov	sp, r7
 8017084:	bd80      	pop	{r7, pc}
	...

08017088 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017088:	b480      	push	{r7}
 801708a:	b085      	sub	sp, #20
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
 8017090:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017092:	2300      	movs	r3, #0
 8017094:	60fb      	str	r3, [r7, #12]
 8017096:	e014      	b.n	80170c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017098:	4a0e      	ldr	r2, [pc, #56]	; (80170d4 <vQueueAddToRegistry+0x4c>)
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d10b      	bne.n	80170bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80170a4:	490b      	ldr	r1, [pc, #44]	; (80170d4 <vQueueAddToRegistry+0x4c>)
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	683a      	ldr	r2, [r7, #0]
 80170aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80170ae:	4a09      	ldr	r2, [pc, #36]	; (80170d4 <vQueueAddToRegistry+0x4c>)
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	00db      	lsls	r3, r3, #3
 80170b4:	4413      	add	r3, r2
 80170b6:	687a      	ldr	r2, [r7, #4]
 80170b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80170ba:	e005      	b.n	80170c8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	3301      	adds	r3, #1
 80170c0:	60fb      	str	r3, [r7, #12]
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	2b07      	cmp	r3, #7
 80170c6:	d9e7      	bls.n	8017098 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80170c8:	bf00      	nop
 80170ca:	3714      	adds	r7, #20
 80170cc:	46bd      	mov	sp, r7
 80170ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d2:	4770      	bx	lr
 80170d4:	20009a5c 	.word	0x20009a5c

080170d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80170d8:	b480      	push	{r7}
 80170da:	b085      	sub	sp, #20
 80170dc:	af00      	add	r7, sp, #0
 80170de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80170e0:	2300      	movs	r3, #0
 80170e2:	60fb      	str	r3, [r7, #12]
 80170e4:	e016      	b.n	8017114 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80170e6:	4a10      	ldr	r2, [pc, #64]	; (8017128 <vQueueUnregisterQueue+0x50>)
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	00db      	lsls	r3, r3, #3
 80170ec:	4413      	add	r3, r2
 80170ee:	685b      	ldr	r3, [r3, #4]
 80170f0:	687a      	ldr	r2, [r7, #4]
 80170f2:	429a      	cmp	r2, r3
 80170f4:	d10b      	bne.n	801710e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80170f6:	4a0c      	ldr	r2, [pc, #48]	; (8017128 <vQueueUnregisterQueue+0x50>)
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	2100      	movs	r1, #0
 80170fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017100:	4a09      	ldr	r2, [pc, #36]	; (8017128 <vQueueUnregisterQueue+0x50>)
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	00db      	lsls	r3, r3, #3
 8017106:	4413      	add	r3, r2
 8017108:	2200      	movs	r2, #0
 801710a:	605a      	str	r2, [r3, #4]
				break;
 801710c:	e005      	b.n	801711a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	3301      	adds	r3, #1
 8017112:	60fb      	str	r3, [r7, #12]
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	2b07      	cmp	r3, #7
 8017118:	d9e5      	bls.n	80170e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801711a:	bf00      	nop
 801711c:	3714      	adds	r7, #20
 801711e:	46bd      	mov	sp, r7
 8017120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017124:	4770      	bx	lr
 8017126:	bf00      	nop
 8017128:	20009a5c 	.word	0x20009a5c

0801712c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801712c:	b580      	push	{r7, lr}
 801712e:	b086      	sub	sp, #24
 8017130:	af00      	add	r7, sp, #0
 8017132:	60f8      	str	r0, [r7, #12]
 8017134:	60b9      	str	r1, [r7, #8]
 8017136:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801713c:	f001 fc8e 	bl	8018a5c <vPortEnterCritical>
 8017140:	697b      	ldr	r3, [r7, #20]
 8017142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017146:	b25b      	sxtb	r3, r3
 8017148:	f1b3 3fff 	cmp.w	r3, #4294967295
 801714c:	d103      	bne.n	8017156 <vQueueWaitForMessageRestricted+0x2a>
 801714e:	697b      	ldr	r3, [r7, #20]
 8017150:	2200      	movs	r2, #0
 8017152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017156:	697b      	ldr	r3, [r7, #20]
 8017158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801715c:	b25b      	sxtb	r3, r3
 801715e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017162:	d103      	bne.n	801716c <vQueueWaitForMessageRestricted+0x40>
 8017164:	697b      	ldr	r3, [r7, #20]
 8017166:	2200      	movs	r2, #0
 8017168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801716c:	f001 fca4 	bl	8018ab8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017170:	697b      	ldr	r3, [r7, #20]
 8017172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017174:	2b00      	cmp	r3, #0
 8017176:	d106      	bne.n	8017186 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017178:	697b      	ldr	r3, [r7, #20]
 801717a:	3324      	adds	r3, #36	; 0x24
 801717c:	687a      	ldr	r2, [r7, #4]
 801717e:	68b9      	ldr	r1, [r7, #8]
 8017180:	4618      	mov	r0, r3
 8017182:	f000 fc41 	bl	8017a08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017186:	6978      	ldr	r0, [r7, #20]
 8017188:	f7ff fefd 	bl	8016f86 <prvUnlockQueue>
	}
 801718c:	bf00      	nop
 801718e:	3718      	adds	r7, #24
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}

08017194 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017194:	b580      	push	{r7, lr}
 8017196:	b08e      	sub	sp, #56	; 0x38
 8017198:	af04      	add	r7, sp, #16
 801719a:	60f8      	str	r0, [r7, #12]
 801719c:	60b9      	str	r1, [r7, #8]
 801719e:	607a      	str	r2, [r7, #4]
 80171a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80171a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d109      	bne.n	80171bc <xTaskCreateStatic+0x28>
 80171a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171ac:	f383 8811 	msr	BASEPRI, r3
 80171b0:	f3bf 8f6f 	isb	sy
 80171b4:	f3bf 8f4f 	dsb	sy
 80171b8:	623b      	str	r3, [r7, #32]
 80171ba:	e7fe      	b.n	80171ba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80171bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d109      	bne.n	80171d6 <xTaskCreateStatic+0x42>
 80171c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171c6:	f383 8811 	msr	BASEPRI, r3
 80171ca:	f3bf 8f6f 	isb	sy
 80171ce:	f3bf 8f4f 	dsb	sy
 80171d2:	61fb      	str	r3, [r7, #28]
 80171d4:	e7fe      	b.n	80171d4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80171d6:	235c      	movs	r3, #92	; 0x5c
 80171d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80171da:	693b      	ldr	r3, [r7, #16]
 80171dc:	2b5c      	cmp	r3, #92	; 0x5c
 80171de:	d009      	beq.n	80171f4 <xTaskCreateStatic+0x60>
 80171e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171e4:	f383 8811 	msr	BASEPRI, r3
 80171e8:	f3bf 8f6f 	isb	sy
 80171ec:	f3bf 8f4f 	dsb	sy
 80171f0:	61bb      	str	r3, [r7, #24]
 80171f2:	e7fe      	b.n	80171f2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80171f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80171f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d01e      	beq.n	801723a <xTaskCreateStatic+0xa6>
 80171fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d01b      	beq.n	801723a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017204:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801720a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801720e:	2202      	movs	r2, #2
 8017210:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017214:	2300      	movs	r3, #0
 8017216:	9303      	str	r3, [sp, #12]
 8017218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801721a:	9302      	str	r3, [sp, #8]
 801721c:	f107 0314 	add.w	r3, r7, #20
 8017220:	9301      	str	r3, [sp, #4]
 8017222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017224:	9300      	str	r3, [sp, #0]
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	687a      	ldr	r2, [r7, #4]
 801722a:	68b9      	ldr	r1, [r7, #8]
 801722c:	68f8      	ldr	r0, [r7, #12]
 801722e:	f000 f850 	bl	80172d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017234:	f000 f8dc 	bl	80173f0 <prvAddNewTaskToReadyList>
 8017238:	e001      	b.n	801723e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801723a:	2300      	movs	r3, #0
 801723c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801723e:	697b      	ldr	r3, [r7, #20]
	}
 8017240:	4618      	mov	r0, r3
 8017242:	3728      	adds	r7, #40	; 0x28
 8017244:	46bd      	mov	sp, r7
 8017246:	bd80      	pop	{r7, pc}

08017248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017248:	b580      	push	{r7, lr}
 801724a:	b08c      	sub	sp, #48	; 0x30
 801724c:	af04      	add	r7, sp, #16
 801724e:	60f8      	str	r0, [r7, #12]
 8017250:	60b9      	str	r1, [r7, #8]
 8017252:	603b      	str	r3, [r7, #0]
 8017254:	4613      	mov	r3, r2
 8017256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017258:	88fb      	ldrh	r3, [r7, #6]
 801725a:	009b      	lsls	r3, r3, #2
 801725c:	4618      	mov	r0, r3
 801725e:	f001 fd17 	bl	8018c90 <pvPortMalloc>
 8017262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017264:	697b      	ldr	r3, [r7, #20]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d00e      	beq.n	8017288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801726a:	205c      	movs	r0, #92	; 0x5c
 801726c:	f001 fd10 	bl	8018c90 <pvPortMalloc>
 8017270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017272:	69fb      	ldr	r3, [r7, #28]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d003      	beq.n	8017280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017278:	69fb      	ldr	r3, [r7, #28]
 801727a:	697a      	ldr	r2, [r7, #20]
 801727c:	631a      	str	r2, [r3, #48]	; 0x30
 801727e:	e005      	b.n	801728c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017280:	6978      	ldr	r0, [r7, #20]
 8017282:	f001 fdc7 	bl	8018e14 <vPortFree>
 8017286:	e001      	b.n	801728c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017288:	2300      	movs	r3, #0
 801728a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801728c:	69fb      	ldr	r3, [r7, #28]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d017      	beq.n	80172c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017292:	69fb      	ldr	r3, [r7, #28]
 8017294:	2200      	movs	r2, #0
 8017296:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801729a:	88fa      	ldrh	r2, [r7, #6]
 801729c:	2300      	movs	r3, #0
 801729e:	9303      	str	r3, [sp, #12]
 80172a0:	69fb      	ldr	r3, [r7, #28]
 80172a2:	9302      	str	r3, [sp, #8]
 80172a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a6:	9301      	str	r3, [sp, #4]
 80172a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172aa:	9300      	str	r3, [sp, #0]
 80172ac:	683b      	ldr	r3, [r7, #0]
 80172ae:	68b9      	ldr	r1, [r7, #8]
 80172b0:	68f8      	ldr	r0, [r7, #12]
 80172b2:	f000 f80e 	bl	80172d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80172b6:	69f8      	ldr	r0, [r7, #28]
 80172b8:	f000 f89a 	bl	80173f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80172bc:	2301      	movs	r3, #1
 80172be:	61bb      	str	r3, [r7, #24]
 80172c0:	e002      	b.n	80172c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80172c2:	f04f 33ff 	mov.w	r3, #4294967295
 80172c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80172c8:	69bb      	ldr	r3, [r7, #24]
	}
 80172ca:	4618      	mov	r0, r3
 80172cc:	3720      	adds	r7, #32
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}

080172d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80172d2:	b580      	push	{r7, lr}
 80172d4:	b088      	sub	sp, #32
 80172d6:	af00      	add	r7, sp, #0
 80172d8:	60f8      	str	r0, [r7, #12]
 80172da:	60b9      	str	r1, [r7, #8]
 80172dc:	607a      	str	r2, [r7, #4]
 80172de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80172e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	009b      	lsls	r3, r3, #2
 80172e8:	461a      	mov	r2, r3
 80172ea:	21a5      	movs	r1, #165	; 0xa5
 80172ec:	f002 ffbb 	bl	801a266 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80172f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80172fa:	3b01      	subs	r3, #1
 80172fc:	009b      	lsls	r3, r3, #2
 80172fe:	4413      	add	r3, r2
 8017300:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017302:	69bb      	ldr	r3, [r7, #24]
 8017304:	f023 0307 	bic.w	r3, r3, #7
 8017308:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801730a:	69bb      	ldr	r3, [r7, #24]
 801730c:	f003 0307 	and.w	r3, r3, #7
 8017310:	2b00      	cmp	r3, #0
 8017312:	d009      	beq.n	8017328 <prvInitialiseNewTask+0x56>
 8017314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017318:	f383 8811 	msr	BASEPRI, r3
 801731c:	f3bf 8f6f 	isb	sy
 8017320:	f3bf 8f4f 	dsb	sy
 8017324:	617b      	str	r3, [r7, #20]
 8017326:	e7fe      	b.n	8017326 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017328:	68bb      	ldr	r3, [r7, #8]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d01f      	beq.n	801736e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801732e:	2300      	movs	r3, #0
 8017330:	61fb      	str	r3, [r7, #28]
 8017332:	e012      	b.n	801735a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017334:	68ba      	ldr	r2, [r7, #8]
 8017336:	69fb      	ldr	r3, [r7, #28]
 8017338:	4413      	add	r3, r2
 801733a:	7819      	ldrb	r1, [r3, #0]
 801733c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801733e:	69fb      	ldr	r3, [r7, #28]
 8017340:	4413      	add	r3, r2
 8017342:	3334      	adds	r3, #52	; 0x34
 8017344:	460a      	mov	r2, r1
 8017346:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017348:	68ba      	ldr	r2, [r7, #8]
 801734a:	69fb      	ldr	r3, [r7, #28]
 801734c:	4413      	add	r3, r2
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d006      	beq.n	8017362 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017354:	69fb      	ldr	r3, [r7, #28]
 8017356:	3301      	adds	r3, #1
 8017358:	61fb      	str	r3, [r7, #28]
 801735a:	69fb      	ldr	r3, [r7, #28]
 801735c:	2b0f      	cmp	r3, #15
 801735e:	d9e9      	bls.n	8017334 <prvInitialiseNewTask+0x62>
 8017360:	e000      	b.n	8017364 <prvInitialiseNewTask+0x92>
			{
				break;
 8017362:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017366:	2200      	movs	r2, #0
 8017368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801736c:	e003      	b.n	8017376 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017370:	2200      	movs	r2, #0
 8017372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017378:	2b37      	cmp	r3, #55	; 0x37
 801737a:	d901      	bls.n	8017380 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801737c:	2337      	movs	r3, #55	; 0x37
 801737e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017384:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801738a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801738e:	2200      	movs	r2, #0
 8017390:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017394:	3304      	adds	r3, #4
 8017396:	4618      	mov	r0, r3
 8017398:	f7fe fe7a 	bl	8016090 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801739e:	3318      	adds	r3, #24
 80173a0:	4618      	mov	r0, r3
 80173a2:	f7fe fe75 	bl	8016090 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80173a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80173ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80173b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80173b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80173bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173be:	2200      	movs	r2, #0
 80173c0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80173c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173c4:	2200      	movs	r2, #0
 80173c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80173ca:	683a      	ldr	r2, [r7, #0]
 80173cc:	68f9      	ldr	r1, [r7, #12]
 80173ce:	69b8      	ldr	r0, [r7, #24]
 80173d0:	f001 fa1a 	bl	8018808 <pxPortInitialiseStack>
 80173d4:	4602      	mov	r2, r0
 80173d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80173da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d002      	beq.n	80173e6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80173e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80173e6:	bf00      	nop
 80173e8:	3720      	adds	r7, #32
 80173ea:	46bd      	mov	sp, r7
 80173ec:	bd80      	pop	{r7, pc}
	...

080173f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b082      	sub	sp, #8
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80173f8:	f001 fb30 	bl	8018a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80173fc:	4b2d      	ldr	r3, [pc, #180]	; (80174b4 <prvAddNewTaskToReadyList+0xc4>)
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	3301      	adds	r3, #1
 8017402:	4a2c      	ldr	r2, [pc, #176]	; (80174b4 <prvAddNewTaskToReadyList+0xc4>)
 8017404:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017406:	4b2c      	ldr	r3, [pc, #176]	; (80174b8 <prvAddNewTaskToReadyList+0xc8>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d109      	bne.n	8017422 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801740e:	4a2a      	ldr	r2, [pc, #168]	; (80174b8 <prvAddNewTaskToReadyList+0xc8>)
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017414:	4b27      	ldr	r3, [pc, #156]	; (80174b4 <prvAddNewTaskToReadyList+0xc4>)
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	2b01      	cmp	r3, #1
 801741a:	d110      	bne.n	801743e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801741c:	f000 fc1a 	bl	8017c54 <prvInitialiseTaskLists>
 8017420:	e00d      	b.n	801743e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017422:	4b26      	ldr	r3, [pc, #152]	; (80174bc <prvAddNewTaskToReadyList+0xcc>)
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d109      	bne.n	801743e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801742a:	4b23      	ldr	r3, [pc, #140]	; (80174b8 <prvAddNewTaskToReadyList+0xc8>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017434:	429a      	cmp	r2, r3
 8017436:	d802      	bhi.n	801743e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017438:	4a1f      	ldr	r2, [pc, #124]	; (80174b8 <prvAddNewTaskToReadyList+0xc8>)
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801743e:	4b20      	ldr	r3, [pc, #128]	; (80174c0 <prvAddNewTaskToReadyList+0xd0>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	3301      	adds	r3, #1
 8017444:	4a1e      	ldr	r2, [pc, #120]	; (80174c0 <prvAddNewTaskToReadyList+0xd0>)
 8017446:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017448:	4b1d      	ldr	r3, [pc, #116]	; (80174c0 <prvAddNewTaskToReadyList+0xd0>)
 801744a:	681a      	ldr	r2, [r3, #0]
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017454:	4b1b      	ldr	r3, [pc, #108]	; (80174c4 <prvAddNewTaskToReadyList+0xd4>)
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	429a      	cmp	r2, r3
 801745a:	d903      	bls.n	8017464 <prvAddNewTaskToReadyList+0x74>
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017460:	4a18      	ldr	r2, [pc, #96]	; (80174c4 <prvAddNewTaskToReadyList+0xd4>)
 8017462:	6013      	str	r3, [r2, #0]
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017468:	4613      	mov	r3, r2
 801746a:	009b      	lsls	r3, r3, #2
 801746c:	4413      	add	r3, r2
 801746e:	009b      	lsls	r3, r3, #2
 8017470:	4a15      	ldr	r2, [pc, #84]	; (80174c8 <prvAddNewTaskToReadyList+0xd8>)
 8017472:	441a      	add	r2, r3
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	3304      	adds	r3, #4
 8017478:	4619      	mov	r1, r3
 801747a:	4610      	mov	r0, r2
 801747c:	f7fe fe15 	bl	80160aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017480:	f001 fb1a 	bl	8018ab8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017484:	4b0d      	ldr	r3, [pc, #52]	; (80174bc <prvAddNewTaskToReadyList+0xcc>)
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d00e      	beq.n	80174aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801748c:	4b0a      	ldr	r3, [pc, #40]	; (80174b8 <prvAddNewTaskToReadyList+0xc8>)
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017496:	429a      	cmp	r2, r3
 8017498:	d207      	bcs.n	80174aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801749a:	4b0c      	ldr	r3, [pc, #48]	; (80174cc <prvAddNewTaskToReadyList+0xdc>)
 801749c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174a0:	601a      	str	r2, [r3, #0]
 80174a2:	f3bf 8f4f 	dsb	sy
 80174a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80174aa:	bf00      	nop
 80174ac:	3708      	adds	r7, #8
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}
 80174b2:	bf00      	nop
 80174b4:	20001558 	.word	0x20001558
 80174b8:	20001084 	.word	0x20001084
 80174bc:	20001564 	.word	0x20001564
 80174c0:	20001574 	.word	0x20001574
 80174c4:	20001560 	.word	0x20001560
 80174c8:	20001088 	.word	0x20001088
 80174cc:	e000ed04 	.word	0xe000ed04

080174d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b084      	sub	sp, #16
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80174d8:	2300      	movs	r3, #0
 80174da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d016      	beq.n	8017510 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80174e2:	4b13      	ldr	r3, [pc, #76]	; (8017530 <vTaskDelay+0x60>)
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d009      	beq.n	80174fe <vTaskDelay+0x2e>
 80174ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174ee:	f383 8811 	msr	BASEPRI, r3
 80174f2:	f3bf 8f6f 	isb	sy
 80174f6:	f3bf 8f4f 	dsb	sy
 80174fa:	60bb      	str	r3, [r7, #8]
 80174fc:	e7fe      	b.n	80174fc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80174fe:	f000 f87f 	bl	8017600 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017502:	2100      	movs	r1, #0
 8017504:	6878      	ldr	r0, [r7, #4]
 8017506:	f000 fde5 	bl	80180d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801750a:	f000 f887 	bl	801761c <xTaskResumeAll>
 801750e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d107      	bne.n	8017526 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8017516:	4b07      	ldr	r3, [pc, #28]	; (8017534 <vTaskDelay+0x64>)
 8017518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801751c:	601a      	str	r2, [r3, #0]
 801751e:	f3bf 8f4f 	dsb	sy
 8017522:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017526:	bf00      	nop
 8017528:	3710      	adds	r7, #16
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}
 801752e:	bf00      	nop
 8017530:	20001580 	.word	0x20001580
 8017534:	e000ed04 	.word	0xe000ed04

08017538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b08a      	sub	sp, #40	; 0x28
 801753c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801753e:	2300      	movs	r3, #0
 8017540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017542:	2300      	movs	r3, #0
 8017544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017546:	463a      	mov	r2, r7
 8017548:	1d39      	adds	r1, r7, #4
 801754a:	f107 0308 	add.w	r3, r7, #8
 801754e:	4618      	mov	r0, r3
 8017550:	f7fe fd4a 	bl	8015fe8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017554:	6839      	ldr	r1, [r7, #0]
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	68ba      	ldr	r2, [r7, #8]
 801755a:	9202      	str	r2, [sp, #8]
 801755c:	9301      	str	r3, [sp, #4]
 801755e:	2300      	movs	r3, #0
 8017560:	9300      	str	r3, [sp, #0]
 8017562:	2300      	movs	r3, #0
 8017564:	460a      	mov	r2, r1
 8017566:	4920      	ldr	r1, [pc, #128]	; (80175e8 <vTaskStartScheduler+0xb0>)
 8017568:	4820      	ldr	r0, [pc, #128]	; (80175ec <vTaskStartScheduler+0xb4>)
 801756a:	f7ff fe13 	bl	8017194 <xTaskCreateStatic>
 801756e:	4602      	mov	r2, r0
 8017570:	4b1f      	ldr	r3, [pc, #124]	; (80175f0 <vTaskStartScheduler+0xb8>)
 8017572:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017574:	4b1e      	ldr	r3, [pc, #120]	; (80175f0 <vTaskStartScheduler+0xb8>)
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d002      	beq.n	8017582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801757c:	2301      	movs	r3, #1
 801757e:	617b      	str	r3, [r7, #20]
 8017580:	e001      	b.n	8017586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017582:	2300      	movs	r3, #0
 8017584:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017586:	697b      	ldr	r3, [r7, #20]
 8017588:	2b01      	cmp	r3, #1
 801758a:	d102      	bne.n	8017592 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801758c:	f000 fdf6 	bl	801817c <xTimerCreateTimerTask>
 8017590:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017592:	697b      	ldr	r3, [r7, #20]
 8017594:	2b01      	cmp	r3, #1
 8017596:	d115      	bne.n	80175c4 <vTaskStartScheduler+0x8c>
 8017598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801759c:	f383 8811 	msr	BASEPRI, r3
 80175a0:	f3bf 8f6f 	isb	sy
 80175a4:	f3bf 8f4f 	dsb	sy
 80175a8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80175aa:	4b12      	ldr	r3, [pc, #72]	; (80175f4 <vTaskStartScheduler+0xbc>)
 80175ac:	f04f 32ff 	mov.w	r2, #4294967295
 80175b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80175b2:	4b11      	ldr	r3, [pc, #68]	; (80175f8 <vTaskStartScheduler+0xc0>)
 80175b4:	2201      	movs	r2, #1
 80175b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80175b8:	4b10      	ldr	r3, [pc, #64]	; (80175fc <vTaskStartScheduler+0xc4>)
 80175ba:	2200      	movs	r2, #0
 80175bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80175be:	f001 f9af 	bl	8018920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80175c2:	e00d      	b.n	80175e0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80175c4:	697b      	ldr	r3, [r7, #20]
 80175c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175ca:	d109      	bne.n	80175e0 <vTaskStartScheduler+0xa8>
 80175cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175d0:	f383 8811 	msr	BASEPRI, r3
 80175d4:	f3bf 8f6f 	isb	sy
 80175d8:	f3bf 8f4f 	dsb	sy
 80175dc:	60fb      	str	r3, [r7, #12]
 80175de:	e7fe      	b.n	80175de <vTaskStartScheduler+0xa6>
}
 80175e0:	bf00      	nop
 80175e2:	3718      	adds	r7, #24
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}
 80175e8:	0801ea78 	.word	0x0801ea78
 80175ec:	08017c25 	.word	0x08017c25
 80175f0:	2000157c 	.word	0x2000157c
 80175f4:	20001578 	.word	0x20001578
 80175f8:	20001564 	.word	0x20001564
 80175fc:	2000155c 	.word	0x2000155c

08017600 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017600:	b480      	push	{r7}
 8017602:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8017604:	4b04      	ldr	r3, [pc, #16]	; (8017618 <vTaskSuspendAll+0x18>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	3301      	adds	r3, #1
 801760a:	4a03      	ldr	r2, [pc, #12]	; (8017618 <vTaskSuspendAll+0x18>)
 801760c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801760e:	bf00      	nop
 8017610:	46bd      	mov	sp, r7
 8017612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017616:	4770      	bx	lr
 8017618:	20001580 	.word	0x20001580

0801761c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b084      	sub	sp, #16
 8017620:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017622:	2300      	movs	r3, #0
 8017624:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017626:	2300      	movs	r3, #0
 8017628:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801762a:	4b41      	ldr	r3, [pc, #260]	; (8017730 <xTaskResumeAll+0x114>)
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d109      	bne.n	8017646 <xTaskResumeAll+0x2a>
 8017632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017636:	f383 8811 	msr	BASEPRI, r3
 801763a:	f3bf 8f6f 	isb	sy
 801763e:	f3bf 8f4f 	dsb	sy
 8017642:	603b      	str	r3, [r7, #0]
 8017644:	e7fe      	b.n	8017644 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017646:	f001 fa09 	bl	8018a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801764a:	4b39      	ldr	r3, [pc, #228]	; (8017730 <xTaskResumeAll+0x114>)
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	3b01      	subs	r3, #1
 8017650:	4a37      	ldr	r2, [pc, #220]	; (8017730 <xTaskResumeAll+0x114>)
 8017652:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017654:	4b36      	ldr	r3, [pc, #216]	; (8017730 <xTaskResumeAll+0x114>)
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d162      	bne.n	8017722 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801765c:	4b35      	ldr	r3, [pc, #212]	; (8017734 <xTaskResumeAll+0x118>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d05e      	beq.n	8017722 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017664:	e02f      	b.n	80176c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017666:	4b34      	ldr	r3, [pc, #208]	; (8017738 <xTaskResumeAll+0x11c>)
 8017668:	68db      	ldr	r3, [r3, #12]
 801766a:	68db      	ldr	r3, [r3, #12]
 801766c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	3318      	adds	r3, #24
 8017672:	4618      	mov	r0, r3
 8017674:	f7fe fd76 	bl	8016164 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	3304      	adds	r3, #4
 801767c:	4618      	mov	r0, r3
 801767e:	f7fe fd71 	bl	8016164 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017686:	4b2d      	ldr	r3, [pc, #180]	; (801773c <xTaskResumeAll+0x120>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	429a      	cmp	r2, r3
 801768c:	d903      	bls.n	8017696 <xTaskResumeAll+0x7a>
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017692:	4a2a      	ldr	r2, [pc, #168]	; (801773c <xTaskResumeAll+0x120>)
 8017694:	6013      	str	r3, [r2, #0]
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801769a:	4613      	mov	r3, r2
 801769c:	009b      	lsls	r3, r3, #2
 801769e:	4413      	add	r3, r2
 80176a0:	009b      	lsls	r3, r3, #2
 80176a2:	4a27      	ldr	r2, [pc, #156]	; (8017740 <xTaskResumeAll+0x124>)
 80176a4:	441a      	add	r2, r3
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	3304      	adds	r3, #4
 80176aa:	4619      	mov	r1, r3
 80176ac:	4610      	mov	r0, r2
 80176ae:	f7fe fcfc 	bl	80160aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176b6:	4b23      	ldr	r3, [pc, #140]	; (8017744 <xTaskResumeAll+0x128>)
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176bc:	429a      	cmp	r2, r3
 80176be:	d302      	bcc.n	80176c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80176c0:	4b21      	ldr	r3, [pc, #132]	; (8017748 <xTaskResumeAll+0x12c>)
 80176c2:	2201      	movs	r2, #1
 80176c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80176c6:	4b1c      	ldr	r3, [pc, #112]	; (8017738 <xTaskResumeAll+0x11c>)
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d1cb      	bne.n	8017666 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d001      	beq.n	80176d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80176d4:	f000 fb58 	bl	8017d88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80176d8:	4b1c      	ldr	r3, [pc, #112]	; (801774c <xTaskResumeAll+0x130>)
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d010      	beq.n	8017706 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80176e4:	f000 f858 	bl	8017798 <xTaskIncrementTick>
 80176e8:	4603      	mov	r3, r0
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d002      	beq.n	80176f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80176ee:	4b16      	ldr	r3, [pc, #88]	; (8017748 <xTaskResumeAll+0x12c>)
 80176f0:	2201      	movs	r2, #1
 80176f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	3b01      	subs	r3, #1
 80176f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d1f1      	bne.n	80176e4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8017700:	4b12      	ldr	r3, [pc, #72]	; (801774c <xTaskResumeAll+0x130>)
 8017702:	2200      	movs	r2, #0
 8017704:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017706:	4b10      	ldr	r3, [pc, #64]	; (8017748 <xTaskResumeAll+0x12c>)
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d009      	beq.n	8017722 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801770e:	2301      	movs	r3, #1
 8017710:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017712:	4b0f      	ldr	r3, [pc, #60]	; (8017750 <xTaskResumeAll+0x134>)
 8017714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017718:	601a      	str	r2, [r3, #0]
 801771a:	f3bf 8f4f 	dsb	sy
 801771e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017722:	f001 f9c9 	bl	8018ab8 <vPortExitCritical>

	return xAlreadyYielded;
 8017726:	68bb      	ldr	r3, [r7, #8]
}
 8017728:	4618      	mov	r0, r3
 801772a:	3710      	adds	r7, #16
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}
 8017730:	20001580 	.word	0x20001580
 8017734:	20001558 	.word	0x20001558
 8017738:	20001518 	.word	0x20001518
 801773c:	20001560 	.word	0x20001560
 8017740:	20001088 	.word	0x20001088
 8017744:	20001084 	.word	0x20001084
 8017748:	2000156c 	.word	0x2000156c
 801774c:	20001568 	.word	0x20001568
 8017750:	e000ed04 	.word	0xe000ed04

08017754 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017754:	b480      	push	{r7}
 8017756:	b083      	sub	sp, #12
 8017758:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801775a:	4b05      	ldr	r3, [pc, #20]	; (8017770 <xTaskGetTickCount+0x1c>)
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017760:	687b      	ldr	r3, [r7, #4]
}
 8017762:	4618      	mov	r0, r3
 8017764:	370c      	adds	r7, #12
 8017766:	46bd      	mov	sp, r7
 8017768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776c:	4770      	bx	lr
 801776e:	bf00      	nop
 8017770:	2000155c 	.word	0x2000155c

08017774 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b082      	sub	sp, #8
 8017778:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801777a:	f001 fa4b 	bl	8018c14 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801777e:	2300      	movs	r3, #0
 8017780:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8017782:	4b04      	ldr	r3, [pc, #16]	; (8017794 <xTaskGetTickCountFromISR+0x20>)
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017788:	683b      	ldr	r3, [r7, #0]
}
 801778a:	4618      	mov	r0, r3
 801778c:	3708      	adds	r7, #8
 801778e:	46bd      	mov	sp, r7
 8017790:	bd80      	pop	{r7, pc}
 8017792:	bf00      	nop
 8017794:	2000155c 	.word	0x2000155c

08017798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b086      	sub	sp, #24
 801779c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801779e:	2300      	movs	r3, #0
 80177a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80177a2:	4b4e      	ldr	r3, [pc, #312]	; (80178dc <xTaskIncrementTick+0x144>)
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	f040 8088 	bne.w	80178bc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80177ac:	4b4c      	ldr	r3, [pc, #304]	; (80178e0 <xTaskIncrementTick+0x148>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	3301      	adds	r3, #1
 80177b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80177b4:	4a4a      	ldr	r2, [pc, #296]	; (80178e0 <xTaskIncrementTick+0x148>)
 80177b6:	693b      	ldr	r3, [r7, #16]
 80177b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80177ba:	693b      	ldr	r3, [r7, #16]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d11f      	bne.n	8017800 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80177c0:	4b48      	ldr	r3, [pc, #288]	; (80178e4 <xTaskIncrementTick+0x14c>)
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d009      	beq.n	80177de <xTaskIncrementTick+0x46>
 80177ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177ce:	f383 8811 	msr	BASEPRI, r3
 80177d2:	f3bf 8f6f 	isb	sy
 80177d6:	f3bf 8f4f 	dsb	sy
 80177da:	603b      	str	r3, [r7, #0]
 80177dc:	e7fe      	b.n	80177dc <xTaskIncrementTick+0x44>
 80177de:	4b41      	ldr	r3, [pc, #260]	; (80178e4 <xTaskIncrementTick+0x14c>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	60fb      	str	r3, [r7, #12]
 80177e4:	4b40      	ldr	r3, [pc, #256]	; (80178e8 <xTaskIncrementTick+0x150>)
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	4a3e      	ldr	r2, [pc, #248]	; (80178e4 <xTaskIncrementTick+0x14c>)
 80177ea:	6013      	str	r3, [r2, #0]
 80177ec:	4a3e      	ldr	r2, [pc, #248]	; (80178e8 <xTaskIncrementTick+0x150>)
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	6013      	str	r3, [r2, #0]
 80177f2:	4b3e      	ldr	r3, [pc, #248]	; (80178ec <xTaskIncrementTick+0x154>)
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	3301      	adds	r3, #1
 80177f8:	4a3c      	ldr	r2, [pc, #240]	; (80178ec <xTaskIncrementTick+0x154>)
 80177fa:	6013      	str	r3, [r2, #0]
 80177fc:	f000 fac4 	bl	8017d88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017800:	4b3b      	ldr	r3, [pc, #236]	; (80178f0 <xTaskIncrementTick+0x158>)
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	693a      	ldr	r2, [r7, #16]
 8017806:	429a      	cmp	r2, r3
 8017808:	d349      	bcc.n	801789e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801780a:	4b36      	ldr	r3, [pc, #216]	; (80178e4 <xTaskIncrementTick+0x14c>)
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d104      	bne.n	801781e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017814:	4b36      	ldr	r3, [pc, #216]	; (80178f0 <xTaskIncrementTick+0x158>)
 8017816:	f04f 32ff 	mov.w	r2, #4294967295
 801781a:	601a      	str	r2, [r3, #0]
					break;
 801781c:	e03f      	b.n	801789e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801781e:	4b31      	ldr	r3, [pc, #196]	; (80178e4 <xTaskIncrementTick+0x14c>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	68db      	ldr	r3, [r3, #12]
 8017824:	68db      	ldr	r3, [r3, #12]
 8017826:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017828:	68bb      	ldr	r3, [r7, #8]
 801782a:	685b      	ldr	r3, [r3, #4]
 801782c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801782e:	693a      	ldr	r2, [r7, #16]
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	429a      	cmp	r2, r3
 8017834:	d203      	bcs.n	801783e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017836:	4a2e      	ldr	r2, [pc, #184]	; (80178f0 <xTaskIncrementTick+0x158>)
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801783c:	e02f      	b.n	801789e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	3304      	adds	r3, #4
 8017842:	4618      	mov	r0, r3
 8017844:	f7fe fc8e 	bl	8016164 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017848:	68bb      	ldr	r3, [r7, #8]
 801784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801784c:	2b00      	cmp	r3, #0
 801784e:	d004      	beq.n	801785a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017850:	68bb      	ldr	r3, [r7, #8]
 8017852:	3318      	adds	r3, #24
 8017854:	4618      	mov	r0, r3
 8017856:	f7fe fc85 	bl	8016164 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801785a:	68bb      	ldr	r3, [r7, #8]
 801785c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801785e:	4b25      	ldr	r3, [pc, #148]	; (80178f4 <xTaskIncrementTick+0x15c>)
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	429a      	cmp	r2, r3
 8017864:	d903      	bls.n	801786e <xTaskIncrementTick+0xd6>
 8017866:	68bb      	ldr	r3, [r7, #8]
 8017868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801786a:	4a22      	ldr	r2, [pc, #136]	; (80178f4 <xTaskIncrementTick+0x15c>)
 801786c:	6013      	str	r3, [r2, #0]
 801786e:	68bb      	ldr	r3, [r7, #8]
 8017870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017872:	4613      	mov	r3, r2
 8017874:	009b      	lsls	r3, r3, #2
 8017876:	4413      	add	r3, r2
 8017878:	009b      	lsls	r3, r3, #2
 801787a:	4a1f      	ldr	r2, [pc, #124]	; (80178f8 <xTaskIncrementTick+0x160>)
 801787c:	441a      	add	r2, r3
 801787e:	68bb      	ldr	r3, [r7, #8]
 8017880:	3304      	adds	r3, #4
 8017882:	4619      	mov	r1, r3
 8017884:	4610      	mov	r0, r2
 8017886:	f7fe fc10 	bl	80160aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801788a:	68bb      	ldr	r3, [r7, #8]
 801788c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801788e:	4b1b      	ldr	r3, [pc, #108]	; (80178fc <xTaskIncrementTick+0x164>)
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017894:	429a      	cmp	r2, r3
 8017896:	d3b8      	bcc.n	801780a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8017898:	2301      	movs	r3, #1
 801789a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801789c:	e7b5      	b.n	801780a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801789e:	4b17      	ldr	r3, [pc, #92]	; (80178fc <xTaskIncrementTick+0x164>)
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178a4:	4914      	ldr	r1, [pc, #80]	; (80178f8 <xTaskIncrementTick+0x160>)
 80178a6:	4613      	mov	r3, r2
 80178a8:	009b      	lsls	r3, r3, #2
 80178aa:	4413      	add	r3, r2
 80178ac:	009b      	lsls	r3, r3, #2
 80178ae:	440b      	add	r3, r1
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	2b01      	cmp	r3, #1
 80178b4:	d907      	bls.n	80178c6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80178b6:	2301      	movs	r3, #1
 80178b8:	617b      	str	r3, [r7, #20]
 80178ba:	e004      	b.n	80178c6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80178bc:	4b10      	ldr	r3, [pc, #64]	; (8017900 <xTaskIncrementTick+0x168>)
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	3301      	adds	r3, #1
 80178c2:	4a0f      	ldr	r2, [pc, #60]	; (8017900 <xTaskIncrementTick+0x168>)
 80178c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80178c6:	4b0f      	ldr	r3, [pc, #60]	; (8017904 <xTaskIncrementTick+0x16c>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d001      	beq.n	80178d2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80178ce:	2301      	movs	r3, #1
 80178d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80178d2:	697b      	ldr	r3, [r7, #20]
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	3718      	adds	r7, #24
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}
 80178dc:	20001580 	.word	0x20001580
 80178e0:	2000155c 	.word	0x2000155c
 80178e4:	20001510 	.word	0x20001510
 80178e8:	20001514 	.word	0x20001514
 80178ec:	20001570 	.word	0x20001570
 80178f0:	20001578 	.word	0x20001578
 80178f4:	20001560 	.word	0x20001560
 80178f8:	20001088 	.word	0x20001088
 80178fc:	20001084 	.word	0x20001084
 8017900:	20001568 	.word	0x20001568
 8017904:	2000156c 	.word	0x2000156c

08017908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017908:	b480      	push	{r7}
 801790a:	b085      	sub	sp, #20
 801790c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801790e:	4b27      	ldr	r3, [pc, #156]	; (80179ac <vTaskSwitchContext+0xa4>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d003      	beq.n	801791e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017916:	4b26      	ldr	r3, [pc, #152]	; (80179b0 <vTaskSwitchContext+0xa8>)
 8017918:	2201      	movs	r2, #1
 801791a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801791c:	e040      	b.n	80179a0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801791e:	4b24      	ldr	r3, [pc, #144]	; (80179b0 <vTaskSwitchContext+0xa8>)
 8017920:	2200      	movs	r2, #0
 8017922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017924:	4b23      	ldr	r3, [pc, #140]	; (80179b4 <vTaskSwitchContext+0xac>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	60fb      	str	r3, [r7, #12]
 801792a:	e00f      	b.n	801794c <vTaskSwitchContext+0x44>
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d109      	bne.n	8017946 <vTaskSwitchContext+0x3e>
 8017932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017936:	f383 8811 	msr	BASEPRI, r3
 801793a:	f3bf 8f6f 	isb	sy
 801793e:	f3bf 8f4f 	dsb	sy
 8017942:	607b      	str	r3, [r7, #4]
 8017944:	e7fe      	b.n	8017944 <vTaskSwitchContext+0x3c>
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	3b01      	subs	r3, #1
 801794a:	60fb      	str	r3, [r7, #12]
 801794c:	491a      	ldr	r1, [pc, #104]	; (80179b8 <vTaskSwitchContext+0xb0>)
 801794e:	68fa      	ldr	r2, [r7, #12]
 8017950:	4613      	mov	r3, r2
 8017952:	009b      	lsls	r3, r3, #2
 8017954:	4413      	add	r3, r2
 8017956:	009b      	lsls	r3, r3, #2
 8017958:	440b      	add	r3, r1
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d0e5      	beq.n	801792c <vTaskSwitchContext+0x24>
 8017960:	68fa      	ldr	r2, [r7, #12]
 8017962:	4613      	mov	r3, r2
 8017964:	009b      	lsls	r3, r3, #2
 8017966:	4413      	add	r3, r2
 8017968:	009b      	lsls	r3, r3, #2
 801796a:	4a13      	ldr	r2, [pc, #76]	; (80179b8 <vTaskSwitchContext+0xb0>)
 801796c:	4413      	add	r3, r2
 801796e:	60bb      	str	r3, [r7, #8]
 8017970:	68bb      	ldr	r3, [r7, #8]
 8017972:	685b      	ldr	r3, [r3, #4]
 8017974:	685a      	ldr	r2, [r3, #4]
 8017976:	68bb      	ldr	r3, [r7, #8]
 8017978:	605a      	str	r2, [r3, #4]
 801797a:	68bb      	ldr	r3, [r7, #8]
 801797c:	685a      	ldr	r2, [r3, #4]
 801797e:	68bb      	ldr	r3, [r7, #8]
 8017980:	3308      	adds	r3, #8
 8017982:	429a      	cmp	r2, r3
 8017984:	d104      	bne.n	8017990 <vTaskSwitchContext+0x88>
 8017986:	68bb      	ldr	r3, [r7, #8]
 8017988:	685b      	ldr	r3, [r3, #4]
 801798a:	685a      	ldr	r2, [r3, #4]
 801798c:	68bb      	ldr	r3, [r7, #8]
 801798e:	605a      	str	r2, [r3, #4]
 8017990:	68bb      	ldr	r3, [r7, #8]
 8017992:	685b      	ldr	r3, [r3, #4]
 8017994:	68db      	ldr	r3, [r3, #12]
 8017996:	4a09      	ldr	r2, [pc, #36]	; (80179bc <vTaskSwitchContext+0xb4>)
 8017998:	6013      	str	r3, [r2, #0]
 801799a:	4a06      	ldr	r2, [pc, #24]	; (80179b4 <vTaskSwitchContext+0xac>)
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	6013      	str	r3, [r2, #0]
}
 80179a0:	bf00      	nop
 80179a2:	3714      	adds	r7, #20
 80179a4:	46bd      	mov	sp, r7
 80179a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179aa:	4770      	bx	lr
 80179ac:	20001580 	.word	0x20001580
 80179b0:	2000156c 	.word	0x2000156c
 80179b4:	20001560 	.word	0x20001560
 80179b8:	20001088 	.word	0x20001088
 80179bc:	20001084 	.word	0x20001084

080179c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b084      	sub	sp, #16
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
 80179c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d109      	bne.n	80179e4 <vTaskPlaceOnEventList+0x24>
 80179d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179d4:	f383 8811 	msr	BASEPRI, r3
 80179d8:	f3bf 8f6f 	isb	sy
 80179dc:	f3bf 8f4f 	dsb	sy
 80179e0:	60fb      	str	r3, [r7, #12]
 80179e2:	e7fe      	b.n	80179e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80179e4:	4b07      	ldr	r3, [pc, #28]	; (8017a04 <vTaskPlaceOnEventList+0x44>)
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	3318      	adds	r3, #24
 80179ea:	4619      	mov	r1, r3
 80179ec:	6878      	ldr	r0, [r7, #4]
 80179ee:	f7fe fb80 	bl	80160f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80179f2:	2101      	movs	r1, #1
 80179f4:	6838      	ldr	r0, [r7, #0]
 80179f6:	f000 fb6d 	bl	80180d4 <prvAddCurrentTaskToDelayedList>
}
 80179fa:	bf00      	nop
 80179fc:	3710      	adds	r7, #16
 80179fe:	46bd      	mov	sp, r7
 8017a00:	bd80      	pop	{r7, pc}
 8017a02:	bf00      	nop
 8017a04:	20001084 	.word	0x20001084

08017a08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b086      	sub	sp, #24
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	60f8      	str	r0, [r7, #12]
 8017a10:	60b9      	str	r1, [r7, #8]
 8017a12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d109      	bne.n	8017a2e <vTaskPlaceOnEventListRestricted+0x26>
 8017a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a1e:	f383 8811 	msr	BASEPRI, r3
 8017a22:	f3bf 8f6f 	isb	sy
 8017a26:	f3bf 8f4f 	dsb	sy
 8017a2a:	617b      	str	r3, [r7, #20]
 8017a2c:	e7fe      	b.n	8017a2c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017a2e:	4b0a      	ldr	r3, [pc, #40]	; (8017a58 <vTaskPlaceOnEventListRestricted+0x50>)
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	3318      	adds	r3, #24
 8017a34:	4619      	mov	r1, r3
 8017a36:	68f8      	ldr	r0, [r7, #12]
 8017a38:	f7fe fb37 	bl	80160aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d002      	beq.n	8017a48 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8017a42:	f04f 33ff 	mov.w	r3, #4294967295
 8017a46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017a48:	6879      	ldr	r1, [r7, #4]
 8017a4a:	68b8      	ldr	r0, [r7, #8]
 8017a4c:	f000 fb42 	bl	80180d4 <prvAddCurrentTaskToDelayedList>
	}
 8017a50:	bf00      	nop
 8017a52:	3718      	adds	r7, #24
 8017a54:	46bd      	mov	sp, r7
 8017a56:	bd80      	pop	{r7, pc}
 8017a58:	20001084 	.word	0x20001084

08017a5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b086      	sub	sp, #24
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	68db      	ldr	r3, [r3, #12]
 8017a68:	68db      	ldr	r3, [r3, #12]
 8017a6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017a6c:	693b      	ldr	r3, [r7, #16]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d109      	bne.n	8017a86 <xTaskRemoveFromEventList+0x2a>
 8017a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a76:	f383 8811 	msr	BASEPRI, r3
 8017a7a:	f3bf 8f6f 	isb	sy
 8017a7e:	f3bf 8f4f 	dsb	sy
 8017a82:	60fb      	str	r3, [r7, #12]
 8017a84:	e7fe      	b.n	8017a84 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017a86:	693b      	ldr	r3, [r7, #16]
 8017a88:	3318      	adds	r3, #24
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	f7fe fb6a 	bl	8016164 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017a90:	4b1d      	ldr	r3, [pc, #116]	; (8017b08 <xTaskRemoveFromEventList+0xac>)
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d11d      	bne.n	8017ad4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017a98:	693b      	ldr	r3, [r7, #16]
 8017a9a:	3304      	adds	r3, #4
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f7fe fb61 	bl	8016164 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017aa2:	693b      	ldr	r3, [r7, #16]
 8017aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017aa6:	4b19      	ldr	r3, [pc, #100]	; (8017b0c <xTaskRemoveFromEventList+0xb0>)
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	429a      	cmp	r2, r3
 8017aac:	d903      	bls.n	8017ab6 <xTaskRemoveFromEventList+0x5a>
 8017aae:	693b      	ldr	r3, [r7, #16]
 8017ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ab2:	4a16      	ldr	r2, [pc, #88]	; (8017b0c <xTaskRemoveFromEventList+0xb0>)
 8017ab4:	6013      	str	r3, [r2, #0]
 8017ab6:	693b      	ldr	r3, [r7, #16]
 8017ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017aba:	4613      	mov	r3, r2
 8017abc:	009b      	lsls	r3, r3, #2
 8017abe:	4413      	add	r3, r2
 8017ac0:	009b      	lsls	r3, r3, #2
 8017ac2:	4a13      	ldr	r2, [pc, #76]	; (8017b10 <xTaskRemoveFromEventList+0xb4>)
 8017ac4:	441a      	add	r2, r3
 8017ac6:	693b      	ldr	r3, [r7, #16]
 8017ac8:	3304      	adds	r3, #4
 8017aca:	4619      	mov	r1, r3
 8017acc:	4610      	mov	r0, r2
 8017ace:	f7fe faec 	bl	80160aa <vListInsertEnd>
 8017ad2:	e005      	b.n	8017ae0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017ad4:	693b      	ldr	r3, [r7, #16]
 8017ad6:	3318      	adds	r3, #24
 8017ad8:	4619      	mov	r1, r3
 8017ada:	480e      	ldr	r0, [pc, #56]	; (8017b14 <xTaskRemoveFromEventList+0xb8>)
 8017adc:	f7fe fae5 	bl	80160aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017ae0:	693b      	ldr	r3, [r7, #16]
 8017ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ae4:	4b0c      	ldr	r3, [pc, #48]	; (8017b18 <xTaskRemoveFromEventList+0xbc>)
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017aea:	429a      	cmp	r2, r3
 8017aec:	d905      	bls.n	8017afa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017aee:	2301      	movs	r3, #1
 8017af0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017af2:	4b0a      	ldr	r3, [pc, #40]	; (8017b1c <xTaskRemoveFromEventList+0xc0>)
 8017af4:	2201      	movs	r2, #1
 8017af6:	601a      	str	r2, [r3, #0]
 8017af8:	e001      	b.n	8017afe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8017afa:	2300      	movs	r3, #0
 8017afc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017afe:	697b      	ldr	r3, [r7, #20]
}
 8017b00:	4618      	mov	r0, r3
 8017b02:	3718      	adds	r7, #24
 8017b04:	46bd      	mov	sp, r7
 8017b06:	bd80      	pop	{r7, pc}
 8017b08:	20001580 	.word	0x20001580
 8017b0c:	20001560 	.word	0x20001560
 8017b10:	20001088 	.word	0x20001088
 8017b14:	20001518 	.word	0x20001518
 8017b18:	20001084 	.word	0x20001084
 8017b1c:	2000156c 	.word	0x2000156c

08017b20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017b20:	b480      	push	{r7}
 8017b22:	b083      	sub	sp, #12
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017b28:	4b06      	ldr	r3, [pc, #24]	; (8017b44 <vTaskInternalSetTimeOutState+0x24>)
 8017b2a:	681a      	ldr	r2, [r3, #0]
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017b30:	4b05      	ldr	r3, [pc, #20]	; (8017b48 <vTaskInternalSetTimeOutState+0x28>)
 8017b32:	681a      	ldr	r2, [r3, #0]
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	605a      	str	r2, [r3, #4]
}
 8017b38:	bf00      	nop
 8017b3a:	370c      	adds	r7, #12
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b42:	4770      	bx	lr
 8017b44:	20001570 	.word	0x20001570
 8017b48:	2000155c 	.word	0x2000155c

08017b4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b088      	sub	sp, #32
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
 8017b54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d109      	bne.n	8017b70 <xTaskCheckForTimeOut+0x24>
 8017b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b60:	f383 8811 	msr	BASEPRI, r3
 8017b64:	f3bf 8f6f 	isb	sy
 8017b68:	f3bf 8f4f 	dsb	sy
 8017b6c:	613b      	str	r3, [r7, #16]
 8017b6e:	e7fe      	b.n	8017b6e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8017b70:	683b      	ldr	r3, [r7, #0]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d109      	bne.n	8017b8a <xTaskCheckForTimeOut+0x3e>
 8017b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b7a:	f383 8811 	msr	BASEPRI, r3
 8017b7e:	f3bf 8f6f 	isb	sy
 8017b82:	f3bf 8f4f 	dsb	sy
 8017b86:	60fb      	str	r3, [r7, #12]
 8017b88:	e7fe      	b.n	8017b88 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8017b8a:	f000 ff67 	bl	8018a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017b8e:	4b1d      	ldr	r3, [pc, #116]	; (8017c04 <xTaskCheckForTimeOut+0xb8>)
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	685b      	ldr	r3, [r3, #4]
 8017b98:	69ba      	ldr	r2, [r7, #24]
 8017b9a:	1ad3      	subs	r3, r2, r3
 8017b9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017b9e:	683b      	ldr	r3, [r7, #0]
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ba6:	d102      	bne.n	8017bae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017ba8:	2300      	movs	r3, #0
 8017baa:	61fb      	str	r3, [r7, #28]
 8017bac:	e023      	b.n	8017bf6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	681a      	ldr	r2, [r3, #0]
 8017bb2:	4b15      	ldr	r3, [pc, #84]	; (8017c08 <xTaskCheckForTimeOut+0xbc>)
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	429a      	cmp	r2, r3
 8017bb8:	d007      	beq.n	8017bca <xTaskCheckForTimeOut+0x7e>
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	685b      	ldr	r3, [r3, #4]
 8017bbe:	69ba      	ldr	r2, [r7, #24]
 8017bc0:	429a      	cmp	r2, r3
 8017bc2:	d302      	bcc.n	8017bca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017bc4:	2301      	movs	r3, #1
 8017bc6:	61fb      	str	r3, [r7, #28]
 8017bc8:	e015      	b.n	8017bf6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017bca:	683b      	ldr	r3, [r7, #0]
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	697a      	ldr	r2, [r7, #20]
 8017bd0:	429a      	cmp	r2, r3
 8017bd2:	d20b      	bcs.n	8017bec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017bd4:	683b      	ldr	r3, [r7, #0]
 8017bd6:	681a      	ldr	r2, [r3, #0]
 8017bd8:	697b      	ldr	r3, [r7, #20]
 8017bda:	1ad2      	subs	r2, r2, r3
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017be0:	6878      	ldr	r0, [r7, #4]
 8017be2:	f7ff ff9d 	bl	8017b20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017be6:	2300      	movs	r3, #0
 8017be8:	61fb      	str	r3, [r7, #28]
 8017bea:	e004      	b.n	8017bf6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8017bec:	683b      	ldr	r3, [r7, #0]
 8017bee:	2200      	movs	r2, #0
 8017bf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017bf2:	2301      	movs	r3, #1
 8017bf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017bf6:	f000 ff5f 	bl	8018ab8 <vPortExitCritical>

	return xReturn;
 8017bfa:	69fb      	ldr	r3, [r7, #28]
}
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	3720      	adds	r7, #32
 8017c00:	46bd      	mov	sp, r7
 8017c02:	bd80      	pop	{r7, pc}
 8017c04:	2000155c 	.word	0x2000155c
 8017c08:	20001570 	.word	0x20001570

08017c0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017c0c:	b480      	push	{r7}
 8017c0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017c10:	4b03      	ldr	r3, [pc, #12]	; (8017c20 <vTaskMissedYield+0x14>)
 8017c12:	2201      	movs	r2, #1
 8017c14:	601a      	str	r2, [r3, #0]
}
 8017c16:	bf00      	nop
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1e:	4770      	bx	lr
 8017c20:	2000156c 	.word	0x2000156c

08017c24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b082      	sub	sp, #8
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017c2c:	f000 f852 	bl	8017cd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017c30:	4b06      	ldr	r3, [pc, #24]	; (8017c4c <prvIdleTask+0x28>)
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	2b01      	cmp	r3, #1
 8017c36:	d9f9      	bls.n	8017c2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8017c38:	4b05      	ldr	r3, [pc, #20]	; (8017c50 <prvIdleTask+0x2c>)
 8017c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c3e:	601a      	str	r2, [r3, #0]
 8017c40:	f3bf 8f4f 	dsb	sy
 8017c44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017c48:	e7f0      	b.n	8017c2c <prvIdleTask+0x8>
 8017c4a:	bf00      	nop
 8017c4c:	20001088 	.word	0x20001088
 8017c50:	e000ed04 	.word	0xe000ed04

08017c54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b082      	sub	sp, #8
 8017c58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	607b      	str	r3, [r7, #4]
 8017c5e:	e00c      	b.n	8017c7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017c60:	687a      	ldr	r2, [r7, #4]
 8017c62:	4613      	mov	r3, r2
 8017c64:	009b      	lsls	r3, r3, #2
 8017c66:	4413      	add	r3, r2
 8017c68:	009b      	lsls	r3, r3, #2
 8017c6a:	4a12      	ldr	r2, [pc, #72]	; (8017cb4 <prvInitialiseTaskLists+0x60>)
 8017c6c:	4413      	add	r3, r2
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f7fe f9ee 	bl	8016050 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	3301      	adds	r3, #1
 8017c78:	607b      	str	r3, [r7, #4]
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	2b37      	cmp	r3, #55	; 0x37
 8017c7e:	d9ef      	bls.n	8017c60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017c80:	480d      	ldr	r0, [pc, #52]	; (8017cb8 <prvInitialiseTaskLists+0x64>)
 8017c82:	f7fe f9e5 	bl	8016050 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017c86:	480d      	ldr	r0, [pc, #52]	; (8017cbc <prvInitialiseTaskLists+0x68>)
 8017c88:	f7fe f9e2 	bl	8016050 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017c8c:	480c      	ldr	r0, [pc, #48]	; (8017cc0 <prvInitialiseTaskLists+0x6c>)
 8017c8e:	f7fe f9df 	bl	8016050 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017c92:	480c      	ldr	r0, [pc, #48]	; (8017cc4 <prvInitialiseTaskLists+0x70>)
 8017c94:	f7fe f9dc 	bl	8016050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017c98:	480b      	ldr	r0, [pc, #44]	; (8017cc8 <prvInitialiseTaskLists+0x74>)
 8017c9a:	f7fe f9d9 	bl	8016050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017c9e:	4b0b      	ldr	r3, [pc, #44]	; (8017ccc <prvInitialiseTaskLists+0x78>)
 8017ca0:	4a05      	ldr	r2, [pc, #20]	; (8017cb8 <prvInitialiseTaskLists+0x64>)
 8017ca2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017ca4:	4b0a      	ldr	r3, [pc, #40]	; (8017cd0 <prvInitialiseTaskLists+0x7c>)
 8017ca6:	4a05      	ldr	r2, [pc, #20]	; (8017cbc <prvInitialiseTaskLists+0x68>)
 8017ca8:	601a      	str	r2, [r3, #0]
}
 8017caa:	bf00      	nop
 8017cac:	3708      	adds	r7, #8
 8017cae:	46bd      	mov	sp, r7
 8017cb0:	bd80      	pop	{r7, pc}
 8017cb2:	bf00      	nop
 8017cb4:	20001088 	.word	0x20001088
 8017cb8:	200014e8 	.word	0x200014e8
 8017cbc:	200014fc 	.word	0x200014fc
 8017cc0:	20001518 	.word	0x20001518
 8017cc4:	2000152c 	.word	0x2000152c
 8017cc8:	20001544 	.word	0x20001544
 8017ccc:	20001510 	.word	0x20001510
 8017cd0:	20001514 	.word	0x20001514

08017cd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b082      	sub	sp, #8
 8017cd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017cda:	e019      	b.n	8017d10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017cdc:	f000 febe 	bl	8018a5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ce0:	4b0f      	ldr	r3, [pc, #60]	; (8017d20 <prvCheckTasksWaitingTermination+0x4c>)
 8017ce2:	68db      	ldr	r3, [r3, #12]
 8017ce4:	68db      	ldr	r3, [r3, #12]
 8017ce6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	3304      	adds	r3, #4
 8017cec:	4618      	mov	r0, r3
 8017cee:	f7fe fa39 	bl	8016164 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017cf2:	4b0c      	ldr	r3, [pc, #48]	; (8017d24 <prvCheckTasksWaitingTermination+0x50>)
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	3b01      	subs	r3, #1
 8017cf8:	4a0a      	ldr	r2, [pc, #40]	; (8017d24 <prvCheckTasksWaitingTermination+0x50>)
 8017cfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017cfc:	4b0a      	ldr	r3, [pc, #40]	; (8017d28 <prvCheckTasksWaitingTermination+0x54>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	3b01      	subs	r3, #1
 8017d02:	4a09      	ldr	r2, [pc, #36]	; (8017d28 <prvCheckTasksWaitingTermination+0x54>)
 8017d04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017d06:	f000 fed7 	bl	8018ab8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017d0a:	6878      	ldr	r0, [r7, #4]
 8017d0c:	f000 f80e 	bl	8017d2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017d10:	4b05      	ldr	r3, [pc, #20]	; (8017d28 <prvCheckTasksWaitingTermination+0x54>)
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d1e1      	bne.n	8017cdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017d18:	bf00      	nop
 8017d1a:	3708      	adds	r7, #8
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	bd80      	pop	{r7, pc}
 8017d20:	2000152c 	.word	0x2000152c
 8017d24:	20001558 	.word	0x20001558
 8017d28:	20001540 	.word	0x20001540

08017d2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017d2c:	b580      	push	{r7, lr}
 8017d2e:	b084      	sub	sp, #16
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d108      	bne.n	8017d50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d42:	4618      	mov	r0, r3
 8017d44:	f001 f866 	bl	8018e14 <vPortFree>
				vPortFree( pxTCB );
 8017d48:	6878      	ldr	r0, [r7, #4]
 8017d4a:	f001 f863 	bl	8018e14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017d4e:	e017      	b.n	8017d80 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017d56:	2b01      	cmp	r3, #1
 8017d58:	d103      	bne.n	8017d62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f001 f85a 	bl	8018e14 <vPortFree>
	}
 8017d60:	e00e      	b.n	8017d80 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017d68:	2b02      	cmp	r3, #2
 8017d6a:	d009      	beq.n	8017d80 <prvDeleteTCB+0x54>
 8017d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d70:	f383 8811 	msr	BASEPRI, r3
 8017d74:	f3bf 8f6f 	isb	sy
 8017d78:	f3bf 8f4f 	dsb	sy
 8017d7c:	60fb      	str	r3, [r7, #12]
 8017d7e:	e7fe      	b.n	8017d7e <prvDeleteTCB+0x52>
	}
 8017d80:	bf00      	nop
 8017d82:	3710      	adds	r7, #16
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}

08017d88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017d88:	b480      	push	{r7}
 8017d8a:	b083      	sub	sp, #12
 8017d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017d8e:	4b0c      	ldr	r3, [pc, #48]	; (8017dc0 <prvResetNextTaskUnblockTime+0x38>)
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d104      	bne.n	8017da2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017d98:	4b0a      	ldr	r3, [pc, #40]	; (8017dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8017d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8017d9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017da0:	e008      	b.n	8017db4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017da2:	4b07      	ldr	r3, [pc, #28]	; (8017dc0 <prvResetNextTaskUnblockTime+0x38>)
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	68db      	ldr	r3, [r3, #12]
 8017da8:	68db      	ldr	r3, [r3, #12]
 8017daa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	685b      	ldr	r3, [r3, #4]
 8017db0:	4a04      	ldr	r2, [pc, #16]	; (8017dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8017db2:	6013      	str	r3, [r2, #0]
}
 8017db4:	bf00      	nop
 8017db6:	370c      	adds	r7, #12
 8017db8:	46bd      	mov	sp, r7
 8017dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dbe:	4770      	bx	lr
 8017dc0:	20001510 	.word	0x20001510
 8017dc4:	20001578 	.word	0x20001578

08017dc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017dc8:	b480      	push	{r7}
 8017dca:	b083      	sub	sp, #12
 8017dcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017dce:	4b0b      	ldr	r3, [pc, #44]	; (8017dfc <xTaskGetSchedulerState+0x34>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d102      	bne.n	8017ddc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017dd6:	2301      	movs	r3, #1
 8017dd8:	607b      	str	r3, [r7, #4]
 8017dda:	e008      	b.n	8017dee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017ddc:	4b08      	ldr	r3, [pc, #32]	; (8017e00 <xTaskGetSchedulerState+0x38>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d102      	bne.n	8017dea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017de4:	2302      	movs	r3, #2
 8017de6:	607b      	str	r3, [r7, #4]
 8017de8:	e001      	b.n	8017dee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017dea:	2300      	movs	r3, #0
 8017dec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017dee:	687b      	ldr	r3, [r7, #4]
	}
 8017df0:	4618      	mov	r0, r3
 8017df2:	370c      	adds	r7, #12
 8017df4:	46bd      	mov	sp, r7
 8017df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfa:	4770      	bx	lr
 8017dfc:	20001564 	.word	0x20001564
 8017e00:	20001580 	.word	0x20001580

08017e04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b084      	sub	sp, #16
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017e10:	2300      	movs	r3, #0
 8017e12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d051      	beq.n	8017ebe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017e1a:	68bb      	ldr	r3, [r7, #8]
 8017e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e1e:	4b2a      	ldr	r3, [pc, #168]	; (8017ec8 <xTaskPriorityInherit+0xc4>)
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e24:	429a      	cmp	r2, r3
 8017e26:	d241      	bcs.n	8017eac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017e28:	68bb      	ldr	r3, [r7, #8]
 8017e2a:	699b      	ldr	r3, [r3, #24]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	db06      	blt.n	8017e3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017e30:	4b25      	ldr	r3, [pc, #148]	; (8017ec8 <xTaskPriorityInherit+0xc4>)
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017e3a:	68bb      	ldr	r3, [r7, #8]
 8017e3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017e3e:	68bb      	ldr	r3, [r7, #8]
 8017e40:	6959      	ldr	r1, [r3, #20]
 8017e42:	68bb      	ldr	r3, [r7, #8]
 8017e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e46:	4613      	mov	r3, r2
 8017e48:	009b      	lsls	r3, r3, #2
 8017e4a:	4413      	add	r3, r2
 8017e4c:	009b      	lsls	r3, r3, #2
 8017e4e:	4a1f      	ldr	r2, [pc, #124]	; (8017ecc <xTaskPriorityInherit+0xc8>)
 8017e50:	4413      	add	r3, r2
 8017e52:	4299      	cmp	r1, r3
 8017e54:	d122      	bne.n	8017e9c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017e56:	68bb      	ldr	r3, [r7, #8]
 8017e58:	3304      	adds	r3, #4
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	f7fe f982 	bl	8016164 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017e60:	4b19      	ldr	r3, [pc, #100]	; (8017ec8 <xTaskPriorityInherit+0xc4>)
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e66:	68bb      	ldr	r3, [r7, #8]
 8017e68:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017e6a:	68bb      	ldr	r3, [r7, #8]
 8017e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e6e:	4b18      	ldr	r3, [pc, #96]	; (8017ed0 <xTaskPriorityInherit+0xcc>)
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	d903      	bls.n	8017e7e <xTaskPriorityInherit+0x7a>
 8017e76:	68bb      	ldr	r3, [r7, #8]
 8017e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e7a:	4a15      	ldr	r2, [pc, #84]	; (8017ed0 <xTaskPriorityInherit+0xcc>)
 8017e7c:	6013      	str	r3, [r2, #0]
 8017e7e:	68bb      	ldr	r3, [r7, #8]
 8017e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e82:	4613      	mov	r3, r2
 8017e84:	009b      	lsls	r3, r3, #2
 8017e86:	4413      	add	r3, r2
 8017e88:	009b      	lsls	r3, r3, #2
 8017e8a:	4a10      	ldr	r2, [pc, #64]	; (8017ecc <xTaskPriorityInherit+0xc8>)
 8017e8c:	441a      	add	r2, r3
 8017e8e:	68bb      	ldr	r3, [r7, #8]
 8017e90:	3304      	adds	r3, #4
 8017e92:	4619      	mov	r1, r3
 8017e94:	4610      	mov	r0, r2
 8017e96:	f7fe f908 	bl	80160aa <vListInsertEnd>
 8017e9a:	e004      	b.n	8017ea6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017e9c:	4b0a      	ldr	r3, [pc, #40]	; (8017ec8 <xTaskPriorityInherit+0xc4>)
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ea2:	68bb      	ldr	r3, [r7, #8]
 8017ea4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017ea6:	2301      	movs	r3, #1
 8017ea8:	60fb      	str	r3, [r7, #12]
 8017eaa:	e008      	b.n	8017ebe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017eac:	68bb      	ldr	r3, [r7, #8]
 8017eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017eb0:	4b05      	ldr	r3, [pc, #20]	; (8017ec8 <xTaskPriorityInherit+0xc4>)
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017eb6:	429a      	cmp	r2, r3
 8017eb8:	d201      	bcs.n	8017ebe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017eba:	2301      	movs	r3, #1
 8017ebc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017ebe:	68fb      	ldr	r3, [r7, #12]
	}
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	3710      	adds	r7, #16
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	bd80      	pop	{r7, pc}
 8017ec8:	20001084 	.word	0x20001084
 8017ecc:	20001088 	.word	0x20001088
 8017ed0:	20001560 	.word	0x20001560

08017ed4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b086      	sub	sp, #24
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d054      	beq.n	8017f94 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017eea:	4b2d      	ldr	r3, [pc, #180]	; (8017fa0 <xTaskPriorityDisinherit+0xcc>)
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	693a      	ldr	r2, [r7, #16]
 8017ef0:	429a      	cmp	r2, r3
 8017ef2:	d009      	beq.n	8017f08 <xTaskPriorityDisinherit+0x34>
 8017ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ef8:	f383 8811 	msr	BASEPRI, r3
 8017efc:	f3bf 8f6f 	isb	sy
 8017f00:	f3bf 8f4f 	dsb	sy
 8017f04:	60fb      	str	r3, [r7, #12]
 8017f06:	e7fe      	b.n	8017f06 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8017f08:	693b      	ldr	r3, [r7, #16]
 8017f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d109      	bne.n	8017f24 <xTaskPriorityDisinherit+0x50>
 8017f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f14:	f383 8811 	msr	BASEPRI, r3
 8017f18:	f3bf 8f6f 	isb	sy
 8017f1c:	f3bf 8f4f 	dsb	sy
 8017f20:	60bb      	str	r3, [r7, #8]
 8017f22:	e7fe      	b.n	8017f22 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8017f24:	693b      	ldr	r3, [r7, #16]
 8017f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f28:	1e5a      	subs	r2, r3, #1
 8017f2a:	693b      	ldr	r3, [r7, #16]
 8017f2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017f2e:	693b      	ldr	r3, [r7, #16]
 8017f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f32:	693b      	ldr	r3, [r7, #16]
 8017f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017f36:	429a      	cmp	r2, r3
 8017f38:	d02c      	beq.n	8017f94 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017f3a:	693b      	ldr	r3, [r7, #16]
 8017f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d128      	bne.n	8017f94 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017f42:	693b      	ldr	r3, [r7, #16]
 8017f44:	3304      	adds	r3, #4
 8017f46:	4618      	mov	r0, r3
 8017f48:	f7fe f90c 	bl	8016164 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017f4c:	693b      	ldr	r3, [r7, #16]
 8017f4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017f50:	693b      	ldr	r3, [r7, #16]
 8017f52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f54:	693b      	ldr	r3, [r7, #16]
 8017f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017f60:	693b      	ldr	r3, [r7, #16]
 8017f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f64:	4b0f      	ldr	r3, [pc, #60]	; (8017fa4 <xTaskPriorityDisinherit+0xd0>)
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	429a      	cmp	r2, r3
 8017f6a:	d903      	bls.n	8017f74 <xTaskPriorityDisinherit+0xa0>
 8017f6c:	693b      	ldr	r3, [r7, #16]
 8017f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f70:	4a0c      	ldr	r2, [pc, #48]	; (8017fa4 <xTaskPriorityDisinherit+0xd0>)
 8017f72:	6013      	str	r3, [r2, #0]
 8017f74:	693b      	ldr	r3, [r7, #16]
 8017f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f78:	4613      	mov	r3, r2
 8017f7a:	009b      	lsls	r3, r3, #2
 8017f7c:	4413      	add	r3, r2
 8017f7e:	009b      	lsls	r3, r3, #2
 8017f80:	4a09      	ldr	r2, [pc, #36]	; (8017fa8 <xTaskPriorityDisinherit+0xd4>)
 8017f82:	441a      	add	r2, r3
 8017f84:	693b      	ldr	r3, [r7, #16]
 8017f86:	3304      	adds	r3, #4
 8017f88:	4619      	mov	r1, r3
 8017f8a:	4610      	mov	r0, r2
 8017f8c:	f7fe f88d 	bl	80160aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017f90:	2301      	movs	r3, #1
 8017f92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017f94:	697b      	ldr	r3, [r7, #20]
	}
 8017f96:	4618      	mov	r0, r3
 8017f98:	3718      	adds	r7, #24
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}
 8017f9e:	bf00      	nop
 8017fa0:	20001084 	.word	0x20001084
 8017fa4:	20001560 	.word	0x20001560
 8017fa8:	20001088 	.word	0x20001088

08017fac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b088      	sub	sp, #32
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
 8017fb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017fba:	2301      	movs	r3, #1
 8017fbc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d068      	beq.n	8018096 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017fc4:	69bb      	ldr	r3, [r7, #24]
 8017fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d109      	bne.n	8017fe0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8017fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fd0:	f383 8811 	msr	BASEPRI, r3
 8017fd4:	f3bf 8f6f 	isb	sy
 8017fd8:	f3bf 8f4f 	dsb	sy
 8017fdc:	60fb      	str	r3, [r7, #12]
 8017fde:	e7fe      	b.n	8017fde <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017fe0:	69bb      	ldr	r3, [r7, #24]
 8017fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017fe4:	683a      	ldr	r2, [r7, #0]
 8017fe6:	429a      	cmp	r2, r3
 8017fe8:	d902      	bls.n	8017ff0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017fea:	683b      	ldr	r3, [r7, #0]
 8017fec:	61fb      	str	r3, [r7, #28]
 8017fee:	e002      	b.n	8017ff6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017ff0:	69bb      	ldr	r3, [r7, #24]
 8017ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ff4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017ff6:	69bb      	ldr	r3, [r7, #24]
 8017ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ffa:	69fa      	ldr	r2, [r7, #28]
 8017ffc:	429a      	cmp	r2, r3
 8017ffe:	d04a      	beq.n	8018096 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018000:	69bb      	ldr	r3, [r7, #24]
 8018002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018004:	697a      	ldr	r2, [r7, #20]
 8018006:	429a      	cmp	r2, r3
 8018008:	d145      	bne.n	8018096 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801800a:	4b25      	ldr	r3, [pc, #148]	; (80180a0 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	69ba      	ldr	r2, [r7, #24]
 8018010:	429a      	cmp	r2, r3
 8018012:	d109      	bne.n	8018028 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8018014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018018:	f383 8811 	msr	BASEPRI, r3
 801801c:	f3bf 8f6f 	isb	sy
 8018020:	f3bf 8f4f 	dsb	sy
 8018024:	60bb      	str	r3, [r7, #8]
 8018026:	e7fe      	b.n	8018026 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018028:	69bb      	ldr	r3, [r7, #24]
 801802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801802c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801802e:	69bb      	ldr	r3, [r7, #24]
 8018030:	69fa      	ldr	r2, [r7, #28]
 8018032:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018034:	69bb      	ldr	r3, [r7, #24]
 8018036:	699b      	ldr	r3, [r3, #24]
 8018038:	2b00      	cmp	r3, #0
 801803a:	db04      	blt.n	8018046 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801803c:	69fb      	ldr	r3, [r7, #28]
 801803e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018042:	69bb      	ldr	r3, [r7, #24]
 8018044:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018046:	69bb      	ldr	r3, [r7, #24]
 8018048:	6959      	ldr	r1, [r3, #20]
 801804a:	693a      	ldr	r2, [r7, #16]
 801804c:	4613      	mov	r3, r2
 801804e:	009b      	lsls	r3, r3, #2
 8018050:	4413      	add	r3, r2
 8018052:	009b      	lsls	r3, r3, #2
 8018054:	4a13      	ldr	r2, [pc, #76]	; (80180a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8018056:	4413      	add	r3, r2
 8018058:	4299      	cmp	r1, r3
 801805a:	d11c      	bne.n	8018096 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801805c:	69bb      	ldr	r3, [r7, #24]
 801805e:	3304      	adds	r3, #4
 8018060:	4618      	mov	r0, r3
 8018062:	f7fe f87f 	bl	8016164 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018066:	69bb      	ldr	r3, [r7, #24]
 8018068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801806a:	4b0f      	ldr	r3, [pc, #60]	; (80180a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	429a      	cmp	r2, r3
 8018070:	d903      	bls.n	801807a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8018072:	69bb      	ldr	r3, [r7, #24]
 8018074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018076:	4a0c      	ldr	r2, [pc, #48]	; (80180a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018078:	6013      	str	r3, [r2, #0]
 801807a:	69bb      	ldr	r3, [r7, #24]
 801807c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801807e:	4613      	mov	r3, r2
 8018080:	009b      	lsls	r3, r3, #2
 8018082:	4413      	add	r3, r2
 8018084:	009b      	lsls	r3, r3, #2
 8018086:	4a07      	ldr	r2, [pc, #28]	; (80180a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8018088:	441a      	add	r2, r3
 801808a:	69bb      	ldr	r3, [r7, #24]
 801808c:	3304      	adds	r3, #4
 801808e:	4619      	mov	r1, r3
 8018090:	4610      	mov	r0, r2
 8018092:	f7fe f80a 	bl	80160aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018096:	bf00      	nop
 8018098:	3720      	adds	r7, #32
 801809a:	46bd      	mov	sp, r7
 801809c:	bd80      	pop	{r7, pc}
 801809e:	bf00      	nop
 80180a0:	20001084 	.word	0x20001084
 80180a4:	20001088 	.word	0x20001088
 80180a8:	20001560 	.word	0x20001560

080180ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80180ac:	b480      	push	{r7}
 80180ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80180b0:	4b07      	ldr	r3, [pc, #28]	; (80180d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d004      	beq.n	80180c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80180b8:	4b05      	ldr	r3, [pc, #20]	; (80180d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80180be:	3201      	adds	r2, #1
 80180c0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80180c2:	4b03      	ldr	r3, [pc, #12]	; (80180d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80180c4:	681b      	ldr	r3, [r3, #0]
	}
 80180c6:	4618      	mov	r0, r3
 80180c8:	46bd      	mov	sp, r7
 80180ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ce:	4770      	bx	lr
 80180d0:	20001084 	.word	0x20001084

080180d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80180d4:	b580      	push	{r7, lr}
 80180d6:	b084      	sub	sp, #16
 80180d8:	af00      	add	r7, sp, #0
 80180da:	6078      	str	r0, [r7, #4]
 80180dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80180de:	4b21      	ldr	r3, [pc, #132]	; (8018164 <prvAddCurrentTaskToDelayedList+0x90>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80180e4:	4b20      	ldr	r3, [pc, #128]	; (8018168 <prvAddCurrentTaskToDelayedList+0x94>)
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	3304      	adds	r3, #4
 80180ea:	4618      	mov	r0, r3
 80180ec:	f7fe f83a 	bl	8016164 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180f6:	d10a      	bne.n	801810e <prvAddCurrentTaskToDelayedList+0x3a>
 80180f8:	683b      	ldr	r3, [r7, #0]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d007      	beq.n	801810e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80180fe:	4b1a      	ldr	r3, [pc, #104]	; (8018168 <prvAddCurrentTaskToDelayedList+0x94>)
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	3304      	adds	r3, #4
 8018104:	4619      	mov	r1, r3
 8018106:	4819      	ldr	r0, [pc, #100]	; (801816c <prvAddCurrentTaskToDelayedList+0x98>)
 8018108:	f7fd ffcf 	bl	80160aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801810c:	e026      	b.n	801815c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801810e:	68fa      	ldr	r2, [r7, #12]
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	4413      	add	r3, r2
 8018114:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018116:	4b14      	ldr	r3, [pc, #80]	; (8018168 <prvAddCurrentTaskToDelayedList+0x94>)
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	68ba      	ldr	r2, [r7, #8]
 801811c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801811e:	68ba      	ldr	r2, [r7, #8]
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	429a      	cmp	r2, r3
 8018124:	d209      	bcs.n	801813a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018126:	4b12      	ldr	r3, [pc, #72]	; (8018170 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018128:	681a      	ldr	r2, [r3, #0]
 801812a:	4b0f      	ldr	r3, [pc, #60]	; (8018168 <prvAddCurrentTaskToDelayedList+0x94>)
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	3304      	adds	r3, #4
 8018130:	4619      	mov	r1, r3
 8018132:	4610      	mov	r0, r2
 8018134:	f7fd ffdd 	bl	80160f2 <vListInsert>
}
 8018138:	e010      	b.n	801815c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801813a:	4b0e      	ldr	r3, [pc, #56]	; (8018174 <prvAddCurrentTaskToDelayedList+0xa0>)
 801813c:	681a      	ldr	r2, [r3, #0]
 801813e:	4b0a      	ldr	r3, [pc, #40]	; (8018168 <prvAddCurrentTaskToDelayedList+0x94>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	3304      	adds	r3, #4
 8018144:	4619      	mov	r1, r3
 8018146:	4610      	mov	r0, r2
 8018148:	f7fd ffd3 	bl	80160f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801814c:	4b0a      	ldr	r3, [pc, #40]	; (8018178 <prvAddCurrentTaskToDelayedList+0xa4>)
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	68ba      	ldr	r2, [r7, #8]
 8018152:	429a      	cmp	r2, r3
 8018154:	d202      	bcs.n	801815c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018156:	4a08      	ldr	r2, [pc, #32]	; (8018178 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018158:	68bb      	ldr	r3, [r7, #8]
 801815a:	6013      	str	r3, [r2, #0]
}
 801815c:	bf00      	nop
 801815e:	3710      	adds	r7, #16
 8018160:	46bd      	mov	sp, r7
 8018162:	bd80      	pop	{r7, pc}
 8018164:	2000155c 	.word	0x2000155c
 8018168:	20001084 	.word	0x20001084
 801816c:	20001544 	.word	0x20001544
 8018170:	20001514 	.word	0x20001514
 8018174:	20001510 	.word	0x20001510
 8018178:	20001578 	.word	0x20001578

0801817c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b08a      	sub	sp, #40	; 0x28
 8018180:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018182:	2300      	movs	r3, #0
 8018184:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018186:	f000 faff 	bl	8018788 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801818a:	4b1c      	ldr	r3, [pc, #112]	; (80181fc <xTimerCreateTimerTask+0x80>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d021      	beq.n	80181d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018192:	2300      	movs	r3, #0
 8018194:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018196:	2300      	movs	r3, #0
 8018198:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801819a:	1d3a      	adds	r2, r7, #4
 801819c:	f107 0108 	add.w	r1, r7, #8
 80181a0:	f107 030c 	add.w	r3, r7, #12
 80181a4:	4618      	mov	r0, r3
 80181a6:	f7fd ff39 	bl	801601c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80181aa:	6879      	ldr	r1, [r7, #4]
 80181ac:	68bb      	ldr	r3, [r7, #8]
 80181ae:	68fa      	ldr	r2, [r7, #12]
 80181b0:	9202      	str	r2, [sp, #8]
 80181b2:	9301      	str	r3, [sp, #4]
 80181b4:	230a      	movs	r3, #10
 80181b6:	9300      	str	r3, [sp, #0]
 80181b8:	2300      	movs	r3, #0
 80181ba:	460a      	mov	r2, r1
 80181bc:	4910      	ldr	r1, [pc, #64]	; (8018200 <xTimerCreateTimerTask+0x84>)
 80181be:	4811      	ldr	r0, [pc, #68]	; (8018204 <xTimerCreateTimerTask+0x88>)
 80181c0:	f7fe ffe8 	bl	8017194 <xTaskCreateStatic>
 80181c4:	4602      	mov	r2, r0
 80181c6:	4b10      	ldr	r3, [pc, #64]	; (8018208 <xTimerCreateTimerTask+0x8c>)
 80181c8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80181ca:	4b0f      	ldr	r3, [pc, #60]	; (8018208 <xTimerCreateTimerTask+0x8c>)
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d001      	beq.n	80181d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80181d2:	2301      	movs	r3, #1
 80181d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80181d6:	697b      	ldr	r3, [r7, #20]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d109      	bne.n	80181f0 <xTimerCreateTimerTask+0x74>
 80181dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181e0:	f383 8811 	msr	BASEPRI, r3
 80181e4:	f3bf 8f6f 	isb	sy
 80181e8:	f3bf 8f4f 	dsb	sy
 80181ec:	613b      	str	r3, [r7, #16]
 80181ee:	e7fe      	b.n	80181ee <xTimerCreateTimerTask+0x72>
	return xReturn;
 80181f0:	697b      	ldr	r3, [r7, #20]
}
 80181f2:	4618      	mov	r0, r3
 80181f4:	3718      	adds	r7, #24
 80181f6:	46bd      	mov	sp, r7
 80181f8:	bd80      	pop	{r7, pc}
 80181fa:	bf00      	nop
 80181fc:	200015b4 	.word	0x200015b4
 8018200:	0801ea80 	.word	0x0801ea80
 8018204:	0801833d 	.word	0x0801833d
 8018208:	200015b8 	.word	0x200015b8

0801820c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b08a      	sub	sp, #40	; 0x28
 8018210:	af00      	add	r7, sp, #0
 8018212:	60f8      	str	r0, [r7, #12]
 8018214:	60b9      	str	r1, [r7, #8]
 8018216:	607a      	str	r2, [r7, #4]
 8018218:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801821a:	2300      	movs	r3, #0
 801821c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d109      	bne.n	8018238 <xTimerGenericCommand+0x2c>
 8018224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018228:	f383 8811 	msr	BASEPRI, r3
 801822c:	f3bf 8f6f 	isb	sy
 8018230:	f3bf 8f4f 	dsb	sy
 8018234:	623b      	str	r3, [r7, #32]
 8018236:	e7fe      	b.n	8018236 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018238:	4b19      	ldr	r3, [pc, #100]	; (80182a0 <xTimerGenericCommand+0x94>)
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d02a      	beq.n	8018296 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018240:	68bb      	ldr	r3, [r7, #8]
 8018242:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801824c:	68bb      	ldr	r3, [r7, #8]
 801824e:	2b05      	cmp	r3, #5
 8018250:	dc18      	bgt.n	8018284 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018252:	f7ff fdb9 	bl	8017dc8 <xTaskGetSchedulerState>
 8018256:	4603      	mov	r3, r0
 8018258:	2b02      	cmp	r3, #2
 801825a:	d109      	bne.n	8018270 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801825c:	4b10      	ldr	r3, [pc, #64]	; (80182a0 <xTimerGenericCommand+0x94>)
 801825e:	6818      	ldr	r0, [r3, #0]
 8018260:	f107 0110 	add.w	r1, r7, #16
 8018264:	2300      	movs	r3, #0
 8018266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018268:	f7fe f94a 	bl	8016500 <xQueueGenericSend>
 801826c:	6278      	str	r0, [r7, #36]	; 0x24
 801826e:	e012      	b.n	8018296 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018270:	4b0b      	ldr	r3, [pc, #44]	; (80182a0 <xTimerGenericCommand+0x94>)
 8018272:	6818      	ldr	r0, [r3, #0]
 8018274:	f107 0110 	add.w	r1, r7, #16
 8018278:	2300      	movs	r3, #0
 801827a:	2200      	movs	r2, #0
 801827c:	f7fe f940 	bl	8016500 <xQueueGenericSend>
 8018280:	6278      	str	r0, [r7, #36]	; 0x24
 8018282:	e008      	b.n	8018296 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018284:	4b06      	ldr	r3, [pc, #24]	; (80182a0 <xTimerGenericCommand+0x94>)
 8018286:	6818      	ldr	r0, [r3, #0]
 8018288:	f107 0110 	add.w	r1, r7, #16
 801828c:	2300      	movs	r3, #0
 801828e:	683a      	ldr	r2, [r7, #0]
 8018290:	f7fe fa30 	bl	80166f4 <xQueueGenericSendFromISR>
 8018294:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018298:	4618      	mov	r0, r3
 801829a:	3728      	adds	r7, #40	; 0x28
 801829c:	46bd      	mov	sp, r7
 801829e:	bd80      	pop	{r7, pc}
 80182a0:	200015b4 	.word	0x200015b4

080182a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b088      	sub	sp, #32
 80182a8:	af02      	add	r7, sp, #8
 80182aa:	6078      	str	r0, [r7, #4]
 80182ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80182ae:	4b22      	ldr	r3, [pc, #136]	; (8018338 <prvProcessExpiredTimer+0x94>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	68db      	ldr	r3, [r3, #12]
 80182b4:	68db      	ldr	r3, [r3, #12]
 80182b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80182b8:	697b      	ldr	r3, [r7, #20]
 80182ba:	3304      	adds	r3, #4
 80182bc:	4618      	mov	r0, r3
 80182be:	f7fd ff51 	bl	8016164 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80182c2:	697b      	ldr	r3, [r7, #20]
 80182c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80182c8:	f003 0304 	and.w	r3, r3, #4
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d021      	beq.n	8018314 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80182d0:	697b      	ldr	r3, [r7, #20]
 80182d2:	699a      	ldr	r2, [r3, #24]
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	18d1      	adds	r1, r2, r3
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	683a      	ldr	r2, [r7, #0]
 80182dc:	6978      	ldr	r0, [r7, #20]
 80182de:	f000 f8d1 	bl	8018484 <prvInsertTimerInActiveList>
 80182e2:	4603      	mov	r3, r0
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d01e      	beq.n	8018326 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80182e8:	2300      	movs	r3, #0
 80182ea:	9300      	str	r3, [sp, #0]
 80182ec:	2300      	movs	r3, #0
 80182ee:	687a      	ldr	r2, [r7, #4]
 80182f0:	2100      	movs	r1, #0
 80182f2:	6978      	ldr	r0, [r7, #20]
 80182f4:	f7ff ff8a 	bl	801820c <xTimerGenericCommand>
 80182f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80182fa:	693b      	ldr	r3, [r7, #16]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d112      	bne.n	8018326 <prvProcessExpiredTimer+0x82>
 8018300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018304:	f383 8811 	msr	BASEPRI, r3
 8018308:	f3bf 8f6f 	isb	sy
 801830c:	f3bf 8f4f 	dsb	sy
 8018310:	60fb      	str	r3, [r7, #12]
 8018312:	e7fe      	b.n	8018312 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018314:	697b      	ldr	r3, [r7, #20]
 8018316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801831a:	f023 0301 	bic.w	r3, r3, #1
 801831e:	b2da      	uxtb	r2, r3
 8018320:	697b      	ldr	r3, [r7, #20]
 8018322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018326:	697b      	ldr	r3, [r7, #20]
 8018328:	6a1b      	ldr	r3, [r3, #32]
 801832a:	6978      	ldr	r0, [r7, #20]
 801832c:	4798      	blx	r3
}
 801832e:	bf00      	nop
 8018330:	3718      	adds	r7, #24
 8018332:	46bd      	mov	sp, r7
 8018334:	bd80      	pop	{r7, pc}
 8018336:	bf00      	nop
 8018338:	200015ac 	.word	0x200015ac

0801833c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b084      	sub	sp, #16
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018344:	f107 0308 	add.w	r3, r7, #8
 8018348:	4618      	mov	r0, r3
 801834a:	f000 f857 	bl	80183fc <prvGetNextExpireTime>
 801834e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018350:	68bb      	ldr	r3, [r7, #8]
 8018352:	4619      	mov	r1, r3
 8018354:	68f8      	ldr	r0, [r7, #12]
 8018356:	f000 f803 	bl	8018360 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801835a:	f000 f8d5 	bl	8018508 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801835e:	e7f1      	b.n	8018344 <prvTimerTask+0x8>

08018360 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b084      	sub	sp, #16
 8018364:	af00      	add	r7, sp, #0
 8018366:	6078      	str	r0, [r7, #4]
 8018368:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801836a:	f7ff f949 	bl	8017600 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801836e:	f107 0308 	add.w	r3, r7, #8
 8018372:	4618      	mov	r0, r3
 8018374:	f000 f866 	bl	8018444 <prvSampleTimeNow>
 8018378:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801837a:	68bb      	ldr	r3, [r7, #8]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d130      	bne.n	80183e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018380:	683b      	ldr	r3, [r7, #0]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d10a      	bne.n	801839c <prvProcessTimerOrBlockTask+0x3c>
 8018386:	687a      	ldr	r2, [r7, #4]
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	429a      	cmp	r2, r3
 801838c:	d806      	bhi.n	801839c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801838e:	f7ff f945 	bl	801761c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018392:	68f9      	ldr	r1, [r7, #12]
 8018394:	6878      	ldr	r0, [r7, #4]
 8018396:	f7ff ff85 	bl	80182a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801839a:	e024      	b.n	80183e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801839c:	683b      	ldr	r3, [r7, #0]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d008      	beq.n	80183b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80183a2:	4b13      	ldr	r3, [pc, #76]	; (80183f0 <prvProcessTimerOrBlockTask+0x90>)
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d101      	bne.n	80183b0 <prvProcessTimerOrBlockTask+0x50>
 80183ac:	2301      	movs	r3, #1
 80183ae:	e000      	b.n	80183b2 <prvProcessTimerOrBlockTask+0x52>
 80183b0:	2300      	movs	r3, #0
 80183b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80183b4:	4b0f      	ldr	r3, [pc, #60]	; (80183f4 <prvProcessTimerOrBlockTask+0x94>)
 80183b6:	6818      	ldr	r0, [r3, #0]
 80183b8:	687a      	ldr	r2, [r7, #4]
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	1ad3      	subs	r3, r2, r3
 80183be:	683a      	ldr	r2, [r7, #0]
 80183c0:	4619      	mov	r1, r3
 80183c2:	f7fe feb3 	bl	801712c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80183c6:	f7ff f929 	bl	801761c <xTaskResumeAll>
 80183ca:	4603      	mov	r3, r0
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d10a      	bne.n	80183e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80183d0:	4b09      	ldr	r3, [pc, #36]	; (80183f8 <prvProcessTimerOrBlockTask+0x98>)
 80183d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183d6:	601a      	str	r2, [r3, #0]
 80183d8:	f3bf 8f4f 	dsb	sy
 80183dc:	f3bf 8f6f 	isb	sy
}
 80183e0:	e001      	b.n	80183e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80183e2:	f7ff f91b 	bl	801761c <xTaskResumeAll>
}
 80183e6:	bf00      	nop
 80183e8:	3710      	adds	r7, #16
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}
 80183ee:	bf00      	nop
 80183f0:	200015b0 	.word	0x200015b0
 80183f4:	200015b4 	.word	0x200015b4
 80183f8:	e000ed04 	.word	0xe000ed04

080183fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80183fc:	b480      	push	{r7}
 80183fe:	b085      	sub	sp, #20
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018404:	4b0e      	ldr	r3, [pc, #56]	; (8018440 <prvGetNextExpireTime+0x44>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d101      	bne.n	8018412 <prvGetNextExpireTime+0x16>
 801840e:	2201      	movs	r2, #1
 8018410:	e000      	b.n	8018414 <prvGetNextExpireTime+0x18>
 8018412:	2200      	movs	r2, #0
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d105      	bne.n	801842c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018420:	4b07      	ldr	r3, [pc, #28]	; (8018440 <prvGetNextExpireTime+0x44>)
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	68db      	ldr	r3, [r3, #12]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	60fb      	str	r3, [r7, #12]
 801842a:	e001      	b.n	8018430 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801842c:	2300      	movs	r3, #0
 801842e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018430:	68fb      	ldr	r3, [r7, #12]
}
 8018432:	4618      	mov	r0, r3
 8018434:	3714      	adds	r7, #20
 8018436:	46bd      	mov	sp, r7
 8018438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801843c:	4770      	bx	lr
 801843e:	bf00      	nop
 8018440:	200015ac 	.word	0x200015ac

08018444 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018444:	b580      	push	{r7, lr}
 8018446:	b084      	sub	sp, #16
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801844c:	f7ff f982 	bl	8017754 <xTaskGetTickCount>
 8018450:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018452:	4b0b      	ldr	r3, [pc, #44]	; (8018480 <prvSampleTimeNow+0x3c>)
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	68fa      	ldr	r2, [r7, #12]
 8018458:	429a      	cmp	r2, r3
 801845a:	d205      	bcs.n	8018468 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801845c:	f000 f930 	bl	80186c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	2201      	movs	r2, #1
 8018464:	601a      	str	r2, [r3, #0]
 8018466:	e002      	b.n	801846e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	2200      	movs	r2, #0
 801846c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801846e:	4a04      	ldr	r2, [pc, #16]	; (8018480 <prvSampleTimeNow+0x3c>)
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018474:	68fb      	ldr	r3, [r7, #12]
}
 8018476:	4618      	mov	r0, r3
 8018478:	3710      	adds	r7, #16
 801847a:	46bd      	mov	sp, r7
 801847c:	bd80      	pop	{r7, pc}
 801847e:	bf00      	nop
 8018480:	200015bc 	.word	0x200015bc

08018484 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018484:	b580      	push	{r7, lr}
 8018486:	b086      	sub	sp, #24
 8018488:	af00      	add	r7, sp, #0
 801848a:	60f8      	str	r0, [r7, #12]
 801848c:	60b9      	str	r1, [r7, #8]
 801848e:	607a      	str	r2, [r7, #4]
 8018490:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018492:	2300      	movs	r3, #0
 8018494:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	68ba      	ldr	r2, [r7, #8]
 801849a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	68fa      	ldr	r2, [r7, #12]
 80184a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80184a2:	68ba      	ldr	r2, [r7, #8]
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	429a      	cmp	r2, r3
 80184a8:	d812      	bhi.n	80184d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184aa:	687a      	ldr	r2, [r7, #4]
 80184ac:	683b      	ldr	r3, [r7, #0]
 80184ae:	1ad2      	subs	r2, r2, r3
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	699b      	ldr	r3, [r3, #24]
 80184b4:	429a      	cmp	r2, r3
 80184b6:	d302      	bcc.n	80184be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80184b8:	2301      	movs	r3, #1
 80184ba:	617b      	str	r3, [r7, #20]
 80184bc:	e01b      	b.n	80184f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80184be:	4b10      	ldr	r3, [pc, #64]	; (8018500 <prvInsertTimerInActiveList+0x7c>)
 80184c0:	681a      	ldr	r2, [r3, #0]
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	3304      	adds	r3, #4
 80184c6:	4619      	mov	r1, r3
 80184c8:	4610      	mov	r0, r2
 80184ca:	f7fd fe12 	bl	80160f2 <vListInsert>
 80184ce:	e012      	b.n	80184f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80184d0:	687a      	ldr	r2, [r7, #4]
 80184d2:	683b      	ldr	r3, [r7, #0]
 80184d4:	429a      	cmp	r2, r3
 80184d6:	d206      	bcs.n	80184e6 <prvInsertTimerInActiveList+0x62>
 80184d8:	68ba      	ldr	r2, [r7, #8]
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	429a      	cmp	r2, r3
 80184de:	d302      	bcc.n	80184e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80184e0:	2301      	movs	r3, #1
 80184e2:	617b      	str	r3, [r7, #20]
 80184e4:	e007      	b.n	80184f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80184e6:	4b07      	ldr	r3, [pc, #28]	; (8018504 <prvInsertTimerInActiveList+0x80>)
 80184e8:	681a      	ldr	r2, [r3, #0]
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	3304      	adds	r3, #4
 80184ee:	4619      	mov	r1, r3
 80184f0:	4610      	mov	r0, r2
 80184f2:	f7fd fdfe 	bl	80160f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80184f6:	697b      	ldr	r3, [r7, #20]
}
 80184f8:	4618      	mov	r0, r3
 80184fa:	3718      	adds	r7, #24
 80184fc:	46bd      	mov	sp, r7
 80184fe:	bd80      	pop	{r7, pc}
 8018500:	200015b0 	.word	0x200015b0
 8018504:	200015ac 	.word	0x200015ac

08018508 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018508:	b580      	push	{r7, lr}
 801850a:	b08e      	sub	sp, #56	; 0x38
 801850c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801850e:	e0c6      	b.n	801869e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	2b00      	cmp	r3, #0
 8018514:	da17      	bge.n	8018546 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018516:	1d3b      	adds	r3, r7, #4
 8018518:	3304      	adds	r3, #4
 801851a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801851e:	2b00      	cmp	r3, #0
 8018520:	d109      	bne.n	8018536 <prvProcessReceivedCommands+0x2e>
 8018522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018526:	f383 8811 	msr	BASEPRI, r3
 801852a:	f3bf 8f6f 	isb	sy
 801852e:	f3bf 8f4f 	dsb	sy
 8018532:	61fb      	str	r3, [r7, #28]
 8018534:	e7fe      	b.n	8018534 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801853c:	6850      	ldr	r0, [r2, #4]
 801853e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018540:	6892      	ldr	r2, [r2, #8]
 8018542:	4611      	mov	r1, r2
 8018544:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	2b00      	cmp	r3, #0
 801854a:	f2c0 80a7 	blt.w	801869c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018554:	695b      	ldr	r3, [r3, #20]
 8018556:	2b00      	cmp	r3, #0
 8018558:	d004      	beq.n	8018564 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801855c:	3304      	adds	r3, #4
 801855e:	4618      	mov	r0, r3
 8018560:	f7fd fe00 	bl	8016164 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018564:	463b      	mov	r3, r7
 8018566:	4618      	mov	r0, r3
 8018568:	f7ff ff6c 	bl	8018444 <prvSampleTimeNow>
 801856c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	2b09      	cmp	r3, #9
 8018572:	f200 8094 	bhi.w	801869e <prvProcessReceivedCommands+0x196>
 8018576:	a201      	add	r2, pc, #4	; (adr r2, 801857c <prvProcessReceivedCommands+0x74>)
 8018578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801857c:	080185a5 	.word	0x080185a5
 8018580:	080185a5 	.word	0x080185a5
 8018584:	080185a5 	.word	0x080185a5
 8018588:	08018617 	.word	0x08018617
 801858c:	0801862b 	.word	0x0801862b
 8018590:	08018673 	.word	0x08018673
 8018594:	080185a5 	.word	0x080185a5
 8018598:	080185a5 	.word	0x080185a5
 801859c:	08018617 	.word	0x08018617
 80185a0:	0801862b 	.word	0x0801862b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80185a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80185aa:	f043 0301 	orr.w	r3, r3, #1
 80185ae:	b2da      	uxtb	r2, r3
 80185b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80185b6:	68ba      	ldr	r2, [r7, #8]
 80185b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185ba:	699b      	ldr	r3, [r3, #24]
 80185bc:	18d1      	adds	r1, r2, r3
 80185be:	68bb      	ldr	r3, [r7, #8]
 80185c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185c4:	f7ff ff5e 	bl	8018484 <prvInsertTimerInActiveList>
 80185c8:	4603      	mov	r3, r0
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d067      	beq.n	801869e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80185ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d0:	6a1b      	ldr	r3, [r3, #32]
 80185d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80185d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80185dc:	f003 0304 	and.w	r3, r3, #4
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d05c      	beq.n	801869e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80185e4:	68ba      	ldr	r2, [r7, #8]
 80185e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185e8:	699b      	ldr	r3, [r3, #24]
 80185ea:	441a      	add	r2, r3
 80185ec:	2300      	movs	r3, #0
 80185ee:	9300      	str	r3, [sp, #0]
 80185f0:	2300      	movs	r3, #0
 80185f2:	2100      	movs	r1, #0
 80185f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185f6:	f7ff fe09 	bl	801820c <xTimerGenericCommand>
 80185fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80185fc:	6a3b      	ldr	r3, [r7, #32]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d14d      	bne.n	801869e <prvProcessReceivedCommands+0x196>
 8018602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018606:	f383 8811 	msr	BASEPRI, r3
 801860a:	f3bf 8f6f 	isb	sy
 801860e:	f3bf 8f4f 	dsb	sy
 8018612:	61bb      	str	r3, [r7, #24]
 8018614:	e7fe      	b.n	8018614 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801861c:	f023 0301 	bic.w	r3, r3, #1
 8018620:	b2da      	uxtb	r2, r3
 8018622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018628:	e039      	b.n	801869e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801862c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018630:	f043 0301 	orr.w	r3, r3, #1
 8018634:	b2da      	uxtb	r2, r3
 8018636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018638:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801863c:	68ba      	ldr	r2, [r7, #8]
 801863e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018640:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018644:	699b      	ldr	r3, [r3, #24]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d109      	bne.n	801865e <prvProcessReceivedCommands+0x156>
 801864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801864e:	f383 8811 	msr	BASEPRI, r3
 8018652:	f3bf 8f6f 	isb	sy
 8018656:	f3bf 8f4f 	dsb	sy
 801865a:	617b      	str	r3, [r7, #20]
 801865c:	e7fe      	b.n	801865c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018660:	699a      	ldr	r2, [r3, #24]
 8018662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018664:	18d1      	adds	r1, r2, r3
 8018666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801866a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801866c:	f7ff ff0a 	bl	8018484 <prvInsertTimerInActiveList>
					break;
 8018670:	e015      	b.n	801869e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018678:	f003 0302 	and.w	r3, r3, #2
 801867c:	2b00      	cmp	r3, #0
 801867e:	d103      	bne.n	8018688 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8018680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018682:	f000 fbc7 	bl	8018e14 <vPortFree>
 8018686:	e00a      	b.n	801869e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801868a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801868e:	f023 0301 	bic.w	r3, r3, #1
 8018692:	b2da      	uxtb	r2, r3
 8018694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801869a:	e000      	b.n	801869e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801869c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801869e:	4b07      	ldr	r3, [pc, #28]	; (80186bc <prvProcessReceivedCommands+0x1b4>)
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	1d39      	adds	r1, r7, #4
 80186a4:	2200      	movs	r2, #0
 80186a6:	4618      	mov	r0, r3
 80186a8:	f7fe f942 	bl	8016930 <xQueueReceive>
 80186ac:	4603      	mov	r3, r0
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	f47f af2e 	bne.w	8018510 <prvProcessReceivedCommands+0x8>
	}
}
 80186b4:	bf00      	nop
 80186b6:	3730      	adds	r7, #48	; 0x30
 80186b8:	46bd      	mov	sp, r7
 80186ba:	bd80      	pop	{r7, pc}
 80186bc:	200015b4 	.word	0x200015b4

080186c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b088      	sub	sp, #32
 80186c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80186c6:	e047      	b.n	8018758 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80186c8:	4b2d      	ldr	r3, [pc, #180]	; (8018780 <prvSwitchTimerLists+0xc0>)
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	68db      	ldr	r3, [r3, #12]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80186d2:	4b2b      	ldr	r3, [pc, #172]	; (8018780 <prvSwitchTimerLists+0xc0>)
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	68db      	ldr	r3, [r3, #12]
 80186d8:	68db      	ldr	r3, [r3, #12]
 80186da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	3304      	adds	r3, #4
 80186e0:	4618      	mov	r0, r3
 80186e2:	f7fd fd3f 	bl	8016164 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	6a1b      	ldr	r3, [r3, #32]
 80186ea:	68f8      	ldr	r0, [r7, #12]
 80186ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80186f4:	f003 0304 	and.w	r3, r3, #4
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d02d      	beq.n	8018758 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	699b      	ldr	r3, [r3, #24]
 8018700:	693a      	ldr	r2, [r7, #16]
 8018702:	4413      	add	r3, r2
 8018704:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018706:	68ba      	ldr	r2, [r7, #8]
 8018708:	693b      	ldr	r3, [r7, #16]
 801870a:	429a      	cmp	r2, r3
 801870c:	d90e      	bls.n	801872c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	68ba      	ldr	r2, [r7, #8]
 8018712:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	68fa      	ldr	r2, [r7, #12]
 8018718:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801871a:	4b19      	ldr	r3, [pc, #100]	; (8018780 <prvSwitchTimerLists+0xc0>)
 801871c:	681a      	ldr	r2, [r3, #0]
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	3304      	adds	r3, #4
 8018722:	4619      	mov	r1, r3
 8018724:	4610      	mov	r0, r2
 8018726:	f7fd fce4 	bl	80160f2 <vListInsert>
 801872a:	e015      	b.n	8018758 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801872c:	2300      	movs	r3, #0
 801872e:	9300      	str	r3, [sp, #0]
 8018730:	2300      	movs	r3, #0
 8018732:	693a      	ldr	r2, [r7, #16]
 8018734:	2100      	movs	r1, #0
 8018736:	68f8      	ldr	r0, [r7, #12]
 8018738:	f7ff fd68 	bl	801820c <xTimerGenericCommand>
 801873c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	2b00      	cmp	r3, #0
 8018742:	d109      	bne.n	8018758 <prvSwitchTimerLists+0x98>
 8018744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018748:	f383 8811 	msr	BASEPRI, r3
 801874c:	f3bf 8f6f 	isb	sy
 8018750:	f3bf 8f4f 	dsb	sy
 8018754:	603b      	str	r3, [r7, #0]
 8018756:	e7fe      	b.n	8018756 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018758:	4b09      	ldr	r3, [pc, #36]	; (8018780 <prvSwitchTimerLists+0xc0>)
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d1b2      	bne.n	80186c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018762:	4b07      	ldr	r3, [pc, #28]	; (8018780 <prvSwitchTimerLists+0xc0>)
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018768:	4b06      	ldr	r3, [pc, #24]	; (8018784 <prvSwitchTimerLists+0xc4>)
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	4a04      	ldr	r2, [pc, #16]	; (8018780 <prvSwitchTimerLists+0xc0>)
 801876e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018770:	4a04      	ldr	r2, [pc, #16]	; (8018784 <prvSwitchTimerLists+0xc4>)
 8018772:	697b      	ldr	r3, [r7, #20]
 8018774:	6013      	str	r3, [r2, #0]
}
 8018776:	bf00      	nop
 8018778:	3718      	adds	r7, #24
 801877a:	46bd      	mov	sp, r7
 801877c:	bd80      	pop	{r7, pc}
 801877e:	bf00      	nop
 8018780:	200015ac 	.word	0x200015ac
 8018784:	200015b0 	.word	0x200015b0

08018788 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018788:	b580      	push	{r7, lr}
 801878a:	b082      	sub	sp, #8
 801878c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801878e:	f000 f965 	bl	8018a5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018792:	4b15      	ldr	r3, [pc, #84]	; (80187e8 <prvCheckForValidListAndQueue+0x60>)
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d120      	bne.n	80187dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801879a:	4814      	ldr	r0, [pc, #80]	; (80187ec <prvCheckForValidListAndQueue+0x64>)
 801879c:	f7fd fc58 	bl	8016050 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80187a0:	4813      	ldr	r0, [pc, #76]	; (80187f0 <prvCheckForValidListAndQueue+0x68>)
 80187a2:	f7fd fc55 	bl	8016050 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80187a6:	4b13      	ldr	r3, [pc, #76]	; (80187f4 <prvCheckForValidListAndQueue+0x6c>)
 80187a8:	4a10      	ldr	r2, [pc, #64]	; (80187ec <prvCheckForValidListAndQueue+0x64>)
 80187aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80187ac:	4b12      	ldr	r3, [pc, #72]	; (80187f8 <prvCheckForValidListAndQueue+0x70>)
 80187ae:	4a10      	ldr	r2, [pc, #64]	; (80187f0 <prvCheckForValidListAndQueue+0x68>)
 80187b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80187b2:	2300      	movs	r3, #0
 80187b4:	9300      	str	r3, [sp, #0]
 80187b6:	4b11      	ldr	r3, [pc, #68]	; (80187fc <prvCheckForValidListAndQueue+0x74>)
 80187b8:	4a11      	ldr	r2, [pc, #68]	; (8018800 <prvCheckForValidListAndQueue+0x78>)
 80187ba:	2110      	movs	r1, #16
 80187bc:	200a      	movs	r0, #10
 80187be:	f7fd fd63 	bl	8016288 <xQueueGenericCreateStatic>
 80187c2:	4602      	mov	r2, r0
 80187c4:	4b08      	ldr	r3, [pc, #32]	; (80187e8 <prvCheckForValidListAndQueue+0x60>)
 80187c6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80187c8:	4b07      	ldr	r3, [pc, #28]	; (80187e8 <prvCheckForValidListAndQueue+0x60>)
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d005      	beq.n	80187dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80187d0:	4b05      	ldr	r3, [pc, #20]	; (80187e8 <prvCheckForValidListAndQueue+0x60>)
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	490b      	ldr	r1, [pc, #44]	; (8018804 <prvCheckForValidListAndQueue+0x7c>)
 80187d6:	4618      	mov	r0, r3
 80187d8:	f7fe fc56 	bl	8017088 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80187dc:	f000 f96c 	bl	8018ab8 <vPortExitCritical>
}
 80187e0:	bf00      	nop
 80187e2:	46bd      	mov	sp, r7
 80187e4:	bd80      	pop	{r7, pc}
 80187e6:	bf00      	nop
 80187e8:	200015b4 	.word	0x200015b4
 80187ec:	20001584 	.word	0x20001584
 80187f0:	20001598 	.word	0x20001598
 80187f4:	200015ac 	.word	0x200015ac
 80187f8:	200015b0 	.word	0x200015b0
 80187fc:	20001660 	.word	0x20001660
 8018800:	200015c0 	.word	0x200015c0
 8018804:	0801ea88 	.word	0x0801ea88

08018808 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018808:	b480      	push	{r7}
 801880a:	b085      	sub	sp, #20
 801880c:	af00      	add	r7, sp, #0
 801880e:	60f8      	str	r0, [r7, #12]
 8018810:	60b9      	str	r1, [r7, #8]
 8018812:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	3b04      	subs	r3, #4
 8018818:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	3b04      	subs	r3, #4
 8018826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018828:	68bb      	ldr	r3, [r7, #8]
 801882a:	f023 0201 	bic.w	r2, r3, #1
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	3b04      	subs	r3, #4
 8018836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018838:	4a0c      	ldr	r2, [pc, #48]	; (801886c <pxPortInitialiseStack+0x64>)
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	3b14      	subs	r3, #20
 8018842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018844:	687a      	ldr	r2, [r7, #4]
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	3b04      	subs	r3, #4
 801884e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	f06f 0202 	mvn.w	r2, #2
 8018856:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	3b20      	subs	r3, #32
 801885c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801885e:	68fb      	ldr	r3, [r7, #12]
}
 8018860:	4618      	mov	r0, r3
 8018862:	3714      	adds	r7, #20
 8018864:	46bd      	mov	sp, r7
 8018866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801886a:	4770      	bx	lr
 801886c:	08018871 	.word	0x08018871

08018870 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018870:	b480      	push	{r7}
 8018872:	b085      	sub	sp, #20
 8018874:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018876:	2300      	movs	r3, #0
 8018878:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801887a:	4b11      	ldr	r3, [pc, #68]	; (80188c0 <prvTaskExitError+0x50>)
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018882:	d009      	beq.n	8018898 <prvTaskExitError+0x28>
 8018884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018888:	f383 8811 	msr	BASEPRI, r3
 801888c:	f3bf 8f6f 	isb	sy
 8018890:	f3bf 8f4f 	dsb	sy
 8018894:	60fb      	str	r3, [r7, #12]
 8018896:	e7fe      	b.n	8018896 <prvTaskExitError+0x26>
 8018898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801889c:	f383 8811 	msr	BASEPRI, r3
 80188a0:	f3bf 8f6f 	isb	sy
 80188a4:	f3bf 8f4f 	dsb	sy
 80188a8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80188aa:	bf00      	nop
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d0fc      	beq.n	80188ac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80188b2:	bf00      	nop
 80188b4:	3714      	adds	r7, #20
 80188b6:	46bd      	mov	sp, r7
 80188b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188bc:	4770      	bx	lr
 80188be:	bf00      	nop
 80188c0:	20000114 	.word	0x20000114
	...

080188d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80188d0:	4b07      	ldr	r3, [pc, #28]	; (80188f0 <pxCurrentTCBConst2>)
 80188d2:	6819      	ldr	r1, [r3, #0]
 80188d4:	6808      	ldr	r0, [r1, #0]
 80188d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188da:	f380 8809 	msr	PSP, r0
 80188de:	f3bf 8f6f 	isb	sy
 80188e2:	f04f 0000 	mov.w	r0, #0
 80188e6:	f380 8811 	msr	BASEPRI, r0
 80188ea:	4770      	bx	lr
 80188ec:	f3af 8000 	nop.w

080188f0 <pxCurrentTCBConst2>:
 80188f0:	20001084 	.word	0x20001084
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80188f4:	bf00      	nop
 80188f6:	bf00      	nop

080188f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80188f8:	4808      	ldr	r0, [pc, #32]	; (801891c <prvPortStartFirstTask+0x24>)
 80188fa:	6800      	ldr	r0, [r0, #0]
 80188fc:	6800      	ldr	r0, [r0, #0]
 80188fe:	f380 8808 	msr	MSP, r0
 8018902:	f04f 0000 	mov.w	r0, #0
 8018906:	f380 8814 	msr	CONTROL, r0
 801890a:	b662      	cpsie	i
 801890c:	b661      	cpsie	f
 801890e:	f3bf 8f4f 	dsb	sy
 8018912:	f3bf 8f6f 	isb	sy
 8018916:	df00      	svc	0
 8018918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801891a:	bf00      	nop
 801891c:	e000ed08 	.word	0xe000ed08

08018920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b086      	sub	sp, #24
 8018924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018926:	4b44      	ldr	r3, [pc, #272]	; (8018a38 <xPortStartScheduler+0x118>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	4a44      	ldr	r2, [pc, #272]	; (8018a3c <xPortStartScheduler+0x11c>)
 801892c:	4293      	cmp	r3, r2
 801892e:	d109      	bne.n	8018944 <xPortStartScheduler+0x24>
 8018930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018934:	f383 8811 	msr	BASEPRI, r3
 8018938:	f3bf 8f6f 	isb	sy
 801893c:	f3bf 8f4f 	dsb	sy
 8018940:	613b      	str	r3, [r7, #16]
 8018942:	e7fe      	b.n	8018942 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018944:	4b3c      	ldr	r3, [pc, #240]	; (8018a38 <xPortStartScheduler+0x118>)
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	4a3d      	ldr	r2, [pc, #244]	; (8018a40 <xPortStartScheduler+0x120>)
 801894a:	4293      	cmp	r3, r2
 801894c:	d109      	bne.n	8018962 <xPortStartScheduler+0x42>
 801894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018952:	f383 8811 	msr	BASEPRI, r3
 8018956:	f3bf 8f6f 	isb	sy
 801895a:	f3bf 8f4f 	dsb	sy
 801895e:	60fb      	str	r3, [r7, #12]
 8018960:	e7fe      	b.n	8018960 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018962:	4b38      	ldr	r3, [pc, #224]	; (8018a44 <xPortStartScheduler+0x124>)
 8018964:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018966:	697b      	ldr	r3, [r7, #20]
 8018968:	781b      	ldrb	r3, [r3, #0]
 801896a:	b2db      	uxtb	r3, r3
 801896c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801896e:	697b      	ldr	r3, [r7, #20]
 8018970:	22ff      	movs	r2, #255	; 0xff
 8018972:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018974:	697b      	ldr	r3, [r7, #20]
 8018976:	781b      	ldrb	r3, [r3, #0]
 8018978:	b2db      	uxtb	r3, r3
 801897a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801897c:	78fb      	ldrb	r3, [r7, #3]
 801897e:	b2db      	uxtb	r3, r3
 8018980:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018984:	b2da      	uxtb	r2, r3
 8018986:	4b30      	ldr	r3, [pc, #192]	; (8018a48 <xPortStartScheduler+0x128>)
 8018988:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801898a:	4b30      	ldr	r3, [pc, #192]	; (8018a4c <xPortStartScheduler+0x12c>)
 801898c:	2207      	movs	r2, #7
 801898e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018990:	e009      	b.n	80189a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8018992:	4b2e      	ldr	r3, [pc, #184]	; (8018a4c <xPortStartScheduler+0x12c>)
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	3b01      	subs	r3, #1
 8018998:	4a2c      	ldr	r2, [pc, #176]	; (8018a4c <xPortStartScheduler+0x12c>)
 801899a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801899c:	78fb      	ldrb	r3, [r7, #3]
 801899e:	b2db      	uxtb	r3, r3
 80189a0:	005b      	lsls	r3, r3, #1
 80189a2:	b2db      	uxtb	r3, r3
 80189a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80189a6:	78fb      	ldrb	r3, [r7, #3]
 80189a8:	b2db      	uxtb	r3, r3
 80189aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80189ae:	2b80      	cmp	r3, #128	; 0x80
 80189b0:	d0ef      	beq.n	8018992 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80189b2:	4b26      	ldr	r3, [pc, #152]	; (8018a4c <xPortStartScheduler+0x12c>)
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	f1c3 0307 	rsb	r3, r3, #7
 80189ba:	2b04      	cmp	r3, #4
 80189bc:	d009      	beq.n	80189d2 <xPortStartScheduler+0xb2>
 80189be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189c2:	f383 8811 	msr	BASEPRI, r3
 80189c6:	f3bf 8f6f 	isb	sy
 80189ca:	f3bf 8f4f 	dsb	sy
 80189ce:	60bb      	str	r3, [r7, #8]
 80189d0:	e7fe      	b.n	80189d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80189d2:	4b1e      	ldr	r3, [pc, #120]	; (8018a4c <xPortStartScheduler+0x12c>)
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	021b      	lsls	r3, r3, #8
 80189d8:	4a1c      	ldr	r2, [pc, #112]	; (8018a4c <xPortStartScheduler+0x12c>)
 80189da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80189dc:	4b1b      	ldr	r3, [pc, #108]	; (8018a4c <xPortStartScheduler+0x12c>)
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80189e4:	4a19      	ldr	r2, [pc, #100]	; (8018a4c <xPortStartScheduler+0x12c>)
 80189e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	b2da      	uxtb	r2, r3
 80189ec:	697b      	ldr	r3, [r7, #20]
 80189ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80189f0:	4b17      	ldr	r3, [pc, #92]	; (8018a50 <xPortStartScheduler+0x130>)
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	4a16      	ldr	r2, [pc, #88]	; (8018a50 <xPortStartScheduler+0x130>)
 80189f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80189fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80189fc:	4b14      	ldr	r3, [pc, #80]	; (8018a50 <xPortStartScheduler+0x130>)
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	4a13      	ldr	r2, [pc, #76]	; (8018a50 <xPortStartScheduler+0x130>)
 8018a02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018a06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018a08:	f000 f8d6 	bl	8018bb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018a0c:	4b11      	ldr	r3, [pc, #68]	; (8018a54 <xPortStartScheduler+0x134>)
 8018a0e:	2200      	movs	r2, #0
 8018a10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018a12:	f000 f8f5 	bl	8018c00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018a16:	4b10      	ldr	r3, [pc, #64]	; (8018a58 <xPortStartScheduler+0x138>)
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	4a0f      	ldr	r2, [pc, #60]	; (8018a58 <xPortStartScheduler+0x138>)
 8018a1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018a20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018a22:	f7ff ff69 	bl	80188f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018a26:	f7fe ff6f 	bl	8017908 <vTaskSwitchContext>
	prvTaskExitError();
 8018a2a:	f7ff ff21 	bl	8018870 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018a2e:	2300      	movs	r3, #0
}
 8018a30:	4618      	mov	r0, r3
 8018a32:	3718      	adds	r7, #24
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bd80      	pop	{r7, pc}
 8018a38:	e000ed00 	.word	0xe000ed00
 8018a3c:	410fc271 	.word	0x410fc271
 8018a40:	410fc270 	.word	0x410fc270
 8018a44:	e000e400 	.word	0xe000e400
 8018a48:	200016b0 	.word	0x200016b0
 8018a4c:	200016b4 	.word	0x200016b4
 8018a50:	e000ed20 	.word	0xe000ed20
 8018a54:	20000114 	.word	0x20000114
 8018a58:	e000ef34 	.word	0xe000ef34

08018a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018a5c:	b480      	push	{r7}
 8018a5e:	b083      	sub	sp, #12
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a66:	f383 8811 	msr	BASEPRI, r3
 8018a6a:	f3bf 8f6f 	isb	sy
 8018a6e:	f3bf 8f4f 	dsb	sy
 8018a72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018a74:	4b0e      	ldr	r3, [pc, #56]	; (8018ab0 <vPortEnterCritical+0x54>)
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	3301      	adds	r3, #1
 8018a7a:	4a0d      	ldr	r2, [pc, #52]	; (8018ab0 <vPortEnterCritical+0x54>)
 8018a7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018a7e:	4b0c      	ldr	r3, [pc, #48]	; (8018ab0 <vPortEnterCritical+0x54>)
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	2b01      	cmp	r3, #1
 8018a84:	d10e      	bne.n	8018aa4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018a86:	4b0b      	ldr	r3, [pc, #44]	; (8018ab4 <vPortEnterCritical+0x58>)
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	b2db      	uxtb	r3, r3
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d009      	beq.n	8018aa4 <vPortEnterCritical+0x48>
 8018a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a94:	f383 8811 	msr	BASEPRI, r3
 8018a98:	f3bf 8f6f 	isb	sy
 8018a9c:	f3bf 8f4f 	dsb	sy
 8018aa0:	603b      	str	r3, [r7, #0]
 8018aa2:	e7fe      	b.n	8018aa2 <vPortEnterCritical+0x46>
	}
}
 8018aa4:	bf00      	nop
 8018aa6:	370c      	adds	r7, #12
 8018aa8:	46bd      	mov	sp, r7
 8018aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aae:	4770      	bx	lr
 8018ab0:	20000114 	.word	0x20000114
 8018ab4:	e000ed04 	.word	0xe000ed04

08018ab8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018ab8:	b480      	push	{r7}
 8018aba:	b083      	sub	sp, #12
 8018abc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018abe:	4b11      	ldr	r3, [pc, #68]	; (8018b04 <vPortExitCritical+0x4c>)
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d109      	bne.n	8018ada <vPortExitCritical+0x22>
 8018ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aca:	f383 8811 	msr	BASEPRI, r3
 8018ace:	f3bf 8f6f 	isb	sy
 8018ad2:	f3bf 8f4f 	dsb	sy
 8018ad6:	607b      	str	r3, [r7, #4]
 8018ad8:	e7fe      	b.n	8018ad8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8018ada:	4b0a      	ldr	r3, [pc, #40]	; (8018b04 <vPortExitCritical+0x4c>)
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	3b01      	subs	r3, #1
 8018ae0:	4a08      	ldr	r2, [pc, #32]	; (8018b04 <vPortExitCritical+0x4c>)
 8018ae2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018ae4:	4b07      	ldr	r3, [pc, #28]	; (8018b04 <vPortExitCritical+0x4c>)
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d104      	bne.n	8018af6 <vPortExitCritical+0x3e>
 8018aec:	2300      	movs	r3, #0
 8018aee:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018af0:	683b      	ldr	r3, [r7, #0]
 8018af2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8018af6:	bf00      	nop
 8018af8:	370c      	adds	r7, #12
 8018afa:	46bd      	mov	sp, r7
 8018afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b00:	4770      	bx	lr
 8018b02:	bf00      	nop
 8018b04:	20000114 	.word	0x20000114
	...

08018b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018b10:	f3ef 8009 	mrs	r0, PSP
 8018b14:	f3bf 8f6f 	isb	sy
 8018b18:	4b15      	ldr	r3, [pc, #84]	; (8018b70 <pxCurrentTCBConst>)
 8018b1a:	681a      	ldr	r2, [r3, #0]
 8018b1c:	f01e 0f10 	tst.w	lr, #16
 8018b20:	bf08      	it	eq
 8018b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b2a:	6010      	str	r0, [r2, #0]
 8018b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018b34:	f380 8811 	msr	BASEPRI, r0
 8018b38:	f3bf 8f4f 	dsb	sy
 8018b3c:	f3bf 8f6f 	isb	sy
 8018b40:	f7fe fee2 	bl	8017908 <vTaskSwitchContext>
 8018b44:	f04f 0000 	mov.w	r0, #0
 8018b48:	f380 8811 	msr	BASEPRI, r0
 8018b4c:	bc09      	pop	{r0, r3}
 8018b4e:	6819      	ldr	r1, [r3, #0]
 8018b50:	6808      	ldr	r0, [r1, #0]
 8018b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b56:	f01e 0f10 	tst.w	lr, #16
 8018b5a:	bf08      	it	eq
 8018b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018b60:	f380 8809 	msr	PSP, r0
 8018b64:	f3bf 8f6f 	isb	sy
 8018b68:	4770      	bx	lr
 8018b6a:	bf00      	nop
 8018b6c:	f3af 8000 	nop.w

08018b70 <pxCurrentTCBConst>:
 8018b70:	20001084 	.word	0x20001084
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018b74:	bf00      	nop
 8018b76:	bf00      	nop

08018b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b082      	sub	sp, #8
 8018b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8018b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b82:	f383 8811 	msr	BASEPRI, r3
 8018b86:	f3bf 8f6f 	isb	sy
 8018b8a:	f3bf 8f4f 	dsb	sy
 8018b8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018b90:	f7fe fe02 	bl	8017798 <xTaskIncrementTick>
 8018b94:	4603      	mov	r3, r0
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d003      	beq.n	8018ba2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018b9a:	4b06      	ldr	r3, [pc, #24]	; (8018bb4 <SysTick_Handler+0x3c>)
 8018b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ba0:	601a      	str	r2, [r3, #0]
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018ba6:	683b      	ldr	r3, [r7, #0]
 8018ba8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8018bac:	bf00      	nop
 8018bae:	3708      	adds	r7, #8
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}
 8018bb4:	e000ed04 	.word	0xe000ed04

08018bb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018bb8:	b480      	push	{r7}
 8018bba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018bbc:	4b0b      	ldr	r3, [pc, #44]	; (8018bec <vPortSetupTimerInterrupt+0x34>)
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018bc2:	4b0b      	ldr	r3, [pc, #44]	; (8018bf0 <vPortSetupTimerInterrupt+0x38>)
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018bc8:	4b0a      	ldr	r3, [pc, #40]	; (8018bf4 <vPortSetupTimerInterrupt+0x3c>)
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	4a0a      	ldr	r2, [pc, #40]	; (8018bf8 <vPortSetupTimerInterrupt+0x40>)
 8018bce:	fba2 2303 	umull	r2, r3, r2, r3
 8018bd2:	099b      	lsrs	r3, r3, #6
 8018bd4:	4a09      	ldr	r2, [pc, #36]	; (8018bfc <vPortSetupTimerInterrupt+0x44>)
 8018bd6:	3b01      	subs	r3, #1
 8018bd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018bda:	4b04      	ldr	r3, [pc, #16]	; (8018bec <vPortSetupTimerInterrupt+0x34>)
 8018bdc:	2207      	movs	r2, #7
 8018bde:	601a      	str	r2, [r3, #0]
}
 8018be0:	bf00      	nop
 8018be2:	46bd      	mov	sp, r7
 8018be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be8:	4770      	bx	lr
 8018bea:	bf00      	nop
 8018bec:	e000e010 	.word	0xe000e010
 8018bf0:	e000e018 	.word	0xe000e018
 8018bf4:	20000108 	.word	0x20000108
 8018bf8:	10624dd3 	.word	0x10624dd3
 8018bfc:	e000e014 	.word	0xe000e014

08018c00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018c00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018c10 <vPortEnableVFP+0x10>
 8018c04:	6801      	ldr	r1, [r0, #0]
 8018c06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018c0a:	6001      	str	r1, [r0, #0]
 8018c0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018c0e:	bf00      	nop
 8018c10:	e000ed88 	.word	0xe000ed88

08018c14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018c14:	b480      	push	{r7}
 8018c16:	b085      	sub	sp, #20
 8018c18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018c1a:	f3ef 8305 	mrs	r3, IPSR
 8018c1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	2b0f      	cmp	r3, #15
 8018c24:	d913      	bls.n	8018c4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018c26:	4a16      	ldr	r2, [pc, #88]	; (8018c80 <vPortValidateInterruptPriority+0x6c>)
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	4413      	add	r3, r2
 8018c2c:	781b      	ldrb	r3, [r3, #0]
 8018c2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018c30:	4b14      	ldr	r3, [pc, #80]	; (8018c84 <vPortValidateInterruptPriority+0x70>)
 8018c32:	781b      	ldrb	r3, [r3, #0]
 8018c34:	7afa      	ldrb	r2, [r7, #11]
 8018c36:	429a      	cmp	r2, r3
 8018c38:	d209      	bcs.n	8018c4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8018c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c3e:	f383 8811 	msr	BASEPRI, r3
 8018c42:	f3bf 8f6f 	isb	sy
 8018c46:	f3bf 8f4f 	dsb	sy
 8018c4a:	607b      	str	r3, [r7, #4]
 8018c4c:	e7fe      	b.n	8018c4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018c4e:	4b0e      	ldr	r3, [pc, #56]	; (8018c88 <vPortValidateInterruptPriority+0x74>)
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018c56:	4b0d      	ldr	r3, [pc, #52]	; (8018c8c <vPortValidateInterruptPriority+0x78>)
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	429a      	cmp	r2, r3
 8018c5c:	d909      	bls.n	8018c72 <vPortValidateInterruptPriority+0x5e>
 8018c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c62:	f383 8811 	msr	BASEPRI, r3
 8018c66:	f3bf 8f6f 	isb	sy
 8018c6a:	f3bf 8f4f 	dsb	sy
 8018c6e:	603b      	str	r3, [r7, #0]
 8018c70:	e7fe      	b.n	8018c70 <vPortValidateInterruptPriority+0x5c>
	}
 8018c72:	bf00      	nop
 8018c74:	3714      	adds	r7, #20
 8018c76:	46bd      	mov	sp, r7
 8018c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c7c:	4770      	bx	lr
 8018c7e:	bf00      	nop
 8018c80:	e000e3f0 	.word	0xe000e3f0
 8018c84:	200016b0 	.word	0x200016b0
 8018c88:	e000ed0c 	.word	0xe000ed0c
 8018c8c:	200016b4 	.word	0x200016b4

08018c90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b08a      	sub	sp, #40	; 0x28
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018c98:	2300      	movs	r3, #0
 8018c9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018c9c:	f7fe fcb0 	bl	8017600 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018ca0:	4b57      	ldr	r3, [pc, #348]	; (8018e00 <pvPortMalloc+0x170>)
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d101      	bne.n	8018cac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018ca8:	f000 f90c 	bl	8018ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018cac:	4b55      	ldr	r3, [pc, #340]	; (8018e04 <pvPortMalloc+0x174>)
 8018cae:	681a      	ldr	r2, [r3, #0]
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	4013      	ands	r3, r2
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	f040 808c 	bne.w	8018dd2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d01c      	beq.n	8018cfa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8018cc0:	2208      	movs	r2, #8
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	4413      	add	r3, r2
 8018cc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	f003 0307 	and.w	r3, r3, #7
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d013      	beq.n	8018cfa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	f023 0307 	bic.w	r3, r3, #7
 8018cd8:	3308      	adds	r3, #8
 8018cda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	f003 0307 	and.w	r3, r3, #7
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d009      	beq.n	8018cfa <pvPortMalloc+0x6a>
 8018ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cea:	f383 8811 	msr	BASEPRI, r3
 8018cee:	f3bf 8f6f 	isb	sy
 8018cf2:	f3bf 8f4f 	dsb	sy
 8018cf6:	617b      	str	r3, [r7, #20]
 8018cf8:	e7fe      	b.n	8018cf8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d068      	beq.n	8018dd2 <pvPortMalloc+0x142>
 8018d00:	4b41      	ldr	r3, [pc, #260]	; (8018e08 <pvPortMalloc+0x178>)
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	687a      	ldr	r2, [r7, #4]
 8018d06:	429a      	cmp	r2, r3
 8018d08:	d863      	bhi.n	8018dd2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018d0a:	4b40      	ldr	r3, [pc, #256]	; (8018e0c <pvPortMalloc+0x17c>)
 8018d0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018d0e:	4b3f      	ldr	r3, [pc, #252]	; (8018e0c <pvPortMalloc+0x17c>)
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018d14:	e004      	b.n	8018d20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8018d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d22:	685b      	ldr	r3, [r3, #4]
 8018d24:	687a      	ldr	r2, [r7, #4]
 8018d26:	429a      	cmp	r2, r3
 8018d28:	d903      	bls.n	8018d32 <pvPortMalloc+0xa2>
 8018d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d1f1      	bne.n	8018d16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018d32:	4b33      	ldr	r3, [pc, #204]	; (8018e00 <pvPortMalloc+0x170>)
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d38:	429a      	cmp	r2, r3
 8018d3a:	d04a      	beq.n	8018dd2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018d3c:	6a3b      	ldr	r3, [r7, #32]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	2208      	movs	r2, #8
 8018d42:	4413      	add	r3, r2
 8018d44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d48:	681a      	ldr	r2, [r3, #0]
 8018d4a:	6a3b      	ldr	r3, [r7, #32]
 8018d4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d50:	685a      	ldr	r2, [r3, #4]
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	1ad2      	subs	r2, r2, r3
 8018d56:	2308      	movs	r3, #8
 8018d58:	005b      	lsls	r3, r3, #1
 8018d5a:	429a      	cmp	r2, r3
 8018d5c:	d91e      	bls.n	8018d9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	4413      	add	r3, r2
 8018d64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018d66:	69bb      	ldr	r3, [r7, #24]
 8018d68:	f003 0307 	and.w	r3, r3, #7
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d009      	beq.n	8018d84 <pvPortMalloc+0xf4>
 8018d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d74:	f383 8811 	msr	BASEPRI, r3
 8018d78:	f3bf 8f6f 	isb	sy
 8018d7c:	f3bf 8f4f 	dsb	sy
 8018d80:	613b      	str	r3, [r7, #16]
 8018d82:	e7fe      	b.n	8018d82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d86:	685a      	ldr	r2, [r3, #4]
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	1ad2      	subs	r2, r2, r3
 8018d8c:	69bb      	ldr	r3, [r7, #24]
 8018d8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d92:	687a      	ldr	r2, [r7, #4]
 8018d94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018d96:	69b8      	ldr	r0, [r7, #24]
 8018d98:	f000 f8f6 	bl	8018f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018d9c:	4b1a      	ldr	r3, [pc, #104]	; (8018e08 <pvPortMalloc+0x178>)
 8018d9e:	681a      	ldr	r2, [r3, #0]
 8018da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018da2:	685b      	ldr	r3, [r3, #4]
 8018da4:	1ad3      	subs	r3, r2, r3
 8018da6:	4a18      	ldr	r2, [pc, #96]	; (8018e08 <pvPortMalloc+0x178>)
 8018da8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018daa:	4b17      	ldr	r3, [pc, #92]	; (8018e08 <pvPortMalloc+0x178>)
 8018dac:	681a      	ldr	r2, [r3, #0]
 8018dae:	4b18      	ldr	r3, [pc, #96]	; (8018e10 <pvPortMalloc+0x180>)
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	429a      	cmp	r2, r3
 8018db4:	d203      	bcs.n	8018dbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018db6:	4b14      	ldr	r3, [pc, #80]	; (8018e08 <pvPortMalloc+0x178>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	4a15      	ldr	r2, [pc, #84]	; (8018e10 <pvPortMalloc+0x180>)
 8018dbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc0:	685a      	ldr	r2, [r3, #4]
 8018dc2:	4b10      	ldr	r3, [pc, #64]	; (8018e04 <pvPortMalloc+0x174>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	431a      	orrs	r2, r3
 8018dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dce:	2200      	movs	r2, #0
 8018dd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018dd2:	f7fe fc23 	bl	801761c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018dd6:	69fb      	ldr	r3, [r7, #28]
 8018dd8:	f003 0307 	and.w	r3, r3, #7
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d009      	beq.n	8018df4 <pvPortMalloc+0x164>
 8018de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018de4:	f383 8811 	msr	BASEPRI, r3
 8018de8:	f3bf 8f6f 	isb	sy
 8018dec:	f3bf 8f4f 	dsb	sy
 8018df0:	60fb      	str	r3, [r7, #12]
 8018df2:	e7fe      	b.n	8018df2 <pvPortMalloc+0x162>
	return pvReturn;
 8018df4:	69fb      	ldr	r3, [r7, #28]
}
 8018df6:	4618      	mov	r0, r3
 8018df8:	3728      	adds	r7, #40	; 0x28
 8018dfa:	46bd      	mov	sp, r7
 8018dfc:	bd80      	pop	{r7, pc}
 8018dfe:	bf00      	nop
 8018e00:	200052c0 	.word	0x200052c0
 8018e04:	200052cc 	.word	0x200052cc
 8018e08:	200052c4 	.word	0x200052c4
 8018e0c:	200052b8 	.word	0x200052b8
 8018e10:	200052c8 	.word	0x200052c8

08018e14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b086      	sub	sp, #24
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d046      	beq.n	8018eb4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018e26:	2308      	movs	r3, #8
 8018e28:	425b      	negs	r3, r3
 8018e2a:	697a      	ldr	r2, [r7, #20]
 8018e2c:	4413      	add	r3, r2
 8018e2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018e30:	697b      	ldr	r3, [r7, #20]
 8018e32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018e34:	693b      	ldr	r3, [r7, #16]
 8018e36:	685a      	ldr	r2, [r3, #4]
 8018e38:	4b20      	ldr	r3, [pc, #128]	; (8018ebc <vPortFree+0xa8>)
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	4013      	ands	r3, r2
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d109      	bne.n	8018e56 <vPortFree+0x42>
 8018e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e46:	f383 8811 	msr	BASEPRI, r3
 8018e4a:	f3bf 8f6f 	isb	sy
 8018e4e:	f3bf 8f4f 	dsb	sy
 8018e52:	60fb      	str	r3, [r7, #12]
 8018e54:	e7fe      	b.n	8018e54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018e56:	693b      	ldr	r3, [r7, #16]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d009      	beq.n	8018e72 <vPortFree+0x5e>
 8018e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e62:	f383 8811 	msr	BASEPRI, r3
 8018e66:	f3bf 8f6f 	isb	sy
 8018e6a:	f3bf 8f4f 	dsb	sy
 8018e6e:	60bb      	str	r3, [r7, #8]
 8018e70:	e7fe      	b.n	8018e70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018e72:	693b      	ldr	r3, [r7, #16]
 8018e74:	685a      	ldr	r2, [r3, #4]
 8018e76:	4b11      	ldr	r3, [pc, #68]	; (8018ebc <vPortFree+0xa8>)
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	4013      	ands	r3, r2
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d019      	beq.n	8018eb4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018e80:	693b      	ldr	r3, [r7, #16]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d115      	bne.n	8018eb4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018e88:	693b      	ldr	r3, [r7, #16]
 8018e8a:	685a      	ldr	r2, [r3, #4]
 8018e8c:	4b0b      	ldr	r3, [pc, #44]	; (8018ebc <vPortFree+0xa8>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	43db      	mvns	r3, r3
 8018e92:	401a      	ands	r2, r3
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018e98:	f7fe fbb2 	bl	8017600 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018e9c:	693b      	ldr	r3, [r7, #16]
 8018e9e:	685a      	ldr	r2, [r3, #4]
 8018ea0:	4b07      	ldr	r3, [pc, #28]	; (8018ec0 <vPortFree+0xac>)
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	4413      	add	r3, r2
 8018ea6:	4a06      	ldr	r2, [pc, #24]	; (8018ec0 <vPortFree+0xac>)
 8018ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018eaa:	6938      	ldr	r0, [r7, #16]
 8018eac:	f000 f86c 	bl	8018f88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8018eb0:	f7fe fbb4 	bl	801761c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018eb4:	bf00      	nop
 8018eb6:	3718      	adds	r7, #24
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	bd80      	pop	{r7, pc}
 8018ebc:	200052cc 	.word	0x200052cc
 8018ec0:	200052c4 	.word	0x200052c4

08018ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018ec4:	b480      	push	{r7}
 8018ec6:	b085      	sub	sp, #20
 8018ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8018ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018ed0:	4b27      	ldr	r3, [pc, #156]	; (8018f70 <prvHeapInit+0xac>)
 8018ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	f003 0307 	and.w	r3, r3, #7
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d00c      	beq.n	8018ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018ede:	68fb      	ldr	r3, [r7, #12]
 8018ee0:	3307      	adds	r3, #7
 8018ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	f023 0307 	bic.w	r3, r3, #7
 8018eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018eec:	68ba      	ldr	r2, [r7, #8]
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	1ad3      	subs	r3, r2, r3
 8018ef2:	4a1f      	ldr	r2, [pc, #124]	; (8018f70 <prvHeapInit+0xac>)
 8018ef4:	4413      	add	r3, r2
 8018ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018efc:	4a1d      	ldr	r2, [pc, #116]	; (8018f74 <prvHeapInit+0xb0>)
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018f02:	4b1c      	ldr	r3, [pc, #112]	; (8018f74 <prvHeapInit+0xb0>)
 8018f04:	2200      	movs	r2, #0
 8018f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	68ba      	ldr	r2, [r7, #8]
 8018f0c:	4413      	add	r3, r2
 8018f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018f10:	2208      	movs	r2, #8
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	1a9b      	subs	r3, r3, r2
 8018f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	f023 0307 	bic.w	r3, r3, #7
 8018f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	4a15      	ldr	r2, [pc, #84]	; (8018f78 <prvHeapInit+0xb4>)
 8018f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018f26:	4b14      	ldr	r3, [pc, #80]	; (8018f78 <prvHeapInit+0xb4>)
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018f2e:	4b12      	ldr	r3, [pc, #72]	; (8018f78 <prvHeapInit+0xb4>)
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	2200      	movs	r2, #0
 8018f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018f3a:	683b      	ldr	r3, [r7, #0]
 8018f3c:	68fa      	ldr	r2, [r7, #12]
 8018f3e:	1ad2      	subs	r2, r2, r3
 8018f40:	683b      	ldr	r3, [r7, #0]
 8018f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018f44:	4b0c      	ldr	r3, [pc, #48]	; (8018f78 <prvHeapInit+0xb4>)
 8018f46:	681a      	ldr	r2, [r3, #0]
 8018f48:	683b      	ldr	r3, [r7, #0]
 8018f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018f4c:	683b      	ldr	r3, [r7, #0]
 8018f4e:	685b      	ldr	r3, [r3, #4]
 8018f50:	4a0a      	ldr	r2, [pc, #40]	; (8018f7c <prvHeapInit+0xb8>)
 8018f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018f54:	683b      	ldr	r3, [r7, #0]
 8018f56:	685b      	ldr	r3, [r3, #4]
 8018f58:	4a09      	ldr	r2, [pc, #36]	; (8018f80 <prvHeapInit+0xbc>)
 8018f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018f5c:	4b09      	ldr	r3, [pc, #36]	; (8018f84 <prvHeapInit+0xc0>)
 8018f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018f62:	601a      	str	r2, [r3, #0]
}
 8018f64:	bf00      	nop
 8018f66:	3714      	adds	r7, #20
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6e:	4770      	bx	lr
 8018f70:	200016b8 	.word	0x200016b8
 8018f74:	200052b8 	.word	0x200052b8
 8018f78:	200052c0 	.word	0x200052c0
 8018f7c:	200052c8 	.word	0x200052c8
 8018f80:	200052c4 	.word	0x200052c4
 8018f84:	200052cc 	.word	0x200052cc

08018f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018f88:	b480      	push	{r7}
 8018f8a:	b085      	sub	sp, #20
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018f90:	4b28      	ldr	r3, [pc, #160]	; (8019034 <prvInsertBlockIntoFreeList+0xac>)
 8018f92:	60fb      	str	r3, [r7, #12]
 8018f94:	e002      	b.n	8018f9c <prvInsertBlockIntoFreeList+0x14>
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	60fb      	str	r3, [r7, #12]
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	687a      	ldr	r2, [r7, #4]
 8018fa2:	429a      	cmp	r2, r3
 8018fa4:	d8f7      	bhi.n	8018f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	685b      	ldr	r3, [r3, #4]
 8018fae:	68ba      	ldr	r2, [r7, #8]
 8018fb0:	4413      	add	r3, r2
 8018fb2:	687a      	ldr	r2, [r7, #4]
 8018fb4:	429a      	cmp	r2, r3
 8018fb6:	d108      	bne.n	8018fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	685a      	ldr	r2, [r3, #4]
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	685b      	ldr	r3, [r3, #4]
 8018fc0:	441a      	add	r2, r3
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	685b      	ldr	r3, [r3, #4]
 8018fd2:	68ba      	ldr	r2, [r7, #8]
 8018fd4:	441a      	add	r2, r3
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	429a      	cmp	r2, r3
 8018fdc:	d118      	bne.n	8019010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	681a      	ldr	r2, [r3, #0]
 8018fe2:	4b15      	ldr	r3, [pc, #84]	; (8019038 <prvInsertBlockIntoFreeList+0xb0>)
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	429a      	cmp	r2, r3
 8018fe8:	d00d      	beq.n	8019006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	685a      	ldr	r2, [r3, #4]
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	685b      	ldr	r3, [r3, #4]
 8018ff4:	441a      	add	r2, r3
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	681a      	ldr	r2, [r3, #0]
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	601a      	str	r2, [r3, #0]
 8019004:	e008      	b.n	8019018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019006:	4b0c      	ldr	r3, [pc, #48]	; (8019038 <prvInsertBlockIntoFreeList+0xb0>)
 8019008:	681a      	ldr	r2, [r3, #0]
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	601a      	str	r2, [r3, #0]
 801900e:	e003      	b.n	8019018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	681a      	ldr	r2, [r3, #0]
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019018:	68fa      	ldr	r2, [r7, #12]
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	429a      	cmp	r2, r3
 801901e:	d002      	beq.n	8019026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	687a      	ldr	r2, [r7, #4]
 8019024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019026:	bf00      	nop
 8019028:	3714      	adds	r7, #20
 801902a:	46bd      	mov	sp, r7
 801902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019030:	4770      	bx	lr
 8019032:	bf00      	nop
 8019034:	200052b8 	.word	0x200052b8
 8019038:	200052c0 	.word	0x200052c0

0801903c <cosf>:
 801903c:	ee10 3a10 	vmov	r3, s0
 8019040:	b507      	push	{r0, r1, r2, lr}
 8019042:	4a1c      	ldr	r2, [pc, #112]	; (80190b4 <cosf+0x78>)
 8019044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019048:	4293      	cmp	r3, r2
 801904a:	dc04      	bgt.n	8019056 <cosf+0x1a>
 801904c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80190b8 <cosf+0x7c>
 8019050:	f000 fbe6 	bl	8019820 <__kernel_cosf>
 8019054:	e004      	b.n	8019060 <cosf+0x24>
 8019056:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801905a:	db04      	blt.n	8019066 <cosf+0x2a>
 801905c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019060:	b003      	add	sp, #12
 8019062:	f85d fb04 	ldr.w	pc, [sp], #4
 8019066:	4668      	mov	r0, sp
 8019068:	f000 faaa 	bl	80195c0 <__ieee754_rem_pio2f>
 801906c:	f000 0003 	and.w	r0, r0, #3
 8019070:	2801      	cmp	r0, #1
 8019072:	d007      	beq.n	8019084 <cosf+0x48>
 8019074:	2802      	cmp	r0, #2
 8019076:	d00e      	beq.n	8019096 <cosf+0x5a>
 8019078:	b9a0      	cbnz	r0, 80190a4 <cosf+0x68>
 801907a:	eddd 0a01 	vldr	s1, [sp, #4]
 801907e:	ed9d 0a00 	vldr	s0, [sp]
 8019082:	e7e5      	b.n	8019050 <cosf+0x14>
 8019084:	eddd 0a01 	vldr	s1, [sp, #4]
 8019088:	ed9d 0a00 	vldr	s0, [sp]
 801908c:	f000 fea8 	bl	8019de0 <__kernel_sinf>
 8019090:	eeb1 0a40 	vneg.f32	s0, s0
 8019094:	e7e4      	b.n	8019060 <cosf+0x24>
 8019096:	eddd 0a01 	vldr	s1, [sp, #4]
 801909a:	ed9d 0a00 	vldr	s0, [sp]
 801909e:	f000 fbbf 	bl	8019820 <__kernel_cosf>
 80190a2:	e7f5      	b.n	8019090 <cosf+0x54>
 80190a4:	2001      	movs	r0, #1
 80190a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80190aa:	ed9d 0a00 	vldr	s0, [sp]
 80190ae:	f000 fe97 	bl	8019de0 <__kernel_sinf>
 80190b2:	e7d5      	b.n	8019060 <cosf+0x24>
 80190b4:	3f490fd8 	.word	0x3f490fd8
 80190b8:	00000000 	.word	0x00000000

080190bc <sinf>:
 80190bc:	ee10 3a10 	vmov	r3, s0
 80190c0:	b507      	push	{r0, r1, r2, lr}
 80190c2:	4a1d      	ldr	r2, [pc, #116]	; (8019138 <sinf+0x7c>)
 80190c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80190c8:	4293      	cmp	r3, r2
 80190ca:	dc05      	bgt.n	80190d8 <sinf+0x1c>
 80190cc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801913c <sinf+0x80>
 80190d0:	2000      	movs	r0, #0
 80190d2:	f000 fe85 	bl	8019de0 <__kernel_sinf>
 80190d6:	e004      	b.n	80190e2 <sinf+0x26>
 80190d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80190dc:	db04      	blt.n	80190e8 <sinf+0x2c>
 80190de:	ee30 0a40 	vsub.f32	s0, s0, s0
 80190e2:	b003      	add	sp, #12
 80190e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80190e8:	4668      	mov	r0, sp
 80190ea:	f000 fa69 	bl	80195c0 <__ieee754_rem_pio2f>
 80190ee:	f000 0003 	and.w	r0, r0, #3
 80190f2:	2801      	cmp	r0, #1
 80190f4:	d008      	beq.n	8019108 <sinf+0x4c>
 80190f6:	2802      	cmp	r0, #2
 80190f8:	d00d      	beq.n	8019116 <sinf+0x5a>
 80190fa:	b9b0      	cbnz	r0, 801912a <sinf+0x6e>
 80190fc:	2001      	movs	r0, #1
 80190fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8019102:	ed9d 0a00 	vldr	s0, [sp]
 8019106:	e7e4      	b.n	80190d2 <sinf+0x16>
 8019108:	eddd 0a01 	vldr	s1, [sp, #4]
 801910c:	ed9d 0a00 	vldr	s0, [sp]
 8019110:	f000 fb86 	bl	8019820 <__kernel_cosf>
 8019114:	e7e5      	b.n	80190e2 <sinf+0x26>
 8019116:	2001      	movs	r0, #1
 8019118:	eddd 0a01 	vldr	s1, [sp, #4]
 801911c:	ed9d 0a00 	vldr	s0, [sp]
 8019120:	f000 fe5e 	bl	8019de0 <__kernel_sinf>
 8019124:	eeb1 0a40 	vneg.f32	s0, s0
 8019128:	e7db      	b.n	80190e2 <sinf+0x26>
 801912a:	eddd 0a01 	vldr	s1, [sp, #4]
 801912e:	ed9d 0a00 	vldr	s0, [sp]
 8019132:	f000 fb75 	bl	8019820 <__kernel_cosf>
 8019136:	e7f5      	b.n	8019124 <sinf+0x68>
 8019138:	3f490fd8 	.word	0x3f490fd8
 801913c:	00000000 	.word	0x00000000

08019140 <asinf>:
 8019140:	b510      	push	{r4, lr}
 8019142:	ed2d 8b02 	vpush	{d8}
 8019146:	4c27      	ldr	r4, [pc, #156]	; (80191e4 <asinf+0xa4>)
 8019148:	b08a      	sub	sp, #40	; 0x28
 801914a:	eeb0 8a40 	vmov.f32	s16, s0
 801914e:	f000 f8a1 	bl	8019294 <__ieee754_asinf>
 8019152:	f994 3000 	ldrsb.w	r3, [r4]
 8019156:	3301      	adds	r3, #1
 8019158:	eef0 8a40 	vmov.f32	s17, s0
 801915c:	d03c      	beq.n	80191d8 <asinf+0x98>
 801915e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019166:	d637      	bvs.n	80191d8 <asinf+0x98>
 8019168:	eeb0 0a48 	vmov.f32	s0, s16
 801916c:	f000 ff60 	bl	801a030 <fabsf>
 8019170:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019174:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801917c:	dd2c      	ble.n	80191d8 <asinf+0x98>
 801917e:	2301      	movs	r3, #1
 8019180:	9300      	str	r3, [sp, #0]
 8019182:	4b19      	ldr	r3, [pc, #100]	; (80191e8 <asinf+0xa8>)
 8019184:	9301      	str	r3, [sp, #4]
 8019186:	ee18 0a10 	vmov	r0, s16
 801918a:	2300      	movs	r3, #0
 801918c:	9308      	str	r3, [sp, #32]
 801918e:	f7e7 f9eb 	bl	8000568 <__aeabi_f2d>
 8019192:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801919a:	4814      	ldr	r0, [pc, #80]	; (80191ec <asinf+0xac>)
 801919c:	f000 fe6c 	bl	8019e78 <nan>
 80191a0:	f994 3000 	ldrsb.w	r3, [r4]
 80191a4:	2b02      	cmp	r3, #2
 80191a6:	ed8d 0b06 	vstr	d0, [sp, #24]
 80191aa:	d104      	bne.n	80191b6 <asinf+0x76>
 80191ac:	f001 f814 	bl	801a1d8 <__errno>
 80191b0:	2321      	movs	r3, #33	; 0x21
 80191b2:	6003      	str	r3, [r0, #0]
 80191b4:	e004      	b.n	80191c0 <asinf+0x80>
 80191b6:	4668      	mov	r0, sp
 80191b8:	f000 fe5a 	bl	8019e70 <matherr>
 80191bc:	2800      	cmp	r0, #0
 80191be:	d0f5      	beq.n	80191ac <asinf+0x6c>
 80191c0:	9b08      	ldr	r3, [sp, #32]
 80191c2:	b11b      	cbz	r3, 80191cc <asinf+0x8c>
 80191c4:	f001 f808 	bl	801a1d8 <__errno>
 80191c8:	9b08      	ldr	r3, [sp, #32]
 80191ca:	6003      	str	r3, [r0, #0]
 80191cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80191d0:	f7e7 fd1a 	bl	8000c08 <__aeabi_d2f>
 80191d4:	ee08 0a90 	vmov	s17, r0
 80191d8:	eeb0 0a68 	vmov.f32	s0, s17
 80191dc:	b00a      	add	sp, #40	; 0x28
 80191de:	ecbd 8b02 	vpop	{d8}
 80191e2:	bd10      	pop	{r4, pc}
 80191e4:	20000118 	.word	0x20000118
 80191e8:	0801f074 	.word	0x0801f074
 80191ec:	0801f4ab 	.word	0x0801f4ab

080191f0 <atan2f>:
 80191f0:	f000 b938 	b.w	8019464 <__ieee754_atan2f>

080191f4 <sqrtf>:
 80191f4:	b510      	push	{r4, lr}
 80191f6:	ed2d 8b02 	vpush	{d8}
 80191fa:	b08a      	sub	sp, #40	; 0x28
 80191fc:	eeb0 8a40 	vmov.f32	s16, s0
 8019200:	f000 fb0a 	bl	8019818 <__ieee754_sqrtf>
 8019204:	4b21      	ldr	r3, [pc, #132]	; (801928c <sqrtf+0x98>)
 8019206:	f993 4000 	ldrsb.w	r4, [r3]
 801920a:	1c63      	adds	r3, r4, #1
 801920c:	d02c      	beq.n	8019268 <sqrtf+0x74>
 801920e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019216:	d627      	bvs.n	8019268 <sqrtf+0x74>
 8019218:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801921c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019220:	d522      	bpl.n	8019268 <sqrtf+0x74>
 8019222:	2301      	movs	r3, #1
 8019224:	9300      	str	r3, [sp, #0]
 8019226:	4b1a      	ldr	r3, [pc, #104]	; (8019290 <sqrtf+0x9c>)
 8019228:	9301      	str	r3, [sp, #4]
 801922a:	ee18 0a10 	vmov	r0, s16
 801922e:	2300      	movs	r3, #0
 8019230:	9308      	str	r3, [sp, #32]
 8019232:	f7e7 f999 	bl	8000568 <__aeabi_f2d>
 8019236:	2200      	movs	r2, #0
 8019238:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801923c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019240:	2300      	movs	r3, #0
 8019242:	b9ac      	cbnz	r4, 8019270 <sqrtf+0x7c>
 8019244:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019248:	4668      	mov	r0, sp
 801924a:	f000 fe11 	bl	8019e70 <matherr>
 801924e:	b1b8      	cbz	r0, 8019280 <sqrtf+0x8c>
 8019250:	9b08      	ldr	r3, [sp, #32]
 8019252:	b11b      	cbz	r3, 801925c <sqrtf+0x68>
 8019254:	f000 ffc0 	bl	801a1d8 <__errno>
 8019258:	9b08      	ldr	r3, [sp, #32]
 801925a:	6003      	str	r3, [r0, #0]
 801925c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019260:	f7e7 fcd2 	bl	8000c08 <__aeabi_d2f>
 8019264:	ee00 0a10 	vmov	s0, r0
 8019268:	b00a      	add	sp, #40	; 0x28
 801926a:	ecbd 8b02 	vpop	{d8}
 801926e:	bd10      	pop	{r4, pc}
 8019270:	4610      	mov	r0, r2
 8019272:	4619      	mov	r1, r3
 8019274:	f7e7 fafa 	bl	800086c <__aeabi_ddiv>
 8019278:	2c02      	cmp	r4, #2
 801927a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801927e:	d1e3      	bne.n	8019248 <sqrtf+0x54>
 8019280:	f000 ffaa 	bl	801a1d8 <__errno>
 8019284:	2321      	movs	r3, #33	; 0x21
 8019286:	6003      	str	r3, [r0, #0]
 8019288:	e7e2      	b.n	8019250 <sqrtf+0x5c>
 801928a:	bf00      	nop
 801928c:	20000118 	.word	0x20000118
 8019290:	0801f07a 	.word	0x0801f07a

08019294 <__ieee754_asinf>:
 8019294:	b538      	push	{r3, r4, r5, lr}
 8019296:	ee10 5a10 	vmov	r5, s0
 801929a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801929e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80192a2:	ed2d 8b04 	vpush	{d8-d9}
 80192a6:	d10c      	bne.n	80192c2 <__ieee754_asinf+0x2e>
 80192a8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8019424 <__ieee754_asinf+0x190>
 80192ac:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8019428 <__ieee754_asinf+0x194>
 80192b0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80192b4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80192b8:	eeb0 0a67 	vmov.f32	s0, s15
 80192bc:	ecbd 8b04 	vpop	{d8-d9}
 80192c0:	bd38      	pop	{r3, r4, r5, pc}
 80192c2:	dd04      	ble.n	80192ce <__ieee754_asinf+0x3a>
 80192c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80192c8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80192cc:	e7f6      	b.n	80192bc <__ieee754_asinf+0x28>
 80192ce:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80192d2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80192d6:	da0b      	bge.n	80192f0 <__ieee754_asinf+0x5c>
 80192d8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80192dc:	da52      	bge.n	8019384 <__ieee754_asinf+0xf0>
 80192de:	eddf 7a53 	vldr	s15, [pc, #332]	; 801942c <__ieee754_asinf+0x198>
 80192e2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80192e6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80192ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192ee:	dce5      	bgt.n	80192bc <__ieee754_asinf+0x28>
 80192f0:	f000 fe9e 	bl	801a030 <fabsf>
 80192f4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80192f8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80192fc:	ee20 8a08 	vmul.f32	s16, s0, s16
 8019300:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8019430 <__ieee754_asinf+0x19c>
 8019304:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019434 <__ieee754_asinf+0x1a0>
 8019308:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8019438 <__ieee754_asinf+0x1a4>
 801930c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8019310:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801943c <__ieee754_asinf+0x1a8>
 8019314:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019318:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8019440 <__ieee754_asinf+0x1ac>
 801931c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019320:	eddf 7a48 	vldr	s15, [pc, #288]	; 8019444 <__ieee754_asinf+0x1b0>
 8019324:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019328:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8019448 <__ieee754_asinf+0x1b4>
 801932c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8019330:	eddf 7a46 	vldr	s15, [pc, #280]	; 801944c <__ieee754_asinf+0x1b8>
 8019334:	eee8 7a07 	vfma.f32	s15, s16, s14
 8019338:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8019450 <__ieee754_asinf+0x1bc>
 801933c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019340:	eddf 7a44 	vldr	s15, [pc, #272]	; 8019454 <__ieee754_asinf+0x1c0>
 8019344:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019348:	eeb0 0a48 	vmov.f32	s0, s16
 801934c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8019350:	f000 fa62 	bl	8019818 <__ieee754_sqrtf>
 8019354:	4b40      	ldr	r3, [pc, #256]	; (8019458 <__ieee754_asinf+0x1c4>)
 8019356:	ee29 9a08 	vmul.f32	s18, s18, s16
 801935a:	429c      	cmp	r4, r3
 801935c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8019360:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8019364:	dd3d      	ble.n	80193e2 <__ieee754_asinf+0x14e>
 8019366:	eea0 0a06 	vfma.f32	s0, s0, s12
 801936a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 801945c <__ieee754_asinf+0x1c8>
 801936e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019372:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8019428 <__ieee754_asinf+0x194>
 8019376:	ee30 0a67 	vsub.f32	s0, s0, s15
 801937a:	2d00      	cmp	r5, #0
 801937c:	bfd8      	it	le
 801937e:	eeb1 0a40 	vnegle.f32	s0, s0
 8019382:	e79b      	b.n	80192bc <__ieee754_asinf+0x28>
 8019384:	ee60 7a00 	vmul.f32	s15, s0, s0
 8019388:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019430 <__ieee754_asinf+0x19c>
 801938c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8019434 <__ieee754_asinf+0x1a0>
 8019390:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8019448 <__ieee754_asinf+0x1b4>
 8019394:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019398:	eddf 6a28 	vldr	s13, [pc, #160]	; 801943c <__ieee754_asinf+0x1a8>
 801939c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80193a0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8019440 <__ieee754_asinf+0x1ac>
 80193a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80193a8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8019444 <__ieee754_asinf+0x1b0>
 80193ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80193b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8019438 <__ieee754_asinf+0x1a4>
 80193b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80193b8:	eddf 6a24 	vldr	s13, [pc, #144]	; 801944c <__ieee754_asinf+0x1b8>
 80193bc:	eee7 6a86 	vfma.f32	s13, s15, s12
 80193c0:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8019450 <__ieee754_asinf+0x1bc>
 80193c4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80193c8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8019454 <__ieee754_asinf+0x1c0>
 80193cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80193d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80193d4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80193d8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80193dc:	eea0 0a27 	vfma.f32	s0, s0, s15
 80193e0:	e76c      	b.n	80192bc <__ieee754_asinf+0x28>
 80193e2:	ee10 3a10 	vmov	r3, s0
 80193e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80193ea:	f023 030f 	bic.w	r3, r3, #15
 80193ee:	ee07 3a90 	vmov	s15, r3
 80193f2:	eef1 6a67 	vneg.f32	s13, s15
 80193f6:	eea6 8aa7 	vfma.f32	s16, s13, s15
 80193fa:	ee70 5a00 	vadd.f32	s11, s0, s0
 80193fe:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019402:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019424 <__ieee754_asinf+0x190>
 8019406:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801940a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8019460 <__ieee754_asinf+0x1cc>
 801940e:	eee5 7a47 	vfms.f32	s15, s10, s14
 8019412:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8019416:	eeb0 6a40 	vmov.f32	s12, s0
 801941a:	eea6 6a87 	vfma.f32	s12, s13, s14
 801941e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019422:	e7a8      	b.n	8019376 <__ieee754_asinf+0xe2>
 8019424:	b33bbd2e 	.word	0xb33bbd2e
 8019428:	3fc90fdb 	.word	0x3fc90fdb
 801942c:	7149f2ca 	.word	0x7149f2ca
 8019430:	3811ef08 	.word	0x3811ef08
 8019434:	3a4f7f04 	.word	0x3a4f7f04
 8019438:	3e2aaaab 	.word	0x3e2aaaab
 801943c:	bd241146 	.word	0xbd241146
 8019440:	3e4e0aa8 	.word	0x3e4e0aa8
 8019444:	bea6b090 	.word	0xbea6b090
 8019448:	3d9dc62e 	.word	0x3d9dc62e
 801944c:	bf303361 	.word	0xbf303361
 8019450:	4001572d 	.word	0x4001572d
 8019454:	c019d139 	.word	0xc019d139
 8019458:	3f799999 	.word	0x3f799999
 801945c:	333bbd2e 	.word	0x333bbd2e
 8019460:	3f490fdb 	.word	0x3f490fdb

08019464 <__ieee754_atan2f>:
 8019464:	ee10 2a90 	vmov	r2, s1
 8019468:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801946c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019470:	b510      	push	{r4, lr}
 8019472:	eef0 7a40 	vmov.f32	s15, s0
 8019476:	dc06      	bgt.n	8019486 <__ieee754_atan2f+0x22>
 8019478:	ee10 0a10 	vmov	r0, s0
 801947c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019480:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019484:	dd04      	ble.n	8019490 <__ieee754_atan2f+0x2c>
 8019486:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801948a:	eeb0 0a67 	vmov.f32	s0, s15
 801948e:	bd10      	pop	{r4, pc}
 8019490:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019494:	d103      	bne.n	801949e <__ieee754_atan2f+0x3a>
 8019496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801949a:	f000 bcf5 	b.w	8019e88 <atanf>
 801949e:	1794      	asrs	r4, r2, #30
 80194a0:	f004 0402 	and.w	r4, r4, #2
 80194a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80194a8:	b943      	cbnz	r3, 80194bc <__ieee754_atan2f+0x58>
 80194aa:	2c02      	cmp	r4, #2
 80194ac:	d06e      	beq.n	801958c <__ieee754_atan2f+0x128>
 80194ae:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8019594 <__ieee754_atan2f+0x130>
 80194b2:	2c03      	cmp	r4, #3
 80194b4:	bf08      	it	eq
 80194b6:	eef0 7a47 	vmoveq.f32	s15, s14
 80194ba:	e7e6      	b.n	801948a <__ieee754_atan2f+0x26>
 80194bc:	b941      	cbnz	r1, 80194d0 <__ieee754_atan2f+0x6c>
 80194be:	eddf 7a36 	vldr	s15, [pc, #216]	; 8019598 <__ieee754_atan2f+0x134>
 80194c2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801959c <__ieee754_atan2f+0x138>
 80194c6:	2800      	cmp	r0, #0
 80194c8:	bfb8      	it	lt
 80194ca:	eef0 7a47 	vmovlt.f32	s15, s14
 80194ce:	e7dc      	b.n	801948a <__ieee754_atan2f+0x26>
 80194d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80194d4:	d122      	bne.n	801951c <__ieee754_atan2f+0xb8>
 80194d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80194da:	d112      	bne.n	8019502 <__ieee754_atan2f+0x9e>
 80194dc:	2c02      	cmp	r4, #2
 80194de:	d00a      	beq.n	80194f6 <__ieee754_atan2f+0x92>
 80194e0:	2c03      	cmp	r4, #3
 80194e2:	d00b      	beq.n	80194fc <__ieee754_atan2f+0x98>
 80194e4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80195a0 <__ieee754_atan2f+0x13c>
 80194e8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80195a4 <__ieee754_atan2f+0x140>
 80194ec:	2c01      	cmp	r4, #1
 80194ee:	bf18      	it	ne
 80194f0:	eef0 7a47 	vmovne.f32	s15, s14
 80194f4:	e7c9      	b.n	801948a <__ieee754_atan2f+0x26>
 80194f6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80195a8 <__ieee754_atan2f+0x144>
 80194fa:	e7c6      	b.n	801948a <__ieee754_atan2f+0x26>
 80194fc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80195ac <__ieee754_atan2f+0x148>
 8019500:	e7c3      	b.n	801948a <__ieee754_atan2f+0x26>
 8019502:	2c02      	cmp	r4, #2
 8019504:	d042      	beq.n	801958c <__ieee754_atan2f+0x128>
 8019506:	2c03      	cmp	r4, #3
 8019508:	d005      	beq.n	8019516 <__ieee754_atan2f+0xb2>
 801950a:	2c01      	cmp	r4, #1
 801950c:	eddf 7a28 	vldr	s15, [pc, #160]	; 80195b0 <__ieee754_atan2f+0x14c>
 8019510:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80195b4 <__ieee754_atan2f+0x150>
 8019514:	e7eb      	b.n	80194ee <__ieee754_atan2f+0x8a>
 8019516:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019594 <__ieee754_atan2f+0x130>
 801951a:	e7b6      	b.n	801948a <__ieee754_atan2f+0x26>
 801951c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019520:	d0cd      	beq.n	80194be <__ieee754_atan2f+0x5a>
 8019522:	1a5b      	subs	r3, r3, r1
 8019524:	15db      	asrs	r3, r3, #23
 8019526:	2b3c      	cmp	r3, #60	; 0x3c
 8019528:	dc1a      	bgt.n	8019560 <__ieee754_atan2f+0xfc>
 801952a:	2a00      	cmp	r2, #0
 801952c:	da01      	bge.n	8019532 <__ieee754_atan2f+0xce>
 801952e:	333c      	adds	r3, #60	; 0x3c
 8019530:	db19      	blt.n	8019566 <__ieee754_atan2f+0x102>
 8019532:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019536:	f000 fd7b 	bl	801a030 <fabsf>
 801953a:	f000 fca5 	bl	8019e88 <atanf>
 801953e:	eef0 7a40 	vmov.f32	s15, s0
 8019542:	2c01      	cmp	r4, #1
 8019544:	d012      	beq.n	801956c <__ieee754_atan2f+0x108>
 8019546:	2c02      	cmp	r4, #2
 8019548:	d017      	beq.n	801957a <__ieee754_atan2f+0x116>
 801954a:	2c00      	cmp	r4, #0
 801954c:	d09d      	beq.n	801948a <__ieee754_atan2f+0x26>
 801954e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80195b8 <__ieee754_atan2f+0x154>
 8019552:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019556:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80195bc <__ieee754_atan2f+0x158>
 801955a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801955e:	e794      	b.n	801948a <__ieee754_atan2f+0x26>
 8019560:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019598 <__ieee754_atan2f+0x134>
 8019564:	e7ed      	b.n	8019542 <__ieee754_atan2f+0xde>
 8019566:	eddf 7a13 	vldr	s15, [pc, #76]	; 80195b4 <__ieee754_atan2f+0x150>
 801956a:	e7ea      	b.n	8019542 <__ieee754_atan2f+0xde>
 801956c:	ee17 3a90 	vmov	r3, s15
 8019570:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019574:	ee07 3a90 	vmov	s15, r3
 8019578:	e787      	b.n	801948a <__ieee754_atan2f+0x26>
 801957a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80195b8 <__ieee754_atan2f+0x154>
 801957e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019582:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80195bc <__ieee754_atan2f+0x158>
 8019586:	ee77 7a67 	vsub.f32	s15, s14, s15
 801958a:	e77e      	b.n	801948a <__ieee754_atan2f+0x26>
 801958c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80195bc <__ieee754_atan2f+0x158>
 8019590:	e77b      	b.n	801948a <__ieee754_atan2f+0x26>
 8019592:	bf00      	nop
 8019594:	c0490fdb 	.word	0xc0490fdb
 8019598:	3fc90fdb 	.word	0x3fc90fdb
 801959c:	bfc90fdb 	.word	0xbfc90fdb
 80195a0:	bf490fdb 	.word	0xbf490fdb
 80195a4:	3f490fdb 	.word	0x3f490fdb
 80195a8:	4016cbe4 	.word	0x4016cbe4
 80195ac:	c016cbe4 	.word	0xc016cbe4
 80195b0:	80000000 	.word	0x80000000
 80195b4:	00000000 	.word	0x00000000
 80195b8:	33bbbd2e 	.word	0x33bbbd2e
 80195bc:	40490fdb 	.word	0x40490fdb

080195c0 <__ieee754_rem_pio2f>:
 80195c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195c2:	ee10 6a10 	vmov	r6, s0
 80195c6:	4b86      	ldr	r3, [pc, #536]	; (80197e0 <__ieee754_rem_pio2f+0x220>)
 80195c8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80195cc:	429c      	cmp	r4, r3
 80195ce:	b087      	sub	sp, #28
 80195d0:	4605      	mov	r5, r0
 80195d2:	dc05      	bgt.n	80195e0 <__ieee754_rem_pio2f+0x20>
 80195d4:	2300      	movs	r3, #0
 80195d6:	ed85 0a00 	vstr	s0, [r5]
 80195da:	6043      	str	r3, [r0, #4]
 80195dc:	2000      	movs	r0, #0
 80195de:	e020      	b.n	8019622 <__ieee754_rem_pio2f+0x62>
 80195e0:	4b80      	ldr	r3, [pc, #512]	; (80197e4 <__ieee754_rem_pio2f+0x224>)
 80195e2:	429c      	cmp	r4, r3
 80195e4:	dc38      	bgt.n	8019658 <__ieee754_rem_pio2f+0x98>
 80195e6:	2e00      	cmp	r6, #0
 80195e8:	f024 040f 	bic.w	r4, r4, #15
 80195ec:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80197e8 <__ieee754_rem_pio2f+0x228>
 80195f0:	4b7e      	ldr	r3, [pc, #504]	; (80197ec <__ieee754_rem_pio2f+0x22c>)
 80195f2:	dd18      	ble.n	8019626 <__ieee754_rem_pio2f+0x66>
 80195f4:	429c      	cmp	r4, r3
 80195f6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80195fa:	bf09      	itett	eq
 80195fc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80197f0 <__ieee754_rem_pio2f+0x230>
 8019600:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80197f4 <__ieee754_rem_pio2f+0x234>
 8019604:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019608:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80197f8 <__ieee754_rem_pio2f+0x238>
 801960c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019610:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019614:	edc0 6a00 	vstr	s13, [r0]
 8019618:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801961c:	edc0 7a01 	vstr	s15, [r0, #4]
 8019620:	2001      	movs	r0, #1
 8019622:	b007      	add	sp, #28
 8019624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019626:	429c      	cmp	r4, r3
 8019628:	ee70 7a07 	vadd.f32	s15, s0, s14
 801962c:	bf09      	itett	eq
 801962e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80197f0 <__ieee754_rem_pio2f+0x230>
 8019632:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80197f4 <__ieee754_rem_pio2f+0x234>
 8019636:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801963a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80197f8 <__ieee754_rem_pio2f+0x238>
 801963e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019642:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019646:	edc0 6a00 	vstr	s13, [r0]
 801964a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801964e:	edc0 7a01 	vstr	s15, [r0, #4]
 8019652:	f04f 30ff 	mov.w	r0, #4294967295
 8019656:	e7e4      	b.n	8019622 <__ieee754_rem_pio2f+0x62>
 8019658:	4b68      	ldr	r3, [pc, #416]	; (80197fc <__ieee754_rem_pio2f+0x23c>)
 801965a:	429c      	cmp	r4, r3
 801965c:	dc71      	bgt.n	8019742 <__ieee754_rem_pio2f+0x182>
 801965e:	f000 fce7 	bl	801a030 <fabsf>
 8019662:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8019800 <__ieee754_rem_pio2f+0x240>
 8019666:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801966a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801966e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019672:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8019676:	ee17 0a90 	vmov	r0, s15
 801967a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80197e8 <__ieee754_rem_pio2f+0x228>
 801967e:	eeb1 7a46 	vneg.f32	s14, s12
 8019682:	eea7 0a27 	vfma.f32	s0, s14, s15
 8019686:	281f      	cmp	r0, #31
 8019688:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80197f4 <__ieee754_rem_pio2f+0x234>
 801968c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8019690:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019694:	ee16 3a90 	vmov	r3, s13
 8019698:	dc1c      	bgt.n	80196d4 <__ieee754_rem_pio2f+0x114>
 801969a:	1e47      	subs	r7, r0, #1
 801969c:	4959      	ldr	r1, [pc, #356]	; (8019804 <__ieee754_rem_pio2f+0x244>)
 801969e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80196a2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80196a6:	428a      	cmp	r2, r1
 80196a8:	d014      	beq.n	80196d4 <__ieee754_rem_pio2f+0x114>
 80196aa:	602b      	str	r3, [r5, #0]
 80196ac:	ed95 7a00 	vldr	s14, [r5]
 80196b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80196b4:	2e00      	cmp	r6, #0
 80196b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80196ba:	ed85 0a01 	vstr	s0, [r5, #4]
 80196be:	dab0      	bge.n	8019622 <__ieee754_rem_pio2f+0x62>
 80196c0:	eeb1 7a47 	vneg.f32	s14, s14
 80196c4:	eeb1 0a40 	vneg.f32	s0, s0
 80196c8:	ed85 7a00 	vstr	s14, [r5]
 80196cc:	ed85 0a01 	vstr	s0, [r5, #4]
 80196d0:	4240      	negs	r0, r0
 80196d2:	e7a6      	b.n	8019622 <__ieee754_rem_pio2f+0x62>
 80196d4:	15e4      	asrs	r4, r4, #23
 80196d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80196da:	1aa2      	subs	r2, r4, r2
 80196dc:	2a08      	cmp	r2, #8
 80196de:	dde4      	ble.n	80196aa <__ieee754_rem_pio2f+0xea>
 80196e0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80197f0 <__ieee754_rem_pio2f+0x230>
 80196e4:	eef0 6a40 	vmov.f32	s13, s0
 80196e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80196ec:	ee30 0a66 	vsub.f32	s0, s0, s13
 80196f0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80196f4:	eddf 7a40 	vldr	s15, [pc, #256]	; 80197f8 <__ieee754_rem_pio2f+0x238>
 80196f8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80196fc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8019700:	eef0 7a40 	vmov.f32	s15, s0
 8019704:	ee15 3a90 	vmov	r3, s11
 8019708:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801970c:	1aa4      	subs	r4, r4, r2
 801970e:	2c19      	cmp	r4, #25
 8019710:	dc04      	bgt.n	801971c <__ieee754_rem_pio2f+0x15c>
 8019712:	edc5 5a00 	vstr	s11, [r5]
 8019716:	eeb0 0a66 	vmov.f32	s0, s13
 801971a:	e7c7      	b.n	80196ac <__ieee754_rem_pio2f+0xec>
 801971c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019808 <__ieee754_rem_pio2f+0x248>
 8019720:	eeb0 0a66 	vmov.f32	s0, s13
 8019724:	eea7 0a25 	vfma.f32	s0, s14, s11
 8019728:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801972c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8019730:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801980c <__ieee754_rem_pio2f+0x24c>
 8019734:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8019738:	ee30 7a67 	vsub.f32	s14, s0, s15
 801973c:	ed85 7a00 	vstr	s14, [r5]
 8019740:	e7b4      	b.n	80196ac <__ieee754_rem_pio2f+0xec>
 8019742:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019746:	db06      	blt.n	8019756 <__ieee754_rem_pio2f+0x196>
 8019748:	ee70 7a40 	vsub.f32	s15, s0, s0
 801974c:	edc0 7a01 	vstr	s15, [r0, #4]
 8019750:	edc0 7a00 	vstr	s15, [r0]
 8019754:	e742      	b.n	80195dc <__ieee754_rem_pio2f+0x1c>
 8019756:	15e2      	asrs	r2, r4, #23
 8019758:	3a86      	subs	r2, #134	; 0x86
 801975a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801975e:	ee07 3a90 	vmov	s15, r3
 8019762:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019766:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8019810 <__ieee754_rem_pio2f+0x250>
 801976a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801976e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019772:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019776:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801977a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801977e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019782:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019786:	ed8d 7a04 	vstr	s14, [sp, #16]
 801978a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801978e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019796:	edcd 7a05 	vstr	s15, [sp, #20]
 801979a:	d11e      	bne.n	80197da <__ieee754_rem_pio2f+0x21a>
 801979c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80197a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197a4:	bf0c      	ite	eq
 80197a6:	2301      	moveq	r3, #1
 80197a8:	2302      	movne	r3, #2
 80197aa:	491a      	ldr	r1, [pc, #104]	; (8019814 <__ieee754_rem_pio2f+0x254>)
 80197ac:	9101      	str	r1, [sp, #4]
 80197ae:	2102      	movs	r1, #2
 80197b0:	9100      	str	r1, [sp, #0]
 80197b2:	a803      	add	r0, sp, #12
 80197b4:	4629      	mov	r1, r5
 80197b6:	f000 f891 	bl	80198dc <__kernel_rem_pio2f>
 80197ba:	2e00      	cmp	r6, #0
 80197bc:	f6bf af31 	bge.w	8019622 <__ieee754_rem_pio2f+0x62>
 80197c0:	edd5 7a00 	vldr	s15, [r5]
 80197c4:	eef1 7a67 	vneg.f32	s15, s15
 80197c8:	edc5 7a00 	vstr	s15, [r5]
 80197cc:	edd5 7a01 	vldr	s15, [r5, #4]
 80197d0:	eef1 7a67 	vneg.f32	s15, s15
 80197d4:	edc5 7a01 	vstr	s15, [r5, #4]
 80197d8:	e77a      	b.n	80196d0 <__ieee754_rem_pio2f+0x110>
 80197da:	2303      	movs	r3, #3
 80197dc:	e7e5      	b.n	80197aa <__ieee754_rem_pio2f+0x1ea>
 80197de:	bf00      	nop
 80197e0:	3f490fd8 	.word	0x3f490fd8
 80197e4:	4016cbe3 	.word	0x4016cbe3
 80197e8:	3fc90f80 	.word	0x3fc90f80
 80197ec:	3fc90fd0 	.word	0x3fc90fd0
 80197f0:	37354400 	.word	0x37354400
 80197f4:	37354443 	.word	0x37354443
 80197f8:	2e85a308 	.word	0x2e85a308
 80197fc:	43490f80 	.word	0x43490f80
 8019800:	3f22f984 	.word	0x3f22f984
 8019804:	0801f080 	.word	0x0801f080
 8019808:	2e85a300 	.word	0x2e85a300
 801980c:	248d3132 	.word	0x248d3132
 8019810:	43800000 	.word	0x43800000
 8019814:	0801f100 	.word	0x0801f100

08019818 <__ieee754_sqrtf>:
 8019818:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801981c:	4770      	bx	lr
	...

08019820 <__kernel_cosf>:
 8019820:	ee10 3a10 	vmov	r3, s0
 8019824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019828:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801982c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019830:	da05      	bge.n	801983e <__kernel_cosf+0x1e>
 8019832:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019836:	ee17 2a90 	vmov	r2, s15
 801983a:	2a00      	cmp	r2, #0
 801983c:	d03b      	beq.n	80198b6 <__kernel_cosf+0x96>
 801983e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8019842:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019846:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80198bc <__kernel_cosf+0x9c>
 801984a:	4a1d      	ldr	r2, [pc, #116]	; (80198c0 <__kernel_cosf+0xa0>)
 801984c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8019850:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80198c4 <__kernel_cosf+0xa4>
 8019854:	eea6 7a25 	vfma.f32	s14, s12, s11
 8019858:	4293      	cmp	r3, r2
 801985a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80198c8 <__kernel_cosf+0xa8>
 801985e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8019862:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80198cc <__kernel_cosf+0xac>
 8019866:	eea5 7a86 	vfma.f32	s14, s11, s12
 801986a:	eddf 5a19 	vldr	s11, [pc, #100]	; 80198d0 <__kernel_cosf+0xb0>
 801986e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8019872:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80198d4 <__kernel_cosf+0xb4>
 8019876:	eea5 7a86 	vfma.f32	s14, s11, s12
 801987a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801987e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019882:	eee6 0a07 	vfma.f32	s1, s12, s14
 8019886:	dc04      	bgt.n	8019892 <__kernel_cosf+0x72>
 8019888:	ee77 0ae0 	vsub.f32	s1, s15, s1
 801988c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8019890:	4770      	bx	lr
 8019892:	4a11      	ldr	r2, [pc, #68]	; (80198d8 <__kernel_cosf+0xb8>)
 8019894:	4293      	cmp	r3, r2
 8019896:	bfda      	itte	le
 8019898:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801989c:	ee07 3a10 	vmovle	s14, r3
 80198a0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80198a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80198a8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80198ac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80198b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80198b4:	4770      	bx	lr
 80198b6:	eeb0 0a66 	vmov.f32	s0, s13
 80198ba:	4770      	bx	lr
 80198bc:	ad47d74e 	.word	0xad47d74e
 80198c0:	3e999999 	.word	0x3e999999
 80198c4:	310f74f6 	.word	0x310f74f6
 80198c8:	b493f27c 	.word	0xb493f27c
 80198cc:	37d00d01 	.word	0x37d00d01
 80198d0:	bab60b61 	.word	0xbab60b61
 80198d4:	3d2aaaab 	.word	0x3d2aaaab
 80198d8:	3f480000 	.word	0x3f480000

080198dc <__kernel_rem_pio2f>:
 80198dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198e0:	ed2d 8b04 	vpush	{d8-d9}
 80198e4:	b0d7      	sub	sp, #348	; 0x15c
 80198e6:	469b      	mov	fp, r3
 80198e8:	460e      	mov	r6, r1
 80198ea:	4bbe      	ldr	r3, [pc, #760]	; (8019be4 <__kernel_rem_pio2f+0x308>)
 80198ec:	9964      	ldr	r1, [sp, #400]	; 0x190
 80198ee:	9002      	str	r0, [sp, #8]
 80198f0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80198f4:	9865      	ldr	r0, [sp, #404]	; 0x194
 80198f6:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8019bf4 <__kernel_rem_pio2f+0x318>
 80198fa:	1ed1      	subs	r1, r2, #3
 80198fc:	2308      	movs	r3, #8
 80198fe:	fb91 f1f3 	sdiv	r1, r1, r3
 8019902:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8019906:	f10b 3aff 	add.w	sl, fp, #4294967295
 801990a:	1c4c      	adds	r4, r1, #1
 801990c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8019910:	eba1 050a 	sub.w	r5, r1, sl
 8019914:	aa1a      	add	r2, sp, #104	; 0x68
 8019916:	eb09 070a 	add.w	r7, r9, sl
 801991a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801991e:	4696      	mov	lr, r2
 8019920:	2300      	movs	r3, #0
 8019922:	42bb      	cmp	r3, r7
 8019924:	dd0f      	ble.n	8019946 <__kernel_rem_pio2f+0x6a>
 8019926:	af42      	add	r7, sp, #264	; 0x108
 8019928:	2200      	movs	r2, #0
 801992a:	454a      	cmp	r2, r9
 801992c:	dc27      	bgt.n	801997e <__kernel_rem_pio2f+0xa2>
 801992e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8019932:	eb0b 0302 	add.w	r3, fp, r2
 8019936:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 801993a:	9d02      	ldr	r5, [sp, #8]
 801993c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8019bf4 <__kernel_rem_pio2f+0x318>
 8019940:	f04f 0c00 	mov.w	ip, #0
 8019944:	e015      	b.n	8019972 <__kernel_rem_pio2f+0x96>
 8019946:	42dd      	cmn	r5, r3
 8019948:	bf5d      	ittte	pl
 801994a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 801994e:	ee07 2a90 	vmovpl	s15, r2
 8019952:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019956:	eef0 7a47 	vmovmi.f32	s15, s14
 801995a:	ecee 7a01 	vstmia	lr!, {s15}
 801995e:	3301      	adds	r3, #1
 8019960:	e7df      	b.n	8019922 <__kernel_rem_pio2f+0x46>
 8019962:	ecf5 6a01 	vldmia	r5!, {s13}
 8019966:	ed33 7a01 	vldmdb	r3!, {s14}
 801996a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801996e:	f10c 0c01 	add.w	ip, ip, #1
 8019972:	45d4      	cmp	ip, sl
 8019974:	ddf5      	ble.n	8019962 <__kernel_rem_pio2f+0x86>
 8019976:	ece7 7a01 	vstmia	r7!, {s15}
 801997a:	3201      	adds	r2, #1
 801997c:	e7d5      	b.n	801992a <__kernel_rem_pio2f+0x4e>
 801997e:	ab06      	add	r3, sp, #24
 8019980:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8019984:	9304      	str	r3, [sp, #16]
 8019986:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8019bf0 <__kernel_rem_pio2f+0x314>
 801998a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8019bec <__kernel_rem_pio2f+0x310>
 801998e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8019992:	9303      	str	r3, [sp, #12]
 8019994:	464d      	mov	r5, r9
 8019996:	ab56      	add	r3, sp, #344	; 0x158
 8019998:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 801999c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80199a0:	3f01      	subs	r7, #1
 80199a2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80199a6:	00bf      	lsls	r7, r7, #2
 80199a8:	ab56      	add	r3, sp, #344	; 0x158
 80199aa:	19da      	adds	r2, r3, r7
 80199ac:	3a4c      	subs	r2, #76	; 0x4c
 80199ae:	2300      	movs	r3, #0
 80199b0:	1ae9      	subs	r1, r5, r3
 80199b2:	2900      	cmp	r1, #0
 80199b4:	dc4c      	bgt.n	8019a50 <__kernel_rem_pio2f+0x174>
 80199b6:	4620      	mov	r0, r4
 80199b8:	f000 fb84 	bl	801a0c4 <scalbnf>
 80199bc:	eeb0 8a40 	vmov.f32	s16, s0
 80199c0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80199c4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80199c8:	f000 fb3a 	bl	801a040 <floorf>
 80199cc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80199d0:	eea0 8a67 	vfms.f32	s16, s0, s15
 80199d4:	2c00      	cmp	r4, #0
 80199d6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80199da:	edcd 7a01 	vstr	s15, [sp, #4]
 80199de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199e2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80199e6:	dd48      	ble.n	8019a7a <__kernel_rem_pio2f+0x19e>
 80199e8:	1e69      	subs	r1, r5, #1
 80199ea:	ab06      	add	r3, sp, #24
 80199ec:	f1c4 0008 	rsb	r0, r4, #8
 80199f0:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80199f4:	9a01      	ldr	r2, [sp, #4]
 80199f6:	fa4c f300 	asr.w	r3, ip, r0
 80199fa:	441a      	add	r2, r3
 80199fc:	4083      	lsls	r3, r0
 80199fe:	9201      	str	r2, [sp, #4]
 8019a00:	ebac 0203 	sub.w	r2, ip, r3
 8019a04:	ab06      	add	r3, sp, #24
 8019a06:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8019a0a:	f1c4 0307 	rsb	r3, r4, #7
 8019a0e:	fa42 f803 	asr.w	r8, r2, r3
 8019a12:	f1b8 0f00 	cmp.w	r8, #0
 8019a16:	dd41      	ble.n	8019a9c <__kernel_rem_pio2f+0x1c0>
 8019a18:	9b01      	ldr	r3, [sp, #4]
 8019a1a:	2000      	movs	r0, #0
 8019a1c:	3301      	adds	r3, #1
 8019a1e:	9301      	str	r3, [sp, #4]
 8019a20:	4601      	mov	r1, r0
 8019a22:	4285      	cmp	r5, r0
 8019a24:	dc6d      	bgt.n	8019b02 <__kernel_rem_pio2f+0x226>
 8019a26:	2c00      	cmp	r4, #0
 8019a28:	dd04      	ble.n	8019a34 <__kernel_rem_pio2f+0x158>
 8019a2a:	2c01      	cmp	r4, #1
 8019a2c:	d07e      	beq.n	8019b2c <__kernel_rem_pio2f+0x250>
 8019a2e:	2c02      	cmp	r4, #2
 8019a30:	f000 8086 	beq.w	8019b40 <__kernel_rem_pio2f+0x264>
 8019a34:	f1b8 0f02 	cmp.w	r8, #2
 8019a38:	d130      	bne.n	8019a9c <__kernel_rem_pio2f+0x1c0>
 8019a3a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019a3e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019a42:	b359      	cbz	r1, 8019a9c <__kernel_rem_pio2f+0x1c0>
 8019a44:	4620      	mov	r0, r4
 8019a46:	f000 fb3d 	bl	801a0c4 <scalbnf>
 8019a4a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019a4e:	e025      	b.n	8019a9c <__kernel_rem_pio2f+0x1c0>
 8019a50:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019a54:	a806      	add	r0, sp, #24
 8019a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a5e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019a62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019a66:	ee10 1a10 	vmov	r1, s0
 8019a6a:	ed32 0a01 	vldmdb	r2!, {s0}
 8019a6e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8019a72:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019a76:	3301      	adds	r3, #1
 8019a78:	e79a      	b.n	80199b0 <__kernel_rem_pio2f+0xd4>
 8019a7a:	d106      	bne.n	8019a8a <__kernel_rem_pio2f+0x1ae>
 8019a7c:	1e6b      	subs	r3, r5, #1
 8019a7e:	aa06      	add	r2, sp, #24
 8019a80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8019a84:	ea4f 2822 	mov.w	r8, r2, asr #8
 8019a88:	e7c3      	b.n	8019a12 <__kernel_rem_pio2f+0x136>
 8019a8a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019a8e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a96:	da31      	bge.n	8019afc <__kernel_rem_pio2f+0x220>
 8019a98:	f04f 0800 	mov.w	r8, #0
 8019a9c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aa4:	f040 80a8 	bne.w	8019bf8 <__kernel_rem_pio2f+0x31c>
 8019aa8:	1e6b      	subs	r3, r5, #1
 8019aaa:	4618      	mov	r0, r3
 8019aac:	2200      	movs	r2, #0
 8019aae:	4548      	cmp	r0, r9
 8019ab0:	da4d      	bge.n	8019b4e <__kernel_rem_pio2f+0x272>
 8019ab2:	2a00      	cmp	r2, #0
 8019ab4:	f000 8087 	beq.w	8019bc6 <__kernel_rem_pio2f+0x2ea>
 8019ab8:	aa06      	add	r2, sp, #24
 8019aba:	3c08      	subs	r4, #8
 8019abc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8019ac0:	2900      	cmp	r1, #0
 8019ac2:	f000 808d 	beq.w	8019be0 <__kernel_rem_pio2f+0x304>
 8019ac6:	4620      	mov	r0, r4
 8019ac8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019acc:	9302      	str	r3, [sp, #8]
 8019ace:	f000 faf9 	bl	801a0c4 <scalbnf>
 8019ad2:	9b02      	ldr	r3, [sp, #8]
 8019ad4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8019bf0 <__kernel_rem_pio2f+0x314>
 8019ad8:	0099      	lsls	r1, r3, #2
 8019ada:	aa42      	add	r2, sp, #264	; 0x108
 8019adc:	1850      	adds	r0, r2, r1
 8019ade:	1d05      	adds	r5, r0, #4
 8019ae0:	461c      	mov	r4, r3
 8019ae2:	2c00      	cmp	r4, #0
 8019ae4:	f280 80b8 	bge.w	8019c58 <__kernel_rem_pio2f+0x37c>
 8019ae8:	2500      	movs	r5, #0
 8019aea:	1b5c      	subs	r4, r3, r5
 8019aec:	2c00      	cmp	r4, #0
 8019aee:	f2c0 80d8 	blt.w	8019ca2 <__kernel_rem_pio2f+0x3c6>
 8019af2:	4f3d      	ldr	r7, [pc, #244]	; (8019be8 <__kernel_rem_pio2f+0x30c>)
 8019af4:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8019bf4 <__kernel_rem_pio2f+0x318>
 8019af8:	2400      	movs	r4, #0
 8019afa:	e0c6      	b.n	8019c8a <__kernel_rem_pio2f+0x3ae>
 8019afc:	f04f 0802 	mov.w	r8, #2
 8019b00:	e78a      	b.n	8019a18 <__kernel_rem_pio2f+0x13c>
 8019b02:	ab06      	add	r3, sp, #24
 8019b04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019b08:	b949      	cbnz	r1, 8019b1e <__kernel_rem_pio2f+0x242>
 8019b0a:	b12b      	cbz	r3, 8019b18 <__kernel_rem_pio2f+0x23c>
 8019b0c:	aa06      	add	r2, sp, #24
 8019b0e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8019b12:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8019b16:	2301      	movs	r3, #1
 8019b18:	3001      	adds	r0, #1
 8019b1a:	4619      	mov	r1, r3
 8019b1c:	e781      	b.n	8019a22 <__kernel_rem_pio2f+0x146>
 8019b1e:	aa06      	add	r2, sp, #24
 8019b20:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8019b24:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8019b28:	460b      	mov	r3, r1
 8019b2a:	e7f5      	b.n	8019b18 <__kernel_rem_pio2f+0x23c>
 8019b2c:	1e68      	subs	r0, r5, #1
 8019b2e:	ab06      	add	r3, sp, #24
 8019b30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019b38:	aa06      	add	r2, sp, #24
 8019b3a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8019b3e:	e779      	b.n	8019a34 <__kernel_rem_pio2f+0x158>
 8019b40:	1e68      	subs	r0, r5, #1
 8019b42:	ab06      	add	r3, sp, #24
 8019b44:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019b4c:	e7f4      	b.n	8019b38 <__kernel_rem_pio2f+0x25c>
 8019b4e:	a906      	add	r1, sp, #24
 8019b50:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8019b54:	3801      	subs	r0, #1
 8019b56:	430a      	orrs	r2, r1
 8019b58:	e7a9      	b.n	8019aae <__kernel_rem_pio2f+0x1d2>
 8019b5a:	f10c 0c01 	add.w	ip, ip, #1
 8019b5e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019b62:	2a00      	cmp	r2, #0
 8019b64:	d0f9      	beq.n	8019b5a <__kernel_rem_pio2f+0x27e>
 8019b66:	eb0b 0305 	add.w	r3, fp, r5
 8019b6a:	aa1a      	add	r2, sp, #104	; 0x68
 8019b6c:	009b      	lsls	r3, r3, #2
 8019b6e:	1898      	adds	r0, r3, r2
 8019b70:	3004      	adds	r0, #4
 8019b72:	1c69      	adds	r1, r5, #1
 8019b74:	3704      	adds	r7, #4
 8019b76:	2200      	movs	r2, #0
 8019b78:	4465      	add	r5, ip
 8019b7a:	9005      	str	r0, [sp, #20]
 8019b7c:	428d      	cmp	r5, r1
 8019b7e:	f6ff af0a 	blt.w	8019996 <__kernel_rem_pio2f+0xba>
 8019b82:	a81a      	add	r0, sp, #104	; 0x68
 8019b84:	eb02 0c03 	add.w	ip, r2, r3
 8019b88:	4484      	add	ip, r0
 8019b8a:	9803      	ldr	r0, [sp, #12]
 8019b8c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8019b90:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8019b94:	9001      	str	r0, [sp, #4]
 8019b96:	ee07 0a90 	vmov	s15, r0
 8019b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b9e:	9805      	ldr	r0, [sp, #20]
 8019ba0:	edcc 7a00 	vstr	s15, [ip]
 8019ba4:	eddf 7a13 	vldr	s15, [pc, #76]	; 8019bf4 <__kernel_rem_pio2f+0x318>
 8019ba8:	eb00 0802 	add.w	r8, r0, r2
 8019bac:	f04f 0c00 	mov.w	ip, #0
 8019bb0:	45d4      	cmp	ip, sl
 8019bb2:	dd0c      	ble.n	8019bce <__kernel_rem_pio2f+0x2f2>
 8019bb4:	eb02 0c07 	add.w	ip, r2, r7
 8019bb8:	a842      	add	r0, sp, #264	; 0x108
 8019bba:	4484      	add	ip, r0
 8019bbc:	edcc 7a01 	vstr	s15, [ip, #4]
 8019bc0:	3101      	adds	r1, #1
 8019bc2:	3204      	adds	r2, #4
 8019bc4:	e7da      	b.n	8019b7c <__kernel_rem_pio2f+0x2a0>
 8019bc6:	9b04      	ldr	r3, [sp, #16]
 8019bc8:	f04f 0c01 	mov.w	ip, #1
 8019bcc:	e7c7      	b.n	8019b5e <__kernel_rem_pio2f+0x282>
 8019bce:	ecfe 6a01 	vldmia	lr!, {s13}
 8019bd2:	ed38 7a01 	vldmdb	r8!, {s14}
 8019bd6:	f10c 0c01 	add.w	ip, ip, #1
 8019bda:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019bde:	e7e7      	b.n	8019bb0 <__kernel_rem_pio2f+0x2d4>
 8019be0:	3b01      	subs	r3, #1
 8019be2:	e769      	b.n	8019ab8 <__kernel_rem_pio2f+0x1dc>
 8019be4:	0801f444 	.word	0x0801f444
 8019be8:	0801f418 	.word	0x0801f418
 8019bec:	43800000 	.word	0x43800000
 8019bf0:	3b800000 	.word	0x3b800000
 8019bf4:	00000000 	.word	0x00000000
 8019bf8:	4260      	negs	r0, r4
 8019bfa:	eeb0 0a48 	vmov.f32	s0, s16
 8019bfe:	f000 fa61 	bl	801a0c4 <scalbnf>
 8019c02:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8019bec <__kernel_rem_pio2f+0x310>
 8019c06:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c0e:	db1a      	blt.n	8019c46 <__kernel_rem_pio2f+0x36a>
 8019c10:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8019bf0 <__kernel_rem_pio2f+0x314>
 8019c14:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019c18:	aa06      	add	r2, sp, #24
 8019c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019c1e:	a906      	add	r1, sp, #24
 8019c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c24:	3408      	adds	r4, #8
 8019c26:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019c2e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019c32:	ee10 3a10 	vmov	r3, s0
 8019c36:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8019c3a:	1c6b      	adds	r3, r5, #1
 8019c3c:	ee17 2a90 	vmov	r2, s15
 8019c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8019c44:	e73f      	b.n	8019ac6 <__kernel_rem_pio2f+0x1ea>
 8019c46:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019c4a:	aa06      	add	r2, sp, #24
 8019c4c:	ee10 3a10 	vmov	r3, s0
 8019c50:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8019c54:	462b      	mov	r3, r5
 8019c56:	e736      	b.n	8019ac6 <__kernel_rem_pio2f+0x1ea>
 8019c58:	aa06      	add	r2, sp, #24
 8019c5a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8019c5e:	9202      	str	r2, [sp, #8]
 8019c60:	ee07 2a90 	vmov	s15, r2
 8019c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c68:	3c01      	subs	r4, #1
 8019c6a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019c6e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019c72:	ed65 7a01 	vstmdb	r5!, {s15}
 8019c76:	e734      	b.n	8019ae2 <__kernel_rem_pio2f+0x206>
 8019c78:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8019c7c:	ecf7 6a01 	vldmia	r7!, {s13}
 8019c80:	ed9c 7a00 	vldr	s14, [ip]
 8019c84:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019c88:	3401      	adds	r4, #1
 8019c8a:	454c      	cmp	r4, r9
 8019c8c:	dc01      	bgt.n	8019c92 <__kernel_rem_pio2f+0x3b6>
 8019c8e:	42a5      	cmp	r5, r4
 8019c90:	daf2      	bge.n	8019c78 <__kernel_rem_pio2f+0x39c>
 8019c92:	aa56      	add	r2, sp, #344	; 0x158
 8019c94:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8019c98:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8019c9c:	3501      	adds	r5, #1
 8019c9e:	3804      	subs	r0, #4
 8019ca0:	e723      	b.n	8019aea <__kernel_rem_pio2f+0x20e>
 8019ca2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019ca4:	2a03      	cmp	r2, #3
 8019ca6:	d84d      	bhi.n	8019d44 <__kernel_rem_pio2f+0x468>
 8019ca8:	e8df f002 	tbb	[pc, r2]
 8019cac:	021f1f3e 	.word	0x021f1f3e
 8019cb0:	aa56      	add	r2, sp, #344	; 0x158
 8019cb2:	4411      	add	r1, r2
 8019cb4:	399c      	subs	r1, #156	; 0x9c
 8019cb6:	4608      	mov	r0, r1
 8019cb8:	461c      	mov	r4, r3
 8019cba:	2c00      	cmp	r4, #0
 8019cbc:	dc5f      	bgt.n	8019d7e <__kernel_rem_pio2f+0x4a2>
 8019cbe:	4608      	mov	r0, r1
 8019cc0:	461c      	mov	r4, r3
 8019cc2:	2c01      	cmp	r4, #1
 8019cc4:	dc6b      	bgt.n	8019d9e <__kernel_rem_pio2f+0x4c2>
 8019cc6:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8019bf4 <__kernel_rem_pio2f+0x318>
 8019cca:	2b01      	cmp	r3, #1
 8019ccc:	dc77      	bgt.n	8019dbe <__kernel_rem_pio2f+0x4e2>
 8019cce:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8019cd2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8019cd6:	f1b8 0f00 	cmp.w	r8, #0
 8019cda:	d176      	bne.n	8019dca <__kernel_rem_pio2f+0x4ee>
 8019cdc:	edc6 6a00 	vstr	s13, [r6]
 8019ce0:	ed86 7a01 	vstr	s14, [r6, #4]
 8019ce4:	edc6 7a02 	vstr	s15, [r6, #8]
 8019ce8:	e02c      	b.n	8019d44 <__kernel_rem_pio2f+0x468>
 8019cea:	aa56      	add	r2, sp, #344	; 0x158
 8019cec:	4411      	add	r1, r2
 8019cee:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8019bf4 <__kernel_rem_pio2f+0x318>
 8019cf2:	399c      	subs	r1, #156	; 0x9c
 8019cf4:	4618      	mov	r0, r3
 8019cf6:	2800      	cmp	r0, #0
 8019cf8:	da32      	bge.n	8019d60 <__kernel_rem_pio2f+0x484>
 8019cfa:	f1b8 0f00 	cmp.w	r8, #0
 8019cfe:	d035      	beq.n	8019d6c <__kernel_rem_pio2f+0x490>
 8019d00:	eef1 7a47 	vneg.f32	s15, s14
 8019d04:	edc6 7a00 	vstr	s15, [r6]
 8019d08:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8019d0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d10:	a82f      	add	r0, sp, #188	; 0xbc
 8019d12:	2101      	movs	r1, #1
 8019d14:	428b      	cmp	r3, r1
 8019d16:	da2c      	bge.n	8019d72 <__kernel_rem_pio2f+0x496>
 8019d18:	f1b8 0f00 	cmp.w	r8, #0
 8019d1c:	d001      	beq.n	8019d22 <__kernel_rem_pio2f+0x446>
 8019d1e:	eef1 7a67 	vneg.f32	s15, s15
 8019d22:	edc6 7a01 	vstr	s15, [r6, #4]
 8019d26:	e00d      	b.n	8019d44 <__kernel_rem_pio2f+0x468>
 8019d28:	aa56      	add	r2, sp, #344	; 0x158
 8019d2a:	4411      	add	r1, r2
 8019d2c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8019bf4 <__kernel_rem_pio2f+0x318>
 8019d30:	399c      	subs	r1, #156	; 0x9c
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	da0e      	bge.n	8019d54 <__kernel_rem_pio2f+0x478>
 8019d36:	f1b8 0f00 	cmp.w	r8, #0
 8019d3a:	d001      	beq.n	8019d40 <__kernel_rem_pio2f+0x464>
 8019d3c:	eef1 7a67 	vneg.f32	s15, s15
 8019d40:	edc6 7a00 	vstr	s15, [r6]
 8019d44:	9b01      	ldr	r3, [sp, #4]
 8019d46:	f003 0007 	and.w	r0, r3, #7
 8019d4a:	b057      	add	sp, #348	; 0x15c
 8019d4c:	ecbd 8b04 	vpop	{d8-d9}
 8019d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d54:	ed31 7a01 	vldmdb	r1!, {s14}
 8019d58:	3b01      	subs	r3, #1
 8019d5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019d5e:	e7e8      	b.n	8019d32 <__kernel_rem_pio2f+0x456>
 8019d60:	ed71 7a01 	vldmdb	r1!, {s15}
 8019d64:	3801      	subs	r0, #1
 8019d66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019d6a:	e7c4      	b.n	8019cf6 <__kernel_rem_pio2f+0x41a>
 8019d6c:	eef0 7a47 	vmov.f32	s15, s14
 8019d70:	e7c8      	b.n	8019d04 <__kernel_rem_pio2f+0x428>
 8019d72:	ecb0 7a01 	vldmia	r0!, {s14}
 8019d76:	3101      	adds	r1, #1
 8019d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019d7c:	e7ca      	b.n	8019d14 <__kernel_rem_pio2f+0x438>
 8019d7e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8019d82:	ed70 6a01 	vldmdb	r0!, {s13}
 8019d86:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019d8a:	3c01      	subs	r4, #1
 8019d8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d90:	ed00 7a01 	vstr	s14, [r0, #-4]
 8019d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d98:	edc0 7a00 	vstr	s15, [r0]
 8019d9c:	e78d      	b.n	8019cba <__kernel_rem_pio2f+0x3de>
 8019d9e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8019da2:	ed70 6a01 	vldmdb	r0!, {s13}
 8019da6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019daa:	3c01      	subs	r4, #1
 8019dac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019db0:	ed00 7a01 	vstr	s14, [r0, #-4]
 8019db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019db8:	edc0 7a00 	vstr	s15, [r0]
 8019dbc:	e781      	b.n	8019cc2 <__kernel_rem_pio2f+0x3e6>
 8019dbe:	ed31 7a01 	vldmdb	r1!, {s14}
 8019dc2:	3b01      	subs	r3, #1
 8019dc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019dc8:	e77f      	b.n	8019cca <__kernel_rem_pio2f+0x3ee>
 8019dca:	eef1 6a66 	vneg.f32	s13, s13
 8019dce:	eeb1 7a47 	vneg.f32	s14, s14
 8019dd2:	edc6 6a00 	vstr	s13, [r6]
 8019dd6:	ed86 7a01 	vstr	s14, [r6, #4]
 8019dda:	eef1 7a67 	vneg.f32	s15, s15
 8019dde:	e781      	b.n	8019ce4 <__kernel_rem_pio2f+0x408>

08019de0 <__kernel_sinf>:
 8019de0:	ee10 3a10 	vmov	r3, s0
 8019de4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019de8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019dec:	da04      	bge.n	8019df8 <__kernel_sinf+0x18>
 8019dee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019df2:	ee17 3a90 	vmov	r3, s15
 8019df6:	b35b      	cbz	r3, 8019e50 <__kernel_sinf+0x70>
 8019df8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019dfc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019e54 <__kernel_sinf+0x74>
 8019e00:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8019e58 <__kernel_sinf+0x78>
 8019e04:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019e08:	eddf 7a14 	vldr	s15, [pc, #80]	; 8019e5c <__kernel_sinf+0x7c>
 8019e0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019e10:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8019e60 <__kernel_sinf+0x80>
 8019e14:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019e18:	eddf 7a12 	vldr	s15, [pc, #72]	; 8019e64 <__kernel_sinf+0x84>
 8019e1c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8019e20:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019e24:	b930      	cbnz	r0, 8019e34 <__kernel_sinf+0x54>
 8019e26:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8019e68 <__kernel_sinf+0x88>
 8019e2a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019e2e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8019e32:	4770      	bx	lr
 8019e34:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019e38:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019e3c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019e40:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8019e44:	eddf 7a09 	vldr	s15, [pc, #36]	; 8019e6c <__kernel_sinf+0x8c>
 8019e48:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019e4c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019e50:	4770      	bx	lr
 8019e52:	bf00      	nop
 8019e54:	2f2ec9d3 	.word	0x2f2ec9d3
 8019e58:	b2d72f34 	.word	0xb2d72f34
 8019e5c:	3638ef1b 	.word	0x3638ef1b
 8019e60:	b9500d01 	.word	0xb9500d01
 8019e64:	3c088889 	.word	0x3c088889
 8019e68:	be2aaaab 	.word	0xbe2aaaab
 8019e6c:	3e2aaaab 	.word	0x3e2aaaab

08019e70 <matherr>:
 8019e70:	2000      	movs	r0, #0
 8019e72:	4770      	bx	lr
 8019e74:	0000      	movs	r0, r0
	...

08019e78 <nan>:
 8019e78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019e80 <nan+0x8>
 8019e7c:	4770      	bx	lr
 8019e7e:	bf00      	nop
 8019e80:	00000000 	.word	0x00000000
 8019e84:	7ff80000 	.word	0x7ff80000

08019e88 <atanf>:
 8019e88:	b538      	push	{r3, r4, r5, lr}
 8019e8a:	ee10 5a10 	vmov	r5, s0
 8019e8e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8019e92:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8019e96:	eef0 7a40 	vmov.f32	s15, s0
 8019e9a:	db10      	blt.n	8019ebe <atanf+0x36>
 8019e9c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019ea0:	dd04      	ble.n	8019eac <atanf+0x24>
 8019ea2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8019ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8019eaa:	bd38      	pop	{r3, r4, r5, pc}
 8019eac:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8019fe4 <atanf+0x15c>
 8019eb0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8019fe8 <atanf+0x160>
 8019eb4:	2d00      	cmp	r5, #0
 8019eb6:	bfd8      	it	le
 8019eb8:	eef0 7a47 	vmovle.f32	s15, s14
 8019ebc:	e7f3      	b.n	8019ea6 <atanf+0x1e>
 8019ebe:	4b4b      	ldr	r3, [pc, #300]	; (8019fec <atanf+0x164>)
 8019ec0:	429c      	cmp	r4, r3
 8019ec2:	dc10      	bgt.n	8019ee6 <atanf+0x5e>
 8019ec4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8019ec8:	da0a      	bge.n	8019ee0 <atanf+0x58>
 8019eca:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8019ff0 <atanf+0x168>
 8019ece:	ee30 7a07 	vadd.f32	s14, s0, s14
 8019ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019ed6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8019eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ede:	dce2      	bgt.n	8019ea6 <atanf+0x1e>
 8019ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8019ee4:	e013      	b.n	8019f0e <atanf+0x86>
 8019ee6:	f000 f8a3 	bl	801a030 <fabsf>
 8019eea:	4b42      	ldr	r3, [pc, #264]	; (8019ff4 <atanf+0x16c>)
 8019eec:	429c      	cmp	r4, r3
 8019eee:	dc4f      	bgt.n	8019f90 <atanf+0x108>
 8019ef0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8019ef4:	429c      	cmp	r4, r3
 8019ef6:	dc41      	bgt.n	8019f7c <atanf+0xf4>
 8019ef8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8019efc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019f00:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019f04:	2300      	movs	r3, #0
 8019f06:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019f0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019f0e:	1c5a      	adds	r2, r3, #1
 8019f10:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8019f14:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8019ff8 <atanf+0x170>
 8019f18:	eddf 5a38 	vldr	s11, [pc, #224]	; 8019ffc <atanf+0x174>
 8019f1c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801a000 <atanf+0x178>
 8019f20:	ee66 6a06 	vmul.f32	s13, s12, s12
 8019f24:	eee6 5a87 	vfma.f32	s11, s13, s14
 8019f28:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801a004 <atanf+0x17c>
 8019f2c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019f30:	eddf 5a35 	vldr	s11, [pc, #212]	; 801a008 <atanf+0x180>
 8019f34:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019f38:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801a00c <atanf+0x184>
 8019f3c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019f40:	eddf 5a33 	vldr	s11, [pc, #204]	; 801a010 <atanf+0x188>
 8019f44:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019f48:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801a014 <atanf+0x18c>
 8019f4c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8019f50:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801a018 <atanf+0x190>
 8019f54:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019f58:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801a01c <atanf+0x194>
 8019f5c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8019f60:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801a020 <atanf+0x198>
 8019f64:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019f68:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019f6c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8019f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019f74:	d121      	bne.n	8019fba <atanf+0x132>
 8019f76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f7a:	e794      	b.n	8019ea6 <atanf+0x1e>
 8019f7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019f80:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019f84:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019f88:	2301      	movs	r3, #1
 8019f8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019f8e:	e7be      	b.n	8019f0e <atanf+0x86>
 8019f90:	4b24      	ldr	r3, [pc, #144]	; (801a024 <atanf+0x19c>)
 8019f92:	429c      	cmp	r4, r3
 8019f94:	dc0b      	bgt.n	8019fae <atanf+0x126>
 8019f96:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8019f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019f9e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019fa2:	2302      	movs	r3, #2
 8019fa4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019fac:	e7af      	b.n	8019f0e <atanf+0x86>
 8019fae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019fb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019fb6:	2303      	movs	r3, #3
 8019fb8:	e7a9      	b.n	8019f0e <atanf+0x86>
 8019fba:	4a1b      	ldr	r2, [pc, #108]	; (801a028 <atanf+0x1a0>)
 8019fbc:	491b      	ldr	r1, [pc, #108]	; (801a02c <atanf+0x1a4>)
 8019fbe:	009b      	lsls	r3, r3, #2
 8019fc0:	441a      	add	r2, r3
 8019fc2:	440b      	add	r3, r1
 8019fc4:	edd3 6a00 	vldr	s13, [r3]
 8019fc8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019fcc:	2d00      	cmp	r5, #0
 8019fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019fd2:	ed92 7a00 	vldr	s14, [r2]
 8019fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019fda:	bfb8      	it	lt
 8019fdc:	eef1 7a67 	vneglt.f32	s15, s15
 8019fe0:	e761      	b.n	8019ea6 <atanf+0x1e>
 8019fe2:	bf00      	nop
 8019fe4:	bfc90fdb 	.word	0xbfc90fdb
 8019fe8:	3fc90fdb 	.word	0x3fc90fdb
 8019fec:	3edfffff 	.word	0x3edfffff
 8019ff0:	7149f2ca 	.word	0x7149f2ca
 8019ff4:	3f97ffff 	.word	0x3f97ffff
 8019ff8:	3c8569d7 	.word	0x3c8569d7
 8019ffc:	3d4bda59 	.word	0x3d4bda59
 801a000:	bd6ef16b 	.word	0xbd6ef16b
 801a004:	3d886b35 	.word	0x3d886b35
 801a008:	3dba2e6e 	.word	0x3dba2e6e
 801a00c:	3e124925 	.word	0x3e124925
 801a010:	3eaaaaab 	.word	0x3eaaaaab
 801a014:	bd15a221 	.word	0xbd15a221
 801a018:	bd9d8795 	.word	0xbd9d8795
 801a01c:	bde38e38 	.word	0xbde38e38
 801a020:	be4ccccd 	.word	0xbe4ccccd
 801a024:	401bffff 	.word	0x401bffff
 801a028:	0801f450 	.word	0x0801f450
 801a02c:	0801f460 	.word	0x0801f460

0801a030 <fabsf>:
 801a030:	ee10 3a10 	vmov	r3, s0
 801a034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a038:	ee00 3a10 	vmov	s0, r3
 801a03c:	4770      	bx	lr
	...

0801a040 <floorf>:
 801a040:	ee10 3a10 	vmov	r3, s0
 801a044:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a048:	0dca      	lsrs	r2, r1, #23
 801a04a:	3a7f      	subs	r2, #127	; 0x7f
 801a04c:	2a16      	cmp	r2, #22
 801a04e:	dc2a      	bgt.n	801a0a6 <floorf+0x66>
 801a050:	2a00      	cmp	r2, #0
 801a052:	da11      	bge.n	801a078 <floorf+0x38>
 801a054:	eddf 7a18 	vldr	s15, [pc, #96]	; 801a0b8 <floorf+0x78>
 801a058:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a05c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a064:	dd05      	ble.n	801a072 <floorf+0x32>
 801a066:	2b00      	cmp	r3, #0
 801a068:	da23      	bge.n	801a0b2 <floorf+0x72>
 801a06a:	4a14      	ldr	r2, [pc, #80]	; (801a0bc <floorf+0x7c>)
 801a06c:	2900      	cmp	r1, #0
 801a06e:	bf18      	it	ne
 801a070:	4613      	movne	r3, r2
 801a072:	ee00 3a10 	vmov	s0, r3
 801a076:	4770      	bx	lr
 801a078:	4911      	ldr	r1, [pc, #68]	; (801a0c0 <floorf+0x80>)
 801a07a:	4111      	asrs	r1, r2
 801a07c:	420b      	tst	r3, r1
 801a07e:	d0fa      	beq.n	801a076 <floorf+0x36>
 801a080:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801a0b8 <floorf+0x78>
 801a084:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a088:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a090:	ddef      	ble.n	801a072 <floorf+0x32>
 801a092:	2b00      	cmp	r3, #0
 801a094:	bfbe      	ittt	lt
 801a096:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801a09a:	fa40 f202 	asrlt.w	r2, r0, r2
 801a09e:	189b      	addlt	r3, r3, r2
 801a0a0:	ea23 0301 	bic.w	r3, r3, r1
 801a0a4:	e7e5      	b.n	801a072 <floorf+0x32>
 801a0a6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a0aa:	d3e4      	bcc.n	801a076 <floorf+0x36>
 801a0ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a0b0:	4770      	bx	lr
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	e7dd      	b.n	801a072 <floorf+0x32>
 801a0b6:	bf00      	nop
 801a0b8:	7149f2ca 	.word	0x7149f2ca
 801a0bc:	bf800000 	.word	0xbf800000
 801a0c0:	007fffff 	.word	0x007fffff

0801a0c4 <scalbnf>:
 801a0c4:	b508      	push	{r3, lr}
 801a0c6:	ee10 2a10 	vmov	r2, s0
 801a0ca:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801a0ce:	ed2d 8b02 	vpush	{d8}
 801a0d2:	eef0 0a40 	vmov.f32	s1, s0
 801a0d6:	d004      	beq.n	801a0e2 <scalbnf+0x1e>
 801a0d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a0dc:	d306      	bcc.n	801a0ec <scalbnf+0x28>
 801a0de:	ee70 0a00 	vadd.f32	s1, s0, s0
 801a0e2:	ecbd 8b02 	vpop	{d8}
 801a0e6:	eeb0 0a60 	vmov.f32	s0, s1
 801a0ea:	bd08      	pop	{r3, pc}
 801a0ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801a0f0:	d21c      	bcs.n	801a12c <scalbnf+0x68>
 801a0f2:	4b1f      	ldr	r3, [pc, #124]	; (801a170 <scalbnf+0xac>)
 801a0f4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a174 <scalbnf+0xb0>
 801a0f8:	4298      	cmp	r0, r3
 801a0fa:	ee60 0a27 	vmul.f32	s1, s0, s15
 801a0fe:	db10      	blt.n	801a122 <scalbnf+0x5e>
 801a100:	ee10 2a90 	vmov	r2, s1
 801a104:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801a108:	3b19      	subs	r3, #25
 801a10a:	4403      	add	r3, r0
 801a10c:	2bfe      	cmp	r3, #254	; 0xfe
 801a10e:	dd0f      	ble.n	801a130 <scalbnf+0x6c>
 801a110:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801a178 <scalbnf+0xb4>
 801a114:	eeb0 0a48 	vmov.f32	s0, s16
 801a118:	f000 f834 	bl	801a184 <copysignf>
 801a11c:	ee60 0a08 	vmul.f32	s1, s0, s16
 801a120:	e7df      	b.n	801a0e2 <scalbnf+0x1e>
 801a122:	eddf 7a16 	vldr	s15, [pc, #88]	; 801a17c <scalbnf+0xb8>
 801a126:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801a12a:	e7da      	b.n	801a0e2 <scalbnf+0x1e>
 801a12c:	0ddb      	lsrs	r3, r3, #23
 801a12e:	e7ec      	b.n	801a10a <scalbnf+0x46>
 801a130:	2b00      	cmp	r3, #0
 801a132:	dd06      	ble.n	801a142 <scalbnf+0x7e>
 801a134:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801a138:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a13c:	ee00 3a90 	vmov	s1, r3
 801a140:	e7cf      	b.n	801a0e2 <scalbnf+0x1e>
 801a142:	f113 0f16 	cmn.w	r3, #22
 801a146:	da06      	bge.n	801a156 <scalbnf+0x92>
 801a148:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a14c:	4298      	cmp	r0, r3
 801a14e:	dcdf      	bgt.n	801a110 <scalbnf+0x4c>
 801a150:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801a17c <scalbnf+0xb8>
 801a154:	e7de      	b.n	801a114 <scalbnf+0x50>
 801a156:	3319      	adds	r3, #25
 801a158:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801a15c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a160:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a180 <scalbnf+0xbc>
 801a164:	ee07 3a10 	vmov	s14, r3
 801a168:	ee67 0a27 	vmul.f32	s1, s14, s15
 801a16c:	e7b9      	b.n	801a0e2 <scalbnf+0x1e>
 801a16e:	bf00      	nop
 801a170:	ffff3cb0 	.word	0xffff3cb0
 801a174:	4c000000 	.word	0x4c000000
 801a178:	7149f2ca 	.word	0x7149f2ca
 801a17c:	0da24260 	.word	0x0da24260
 801a180:	33000000 	.word	0x33000000

0801a184 <copysignf>:
 801a184:	ee10 3a10 	vmov	r3, s0
 801a188:	ee10 2a90 	vmov	r2, s1
 801a18c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a190:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a194:	4313      	orrs	r3, r2
 801a196:	ee00 3a10 	vmov	s0, r3
 801a19a:	4770      	bx	lr

0801a19c <__assert_func>:
 801a19c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a19e:	461c      	mov	r4, r3
 801a1a0:	4b09      	ldr	r3, [pc, #36]	; (801a1c8 <__assert_func+0x2c>)
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	4605      	mov	r5, r0
 801a1a6:	68d8      	ldr	r0, [r3, #12]
 801a1a8:	b152      	cbz	r2, 801a1c0 <__assert_func+0x24>
 801a1aa:	4b08      	ldr	r3, [pc, #32]	; (801a1cc <__assert_func+0x30>)
 801a1ac:	9100      	str	r1, [sp, #0]
 801a1ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801a1b2:	4907      	ldr	r1, [pc, #28]	; (801a1d0 <__assert_func+0x34>)
 801a1b4:	462b      	mov	r3, r5
 801a1b6:	4622      	mov	r2, r4
 801a1b8:	f000 f814 	bl	801a1e4 <fiprintf>
 801a1bc:	f002 f886 	bl	801c2cc <abort>
 801a1c0:	4b04      	ldr	r3, [pc, #16]	; (801a1d4 <__assert_func+0x38>)
 801a1c2:	461a      	mov	r2, r3
 801a1c4:	e7f2      	b.n	801a1ac <__assert_func+0x10>
 801a1c6:	bf00      	nop
 801a1c8:	2000011c 	.word	0x2000011c
 801a1cc:	0801f470 	.word	0x0801f470
 801a1d0:	0801f47d 	.word	0x0801f47d
 801a1d4:	0801f4ab 	.word	0x0801f4ab

0801a1d8 <__errno>:
 801a1d8:	4b01      	ldr	r3, [pc, #4]	; (801a1e0 <__errno+0x8>)
 801a1da:	6818      	ldr	r0, [r3, #0]
 801a1dc:	4770      	bx	lr
 801a1de:	bf00      	nop
 801a1e0:	2000011c 	.word	0x2000011c

0801a1e4 <fiprintf>:
 801a1e4:	b40e      	push	{r1, r2, r3}
 801a1e6:	b503      	push	{r0, r1, lr}
 801a1e8:	4601      	mov	r1, r0
 801a1ea:	ab03      	add	r3, sp, #12
 801a1ec:	4805      	ldr	r0, [pc, #20]	; (801a204 <fiprintf+0x20>)
 801a1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801a1f2:	6800      	ldr	r0, [r0, #0]
 801a1f4:	9301      	str	r3, [sp, #4]
 801a1f6:	f000 f867 	bl	801a2c8 <_vfiprintf_r>
 801a1fa:	b002      	add	sp, #8
 801a1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801a200:	b003      	add	sp, #12
 801a202:	4770      	bx	lr
 801a204:	2000011c 	.word	0x2000011c

0801a208 <__libc_init_array>:
 801a208:	b570      	push	{r4, r5, r6, lr}
 801a20a:	4e0d      	ldr	r6, [pc, #52]	; (801a240 <__libc_init_array+0x38>)
 801a20c:	4c0d      	ldr	r4, [pc, #52]	; (801a244 <__libc_init_array+0x3c>)
 801a20e:	1ba4      	subs	r4, r4, r6
 801a210:	10a4      	asrs	r4, r4, #2
 801a212:	2500      	movs	r5, #0
 801a214:	42a5      	cmp	r5, r4
 801a216:	d109      	bne.n	801a22c <__libc_init_array+0x24>
 801a218:	4e0b      	ldr	r6, [pc, #44]	; (801a248 <__libc_init_array+0x40>)
 801a21a:	4c0c      	ldr	r4, [pc, #48]	; (801a24c <__libc_init_array+0x44>)
 801a21c:	f004 fb44 	bl	801e8a8 <_init>
 801a220:	1ba4      	subs	r4, r4, r6
 801a222:	10a4      	asrs	r4, r4, #2
 801a224:	2500      	movs	r5, #0
 801a226:	42a5      	cmp	r5, r4
 801a228:	d105      	bne.n	801a236 <__libc_init_array+0x2e>
 801a22a:	bd70      	pop	{r4, r5, r6, pc}
 801a22c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a230:	4798      	blx	r3
 801a232:	3501      	adds	r5, #1
 801a234:	e7ee      	b.n	801a214 <__libc_init_array+0xc>
 801a236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a23a:	4798      	blx	r3
 801a23c:	3501      	adds	r5, #1
 801a23e:	e7f2      	b.n	801a226 <__libc_init_array+0x1e>
 801a240:	0801f7d0 	.word	0x0801f7d0
 801a244:	0801f7d0 	.word	0x0801f7d0
 801a248:	0801f7d0 	.word	0x0801f7d0
 801a24c:	0801f7d8 	.word	0x0801f7d8

0801a250 <memcpy>:
 801a250:	b510      	push	{r4, lr}
 801a252:	1e43      	subs	r3, r0, #1
 801a254:	440a      	add	r2, r1
 801a256:	4291      	cmp	r1, r2
 801a258:	d100      	bne.n	801a25c <memcpy+0xc>
 801a25a:	bd10      	pop	{r4, pc}
 801a25c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a260:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a264:	e7f7      	b.n	801a256 <memcpy+0x6>

0801a266 <memset>:
 801a266:	4402      	add	r2, r0
 801a268:	4603      	mov	r3, r0
 801a26a:	4293      	cmp	r3, r2
 801a26c:	d100      	bne.n	801a270 <memset+0xa>
 801a26e:	4770      	bx	lr
 801a270:	f803 1b01 	strb.w	r1, [r3], #1
 801a274:	e7f9      	b.n	801a26a <memset+0x4>

0801a276 <__sfputc_r>:
 801a276:	6893      	ldr	r3, [r2, #8]
 801a278:	3b01      	subs	r3, #1
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	b410      	push	{r4}
 801a27e:	6093      	str	r3, [r2, #8]
 801a280:	da08      	bge.n	801a294 <__sfputc_r+0x1e>
 801a282:	6994      	ldr	r4, [r2, #24]
 801a284:	42a3      	cmp	r3, r4
 801a286:	db01      	blt.n	801a28c <__sfputc_r+0x16>
 801a288:	290a      	cmp	r1, #10
 801a28a:	d103      	bne.n	801a294 <__sfputc_r+0x1e>
 801a28c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a290:	f001 bf5c 	b.w	801c14c <__swbuf_r>
 801a294:	6813      	ldr	r3, [r2, #0]
 801a296:	1c58      	adds	r0, r3, #1
 801a298:	6010      	str	r0, [r2, #0]
 801a29a:	7019      	strb	r1, [r3, #0]
 801a29c:	4608      	mov	r0, r1
 801a29e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2a2:	4770      	bx	lr

0801a2a4 <__sfputs_r>:
 801a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2a6:	4606      	mov	r6, r0
 801a2a8:	460f      	mov	r7, r1
 801a2aa:	4614      	mov	r4, r2
 801a2ac:	18d5      	adds	r5, r2, r3
 801a2ae:	42ac      	cmp	r4, r5
 801a2b0:	d101      	bne.n	801a2b6 <__sfputs_r+0x12>
 801a2b2:	2000      	movs	r0, #0
 801a2b4:	e007      	b.n	801a2c6 <__sfputs_r+0x22>
 801a2b6:	463a      	mov	r2, r7
 801a2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2bc:	4630      	mov	r0, r6
 801a2be:	f7ff ffda 	bl	801a276 <__sfputc_r>
 801a2c2:	1c43      	adds	r3, r0, #1
 801a2c4:	d1f3      	bne.n	801a2ae <__sfputs_r+0xa>
 801a2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a2c8 <_vfiprintf_r>:
 801a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2cc:	460c      	mov	r4, r1
 801a2ce:	b09d      	sub	sp, #116	; 0x74
 801a2d0:	4617      	mov	r7, r2
 801a2d2:	461d      	mov	r5, r3
 801a2d4:	4606      	mov	r6, r0
 801a2d6:	b118      	cbz	r0, 801a2e0 <_vfiprintf_r+0x18>
 801a2d8:	6983      	ldr	r3, [r0, #24]
 801a2da:	b90b      	cbnz	r3, 801a2e0 <_vfiprintf_r+0x18>
 801a2dc:	f002 ff34 	bl	801d148 <__sinit>
 801a2e0:	4b7c      	ldr	r3, [pc, #496]	; (801a4d4 <_vfiprintf_r+0x20c>)
 801a2e2:	429c      	cmp	r4, r3
 801a2e4:	d158      	bne.n	801a398 <_vfiprintf_r+0xd0>
 801a2e6:	6874      	ldr	r4, [r6, #4]
 801a2e8:	89a3      	ldrh	r3, [r4, #12]
 801a2ea:	0718      	lsls	r0, r3, #28
 801a2ec:	d55e      	bpl.n	801a3ac <_vfiprintf_r+0xe4>
 801a2ee:	6923      	ldr	r3, [r4, #16]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d05b      	beq.n	801a3ac <_vfiprintf_r+0xe4>
 801a2f4:	2300      	movs	r3, #0
 801a2f6:	9309      	str	r3, [sp, #36]	; 0x24
 801a2f8:	2320      	movs	r3, #32
 801a2fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a2fe:	2330      	movs	r3, #48	; 0x30
 801a300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a304:	9503      	str	r5, [sp, #12]
 801a306:	f04f 0b01 	mov.w	fp, #1
 801a30a:	46b8      	mov	r8, r7
 801a30c:	4645      	mov	r5, r8
 801a30e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a312:	b10b      	cbz	r3, 801a318 <_vfiprintf_r+0x50>
 801a314:	2b25      	cmp	r3, #37	; 0x25
 801a316:	d154      	bne.n	801a3c2 <_vfiprintf_r+0xfa>
 801a318:	ebb8 0a07 	subs.w	sl, r8, r7
 801a31c:	d00b      	beq.n	801a336 <_vfiprintf_r+0x6e>
 801a31e:	4653      	mov	r3, sl
 801a320:	463a      	mov	r2, r7
 801a322:	4621      	mov	r1, r4
 801a324:	4630      	mov	r0, r6
 801a326:	f7ff ffbd 	bl	801a2a4 <__sfputs_r>
 801a32a:	3001      	adds	r0, #1
 801a32c:	f000 80c2 	beq.w	801a4b4 <_vfiprintf_r+0x1ec>
 801a330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a332:	4453      	add	r3, sl
 801a334:	9309      	str	r3, [sp, #36]	; 0x24
 801a336:	f898 3000 	ldrb.w	r3, [r8]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	f000 80ba 	beq.w	801a4b4 <_vfiprintf_r+0x1ec>
 801a340:	2300      	movs	r3, #0
 801a342:	f04f 32ff 	mov.w	r2, #4294967295
 801a346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a34a:	9304      	str	r3, [sp, #16]
 801a34c:	9307      	str	r3, [sp, #28]
 801a34e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a352:	931a      	str	r3, [sp, #104]	; 0x68
 801a354:	46a8      	mov	r8, r5
 801a356:	2205      	movs	r2, #5
 801a358:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a35c:	485e      	ldr	r0, [pc, #376]	; (801a4d8 <_vfiprintf_r+0x210>)
 801a35e:	f7e5 ff4f 	bl	8000200 <memchr>
 801a362:	9b04      	ldr	r3, [sp, #16]
 801a364:	bb78      	cbnz	r0, 801a3c6 <_vfiprintf_r+0xfe>
 801a366:	06d9      	lsls	r1, r3, #27
 801a368:	bf44      	itt	mi
 801a36a:	2220      	movmi	r2, #32
 801a36c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a370:	071a      	lsls	r2, r3, #28
 801a372:	bf44      	itt	mi
 801a374:	222b      	movmi	r2, #43	; 0x2b
 801a376:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a37a:	782a      	ldrb	r2, [r5, #0]
 801a37c:	2a2a      	cmp	r2, #42	; 0x2a
 801a37e:	d02a      	beq.n	801a3d6 <_vfiprintf_r+0x10e>
 801a380:	9a07      	ldr	r2, [sp, #28]
 801a382:	46a8      	mov	r8, r5
 801a384:	2000      	movs	r0, #0
 801a386:	250a      	movs	r5, #10
 801a388:	4641      	mov	r1, r8
 801a38a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a38e:	3b30      	subs	r3, #48	; 0x30
 801a390:	2b09      	cmp	r3, #9
 801a392:	d969      	bls.n	801a468 <_vfiprintf_r+0x1a0>
 801a394:	b360      	cbz	r0, 801a3f0 <_vfiprintf_r+0x128>
 801a396:	e024      	b.n	801a3e2 <_vfiprintf_r+0x11a>
 801a398:	4b50      	ldr	r3, [pc, #320]	; (801a4dc <_vfiprintf_r+0x214>)
 801a39a:	429c      	cmp	r4, r3
 801a39c:	d101      	bne.n	801a3a2 <_vfiprintf_r+0xda>
 801a39e:	68b4      	ldr	r4, [r6, #8]
 801a3a0:	e7a2      	b.n	801a2e8 <_vfiprintf_r+0x20>
 801a3a2:	4b4f      	ldr	r3, [pc, #316]	; (801a4e0 <_vfiprintf_r+0x218>)
 801a3a4:	429c      	cmp	r4, r3
 801a3a6:	bf08      	it	eq
 801a3a8:	68f4      	ldreq	r4, [r6, #12]
 801a3aa:	e79d      	b.n	801a2e8 <_vfiprintf_r+0x20>
 801a3ac:	4621      	mov	r1, r4
 801a3ae:	4630      	mov	r0, r6
 801a3b0:	f001 ff1e 	bl	801c1f0 <__swsetup_r>
 801a3b4:	2800      	cmp	r0, #0
 801a3b6:	d09d      	beq.n	801a2f4 <_vfiprintf_r+0x2c>
 801a3b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a3bc:	b01d      	add	sp, #116	; 0x74
 801a3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3c2:	46a8      	mov	r8, r5
 801a3c4:	e7a2      	b.n	801a30c <_vfiprintf_r+0x44>
 801a3c6:	4a44      	ldr	r2, [pc, #272]	; (801a4d8 <_vfiprintf_r+0x210>)
 801a3c8:	1a80      	subs	r0, r0, r2
 801a3ca:	fa0b f000 	lsl.w	r0, fp, r0
 801a3ce:	4318      	orrs	r0, r3
 801a3d0:	9004      	str	r0, [sp, #16]
 801a3d2:	4645      	mov	r5, r8
 801a3d4:	e7be      	b.n	801a354 <_vfiprintf_r+0x8c>
 801a3d6:	9a03      	ldr	r2, [sp, #12]
 801a3d8:	1d11      	adds	r1, r2, #4
 801a3da:	6812      	ldr	r2, [r2, #0]
 801a3dc:	9103      	str	r1, [sp, #12]
 801a3de:	2a00      	cmp	r2, #0
 801a3e0:	db01      	blt.n	801a3e6 <_vfiprintf_r+0x11e>
 801a3e2:	9207      	str	r2, [sp, #28]
 801a3e4:	e004      	b.n	801a3f0 <_vfiprintf_r+0x128>
 801a3e6:	4252      	negs	r2, r2
 801a3e8:	f043 0302 	orr.w	r3, r3, #2
 801a3ec:	9207      	str	r2, [sp, #28]
 801a3ee:	9304      	str	r3, [sp, #16]
 801a3f0:	f898 3000 	ldrb.w	r3, [r8]
 801a3f4:	2b2e      	cmp	r3, #46	; 0x2e
 801a3f6:	d10e      	bne.n	801a416 <_vfiprintf_r+0x14e>
 801a3f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a3fc:	2b2a      	cmp	r3, #42	; 0x2a
 801a3fe:	d138      	bne.n	801a472 <_vfiprintf_r+0x1aa>
 801a400:	9b03      	ldr	r3, [sp, #12]
 801a402:	1d1a      	adds	r2, r3, #4
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	9203      	str	r2, [sp, #12]
 801a408:	2b00      	cmp	r3, #0
 801a40a:	bfb8      	it	lt
 801a40c:	f04f 33ff 	movlt.w	r3, #4294967295
 801a410:	f108 0802 	add.w	r8, r8, #2
 801a414:	9305      	str	r3, [sp, #20]
 801a416:	4d33      	ldr	r5, [pc, #204]	; (801a4e4 <_vfiprintf_r+0x21c>)
 801a418:	f898 1000 	ldrb.w	r1, [r8]
 801a41c:	2203      	movs	r2, #3
 801a41e:	4628      	mov	r0, r5
 801a420:	f7e5 feee 	bl	8000200 <memchr>
 801a424:	b140      	cbz	r0, 801a438 <_vfiprintf_r+0x170>
 801a426:	2340      	movs	r3, #64	; 0x40
 801a428:	1b40      	subs	r0, r0, r5
 801a42a:	fa03 f000 	lsl.w	r0, r3, r0
 801a42e:	9b04      	ldr	r3, [sp, #16]
 801a430:	4303      	orrs	r3, r0
 801a432:	f108 0801 	add.w	r8, r8, #1
 801a436:	9304      	str	r3, [sp, #16]
 801a438:	f898 1000 	ldrb.w	r1, [r8]
 801a43c:	482a      	ldr	r0, [pc, #168]	; (801a4e8 <_vfiprintf_r+0x220>)
 801a43e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a442:	2206      	movs	r2, #6
 801a444:	f108 0701 	add.w	r7, r8, #1
 801a448:	f7e5 feda 	bl	8000200 <memchr>
 801a44c:	2800      	cmp	r0, #0
 801a44e:	d037      	beq.n	801a4c0 <_vfiprintf_r+0x1f8>
 801a450:	4b26      	ldr	r3, [pc, #152]	; (801a4ec <_vfiprintf_r+0x224>)
 801a452:	bb1b      	cbnz	r3, 801a49c <_vfiprintf_r+0x1d4>
 801a454:	9b03      	ldr	r3, [sp, #12]
 801a456:	3307      	adds	r3, #7
 801a458:	f023 0307 	bic.w	r3, r3, #7
 801a45c:	3308      	adds	r3, #8
 801a45e:	9303      	str	r3, [sp, #12]
 801a460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a462:	444b      	add	r3, r9
 801a464:	9309      	str	r3, [sp, #36]	; 0x24
 801a466:	e750      	b.n	801a30a <_vfiprintf_r+0x42>
 801a468:	fb05 3202 	mla	r2, r5, r2, r3
 801a46c:	2001      	movs	r0, #1
 801a46e:	4688      	mov	r8, r1
 801a470:	e78a      	b.n	801a388 <_vfiprintf_r+0xc0>
 801a472:	2300      	movs	r3, #0
 801a474:	f108 0801 	add.w	r8, r8, #1
 801a478:	9305      	str	r3, [sp, #20]
 801a47a:	4619      	mov	r1, r3
 801a47c:	250a      	movs	r5, #10
 801a47e:	4640      	mov	r0, r8
 801a480:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a484:	3a30      	subs	r2, #48	; 0x30
 801a486:	2a09      	cmp	r2, #9
 801a488:	d903      	bls.n	801a492 <_vfiprintf_r+0x1ca>
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d0c3      	beq.n	801a416 <_vfiprintf_r+0x14e>
 801a48e:	9105      	str	r1, [sp, #20]
 801a490:	e7c1      	b.n	801a416 <_vfiprintf_r+0x14e>
 801a492:	fb05 2101 	mla	r1, r5, r1, r2
 801a496:	2301      	movs	r3, #1
 801a498:	4680      	mov	r8, r0
 801a49a:	e7f0      	b.n	801a47e <_vfiprintf_r+0x1b6>
 801a49c:	ab03      	add	r3, sp, #12
 801a49e:	9300      	str	r3, [sp, #0]
 801a4a0:	4622      	mov	r2, r4
 801a4a2:	4b13      	ldr	r3, [pc, #76]	; (801a4f0 <_vfiprintf_r+0x228>)
 801a4a4:	a904      	add	r1, sp, #16
 801a4a6:	4630      	mov	r0, r6
 801a4a8:	f000 f8b8 	bl	801a61c <_printf_float>
 801a4ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a4b0:	4681      	mov	r9, r0
 801a4b2:	d1d5      	bne.n	801a460 <_vfiprintf_r+0x198>
 801a4b4:	89a3      	ldrh	r3, [r4, #12]
 801a4b6:	065b      	lsls	r3, r3, #25
 801a4b8:	f53f af7e 	bmi.w	801a3b8 <_vfiprintf_r+0xf0>
 801a4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a4be:	e77d      	b.n	801a3bc <_vfiprintf_r+0xf4>
 801a4c0:	ab03      	add	r3, sp, #12
 801a4c2:	9300      	str	r3, [sp, #0]
 801a4c4:	4622      	mov	r2, r4
 801a4c6:	4b0a      	ldr	r3, [pc, #40]	; (801a4f0 <_vfiprintf_r+0x228>)
 801a4c8:	a904      	add	r1, sp, #16
 801a4ca:	4630      	mov	r0, r6
 801a4cc:	f000 fb5c 	bl	801ab88 <_printf_i>
 801a4d0:	e7ec      	b.n	801a4ac <_vfiprintf_r+0x1e4>
 801a4d2:	bf00      	nop
 801a4d4:	0801f578 	.word	0x0801f578
 801a4d8:	0801f4b0 	.word	0x0801f4b0
 801a4dc:	0801f598 	.word	0x0801f598
 801a4e0:	0801f558 	.word	0x0801f558
 801a4e4:	0801f4b6 	.word	0x0801f4b6
 801a4e8:	0801f4ba 	.word	0x0801f4ba
 801a4ec:	0801a61d 	.word	0x0801a61d
 801a4f0:	0801a2a5 	.word	0x0801a2a5

0801a4f4 <__cvt>:
 801a4f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a4f8:	ec55 4b10 	vmov	r4, r5, d0
 801a4fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801a4fe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a502:	2d00      	cmp	r5, #0
 801a504:	460e      	mov	r6, r1
 801a506:	4691      	mov	r9, r2
 801a508:	4619      	mov	r1, r3
 801a50a:	bfb8      	it	lt
 801a50c:	4622      	movlt	r2, r4
 801a50e:	462b      	mov	r3, r5
 801a510:	f027 0720 	bic.w	r7, r7, #32
 801a514:	bfbb      	ittet	lt
 801a516:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a51a:	461d      	movlt	r5, r3
 801a51c:	2300      	movge	r3, #0
 801a51e:	232d      	movlt	r3, #45	; 0x2d
 801a520:	bfb8      	it	lt
 801a522:	4614      	movlt	r4, r2
 801a524:	2f46      	cmp	r7, #70	; 0x46
 801a526:	700b      	strb	r3, [r1, #0]
 801a528:	d004      	beq.n	801a534 <__cvt+0x40>
 801a52a:	2f45      	cmp	r7, #69	; 0x45
 801a52c:	d100      	bne.n	801a530 <__cvt+0x3c>
 801a52e:	3601      	adds	r6, #1
 801a530:	2102      	movs	r1, #2
 801a532:	e000      	b.n	801a536 <__cvt+0x42>
 801a534:	2103      	movs	r1, #3
 801a536:	ab03      	add	r3, sp, #12
 801a538:	9301      	str	r3, [sp, #4]
 801a53a:	ab02      	add	r3, sp, #8
 801a53c:	9300      	str	r3, [sp, #0]
 801a53e:	4632      	mov	r2, r6
 801a540:	4653      	mov	r3, sl
 801a542:	ec45 4b10 	vmov	d0, r4, r5
 801a546:	f001 ff57 	bl	801c3f8 <_dtoa_r>
 801a54a:	2f47      	cmp	r7, #71	; 0x47
 801a54c:	4680      	mov	r8, r0
 801a54e:	d102      	bne.n	801a556 <__cvt+0x62>
 801a550:	f019 0f01 	tst.w	r9, #1
 801a554:	d026      	beq.n	801a5a4 <__cvt+0xb0>
 801a556:	2f46      	cmp	r7, #70	; 0x46
 801a558:	eb08 0906 	add.w	r9, r8, r6
 801a55c:	d111      	bne.n	801a582 <__cvt+0x8e>
 801a55e:	f898 3000 	ldrb.w	r3, [r8]
 801a562:	2b30      	cmp	r3, #48	; 0x30
 801a564:	d10a      	bne.n	801a57c <__cvt+0x88>
 801a566:	2200      	movs	r2, #0
 801a568:	2300      	movs	r3, #0
 801a56a:	4620      	mov	r0, r4
 801a56c:	4629      	mov	r1, r5
 801a56e:	f7e6 fabb 	bl	8000ae8 <__aeabi_dcmpeq>
 801a572:	b918      	cbnz	r0, 801a57c <__cvt+0x88>
 801a574:	f1c6 0601 	rsb	r6, r6, #1
 801a578:	f8ca 6000 	str.w	r6, [sl]
 801a57c:	f8da 3000 	ldr.w	r3, [sl]
 801a580:	4499      	add	r9, r3
 801a582:	2200      	movs	r2, #0
 801a584:	2300      	movs	r3, #0
 801a586:	4620      	mov	r0, r4
 801a588:	4629      	mov	r1, r5
 801a58a:	f7e6 faad 	bl	8000ae8 <__aeabi_dcmpeq>
 801a58e:	b938      	cbnz	r0, 801a5a0 <__cvt+0xac>
 801a590:	2230      	movs	r2, #48	; 0x30
 801a592:	9b03      	ldr	r3, [sp, #12]
 801a594:	454b      	cmp	r3, r9
 801a596:	d205      	bcs.n	801a5a4 <__cvt+0xb0>
 801a598:	1c59      	adds	r1, r3, #1
 801a59a:	9103      	str	r1, [sp, #12]
 801a59c:	701a      	strb	r2, [r3, #0]
 801a59e:	e7f8      	b.n	801a592 <__cvt+0x9e>
 801a5a0:	f8cd 900c 	str.w	r9, [sp, #12]
 801a5a4:	9b03      	ldr	r3, [sp, #12]
 801a5a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a5a8:	eba3 0308 	sub.w	r3, r3, r8
 801a5ac:	4640      	mov	r0, r8
 801a5ae:	6013      	str	r3, [r2, #0]
 801a5b0:	b004      	add	sp, #16
 801a5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a5b6 <__exponent>:
 801a5b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a5b8:	2900      	cmp	r1, #0
 801a5ba:	4604      	mov	r4, r0
 801a5bc:	bfba      	itte	lt
 801a5be:	4249      	neglt	r1, r1
 801a5c0:	232d      	movlt	r3, #45	; 0x2d
 801a5c2:	232b      	movge	r3, #43	; 0x2b
 801a5c4:	2909      	cmp	r1, #9
 801a5c6:	f804 2b02 	strb.w	r2, [r4], #2
 801a5ca:	7043      	strb	r3, [r0, #1]
 801a5cc:	dd20      	ble.n	801a610 <__exponent+0x5a>
 801a5ce:	f10d 0307 	add.w	r3, sp, #7
 801a5d2:	461f      	mov	r7, r3
 801a5d4:	260a      	movs	r6, #10
 801a5d6:	fb91 f5f6 	sdiv	r5, r1, r6
 801a5da:	fb06 1115 	mls	r1, r6, r5, r1
 801a5de:	3130      	adds	r1, #48	; 0x30
 801a5e0:	2d09      	cmp	r5, #9
 801a5e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a5e6:	f103 32ff 	add.w	r2, r3, #4294967295
 801a5ea:	4629      	mov	r1, r5
 801a5ec:	dc09      	bgt.n	801a602 <__exponent+0x4c>
 801a5ee:	3130      	adds	r1, #48	; 0x30
 801a5f0:	3b02      	subs	r3, #2
 801a5f2:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a5f6:	42bb      	cmp	r3, r7
 801a5f8:	4622      	mov	r2, r4
 801a5fa:	d304      	bcc.n	801a606 <__exponent+0x50>
 801a5fc:	1a10      	subs	r0, r2, r0
 801a5fe:	b003      	add	sp, #12
 801a600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a602:	4613      	mov	r3, r2
 801a604:	e7e7      	b.n	801a5d6 <__exponent+0x20>
 801a606:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a60a:	f804 2b01 	strb.w	r2, [r4], #1
 801a60e:	e7f2      	b.n	801a5f6 <__exponent+0x40>
 801a610:	2330      	movs	r3, #48	; 0x30
 801a612:	4419      	add	r1, r3
 801a614:	7083      	strb	r3, [r0, #2]
 801a616:	1d02      	adds	r2, r0, #4
 801a618:	70c1      	strb	r1, [r0, #3]
 801a61a:	e7ef      	b.n	801a5fc <__exponent+0x46>

0801a61c <_printf_float>:
 801a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a620:	b08d      	sub	sp, #52	; 0x34
 801a622:	460c      	mov	r4, r1
 801a624:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a628:	4616      	mov	r6, r2
 801a62a:	461f      	mov	r7, r3
 801a62c:	4605      	mov	r5, r0
 801a62e:	f003 f941 	bl	801d8b4 <_localeconv_r>
 801a632:	6803      	ldr	r3, [r0, #0]
 801a634:	9304      	str	r3, [sp, #16]
 801a636:	4618      	mov	r0, r3
 801a638:	f7e5 fdda 	bl	80001f0 <strlen>
 801a63c:	2300      	movs	r3, #0
 801a63e:	930a      	str	r3, [sp, #40]	; 0x28
 801a640:	f8d8 3000 	ldr.w	r3, [r8]
 801a644:	9005      	str	r0, [sp, #20]
 801a646:	3307      	adds	r3, #7
 801a648:	f023 0307 	bic.w	r3, r3, #7
 801a64c:	f103 0208 	add.w	r2, r3, #8
 801a650:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a654:	f8d4 b000 	ldr.w	fp, [r4]
 801a658:	f8c8 2000 	str.w	r2, [r8]
 801a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a660:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a664:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a668:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a66c:	9307      	str	r3, [sp, #28]
 801a66e:	f8cd 8018 	str.w	r8, [sp, #24]
 801a672:	f04f 32ff 	mov.w	r2, #4294967295
 801a676:	4ba7      	ldr	r3, [pc, #668]	; (801a914 <_printf_float+0x2f8>)
 801a678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a67c:	f7e6 fa66 	bl	8000b4c <__aeabi_dcmpun>
 801a680:	bb70      	cbnz	r0, 801a6e0 <_printf_float+0xc4>
 801a682:	f04f 32ff 	mov.w	r2, #4294967295
 801a686:	4ba3      	ldr	r3, [pc, #652]	; (801a914 <_printf_float+0x2f8>)
 801a688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a68c:	f7e6 fa40 	bl	8000b10 <__aeabi_dcmple>
 801a690:	bb30      	cbnz	r0, 801a6e0 <_printf_float+0xc4>
 801a692:	2200      	movs	r2, #0
 801a694:	2300      	movs	r3, #0
 801a696:	4640      	mov	r0, r8
 801a698:	4649      	mov	r1, r9
 801a69a:	f7e6 fa2f 	bl	8000afc <__aeabi_dcmplt>
 801a69e:	b110      	cbz	r0, 801a6a6 <_printf_float+0x8a>
 801a6a0:	232d      	movs	r3, #45	; 0x2d
 801a6a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a6a6:	4a9c      	ldr	r2, [pc, #624]	; (801a918 <_printf_float+0x2fc>)
 801a6a8:	4b9c      	ldr	r3, [pc, #624]	; (801a91c <_printf_float+0x300>)
 801a6aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801a6ae:	bf8c      	ite	hi
 801a6b0:	4690      	movhi	r8, r2
 801a6b2:	4698      	movls	r8, r3
 801a6b4:	2303      	movs	r3, #3
 801a6b6:	f02b 0204 	bic.w	r2, fp, #4
 801a6ba:	6123      	str	r3, [r4, #16]
 801a6bc:	6022      	str	r2, [r4, #0]
 801a6be:	f04f 0900 	mov.w	r9, #0
 801a6c2:	9700      	str	r7, [sp, #0]
 801a6c4:	4633      	mov	r3, r6
 801a6c6:	aa0b      	add	r2, sp, #44	; 0x2c
 801a6c8:	4621      	mov	r1, r4
 801a6ca:	4628      	mov	r0, r5
 801a6cc:	f000 f9e6 	bl	801aa9c <_printf_common>
 801a6d0:	3001      	adds	r0, #1
 801a6d2:	f040 808d 	bne.w	801a7f0 <_printf_float+0x1d4>
 801a6d6:	f04f 30ff 	mov.w	r0, #4294967295
 801a6da:	b00d      	add	sp, #52	; 0x34
 801a6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6e0:	4642      	mov	r2, r8
 801a6e2:	464b      	mov	r3, r9
 801a6e4:	4640      	mov	r0, r8
 801a6e6:	4649      	mov	r1, r9
 801a6e8:	f7e6 fa30 	bl	8000b4c <__aeabi_dcmpun>
 801a6ec:	b110      	cbz	r0, 801a6f4 <_printf_float+0xd8>
 801a6ee:	4a8c      	ldr	r2, [pc, #560]	; (801a920 <_printf_float+0x304>)
 801a6f0:	4b8c      	ldr	r3, [pc, #560]	; (801a924 <_printf_float+0x308>)
 801a6f2:	e7da      	b.n	801a6aa <_printf_float+0x8e>
 801a6f4:	6861      	ldr	r1, [r4, #4]
 801a6f6:	1c4b      	adds	r3, r1, #1
 801a6f8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801a6fc:	a80a      	add	r0, sp, #40	; 0x28
 801a6fe:	d13e      	bne.n	801a77e <_printf_float+0x162>
 801a700:	2306      	movs	r3, #6
 801a702:	6063      	str	r3, [r4, #4]
 801a704:	2300      	movs	r3, #0
 801a706:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801a70a:	ab09      	add	r3, sp, #36	; 0x24
 801a70c:	9300      	str	r3, [sp, #0]
 801a70e:	ec49 8b10 	vmov	d0, r8, r9
 801a712:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a716:	6022      	str	r2, [r4, #0]
 801a718:	f8cd a004 	str.w	sl, [sp, #4]
 801a71c:	6861      	ldr	r1, [r4, #4]
 801a71e:	4628      	mov	r0, r5
 801a720:	f7ff fee8 	bl	801a4f4 <__cvt>
 801a724:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801a728:	2b47      	cmp	r3, #71	; 0x47
 801a72a:	4680      	mov	r8, r0
 801a72c:	d109      	bne.n	801a742 <_printf_float+0x126>
 801a72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a730:	1cd8      	adds	r0, r3, #3
 801a732:	db02      	blt.n	801a73a <_printf_float+0x11e>
 801a734:	6862      	ldr	r2, [r4, #4]
 801a736:	4293      	cmp	r3, r2
 801a738:	dd47      	ble.n	801a7ca <_printf_float+0x1ae>
 801a73a:	f1aa 0a02 	sub.w	sl, sl, #2
 801a73e:	fa5f fa8a 	uxtb.w	sl, sl
 801a742:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801a746:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a748:	d824      	bhi.n	801a794 <_printf_float+0x178>
 801a74a:	3901      	subs	r1, #1
 801a74c:	4652      	mov	r2, sl
 801a74e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a752:	9109      	str	r1, [sp, #36]	; 0x24
 801a754:	f7ff ff2f 	bl	801a5b6 <__exponent>
 801a758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a75a:	1813      	adds	r3, r2, r0
 801a75c:	2a01      	cmp	r2, #1
 801a75e:	4681      	mov	r9, r0
 801a760:	6123      	str	r3, [r4, #16]
 801a762:	dc02      	bgt.n	801a76a <_printf_float+0x14e>
 801a764:	6822      	ldr	r2, [r4, #0]
 801a766:	07d1      	lsls	r1, r2, #31
 801a768:	d501      	bpl.n	801a76e <_printf_float+0x152>
 801a76a:	3301      	adds	r3, #1
 801a76c:	6123      	str	r3, [r4, #16]
 801a76e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a772:	2b00      	cmp	r3, #0
 801a774:	d0a5      	beq.n	801a6c2 <_printf_float+0xa6>
 801a776:	232d      	movs	r3, #45	; 0x2d
 801a778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a77c:	e7a1      	b.n	801a6c2 <_printf_float+0xa6>
 801a77e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801a782:	f000 8177 	beq.w	801aa74 <_printf_float+0x458>
 801a786:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801a78a:	d1bb      	bne.n	801a704 <_printf_float+0xe8>
 801a78c:	2900      	cmp	r1, #0
 801a78e:	d1b9      	bne.n	801a704 <_printf_float+0xe8>
 801a790:	2301      	movs	r3, #1
 801a792:	e7b6      	b.n	801a702 <_printf_float+0xe6>
 801a794:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801a798:	d119      	bne.n	801a7ce <_printf_float+0x1b2>
 801a79a:	2900      	cmp	r1, #0
 801a79c:	6863      	ldr	r3, [r4, #4]
 801a79e:	dd0c      	ble.n	801a7ba <_printf_float+0x19e>
 801a7a0:	6121      	str	r1, [r4, #16]
 801a7a2:	b913      	cbnz	r3, 801a7aa <_printf_float+0x18e>
 801a7a4:	6822      	ldr	r2, [r4, #0]
 801a7a6:	07d2      	lsls	r2, r2, #31
 801a7a8:	d502      	bpl.n	801a7b0 <_printf_float+0x194>
 801a7aa:	3301      	adds	r3, #1
 801a7ac:	440b      	add	r3, r1
 801a7ae:	6123      	str	r3, [r4, #16]
 801a7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7b2:	65a3      	str	r3, [r4, #88]	; 0x58
 801a7b4:	f04f 0900 	mov.w	r9, #0
 801a7b8:	e7d9      	b.n	801a76e <_printf_float+0x152>
 801a7ba:	b913      	cbnz	r3, 801a7c2 <_printf_float+0x1a6>
 801a7bc:	6822      	ldr	r2, [r4, #0]
 801a7be:	07d0      	lsls	r0, r2, #31
 801a7c0:	d501      	bpl.n	801a7c6 <_printf_float+0x1aa>
 801a7c2:	3302      	adds	r3, #2
 801a7c4:	e7f3      	b.n	801a7ae <_printf_float+0x192>
 801a7c6:	2301      	movs	r3, #1
 801a7c8:	e7f1      	b.n	801a7ae <_printf_float+0x192>
 801a7ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801a7ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a7d2:	4293      	cmp	r3, r2
 801a7d4:	db05      	blt.n	801a7e2 <_printf_float+0x1c6>
 801a7d6:	6822      	ldr	r2, [r4, #0]
 801a7d8:	6123      	str	r3, [r4, #16]
 801a7da:	07d1      	lsls	r1, r2, #31
 801a7dc:	d5e8      	bpl.n	801a7b0 <_printf_float+0x194>
 801a7de:	3301      	adds	r3, #1
 801a7e0:	e7e5      	b.n	801a7ae <_printf_float+0x192>
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	bfd4      	ite	le
 801a7e6:	f1c3 0302 	rsble	r3, r3, #2
 801a7ea:	2301      	movgt	r3, #1
 801a7ec:	4413      	add	r3, r2
 801a7ee:	e7de      	b.n	801a7ae <_printf_float+0x192>
 801a7f0:	6823      	ldr	r3, [r4, #0]
 801a7f2:	055a      	lsls	r2, r3, #21
 801a7f4:	d407      	bmi.n	801a806 <_printf_float+0x1ea>
 801a7f6:	6923      	ldr	r3, [r4, #16]
 801a7f8:	4642      	mov	r2, r8
 801a7fa:	4631      	mov	r1, r6
 801a7fc:	4628      	mov	r0, r5
 801a7fe:	47b8      	blx	r7
 801a800:	3001      	adds	r0, #1
 801a802:	d12b      	bne.n	801a85c <_printf_float+0x240>
 801a804:	e767      	b.n	801a6d6 <_printf_float+0xba>
 801a806:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801a80a:	f240 80dc 	bls.w	801a9c6 <_printf_float+0x3aa>
 801a80e:	2200      	movs	r2, #0
 801a810:	2300      	movs	r3, #0
 801a812:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a816:	f7e6 f967 	bl	8000ae8 <__aeabi_dcmpeq>
 801a81a:	2800      	cmp	r0, #0
 801a81c:	d033      	beq.n	801a886 <_printf_float+0x26a>
 801a81e:	2301      	movs	r3, #1
 801a820:	4a41      	ldr	r2, [pc, #260]	; (801a928 <_printf_float+0x30c>)
 801a822:	4631      	mov	r1, r6
 801a824:	4628      	mov	r0, r5
 801a826:	47b8      	blx	r7
 801a828:	3001      	adds	r0, #1
 801a82a:	f43f af54 	beq.w	801a6d6 <_printf_float+0xba>
 801a82e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a832:	429a      	cmp	r2, r3
 801a834:	db02      	blt.n	801a83c <_printf_float+0x220>
 801a836:	6823      	ldr	r3, [r4, #0]
 801a838:	07d8      	lsls	r0, r3, #31
 801a83a:	d50f      	bpl.n	801a85c <_printf_float+0x240>
 801a83c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a840:	4631      	mov	r1, r6
 801a842:	4628      	mov	r0, r5
 801a844:	47b8      	blx	r7
 801a846:	3001      	adds	r0, #1
 801a848:	f43f af45 	beq.w	801a6d6 <_printf_float+0xba>
 801a84c:	f04f 0800 	mov.w	r8, #0
 801a850:	f104 091a 	add.w	r9, r4, #26
 801a854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a856:	3b01      	subs	r3, #1
 801a858:	4543      	cmp	r3, r8
 801a85a:	dc09      	bgt.n	801a870 <_printf_float+0x254>
 801a85c:	6823      	ldr	r3, [r4, #0]
 801a85e:	079b      	lsls	r3, r3, #30
 801a860:	f100 8103 	bmi.w	801aa6a <_printf_float+0x44e>
 801a864:	68e0      	ldr	r0, [r4, #12]
 801a866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a868:	4298      	cmp	r0, r3
 801a86a:	bfb8      	it	lt
 801a86c:	4618      	movlt	r0, r3
 801a86e:	e734      	b.n	801a6da <_printf_float+0xbe>
 801a870:	2301      	movs	r3, #1
 801a872:	464a      	mov	r2, r9
 801a874:	4631      	mov	r1, r6
 801a876:	4628      	mov	r0, r5
 801a878:	47b8      	blx	r7
 801a87a:	3001      	adds	r0, #1
 801a87c:	f43f af2b 	beq.w	801a6d6 <_printf_float+0xba>
 801a880:	f108 0801 	add.w	r8, r8, #1
 801a884:	e7e6      	b.n	801a854 <_printf_float+0x238>
 801a886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a888:	2b00      	cmp	r3, #0
 801a88a:	dc2b      	bgt.n	801a8e4 <_printf_float+0x2c8>
 801a88c:	2301      	movs	r3, #1
 801a88e:	4a26      	ldr	r2, [pc, #152]	; (801a928 <_printf_float+0x30c>)
 801a890:	4631      	mov	r1, r6
 801a892:	4628      	mov	r0, r5
 801a894:	47b8      	blx	r7
 801a896:	3001      	adds	r0, #1
 801a898:	f43f af1d 	beq.w	801a6d6 <_printf_float+0xba>
 801a89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a89e:	b923      	cbnz	r3, 801a8aa <_printf_float+0x28e>
 801a8a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8a2:	b913      	cbnz	r3, 801a8aa <_printf_float+0x28e>
 801a8a4:	6823      	ldr	r3, [r4, #0]
 801a8a6:	07d9      	lsls	r1, r3, #31
 801a8a8:	d5d8      	bpl.n	801a85c <_printf_float+0x240>
 801a8aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a8ae:	4631      	mov	r1, r6
 801a8b0:	4628      	mov	r0, r5
 801a8b2:	47b8      	blx	r7
 801a8b4:	3001      	adds	r0, #1
 801a8b6:	f43f af0e 	beq.w	801a6d6 <_printf_float+0xba>
 801a8ba:	f04f 0900 	mov.w	r9, #0
 801a8be:	f104 0a1a 	add.w	sl, r4, #26
 801a8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8c4:	425b      	negs	r3, r3
 801a8c6:	454b      	cmp	r3, r9
 801a8c8:	dc01      	bgt.n	801a8ce <_printf_float+0x2b2>
 801a8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8cc:	e794      	b.n	801a7f8 <_printf_float+0x1dc>
 801a8ce:	2301      	movs	r3, #1
 801a8d0:	4652      	mov	r2, sl
 801a8d2:	4631      	mov	r1, r6
 801a8d4:	4628      	mov	r0, r5
 801a8d6:	47b8      	blx	r7
 801a8d8:	3001      	adds	r0, #1
 801a8da:	f43f aefc 	beq.w	801a6d6 <_printf_float+0xba>
 801a8de:	f109 0901 	add.w	r9, r9, #1
 801a8e2:	e7ee      	b.n	801a8c2 <_printf_float+0x2a6>
 801a8e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a8e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a8e8:	429a      	cmp	r2, r3
 801a8ea:	bfa8      	it	ge
 801a8ec:	461a      	movge	r2, r3
 801a8ee:	2a00      	cmp	r2, #0
 801a8f0:	4691      	mov	r9, r2
 801a8f2:	dd07      	ble.n	801a904 <_printf_float+0x2e8>
 801a8f4:	4613      	mov	r3, r2
 801a8f6:	4631      	mov	r1, r6
 801a8f8:	4642      	mov	r2, r8
 801a8fa:	4628      	mov	r0, r5
 801a8fc:	47b8      	blx	r7
 801a8fe:	3001      	adds	r0, #1
 801a900:	f43f aee9 	beq.w	801a6d6 <_printf_float+0xba>
 801a904:	f104 031a 	add.w	r3, r4, #26
 801a908:	f04f 0b00 	mov.w	fp, #0
 801a90c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a910:	9306      	str	r3, [sp, #24]
 801a912:	e015      	b.n	801a940 <_printf_float+0x324>
 801a914:	7fefffff 	.word	0x7fefffff
 801a918:	0801f076 	.word	0x0801f076
 801a91c:	0801f4c1 	.word	0x0801f4c1
 801a920:	0801f4c9 	.word	0x0801f4c9
 801a924:	0801f4c5 	.word	0x0801f4c5
 801a928:	0801f4cd 	.word	0x0801f4cd
 801a92c:	2301      	movs	r3, #1
 801a92e:	9a06      	ldr	r2, [sp, #24]
 801a930:	4631      	mov	r1, r6
 801a932:	4628      	mov	r0, r5
 801a934:	47b8      	blx	r7
 801a936:	3001      	adds	r0, #1
 801a938:	f43f aecd 	beq.w	801a6d6 <_printf_float+0xba>
 801a93c:	f10b 0b01 	add.w	fp, fp, #1
 801a940:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801a944:	ebaa 0309 	sub.w	r3, sl, r9
 801a948:	455b      	cmp	r3, fp
 801a94a:	dcef      	bgt.n	801a92c <_printf_float+0x310>
 801a94c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a950:	429a      	cmp	r2, r3
 801a952:	44d0      	add	r8, sl
 801a954:	db15      	blt.n	801a982 <_printf_float+0x366>
 801a956:	6823      	ldr	r3, [r4, #0]
 801a958:	07da      	lsls	r2, r3, #31
 801a95a:	d412      	bmi.n	801a982 <_printf_float+0x366>
 801a95c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a95e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a960:	eba3 020a 	sub.w	r2, r3, sl
 801a964:	eba3 0a01 	sub.w	sl, r3, r1
 801a968:	4592      	cmp	sl, r2
 801a96a:	bfa8      	it	ge
 801a96c:	4692      	movge	sl, r2
 801a96e:	f1ba 0f00 	cmp.w	sl, #0
 801a972:	dc0e      	bgt.n	801a992 <_printf_float+0x376>
 801a974:	f04f 0800 	mov.w	r8, #0
 801a978:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a97c:	f104 091a 	add.w	r9, r4, #26
 801a980:	e019      	b.n	801a9b6 <_printf_float+0x39a>
 801a982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a986:	4631      	mov	r1, r6
 801a988:	4628      	mov	r0, r5
 801a98a:	47b8      	blx	r7
 801a98c:	3001      	adds	r0, #1
 801a98e:	d1e5      	bne.n	801a95c <_printf_float+0x340>
 801a990:	e6a1      	b.n	801a6d6 <_printf_float+0xba>
 801a992:	4653      	mov	r3, sl
 801a994:	4642      	mov	r2, r8
 801a996:	4631      	mov	r1, r6
 801a998:	4628      	mov	r0, r5
 801a99a:	47b8      	blx	r7
 801a99c:	3001      	adds	r0, #1
 801a99e:	d1e9      	bne.n	801a974 <_printf_float+0x358>
 801a9a0:	e699      	b.n	801a6d6 <_printf_float+0xba>
 801a9a2:	2301      	movs	r3, #1
 801a9a4:	464a      	mov	r2, r9
 801a9a6:	4631      	mov	r1, r6
 801a9a8:	4628      	mov	r0, r5
 801a9aa:	47b8      	blx	r7
 801a9ac:	3001      	adds	r0, #1
 801a9ae:	f43f ae92 	beq.w	801a6d6 <_printf_float+0xba>
 801a9b2:	f108 0801 	add.w	r8, r8, #1
 801a9b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a9ba:	1a9b      	subs	r3, r3, r2
 801a9bc:	eba3 030a 	sub.w	r3, r3, sl
 801a9c0:	4543      	cmp	r3, r8
 801a9c2:	dcee      	bgt.n	801a9a2 <_printf_float+0x386>
 801a9c4:	e74a      	b.n	801a85c <_printf_float+0x240>
 801a9c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a9c8:	2a01      	cmp	r2, #1
 801a9ca:	dc01      	bgt.n	801a9d0 <_printf_float+0x3b4>
 801a9cc:	07db      	lsls	r3, r3, #31
 801a9ce:	d53a      	bpl.n	801aa46 <_printf_float+0x42a>
 801a9d0:	2301      	movs	r3, #1
 801a9d2:	4642      	mov	r2, r8
 801a9d4:	4631      	mov	r1, r6
 801a9d6:	4628      	mov	r0, r5
 801a9d8:	47b8      	blx	r7
 801a9da:	3001      	adds	r0, #1
 801a9dc:	f43f ae7b 	beq.w	801a6d6 <_printf_float+0xba>
 801a9e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a9e4:	4631      	mov	r1, r6
 801a9e6:	4628      	mov	r0, r5
 801a9e8:	47b8      	blx	r7
 801a9ea:	3001      	adds	r0, #1
 801a9ec:	f108 0801 	add.w	r8, r8, #1
 801a9f0:	f43f ae71 	beq.w	801a6d6 <_printf_float+0xba>
 801a9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a9f6:	2200      	movs	r2, #0
 801a9f8:	f103 3aff 	add.w	sl, r3, #4294967295
 801a9fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801aa00:	2300      	movs	r3, #0
 801aa02:	f7e6 f871 	bl	8000ae8 <__aeabi_dcmpeq>
 801aa06:	b9c8      	cbnz	r0, 801aa3c <_printf_float+0x420>
 801aa08:	4653      	mov	r3, sl
 801aa0a:	4642      	mov	r2, r8
 801aa0c:	4631      	mov	r1, r6
 801aa0e:	4628      	mov	r0, r5
 801aa10:	47b8      	blx	r7
 801aa12:	3001      	adds	r0, #1
 801aa14:	d10e      	bne.n	801aa34 <_printf_float+0x418>
 801aa16:	e65e      	b.n	801a6d6 <_printf_float+0xba>
 801aa18:	2301      	movs	r3, #1
 801aa1a:	4652      	mov	r2, sl
 801aa1c:	4631      	mov	r1, r6
 801aa1e:	4628      	mov	r0, r5
 801aa20:	47b8      	blx	r7
 801aa22:	3001      	adds	r0, #1
 801aa24:	f43f ae57 	beq.w	801a6d6 <_printf_float+0xba>
 801aa28:	f108 0801 	add.w	r8, r8, #1
 801aa2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa2e:	3b01      	subs	r3, #1
 801aa30:	4543      	cmp	r3, r8
 801aa32:	dcf1      	bgt.n	801aa18 <_printf_float+0x3fc>
 801aa34:	464b      	mov	r3, r9
 801aa36:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801aa3a:	e6de      	b.n	801a7fa <_printf_float+0x1de>
 801aa3c:	f04f 0800 	mov.w	r8, #0
 801aa40:	f104 0a1a 	add.w	sl, r4, #26
 801aa44:	e7f2      	b.n	801aa2c <_printf_float+0x410>
 801aa46:	2301      	movs	r3, #1
 801aa48:	e7df      	b.n	801aa0a <_printf_float+0x3ee>
 801aa4a:	2301      	movs	r3, #1
 801aa4c:	464a      	mov	r2, r9
 801aa4e:	4631      	mov	r1, r6
 801aa50:	4628      	mov	r0, r5
 801aa52:	47b8      	blx	r7
 801aa54:	3001      	adds	r0, #1
 801aa56:	f43f ae3e 	beq.w	801a6d6 <_printf_float+0xba>
 801aa5a:	f108 0801 	add.w	r8, r8, #1
 801aa5e:	68e3      	ldr	r3, [r4, #12]
 801aa60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aa62:	1a9b      	subs	r3, r3, r2
 801aa64:	4543      	cmp	r3, r8
 801aa66:	dcf0      	bgt.n	801aa4a <_printf_float+0x42e>
 801aa68:	e6fc      	b.n	801a864 <_printf_float+0x248>
 801aa6a:	f04f 0800 	mov.w	r8, #0
 801aa6e:	f104 0919 	add.w	r9, r4, #25
 801aa72:	e7f4      	b.n	801aa5e <_printf_float+0x442>
 801aa74:	2900      	cmp	r1, #0
 801aa76:	f43f ae8b 	beq.w	801a790 <_printf_float+0x174>
 801aa7a:	2300      	movs	r3, #0
 801aa7c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801aa80:	ab09      	add	r3, sp, #36	; 0x24
 801aa82:	9300      	str	r3, [sp, #0]
 801aa84:	ec49 8b10 	vmov	d0, r8, r9
 801aa88:	6022      	str	r2, [r4, #0]
 801aa8a:	f8cd a004 	str.w	sl, [sp, #4]
 801aa8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801aa92:	4628      	mov	r0, r5
 801aa94:	f7ff fd2e 	bl	801a4f4 <__cvt>
 801aa98:	4680      	mov	r8, r0
 801aa9a:	e648      	b.n	801a72e <_printf_float+0x112>

0801aa9c <_printf_common>:
 801aa9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aaa0:	4691      	mov	r9, r2
 801aaa2:	461f      	mov	r7, r3
 801aaa4:	688a      	ldr	r2, [r1, #8]
 801aaa6:	690b      	ldr	r3, [r1, #16]
 801aaa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aaac:	4293      	cmp	r3, r2
 801aaae:	bfb8      	it	lt
 801aab0:	4613      	movlt	r3, r2
 801aab2:	f8c9 3000 	str.w	r3, [r9]
 801aab6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aaba:	4606      	mov	r6, r0
 801aabc:	460c      	mov	r4, r1
 801aabe:	b112      	cbz	r2, 801aac6 <_printf_common+0x2a>
 801aac0:	3301      	adds	r3, #1
 801aac2:	f8c9 3000 	str.w	r3, [r9]
 801aac6:	6823      	ldr	r3, [r4, #0]
 801aac8:	0699      	lsls	r1, r3, #26
 801aaca:	bf42      	ittt	mi
 801aacc:	f8d9 3000 	ldrmi.w	r3, [r9]
 801aad0:	3302      	addmi	r3, #2
 801aad2:	f8c9 3000 	strmi.w	r3, [r9]
 801aad6:	6825      	ldr	r5, [r4, #0]
 801aad8:	f015 0506 	ands.w	r5, r5, #6
 801aadc:	d107      	bne.n	801aaee <_printf_common+0x52>
 801aade:	f104 0a19 	add.w	sl, r4, #25
 801aae2:	68e3      	ldr	r3, [r4, #12]
 801aae4:	f8d9 2000 	ldr.w	r2, [r9]
 801aae8:	1a9b      	subs	r3, r3, r2
 801aaea:	42ab      	cmp	r3, r5
 801aaec:	dc28      	bgt.n	801ab40 <_printf_common+0xa4>
 801aaee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801aaf2:	6822      	ldr	r2, [r4, #0]
 801aaf4:	3300      	adds	r3, #0
 801aaf6:	bf18      	it	ne
 801aaf8:	2301      	movne	r3, #1
 801aafa:	0692      	lsls	r2, r2, #26
 801aafc:	d42d      	bmi.n	801ab5a <_printf_common+0xbe>
 801aafe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab02:	4639      	mov	r1, r7
 801ab04:	4630      	mov	r0, r6
 801ab06:	47c0      	blx	r8
 801ab08:	3001      	adds	r0, #1
 801ab0a:	d020      	beq.n	801ab4e <_printf_common+0xb2>
 801ab0c:	6823      	ldr	r3, [r4, #0]
 801ab0e:	68e5      	ldr	r5, [r4, #12]
 801ab10:	f8d9 2000 	ldr.w	r2, [r9]
 801ab14:	f003 0306 	and.w	r3, r3, #6
 801ab18:	2b04      	cmp	r3, #4
 801ab1a:	bf08      	it	eq
 801ab1c:	1aad      	subeq	r5, r5, r2
 801ab1e:	68a3      	ldr	r3, [r4, #8]
 801ab20:	6922      	ldr	r2, [r4, #16]
 801ab22:	bf0c      	ite	eq
 801ab24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ab28:	2500      	movne	r5, #0
 801ab2a:	4293      	cmp	r3, r2
 801ab2c:	bfc4      	itt	gt
 801ab2e:	1a9b      	subgt	r3, r3, r2
 801ab30:	18ed      	addgt	r5, r5, r3
 801ab32:	f04f 0900 	mov.w	r9, #0
 801ab36:	341a      	adds	r4, #26
 801ab38:	454d      	cmp	r5, r9
 801ab3a:	d11a      	bne.n	801ab72 <_printf_common+0xd6>
 801ab3c:	2000      	movs	r0, #0
 801ab3e:	e008      	b.n	801ab52 <_printf_common+0xb6>
 801ab40:	2301      	movs	r3, #1
 801ab42:	4652      	mov	r2, sl
 801ab44:	4639      	mov	r1, r7
 801ab46:	4630      	mov	r0, r6
 801ab48:	47c0      	blx	r8
 801ab4a:	3001      	adds	r0, #1
 801ab4c:	d103      	bne.n	801ab56 <_printf_common+0xba>
 801ab4e:	f04f 30ff 	mov.w	r0, #4294967295
 801ab52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab56:	3501      	adds	r5, #1
 801ab58:	e7c3      	b.n	801aae2 <_printf_common+0x46>
 801ab5a:	18e1      	adds	r1, r4, r3
 801ab5c:	1c5a      	adds	r2, r3, #1
 801ab5e:	2030      	movs	r0, #48	; 0x30
 801ab60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ab64:	4422      	add	r2, r4
 801ab66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ab6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ab6e:	3302      	adds	r3, #2
 801ab70:	e7c5      	b.n	801aafe <_printf_common+0x62>
 801ab72:	2301      	movs	r3, #1
 801ab74:	4622      	mov	r2, r4
 801ab76:	4639      	mov	r1, r7
 801ab78:	4630      	mov	r0, r6
 801ab7a:	47c0      	blx	r8
 801ab7c:	3001      	adds	r0, #1
 801ab7e:	d0e6      	beq.n	801ab4e <_printf_common+0xb2>
 801ab80:	f109 0901 	add.w	r9, r9, #1
 801ab84:	e7d8      	b.n	801ab38 <_printf_common+0x9c>
	...

0801ab88 <_printf_i>:
 801ab88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801ab90:	460c      	mov	r4, r1
 801ab92:	7e09      	ldrb	r1, [r1, #24]
 801ab94:	b085      	sub	sp, #20
 801ab96:	296e      	cmp	r1, #110	; 0x6e
 801ab98:	4617      	mov	r7, r2
 801ab9a:	4606      	mov	r6, r0
 801ab9c:	4698      	mov	r8, r3
 801ab9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aba0:	f000 80b3 	beq.w	801ad0a <_printf_i+0x182>
 801aba4:	d822      	bhi.n	801abec <_printf_i+0x64>
 801aba6:	2963      	cmp	r1, #99	; 0x63
 801aba8:	d036      	beq.n	801ac18 <_printf_i+0x90>
 801abaa:	d80a      	bhi.n	801abc2 <_printf_i+0x3a>
 801abac:	2900      	cmp	r1, #0
 801abae:	f000 80b9 	beq.w	801ad24 <_printf_i+0x19c>
 801abb2:	2958      	cmp	r1, #88	; 0x58
 801abb4:	f000 8083 	beq.w	801acbe <_printf_i+0x136>
 801abb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801abbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801abc0:	e032      	b.n	801ac28 <_printf_i+0xa0>
 801abc2:	2964      	cmp	r1, #100	; 0x64
 801abc4:	d001      	beq.n	801abca <_printf_i+0x42>
 801abc6:	2969      	cmp	r1, #105	; 0x69
 801abc8:	d1f6      	bne.n	801abb8 <_printf_i+0x30>
 801abca:	6820      	ldr	r0, [r4, #0]
 801abcc:	6813      	ldr	r3, [r2, #0]
 801abce:	0605      	lsls	r5, r0, #24
 801abd0:	f103 0104 	add.w	r1, r3, #4
 801abd4:	d52a      	bpl.n	801ac2c <_printf_i+0xa4>
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	6011      	str	r1, [r2, #0]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	da03      	bge.n	801abe6 <_printf_i+0x5e>
 801abde:	222d      	movs	r2, #45	; 0x2d
 801abe0:	425b      	negs	r3, r3
 801abe2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801abe6:	486f      	ldr	r0, [pc, #444]	; (801ada4 <_printf_i+0x21c>)
 801abe8:	220a      	movs	r2, #10
 801abea:	e039      	b.n	801ac60 <_printf_i+0xd8>
 801abec:	2973      	cmp	r1, #115	; 0x73
 801abee:	f000 809d 	beq.w	801ad2c <_printf_i+0x1a4>
 801abf2:	d808      	bhi.n	801ac06 <_printf_i+0x7e>
 801abf4:	296f      	cmp	r1, #111	; 0x6f
 801abf6:	d020      	beq.n	801ac3a <_printf_i+0xb2>
 801abf8:	2970      	cmp	r1, #112	; 0x70
 801abfa:	d1dd      	bne.n	801abb8 <_printf_i+0x30>
 801abfc:	6823      	ldr	r3, [r4, #0]
 801abfe:	f043 0320 	orr.w	r3, r3, #32
 801ac02:	6023      	str	r3, [r4, #0]
 801ac04:	e003      	b.n	801ac0e <_printf_i+0x86>
 801ac06:	2975      	cmp	r1, #117	; 0x75
 801ac08:	d017      	beq.n	801ac3a <_printf_i+0xb2>
 801ac0a:	2978      	cmp	r1, #120	; 0x78
 801ac0c:	d1d4      	bne.n	801abb8 <_printf_i+0x30>
 801ac0e:	2378      	movs	r3, #120	; 0x78
 801ac10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ac14:	4864      	ldr	r0, [pc, #400]	; (801ada8 <_printf_i+0x220>)
 801ac16:	e055      	b.n	801acc4 <_printf_i+0x13c>
 801ac18:	6813      	ldr	r3, [r2, #0]
 801ac1a:	1d19      	adds	r1, r3, #4
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	6011      	str	r1, [r2, #0]
 801ac20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ac24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ac28:	2301      	movs	r3, #1
 801ac2a:	e08c      	b.n	801ad46 <_printf_i+0x1be>
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	6011      	str	r1, [r2, #0]
 801ac30:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ac34:	bf18      	it	ne
 801ac36:	b21b      	sxthne	r3, r3
 801ac38:	e7cf      	b.n	801abda <_printf_i+0x52>
 801ac3a:	6813      	ldr	r3, [r2, #0]
 801ac3c:	6825      	ldr	r5, [r4, #0]
 801ac3e:	1d18      	adds	r0, r3, #4
 801ac40:	6010      	str	r0, [r2, #0]
 801ac42:	0628      	lsls	r0, r5, #24
 801ac44:	d501      	bpl.n	801ac4a <_printf_i+0xc2>
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	e002      	b.n	801ac50 <_printf_i+0xc8>
 801ac4a:	0668      	lsls	r0, r5, #25
 801ac4c:	d5fb      	bpl.n	801ac46 <_printf_i+0xbe>
 801ac4e:	881b      	ldrh	r3, [r3, #0]
 801ac50:	4854      	ldr	r0, [pc, #336]	; (801ada4 <_printf_i+0x21c>)
 801ac52:	296f      	cmp	r1, #111	; 0x6f
 801ac54:	bf14      	ite	ne
 801ac56:	220a      	movne	r2, #10
 801ac58:	2208      	moveq	r2, #8
 801ac5a:	2100      	movs	r1, #0
 801ac5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ac60:	6865      	ldr	r5, [r4, #4]
 801ac62:	60a5      	str	r5, [r4, #8]
 801ac64:	2d00      	cmp	r5, #0
 801ac66:	f2c0 8095 	blt.w	801ad94 <_printf_i+0x20c>
 801ac6a:	6821      	ldr	r1, [r4, #0]
 801ac6c:	f021 0104 	bic.w	r1, r1, #4
 801ac70:	6021      	str	r1, [r4, #0]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d13d      	bne.n	801acf2 <_printf_i+0x16a>
 801ac76:	2d00      	cmp	r5, #0
 801ac78:	f040 808e 	bne.w	801ad98 <_printf_i+0x210>
 801ac7c:	4665      	mov	r5, ip
 801ac7e:	2a08      	cmp	r2, #8
 801ac80:	d10b      	bne.n	801ac9a <_printf_i+0x112>
 801ac82:	6823      	ldr	r3, [r4, #0]
 801ac84:	07db      	lsls	r3, r3, #31
 801ac86:	d508      	bpl.n	801ac9a <_printf_i+0x112>
 801ac88:	6923      	ldr	r3, [r4, #16]
 801ac8a:	6862      	ldr	r2, [r4, #4]
 801ac8c:	429a      	cmp	r2, r3
 801ac8e:	bfde      	ittt	le
 801ac90:	2330      	movle	r3, #48	; 0x30
 801ac92:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ac96:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ac9a:	ebac 0305 	sub.w	r3, ip, r5
 801ac9e:	6123      	str	r3, [r4, #16]
 801aca0:	f8cd 8000 	str.w	r8, [sp]
 801aca4:	463b      	mov	r3, r7
 801aca6:	aa03      	add	r2, sp, #12
 801aca8:	4621      	mov	r1, r4
 801acaa:	4630      	mov	r0, r6
 801acac:	f7ff fef6 	bl	801aa9c <_printf_common>
 801acb0:	3001      	adds	r0, #1
 801acb2:	d14d      	bne.n	801ad50 <_printf_i+0x1c8>
 801acb4:	f04f 30ff 	mov.w	r0, #4294967295
 801acb8:	b005      	add	sp, #20
 801acba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801acbe:	4839      	ldr	r0, [pc, #228]	; (801ada4 <_printf_i+0x21c>)
 801acc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801acc4:	6813      	ldr	r3, [r2, #0]
 801acc6:	6821      	ldr	r1, [r4, #0]
 801acc8:	1d1d      	adds	r5, r3, #4
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	6015      	str	r5, [r2, #0]
 801acce:	060a      	lsls	r2, r1, #24
 801acd0:	d50b      	bpl.n	801acea <_printf_i+0x162>
 801acd2:	07ca      	lsls	r2, r1, #31
 801acd4:	bf44      	itt	mi
 801acd6:	f041 0120 	orrmi.w	r1, r1, #32
 801acda:	6021      	strmi	r1, [r4, #0]
 801acdc:	b91b      	cbnz	r3, 801ace6 <_printf_i+0x15e>
 801acde:	6822      	ldr	r2, [r4, #0]
 801ace0:	f022 0220 	bic.w	r2, r2, #32
 801ace4:	6022      	str	r2, [r4, #0]
 801ace6:	2210      	movs	r2, #16
 801ace8:	e7b7      	b.n	801ac5a <_printf_i+0xd2>
 801acea:	064d      	lsls	r5, r1, #25
 801acec:	bf48      	it	mi
 801acee:	b29b      	uxthmi	r3, r3
 801acf0:	e7ef      	b.n	801acd2 <_printf_i+0x14a>
 801acf2:	4665      	mov	r5, ip
 801acf4:	fbb3 f1f2 	udiv	r1, r3, r2
 801acf8:	fb02 3311 	mls	r3, r2, r1, r3
 801acfc:	5cc3      	ldrb	r3, [r0, r3]
 801acfe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801ad02:	460b      	mov	r3, r1
 801ad04:	2900      	cmp	r1, #0
 801ad06:	d1f5      	bne.n	801acf4 <_printf_i+0x16c>
 801ad08:	e7b9      	b.n	801ac7e <_printf_i+0xf6>
 801ad0a:	6813      	ldr	r3, [r2, #0]
 801ad0c:	6825      	ldr	r5, [r4, #0]
 801ad0e:	6961      	ldr	r1, [r4, #20]
 801ad10:	1d18      	adds	r0, r3, #4
 801ad12:	6010      	str	r0, [r2, #0]
 801ad14:	0628      	lsls	r0, r5, #24
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	d501      	bpl.n	801ad1e <_printf_i+0x196>
 801ad1a:	6019      	str	r1, [r3, #0]
 801ad1c:	e002      	b.n	801ad24 <_printf_i+0x19c>
 801ad1e:	066a      	lsls	r2, r5, #25
 801ad20:	d5fb      	bpl.n	801ad1a <_printf_i+0x192>
 801ad22:	8019      	strh	r1, [r3, #0]
 801ad24:	2300      	movs	r3, #0
 801ad26:	6123      	str	r3, [r4, #16]
 801ad28:	4665      	mov	r5, ip
 801ad2a:	e7b9      	b.n	801aca0 <_printf_i+0x118>
 801ad2c:	6813      	ldr	r3, [r2, #0]
 801ad2e:	1d19      	adds	r1, r3, #4
 801ad30:	6011      	str	r1, [r2, #0]
 801ad32:	681d      	ldr	r5, [r3, #0]
 801ad34:	6862      	ldr	r2, [r4, #4]
 801ad36:	2100      	movs	r1, #0
 801ad38:	4628      	mov	r0, r5
 801ad3a:	f7e5 fa61 	bl	8000200 <memchr>
 801ad3e:	b108      	cbz	r0, 801ad44 <_printf_i+0x1bc>
 801ad40:	1b40      	subs	r0, r0, r5
 801ad42:	6060      	str	r0, [r4, #4]
 801ad44:	6863      	ldr	r3, [r4, #4]
 801ad46:	6123      	str	r3, [r4, #16]
 801ad48:	2300      	movs	r3, #0
 801ad4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad4e:	e7a7      	b.n	801aca0 <_printf_i+0x118>
 801ad50:	6923      	ldr	r3, [r4, #16]
 801ad52:	462a      	mov	r2, r5
 801ad54:	4639      	mov	r1, r7
 801ad56:	4630      	mov	r0, r6
 801ad58:	47c0      	blx	r8
 801ad5a:	3001      	adds	r0, #1
 801ad5c:	d0aa      	beq.n	801acb4 <_printf_i+0x12c>
 801ad5e:	6823      	ldr	r3, [r4, #0]
 801ad60:	079b      	lsls	r3, r3, #30
 801ad62:	d413      	bmi.n	801ad8c <_printf_i+0x204>
 801ad64:	68e0      	ldr	r0, [r4, #12]
 801ad66:	9b03      	ldr	r3, [sp, #12]
 801ad68:	4298      	cmp	r0, r3
 801ad6a:	bfb8      	it	lt
 801ad6c:	4618      	movlt	r0, r3
 801ad6e:	e7a3      	b.n	801acb8 <_printf_i+0x130>
 801ad70:	2301      	movs	r3, #1
 801ad72:	464a      	mov	r2, r9
 801ad74:	4639      	mov	r1, r7
 801ad76:	4630      	mov	r0, r6
 801ad78:	47c0      	blx	r8
 801ad7a:	3001      	adds	r0, #1
 801ad7c:	d09a      	beq.n	801acb4 <_printf_i+0x12c>
 801ad7e:	3501      	adds	r5, #1
 801ad80:	68e3      	ldr	r3, [r4, #12]
 801ad82:	9a03      	ldr	r2, [sp, #12]
 801ad84:	1a9b      	subs	r3, r3, r2
 801ad86:	42ab      	cmp	r3, r5
 801ad88:	dcf2      	bgt.n	801ad70 <_printf_i+0x1e8>
 801ad8a:	e7eb      	b.n	801ad64 <_printf_i+0x1dc>
 801ad8c:	2500      	movs	r5, #0
 801ad8e:	f104 0919 	add.w	r9, r4, #25
 801ad92:	e7f5      	b.n	801ad80 <_printf_i+0x1f8>
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d1ac      	bne.n	801acf2 <_printf_i+0x16a>
 801ad98:	7803      	ldrb	r3, [r0, #0]
 801ad9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ad9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ada2:	e76c      	b.n	801ac7e <_printf_i+0xf6>
 801ada4:	0801f4cf 	.word	0x0801f4cf
 801ada8:	0801f4e0 	.word	0x0801f4e0

0801adac <_scanf_float>:
 801adac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adb0:	469a      	mov	sl, r3
 801adb2:	688b      	ldr	r3, [r1, #8]
 801adb4:	4616      	mov	r6, r2
 801adb6:	1e5a      	subs	r2, r3, #1
 801adb8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801adbc:	b087      	sub	sp, #28
 801adbe:	bf83      	ittte	hi
 801adc0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801adc4:	189b      	addhi	r3, r3, r2
 801adc6:	9301      	strhi	r3, [sp, #4]
 801adc8:	2300      	movls	r3, #0
 801adca:	bf86      	itte	hi
 801adcc:	f240 135d 	movwhi	r3, #349	; 0x15d
 801add0:	608b      	strhi	r3, [r1, #8]
 801add2:	9301      	strls	r3, [sp, #4]
 801add4:	680b      	ldr	r3, [r1, #0]
 801add6:	4688      	mov	r8, r1
 801add8:	f04f 0b00 	mov.w	fp, #0
 801addc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801ade0:	f848 3b1c 	str.w	r3, [r8], #28
 801ade4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801ade8:	4607      	mov	r7, r0
 801adea:	460c      	mov	r4, r1
 801adec:	4645      	mov	r5, r8
 801adee:	465a      	mov	r2, fp
 801adf0:	46d9      	mov	r9, fp
 801adf2:	f8cd b008 	str.w	fp, [sp, #8]
 801adf6:	68a1      	ldr	r1, [r4, #8]
 801adf8:	b181      	cbz	r1, 801ae1c <_scanf_float+0x70>
 801adfa:	6833      	ldr	r3, [r6, #0]
 801adfc:	781b      	ldrb	r3, [r3, #0]
 801adfe:	2b49      	cmp	r3, #73	; 0x49
 801ae00:	d071      	beq.n	801aee6 <_scanf_float+0x13a>
 801ae02:	d84d      	bhi.n	801aea0 <_scanf_float+0xf4>
 801ae04:	2b39      	cmp	r3, #57	; 0x39
 801ae06:	d840      	bhi.n	801ae8a <_scanf_float+0xde>
 801ae08:	2b31      	cmp	r3, #49	; 0x31
 801ae0a:	f080 8088 	bcs.w	801af1e <_scanf_float+0x172>
 801ae0e:	2b2d      	cmp	r3, #45	; 0x2d
 801ae10:	f000 8090 	beq.w	801af34 <_scanf_float+0x188>
 801ae14:	d815      	bhi.n	801ae42 <_scanf_float+0x96>
 801ae16:	2b2b      	cmp	r3, #43	; 0x2b
 801ae18:	f000 808c 	beq.w	801af34 <_scanf_float+0x188>
 801ae1c:	f1b9 0f00 	cmp.w	r9, #0
 801ae20:	d003      	beq.n	801ae2a <_scanf_float+0x7e>
 801ae22:	6823      	ldr	r3, [r4, #0]
 801ae24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ae28:	6023      	str	r3, [r4, #0]
 801ae2a:	3a01      	subs	r2, #1
 801ae2c:	2a01      	cmp	r2, #1
 801ae2e:	f200 80ea 	bhi.w	801b006 <_scanf_float+0x25a>
 801ae32:	4545      	cmp	r5, r8
 801ae34:	f200 80dc 	bhi.w	801aff0 <_scanf_float+0x244>
 801ae38:	2601      	movs	r6, #1
 801ae3a:	4630      	mov	r0, r6
 801ae3c:	b007      	add	sp, #28
 801ae3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae42:	2b2e      	cmp	r3, #46	; 0x2e
 801ae44:	f000 809f 	beq.w	801af86 <_scanf_float+0x1da>
 801ae48:	2b30      	cmp	r3, #48	; 0x30
 801ae4a:	d1e7      	bne.n	801ae1c <_scanf_float+0x70>
 801ae4c:	6820      	ldr	r0, [r4, #0]
 801ae4e:	f410 7f80 	tst.w	r0, #256	; 0x100
 801ae52:	d064      	beq.n	801af1e <_scanf_float+0x172>
 801ae54:	9b01      	ldr	r3, [sp, #4]
 801ae56:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801ae5a:	6020      	str	r0, [r4, #0]
 801ae5c:	f109 0901 	add.w	r9, r9, #1
 801ae60:	b11b      	cbz	r3, 801ae6a <_scanf_float+0xbe>
 801ae62:	3b01      	subs	r3, #1
 801ae64:	3101      	adds	r1, #1
 801ae66:	9301      	str	r3, [sp, #4]
 801ae68:	60a1      	str	r1, [r4, #8]
 801ae6a:	68a3      	ldr	r3, [r4, #8]
 801ae6c:	3b01      	subs	r3, #1
 801ae6e:	60a3      	str	r3, [r4, #8]
 801ae70:	6923      	ldr	r3, [r4, #16]
 801ae72:	3301      	adds	r3, #1
 801ae74:	6123      	str	r3, [r4, #16]
 801ae76:	6873      	ldr	r3, [r6, #4]
 801ae78:	3b01      	subs	r3, #1
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	6073      	str	r3, [r6, #4]
 801ae7e:	f340 80ac 	ble.w	801afda <_scanf_float+0x22e>
 801ae82:	6833      	ldr	r3, [r6, #0]
 801ae84:	3301      	adds	r3, #1
 801ae86:	6033      	str	r3, [r6, #0]
 801ae88:	e7b5      	b.n	801adf6 <_scanf_float+0x4a>
 801ae8a:	2b45      	cmp	r3, #69	; 0x45
 801ae8c:	f000 8085 	beq.w	801af9a <_scanf_float+0x1ee>
 801ae90:	2b46      	cmp	r3, #70	; 0x46
 801ae92:	d06a      	beq.n	801af6a <_scanf_float+0x1be>
 801ae94:	2b41      	cmp	r3, #65	; 0x41
 801ae96:	d1c1      	bne.n	801ae1c <_scanf_float+0x70>
 801ae98:	2a01      	cmp	r2, #1
 801ae9a:	d1bf      	bne.n	801ae1c <_scanf_float+0x70>
 801ae9c:	2202      	movs	r2, #2
 801ae9e:	e046      	b.n	801af2e <_scanf_float+0x182>
 801aea0:	2b65      	cmp	r3, #101	; 0x65
 801aea2:	d07a      	beq.n	801af9a <_scanf_float+0x1ee>
 801aea4:	d818      	bhi.n	801aed8 <_scanf_float+0x12c>
 801aea6:	2b54      	cmp	r3, #84	; 0x54
 801aea8:	d066      	beq.n	801af78 <_scanf_float+0x1cc>
 801aeaa:	d811      	bhi.n	801aed0 <_scanf_float+0x124>
 801aeac:	2b4e      	cmp	r3, #78	; 0x4e
 801aeae:	d1b5      	bne.n	801ae1c <_scanf_float+0x70>
 801aeb0:	2a00      	cmp	r2, #0
 801aeb2:	d146      	bne.n	801af42 <_scanf_float+0x196>
 801aeb4:	f1b9 0f00 	cmp.w	r9, #0
 801aeb8:	d145      	bne.n	801af46 <_scanf_float+0x19a>
 801aeba:	6821      	ldr	r1, [r4, #0]
 801aebc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801aec0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801aec4:	d13f      	bne.n	801af46 <_scanf_float+0x19a>
 801aec6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801aeca:	6021      	str	r1, [r4, #0]
 801aecc:	2201      	movs	r2, #1
 801aece:	e02e      	b.n	801af2e <_scanf_float+0x182>
 801aed0:	2b59      	cmp	r3, #89	; 0x59
 801aed2:	d01e      	beq.n	801af12 <_scanf_float+0x166>
 801aed4:	2b61      	cmp	r3, #97	; 0x61
 801aed6:	e7de      	b.n	801ae96 <_scanf_float+0xea>
 801aed8:	2b6e      	cmp	r3, #110	; 0x6e
 801aeda:	d0e9      	beq.n	801aeb0 <_scanf_float+0x104>
 801aedc:	d815      	bhi.n	801af0a <_scanf_float+0x15e>
 801aede:	2b66      	cmp	r3, #102	; 0x66
 801aee0:	d043      	beq.n	801af6a <_scanf_float+0x1be>
 801aee2:	2b69      	cmp	r3, #105	; 0x69
 801aee4:	d19a      	bne.n	801ae1c <_scanf_float+0x70>
 801aee6:	f1bb 0f00 	cmp.w	fp, #0
 801aeea:	d138      	bne.n	801af5e <_scanf_float+0x1b2>
 801aeec:	f1b9 0f00 	cmp.w	r9, #0
 801aef0:	d197      	bne.n	801ae22 <_scanf_float+0x76>
 801aef2:	6821      	ldr	r1, [r4, #0]
 801aef4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801aef8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801aefc:	d195      	bne.n	801ae2a <_scanf_float+0x7e>
 801aefe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801af02:	6021      	str	r1, [r4, #0]
 801af04:	f04f 0b01 	mov.w	fp, #1
 801af08:	e011      	b.n	801af2e <_scanf_float+0x182>
 801af0a:	2b74      	cmp	r3, #116	; 0x74
 801af0c:	d034      	beq.n	801af78 <_scanf_float+0x1cc>
 801af0e:	2b79      	cmp	r3, #121	; 0x79
 801af10:	d184      	bne.n	801ae1c <_scanf_float+0x70>
 801af12:	f1bb 0f07 	cmp.w	fp, #7
 801af16:	d181      	bne.n	801ae1c <_scanf_float+0x70>
 801af18:	f04f 0b08 	mov.w	fp, #8
 801af1c:	e007      	b.n	801af2e <_scanf_float+0x182>
 801af1e:	eb12 0f0b 	cmn.w	r2, fp
 801af22:	f47f af7b 	bne.w	801ae1c <_scanf_float+0x70>
 801af26:	6821      	ldr	r1, [r4, #0]
 801af28:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 801af2c:	6021      	str	r1, [r4, #0]
 801af2e:	702b      	strb	r3, [r5, #0]
 801af30:	3501      	adds	r5, #1
 801af32:	e79a      	b.n	801ae6a <_scanf_float+0xbe>
 801af34:	6821      	ldr	r1, [r4, #0]
 801af36:	0608      	lsls	r0, r1, #24
 801af38:	f57f af70 	bpl.w	801ae1c <_scanf_float+0x70>
 801af3c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801af40:	e7f4      	b.n	801af2c <_scanf_float+0x180>
 801af42:	2a02      	cmp	r2, #2
 801af44:	d047      	beq.n	801afd6 <_scanf_float+0x22a>
 801af46:	f1bb 0f01 	cmp.w	fp, #1
 801af4a:	d003      	beq.n	801af54 <_scanf_float+0x1a8>
 801af4c:	f1bb 0f04 	cmp.w	fp, #4
 801af50:	f47f af64 	bne.w	801ae1c <_scanf_float+0x70>
 801af54:	f10b 0b01 	add.w	fp, fp, #1
 801af58:	fa5f fb8b 	uxtb.w	fp, fp
 801af5c:	e7e7      	b.n	801af2e <_scanf_float+0x182>
 801af5e:	f1bb 0f03 	cmp.w	fp, #3
 801af62:	d0f7      	beq.n	801af54 <_scanf_float+0x1a8>
 801af64:	f1bb 0f05 	cmp.w	fp, #5
 801af68:	e7f2      	b.n	801af50 <_scanf_float+0x1a4>
 801af6a:	f1bb 0f02 	cmp.w	fp, #2
 801af6e:	f47f af55 	bne.w	801ae1c <_scanf_float+0x70>
 801af72:	f04f 0b03 	mov.w	fp, #3
 801af76:	e7da      	b.n	801af2e <_scanf_float+0x182>
 801af78:	f1bb 0f06 	cmp.w	fp, #6
 801af7c:	f47f af4e 	bne.w	801ae1c <_scanf_float+0x70>
 801af80:	f04f 0b07 	mov.w	fp, #7
 801af84:	e7d3      	b.n	801af2e <_scanf_float+0x182>
 801af86:	6821      	ldr	r1, [r4, #0]
 801af88:	0588      	lsls	r0, r1, #22
 801af8a:	f57f af47 	bpl.w	801ae1c <_scanf_float+0x70>
 801af8e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801af92:	6021      	str	r1, [r4, #0]
 801af94:	f8cd 9008 	str.w	r9, [sp, #8]
 801af98:	e7c9      	b.n	801af2e <_scanf_float+0x182>
 801af9a:	6821      	ldr	r1, [r4, #0]
 801af9c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801afa0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801afa4:	d006      	beq.n	801afb4 <_scanf_float+0x208>
 801afa6:	0548      	lsls	r0, r1, #21
 801afa8:	f57f af38 	bpl.w	801ae1c <_scanf_float+0x70>
 801afac:	f1b9 0f00 	cmp.w	r9, #0
 801afb0:	f43f af3b 	beq.w	801ae2a <_scanf_float+0x7e>
 801afb4:	0588      	lsls	r0, r1, #22
 801afb6:	bf58      	it	pl
 801afb8:	9802      	ldrpl	r0, [sp, #8]
 801afba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801afbe:	bf58      	it	pl
 801afc0:	eba9 0000 	subpl.w	r0, r9, r0
 801afc4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801afc8:	bf58      	it	pl
 801afca:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801afce:	6021      	str	r1, [r4, #0]
 801afd0:	f04f 0900 	mov.w	r9, #0
 801afd4:	e7ab      	b.n	801af2e <_scanf_float+0x182>
 801afd6:	2203      	movs	r2, #3
 801afd8:	e7a9      	b.n	801af2e <_scanf_float+0x182>
 801afda:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801afde:	9205      	str	r2, [sp, #20]
 801afe0:	4631      	mov	r1, r6
 801afe2:	4638      	mov	r0, r7
 801afe4:	4798      	blx	r3
 801afe6:	9a05      	ldr	r2, [sp, #20]
 801afe8:	2800      	cmp	r0, #0
 801afea:	f43f af04 	beq.w	801adf6 <_scanf_float+0x4a>
 801afee:	e715      	b.n	801ae1c <_scanf_float+0x70>
 801aff0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aff4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801aff8:	4632      	mov	r2, r6
 801affa:	4638      	mov	r0, r7
 801affc:	4798      	blx	r3
 801affe:	6923      	ldr	r3, [r4, #16]
 801b000:	3b01      	subs	r3, #1
 801b002:	6123      	str	r3, [r4, #16]
 801b004:	e715      	b.n	801ae32 <_scanf_float+0x86>
 801b006:	f10b 33ff 	add.w	r3, fp, #4294967295
 801b00a:	2b06      	cmp	r3, #6
 801b00c:	d80a      	bhi.n	801b024 <_scanf_float+0x278>
 801b00e:	f1bb 0f02 	cmp.w	fp, #2
 801b012:	d968      	bls.n	801b0e6 <_scanf_float+0x33a>
 801b014:	f1ab 0b03 	sub.w	fp, fp, #3
 801b018:	fa5f fb8b 	uxtb.w	fp, fp
 801b01c:	eba5 0b0b 	sub.w	fp, r5, fp
 801b020:	455d      	cmp	r5, fp
 801b022:	d14b      	bne.n	801b0bc <_scanf_float+0x310>
 801b024:	6823      	ldr	r3, [r4, #0]
 801b026:	05da      	lsls	r2, r3, #23
 801b028:	d51f      	bpl.n	801b06a <_scanf_float+0x2be>
 801b02a:	055b      	lsls	r3, r3, #21
 801b02c:	d468      	bmi.n	801b100 <_scanf_float+0x354>
 801b02e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801b032:	6923      	ldr	r3, [r4, #16]
 801b034:	2965      	cmp	r1, #101	; 0x65
 801b036:	f103 33ff 	add.w	r3, r3, #4294967295
 801b03a:	f105 3bff 	add.w	fp, r5, #4294967295
 801b03e:	6123      	str	r3, [r4, #16]
 801b040:	d00d      	beq.n	801b05e <_scanf_float+0x2b2>
 801b042:	2945      	cmp	r1, #69	; 0x45
 801b044:	d00b      	beq.n	801b05e <_scanf_float+0x2b2>
 801b046:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b04a:	4632      	mov	r2, r6
 801b04c:	4638      	mov	r0, r7
 801b04e:	4798      	blx	r3
 801b050:	6923      	ldr	r3, [r4, #16]
 801b052:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801b056:	3b01      	subs	r3, #1
 801b058:	f1a5 0b02 	sub.w	fp, r5, #2
 801b05c:	6123      	str	r3, [r4, #16]
 801b05e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b062:	4632      	mov	r2, r6
 801b064:	4638      	mov	r0, r7
 801b066:	4798      	blx	r3
 801b068:	465d      	mov	r5, fp
 801b06a:	6826      	ldr	r6, [r4, #0]
 801b06c:	f016 0610 	ands.w	r6, r6, #16
 801b070:	d17a      	bne.n	801b168 <_scanf_float+0x3bc>
 801b072:	702e      	strb	r6, [r5, #0]
 801b074:	6823      	ldr	r3, [r4, #0]
 801b076:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b07a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b07e:	d142      	bne.n	801b106 <_scanf_float+0x35a>
 801b080:	9b02      	ldr	r3, [sp, #8]
 801b082:	eba9 0303 	sub.w	r3, r9, r3
 801b086:	425a      	negs	r2, r3
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d149      	bne.n	801b120 <_scanf_float+0x374>
 801b08c:	2200      	movs	r2, #0
 801b08e:	4641      	mov	r1, r8
 801b090:	4638      	mov	r0, r7
 801b092:	f000 ffbd 	bl	801c010 <_strtod_r>
 801b096:	6825      	ldr	r5, [r4, #0]
 801b098:	f8da 3000 	ldr.w	r3, [sl]
 801b09c:	f015 0f02 	tst.w	r5, #2
 801b0a0:	f103 0204 	add.w	r2, r3, #4
 801b0a4:	ec59 8b10 	vmov	r8, r9, d0
 801b0a8:	f8ca 2000 	str.w	r2, [sl]
 801b0ac:	d043      	beq.n	801b136 <_scanf_float+0x38a>
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	e9c3 8900 	strd	r8, r9, [r3]
 801b0b4:	68e3      	ldr	r3, [r4, #12]
 801b0b6:	3301      	adds	r3, #1
 801b0b8:	60e3      	str	r3, [r4, #12]
 801b0ba:	e6be      	b.n	801ae3a <_scanf_float+0x8e>
 801b0bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b0c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801b0c4:	4632      	mov	r2, r6
 801b0c6:	4638      	mov	r0, r7
 801b0c8:	4798      	blx	r3
 801b0ca:	6923      	ldr	r3, [r4, #16]
 801b0cc:	3b01      	subs	r3, #1
 801b0ce:	6123      	str	r3, [r4, #16]
 801b0d0:	e7a6      	b.n	801b020 <_scanf_float+0x274>
 801b0d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b0d6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801b0da:	4632      	mov	r2, r6
 801b0dc:	4638      	mov	r0, r7
 801b0de:	4798      	blx	r3
 801b0e0:	6923      	ldr	r3, [r4, #16]
 801b0e2:	3b01      	subs	r3, #1
 801b0e4:	6123      	str	r3, [r4, #16]
 801b0e6:	4545      	cmp	r5, r8
 801b0e8:	d8f3      	bhi.n	801b0d2 <_scanf_float+0x326>
 801b0ea:	e6a5      	b.n	801ae38 <_scanf_float+0x8c>
 801b0ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b0f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801b0f4:	4632      	mov	r2, r6
 801b0f6:	4638      	mov	r0, r7
 801b0f8:	4798      	blx	r3
 801b0fa:	6923      	ldr	r3, [r4, #16]
 801b0fc:	3b01      	subs	r3, #1
 801b0fe:	6123      	str	r3, [r4, #16]
 801b100:	4545      	cmp	r5, r8
 801b102:	d8f3      	bhi.n	801b0ec <_scanf_float+0x340>
 801b104:	e698      	b.n	801ae38 <_scanf_float+0x8c>
 801b106:	9b03      	ldr	r3, [sp, #12]
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d0bf      	beq.n	801b08c <_scanf_float+0x2e0>
 801b10c:	9904      	ldr	r1, [sp, #16]
 801b10e:	230a      	movs	r3, #10
 801b110:	4632      	mov	r2, r6
 801b112:	3101      	adds	r1, #1
 801b114:	4638      	mov	r0, r7
 801b116:	f001 f807 	bl	801c128 <_strtol_r>
 801b11a:	9b03      	ldr	r3, [sp, #12]
 801b11c:	9d04      	ldr	r5, [sp, #16]
 801b11e:	1ac2      	subs	r2, r0, r3
 801b120:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b124:	429d      	cmp	r5, r3
 801b126:	bf28      	it	cs
 801b128:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801b12c:	490f      	ldr	r1, [pc, #60]	; (801b16c <_scanf_float+0x3c0>)
 801b12e:	4628      	mov	r0, r5
 801b130:	f000 f936 	bl	801b3a0 <siprintf>
 801b134:	e7aa      	b.n	801b08c <_scanf_float+0x2e0>
 801b136:	f015 0504 	ands.w	r5, r5, #4
 801b13a:	d1b8      	bne.n	801b0ae <_scanf_float+0x302>
 801b13c:	681f      	ldr	r7, [r3, #0]
 801b13e:	ee10 2a10 	vmov	r2, s0
 801b142:	464b      	mov	r3, r9
 801b144:	ee10 0a10 	vmov	r0, s0
 801b148:	4649      	mov	r1, r9
 801b14a:	f7e5 fcff 	bl	8000b4c <__aeabi_dcmpun>
 801b14e:	b128      	cbz	r0, 801b15c <_scanf_float+0x3b0>
 801b150:	4628      	mov	r0, r5
 801b152:	f000 f91f 	bl	801b394 <nanf>
 801b156:	ed87 0a00 	vstr	s0, [r7]
 801b15a:	e7ab      	b.n	801b0b4 <_scanf_float+0x308>
 801b15c:	4640      	mov	r0, r8
 801b15e:	4649      	mov	r1, r9
 801b160:	f7e5 fd52 	bl	8000c08 <__aeabi_d2f>
 801b164:	6038      	str	r0, [r7, #0]
 801b166:	e7a5      	b.n	801b0b4 <_scanf_float+0x308>
 801b168:	2600      	movs	r6, #0
 801b16a:	e666      	b.n	801ae3a <_scanf_float+0x8e>
 801b16c:	0801f4f1 	.word	0x0801f4f1

0801b170 <_puts_r>:
 801b170:	b570      	push	{r4, r5, r6, lr}
 801b172:	460e      	mov	r6, r1
 801b174:	4605      	mov	r5, r0
 801b176:	b118      	cbz	r0, 801b180 <_puts_r+0x10>
 801b178:	6983      	ldr	r3, [r0, #24]
 801b17a:	b90b      	cbnz	r3, 801b180 <_puts_r+0x10>
 801b17c:	f001 ffe4 	bl	801d148 <__sinit>
 801b180:	69ab      	ldr	r3, [r5, #24]
 801b182:	68ac      	ldr	r4, [r5, #8]
 801b184:	b913      	cbnz	r3, 801b18c <_puts_r+0x1c>
 801b186:	4628      	mov	r0, r5
 801b188:	f001 ffde 	bl	801d148 <__sinit>
 801b18c:	4b23      	ldr	r3, [pc, #140]	; (801b21c <_puts_r+0xac>)
 801b18e:	429c      	cmp	r4, r3
 801b190:	d117      	bne.n	801b1c2 <_puts_r+0x52>
 801b192:	686c      	ldr	r4, [r5, #4]
 801b194:	89a3      	ldrh	r3, [r4, #12]
 801b196:	071b      	lsls	r3, r3, #28
 801b198:	d51d      	bpl.n	801b1d6 <_puts_r+0x66>
 801b19a:	6923      	ldr	r3, [r4, #16]
 801b19c:	b1db      	cbz	r3, 801b1d6 <_puts_r+0x66>
 801b19e:	3e01      	subs	r6, #1
 801b1a0:	68a3      	ldr	r3, [r4, #8]
 801b1a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b1a6:	3b01      	subs	r3, #1
 801b1a8:	60a3      	str	r3, [r4, #8]
 801b1aa:	b9e9      	cbnz	r1, 801b1e8 <_puts_r+0x78>
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	da2e      	bge.n	801b20e <_puts_r+0x9e>
 801b1b0:	4622      	mov	r2, r4
 801b1b2:	210a      	movs	r1, #10
 801b1b4:	4628      	mov	r0, r5
 801b1b6:	f000 ffc9 	bl	801c14c <__swbuf_r>
 801b1ba:	3001      	adds	r0, #1
 801b1bc:	d011      	beq.n	801b1e2 <_puts_r+0x72>
 801b1be:	200a      	movs	r0, #10
 801b1c0:	e011      	b.n	801b1e6 <_puts_r+0x76>
 801b1c2:	4b17      	ldr	r3, [pc, #92]	; (801b220 <_puts_r+0xb0>)
 801b1c4:	429c      	cmp	r4, r3
 801b1c6:	d101      	bne.n	801b1cc <_puts_r+0x5c>
 801b1c8:	68ac      	ldr	r4, [r5, #8]
 801b1ca:	e7e3      	b.n	801b194 <_puts_r+0x24>
 801b1cc:	4b15      	ldr	r3, [pc, #84]	; (801b224 <_puts_r+0xb4>)
 801b1ce:	429c      	cmp	r4, r3
 801b1d0:	bf08      	it	eq
 801b1d2:	68ec      	ldreq	r4, [r5, #12]
 801b1d4:	e7de      	b.n	801b194 <_puts_r+0x24>
 801b1d6:	4621      	mov	r1, r4
 801b1d8:	4628      	mov	r0, r5
 801b1da:	f001 f809 	bl	801c1f0 <__swsetup_r>
 801b1de:	2800      	cmp	r0, #0
 801b1e0:	d0dd      	beq.n	801b19e <_puts_r+0x2e>
 801b1e2:	f04f 30ff 	mov.w	r0, #4294967295
 801b1e6:	bd70      	pop	{r4, r5, r6, pc}
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	da04      	bge.n	801b1f6 <_puts_r+0x86>
 801b1ec:	69a2      	ldr	r2, [r4, #24]
 801b1ee:	429a      	cmp	r2, r3
 801b1f0:	dc06      	bgt.n	801b200 <_puts_r+0x90>
 801b1f2:	290a      	cmp	r1, #10
 801b1f4:	d004      	beq.n	801b200 <_puts_r+0x90>
 801b1f6:	6823      	ldr	r3, [r4, #0]
 801b1f8:	1c5a      	adds	r2, r3, #1
 801b1fa:	6022      	str	r2, [r4, #0]
 801b1fc:	7019      	strb	r1, [r3, #0]
 801b1fe:	e7cf      	b.n	801b1a0 <_puts_r+0x30>
 801b200:	4622      	mov	r2, r4
 801b202:	4628      	mov	r0, r5
 801b204:	f000 ffa2 	bl	801c14c <__swbuf_r>
 801b208:	3001      	adds	r0, #1
 801b20a:	d1c9      	bne.n	801b1a0 <_puts_r+0x30>
 801b20c:	e7e9      	b.n	801b1e2 <_puts_r+0x72>
 801b20e:	6823      	ldr	r3, [r4, #0]
 801b210:	200a      	movs	r0, #10
 801b212:	1c5a      	adds	r2, r3, #1
 801b214:	6022      	str	r2, [r4, #0]
 801b216:	7018      	strb	r0, [r3, #0]
 801b218:	e7e5      	b.n	801b1e6 <_puts_r+0x76>
 801b21a:	bf00      	nop
 801b21c:	0801f578 	.word	0x0801f578
 801b220:	0801f598 	.word	0x0801f598
 801b224:	0801f558 	.word	0x0801f558

0801b228 <puts>:
 801b228:	4b02      	ldr	r3, [pc, #8]	; (801b234 <puts+0xc>)
 801b22a:	4601      	mov	r1, r0
 801b22c:	6818      	ldr	r0, [r3, #0]
 801b22e:	f7ff bf9f 	b.w	801b170 <_puts_r>
 801b232:	bf00      	nop
 801b234:	2000011c 	.word	0x2000011c

0801b238 <setvbuf>:
 801b238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b23c:	461d      	mov	r5, r3
 801b23e:	4b51      	ldr	r3, [pc, #324]	; (801b384 <setvbuf+0x14c>)
 801b240:	681e      	ldr	r6, [r3, #0]
 801b242:	4604      	mov	r4, r0
 801b244:	460f      	mov	r7, r1
 801b246:	4690      	mov	r8, r2
 801b248:	b126      	cbz	r6, 801b254 <setvbuf+0x1c>
 801b24a:	69b3      	ldr	r3, [r6, #24]
 801b24c:	b913      	cbnz	r3, 801b254 <setvbuf+0x1c>
 801b24e:	4630      	mov	r0, r6
 801b250:	f001 ff7a 	bl	801d148 <__sinit>
 801b254:	4b4c      	ldr	r3, [pc, #304]	; (801b388 <setvbuf+0x150>)
 801b256:	429c      	cmp	r4, r3
 801b258:	d152      	bne.n	801b300 <setvbuf+0xc8>
 801b25a:	6874      	ldr	r4, [r6, #4]
 801b25c:	f1b8 0f02 	cmp.w	r8, #2
 801b260:	d006      	beq.n	801b270 <setvbuf+0x38>
 801b262:	f1b8 0f01 	cmp.w	r8, #1
 801b266:	f200 8089 	bhi.w	801b37c <setvbuf+0x144>
 801b26a:	2d00      	cmp	r5, #0
 801b26c:	f2c0 8086 	blt.w	801b37c <setvbuf+0x144>
 801b270:	4621      	mov	r1, r4
 801b272:	4630      	mov	r0, r6
 801b274:	f001 fefe 	bl	801d074 <_fflush_r>
 801b278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b27a:	b141      	cbz	r1, 801b28e <setvbuf+0x56>
 801b27c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b280:	4299      	cmp	r1, r3
 801b282:	d002      	beq.n	801b28a <setvbuf+0x52>
 801b284:	4630      	mov	r0, r6
 801b286:	f002 ffc7 	bl	801e218 <_free_r>
 801b28a:	2300      	movs	r3, #0
 801b28c:	6363      	str	r3, [r4, #52]	; 0x34
 801b28e:	2300      	movs	r3, #0
 801b290:	61a3      	str	r3, [r4, #24]
 801b292:	6063      	str	r3, [r4, #4]
 801b294:	89a3      	ldrh	r3, [r4, #12]
 801b296:	061b      	lsls	r3, r3, #24
 801b298:	d503      	bpl.n	801b2a2 <setvbuf+0x6a>
 801b29a:	6921      	ldr	r1, [r4, #16]
 801b29c:	4630      	mov	r0, r6
 801b29e:	f002 ffbb 	bl	801e218 <_free_r>
 801b2a2:	89a3      	ldrh	r3, [r4, #12]
 801b2a4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801b2a8:	f023 0303 	bic.w	r3, r3, #3
 801b2ac:	f1b8 0f02 	cmp.w	r8, #2
 801b2b0:	81a3      	strh	r3, [r4, #12]
 801b2b2:	d05d      	beq.n	801b370 <setvbuf+0x138>
 801b2b4:	ab01      	add	r3, sp, #4
 801b2b6:	466a      	mov	r2, sp
 801b2b8:	4621      	mov	r1, r4
 801b2ba:	4630      	mov	r0, r6
 801b2bc:	f002 fb08 	bl	801d8d0 <__swhatbuf_r>
 801b2c0:	89a3      	ldrh	r3, [r4, #12]
 801b2c2:	4318      	orrs	r0, r3
 801b2c4:	81a0      	strh	r0, [r4, #12]
 801b2c6:	bb2d      	cbnz	r5, 801b314 <setvbuf+0xdc>
 801b2c8:	9d00      	ldr	r5, [sp, #0]
 801b2ca:	4628      	mov	r0, r5
 801b2cc:	f002 fb64 	bl	801d998 <malloc>
 801b2d0:	4607      	mov	r7, r0
 801b2d2:	2800      	cmp	r0, #0
 801b2d4:	d14e      	bne.n	801b374 <setvbuf+0x13c>
 801b2d6:	f8dd 9000 	ldr.w	r9, [sp]
 801b2da:	45a9      	cmp	r9, r5
 801b2dc:	d13c      	bne.n	801b358 <setvbuf+0x120>
 801b2de:	f04f 30ff 	mov.w	r0, #4294967295
 801b2e2:	89a3      	ldrh	r3, [r4, #12]
 801b2e4:	f043 0302 	orr.w	r3, r3, #2
 801b2e8:	81a3      	strh	r3, [r4, #12]
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	60a3      	str	r3, [r4, #8]
 801b2ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b2f2:	6023      	str	r3, [r4, #0]
 801b2f4:	6123      	str	r3, [r4, #16]
 801b2f6:	2301      	movs	r3, #1
 801b2f8:	6163      	str	r3, [r4, #20]
 801b2fa:	b003      	add	sp, #12
 801b2fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b300:	4b22      	ldr	r3, [pc, #136]	; (801b38c <setvbuf+0x154>)
 801b302:	429c      	cmp	r4, r3
 801b304:	d101      	bne.n	801b30a <setvbuf+0xd2>
 801b306:	68b4      	ldr	r4, [r6, #8]
 801b308:	e7a8      	b.n	801b25c <setvbuf+0x24>
 801b30a:	4b21      	ldr	r3, [pc, #132]	; (801b390 <setvbuf+0x158>)
 801b30c:	429c      	cmp	r4, r3
 801b30e:	bf08      	it	eq
 801b310:	68f4      	ldreq	r4, [r6, #12]
 801b312:	e7a3      	b.n	801b25c <setvbuf+0x24>
 801b314:	2f00      	cmp	r7, #0
 801b316:	d0d8      	beq.n	801b2ca <setvbuf+0x92>
 801b318:	69b3      	ldr	r3, [r6, #24]
 801b31a:	b913      	cbnz	r3, 801b322 <setvbuf+0xea>
 801b31c:	4630      	mov	r0, r6
 801b31e:	f001 ff13 	bl	801d148 <__sinit>
 801b322:	f1b8 0f01 	cmp.w	r8, #1
 801b326:	bf08      	it	eq
 801b328:	89a3      	ldrheq	r3, [r4, #12]
 801b32a:	6027      	str	r7, [r4, #0]
 801b32c:	bf04      	itt	eq
 801b32e:	f043 0301 	orreq.w	r3, r3, #1
 801b332:	81a3      	strheq	r3, [r4, #12]
 801b334:	89a3      	ldrh	r3, [r4, #12]
 801b336:	f013 0008 	ands.w	r0, r3, #8
 801b33a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 801b33e:	d01b      	beq.n	801b378 <setvbuf+0x140>
 801b340:	f013 0001 	ands.w	r0, r3, #1
 801b344:	bf18      	it	ne
 801b346:	426d      	negne	r5, r5
 801b348:	f04f 0300 	mov.w	r3, #0
 801b34c:	bf1d      	ittte	ne
 801b34e:	60a3      	strne	r3, [r4, #8]
 801b350:	61a5      	strne	r5, [r4, #24]
 801b352:	4618      	movne	r0, r3
 801b354:	60a5      	streq	r5, [r4, #8]
 801b356:	e7d0      	b.n	801b2fa <setvbuf+0xc2>
 801b358:	4648      	mov	r0, r9
 801b35a:	f002 fb1d 	bl	801d998 <malloc>
 801b35e:	4607      	mov	r7, r0
 801b360:	2800      	cmp	r0, #0
 801b362:	d0bc      	beq.n	801b2de <setvbuf+0xa6>
 801b364:	89a3      	ldrh	r3, [r4, #12]
 801b366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b36a:	81a3      	strh	r3, [r4, #12]
 801b36c:	464d      	mov	r5, r9
 801b36e:	e7d3      	b.n	801b318 <setvbuf+0xe0>
 801b370:	2000      	movs	r0, #0
 801b372:	e7b6      	b.n	801b2e2 <setvbuf+0xaa>
 801b374:	46a9      	mov	r9, r5
 801b376:	e7f5      	b.n	801b364 <setvbuf+0x12c>
 801b378:	60a0      	str	r0, [r4, #8]
 801b37a:	e7be      	b.n	801b2fa <setvbuf+0xc2>
 801b37c:	f04f 30ff 	mov.w	r0, #4294967295
 801b380:	e7bb      	b.n	801b2fa <setvbuf+0xc2>
 801b382:	bf00      	nop
 801b384:	2000011c 	.word	0x2000011c
 801b388:	0801f578 	.word	0x0801f578
 801b38c:	0801f598 	.word	0x0801f598
 801b390:	0801f558 	.word	0x0801f558

0801b394 <nanf>:
 801b394:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b39c <nanf+0x8>
 801b398:	4770      	bx	lr
 801b39a:	bf00      	nop
 801b39c:	7fc00000 	.word	0x7fc00000

0801b3a0 <siprintf>:
 801b3a0:	b40e      	push	{r1, r2, r3}
 801b3a2:	b500      	push	{lr}
 801b3a4:	b09c      	sub	sp, #112	; 0x70
 801b3a6:	ab1d      	add	r3, sp, #116	; 0x74
 801b3a8:	9002      	str	r0, [sp, #8]
 801b3aa:	9006      	str	r0, [sp, #24]
 801b3ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b3b0:	4809      	ldr	r0, [pc, #36]	; (801b3d8 <siprintf+0x38>)
 801b3b2:	9107      	str	r1, [sp, #28]
 801b3b4:	9104      	str	r1, [sp, #16]
 801b3b6:	4909      	ldr	r1, [pc, #36]	; (801b3dc <siprintf+0x3c>)
 801b3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801b3bc:	9105      	str	r1, [sp, #20]
 801b3be:	6800      	ldr	r0, [r0, #0]
 801b3c0:	9301      	str	r3, [sp, #4]
 801b3c2:	a902      	add	r1, sp, #8
 801b3c4:	f003 f850 	bl	801e468 <_svfiprintf_r>
 801b3c8:	9b02      	ldr	r3, [sp, #8]
 801b3ca:	2200      	movs	r2, #0
 801b3cc:	701a      	strb	r2, [r3, #0]
 801b3ce:	b01c      	add	sp, #112	; 0x70
 801b3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b3d4:	b003      	add	sp, #12
 801b3d6:	4770      	bx	lr
 801b3d8:	2000011c 	.word	0x2000011c
 801b3dc:	ffff0208 	.word	0xffff0208

0801b3e0 <strcpy>:
 801b3e0:	4603      	mov	r3, r0
 801b3e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b3e6:	f803 2b01 	strb.w	r2, [r3], #1
 801b3ea:	2a00      	cmp	r2, #0
 801b3ec:	d1f9      	bne.n	801b3e2 <strcpy+0x2>
 801b3ee:	4770      	bx	lr

0801b3f0 <sulp>:
 801b3f0:	b570      	push	{r4, r5, r6, lr}
 801b3f2:	4604      	mov	r4, r0
 801b3f4:	460d      	mov	r5, r1
 801b3f6:	ec45 4b10 	vmov	d0, r4, r5
 801b3fa:	4616      	mov	r6, r2
 801b3fc:	f002 fdca 	bl	801df94 <__ulp>
 801b400:	ec51 0b10 	vmov	r0, r1, d0
 801b404:	b17e      	cbz	r6, 801b426 <sulp+0x36>
 801b406:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b40a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b40e:	2b00      	cmp	r3, #0
 801b410:	dd09      	ble.n	801b426 <sulp+0x36>
 801b412:	051b      	lsls	r3, r3, #20
 801b414:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b418:	2400      	movs	r4, #0
 801b41a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b41e:	4622      	mov	r2, r4
 801b420:	462b      	mov	r3, r5
 801b422:	f7e5 f8f9 	bl	8000618 <__aeabi_dmul>
 801b426:	bd70      	pop	{r4, r5, r6, pc}

0801b428 <_strtod_l>:
 801b428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b42c:	461f      	mov	r7, r3
 801b42e:	b0a1      	sub	sp, #132	; 0x84
 801b430:	2300      	movs	r3, #0
 801b432:	4681      	mov	r9, r0
 801b434:	4638      	mov	r0, r7
 801b436:	460e      	mov	r6, r1
 801b438:	9217      	str	r2, [sp, #92]	; 0x5c
 801b43a:	931c      	str	r3, [sp, #112]	; 0x70
 801b43c:	f002 fa37 	bl	801d8ae <__localeconv_l>
 801b440:	4680      	mov	r8, r0
 801b442:	6800      	ldr	r0, [r0, #0]
 801b444:	f7e4 fed4 	bl	80001f0 <strlen>
 801b448:	f04f 0a00 	mov.w	sl, #0
 801b44c:	4604      	mov	r4, r0
 801b44e:	f04f 0b00 	mov.w	fp, #0
 801b452:	961b      	str	r6, [sp, #108]	; 0x6c
 801b454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b456:	781a      	ldrb	r2, [r3, #0]
 801b458:	2a0d      	cmp	r2, #13
 801b45a:	d832      	bhi.n	801b4c2 <_strtod_l+0x9a>
 801b45c:	2a09      	cmp	r2, #9
 801b45e:	d236      	bcs.n	801b4ce <_strtod_l+0xa6>
 801b460:	2a00      	cmp	r2, #0
 801b462:	d03e      	beq.n	801b4e2 <_strtod_l+0xba>
 801b464:	2300      	movs	r3, #0
 801b466:	930d      	str	r3, [sp, #52]	; 0x34
 801b468:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801b46a:	782b      	ldrb	r3, [r5, #0]
 801b46c:	2b30      	cmp	r3, #48	; 0x30
 801b46e:	f040 80ac 	bne.w	801b5ca <_strtod_l+0x1a2>
 801b472:	786b      	ldrb	r3, [r5, #1]
 801b474:	2b58      	cmp	r3, #88	; 0x58
 801b476:	d001      	beq.n	801b47c <_strtod_l+0x54>
 801b478:	2b78      	cmp	r3, #120	; 0x78
 801b47a:	d167      	bne.n	801b54c <_strtod_l+0x124>
 801b47c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b47e:	9301      	str	r3, [sp, #4]
 801b480:	ab1c      	add	r3, sp, #112	; 0x70
 801b482:	9300      	str	r3, [sp, #0]
 801b484:	9702      	str	r7, [sp, #8]
 801b486:	ab1d      	add	r3, sp, #116	; 0x74
 801b488:	4a88      	ldr	r2, [pc, #544]	; (801b6ac <_strtod_l+0x284>)
 801b48a:	a91b      	add	r1, sp, #108	; 0x6c
 801b48c:	4648      	mov	r0, r9
 801b48e:	f001 ff34 	bl	801d2fa <__gethex>
 801b492:	f010 0407 	ands.w	r4, r0, #7
 801b496:	4606      	mov	r6, r0
 801b498:	d005      	beq.n	801b4a6 <_strtod_l+0x7e>
 801b49a:	2c06      	cmp	r4, #6
 801b49c:	d12b      	bne.n	801b4f6 <_strtod_l+0xce>
 801b49e:	3501      	adds	r5, #1
 801b4a0:	2300      	movs	r3, #0
 801b4a2:	951b      	str	r5, [sp, #108]	; 0x6c
 801b4a4:	930d      	str	r3, [sp, #52]	; 0x34
 801b4a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	f040 859a 	bne.w	801bfe2 <_strtod_l+0xbba>
 801b4ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b4b0:	b1e3      	cbz	r3, 801b4ec <_strtod_l+0xc4>
 801b4b2:	4652      	mov	r2, sl
 801b4b4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b4b8:	ec43 2b10 	vmov	d0, r2, r3
 801b4bc:	b021      	add	sp, #132	; 0x84
 801b4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4c2:	2a2b      	cmp	r2, #43	; 0x2b
 801b4c4:	d015      	beq.n	801b4f2 <_strtod_l+0xca>
 801b4c6:	2a2d      	cmp	r2, #45	; 0x2d
 801b4c8:	d004      	beq.n	801b4d4 <_strtod_l+0xac>
 801b4ca:	2a20      	cmp	r2, #32
 801b4cc:	d1ca      	bne.n	801b464 <_strtod_l+0x3c>
 801b4ce:	3301      	adds	r3, #1
 801b4d0:	931b      	str	r3, [sp, #108]	; 0x6c
 801b4d2:	e7bf      	b.n	801b454 <_strtod_l+0x2c>
 801b4d4:	2201      	movs	r2, #1
 801b4d6:	920d      	str	r2, [sp, #52]	; 0x34
 801b4d8:	1c5a      	adds	r2, r3, #1
 801b4da:	921b      	str	r2, [sp, #108]	; 0x6c
 801b4dc:	785b      	ldrb	r3, [r3, #1]
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d1c2      	bne.n	801b468 <_strtod_l+0x40>
 801b4e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b4e4:	961b      	str	r6, [sp, #108]	; 0x6c
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	f040 8579 	bne.w	801bfde <_strtod_l+0xbb6>
 801b4ec:	4652      	mov	r2, sl
 801b4ee:	465b      	mov	r3, fp
 801b4f0:	e7e2      	b.n	801b4b8 <_strtod_l+0x90>
 801b4f2:	2200      	movs	r2, #0
 801b4f4:	e7ef      	b.n	801b4d6 <_strtod_l+0xae>
 801b4f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b4f8:	b13a      	cbz	r2, 801b50a <_strtod_l+0xe2>
 801b4fa:	2135      	movs	r1, #53	; 0x35
 801b4fc:	a81e      	add	r0, sp, #120	; 0x78
 801b4fe:	f002 fe41 	bl	801e184 <__copybits>
 801b502:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b504:	4648      	mov	r0, r9
 801b506:	f002 faae 	bl	801da66 <_Bfree>
 801b50a:	3c01      	subs	r4, #1
 801b50c:	2c04      	cmp	r4, #4
 801b50e:	d806      	bhi.n	801b51e <_strtod_l+0xf6>
 801b510:	e8df f004 	tbb	[pc, r4]
 801b514:	1714030a 	.word	0x1714030a
 801b518:	0a          	.byte	0x0a
 801b519:	00          	.byte	0x00
 801b51a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801b51e:	0730      	lsls	r0, r6, #28
 801b520:	d5c1      	bpl.n	801b4a6 <_strtod_l+0x7e>
 801b522:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b526:	e7be      	b.n	801b4a6 <_strtod_l+0x7e>
 801b528:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801b52c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b52e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b532:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b536:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b53a:	e7f0      	b.n	801b51e <_strtod_l+0xf6>
 801b53c:	f8df b170 	ldr.w	fp, [pc, #368]	; 801b6b0 <_strtod_l+0x288>
 801b540:	e7ed      	b.n	801b51e <_strtod_l+0xf6>
 801b542:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b546:	f04f 3aff 	mov.w	sl, #4294967295
 801b54a:	e7e8      	b.n	801b51e <_strtod_l+0xf6>
 801b54c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b54e:	1c5a      	adds	r2, r3, #1
 801b550:	921b      	str	r2, [sp, #108]	; 0x6c
 801b552:	785b      	ldrb	r3, [r3, #1]
 801b554:	2b30      	cmp	r3, #48	; 0x30
 801b556:	d0f9      	beq.n	801b54c <_strtod_l+0x124>
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d0a4      	beq.n	801b4a6 <_strtod_l+0x7e>
 801b55c:	2301      	movs	r3, #1
 801b55e:	2500      	movs	r5, #0
 801b560:	9306      	str	r3, [sp, #24]
 801b562:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b564:	9308      	str	r3, [sp, #32]
 801b566:	9507      	str	r5, [sp, #28]
 801b568:	9505      	str	r5, [sp, #20]
 801b56a:	220a      	movs	r2, #10
 801b56c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801b56e:	7807      	ldrb	r7, [r0, #0]
 801b570:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801b574:	b2d9      	uxtb	r1, r3
 801b576:	2909      	cmp	r1, #9
 801b578:	d929      	bls.n	801b5ce <_strtod_l+0x1a6>
 801b57a:	4622      	mov	r2, r4
 801b57c:	f8d8 1000 	ldr.w	r1, [r8]
 801b580:	f003 f901 	bl	801e786 <strncmp>
 801b584:	2800      	cmp	r0, #0
 801b586:	d031      	beq.n	801b5ec <_strtod_l+0x1c4>
 801b588:	2000      	movs	r0, #0
 801b58a:	9c05      	ldr	r4, [sp, #20]
 801b58c:	9004      	str	r0, [sp, #16]
 801b58e:	463b      	mov	r3, r7
 801b590:	4602      	mov	r2, r0
 801b592:	2b65      	cmp	r3, #101	; 0x65
 801b594:	d001      	beq.n	801b59a <_strtod_l+0x172>
 801b596:	2b45      	cmp	r3, #69	; 0x45
 801b598:	d114      	bne.n	801b5c4 <_strtod_l+0x19c>
 801b59a:	b924      	cbnz	r4, 801b5a6 <_strtod_l+0x17e>
 801b59c:	b910      	cbnz	r0, 801b5a4 <_strtod_l+0x17c>
 801b59e:	9b06      	ldr	r3, [sp, #24]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d09e      	beq.n	801b4e2 <_strtod_l+0xba>
 801b5a4:	2400      	movs	r4, #0
 801b5a6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801b5a8:	1c73      	adds	r3, r6, #1
 801b5aa:	931b      	str	r3, [sp, #108]	; 0x6c
 801b5ac:	7873      	ldrb	r3, [r6, #1]
 801b5ae:	2b2b      	cmp	r3, #43	; 0x2b
 801b5b0:	d078      	beq.n	801b6a4 <_strtod_l+0x27c>
 801b5b2:	2b2d      	cmp	r3, #45	; 0x2d
 801b5b4:	d070      	beq.n	801b698 <_strtod_l+0x270>
 801b5b6:	f04f 0c00 	mov.w	ip, #0
 801b5ba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801b5be:	2f09      	cmp	r7, #9
 801b5c0:	d97c      	bls.n	801b6bc <_strtod_l+0x294>
 801b5c2:	961b      	str	r6, [sp, #108]	; 0x6c
 801b5c4:	f04f 0e00 	mov.w	lr, #0
 801b5c8:	e09a      	b.n	801b700 <_strtod_l+0x2d8>
 801b5ca:	2300      	movs	r3, #0
 801b5cc:	e7c7      	b.n	801b55e <_strtod_l+0x136>
 801b5ce:	9905      	ldr	r1, [sp, #20]
 801b5d0:	2908      	cmp	r1, #8
 801b5d2:	bfdd      	ittte	le
 801b5d4:	9907      	ldrle	r1, [sp, #28]
 801b5d6:	fb02 3301 	mlale	r3, r2, r1, r3
 801b5da:	9307      	strle	r3, [sp, #28]
 801b5dc:	fb02 3505 	mlagt	r5, r2, r5, r3
 801b5e0:	9b05      	ldr	r3, [sp, #20]
 801b5e2:	3001      	adds	r0, #1
 801b5e4:	3301      	adds	r3, #1
 801b5e6:	9305      	str	r3, [sp, #20]
 801b5e8:	901b      	str	r0, [sp, #108]	; 0x6c
 801b5ea:	e7bf      	b.n	801b56c <_strtod_l+0x144>
 801b5ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b5ee:	191a      	adds	r2, r3, r4
 801b5f0:	921b      	str	r2, [sp, #108]	; 0x6c
 801b5f2:	9a05      	ldr	r2, [sp, #20]
 801b5f4:	5d1b      	ldrb	r3, [r3, r4]
 801b5f6:	2a00      	cmp	r2, #0
 801b5f8:	d037      	beq.n	801b66a <_strtod_l+0x242>
 801b5fa:	9c05      	ldr	r4, [sp, #20]
 801b5fc:	4602      	mov	r2, r0
 801b5fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801b602:	2909      	cmp	r1, #9
 801b604:	d913      	bls.n	801b62e <_strtod_l+0x206>
 801b606:	2101      	movs	r1, #1
 801b608:	9104      	str	r1, [sp, #16]
 801b60a:	e7c2      	b.n	801b592 <_strtod_l+0x16a>
 801b60c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b60e:	1c5a      	adds	r2, r3, #1
 801b610:	921b      	str	r2, [sp, #108]	; 0x6c
 801b612:	785b      	ldrb	r3, [r3, #1]
 801b614:	3001      	adds	r0, #1
 801b616:	2b30      	cmp	r3, #48	; 0x30
 801b618:	d0f8      	beq.n	801b60c <_strtod_l+0x1e4>
 801b61a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801b61e:	2a08      	cmp	r2, #8
 801b620:	f200 84e4 	bhi.w	801bfec <_strtod_l+0xbc4>
 801b624:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801b626:	9208      	str	r2, [sp, #32]
 801b628:	4602      	mov	r2, r0
 801b62a:	2000      	movs	r0, #0
 801b62c:	4604      	mov	r4, r0
 801b62e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801b632:	f100 0101 	add.w	r1, r0, #1
 801b636:	d012      	beq.n	801b65e <_strtod_l+0x236>
 801b638:	440a      	add	r2, r1
 801b63a:	eb00 0c04 	add.w	ip, r0, r4
 801b63e:	4621      	mov	r1, r4
 801b640:	270a      	movs	r7, #10
 801b642:	458c      	cmp	ip, r1
 801b644:	d113      	bne.n	801b66e <_strtod_l+0x246>
 801b646:	1821      	adds	r1, r4, r0
 801b648:	2908      	cmp	r1, #8
 801b64a:	f104 0401 	add.w	r4, r4, #1
 801b64e:	4404      	add	r4, r0
 801b650:	dc19      	bgt.n	801b686 <_strtod_l+0x25e>
 801b652:	9b07      	ldr	r3, [sp, #28]
 801b654:	210a      	movs	r1, #10
 801b656:	fb01 e303 	mla	r3, r1, r3, lr
 801b65a:	9307      	str	r3, [sp, #28]
 801b65c:	2100      	movs	r1, #0
 801b65e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b660:	1c58      	adds	r0, r3, #1
 801b662:	901b      	str	r0, [sp, #108]	; 0x6c
 801b664:	785b      	ldrb	r3, [r3, #1]
 801b666:	4608      	mov	r0, r1
 801b668:	e7c9      	b.n	801b5fe <_strtod_l+0x1d6>
 801b66a:	9805      	ldr	r0, [sp, #20]
 801b66c:	e7d3      	b.n	801b616 <_strtod_l+0x1ee>
 801b66e:	2908      	cmp	r1, #8
 801b670:	f101 0101 	add.w	r1, r1, #1
 801b674:	dc03      	bgt.n	801b67e <_strtod_l+0x256>
 801b676:	9b07      	ldr	r3, [sp, #28]
 801b678:	437b      	muls	r3, r7
 801b67a:	9307      	str	r3, [sp, #28]
 801b67c:	e7e1      	b.n	801b642 <_strtod_l+0x21a>
 801b67e:	2910      	cmp	r1, #16
 801b680:	bfd8      	it	le
 801b682:	437d      	mulle	r5, r7
 801b684:	e7dd      	b.n	801b642 <_strtod_l+0x21a>
 801b686:	2c10      	cmp	r4, #16
 801b688:	bfdc      	itt	le
 801b68a:	210a      	movle	r1, #10
 801b68c:	fb01 e505 	mlale	r5, r1, r5, lr
 801b690:	e7e4      	b.n	801b65c <_strtod_l+0x234>
 801b692:	2301      	movs	r3, #1
 801b694:	9304      	str	r3, [sp, #16]
 801b696:	e781      	b.n	801b59c <_strtod_l+0x174>
 801b698:	f04f 0c01 	mov.w	ip, #1
 801b69c:	1cb3      	adds	r3, r6, #2
 801b69e:	931b      	str	r3, [sp, #108]	; 0x6c
 801b6a0:	78b3      	ldrb	r3, [r6, #2]
 801b6a2:	e78a      	b.n	801b5ba <_strtod_l+0x192>
 801b6a4:	f04f 0c00 	mov.w	ip, #0
 801b6a8:	e7f8      	b.n	801b69c <_strtod_l+0x274>
 801b6aa:	bf00      	nop
 801b6ac:	0801f4f8 	.word	0x0801f4f8
 801b6b0:	7ff00000 	.word	0x7ff00000
 801b6b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b6b6:	1c5f      	adds	r7, r3, #1
 801b6b8:	971b      	str	r7, [sp, #108]	; 0x6c
 801b6ba:	785b      	ldrb	r3, [r3, #1]
 801b6bc:	2b30      	cmp	r3, #48	; 0x30
 801b6be:	d0f9      	beq.n	801b6b4 <_strtod_l+0x28c>
 801b6c0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801b6c4:	2f08      	cmp	r7, #8
 801b6c6:	f63f af7d 	bhi.w	801b5c4 <_strtod_l+0x19c>
 801b6ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801b6ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b6d0:	930a      	str	r3, [sp, #40]	; 0x28
 801b6d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b6d4:	1c5f      	adds	r7, r3, #1
 801b6d6:	971b      	str	r7, [sp, #108]	; 0x6c
 801b6d8:	785b      	ldrb	r3, [r3, #1]
 801b6da:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801b6de:	f1b8 0f09 	cmp.w	r8, #9
 801b6e2:	d937      	bls.n	801b754 <_strtod_l+0x32c>
 801b6e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b6e6:	1a7f      	subs	r7, r7, r1
 801b6e8:	2f08      	cmp	r7, #8
 801b6ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801b6ee:	dc37      	bgt.n	801b760 <_strtod_l+0x338>
 801b6f0:	45be      	cmp	lr, r7
 801b6f2:	bfa8      	it	ge
 801b6f4:	46be      	movge	lr, r7
 801b6f6:	f1bc 0f00 	cmp.w	ip, #0
 801b6fa:	d001      	beq.n	801b700 <_strtod_l+0x2d8>
 801b6fc:	f1ce 0e00 	rsb	lr, lr, #0
 801b700:	2c00      	cmp	r4, #0
 801b702:	d151      	bne.n	801b7a8 <_strtod_l+0x380>
 801b704:	2800      	cmp	r0, #0
 801b706:	f47f aece 	bne.w	801b4a6 <_strtod_l+0x7e>
 801b70a:	9a06      	ldr	r2, [sp, #24]
 801b70c:	2a00      	cmp	r2, #0
 801b70e:	f47f aeca 	bne.w	801b4a6 <_strtod_l+0x7e>
 801b712:	9a04      	ldr	r2, [sp, #16]
 801b714:	2a00      	cmp	r2, #0
 801b716:	f47f aee4 	bne.w	801b4e2 <_strtod_l+0xba>
 801b71a:	2b4e      	cmp	r3, #78	; 0x4e
 801b71c:	d027      	beq.n	801b76e <_strtod_l+0x346>
 801b71e:	dc21      	bgt.n	801b764 <_strtod_l+0x33c>
 801b720:	2b49      	cmp	r3, #73	; 0x49
 801b722:	f47f aede 	bne.w	801b4e2 <_strtod_l+0xba>
 801b726:	49a0      	ldr	r1, [pc, #640]	; (801b9a8 <_strtod_l+0x580>)
 801b728:	a81b      	add	r0, sp, #108	; 0x6c
 801b72a:	f002 f819 	bl	801d760 <__match>
 801b72e:	2800      	cmp	r0, #0
 801b730:	f43f aed7 	beq.w	801b4e2 <_strtod_l+0xba>
 801b734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b736:	499d      	ldr	r1, [pc, #628]	; (801b9ac <_strtod_l+0x584>)
 801b738:	3b01      	subs	r3, #1
 801b73a:	a81b      	add	r0, sp, #108	; 0x6c
 801b73c:	931b      	str	r3, [sp, #108]	; 0x6c
 801b73e:	f002 f80f 	bl	801d760 <__match>
 801b742:	b910      	cbnz	r0, 801b74a <_strtod_l+0x322>
 801b744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b746:	3301      	adds	r3, #1
 801b748:	931b      	str	r3, [sp, #108]	; 0x6c
 801b74a:	f8df b274 	ldr.w	fp, [pc, #628]	; 801b9c0 <_strtod_l+0x598>
 801b74e:	f04f 0a00 	mov.w	sl, #0
 801b752:	e6a8      	b.n	801b4a6 <_strtod_l+0x7e>
 801b754:	210a      	movs	r1, #10
 801b756:	fb01 3e0e 	mla	lr, r1, lr, r3
 801b75a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b75e:	e7b8      	b.n	801b6d2 <_strtod_l+0x2aa>
 801b760:	46be      	mov	lr, r7
 801b762:	e7c8      	b.n	801b6f6 <_strtod_l+0x2ce>
 801b764:	2b69      	cmp	r3, #105	; 0x69
 801b766:	d0de      	beq.n	801b726 <_strtod_l+0x2fe>
 801b768:	2b6e      	cmp	r3, #110	; 0x6e
 801b76a:	f47f aeba 	bne.w	801b4e2 <_strtod_l+0xba>
 801b76e:	4990      	ldr	r1, [pc, #576]	; (801b9b0 <_strtod_l+0x588>)
 801b770:	a81b      	add	r0, sp, #108	; 0x6c
 801b772:	f001 fff5 	bl	801d760 <__match>
 801b776:	2800      	cmp	r0, #0
 801b778:	f43f aeb3 	beq.w	801b4e2 <_strtod_l+0xba>
 801b77c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b77e:	781b      	ldrb	r3, [r3, #0]
 801b780:	2b28      	cmp	r3, #40	; 0x28
 801b782:	d10e      	bne.n	801b7a2 <_strtod_l+0x37a>
 801b784:	aa1e      	add	r2, sp, #120	; 0x78
 801b786:	498b      	ldr	r1, [pc, #556]	; (801b9b4 <_strtod_l+0x58c>)
 801b788:	a81b      	add	r0, sp, #108	; 0x6c
 801b78a:	f001 fffd 	bl	801d788 <__hexnan>
 801b78e:	2805      	cmp	r0, #5
 801b790:	d107      	bne.n	801b7a2 <_strtod_l+0x37a>
 801b792:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b794:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801b798:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b79c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b7a0:	e681      	b.n	801b4a6 <_strtod_l+0x7e>
 801b7a2:	f8df b224 	ldr.w	fp, [pc, #548]	; 801b9c8 <_strtod_l+0x5a0>
 801b7a6:	e7d2      	b.n	801b74e <_strtod_l+0x326>
 801b7a8:	ebae 0302 	sub.w	r3, lr, r2
 801b7ac:	9306      	str	r3, [sp, #24]
 801b7ae:	9b05      	ldr	r3, [sp, #20]
 801b7b0:	9807      	ldr	r0, [sp, #28]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	bf08      	it	eq
 801b7b6:	4623      	moveq	r3, r4
 801b7b8:	2c10      	cmp	r4, #16
 801b7ba:	9305      	str	r3, [sp, #20]
 801b7bc:	46a0      	mov	r8, r4
 801b7be:	bfa8      	it	ge
 801b7c0:	f04f 0810 	movge.w	r8, #16
 801b7c4:	f7e4 feae 	bl	8000524 <__aeabi_ui2d>
 801b7c8:	2c09      	cmp	r4, #9
 801b7ca:	4682      	mov	sl, r0
 801b7cc:	468b      	mov	fp, r1
 801b7ce:	dc13      	bgt.n	801b7f8 <_strtod_l+0x3d0>
 801b7d0:	9b06      	ldr	r3, [sp, #24]
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	f43f ae67 	beq.w	801b4a6 <_strtod_l+0x7e>
 801b7d8:	9b06      	ldr	r3, [sp, #24]
 801b7da:	dd7a      	ble.n	801b8d2 <_strtod_l+0x4aa>
 801b7dc:	2b16      	cmp	r3, #22
 801b7de:	dc61      	bgt.n	801b8a4 <_strtod_l+0x47c>
 801b7e0:	4a75      	ldr	r2, [pc, #468]	; (801b9b8 <_strtod_l+0x590>)
 801b7e2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801b7e6:	e9de 0100 	ldrd	r0, r1, [lr]
 801b7ea:	4652      	mov	r2, sl
 801b7ec:	465b      	mov	r3, fp
 801b7ee:	f7e4 ff13 	bl	8000618 <__aeabi_dmul>
 801b7f2:	4682      	mov	sl, r0
 801b7f4:	468b      	mov	fp, r1
 801b7f6:	e656      	b.n	801b4a6 <_strtod_l+0x7e>
 801b7f8:	4b6f      	ldr	r3, [pc, #444]	; (801b9b8 <_strtod_l+0x590>)
 801b7fa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b7fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b802:	f7e4 ff09 	bl	8000618 <__aeabi_dmul>
 801b806:	4606      	mov	r6, r0
 801b808:	4628      	mov	r0, r5
 801b80a:	460f      	mov	r7, r1
 801b80c:	f7e4 fe8a 	bl	8000524 <__aeabi_ui2d>
 801b810:	4602      	mov	r2, r0
 801b812:	460b      	mov	r3, r1
 801b814:	4630      	mov	r0, r6
 801b816:	4639      	mov	r1, r7
 801b818:	f7e4 fd48 	bl	80002ac <__adddf3>
 801b81c:	2c0f      	cmp	r4, #15
 801b81e:	4682      	mov	sl, r0
 801b820:	468b      	mov	fp, r1
 801b822:	ddd5      	ble.n	801b7d0 <_strtod_l+0x3a8>
 801b824:	9b06      	ldr	r3, [sp, #24]
 801b826:	eba4 0808 	sub.w	r8, r4, r8
 801b82a:	4498      	add	r8, r3
 801b82c:	f1b8 0f00 	cmp.w	r8, #0
 801b830:	f340 8096 	ble.w	801b960 <_strtod_l+0x538>
 801b834:	f018 030f 	ands.w	r3, r8, #15
 801b838:	d00a      	beq.n	801b850 <_strtod_l+0x428>
 801b83a:	495f      	ldr	r1, [pc, #380]	; (801b9b8 <_strtod_l+0x590>)
 801b83c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b840:	4652      	mov	r2, sl
 801b842:	465b      	mov	r3, fp
 801b844:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b848:	f7e4 fee6 	bl	8000618 <__aeabi_dmul>
 801b84c:	4682      	mov	sl, r0
 801b84e:	468b      	mov	fp, r1
 801b850:	f038 080f 	bics.w	r8, r8, #15
 801b854:	d073      	beq.n	801b93e <_strtod_l+0x516>
 801b856:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b85a:	dd47      	ble.n	801b8ec <_strtod_l+0x4c4>
 801b85c:	2400      	movs	r4, #0
 801b85e:	46a0      	mov	r8, r4
 801b860:	9407      	str	r4, [sp, #28]
 801b862:	9405      	str	r4, [sp, #20]
 801b864:	2322      	movs	r3, #34	; 0x22
 801b866:	f8df b158 	ldr.w	fp, [pc, #344]	; 801b9c0 <_strtod_l+0x598>
 801b86a:	f8c9 3000 	str.w	r3, [r9]
 801b86e:	f04f 0a00 	mov.w	sl, #0
 801b872:	9b07      	ldr	r3, [sp, #28]
 801b874:	2b00      	cmp	r3, #0
 801b876:	f43f ae16 	beq.w	801b4a6 <_strtod_l+0x7e>
 801b87a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b87c:	4648      	mov	r0, r9
 801b87e:	f002 f8f2 	bl	801da66 <_Bfree>
 801b882:	9905      	ldr	r1, [sp, #20]
 801b884:	4648      	mov	r0, r9
 801b886:	f002 f8ee 	bl	801da66 <_Bfree>
 801b88a:	4641      	mov	r1, r8
 801b88c:	4648      	mov	r0, r9
 801b88e:	f002 f8ea 	bl	801da66 <_Bfree>
 801b892:	9907      	ldr	r1, [sp, #28]
 801b894:	4648      	mov	r0, r9
 801b896:	f002 f8e6 	bl	801da66 <_Bfree>
 801b89a:	4621      	mov	r1, r4
 801b89c:	4648      	mov	r0, r9
 801b89e:	f002 f8e2 	bl	801da66 <_Bfree>
 801b8a2:	e600      	b.n	801b4a6 <_strtod_l+0x7e>
 801b8a4:	9a06      	ldr	r2, [sp, #24]
 801b8a6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801b8aa:	4293      	cmp	r3, r2
 801b8ac:	dbba      	blt.n	801b824 <_strtod_l+0x3fc>
 801b8ae:	4d42      	ldr	r5, [pc, #264]	; (801b9b8 <_strtod_l+0x590>)
 801b8b0:	f1c4 040f 	rsb	r4, r4, #15
 801b8b4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 801b8b8:	4652      	mov	r2, sl
 801b8ba:	465b      	mov	r3, fp
 801b8bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b8c0:	f7e4 feaa 	bl	8000618 <__aeabi_dmul>
 801b8c4:	9b06      	ldr	r3, [sp, #24]
 801b8c6:	1b1c      	subs	r4, r3, r4
 801b8c8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801b8cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b8d0:	e78d      	b.n	801b7ee <_strtod_l+0x3c6>
 801b8d2:	f113 0f16 	cmn.w	r3, #22
 801b8d6:	dba5      	blt.n	801b824 <_strtod_l+0x3fc>
 801b8d8:	4a37      	ldr	r2, [pc, #220]	; (801b9b8 <_strtod_l+0x590>)
 801b8da:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801b8de:	e9d2 2300 	ldrd	r2, r3, [r2]
 801b8e2:	4650      	mov	r0, sl
 801b8e4:	4659      	mov	r1, fp
 801b8e6:	f7e4 ffc1 	bl	800086c <__aeabi_ddiv>
 801b8ea:	e782      	b.n	801b7f2 <_strtod_l+0x3ca>
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	4e33      	ldr	r6, [pc, #204]	; (801b9bc <_strtod_l+0x594>)
 801b8f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b8f4:	4650      	mov	r0, sl
 801b8f6:	4659      	mov	r1, fp
 801b8f8:	461d      	mov	r5, r3
 801b8fa:	f1b8 0f01 	cmp.w	r8, #1
 801b8fe:	dc21      	bgt.n	801b944 <_strtod_l+0x51c>
 801b900:	b10b      	cbz	r3, 801b906 <_strtod_l+0x4de>
 801b902:	4682      	mov	sl, r0
 801b904:	468b      	mov	fp, r1
 801b906:	4b2d      	ldr	r3, [pc, #180]	; (801b9bc <_strtod_l+0x594>)
 801b908:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b90c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801b910:	4652      	mov	r2, sl
 801b912:	465b      	mov	r3, fp
 801b914:	e9d5 0100 	ldrd	r0, r1, [r5]
 801b918:	f7e4 fe7e 	bl	8000618 <__aeabi_dmul>
 801b91c:	4b28      	ldr	r3, [pc, #160]	; (801b9c0 <_strtod_l+0x598>)
 801b91e:	460a      	mov	r2, r1
 801b920:	400b      	ands	r3, r1
 801b922:	4928      	ldr	r1, [pc, #160]	; (801b9c4 <_strtod_l+0x59c>)
 801b924:	428b      	cmp	r3, r1
 801b926:	4682      	mov	sl, r0
 801b928:	d898      	bhi.n	801b85c <_strtod_l+0x434>
 801b92a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b92e:	428b      	cmp	r3, r1
 801b930:	bf86      	itte	hi
 801b932:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801b9cc <_strtod_l+0x5a4>
 801b936:	f04f 3aff 	movhi.w	sl, #4294967295
 801b93a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b93e:	2300      	movs	r3, #0
 801b940:	9304      	str	r3, [sp, #16]
 801b942:	e077      	b.n	801ba34 <_strtod_l+0x60c>
 801b944:	f018 0f01 	tst.w	r8, #1
 801b948:	d006      	beq.n	801b958 <_strtod_l+0x530>
 801b94a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b952:	f7e4 fe61 	bl	8000618 <__aeabi_dmul>
 801b956:	2301      	movs	r3, #1
 801b958:	3501      	adds	r5, #1
 801b95a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b95e:	e7cc      	b.n	801b8fa <_strtod_l+0x4d2>
 801b960:	d0ed      	beq.n	801b93e <_strtod_l+0x516>
 801b962:	f1c8 0800 	rsb	r8, r8, #0
 801b966:	f018 020f 	ands.w	r2, r8, #15
 801b96a:	d00a      	beq.n	801b982 <_strtod_l+0x55a>
 801b96c:	4b12      	ldr	r3, [pc, #72]	; (801b9b8 <_strtod_l+0x590>)
 801b96e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b972:	4650      	mov	r0, sl
 801b974:	4659      	mov	r1, fp
 801b976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b97a:	f7e4 ff77 	bl	800086c <__aeabi_ddiv>
 801b97e:	4682      	mov	sl, r0
 801b980:	468b      	mov	fp, r1
 801b982:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b986:	d0da      	beq.n	801b93e <_strtod_l+0x516>
 801b988:	f1b8 0f1f 	cmp.w	r8, #31
 801b98c:	dd20      	ble.n	801b9d0 <_strtod_l+0x5a8>
 801b98e:	2400      	movs	r4, #0
 801b990:	46a0      	mov	r8, r4
 801b992:	9407      	str	r4, [sp, #28]
 801b994:	9405      	str	r4, [sp, #20]
 801b996:	2322      	movs	r3, #34	; 0x22
 801b998:	f04f 0a00 	mov.w	sl, #0
 801b99c:	f04f 0b00 	mov.w	fp, #0
 801b9a0:	f8c9 3000 	str.w	r3, [r9]
 801b9a4:	e765      	b.n	801b872 <_strtod_l+0x44a>
 801b9a6:	bf00      	nop
 801b9a8:	0801f077 	.word	0x0801f077
 801b9ac:	0801f54b 	.word	0x0801f54b
 801b9b0:	0801f4ca 	.word	0x0801f4ca
 801b9b4:	0801f50c 	.word	0x0801f50c
 801b9b8:	0801f5f0 	.word	0x0801f5f0
 801b9bc:	0801f5c8 	.word	0x0801f5c8
 801b9c0:	7ff00000 	.word	0x7ff00000
 801b9c4:	7ca00000 	.word	0x7ca00000
 801b9c8:	fff80000 	.word	0xfff80000
 801b9cc:	7fefffff 	.word	0x7fefffff
 801b9d0:	f018 0310 	ands.w	r3, r8, #16
 801b9d4:	bf18      	it	ne
 801b9d6:	236a      	movne	r3, #106	; 0x6a
 801b9d8:	4da0      	ldr	r5, [pc, #640]	; (801bc5c <_strtod_l+0x834>)
 801b9da:	9304      	str	r3, [sp, #16]
 801b9dc:	4650      	mov	r0, sl
 801b9de:	4659      	mov	r1, fp
 801b9e0:	2300      	movs	r3, #0
 801b9e2:	f1b8 0f00 	cmp.w	r8, #0
 801b9e6:	f300 810a 	bgt.w	801bbfe <_strtod_l+0x7d6>
 801b9ea:	b10b      	cbz	r3, 801b9f0 <_strtod_l+0x5c8>
 801b9ec:	4682      	mov	sl, r0
 801b9ee:	468b      	mov	fp, r1
 801b9f0:	9b04      	ldr	r3, [sp, #16]
 801b9f2:	b1bb      	cbz	r3, 801ba24 <_strtod_l+0x5fc>
 801b9f4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801b9f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	4659      	mov	r1, fp
 801ba00:	dd10      	ble.n	801ba24 <_strtod_l+0x5fc>
 801ba02:	2b1f      	cmp	r3, #31
 801ba04:	f340 8107 	ble.w	801bc16 <_strtod_l+0x7ee>
 801ba08:	2b34      	cmp	r3, #52	; 0x34
 801ba0a:	bfde      	ittt	le
 801ba0c:	3b20      	suble	r3, #32
 801ba0e:	f04f 32ff 	movle.w	r2, #4294967295
 801ba12:	fa02 f303 	lslle.w	r3, r2, r3
 801ba16:	f04f 0a00 	mov.w	sl, #0
 801ba1a:	bfcc      	ite	gt
 801ba1c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ba20:	ea03 0b01 	andle.w	fp, r3, r1
 801ba24:	2200      	movs	r2, #0
 801ba26:	2300      	movs	r3, #0
 801ba28:	4650      	mov	r0, sl
 801ba2a:	4659      	mov	r1, fp
 801ba2c:	f7e5 f85c 	bl	8000ae8 <__aeabi_dcmpeq>
 801ba30:	2800      	cmp	r0, #0
 801ba32:	d1ac      	bne.n	801b98e <_strtod_l+0x566>
 801ba34:	9b07      	ldr	r3, [sp, #28]
 801ba36:	9300      	str	r3, [sp, #0]
 801ba38:	9a05      	ldr	r2, [sp, #20]
 801ba3a:	9908      	ldr	r1, [sp, #32]
 801ba3c:	4623      	mov	r3, r4
 801ba3e:	4648      	mov	r0, r9
 801ba40:	f002 f863 	bl	801db0a <__s2b>
 801ba44:	9007      	str	r0, [sp, #28]
 801ba46:	2800      	cmp	r0, #0
 801ba48:	f43f af08 	beq.w	801b85c <_strtod_l+0x434>
 801ba4c:	9a06      	ldr	r2, [sp, #24]
 801ba4e:	9b06      	ldr	r3, [sp, #24]
 801ba50:	2a00      	cmp	r2, #0
 801ba52:	f1c3 0300 	rsb	r3, r3, #0
 801ba56:	bfa8      	it	ge
 801ba58:	2300      	movge	r3, #0
 801ba5a:	930e      	str	r3, [sp, #56]	; 0x38
 801ba5c:	2400      	movs	r4, #0
 801ba5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801ba62:	9316      	str	r3, [sp, #88]	; 0x58
 801ba64:	46a0      	mov	r8, r4
 801ba66:	9b07      	ldr	r3, [sp, #28]
 801ba68:	4648      	mov	r0, r9
 801ba6a:	6859      	ldr	r1, [r3, #4]
 801ba6c:	f001 ffc7 	bl	801d9fe <_Balloc>
 801ba70:	9005      	str	r0, [sp, #20]
 801ba72:	2800      	cmp	r0, #0
 801ba74:	f43f aef6 	beq.w	801b864 <_strtod_l+0x43c>
 801ba78:	9b07      	ldr	r3, [sp, #28]
 801ba7a:	691a      	ldr	r2, [r3, #16]
 801ba7c:	3202      	adds	r2, #2
 801ba7e:	f103 010c 	add.w	r1, r3, #12
 801ba82:	0092      	lsls	r2, r2, #2
 801ba84:	300c      	adds	r0, #12
 801ba86:	f7fe fbe3 	bl	801a250 <memcpy>
 801ba8a:	aa1e      	add	r2, sp, #120	; 0x78
 801ba8c:	a91d      	add	r1, sp, #116	; 0x74
 801ba8e:	ec4b ab10 	vmov	d0, sl, fp
 801ba92:	4648      	mov	r0, r9
 801ba94:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801ba98:	f002 faf2 	bl	801e080 <__d2b>
 801ba9c:	901c      	str	r0, [sp, #112]	; 0x70
 801ba9e:	2800      	cmp	r0, #0
 801baa0:	f43f aee0 	beq.w	801b864 <_strtod_l+0x43c>
 801baa4:	2101      	movs	r1, #1
 801baa6:	4648      	mov	r0, r9
 801baa8:	f002 f8bb 	bl	801dc22 <__i2b>
 801baac:	4680      	mov	r8, r0
 801baae:	2800      	cmp	r0, #0
 801bab0:	f43f aed8 	beq.w	801b864 <_strtod_l+0x43c>
 801bab4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801bab6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801bab8:	2e00      	cmp	r6, #0
 801baba:	bfab      	itete	ge
 801babc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801babe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801bac0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801bac2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801bac4:	bfac      	ite	ge
 801bac6:	18f7      	addge	r7, r6, r3
 801bac8:	1b9d      	sublt	r5, r3, r6
 801baca:	9b04      	ldr	r3, [sp, #16]
 801bacc:	1af6      	subs	r6, r6, r3
 801bace:	4416      	add	r6, r2
 801bad0:	4b63      	ldr	r3, [pc, #396]	; (801bc60 <_strtod_l+0x838>)
 801bad2:	3e01      	subs	r6, #1
 801bad4:	429e      	cmp	r6, r3
 801bad6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bada:	f280 80af 	bge.w	801bc3c <_strtod_l+0x814>
 801bade:	1b9b      	subs	r3, r3, r6
 801bae0:	2b1f      	cmp	r3, #31
 801bae2:	eba2 0203 	sub.w	r2, r2, r3
 801bae6:	f04f 0101 	mov.w	r1, #1
 801baea:	f300 809b 	bgt.w	801bc24 <_strtod_l+0x7fc>
 801baee:	fa01 f303 	lsl.w	r3, r1, r3
 801baf2:	930f      	str	r3, [sp, #60]	; 0x3c
 801baf4:	2300      	movs	r3, #0
 801baf6:	930a      	str	r3, [sp, #40]	; 0x28
 801baf8:	18be      	adds	r6, r7, r2
 801bafa:	9b04      	ldr	r3, [sp, #16]
 801bafc:	42b7      	cmp	r7, r6
 801bafe:	4415      	add	r5, r2
 801bb00:	441d      	add	r5, r3
 801bb02:	463b      	mov	r3, r7
 801bb04:	bfa8      	it	ge
 801bb06:	4633      	movge	r3, r6
 801bb08:	42ab      	cmp	r3, r5
 801bb0a:	bfa8      	it	ge
 801bb0c:	462b      	movge	r3, r5
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	bfc2      	ittt	gt
 801bb12:	1af6      	subgt	r6, r6, r3
 801bb14:	1aed      	subgt	r5, r5, r3
 801bb16:	1aff      	subgt	r7, r7, r3
 801bb18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb1a:	b1bb      	cbz	r3, 801bb4c <_strtod_l+0x724>
 801bb1c:	4641      	mov	r1, r8
 801bb1e:	461a      	mov	r2, r3
 801bb20:	4648      	mov	r0, r9
 801bb22:	f002 f91d 	bl	801dd60 <__pow5mult>
 801bb26:	4680      	mov	r8, r0
 801bb28:	2800      	cmp	r0, #0
 801bb2a:	f43f ae9b 	beq.w	801b864 <_strtod_l+0x43c>
 801bb2e:	4601      	mov	r1, r0
 801bb30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801bb32:	4648      	mov	r0, r9
 801bb34:	f002 f87e 	bl	801dc34 <__multiply>
 801bb38:	900c      	str	r0, [sp, #48]	; 0x30
 801bb3a:	2800      	cmp	r0, #0
 801bb3c:	f43f ae92 	beq.w	801b864 <_strtod_l+0x43c>
 801bb40:	991c      	ldr	r1, [sp, #112]	; 0x70
 801bb42:	4648      	mov	r0, r9
 801bb44:	f001 ff8f 	bl	801da66 <_Bfree>
 801bb48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb4a:	931c      	str	r3, [sp, #112]	; 0x70
 801bb4c:	2e00      	cmp	r6, #0
 801bb4e:	dc7a      	bgt.n	801bc46 <_strtod_l+0x81e>
 801bb50:	9b06      	ldr	r3, [sp, #24]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	dd08      	ble.n	801bb68 <_strtod_l+0x740>
 801bb56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bb58:	9905      	ldr	r1, [sp, #20]
 801bb5a:	4648      	mov	r0, r9
 801bb5c:	f002 f900 	bl	801dd60 <__pow5mult>
 801bb60:	9005      	str	r0, [sp, #20]
 801bb62:	2800      	cmp	r0, #0
 801bb64:	f43f ae7e 	beq.w	801b864 <_strtod_l+0x43c>
 801bb68:	2d00      	cmp	r5, #0
 801bb6a:	dd08      	ble.n	801bb7e <_strtod_l+0x756>
 801bb6c:	462a      	mov	r2, r5
 801bb6e:	9905      	ldr	r1, [sp, #20]
 801bb70:	4648      	mov	r0, r9
 801bb72:	f002 f943 	bl	801ddfc <__lshift>
 801bb76:	9005      	str	r0, [sp, #20]
 801bb78:	2800      	cmp	r0, #0
 801bb7a:	f43f ae73 	beq.w	801b864 <_strtod_l+0x43c>
 801bb7e:	2f00      	cmp	r7, #0
 801bb80:	dd08      	ble.n	801bb94 <_strtod_l+0x76c>
 801bb82:	4641      	mov	r1, r8
 801bb84:	463a      	mov	r2, r7
 801bb86:	4648      	mov	r0, r9
 801bb88:	f002 f938 	bl	801ddfc <__lshift>
 801bb8c:	4680      	mov	r8, r0
 801bb8e:	2800      	cmp	r0, #0
 801bb90:	f43f ae68 	beq.w	801b864 <_strtod_l+0x43c>
 801bb94:	9a05      	ldr	r2, [sp, #20]
 801bb96:	991c      	ldr	r1, [sp, #112]	; 0x70
 801bb98:	4648      	mov	r0, r9
 801bb9a:	f002 f99d 	bl	801ded8 <__mdiff>
 801bb9e:	4604      	mov	r4, r0
 801bba0:	2800      	cmp	r0, #0
 801bba2:	f43f ae5f 	beq.w	801b864 <_strtod_l+0x43c>
 801bba6:	68c3      	ldr	r3, [r0, #12]
 801bba8:	930c      	str	r3, [sp, #48]	; 0x30
 801bbaa:	2300      	movs	r3, #0
 801bbac:	60c3      	str	r3, [r0, #12]
 801bbae:	4641      	mov	r1, r8
 801bbb0:	f002 f978 	bl	801dea4 <__mcmp>
 801bbb4:	2800      	cmp	r0, #0
 801bbb6:	da55      	bge.n	801bc64 <_strtod_l+0x83c>
 801bbb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bbba:	b9e3      	cbnz	r3, 801bbf6 <_strtod_l+0x7ce>
 801bbbc:	f1ba 0f00 	cmp.w	sl, #0
 801bbc0:	d119      	bne.n	801bbf6 <_strtod_l+0x7ce>
 801bbc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bbc6:	b9b3      	cbnz	r3, 801bbf6 <_strtod_l+0x7ce>
 801bbc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bbcc:	0d1b      	lsrs	r3, r3, #20
 801bbce:	051b      	lsls	r3, r3, #20
 801bbd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801bbd4:	d90f      	bls.n	801bbf6 <_strtod_l+0x7ce>
 801bbd6:	6963      	ldr	r3, [r4, #20]
 801bbd8:	b913      	cbnz	r3, 801bbe0 <_strtod_l+0x7b8>
 801bbda:	6923      	ldr	r3, [r4, #16]
 801bbdc:	2b01      	cmp	r3, #1
 801bbde:	dd0a      	ble.n	801bbf6 <_strtod_l+0x7ce>
 801bbe0:	4621      	mov	r1, r4
 801bbe2:	2201      	movs	r2, #1
 801bbe4:	4648      	mov	r0, r9
 801bbe6:	f002 f909 	bl	801ddfc <__lshift>
 801bbea:	4641      	mov	r1, r8
 801bbec:	4604      	mov	r4, r0
 801bbee:	f002 f959 	bl	801dea4 <__mcmp>
 801bbf2:	2800      	cmp	r0, #0
 801bbf4:	dc67      	bgt.n	801bcc6 <_strtod_l+0x89e>
 801bbf6:	9b04      	ldr	r3, [sp, #16]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d171      	bne.n	801bce0 <_strtod_l+0x8b8>
 801bbfc:	e63d      	b.n	801b87a <_strtod_l+0x452>
 801bbfe:	f018 0f01 	tst.w	r8, #1
 801bc02:	d004      	beq.n	801bc0e <_strtod_l+0x7e6>
 801bc04:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bc08:	f7e4 fd06 	bl	8000618 <__aeabi_dmul>
 801bc0c:	2301      	movs	r3, #1
 801bc0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801bc12:	3508      	adds	r5, #8
 801bc14:	e6e5      	b.n	801b9e2 <_strtod_l+0x5ba>
 801bc16:	f04f 32ff 	mov.w	r2, #4294967295
 801bc1a:	fa02 f303 	lsl.w	r3, r2, r3
 801bc1e:	ea03 0a0a 	and.w	sl, r3, sl
 801bc22:	e6ff      	b.n	801ba24 <_strtod_l+0x5fc>
 801bc24:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801bc28:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801bc2c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801bc30:	36e2      	adds	r6, #226	; 0xe2
 801bc32:	fa01 f306 	lsl.w	r3, r1, r6
 801bc36:	930a      	str	r3, [sp, #40]	; 0x28
 801bc38:	910f      	str	r1, [sp, #60]	; 0x3c
 801bc3a:	e75d      	b.n	801baf8 <_strtod_l+0x6d0>
 801bc3c:	2300      	movs	r3, #0
 801bc3e:	930a      	str	r3, [sp, #40]	; 0x28
 801bc40:	2301      	movs	r3, #1
 801bc42:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc44:	e758      	b.n	801baf8 <_strtod_l+0x6d0>
 801bc46:	4632      	mov	r2, r6
 801bc48:	991c      	ldr	r1, [sp, #112]	; 0x70
 801bc4a:	4648      	mov	r0, r9
 801bc4c:	f002 f8d6 	bl	801ddfc <__lshift>
 801bc50:	901c      	str	r0, [sp, #112]	; 0x70
 801bc52:	2800      	cmp	r0, #0
 801bc54:	f47f af7c 	bne.w	801bb50 <_strtod_l+0x728>
 801bc58:	e604      	b.n	801b864 <_strtod_l+0x43c>
 801bc5a:	bf00      	nop
 801bc5c:	0801f520 	.word	0x0801f520
 801bc60:	fffffc02 	.word	0xfffffc02
 801bc64:	465d      	mov	r5, fp
 801bc66:	f040 8086 	bne.w	801bd76 <_strtod_l+0x94e>
 801bc6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bc70:	b32a      	cbz	r2, 801bcbe <_strtod_l+0x896>
 801bc72:	4aaf      	ldr	r2, [pc, #700]	; (801bf30 <_strtod_l+0xb08>)
 801bc74:	4293      	cmp	r3, r2
 801bc76:	d153      	bne.n	801bd20 <_strtod_l+0x8f8>
 801bc78:	9b04      	ldr	r3, [sp, #16]
 801bc7a:	4650      	mov	r0, sl
 801bc7c:	b1d3      	cbz	r3, 801bcb4 <_strtod_l+0x88c>
 801bc7e:	4aad      	ldr	r2, [pc, #692]	; (801bf34 <_strtod_l+0xb0c>)
 801bc80:	402a      	ands	r2, r5
 801bc82:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801bc86:	f04f 31ff 	mov.w	r1, #4294967295
 801bc8a:	d816      	bhi.n	801bcba <_strtod_l+0x892>
 801bc8c:	0d12      	lsrs	r2, r2, #20
 801bc8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801bc92:	fa01 f303 	lsl.w	r3, r1, r3
 801bc96:	4298      	cmp	r0, r3
 801bc98:	d142      	bne.n	801bd20 <_strtod_l+0x8f8>
 801bc9a:	4ba7      	ldr	r3, [pc, #668]	; (801bf38 <_strtod_l+0xb10>)
 801bc9c:	429d      	cmp	r5, r3
 801bc9e:	d102      	bne.n	801bca6 <_strtod_l+0x87e>
 801bca0:	3001      	adds	r0, #1
 801bca2:	f43f addf 	beq.w	801b864 <_strtod_l+0x43c>
 801bca6:	4ba3      	ldr	r3, [pc, #652]	; (801bf34 <_strtod_l+0xb0c>)
 801bca8:	402b      	ands	r3, r5
 801bcaa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801bcae:	f04f 0a00 	mov.w	sl, #0
 801bcb2:	e7a0      	b.n	801bbf6 <_strtod_l+0x7ce>
 801bcb4:	f04f 33ff 	mov.w	r3, #4294967295
 801bcb8:	e7ed      	b.n	801bc96 <_strtod_l+0x86e>
 801bcba:	460b      	mov	r3, r1
 801bcbc:	e7eb      	b.n	801bc96 <_strtod_l+0x86e>
 801bcbe:	bb7b      	cbnz	r3, 801bd20 <_strtod_l+0x8f8>
 801bcc0:	f1ba 0f00 	cmp.w	sl, #0
 801bcc4:	d12c      	bne.n	801bd20 <_strtod_l+0x8f8>
 801bcc6:	9904      	ldr	r1, [sp, #16]
 801bcc8:	4a9a      	ldr	r2, [pc, #616]	; (801bf34 <_strtod_l+0xb0c>)
 801bcca:	465b      	mov	r3, fp
 801bccc:	b1f1      	cbz	r1, 801bd0c <_strtod_l+0x8e4>
 801bcce:	ea02 010b 	and.w	r1, r2, fp
 801bcd2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801bcd6:	dc19      	bgt.n	801bd0c <_strtod_l+0x8e4>
 801bcd8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801bcdc:	f77f ae5b 	ble.w	801b996 <_strtod_l+0x56e>
 801bce0:	4a96      	ldr	r2, [pc, #600]	; (801bf3c <_strtod_l+0xb14>)
 801bce2:	2300      	movs	r3, #0
 801bce4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801bce8:	4650      	mov	r0, sl
 801bcea:	4659      	mov	r1, fp
 801bcec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801bcf0:	f7e4 fc92 	bl	8000618 <__aeabi_dmul>
 801bcf4:	4682      	mov	sl, r0
 801bcf6:	468b      	mov	fp, r1
 801bcf8:	2900      	cmp	r1, #0
 801bcfa:	f47f adbe 	bne.w	801b87a <_strtod_l+0x452>
 801bcfe:	2800      	cmp	r0, #0
 801bd00:	f47f adbb 	bne.w	801b87a <_strtod_l+0x452>
 801bd04:	2322      	movs	r3, #34	; 0x22
 801bd06:	f8c9 3000 	str.w	r3, [r9]
 801bd0a:	e5b6      	b.n	801b87a <_strtod_l+0x452>
 801bd0c:	4013      	ands	r3, r2
 801bd0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801bd12:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801bd16:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801bd1a:	f04f 3aff 	mov.w	sl, #4294967295
 801bd1e:	e76a      	b.n	801bbf6 <_strtod_l+0x7ce>
 801bd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd22:	b193      	cbz	r3, 801bd4a <_strtod_l+0x922>
 801bd24:	422b      	tst	r3, r5
 801bd26:	f43f af66 	beq.w	801bbf6 <_strtod_l+0x7ce>
 801bd2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd2c:	9a04      	ldr	r2, [sp, #16]
 801bd2e:	4650      	mov	r0, sl
 801bd30:	4659      	mov	r1, fp
 801bd32:	b173      	cbz	r3, 801bd52 <_strtod_l+0x92a>
 801bd34:	f7ff fb5c 	bl	801b3f0 <sulp>
 801bd38:	4602      	mov	r2, r0
 801bd3a:	460b      	mov	r3, r1
 801bd3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bd40:	f7e4 fab4 	bl	80002ac <__adddf3>
 801bd44:	4682      	mov	sl, r0
 801bd46:	468b      	mov	fp, r1
 801bd48:	e755      	b.n	801bbf6 <_strtod_l+0x7ce>
 801bd4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd4c:	ea13 0f0a 	tst.w	r3, sl
 801bd50:	e7e9      	b.n	801bd26 <_strtod_l+0x8fe>
 801bd52:	f7ff fb4d 	bl	801b3f0 <sulp>
 801bd56:	4602      	mov	r2, r0
 801bd58:	460b      	mov	r3, r1
 801bd5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bd5e:	f7e4 faa3 	bl	80002a8 <__aeabi_dsub>
 801bd62:	2200      	movs	r2, #0
 801bd64:	2300      	movs	r3, #0
 801bd66:	4682      	mov	sl, r0
 801bd68:	468b      	mov	fp, r1
 801bd6a:	f7e4 febd 	bl	8000ae8 <__aeabi_dcmpeq>
 801bd6e:	2800      	cmp	r0, #0
 801bd70:	f47f ae11 	bne.w	801b996 <_strtod_l+0x56e>
 801bd74:	e73f      	b.n	801bbf6 <_strtod_l+0x7ce>
 801bd76:	4641      	mov	r1, r8
 801bd78:	4620      	mov	r0, r4
 801bd7a:	f002 f9d0 	bl	801e11e <__ratio>
 801bd7e:	ec57 6b10 	vmov	r6, r7, d0
 801bd82:	2200      	movs	r2, #0
 801bd84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bd88:	ee10 0a10 	vmov	r0, s0
 801bd8c:	4639      	mov	r1, r7
 801bd8e:	f7e4 febf 	bl	8000b10 <__aeabi_dcmple>
 801bd92:	2800      	cmp	r0, #0
 801bd94:	d077      	beq.n	801be86 <_strtod_l+0xa5e>
 801bd96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d04a      	beq.n	801be32 <_strtod_l+0xa0a>
 801bd9c:	4b68      	ldr	r3, [pc, #416]	; (801bf40 <_strtod_l+0xb18>)
 801bd9e:	2200      	movs	r2, #0
 801bda0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801bda4:	4f66      	ldr	r7, [pc, #408]	; (801bf40 <_strtod_l+0xb18>)
 801bda6:	2600      	movs	r6, #0
 801bda8:	4b62      	ldr	r3, [pc, #392]	; (801bf34 <_strtod_l+0xb0c>)
 801bdaa:	402b      	ands	r3, r5
 801bdac:	930f      	str	r3, [sp, #60]	; 0x3c
 801bdae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bdb0:	4b64      	ldr	r3, [pc, #400]	; (801bf44 <_strtod_l+0xb1c>)
 801bdb2:	429a      	cmp	r2, r3
 801bdb4:	f040 80ce 	bne.w	801bf54 <_strtod_l+0xb2c>
 801bdb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bdbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bdc0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801bdc4:	ec4b ab10 	vmov	d0, sl, fp
 801bdc8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801bdcc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bdd0:	f002 f8e0 	bl	801df94 <__ulp>
 801bdd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bdd8:	ec53 2b10 	vmov	r2, r3, d0
 801bddc:	f7e4 fc1c 	bl	8000618 <__aeabi_dmul>
 801bde0:	4652      	mov	r2, sl
 801bde2:	465b      	mov	r3, fp
 801bde4:	f7e4 fa62 	bl	80002ac <__adddf3>
 801bde8:	460b      	mov	r3, r1
 801bdea:	4952      	ldr	r1, [pc, #328]	; (801bf34 <_strtod_l+0xb0c>)
 801bdec:	4a56      	ldr	r2, [pc, #344]	; (801bf48 <_strtod_l+0xb20>)
 801bdee:	4019      	ands	r1, r3
 801bdf0:	4291      	cmp	r1, r2
 801bdf2:	4682      	mov	sl, r0
 801bdf4:	d95b      	bls.n	801beae <_strtod_l+0xa86>
 801bdf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdf8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801bdfc:	4293      	cmp	r3, r2
 801bdfe:	d103      	bne.n	801be08 <_strtod_l+0x9e0>
 801be00:	9b08      	ldr	r3, [sp, #32]
 801be02:	3301      	adds	r3, #1
 801be04:	f43f ad2e 	beq.w	801b864 <_strtod_l+0x43c>
 801be08:	f8df b12c 	ldr.w	fp, [pc, #300]	; 801bf38 <_strtod_l+0xb10>
 801be0c:	f04f 3aff 	mov.w	sl, #4294967295
 801be10:	991c      	ldr	r1, [sp, #112]	; 0x70
 801be12:	4648      	mov	r0, r9
 801be14:	f001 fe27 	bl	801da66 <_Bfree>
 801be18:	9905      	ldr	r1, [sp, #20]
 801be1a:	4648      	mov	r0, r9
 801be1c:	f001 fe23 	bl	801da66 <_Bfree>
 801be20:	4641      	mov	r1, r8
 801be22:	4648      	mov	r0, r9
 801be24:	f001 fe1f 	bl	801da66 <_Bfree>
 801be28:	4621      	mov	r1, r4
 801be2a:	4648      	mov	r0, r9
 801be2c:	f001 fe1b 	bl	801da66 <_Bfree>
 801be30:	e619      	b.n	801ba66 <_strtod_l+0x63e>
 801be32:	f1ba 0f00 	cmp.w	sl, #0
 801be36:	d11a      	bne.n	801be6e <_strtod_l+0xa46>
 801be38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801be3c:	b9eb      	cbnz	r3, 801be7a <_strtod_l+0xa52>
 801be3e:	2200      	movs	r2, #0
 801be40:	4b3f      	ldr	r3, [pc, #252]	; (801bf40 <_strtod_l+0xb18>)
 801be42:	4630      	mov	r0, r6
 801be44:	4639      	mov	r1, r7
 801be46:	f7e4 fe59 	bl	8000afc <__aeabi_dcmplt>
 801be4a:	b9c8      	cbnz	r0, 801be80 <_strtod_l+0xa58>
 801be4c:	4630      	mov	r0, r6
 801be4e:	4639      	mov	r1, r7
 801be50:	2200      	movs	r2, #0
 801be52:	4b3e      	ldr	r3, [pc, #248]	; (801bf4c <_strtod_l+0xb24>)
 801be54:	f7e4 fbe0 	bl	8000618 <__aeabi_dmul>
 801be58:	4606      	mov	r6, r0
 801be5a:	460f      	mov	r7, r1
 801be5c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801be60:	9618      	str	r6, [sp, #96]	; 0x60
 801be62:	9319      	str	r3, [sp, #100]	; 0x64
 801be64:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801be68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801be6c:	e79c      	b.n	801bda8 <_strtod_l+0x980>
 801be6e:	f1ba 0f01 	cmp.w	sl, #1
 801be72:	d102      	bne.n	801be7a <_strtod_l+0xa52>
 801be74:	2d00      	cmp	r5, #0
 801be76:	f43f ad8e 	beq.w	801b996 <_strtod_l+0x56e>
 801be7a:	2200      	movs	r2, #0
 801be7c:	4b34      	ldr	r3, [pc, #208]	; (801bf50 <_strtod_l+0xb28>)
 801be7e:	e78f      	b.n	801bda0 <_strtod_l+0x978>
 801be80:	2600      	movs	r6, #0
 801be82:	4f32      	ldr	r7, [pc, #200]	; (801bf4c <_strtod_l+0xb24>)
 801be84:	e7ea      	b.n	801be5c <_strtod_l+0xa34>
 801be86:	4b31      	ldr	r3, [pc, #196]	; (801bf4c <_strtod_l+0xb24>)
 801be88:	4630      	mov	r0, r6
 801be8a:	4639      	mov	r1, r7
 801be8c:	2200      	movs	r2, #0
 801be8e:	f7e4 fbc3 	bl	8000618 <__aeabi_dmul>
 801be92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be94:	4606      	mov	r6, r0
 801be96:	460f      	mov	r7, r1
 801be98:	b933      	cbnz	r3, 801bea8 <_strtod_l+0xa80>
 801be9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801be9e:	9010      	str	r0, [sp, #64]	; 0x40
 801bea0:	9311      	str	r3, [sp, #68]	; 0x44
 801bea2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801bea6:	e7df      	b.n	801be68 <_strtod_l+0xa40>
 801bea8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801beac:	e7f9      	b.n	801bea2 <_strtod_l+0xa7a>
 801beae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801beb2:	9b04      	ldr	r3, [sp, #16]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d1ab      	bne.n	801be10 <_strtod_l+0x9e8>
 801beb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bebc:	0d1b      	lsrs	r3, r3, #20
 801bebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bec0:	051b      	lsls	r3, r3, #20
 801bec2:	429a      	cmp	r2, r3
 801bec4:	465d      	mov	r5, fp
 801bec6:	d1a3      	bne.n	801be10 <_strtod_l+0x9e8>
 801bec8:	4639      	mov	r1, r7
 801beca:	4630      	mov	r0, r6
 801becc:	f7e4 fe54 	bl	8000b78 <__aeabi_d2iz>
 801bed0:	f7e4 fb38 	bl	8000544 <__aeabi_i2d>
 801bed4:	460b      	mov	r3, r1
 801bed6:	4602      	mov	r2, r0
 801bed8:	4639      	mov	r1, r7
 801beda:	4630      	mov	r0, r6
 801bedc:	f7e4 f9e4 	bl	80002a8 <__aeabi_dsub>
 801bee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bee2:	4606      	mov	r6, r0
 801bee4:	460f      	mov	r7, r1
 801bee6:	b933      	cbnz	r3, 801bef6 <_strtod_l+0xace>
 801bee8:	f1ba 0f00 	cmp.w	sl, #0
 801beec:	d103      	bne.n	801bef6 <_strtod_l+0xace>
 801beee:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801bef2:	2d00      	cmp	r5, #0
 801bef4:	d06d      	beq.n	801bfd2 <_strtod_l+0xbaa>
 801bef6:	a30a      	add	r3, pc, #40	; (adr r3, 801bf20 <_strtod_l+0xaf8>)
 801bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801befc:	4630      	mov	r0, r6
 801befe:	4639      	mov	r1, r7
 801bf00:	f7e4 fdfc 	bl	8000afc <__aeabi_dcmplt>
 801bf04:	2800      	cmp	r0, #0
 801bf06:	f47f acb8 	bne.w	801b87a <_strtod_l+0x452>
 801bf0a:	a307      	add	r3, pc, #28	; (adr r3, 801bf28 <_strtod_l+0xb00>)
 801bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf10:	4630      	mov	r0, r6
 801bf12:	4639      	mov	r1, r7
 801bf14:	f7e4 fe10 	bl	8000b38 <__aeabi_dcmpgt>
 801bf18:	2800      	cmp	r0, #0
 801bf1a:	f43f af79 	beq.w	801be10 <_strtod_l+0x9e8>
 801bf1e:	e4ac      	b.n	801b87a <_strtod_l+0x452>
 801bf20:	94a03595 	.word	0x94a03595
 801bf24:	3fdfffff 	.word	0x3fdfffff
 801bf28:	35afe535 	.word	0x35afe535
 801bf2c:	3fe00000 	.word	0x3fe00000
 801bf30:	000fffff 	.word	0x000fffff
 801bf34:	7ff00000 	.word	0x7ff00000
 801bf38:	7fefffff 	.word	0x7fefffff
 801bf3c:	39500000 	.word	0x39500000
 801bf40:	3ff00000 	.word	0x3ff00000
 801bf44:	7fe00000 	.word	0x7fe00000
 801bf48:	7c9fffff 	.word	0x7c9fffff
 801bf4c:	3fe00000 	.word	0x3fe00000
 801bf50:	bff00000 	.word	0xbff00000
 801bf54:	9b04      	ldr	r3, [sp, #16]
 801bf56:	b333      	cbz	r3, 801bfa6 <_strtod_l+0xb7e>
 801bf58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bf5a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801bf5e:	d822      	bhi.n	801bfa6 <_strtod_l+0xb7e>
 801bf60:	a327      	add	r3, pc, #156	; (adr r3, 801c000 <_strtod_l+0xbd8>)
 801bf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf66:	4630      	mov	r0, r6
 801bf68:	4639      	mov	r1, r7
 801bf6a:	f7e4 fdd1 	bl	8000b10 <__aeabi_dcmple>
 801bf6e:	b1a0      	cbz	r0, 801bf9a <_strtod_l+0xb72>
 801bf70:	4639      	mov	r1, r7
 801bf72:	4630      	mov	r0, r6
 801bf74:	f7e4 fe28 	bl	8000bc8 <__aeabi_d2uiz>
 801bf78:	2800      	cmp	r0, #0
 801bf7a:	bf08      	it	eq
 801bf7c:	2001      	moveq	r0, #1
 801bf7e:	f7e4 fad1 	bl	8000524 <__aeabi_ui2d>
 801bf82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf84:	4606      	mov	r6, r0
 801bf86:	460f      	mov	r7, r1
 801bf88:	bb03      	cbnz	r3, 801bfcc <_strtod_l+0xba4>
 801bf8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bf8e:	9012      	str	r0, [sp, #72]	; 0x48
 801bf90:	9313      	str	r3, [sp, #76]	; 0x4c
 801bf92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801bf96:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801bf9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf9e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801bfa2:	1a9b      	subs	r3, r3, r2
 801bfa4:	930b      	str	r3, [sp, #44]	; 0x2c
 801bfa6:	ed9d 0b08 	vldr	d0, [sp, #32]
 801bfaa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801bfae:	f001 fff1 	bl	801df94 <__ulp>
 801bfb2:	4650      	mov	r0, sl
 801bfb4:	ec53 2b10 	vmov	r2, r3, d0
 801bfb8:	4659      	mov	r1, fp
 801bfba:	f7e4 fb2d 	bl	8000618 <__aeabi_dmul>
 801bfbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bfc2:	f7e4 f973 	bl	80002ac <__adddf3>
 801bfc6:	4682      	mov	sl, r0
 801bfc8:	468b      	mov	fp, r1
 801bfca:	e772      	b.n	801beb2 <_strtod_l+0xa8a>
 801bfcc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 801bfd0:	e7df      	b.n	801bf92 <_strtod_l+0xb6a>
 801bfd2:	a30d      	add	r3, pc, #52	; (adr r3, 801c008 <_strtod_l+0xbe0>)
 801bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfd8:	f7e4 fd90 	bl	8000afc <__aeabi_dcmplt>
 801bfdc:	e79c      	b.n	801bf18 <_strtod_l+0xaf0>
 801bfde:	2300      	movs	r3, #0
 801bfe0:	930d      	str	r3, [sp, #52]	; 0x34
 801bfe2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801bfe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801bfe6:	6013      	str	r3, [r2, #0]
 801bfe8:	f7ff ba61 	b.w	801b4ae <_strtod_l+0x86>
 801bfec:	2b65      	cmp	r3, #101	; 0x65
 801bfee:	f04f 0200 	mov.w	r2, #0
 801bff2:	f43f ab4e 	beq.w	801b692 <_strtod_l+0x26a>
 801bff6:	2101      	movs	r1, #1
 801bff8:	4614      	mov	r4, r2
 801bffa:	9104      	str	r1, [sp, #16]
 801bffc:	f7ff bacb 	b.w	801b596 <_strtod_l+0x16e>
 801c000:	ffc00000 	.word	0xffc00000
 801c004:	41dfffff 	.word	0x41dfffff
 801c008:	94a03595 	.word	0x94a03595
 801c00c:	3fcfffff 	.word	0x3fcfffff

0801c010 <_strtod_r>:
 801c010:	4b05      	ldr	r3, [pc, #20]	; (801c028 <_strtod_r+0x18>)
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	b410      	push	{r4}
 801c016:	6a1b      	ldr	r3, [r3, #32]
 801c018:	4c04      	ldr	r4, [pc, #16]	; (801c02c <_strtod_r+0x1c>)
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	bf08      	it	eq
 801c01e:	4623      	moveq	r3, r4
 801c020:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c024:	f7ff ba00 	b.w	801b428 <_strtod_l>
 801c028:	2000011c 	.word	0x2000011c
 801c02c:	20000180 	.word	0x20000180

0801c030 <_strtol_l.isra.0>:
 801c030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c034:	4680      	mov	r8, r0
 801c036:	4689      	mov	r9, r1
 801c038:	4692      	mov	sl, r2
 801c03a:	461e      	mov	r6, r3
 801c03c:	460f      	mov	r7, r1
 801c03e:	463d      	mov	r5, r7
 801c040:	9808      	ldr	r0, [sp, #32]
 801c042:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c046:	f001 fc2f 	bl	801d8a8 <__locale_ctype_ptr_l>
 801c04a:	4420      	add	r0, r4
 801c04c:	7843      	ldrb	r3, [r0, #1]
 801c04e:	f013 0308 	ands.w	r3, r3, #8
 801c052:	d132      	bne.n	801c0ba <_strtol_l.isra.0+0x8a>
 801c054:	2c2d      	cmp	r4, #45	; 0x2d
 801c056:	d132      	bne.n	801c0be <_strtol_l.isra.0+0x8e>
 801c058:	787c      	ldrb	r4, [r7, #1]
 801c05a:	1cbd      	adds	r5, r7, #2
 801c05c:	2201      	movs	r2, #1
 801c05e:	2e00      	cmp	r6, #0
 801c060:	d05d      	beq.n	801c11e <_strtol_l.isra.0+0xee>
 801c062:	2e10      	cmp	r6, #16
 801c064:	d109      	bne.n	801c07a <_strtol_l.isra.0+0x4a>
 801c066:	2c30      	cmp	r4, #48	; 0x30
 801c068:	d107      	bne.n	801c07a <_strtol_l.isra.0+0x4a>
 801c06a:	782b      	ldrb	r3, [r5, #0]
 801c06c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c070:	2b58      	cmp	r3, #88	; 0x58
 801c072:	d14f      	bne.n	801c114 <_strtol_l.isra.0+0xe4>
 801c074:	786c      	ldrb	r4, [r5, #1]
 801c076:	2610      	movs	r6, #16
 801c078:	3502      	adds	r5, #2
 801c07a:	2a00      	cmp	r2, #0
 801c07c:	bf14      	ite	ne
 801c07e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801c082:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801c086:	2700      	movs	r7, #0
 801c088:	fbb1 fcf6 	udiv	ip, r1, r6
 801c08c:	4638      	mov	r0, r7
 801c08e:	fb06 1e1c 	mls	lr, r6, ip, r1
 801c092:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801c096:	2b09      	cmp	r3, #9
 801c098:	d817      	bhi.n	801c0ca <_strtol_l.isra.0+0x9a>
 801c09a:	461c      	mov	r4, r3
 801c09c:	42a6      	cmp	r6, r4
 801c09e:	dd23      	ble.n	801c0e8 <_strtol_l.isra.0+0xb8>
 801c0a0:	1c7b      	adds	r3, r7, #1
 801c0a2:	d007      	beq.n	801c0b4 <_strtol_l.isra.0+0x84>
 801c0a4:	4584      	cmp	ip, r0
 801c0a6:	d31c      	bcc.n	801c0e2 <_strtol_l.isra.0+0xb2>
 801c0a8:	d101      	bne.n	801c0ae <_strtol_l.isra.0+0x7e>
 801c0aa:	45a6      	cmp	lr, r4
 801c0ac:	db19      	blt.n	801c0e2 <_strtol_l.isra.0+0xb2>
 801c0ae:	fb00 4006 	mla	r0, r0, r6, r4
 801c0b2:	2701      	movs	r7, #1
 801c0b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c0b8:	e7eb      	b.n	801c092 <_strtol_l.isra.0+0x62>
 801c0ba:	462f      	mov	r7, r5
 801c0bc:	e7bf      	b.n	801c03e <_strtol_l.isra.0+0xe>
 801c0be:	2c2b      	cmp	r4, #43	; 0x2b
 801c0c0:	bf04      	itt	eq
 801c0c2:	1cbd      	addeq	r5, r7, #2
 801c0c4:	787c      	ldrbeq	r4, [r7, #1]
 801c0c6:	461a      	mov	r2, r3
 801c0c8:	e7c9      	b.n	801c05e <_strtol_l.isra.0+0x2e>
 801c0ca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801c0ce:	2b19      	cmp	r3, #25
 801c0d0:	d801      	bhi.n	801c0d6 <_strtol_l.isra.0+0xa6>
 801c0d2:	3c37      	subs	r4, #55	; 0x37
 801c0d4:	e7e2      	b.n	801c09c <_strtol_l.isra.0+0x6c>
 801c0d6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801c0da:	2b19      	cmp	r3, #25
 801c0dc:	d804      	bhi.n	801c0e8 <_strtol_l.isra.0+0xb8>
 801c0de:	3c57      	subs	r4, #87	; 0x57
 801c0e0:	e7dc      	b.n	801c09c <_strtol_l.isra.0+0x6c>
 801c0e2:	f04f 37ff 	mov.w	r7, #4294967295
 801c0e6:	e7e5      	b.n	801c0b4 <_strtol_l.isra.0+0x84>
 801c0e8:	1c7b      	adds	r3, r7, #1
 801c0ea:	d108      	bne.n	801c0fe <_strtol_l.isra.0+0xce>
 801c0ec:	2322      	movs	r3, #34	; 0x22
 801c0ee:	f8c8 3000 	str.w	r3, [r8]
 801c0f2:	4608      	mov	r0, r1
 801c0f4:	f1ba 0f00 	cmp.w	sl, #0
 801c0f8:	d107      	bne.n	801c10a <_strtol_l.isra.0+0xda>
 801c0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c0fe:	b102      	cbz	r2, 801c102 <_strtol_l.isra.0+0xd2>
 801c100:	4240      	negs	r0, r0
 801c102:	f1ba 0f00 	cmp.w	sl, #0
 801c106:	d0f8      	beq.n	801c0fa <_strtol_l.isra.0+0xca>
 801c108:	b10f      	cbz	r7, 801c10e <_strtol_l.isra.0+0xde>
 801c10a:	f105 39ff 	add.w	r9, r5, #4294967295
 801c10e:	f8ca 9000 	str.w	r9, [sl]
 801c112:	e7f2      	b.n	801c0fa <_strtol_l.isra.0+0xca>
 801c114:	2430      	movs	r4, #48	; 0x30
 801c116:	2e00      	cmp	r6, #0
 801c118:	d1af      	bne.n	801c07a <_strtol_l.isra.0+0x4a>
 801c11a:	2608      	movs	r6, #8
 801c11c:	e7ad      	b.n	801c07a <_strtol_l.isra.0+0x4a>
 801c11e:	2c30      	cmp	r4, #48	; 0x30
 801c120:	d0a3      	beq.n	801c06a <_strtol_l.isra.0+0x3a>
 801c122:	260a      	movs	r6, #10
 801c124:	e7a9      	b.n	801c07a <_strtol_l.isra.0+0x4a>
	...

0801c128 <_strtol_r>:
 801c128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c12a:	4c06      	ldr	r4, [pc, #24]	; (801c144 <_strtol_r+0x1c>)
 801c12c:	4d06      	ldr	r5, [pc, #24]	; (801c148 <_strtol_r+0x20>)
 801c12e:	6824      	ldr	r4, [r4, #0]
 801c130:	6a24      	ldr	r4, [r4, #32]
 801c132:	2c00      	cmp	r4, #0
 801c134:	bf08      	it	eq
 801c136:	462c      	moveq	r4, r5
 801c138:	9400      	str	r4, [sp, #0]
 801c13a:	f7ff ff79 	bl	801c030 <_strtol_l.isra.0>
 801c13e:	b003      	add	sp, #12
 801c140:	bd30      	pop	{r4, r5, pc}
 801c142:	bf00      	nop
 801c144:	2000011c 	.word	0x2000011c
 801c148:	20000180 	.word	0x20000180

0801c14c <__swbuf_r>:
 801c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c14e:	460e      	mov	r6, r1
 801c150:	4614      	mov	r4, r2
 801c152:	4605      	mov	r5, r0
 801c154:	b118      	cbz	r0, 801c15e <__swbuf_r+0x12>
 801c156:	6983      	ldr	r3, [r0, #24]
 801c158:	b90b      	cbnz	r3, 801c15e <__swbuf_r+0x12>
 801c15a:	f000 fff5 	bl	801d148 <__sinit>
 801c15e:	4b21      	ldr	r3, [pc, #132]	; (801c1e4 <__swbuf_r+0x98>)
 801c160:	429c      	cmp	r4, r3
 801c162:	d12a      	bne.n	801c1ba <__swbuf_r+0x6e>
 801c164:	686c      	ldr	r4, [r5, #4]
 801c166:	69a3      	ldr	r3, [r4, #24]
 801c168:	60a3      	str	r3, [r4, #8]
 801c16a:	89a3      	ldrh	r3, [r4, #12]
 801c16c:	071a      	lsls	r2, r3, #28
 801c16e:	d52e      	bpl.n	801c1ce <__swbuf_r+0x82>
 801c170:	6923      	ldr	r3, [r4, #16]
 801c172:	b363      	cbz	r3, 801c1ce <__swbuf_r+0x82>
 801c174:	6923      	ldr	r3, [r4, #16]
 801c176:	6820      	ldr	r0, [r4, #0]
 801c178:	1ac0      	subs	r0, r0, r3
 801c17a:	6963      	ldr	r3, [r4, #20]
 801c17c:	b2f6      	uxtb	r6, r6
 801c17e:	4283      	cmp	r3, r0
 801c180:	4637      	mov	r7, r6
 801c182:	dc04      	bgt.n	801c18e <__swbuf_r+0x42>
 801c184:	4621      	mov	r1, r4
 801c186:	4628      	mov	r0, r5
 801c188:	f000 ff74 	bl	801d074 <_fflush_r>
 801c18c:	bb28      	cbnz	r0, 801c1da <__swbuf_r+0x8e>
 801c18e:	68a3      	ldr	r3, [r4, #8]
 801c190:	3b01      	subs	r3, #1
 801c192:	60a3      	str	r3, [r4, #8]
 801c194:	6823      	ldr	r3, [r4, #0]
 801c196:	1c5a      	adds	r2, r3, #1
 801c198:	6022      	str	r2, [r4, #0]
 801c19a:	701e      	strb	r6, [r3, #0]
 801c19c:	6963      	ldr	r3, [r4, #20]
 801c19e:	3001      	adds	r0, #1
 801c1a0:	4283      	cmp	r3, r0
 801c1a2:	d004      	beq.n	801c1ae <__swbuf_r+0x62>
 801c1a4:	89a3      	ldrh	r3, [r4, #12]
 801c1a6:	07db      	lsls	r3, r3, #31
 801c1a8:	d519      	bpl.n	801c1de <__swbuf_r+0x92>
 801c1aa:	2e0a      	cmp	r6, #10
 801c1ac:	d117      	bne.n	801c1de <__swbuf_r+0x92>
 801c1ae:	4621      	mov	r1, r4
 801c1b0:	4628      	mov	r0, r5
 801c1b2:	f000 ff5f 	bl	801d074 <_fflush_r>
 801c1b6:	b190      	cbz	r0, 801c1de <__swbuf_r+0x92>
 801c1b8:	e00f      	b.n	801c1da <__swbuf_r+0x8e>
 801c1ba:	4b0b      	ldr	r3, [pc, #44]	; (801c1e8 <__swbuf_r+0x9c>)
 801c1bc:	429c      	cmp	r4, r3
 801c1be:	d101      	bne.n	801c1c4 <__swbuf_r+0x78>
 801c1c0:	68ac      	ldr	r4, [r5, #8]
 801c1c2:	e7d0      	b.n	801c166 <__swbuf_r+0x1a>
 801c1c4:	4b09      	ldr	r3, [pc, #36]	; (801c1ec <__swbuf_r+0xa0>)
 801c1c6:	429c      	cmp	r4, r3
 801c1c8:	bf08      	it	eq
 801c1ca:	68ec      	ldreq	r4, [r5, #12]
 801c1cc:	e7cb      	b.n	801c166 <__swbuf_r+0x1a>
 801c1ce:	4621      	mov	r1, r4
 801c1d0:	4628      	mov	r0, r5
 801c1d2:	f000 f80d 	bl	801c1f0 <__swsetup_r>
 801c1d6:	2800      	cmp	r0, #0
 801c1d8:	d0cc      	beq.n	801c174 <__swbuf_r+0x28>
 801c1da:	f04f 37ff 	mov.w	r7, #4294967295
 801c1de:	4638      	mov	r0, r7
 801c1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1e2:	bf00      	nop
 801c1e4:	0801f578 	.word	0x0801f578
 801c1e8:	0801f598 	.word	0x0801f598
 801c1ec:	0801f558 	.word	0x0801f558

0801c1f0 <__swsetup_r>:
 801c1f0:	4b32      	ldr	r3, [pc, #200]	; (801c2bc <__swsetup_r+0xcc>)
 801c1f2:	b570      	push	{r4, r5, r6, lr}
 801c1f4:	681d      	ldr	r5, [r3, #0]
 801c1f6:	4606      	mov	r6, r0
 801c1f8:	460c      	mov	r4, r1
 801c1fa:	b125      	cbz	r5, 801c206 <__swsetup_r+0x16>
 801c1fc:	69ab      	ldr	r3, [r5, #24]
 801c1fe:	b913      	cbnz	r3, 801c206 <__swsetup_r+0x16>
 801c200:	4628      	mov	r0, r5
 801c202:	f000 ffa1 	bl	801d148 <__sinit>
 801c206:	4b2e      	ldr	r3, [pc, #184]	; (801c2c0 <__swsetup_r+0xd0>)
 801c208:	429c      	cmp	r4, r3
 801c20a:	d10f      	bne.n	801c22c <__swsetup_r+0x3c>
 801c20c:	686c      	ldr	r4, [r5, #4]
 801c20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c212:	b29a      	uxth	r2, r3
 801c214:	0715      	lsls	r5, r2, #28
 801c216:	d42c      	bmi.n	801c272 <__swsetup_r+0x82>
 801c218:	06d0      	lsls	r0, r2, #27
 801c21a:	d411      	bmi.n	801c240 <__swsetup_r+0x50>
 801c21c:	2209      	movs	r2, #9
 801c21e:	6032      	str	r2, [r6, #0]
 801c220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c224:	81a3      	strh	r3, [r4, #12]
 801c226:	f04f 30ff 	mov.w	r0, #4294967295
 801c22a:	e03e      	b.n	801c2aa <__swsetup_r+0xba>
 801c22c:	4b25      	ldr	r3, [pc, #148]	; (801c2c4 <__swsetup_r+0xd4>)
 801c22e:	429c      	cmp	r4, r3
 801c230:	d101      	bne.n	801c236 <__swsetup_r+0x46>
 801c232:	68ac      	ldr	r4, [r5, #8]
 801c234:	e7eb      	b.n	801c20e <__swsetup_r+0x1e>
 801c236:	4b24      	ldr	r3, [pc, #144]	; (801c2c8 <__swsetup_r+0xd8>)
 801c238:	429c      	cmp	r4, r3
 801c23a:	bf08      	it	eq
 801c23c:	68ec      	ldreq	r4, [r5, #12]
 801c23e:	e7e6      	b.n	801c20e <__swsetup_r+0x1e>
 801c240:	0751      	lsls	r1, r2, #29
 801c242:	d512      	bpl.n	801c26a <__swsetup_r+0x7a>
 801c244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c246:	b141      	cbz	r1, 801c25a <__swsetup_r+0x6a>
 801c248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c24c:	4299      	cmp	r1, r3
 801c24e:	d002      	beq.n	801c256 <__swsetup_r+0x66>
 801c250:	4630      	mov	r0, r6
 801c252:	f001 ffe1 	bl	801e218 <_free_r>
 801c256:	2300      	movs	r3, #0
 801c258:	6363      	str	r3, [r4, #52]	; 0x34
 801c25a:	89a3      	ldrh	r3, [r4, #12]
 801c25c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c260:	81a3      	strh	r3, [r4, #12]
 801c262:	2300      	movs	r3, #0
 801c264:	6063      	str	r3, [r4, #4]
 801c266:	6923      	ldr	r3, [r4, #16]
 801c268:	6023      	str	r3, [r4, #0]
 801c26a:	89a3      	ldrh	r3, [r4, #12]
 801c26c:	f043 0308 	orr.w	r3, r3, #8
 801c270:	81a3      	strh	r3, [r4, #12]
 801c272:	6923      	ldr	r3, [r4, #16]
 801c274:	b94b      	cbnz	r3, 801c28a <__swsetup_r+0x9a>
 801c276:	89a3      	ldrh	r3, [r4, #12]
 801c278:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c27c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c280:	d003      	beq.n	801c28a <__swsetup_r+0x9a>
 801c282:	4621      	mov	r1, r4
 801c284:	4630      	mov	r0, r6
 801c286:	f001 fb47 	bl	801d918 <__smakebuf_r>
 801c28a:	89a2      	ldrh	r2, [r4, #12]
 801c28c:	f012 0301 	ands.w	r3, r2, #1
 801c290:	d00c      	beq.n	801c2ac <__swsetup_r+0xbc>
 801c292:	2300      	movs	r3, #0
 801c294:	60a3      	str	r3, [r4, #8]
 801c296:	6963      	ldr	r3, [r4, #20]
 801c298:	425b      	negs	r3, r3
 801c29a:	61a3      	str	r3, [r4, #24]
 801c29c:	6923      	ldr	r3, [r4, #16]
 801c29e:	b953      	cbnz	r3, 801c2b6 <__swsetup_r+0xc6>
 801c2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c2a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801c2a8:	d1ba      	bne.n	801c220 <__swsetup_r+0x30>
 801c2aa:	bd70      	pop	{r4, r5, r6, pc}
 801c2ac:	0792      	lsls	r2, r2, #30
 801c2ae:	bf58      	it	pl
 801c2b0:	6963      	ldrpl	r3, [r4, #20]
 801c2b2:	60a3      	str	r3, [r4, #8]
 801c2b4:	e7f2      	b.n	801c29c <__swsetup_r+0xac>
 801c2b6:	2000      	movs	r0, #0
 801c2b8:	e7f7      	b.n	801c2aa <__swsetup_r+0xba>
 801c2ba:	bf00      	nop
 801c2bc:	2000011c 	.word	0x2000011c
 801c2c0:	0801f578 	.word	0x0801f578
 801c2c4:	0801f598 	.word	0x0801f598
 801c2c8:	0801f558 	.word	0x0801f558

0801c2cc <abort>:
 801c2cc:	b508      	push	{r3, lr}
 801c2ce:	2006      	movs	r0, #6
 801c2d0:	f002 f9fa 	bl	801e6c8 <raise>
 801c2d4:	2001      	movs	r0, #1
 801c2d6:	f7ec fa3f 	bl	8008758 <_exit>

0801c2da <quorem>:
 801c2da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2de:	6903      	ldr	r3, [r0, #16]
 801c2e0:	690c      	ldr	r4, [r1, #16]
 801c2e2:	42a3      	cmp	r3, r4
 801c2e4:	4680      	mov	r8, r0
 801c2e6:	f2c0 8082 	blt.w	801c3ee <quorem+0x114>
 801c2ea:	3c01      	subs	r4, #1
 801c2ec:	f101 0714 	add.w	r7, r1, #20
 801c2f0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801c2f4:	f100 0614 	add.w	r6, r0, #20
 801c2f8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801c2fc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801c300:	eb06 030c 	add.w	r3, r6, ip
 801c304:	3501      	adds	r5, #1
 801c306:	eb07 090c 	add.w	r9, r7, ip
 801c30a:	9301      	str	r3, [sp, #4]
 801c30c:	fbb0 f5f5 	udiv	r5, r0, r5
 801c310:	b395      	cbz	r5, 801c378 <quorem+0x9e>
 801c312:	f04f 0a00 	mov.w	sl, #0
 801c316:	4638      	mov	r0, r7
 801c318:	46b6      	mov	lr, r6
 801c31a:	46d3      	mov	fp, sl
 801c31c:	f850 2b04 	ldr.w	r2, [r0], #4
 801c320:	b293      	uxth	r3, r2
 801c322:	fb05 a303 	mla	r3, r5, r3, sl
 801c326:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c32a:	b29b      	uxth	r3, r3
 801c32c:	ebab 0303 	sub.w	r3, fp, r3
 801c330:	0c12      	lsrs	r2, r2, #16
 801c332:	f8de b000 	ldr.w	fp, [lr]
 801c336:	fb05 a202 	mla	r2, r5, r2, sl
 801c33a:	fa13 f38b 	uxtah	r3, r3, fp
 801c33e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801c342:	fa1f fb82 	uxth.w	fp, r2
 801c346:	f8de 2000 	ldr.w	r2, [lr]
 801c34a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801c34e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c352:	b29b      	uxth	r3, r3
 801c354:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c358:	4581      	cmp	r9, r0
 801c35a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801c35e:	f84e 3b04 	str.w	r3, [lr], #4
 801c362:	d2db      	bcs.n	801c31c <quorem+0x42>
 801c364:	f856 300c 	ldr.w	r3, [r6, ip]
 801c368:	b933      	cbnz	r3, 801c378 <quorem+0x9e>
 801c36a:	9b01      	ldr	r3, [sp, #4]
 801c36c:	3b04      	subs	r3, #4
 801c36e:	429e      	cmp	r6, r3
 801c370:	461a      	mov	r2, r3
 801c372:	d330      	bcc.n	801c3d6 <quorem+0xfc>
 801c374:	f8c8 4010 	str.w	r4, [r8, #16]
 801c378:	4640      	mov	r0, r8
 801c37a:	f001 fd93 	bl	801dea4 <__mcmp>
 801c37e:	2800      	cmp	r0, #0
 801c380:	db25      	blt.n	801c3ce <quorem+0xf4>
 801c382:	3501      	adds	r5, #1
 801c384:	4630      	mov	r0, r6
 801c386:	f04f 0c00 	mov.w	ip, #0
 801c38a:	f857 2b04 	ldr.w	r2, [r7], #4
 801c38e:	f8d0 e000 	ldr.w	lr, [r0]
 801c392:	b293      	uxth	r3, r2
 801c394:	ebac 0303 	sub.w	r3, ip, r3
 801c398:	0c12      	lsrs	r2, r2, #16
 801c39a:	fa13 f38e 	uxtah	r3, r3, lr
 801c39e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c3a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c3a6:	b29b      	uxth	r3, r3
 801c3a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c3ac:	45b9      	cmp	r9, r7
 801c3ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c3b2:	f840 3b04 	str.w	r3, [r0], #4
 801c3b6:	d2e8      	bcs.n	801c38a <quorem+0xb0>
 801c3b8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801c3bc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801c3c0:	b92a      	cbnz	r2, 801c3ce <quorem+0xf4>
 801c3c2:	3b04      	subs	r3, #4
 801c3c4:	429e      	cmp	r6, r3
 801c3c6:	461a      	mov	r2, r3
 801c3c8:	d30b      	bcc.n	801c3e2 <quorem+0x108>
 801c3ca:	f8c8 4010 	str.w	r4, [r8, #16]
 801c3ce:	4628      	mov	r0, r5
 801c3d0:	b003      	add	sp, #12
 801c3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3d6:	6812      	ldr	r2, [r2, #0]
 801c3d8:	3b04      	subs	r3, #4
 801c3da:	2a00      	cmp	r2, #0
 801c3dc:	d1ca      	bne.n	801c374 <quorem+0x9a>
 801c3de:	3c01      	subs	r4, #1
 801c3e0:	e7c5      	b.n	801c36e <quorem+0x94>
 801c3e2:	6812      	ldr	r2, [r2, #0]
 801c3e4:	3b04      	subs	r3, #4
 801c3e6:	2a00      	cmp	r2, #0
 801c3e8:	d1ef      	bne.n	801c3ca <quorem+0xf0>
 801c3ea:	3c01      	subs	r4, #1
 801c3ec:	e7ea      	b.n	801c3c4 <quorem+0xea>
 801c3ee:	2000      	movs	r0, #0
 801c3f0:	e7ee      	b.n	801c3d0 <quorem+0xf6>
 801c3f2:	0000      	movs	r0, r0
 801c3f4:	0000      	movs	r0, r0
	...

0801c3f8 <_dtoa_r>:
 801c3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3fc:	ec57 6b10 	vmov	r6, r7, d0
 801c400:	b097      	sub	sp, #92	; 0x5c
 801c402:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c404:	9106      	str	r1, [sp, #24]
 801c406:	4604      	mov	r4, r0
 801c408:	920b      	str	r2, [sp, #44]	; 0x2c
 801c40a:	9312      	str	r3, [sp, #72]	; 0x48
 801c40c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c410:	e9cd 6700 	strd	r6, r7, [sp]
 801c414:	b93d      	cbnz	r5, 801c426 <_dtoa_r+0x2e>
 801c416:	2010      	movs	r0, #16
 801c418:	f001 fabe 	bl	801d998 <malloc>
 801c41c:	6260      	str	r0, [r4, #36]	; 0x24
 801c41e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c422:	6005      	str	r5, [r0, #0]
 801c424:	60c5      	str	r5, [r0, #12]
 801c426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c428:	6819      	ldr	r1, [r3, #0]
 801c42a:	b151      	cbz	r1, 801c442 <_dtoa_r+0x4a>
 801c42c:	685a      	ldr	r2, [r3, #4]
 801c42e:	604a      	str	r2, [r1, #4]
 801c430:	2301      	movs	r3, #1
 801c432:	4093      	lsls	r3, r2
 801c434:	608b      	str	r3, [r1, #8]
 801c436:	4620      	mov	r0, r4
 801c438:	f001 fb15 	bl	801da66 <_Bfree>
 801c43c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c43e:	2200      	movs	r2, #0
 801c440:	601a      	str	r2, [r3, #0]
 801c442:	1e3b      	subs	r3, r7, #0
 801c444:	bfbb      	ittet	lt
 801c446:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c44a:	9301      	strlt	r3, [sp, #4]
 801c44c:	2300      	movge	r3, #0
 801c44e:	2201      	movlt	r2, #1
 801c450:	bfac      	ite	ge
 801c452:	f8c8 3000 	strge.w	r3, [r8]
 801c456:	f8c8 2000 	strlt.w	r2, [r8]
 801c45a:	4baf      	ldr	r3, [pc, #700]	; (801c718 <_dtoa_r+0x320>)
 801c45c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c460:	ea33 0308 	bics.w	r3, r3, r8
 801c464:	d114      	bne.n	801c490 <_dtoa_r+0x98>
 801c466:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c468:	f242 730f 	movw	r3, #9999	; 0x270f
 801c46c:	6013      	str	r3, [r2, #0]
 801c46e:	9b00      	ldr	r3, [sp, #0]
 801c470:	b923      	cbnz	r3, 801c47c <_dtoa_r+0x84>
 801c472:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801c476:	2800      	cmp	r0, #0
 801c478:	f000 8542 	beq.w	801cf00 <_dtoa_r+0xb08>
 801c47c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c47e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801c72c <_dtoa_r+0x334>
 801c482:	2b00      	cmp	r3, #0
 801c484:	f000 8544 	beq.w	801cf10 <_dtoa_r+0xb18>
 801c488:	f10b 0303 	add.w	r3, fp, #3
 801c48c:	f000 bd3e 	b.w	801cf0c <_dtoa_r+0xb14>
 801c490:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c494:	2200      	movs	r2, #0
 801c496:	2300      	movs	r3, #0
 801c498:	4630      	mov	r0, r6
 801c49a:	4639      	mov	r1, r7
 801c49c:	f7e4 fb24 	bl	8000ae8 <__aeabi_dcmpeq>
 801c4a0:	4681      	mov	r9, r0
 801c4a2:	b168      	cbz	r0, 801c4c0 <_dtoa_r+0xc8>
 801c4a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c4a6:	2301      	movs	r3, #1
 801c4a8:	6013      	str	r3, [r2, #0]
 801c4aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	f000 8524 	beq.w	801cefa <_dtoa_r+0xb02>
 801c4b2:	4b9a      	ldr	r3, [pc, #616]	; (801c71c <_dtoa_r+0x324>)
 801c4b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c4b6:	f103 3bff 	add.w	fp, r3, #4294967295
 801c4ba:	6013      	str	r3, [r2, #0]
 801c4bc:	f000 bd28 	b.w	801cf10 <_dtoa_r+0xb18>
 801c4c0:	aa14      	add	r2, sp, #80	; 0x50
 801c4c2:	a915      	add	r1, sp, #84	; 0x54
 801c4c4:	ec47 6b10 	vmov	d0, r6, r7
 801c4c8:	4620      	mov	r0, r4
 801c4ca:	f001 fdd9 	bl	801e080 <__d2b>
 801c4ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801c4d2:	9004      	str	r0, [sp, #16]
 801c4d4:	2d00      	cmp	r5, #0
 801c4d6:	d07c      	beq.n	801c5d2 <_dtoa_r+0x1da>
 801c4d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c4dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801c4e0:	46b2      	mov	sl, r6
 801c4e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801c4e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c4ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801c4ee:	2200      	movs	r2, #0
 801c4f0:	4b8b      	ldr	r3, [pc, #556]	; (801c720 <_dtoa_r+0x328>)
 801c4f2:	4650      	mov	r0, sl
 801c4f4:	4659      	mov	r1, fp
 801c4f6:	f7e3 fed7 	bl	80002a8 <__aeabi_dsub>
 801c4fa:	a381      	add	r3, pc, #516	; (adr r3, 801c700 <_dtoa_r+0x308>)
 801c4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c500:	f7e4 f88a 	bl	8000618 <__aeabi_dmul>
 801c504:	a380      	add	r3, pc, #512	; (adr r3, 801c708 <_dtoa_r+0x310>)
 801c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c50a:	f7e3 fecf 	bl	80002ac <__adddf3>
 801c50e:	4606      	mov	r6, r0
 801c510:	4628      	mov	r0, r5
 801c512:	460f      	mov	r7, r1
 801c514:	f7e4 f816 	bl	8000544 <__aeabi_i2d>
 801c518:	a37d      	add	r3, pc, #500	; (adr r3, 801c710 <_dtoa_r+0x318>)
 801c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c51e:	f7e4 f87b 	bl	8000618 <__aeabi_dmul>
 801c522:	4602      	mov	r2, r0
 801c524:	460b      	mov	r3, r1
 801c526:	4630      	mov	r0, r6
 801c528:	4639      	mov	r1, r7
 801c52a:	f7e3 febf 	bl	80002ac <__adddf3>
 801c52e:	4606      	mov	r6, r0
 801c530:	460f      	mov	r7, r1
 801c532:	f7e4 fb21 	bl	8000b78 <__aeabi_d2iz>
 801c536:	2200      	movs	r2, #0
 801c538:	4682      	mov	sl, r0
 801c53a:	2300      	movs	r3, #0
 801c53c:	4630      	mov	r0, r6
 801c53e:	4639      	mov	r1, r7
 801c540:	f7e4 fadc 	bl	8000afc <__aeabi_dcmplt>
 801c544:	b148      	cbz	r0, 801c55a <_dtoa_r+0x162>
 801c546:	4650      	mov	r0, sl
 801c548:	f7e3 fffc 	bl	8000544 <__aeabi_i2d>
 801c54c:	4632      	mov	r2, r6
 801c54e:	463b      	mov	r3, r7
 801c550:	f7e4 faca 	bl	8000ae8 <__aeabi_dcmpeq>
 801c554:	b908      	cbnz	r0, 801c55a <_dtoa_r+0x162>
 801c556:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c55a:	f1ba 0f16 	cmp.w	sl, #22
 801c55e:	d859      	bhi.n	801c614 <_dtoa_r+0x21c>
 801c560:	4970      	ldr	r1, [pc, #448]	; (801c724 <_dtoa_r+0x32c>)
 801c562:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801c566:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c56a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c56e:	f7e4 fae3 	bl	8000b38 <__aeabi_dcmpgt>
 801c572:	2800      	cmp	r0, #0
 801c574:	d050      	beq.n	801c618 <_dtoa_r+0x220>
 801c576:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c57a:	2300      	movs	r3, #0
 801c57c:	930f      	str	r3, [sp, #60]	; 0x3c
 801c57e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c580:	1b5d      	subs	r5, r3, r5
 801c582:	f1b5 0801 	subs.w	r8, r5, #1
 801c586:	bf49      	itett	mi
 801c588:	f1c5 0301 	rsbmi	r3, r5, #1
 801c58c:	2300      	movpl	r3, #0
 801c58e:	9305      	strmi	r3, [sp, #20]
 801c590:	f04f 0800 	movmi.w	r8, #0
 801c594:	bf58      	it	pl
 801c596:	9305      	strpl	r3, [sp, #20]
 801c598:	f1ba 0f00 	cmp.w	sl, #0
 801c59c:	db3e      	blt.n	801c61c <_dtoa_r+0x224>
 801c59e:	2300      	movs	r3, #0
 801c5a0:	44d0      	add	r8, sl
 801c5a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801c5a6:	9307      	str	r3, [sp, #28]
 801c5a8:	9b06      	ldr	r3, [sp, #24]
 801c5aa:	2b09      	cmp	r3, #9
 801c5ac:	f200 8090 	bhi.w	801c6d0 <_dtoa_r+0x2d8>
 801c5b0:	2b05      	cmp	r3, #5
 801c5b2:	bfc4      	itt	gt
 801c5b4:	3b04      	subgt	r3, #4
 801c5b6:	9306      	strgt	r3, [sp, #24]
 801c5b8:	9b06      	ldr	r3, [sp, #24]
 801c5ba:	f1a3 0302 	sub.w	r3, r3, #2
 801c5be:	bfcc      	ite	gt
 801c5c0:	2500      	movgt	r5, #0
 801c5c2:	2501      	movle	r5, #1
 801c5c4:	2b03      	cmp	r3, #3
 801c5c6:	f200 808f 	bhi.w	801c6e8 <_dtoa_r+0x2f0>
 801c5ca:	e8df f003 	tbb	[pc, r3]
 801c5ce:	7f7d      	.short	0x7f7d
 801c5d0:	7131      	.short	0x7131
 801c5d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801c5d6:	441d      	add	r5, r3
 801c5d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801c5dc:	2820      	cmp	r0, #32
 801c5de:	dd13      	ble.n	801c608 <_dtoa_r+0x210>
 801c5e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801c5e4:	9b00      	ldr	r3, [sp, #0]
 801c5e6:	fa08 f800 	lsl.w	r8, r8, r0
 801c5ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801c5ee:	fa23 f000 	lsr.w	r0, r3, r0
 801c5f2:	ea48 0000 	orr.w	r0, r8, r0
 801c5f6:	f7e3 ff95 	bl	8000524 <__aeabi_ui2d>
 801c5fa:	2301      	movs	r3, #1
 801c5fc:	4682      	mov	sl, r0
 801c5fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801c602:	3d01      	subs	r5, #1
 801c604:	9313      	str	r3, [sp, #76]	; 0x4c
 801c606:	e772      	b.n	801c4ee <_dtoa_r+0xf6>
 801c608:	9b00      	ldr	r3, [sp, #0]
 801c60a:	f1c0 0020 	rsb	r0, r0, #32
 801c60e:	fa03 f000 	lsl.w	r0, r3, r0
 801c612:	e7f0      	b.n	801c5f6 <_dtoa_r+0x1fe>
 801c614:	2301      	movs	r3, #1
 801c616:	e7b1      	b.n	801c57c <_dtoa_r+0x184>
 801c618:	900f      	str	r0, [sp, #60]	; 0x3c
 801c61a:	e7b0      	b.n	801c57e <_dtoa_r+0x186>
 801c61c:	9b05      	ldr	r3, [sp, #20]
 801c61e:	eba3 030a 	sub.w	r3, r3, sl
 801c622:	9305      	str	r3, [sp, #20]
 801c624:	f1ca 0300 	rsb	r3, sl, #0
 801c628:	9307      	str	r3, [sp, #28]
 801c62a:	2300      	movs	r3, #0
 801c62c:	930e      	str	r3, [sp, #56]	; 0x38
 801c62e:	e7bb      	b.n	801c5a8 <_dtoa_r+0x1b0>
 801c630:	2301      	movs	r3, #1
 801c632:	930a      	str	r3, [sp, #40]	; 0x28
 801c634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c636:	2b00      	cmp	r3, #0
 801c638:	dd59      	ble.n	801c6ee <_dtoa_r+0x2f6>
 801c63a:	9302      	str	r3, [sp, #8]
 801c63c:	4699      	mov	r9, r3
 801c63e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c640:	2200      	movs	r2, #0
 801c642:	6072      	str	r2, [r6, #4]
 801c644:	2204      	movs	r2, #4
 801c646:	f102 0014 	add.w	r0, r2, #20
 801c64a:	4298      	cmp	r0, r3
 801c64c:	6871      	ldr	r1, [r6, #4]
 801c64e:	d953      	bls.n	801c6f8 <_dtoa_r+0x300>
 801c650:	4620      	mov	r0, r4
 801c652:	f001 f9d4 	bl	801d9fe <_Balloc>
 801c656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c658:	6030      	str	r0, [r6, #0]
 801c65a:	f1b9 0f0e 	cmp.w	r9, #14
 801c65e:	f8d3 b000 	ldr.w	fp, [r3]
 801c662:	f200 80e6 	bhi.w	801c832 <_dtoa_r+0x43a>
 801c666:	2d00      	cmp	r5, #0
 801c668:	f000 80e3 	beq.w	801c832 <_dtoa_r+0x43a>
 801c66c:	ed9d 7b00 	vldr	d7, [sp]
 801c670:	f1ba 0f00 	cmp.w	sl, #0
 801c674:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801c678:	dd74      	ble.n	801c764 <_dtoa_r+0x36c>
 801c67a:	4a2a      	ldr	r2, [pc, #168]	; (801c724 <_dtoa_r+0x32c>)
 801c67c:	f00a 030f 	and.w	r3, sl, #15
 801c680:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c684:	ed93 7b00 	vldr	d7, [r3]
 801c688:	ea4f 162a 	mov.w	r6, sl, asr #4
 801c68c:	06f0      	lsls	r0, r6, #27
 801c68e:	ed8d 7b08 	vstr	d7, [sp, #32]
 801c692:	d565      	bpl.n	801c760 <_dtoa_r+0x368>
 801c694:	4b24      	ldr	r3, [pc, #144]	; (801c728 <_dtoa_r+0x330>)
 801c696:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c69a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c69e:	f7e4 f8e5 	bl	800086c <__aeabi_ddiv>
 801c6a2:	e9cd 0100 	strd	r0, r1, [sp]
 801c6a6:	f006 060f 	and.w	r6, r6, #15
 801c6aa:	2503      	movs	r5, #3
 801c6ac:	4f1e      	ldr	r7, [pc, #120]	; (801c728 <_dtoa_r+0x330>)
 801c6ae:	e04c      	b.n	801c74a <_dtoa_r+0x352>
 801c6b0:	2301      	movs	r3, #1
 801c6b2:	930a      	str	r3, [sp, #40]	; 0x28
 801c6b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c6b6:	4453      	add	r3, sl
 801c6b8:	f103 0901 	add.w	r9, r3, #1
 801c6bc:	9302      	str	r3, [sp, #8]
 801c6be:	464b      	mov	r3, r9
 801c6c0:	2b01      	cmp	r3, #1
 801c6c2:	bfb8      	it	lt
 801c6c4:	2301      	movlt	r3, #1
 801c6c6:	e7ba      	b.n	801c63e <_dtoa_r+0x246>
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	e7b2      	b.n	801c632 <_dtoa_r+0x23a>
 801c6cc:	2300      	movs	r3, #0
 801c6ce:	e7f0      	b.n	801c6b2 <_dtoa_r+0x2ba>
 801c6d0:	2501      	movs	r5, #1
 801c6d2:	2300      	movs	r3, #0
 801c6d4:	9306      	str	r3, [sp, #24]
 801c6d6:	950a      	str	r5, [sp, #40]	; 0x28
 801c6d8:	f04f 33ff 	mov.w	r3, #4294967295
 801c6dc:	9302      	str	r3, [sp, #8]
 801c6de:	4699      	mov	r9, r3
 801c6e0:	2200      	movs	r2, #0
 801c6e2:	2312      	movs	r3, #18
 801c6e4:	920b      	str	r2, [sp, #44]	; 0x2c
 801c6e6:	e7aa      	b.n	801c63e <_dtoa_r+0x246>
 801c6e8:	2301      	movs	r3, #1
 801c6ea:	930a      	str	r3, [sp, #40]	; 0x28
 801c6ec:	e7f4      	b.n	801c6d8 <_dtoa_r+0x2e0>
 801c6ee:	2301      	movs	r3, #1
 801c6f0:	9302      	str	r3, [sp, #8]
 801c6f2:	4699      	mov	r9, r3
 801c6f4:	461a      	mov	r2, r3
 801c6f6:	e7f5      	b.n	801c6e4 <_dtoa_r+0x2ec>
 801c6f8:	3101      	adds	r1, #1
 801c6fa:	6071      	str	r1, [r6, #4]
 801c6fc:	0052      	lsls	r2, r2, #1
 801c6fe:	e7a2      	b.n	801c646 <_dtoa_r+0x24e>
 801c700:	636f4361 	.word	0x636f4361
 801c704:	3fd287a7 	.word	0x3fd287a7
 801c708:	8b60c8b3 	.word	0x8b60c8b3
 801c70c:	3fc68a28 	.word	0x3fc68a28
 801c710:	509f79fb 	.word	0x509f79fb
 801c714:	3fd34413 	.word	0x3fd34413
 801c718:	7ff00000 	.word	0x7ff00000
 801c71c:	0801f4ce 	.word	0x0801f4ce
 801c720:	3ff80000 	.word	0x3ff80000
 801c724:	0801f5f0 	.word	0x0801f5f0
 801c728:	0801f5c8 	.word	0x0801f5c8
 801c72c:	0801f551 	.word	0x0801f551
 801c730:	07f1      	lsls	r1, r6, #31
 801c732:	d508      	bpl.n	801c746 <_dtoa_r+0x34e>
 801c734:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c738:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c73c:	f7e3 ff6c 	bl	8000618 <__aeabi_dmul>
 801c740:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c744:	3501      	adds	r5, #1
 801c746:	1076      	asrs	r6, r6, #1
 801c748:	3708      	adds	r7, #8
 801c74a:	2e00      	cmp	r6, #0
 801c74c:	d1f0      	bne.n	801c730 <_dtoa_r+0x338>
 801c74e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c752:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c756:	f7e4 f889 	bl	800086c <__aeabi_ddiv>
 801c75a:	e9cd 0100 	strd	r0, r1, [sp]
 801c75e:	e01a      	b.n	801c796 <_dtoa_r+0x39e>
 801c760:	2502      	movs	r5, #2
 801c762:	e7a3      	b.n	801c6ac <_dtoa_r+0x2b4>
 801c764:	f000 80a0 	beq.w	801c8a8 <_dtoa_r+0x4b0>
 801c768:	f1ca 0600 	rsb	r6, sl, #0
 801c76c:	4b9f      	ldr	r3, [pc, #636]	; (801c9ec <_dtoa_r+0x5f4>)
 801c76e:	4fa0      	ldr	r7, [pc, #640]	; (801c9f0 <_dtoa_r+0x5f8>)
 801c770:	f006 020f 	and.w	r2, r6, #15
 801c774:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c77c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c780:	f7e3 ff4a 	bl	8000618 <__aeabi_dmul>
 801c784:	e9cd 0100 	strd	r0, r1, [sp]
 801c788:	1136      	asrs	r6, r6, #4
 801c78a:	2300      	movs	r3, #0
 801c78c:	2502      	movs	r5, #2
 801c78e:	2e00      	cmp	r6, #0
 801c790:	d17f      	bne.n	801c892 <_dtoa_r+0x49a>
 801c792:	2b00      	cmp	r3, #0
 801c794:	d1e1      	bne.n	801c75a <_dtoa_r+0x362>
 801c796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c798:	2b00      	cmp	r3, #0
 801c79a:	f000 8087 	beq.w	801c8ac <_dtoa_r+0x4b4>
 801c79e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c7a2:	2200      	movs	r2, #0
 801c7a4:	4b93      	ldr	r3, [pc, #588]	; (801c9f4 <_dtoa_r+0x5fc>)
 801c7a6:	4630      	mov	r0, r6
 801c7a8:	4639      	mov	r1, r7
 801c7aa:	f7e4 f9a7 	bl	8000afc <__aeabi_dcmplt>
 801c7ae:	2800      	cmp	r0, #0
 801c7b0:	d07c      	beq.n	801c8ac <_dtoa_r+0x4b4>
 801c7b2:	f1b9 0f00 	cmp.w	r9, #0
 801c7b6:	d079      	beq.n	801c8ac <_dtoa_r+0x4b4>
 801c7b8:	9b02      	ldr	r3, [sp, #8]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	dd35      	ble.n	801c82a <_dtoa_r+0x432>
 801c7be:	f10a 33ff 	add.w	r3, sl, #4294967295
 801c7c2:	9308      	str	r3, [sp, #32]
 801c7c4:	4639      	mov	r1, r7
 801c7c6:	2200      	movs	r2, #0
 801c7c8:	4b8b      	ldr	r3, [pc, #556]	; (801c9f8 <_dtoa_r+0x600>)
 801c7ca:	4630      	mov	r0, r6
 801c7cc:	f7e3 ff24 	bl	8000618 <__aeabi_dmul>
 801c7d0:	e9cd 0100 	strd	r0, r1, [sp]
 801c7d4:	9f02      	ldr	r7, [sp, #8]
 801c7d6:	3501      	adds	r5, #1
 801c7d8:	4628      	mov	r0, r5
 801c7da:	f7e3 feb3 	bl	8000544 <__aeabi_i2d>
 801c7de:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c7e2:	f7e3 ff19 	bl	8000618 <__aeabi_dmul>
 801c7e6:	2200      	movs	r2, #0
 801c7e8:	4b84      	ldr	r3, [pc, #528]	; (801c9fc <_dtoa_r+0x604>)
 801c7ea:	f7e3 fd5f 	bl	80002ac <__adddf3>
 801c7ee:	4605      	mov	r5, r0
 801c7f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801c7f4:	2f00      	cmp	r7, #0
 801c7f6:	d15d      	bne.n	801c8b4 <_dtoa_r+0x4bc>
 801c7f8:	2200      	movs	r2, #0
 801c7fa:	4b81      	ldr	r3, [pc, #516]	; (801ca00 <_dtoa_r+0x608>)
 801c7fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c800:	f7e3 fd52 	bl	80002a8 <__aeabi_dsub>
 801c804:	462a      	mov	r2, r5
 801c806:	4633      	mov	r3, r6
 801c808:	e9cd 0100 	strd	r0, r1, [sp]
 801c80c:	f7e4 f994 	bl	8000b38 <__aeabi_dcmpgt>
 801c810:	2800      	cmp	r0, #0
 801c812:	f040 8288 	bne.w	801cd26 <_dtoa_r+0x92e>
 801c816:	462a      	mov	r2, r5
 801c818:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801c81c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c820:	f7e4 f96c 	bl	8000afc <__aeabi_dcmplt>
 801c824:	2800      	cmp	r0, #0
 801c826:	f040 827c 	bne.w	801cd22 <_dtoa_r+0x92a>
 801c82a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801c82e:	e9cd 2300 	strd	r2, r3, [sp]
 801c832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c834:	2b00      	cmp	r3, #0
 801c836:	f2c0 8150 	blt.w	801cada <_dtoa_r+0x6e2>
 801c83a:	f1ba 0f0e 	cmp.w	sl, #14
 801c83e:	f300 814c 	bgt.w	801cada <_dtoa_r+0x6e2>
 801c842:	4b6a      	ldr	r3, [pc, #424]	; (801c9ec <_dtoa_r+0x5f4>)
 801c844:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c848:	ed93 7b00 	vldr	d7, [r3]
 801c84c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c84e:	2b00      	cmp	r3, #0
 801c850:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c854:	f280 80d8 	bge.w	801ca08 <_dtoa_r+0x610>
 801c858:	f1b9 0f00 	cmp.w	r9, #0
 801c85c:	f300 80d4 	bgt.w	801ca08 <_dtoa_r+0x610>
 801c860:	f040 825e 	bne.w	801cd20 <_dtoa_r+0x928>
 801c864:	2200      	movs	r2, #0
 801c866:	4b66      	ldr	r3, [pc, #408]	; (801ca00 <_dtoa_r+0x608>)
 801c868:	ec51 0b17 	vmov	r0, r1, d7
 801c86c:	f7e3 fed4 	bl	8000618 <__aeabi_dmul>
 801c870:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c874:	f7e4 f956 	bl	8000b24 <__aeabi_dcmpge>
 801c878:	464f      	mov	r7, r9
 801c87a:	464e      	mov	r6, r9
 801c87c:	2800      	cmp	r0, #0
 801c87e:	f040 8234 	bne.w	801ccea <_dtoa_r+0x8f2>
 801c882:	2331      	movs	r3, #49	; 0x31
 801c884:	f10b 0501 	add.w	r5, fp, #1
 801c888:	f88b 3000 	strb.w	r3, [fp]
 801c88c:	f10a 0a01 	add.w	sl, sl, #1
 801c890:	e22f      	b.n	801ccf2 <_dtoa_r+0x8fa>
 801c892:	07f2      	lsls	r2, r6, #31
 801c894:	d505      	bpl.n	801c8a2 <_dtoa_r+0x4aa>
 801c896:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c89a:	f7e3 febd 	bl	8000618 <__aeabi_dmul>
 801c89e:	3501      	adds	r5, #1
 801c8a0:	2301      	movs	r3, #1
 801c8a2:	1076      	asrs	r6, r6, #1
 801c8a4:	3708      	adds	r7, #8
 801c8a6:	e772      	b.n	801c78e <_dtoa_r+0x396>
 801c8a8:	2502      	movs	r5, #2
 801c8aa:	e774      	b.n	801c796 <_dtoa_r+0x39e>
 801c8ac:	f8cd a020 	str.w	sl, [sp, #32]
 801c8b0:	464f      	mov	r7, r9
 801c8b2:	e791      	b.n	801c7d8 <_dtoa_r+0x3e0>
 801c8b4:	4b4d      	ldr	r3, [pc, #308]	; (801c9ec <_dtoa_r+0x5f4>)
 801c8b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c8ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801c8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d047      	beq.n	801c954 <_dtoa_r+0x55c>
 801c8c4:	4602      	mov	r2, r0
 801c8c6:	460b      	mov	r3, r1
 801c8c8:	2000      	movs	r0, #0
 801c8ca:	494e      	ldr	r1, [pc, #312]	; (801ca04 <_dtoa_r+0x60c>)
 801c8cc:	f7e3 ffce 	bl	800086c <__aeabi_ddiv>
 801c8d0:	462a      	mov	r2, r5
 801c8d2:	4633      	mov	r3, r6
 801c8d4:	f7e3 fce8 	bl	80002a8 <__aeabi_dsub>
 801c8d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c8dc:	465d      	mov	r5, fp
 801c8de:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c8e2:	f7e4 f949 	bl	8000b78 <__aeabi_d2iz>
 801c8e6:	4606      	mov	r6, r0
 801c8e8:	f7e3 fe2c 	bl	8000544 <__aeabi_i2d>
 801c8ec:	4602      	mov	r2, r0
 801c8ee:	460b      	mov	r3, r1
 801c8f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c8f4:	f7e3 fcd8 	bl	80002a8 <__aeabi_dsub>
 801c8f8:	3630      	adds	r6, #48	; 0x30
 801c8fa:	f805 6b01 	strb.w	r6, [r5], #1
 801c8fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c902:	e9cd 0100 	strd	r0, r1, [sp]
 801c906:	f7e4 f8f9 	bl	8000afc <__aeabi_dcmplt>
 801c90a:	2800      	cmp	r0, #0
 801c90c:	d163      	bne.n	801c9d6 <_dtoa_r+0x5de>
 801c90e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c912:	2000      	movs	r0, #0
 801c914:	4937      	ldr	r1, [pc, #220]	; (801c9f4 <_dtoa_r+0x5fc>)
 801c916:	f7e3 fcc7 	bl	80002a8 <__aeabi_dsub>
 801c91a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c91e:	f7e4 f8ed 	bl	8000afc <__aeabi_dcmplt>
 801c922:	2800      	cmp	r0, #0
 801c924:	f040 80b7 	bne.w	801ca96 <_dtoa_r+0x69e>
 801c928:	eba5 030b 	sub.w	r3, r5, fp
 801c92c:	429f      	cmp	r7, r3
 801c92e:	f77f af7c 	ble.w	801c82a <_dtoa_r+0x432>
 801c932:	2200      	movs	r2, #0
 801c934:	4b30      	ldr	r3, [pc, #192]	; (801c9f8 <_dtoa_r+0x600>)
 801c936:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c93a:	f7e3 fe6d 	bl	8000618 <__aeabi_dmul>
 801c93e:	2200      	movs	r2, #0
 801c940:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c944:	4b2c      	ldr	r3, [pc, #176]	; (801c9f8 <_dtoa_r+0x600>)
 801c946:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c94a:	f7e3 fe65 	bl	8000618 <__aeabi_dmul>
 801c94e:	e9cd 0100 	strd	r0, r1, [sp]
 801c952:	e7c4      	b.n	801c8de <_dtoa_r+0x4e6>
 801c954:	462a      	mov	r2, r5
 801c956:	4633      	mov	r3, r6
 801c958:	f7e3 fe5e 	bl	8000618 <__aeabi_dmul>
 801c95c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c960:	eb0b 0507 	add.w	r5, fp, r7
 801c964:	465e      	mov	r6, fp
 801c966:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c96a:	f7e4 f905 	bl	8000b78 <__aeabi_d2iz>
 801c96e:	4607      	mov	r7, r0
 801c970:	f7e3 fde8 	bl	8000544 <__aeabi_i2d>
 801c974:	3730      	adds	r7, #48	; 0x30
 801c976:	4602      	mov	r2, r0
 801c978:	460b      	mov	r3, r1
 801c97a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c97e:	f7e3 fc93 	bl	80002a8 <__aeabi_dsub>
 801c982:	f806 7b01 	strb.w	r7, [r6], #1
 801c986:	42ae      	cmp	r6, r5
 801c988:	e9cd 0100 	strd	r0, r1, [sp]
 801c98c:	f04f 0200 	mov.w	r2, #0
 801c990:	d126      	bne.n	801c9e0 <_dtoa_r+0x5e8>
 801c992:	4b1c      	ldr	r3, [pc, #112]	; (801ca04 <_dtoa_r+0x60c>)
 801c994:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c998:	f7e3 fc88 	bl	80002ac <__adddf3>
 801c99c:	4602      	mov	r2, r0
 801c99e:	460b      	mov	r3, r1
 801c9a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c9a4:	f7e4 f8c8 	bl	8000b38 <__aeabi_dcmpgt>
 801c9a8:	2800      	cmp	r0, #0
 801c9aa:	d174      	bne.n	801ca96 <_dtoa_r+0x69e>
 801c9ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c9b0:	2000      	movs	r0, #0
 801c9b2:	4914      	ldr	r1, [pc, #80]	; (801ca04 <_dtoa_r+0x60c>)
 801c9b4:	f7e3 fc78 	bl	80002a8 <__aeabi_dsub>
 801c9b8:	4602      	mov	r2, r0
 801c9ba:	460b      	mov	r3, r1
 801c9bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c9c0:	f7e4 f89c 	bl	8000afc <__aeabi_dcmplt>
 801c9c4:	2800      	cmp	r0, #0
 801c9c6:	f43f af30 	beq.w	801c82a <_dtoa_r+0x432>
 801c9ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c9ce:	2b30      	cmp	r3, #48	; 0x30
 801c9d0:	f105 32ff 	add.w	r2, r5, #4294967295
 801c9d4:	d002      	beq.n	801c9dc <_dtoa_r+0x5e4>
 801c9d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c9da:	e04a      	b.n	801ca72 <_dtoa_r+0x67a>
 801c9dc:	4615      	mov	r5, r2
 801c9de:	e7f4      	b.n	801c9ca <_dtoa_r+0x5d2>
 801c9e0:	4b05      	ldr	r3, [pc, #20]	; (801c9f8 <_dtoa_r+0x600>)
 801c9e2:	f7e3 fe19 	bl	8000618 <__aeabi_dmul>
 801c9e6:	e9cd 0100 	strd	r0, r1, [sp]
 801c9ea:	e7bc      	b.n	801c966 <_dtoa_r+0x56e>
 801c9ec:	0801f5f0 	.word	0x0801f5f0
 801c9f0:	0801f5c8 	.word	0x0801f5c8
 801c9f4:	3ff00000 	.word	0x3ff00000
 801c9f8:	40240000 	.word	0x40240000
 801c9fc:	401c0000 	.word	0x401c0000
 801ca00:	40140000 	.word	0x40140000
 801ca04:	3fe00000 	.word	0x3fe00000
 801ca08:	e9dd 6700 	ldrd	r6, r7, [sp]
 801ca0c:	465d      	mov	r5, fp
 801ca0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ca12:	4630      	mov	r0, r6
 801ca14:	4639      	mov	r1, r7
 801ca16:	f7e3 ff29 	bl	800086c <__aeabi_ddiv>
 801ca1a:	f7e4 f8ad 	bl	8000b78 <__aeabi_d2iz>
 801ca1e:	4680      	mov	r8, r0
 801ca20:	f7e3 fd90 	bl	8000544 <__aeabi_i2d>
 801ca24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ca28:	f7e3 fdf6 	bl	8000618 <__aeabi_dmul>
 801ca2c:	4602      	mov	r2, r0
 801ca2e:	460b      	mov	r3, r1
 801ca30:	4630      	mov	r0, r6
 801ca32:	4639      	mov	r1, r7
 801ca34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801ca38:	f7e3 fc36 	bl	80002a8 <__aeabi_dsub>
 801ca3c:	f805 6b01 	strb.w	r6, [r5], #1
 801ca40:	eba5 060b 	sub.w	r6, r5, fp
 801ca44:	45b1      	cmp	r9, r6
 801ca46:	4602      	mov	r2, r0
 801ca48:	460b      	mov	r3, r1
 801ca4a:	d139      	bne.n	801cac0 <_dtoa_r+0x6c8>
 801ca4c:	f7e3 fc2e 	bl	80002ac <__adddf3>
 801ca50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ca54:	4606      	mov	r6, r0
 801ca56:	460f      	mov	r7, r1
 801ca58:	f7e4 f86e 	bl	8000b38 <__aeabi_dcmpgt>
 801ca5c:	b9c8      	cbnz	r0, 801ca92 <_dtoa_r+0x69a>
 801ca5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ca62:	4630      	mov	r0, r6
 801ca64:	4639      	mov	r1, r7
 801ca66:	f7e4 f83f 	bl	8000ae8 <__aeabi_dcmpeq>
 801ca6a:	b110      	cbz	r0, 801ca72 <_dtoa_r+0x67a>
 801ca6c:	f018 0f01 	tst.w	r8, #1
 801ca70:	d10f      	bne.n	801ca92 <_dtoa_r+0x69a>
 801ca72:	9904      	ldr	r1, [sp, #16]
 801ca74:	4620      	mov	r0, r4
 801ca76:	f000 fff6 	bl	801da66 <_Bfree>
 801ca7a:	2300      	movs	r3, #0
 801ca7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ca7e:	702b      	strb	r3, [r5, #0]
 801ca80:	f10a 0301 	add.w	r3, sl, #1
 801ca84:	6013      	str	r3, [r2, #0]
 801ca86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	f000 8241 	beq.w	801cf10 <_dtoa_r+0xb18>
 801ca8e:	601d      	str	r5, [r3, #0]
 801ca90:	e23e      	b.n	801cf10 <_dtoa_r+0xb18>
 801ca92:	f8cd a020 	str.w	sl, [sp, #32]
 801ca96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ca9a:	2a39      	cmp	r2, #57	; 0x39
 801ca9c:	f105 33ff 	add.w	r3, r5, #4294967295
 801caa0:	d108      	bne.n	801cab4 <_dtoa_r+0x6bc>
 801caa2:	459b      	cmp	fp, r3
 801caa4:	d10a      	bne.n	801cabc <_dtoa_r+0x6c4>
 801caa6:	9b08      	ldr	r3, [sp, #32]
 801caa8:	3301      	adds	r3, #1
 801caaa:	9308      	str	r3, [sp, #32]
 801caac:	2330      	movs	r3, #48	; 0x30
 801caae:	f88b 3000 	strb.w	r3, [fp]
 801cab2:	465b      	mov	r3, fp
 801cab4:	781a      	ldrb	r2, [r3, #0]
 801cab6:	3201      	adds	r2, #1
 801cab8:	701a      	strb	r2, [r3, #0]
 801caba:	e78c      	b.n	801c9d6 <_dtoa_r+0x5de>
 801cabc:	461d      	mov	r5, r3
 801cabe:	e7ea      	b.n	801ca96 <_dtoa_r+0x69e>
 801cac0:	2200      	movs	r2, #0
 801cac2:	4b9b      	ldr	r3, [pc, #620]	; (801cd30 <_dtoa_r+0x938>)
 801cac4:	f7e3 fda8 	bl	8000618 <__aeabi_dmul>
 801cac8:	2200      	movs	r2, #0
 801caca:	2300      	movs	r3, #0
 801cacc:	4606      	mov	r6, r0
 801cace:	460f      	mov	r7, r1
 801cad0:	f7e4 f80a 	bl	8000ae8 <__aeabi_dcmpeq>
 801cad4:	2800      	cmp	r0, #0
 801cad6:	d09a      	beq.n	801ca0e <_dtoa_r+0x616>
 801cad8:	e7cb      	b.n	801ca72 <_dtoa_r+0x67a>
 801cada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cadc:	2a00      	cmp	r2, #0
 801cade:	f000 808b 	beq.w	801cbf8 <_dtoa_r+0x800>
 801cae2:	9a06      	ldr	r2, [sp, #24]
 801cae4:	2a01      	cmp	r2, #1
 801cae6:	dc6e      	bgt.n	801cbc6 <_dtoa_r+0x7ce>
 801cae8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801caea:	2a00      	cmp	r2, #0
 801caec:	d067      	beq.n	801cbbe <_dtoa_r+0x7c6>
 801caee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801caf2:	9f07      	ldr	r7, [sp, #28]
 801caf4:	9d05      	ldr	r5, [sp, #20]
 801caf6:	9a05      	ldr	r2, [sp, #20]
 801caf8:	2101      	movs	r1, #1
 801cafa:	441a      	add	r2, r3
 801cafc:	4620      	mov	r0, r4
 801cafe:	9205      	str	r2, [sp, #20]
 801cb00:	4498      	add	r8, r3
 801cb02:	f001 f88e 	bl	801dc22 <__i2b>
 801cb06:	4606      	mov	r6, r0
 801cb08:	2d00      	cmp	r5, #0
 801cb0a:	dd0c      	ble.n	801cb26 <_dtoa_r+0x72e>
 801cb0c:	f1b8 0f00 	cmp.w	r8, #0
 801cb10:	dd09      	ble.n	801cb26 <_dtoa_r+0x72e>
 801cb12:	4545      	cmp	r5, r8
 801cb14:	9a05      	ldr	r2, [sp, #20]
 801cb16:	462b      	mov	r3, r5
 801cb18:	bfa8      	it	ge
 801cb1a:	4643      	movge	r3, r8
 801cb1c:	1ad2      	subs	r2, r2, r3
 801cb1e:	9205      	str	r2, [sp, #20]
 801cb20:	1aed      	subs	r5, r5, r3
 801cb22:	eba8 0803 	sub.w	r8, r8, r3
 801cb26:	9b07      	ldr	r3, [sp, #28]
 801cb28:	b1eb      	cbz	r3, 801cb66 <_dtoa_r+0x76e>
 801cb2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d067      	beq.n	801cc00 <_dtoa_r+0x808>
 801cb30:	b18f      	cbz	r7, 801cb56 <_dtoa_r+0x75e>
 801cb32:	4631      	mov	r1, r6
 801cb34:	463a      	mov	r2, r7
 801cb36:	4620      	mov	r0, r4
 801cb38:	f001 f912 	bl	801dd60 <__pow5mult>
 801cb3c:	9a04      	ldr	r2, [sp, #16]
 801cb3e:	4601      	mov	r1, r0
 801cb40:	4606      	mov	r6, r0
 801cb42:	4620      	mov	r0, r4
 801cb44:	f001 f876 	bl	801dc34 <__multiply>
 801cb48:	9904      	ldr	r1, [sp, #16]
 801cb4a:	9008      	str	r0, [sp, #32]
 801cb4c:	4620      	mov	r0, r4
 801cb4e:	f000 ff8a 	bl	801da66 <_Bfree>
 801cb52:	9b08      	ldr	r3, [sp, #32]
 801cb54:	9304      	str	r3, [sp, #16]
 801cb56:	9b07      	ldr	r3, [sp, #28]
 801cb58:	1bda      	subs	r2, r3, r7
 801cb5a:	d004      	beq.n	801cb66 <_dtoa_r+0x76e>
 801cb5c:	9904      	ldr	r1, [sp, #16]
 801cb5e:	4620      	mov	r0, r4
 801cb60:	f001 f8fe 	bl	801dd60 <__pow5mult>
 801cb64:	9004      	str	r0, [sp, #16]
 801cb66:	2101      	movs	r1, #1
 801cb68:	4620      	mov	r0, r4
 801cb6a:	f001 f85a 	bl	801dc22 <__i2b>
 801cb6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb70:	4607      	mov	r7, r0
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	f000 81d0 	beq.w	801cf18 <_dtoa_r+0xb20>
 801cb78:	461a      	mov	r2, r3
 801cb7a:	4601      	mov	r1, r0
 801cb7c:	4620      	mov	r0, r4
 801cb7e:	f001 f8ef 	bl	801dd60 <__pow5mult>
 801cb82:	9b06      	ldr	r3, [sp, #24]
 801cb84:	2b01      	cmp	r3, #1
 801cb86:	4607      	mov	r7, r0
 801cb88:	dc40      	bgt.n	801cc0c <_dtoa_r+0x814>
 801cb8a:	9b00      	ldr	r3, [sp, #0]
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d139      	bne.n	801cc04 <_dtoa_r+0x80c>
 801cb90:	9b01      	ldr	r3, [sp, #4]
 801cb92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d136      	bne.n	801cc08 <_dtoa_r+0x810>
 801cb9a:	9b01      	ldr	r3, [sp, #4]
 801cb9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cba0:	0d1b      	lsrs	r3, r3, #20
 801cba2:	051b      	lsls	r3, r3, #20
 801cba4:	b12b      	cbz	r3, 801cbb2 <_dtoa_r+0x7ba>
 801cba6:	9b05      	ldr	r3, [sp, #20]
 801cba8:	3301      	adds	r3, #1
 801cbaa:	9305      	str	r3, [sp, #20]
 801cbac:	f108 0801 	add.w	r8, r8, #1
 801cbb0:	2301      	movs	r3, #1
 801cbb2:	9307      	str	r3, [sp, #28]
 801cbb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d12a      	bne.n	801cc10 <_dtoa_r+0x818>
 801cbba:	2001      	movs	r0, #1
 801cbbc:	e030      	b.n	801cc20 <_dtoa_r+0x828>
 801cbbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cbc0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801cbc4:	e795      	b.n	801caf2 <_dtoa_r+0x6fa>
 801cbc6:	9b07      	ldr	r3, [sp, #28]
 801cbc8:	f109 37ff 	add.w	r7, r9, #4294967295
 801cbcc:	42bb      	cmp	r3, r7
 801cbce:	bfbf      	itttt	lt
 801cbd0:	9b07      	ldrlt	r3, [sp, #28]
 801cbd2:	9707      	strlt	r7, [sp, #28]
 801cbd4:	1afa      	sublt	r2, r7, r3
 801cbd6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801cbd8:	bfbb      	ittet	lt
 801cbda:	189b      	addlt	r3, r3, r2
 801cbdc:	930e      	strlt	r3, [sp, #56]	; 0x38
 801cbde:	1bdf      	subge	r7, r3, r7
 801cbe0:	2700      	movlt	r7, #0
 801cbe2:	f1b9 0f00 	cmp.w	r9, #0
 801cbe6:	bfb5      	itete	lt
 801cbe8:	9b05      	ldrlt	r3, [sp, #20]
 801cbea:	9d05      	ldrge	r5, [sp, #20]
 801cbec:	eba3 0509 	sublt.w	r5, r3, r9
 801cbf0:	464b      	movge	r3, r9
 801cbf2:	bfb8      	it	lt
 801cbf4:	2300      	movlt	r3, #0
 801cbf6:	e77e      	b.n	801caf6 <_dtoa_r+0x6fe>
 801cbf8:	9f07      	ldr	r7, [sp, #28]
 801cbfa:	9d05      	ldr	r5, [sp, #20]
 801cbfc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801cbfe:	e783      	b.n	801cb08 <_dtoa_r+0x710>
 801cc00:	9a07      	ldr	r2, [sp, #28]
 801cc02:	e7ab      	b.n	801cb5c <_dtoa_r+0x764>
 801cc04:	2300      	movs	r3, #0
 801cc06:	e7d4      	b.n	801cbb2 <_dtoa_r+0x7ba>
 801cc08:	9b00      	ldr	r3, [sp, #0]
 801cc0a:	e7d2      	b.n	801cbb2 <_dtoa_r+0x7ba>
 801cc0c:	2300      	movs	r3, #0
 801cc0e:	9307      	str	r3, [sp, #28]
 801cc10:	693b      	ldr	r3, [r7, #16]
 801cc12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801cc16:	6918      	ldr	r0, [r3, #16]
 801cc18:	f000 ffb5 	bl	801db86 <__hi0bits>
 801cc1c:	f1c0 0020 	rsb	r0, r0, #32
 801cc20:	4440      	add	r0, r8
 801cc22:	f010 001f 	ands.w	r0, r0, #31
 801cc26:	d047      	beq.n	801ccb8 <_dtoa_r+0x8c0>
 801cc28:	f1c0 0320 	rsb	r3, r0, #32
 801cc2c:	2b04      	cmp	r3, #4
 801cc2e:	dd3b      	ble.n	801cca8 <_dtoa_r+0x8b0>
 801cc30:	9b05      	ldr	r3, [sp, #20]
 801cc32:	f1c0 001c 	rsb	r0, r0, #28
 801cc36:	4403      	add	r3, r0
 801cc38:	9305      	str	r3, [sp, #20]
 801cc3a:	4405      	add	r5, r0
 801cc3c:	4480      	add	r8, r0
 801cc3e:	9b05      	ldr	r3, [sp, #20]
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	dd05      	ble.n	801cc50 <_dtoa_r+0x858>
 801cc44:	461a      	mov	r2, r3
 801cc46:	9904      	ldr	r1, [sp, #16]
 801cc48:	4620      	mov	r0, r4
 801cc4a:	f001 f8d7 	bl	801ddfc <__lshift>
 801cc4e:	9004      	str	r0, [sp, #16]
 801cc50:	f1b8 0f00 	cmp.w	r8, #0
 801cc54:	dd05      	ble.n	801cc62 <_dtoa_r+0x86a>
 801cc56:	4639      	mov	r1, r7
 801cc58:	4642      	mov	r2, r8
 801cc5a:	4620      	mov	r0, r4
 801cc5c:	f001 f8ce 	bl	801ddfc <__lshift>
 801cc60:	4607      	mov	r7, r0
 801cc62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cc64:	b353      	cbz	r3, 801ccbc <_dtoa_r+0x8c4>
 801cc66:	4639      	mov	r1, r7
 801cc68:	9804      	ldr	r0, [sp, #16]
 801cc6a:	f001 f91b 	bl	801dea4 <__mcmp>
 801cc6e:	2800      	cmp	r0, #0
 801cc70:	da24      	bge.n	801ccbc <_dtoa_r+0x8c4>
 801cc72:	2300      	movs	r3, #0
 801cc74:	220a      	movs	r2, #10
 801cc76:	9904      	ldr	r1, [sp, #16]
 801cc78:	4620      	mov	r0, r4
 801cc7a:	f000 ff0b 	bl	801da94 <__multadd>
 801cc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc80:	9004      	str	r0, [sp, #16]
 801cc82:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	f000 814d 	beq.w	801cf26 <_dtoa_r+0xb2e>
 801cc8c:	2300      	movs	r3, #0
 801cc8e:	4631      	mov	r1, r6
 801cc90:	220a      	movs	r2, #10
 801cc92:	4620      	mov	r0, r4
 801cc94:	f000 fefe 	bl	801da94 <__multadd>
 801cc98:	9b02      	ldr	r3, [sp, #8]
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	4606      	mov	r6, r0
 801cc9e:	dc4f      	bgt.n	801cd40 <_dtoa_r+0x948>
 801cca0:	9b06      	ldr	r3, [sp, #24]
 801cca2:	2b02      	cmp	r3, #2
 801cca4:	dd4c      	ble.n	801cd40 <_dtoa_r+0x948>
 801cca6:	e011      	b.n	801cccc <_dtoa_r+0x8d4>
 801cca8:	d0c9      	beq.n	801cc3e <_dtoa_r+0x846>
 801ccaa:	9a05      	ldr	r2, [sp, #20]
 801ccac:	331c      	adds	r3, #28
 801ccae:	441a      	add	r2, r3
 801ccb0:	9205      	str	r2, [sp, #20]
 801ccb2:	441d      	add	r5, r3
 801ccb4:	4498      	add	r8, r3
 801ccb6:	e7c2      	b.n	801cc3e <_dtoa_r+0x846>
 801ccb8:	4603      	mov	r3, r0
 801ccba:	e7f6      	b.n	801ccaa <_dtoa_r+0x8b2>
 801ccbc:	f1b9 0f00 	cmp.w	r9, #0
 801ccc0:	dc38      	bgt.n	801cd34 <_dtoa_r+0x93c>
 801ccc2:	9b06      	ldr	r3, [sp, #24]
 801ccc4:	2b02      	cmp	r3, #2
 801ccc6:	dd35      	ble.n	801cd34 <_dtoa_r+0x93c>
 801ccc8:	f8cd 9008 	str.w	r9, [sp, #8]
 801cccc:	9b02      	ldr	r3, [sp, #8]
 801ccce:	b963      	cbnz	r3, 801ccea <_dtoa_r+0x8f2>
 801ccd0:	4639      	mov	r1, r7
 801ccd2:	2205      	movs	r2, #5
 801ccd4:	4620      	mov	r0, r4
 801ccd6:	f000 fedd 	bl	801da94 <__multadd>
 801ccda:	4601      	mov	r1, r0
 801ccdc:	4607      	mov	r7, r0
 801ccde:	9804      	ldr	r0, [sp, #16]
 801cce0:	f001 f8e0 	bl	801dea4 <__mcmp>
 801cce4:	2800      	cmp	r0, #0
 801cce6:	f73f adcc 	bgt.w	801c882 <_dtoa_r+0x48a>
 801ccea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ccec:	465d      	mov	r5, fp
 801ccee:	ea6f 0a03 	mvn.w	sl, r3
 801ccf2:	f04f 0900 	mov.w	r9, #0
 801ccf6:	4639      	mov	r1, r7
 801ccf8:	4620      	mov	r0, r4
 801ccfa:	f000 feb4 	bl	801da66 <_Bfree>
 801ccfe:	2e00      	cmp	r6, #0
 801cd00:	f43f aeb7 	beq.w	801ca72 <_dtoa_r+0x67a>
 801cd04:	f1b9 0f00 	cmp.w	r9, #0
 801cd08:	d005      	beq.n	801cd16 <_dtoa_r+0x91e>
 801cd0a:	45b1      	cmp	r9, r6
 801cd0c:	d003      	beq.n	801cd16 <_dtoa_r+0x91e>
 801cd0e:	4649      	mov	r1, r9
 801cd10:	4620      	mov	r0, r4
 801cd12:	f000 fea8 	bl	801da66 <_Bfree>
 801cd16:	4631      	mov	r1, r6
 801cd18:	4620      	mov	r0, r4
 801cd1a:	f000 fea4 	bl	801da66 <_Bfree>
 801cd1e:	e6a8      	b.n	801ca72 <_dtoa_r+0x67a>
 801cd20:	2700      	movs	r7, #0
 801cd22:	463e      	mov	r6, r7
 801cd24:	e7e1      	b.n	801ccea <_dtoa_r+0x8f2>
 801cd26:	f8dd a020 	ldr.w	sl, [sp, #32]
 801cd2a:	463e      	mov	r6, r7
 801cd2c:	e5a9      	b.n	801c882 <_dtoa_r+0x48a>
 801cd2e:	bf00      	nop
 801cd30:	40240000 	.word	0x40240000
 801cd34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd36:	f8cd 9008 	str.w	r9, [sp, #8]
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	f000 80fa 	beq.w	801cf34 <_dtoa_r+0xb3c>
 801cd40:	2d00      	cmp	r5, #0
 801cd42:	dd05      	ble.n	801cd50 <_dtoa_r+0x958>
 801cd44:	4631      	mov	r1, r6
 801cd46:	462a      	mov	r2, r5
 801cd48:	4620      	mov	r0, r4
 801cd4a:	f001 f857 	bl	801ddfc <__lshift>
 801cd4e:	4606      	mov	r6, r0
 801cd50:	9b07      	ldr	r3, [sp, #28]
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	d04c      	beq.n	801cdf0 <_dtoa_r+0x9f8>
 801cd56:	6871      	ldr	r1, [r6, #4]
 801cd58:	4620      	mov	r0, r4
 801cd5a:	f000 fe50 	bl	801d9fe <_Balloc>
 801cd5e:	6932      	ldr	r2, [r6, #16]
 801cd60:	3202      	adds	r2, #2
 801cd62:	4605      	mov	r5, r0
 801cd64:	0092      	lsls	r2, r2, #2
 801cd66:	f106 010c 	add.w	r1, r6, #12
 801cd6a:	300c      	adds	r0, #12
 801cd6c:	f7fd fa70 	bl	801a250 <memcpy>
 801cd70:	2201      	movs	r2, #1
 801cd72:	4629      	mov	r1, r5
 801cd74:	4620      	mov	r0, r4
 801cd76:	f001 f841 	bl	801ddfc <__lshift>
 801cd7a:	9b00      	ldr	r3, [sp, #0]
 801cd7c:	f8cd b014 	str.w	fp, [sp, #20]
 801cd80:	f003 0301 	and.w	r3, r3, #1
 801cd84:	46b1      	mov	r9, r6
 801cd86:	9307      	str	r3, [sp, #28]
 801cd88:	4606      	mov	r6, r0
 801cd8a:	4639      	mov	r1, r7
 801cd8c:	9804      	ldr	r0, [sp, #16]
 801cd8e:	f7ff faa4 	bl	801c2da <quorem>
 801cd92:	4649      	mov	r1, r9
 801cd94:	4605      	mov	r5, r0
 801cd96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801cd9a:	9804      	ldr	r0, [sp, #16]
 801cd9c:	f001 f882 	bl	801dea4 <__mcmp>
 801cda0:	4632      	mov	r2, r6
 801cda2:	9000      	str	r0, [sp, #0]
 801cda4:	4639      	mov	r1, r7
 801cda6:	4620      	mov	r0, r4
 801cda8:	f001 f896 	bl	801ded8 <__mdiff>
 801cdac:	68c3      	ldr	r3, [r0, #12]
 801cdae:	4602      	mov	r2, r0
 801cdb0:	bb03      	cbnz	r3, 801cdf4 <_dtoa_r+0x9fc>
 801cdb2:	4601      	mov	r1, r0
 801cdb4:	9008      	str	r0, [sp, #32]
 801cdb6:	9804      	ldr	r0, [sp, #16]
 801cdb8:	f001 f874 	bl	801dea4 <__mcmp>
 801cdbc:	9a08      	ldr	r2, [sp, #32]
 801cdbe:	4603      	mov	r3, r0
 801cdc0:	4611      	mov	r1, r2
 801cdc2:	4620      	mov	r0, r4
 801cdc4:	9308      	str	r3, [sp, #32]
 801cdc6:	f000 fe4e 	bl	801da66 <_Bfree>
 801cdca:	9b08      	ldr	r3, [sp, #32]
 801cdcc:	b9a3      	cbnz	r3, 801cdf8 <_dtoa_r+0xa00>
 801cdce:	9a06      	ldr	r2, [sp, #24]
 801cdd0:	b992      	cbnz	r2, 801cdf8 <_dtoa_r+0xa00>
 801cdd2:	9a07      	ldr	r2, [sp, #28]
 801cdd4:	b982      	cbnz	r2, 801cdf8 <_dtoa_r+0xa00>
 801cdd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801cdda:	d029      	beq.n	801ce30 <_dtoa_r+0xa38>
 801cddc:	9b00      	ldr	r3, [sp, #0]
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	dd01      	ble.n	801cde6 <_dtoa_r+0x9ee>
 801cde2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801cde6:	9b05      	ldr	r3, [sp, #20]
 801cde8:	1c5d      	adds	r5, r3, #1
 801cdea:	f883 8000 	strb.w	r8, [r3]
 801cdee:	e782      	b.n	801ccf6 <_dtoa_r+0x8fe>
 801cdf0:	4630      	mov	r0, r6
 801cdf2:	e7c2      	b.n	801cd7a <_dtoa_r+0x982>
 801cdf4:	2301      	movs	r3, #1
 801cdf6:	e7e3      	b.n	801cdc0 <_dtoa_r+0x9c8>
 801cdf8:	9a00      	ldr	r2, [sp, #0]
 801cdfa:	2a00      	cmp	r2, #0
 801cdfc:	db04      	blt.n	801ce08 <_dtoa_r+0xa10>
 801cdfe:	d125      	bne.n	801ce4c <_dtoa_r+0xa54>
 801ce00:	9a06      	ldr	r2, [sp, #24]
 801ce02:	bb1a      	cbnz	r2, 801ce4c <_dtoa_r+0xa54>
 801ce04:	9a07      	ldr	r2, [sp, #28]
 801ce06:	bb0a      	cbnz	r2, 801ce4c <_dtoa_r+0xa54>
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	ddec      	ble.n	801cde6 <_dtoa_r+0x9ee>
 801ce0c:	2201      	movs	r2, #1
 801ce0e:	9904      	ldr	r1, [sp, #16]
 801ce10:	4620      	mov	r0, r4
 801ce12:	f000 fff3 	bl	801ddfc <__lshift>
 801ce16:	4639      	mov	r1, r7
 801ce18:	9004      	str	r0, [sp, #16]
 801ce1a:	f001 f843 	bl	801dea4 <__mcmp>
 801ce1e:	2800      	cmp	r0, #0
 801ce20:	dc03      	bgt.n	801ce2a <_dtoa_r+0xa32>
 801ce22:	d1e0      	bne.n	801cde6 <_dtoa_r+0x9ee>
 801ce24:	f018 0f01 	tst.w	r8, #1
 801ce28:	d0dd      	beq.n	801cde6 <_dtoa_r+0x9ee>
 801ce2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801ce2e:	d1d8      	bne.n	801cde2 <_dtoa_r+0x9ea>
 801ce30:	9b05      	ldr	r3, [sp, #20]
 801ce32:	9a05      	ldr	r2, [sp, #20]
 801ce34:	1c5d      	adds	r5, r3, #1
 801ce36:	2339      	movs	r3, #57	; 0x39
 801ce38:	7013      	strb	r3, [r2, #0]
 801ce3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ce3e:	2b39      	cmp	r3, #57	; 0x39
 801ce40:	f105 32ff 	add.w	r2, r5, #4294967295
 801ce44:	d04f      	beq.n	801cee6 <_dtoa_r+0xaee>
 801ce46:	3301      	adds	r3, #1
 801ce48:	7013      	strb	r3, [r2, #0]
 801ce4a:	e754      	b.n	801ccf6 <_dtoa_r+0x8fe>
 801ce4c:	9a05      	ldr	r2, [sp, #20]
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	f102 0501 	add.w	r5, r2, #1
 801ce54:	dd06      	ble.n	801ce64 <_dtoa_r+0xa6c>
 801ce56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801ce5a:	d0e9      	beq.n	801ce30 <_dtoa_r+0xa38>
 801ce5c:	f108 0801 	add.w	r8, r8, #1
 801ce60:	9b05      	ldr	r3, [sp, #20]
 801ce62:	e7c2      	b.n	801cdea <_dtoa_r+0x9f2>
 801ce64:	9a02      	ldr	r2, [sp, #8]
 801ce66:	f805 8c01 	strb.w	r8, [r5, #-1]
 801ce6a:	eba5 030b 	sub.w	r3, r5, fp
 801ce6e:	4293      	cmp	r3, r2
 801ce70:	d021      	beq.n	801ceb6 <_dtoa_r+0xabe>
 801ce72:	2300      	movs	r3, #0
 801ce74:	220a      	movs	r2, #10
 801ce76:	9904      	ldr	r1, [sp, #16]
 801ce78:	4620      	mov	r0, r4
 801ce7a:	f000 fe0b 	bl	801da94 <__multadd>
 801ce7e:	45b1      	cmp	r9, r6
 801ce80:	9004      	str	r0, [sp, #16]
 801ce82:	f04f 0300 	mov.w	r3, #0
 801ce86:	f04f 020a 	mov.w	r2, #10
 801ce8a:	4649      	mov	r1, r9
 801ce8c:	4620      	mov	r0, r4
 801ce8e:	d105      	bne.n	801ce9c <_dtoa_r+0xaa4>
 801ce90:	f000 fe00 	bl	801da94 <__multadd>
 801ce94:	4681      	mov	r9, r0
 801ce96:	4606      	mov	r6, r0
 801ce98:	9505      	str	r5, [sp, #20]
 801ce9a:	e776      	b.n	801cd8a <_dtoa_r+0x992>
 801ce9c:	f000 fdfa 	bl	801da94 <__multadd>
 801cea0:	4631      	mov	r1, r6
 801cea2:	4681      	mov	r9, r0
 801cea4:	2300      	movs	r3, #0
 801cea6:	220a      	movs	r2, #10
 801cea8:	4620      	mov	r0, r4
 801ceaa:	f000 fdf3 	bl	801da94 <__multadd>
 801ceae:	4606      	mov	r6, r0
 801ceb0:	e7f2      	b.n	801ce98 <_dtoa_r+0xaa0>
 801ceb2:	f04f 0900 	mov.w	r9, #0
 801ceb6:	2201      	movs	r2, #1
 801ceb8:	9904      	ldr	r1, [sp, #16]
 801ceba:	4620      	mov	r0, r4
 801cebc:	f000 ff9e 	bl	801ddfc <__lshift>
 801cec0:	4639      	mov	r1, r7
 801cec2:	9004      	str	r0, [sp, #16]
 801cec4:	f000 ffee 	bl	801dea4 <__mcmp>
 801cec8:	2800      	cmp	r0, #0
 801ceca:	dcb6      	bgt.n	801ce3a <_dtoa_r+0xa42>
 801cecc:	d102      	bne.n	801ced4 <_dtoa_r+0xadc>
 801cece:	f018 0f01 	tst.w	r8, #1
 801ced2:	d1b2      	bne.n	801ce3a <_dtoa_r+0xa42>
 801ced4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ced8:	2b30      	cmp	r3, #48	; 0x30
 801ceda:	f105 32ff 	add.w	r2, r5, #4294967295
 801cede:	f47f af0a 	bne.w	801ccf6 <_dtoa_r+0x8fe>
 801cee2:	4615      	mov	r5, r2
 801cee4:	e7f6      	b.n	801ced4 <_dtoa_r+0xadc>
 801cee6:	4593      	cmp	fp, r2
 801cee8:	d105      	bne.n	801cef6 <_dtoa_r+0xafe>
 801ceea:	2331      	movs	r3, #49	; 0x31
 801ceec:	f10a 0a01 	add.w	sl, sl, #1
 801cef0:	f88b 3000 	strb.w	r3, [fp]
 801cef4:	e6ff      	b.n	801ccf6 <_dtoa_r+0x8fe>
 801cef6:	4615      	mov	r5, r2
 801cef8:	e79f      	b.n	801ce3a <_dtoa_r+0xa42>
 801cefa:	f8df b064 	ldr.w	fp, [pc, #100]	; 801cf60 <_dtoa_r+0xb68>
 801cefe:	e007      	b.n	801cf10 <_dtoa_r+0xb18>
 801cf00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cf02:	f8df b060 	ldr.w	fp, [pc, #96]	; 801cf64 <_dtoa_r+0xb6c>
 801cf06:	b11b      	cbz	r3, 801cf10 <_dtoa_r+0xb18>
 801cf08:	f10b 0308 	add.w	r3, fp, #8
 801cf0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cf0e:	6013      	str	r3, [r2, #0]
 801cf10:	4658      	mov	r0, fp
 801cf12:	b017      	add	sp, #92	; 0x5c
 801cf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf18:	9b06      	ldr	r3, [sp, #24]
 801cf1a:	2b01      	cmp	r3, #1
 801cf1c:	f77f ae35 	ble.w	801cb8a <_dtoa_r+0x792>
 801cf20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf22:	9307      	str	r3, [sp, #28]
 801cf24:	e649      	b.n	801cbba <_dtoa_r+0x7c2>
 801cf26:	9b02      	ldr	r3, [sp, #8]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	dc03      	bgt.n	801cf34 <_dtoa_r+0xb3c>
 801cf2c:	9b06      	ldr	r3, [sp, #24]
 801cf2e:	2b02      	cmp	r3, #2
 801cf30:	f73f aecc 	bgt.w	801cccc <_dtoa_r+0x8d4>
 801cf34:	465d      	mov	r5, fp
 801cf36:	4639      	mov	r1, r7
 801cf38:	9804      	ldr	r0, [sp, #16]
 801cf3a:	f7ff f9ce 	bl	801c2da <quorem>
 801cf3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801cf42:	f805 8b01 	strb.w	r8, [r5], #1
 801cf46:	9a02      	ldr	r2, [sp, #8]
 801cf48:	eba5 030b 	sub.w	r3, r5, fp
 801cf4c:	429a      	cmp	r2, r3
 801cf4e:	ddb0      	ble.n	801ceb2 <_dtoa_r+0xaba>
 801cf50:	2300      	movs	r3, #0
 801cf52:	220a      	movs	r2, #10
 801cf54:	9904      	ldr	r1, [sp, #16]
 801cf56:	4620      	mov	r0, r4
 801cf58:	f000 fd9c 	bl	801da94 <__multadd>
 801cf5c:	9004      	str	r0, [sp, #16]
 801cf5e:	e7ea      	b.n	801cf36 <_dtoa_r+0xb3e>
 801cf60:	0801f4cd 	.word	0x0801f4cd
 801cf64:	0801f548 	.word	0x0801f548

0801cf68 <__sflush_r>:
 801cf68:	898a      	ldrh	r2, [r1, #12]
 801cf6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf6e:	4605      	mov	r5, r0
 801cf70:	0710      	lsls	r0, r2, #28
 801cf72:	460c      	mov	r4, r1
 801cf74:	d458      	bmi.n	801d028 <__sflush_r+0xc0>
 801cf76:	684b      	ldr	r3, [r1, #4]
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	dc05      	bgt.n	801cf88 <__sflush_r+0x20>
 801cf7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	dc02      	bgt.n	801cf88 <__sflush_r+0x20>
 801cf82:	2000      	movs	r0, #0
 801cf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cf8a:	2e00      	cmp	r6, #0
 801cf8c:	d0f9      	beq.n	801cf82 <__sflush_r+0x1a>
 801cf8e:	2300      	movs	r3, #0
 801cf90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cf94:	682f      	ldr	r7, [r5, #0]
 801cf96:	6a21      	ldr	r1, [r4, #32]
 801cf98:	602b      	str	r3, [r5, #0]
 801cf9a:	d032      	beq.n	801d002 <__sflush_r+0x9a>
 801cf9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cf9e:	89a3      	ldrh	r3, [r4, #12]
 801cfa0:	075a      	lsls	r2, r3, #29
 801cfa2:	d505      	bpl.n	801cfb0 <__sflush_r+0x48>
 801cfa4:	6863      	ldr	r3, [r4, #4]
 801cfa6:	1ac0      	subs	r0, r0, r3
 801cfa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cfaa:	b10b      	cbz	r3, 801cfb0 <__sflush_r+0x48>
 801cfac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cfae:	1ac0      	subs	r0, r0, r3
 801cfb0:	2300      	movs	r3, #0
 801cfb2:	4602      	mov	r2, r0
 801cfb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cfb6:	6a21      	ldr	r1, [r4, #32]
 801cfb8:	4628      	mov	r0, r5
 801cfba:	47b0      	blx	r6
 801cfbc:	1c43      	adds	r3, r0, #1
 801cfbe:	89a3      	ldrh	r3, [r4, #12]
 801cfc0:	d106      	bne.n	801cfd0 <__sflush_r+0x68>
 801cfc2:	6829      	ldr	r1, [r5, #0]
 801cfc4:	291d      	cmp	r1, #29
 801cfc6:	d848      	bhi.n	801d05a <__sflush_r+0xf2>
 801cfc8:	4a29      	ldr	r2, [pc, #164]	; (801d070 <__sflush_r+0x108>)
 801cfca:	40ca      	lsrs	r2, r1
 801cfcc:	07d6      	lsls	r6, r2, #31
 801cfce:	d544      	bpl.n	801d05a <__sflush_r+0xf2>
 801cfd0:	2200      	movs	r2, #0
 801cfd2:	6062      	str	r2, [r4, #4]
 801cfd4:	04d9      	lsls	r1, r3, #19
 801cfd6:	6922      	ldr	r2, [r4, #16]
 801cfd8:	6022      	str	r2, [r4, #0]
 801cfda:	d504      	bpl.n	801cfe6 <__sflush_r+0x7e>
 801cfdc:	1c42      	adds	r2, r0, #1
 801cfde:	d101      	bne.n	801cfe4 <__sflush_r+0x7c>
 801cfe0:	682b      	ldr	r3, [r5, #0]
 801cfe2:	b903      	cbnz	r3, 801cfe6 <__sflush_r+0x7e>
 801cfe4:	6560      	str	r0, [r4, #84]	; 0x54
 801cfe6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cfe8:	602f      	str	r7, [r5, #0]
 801cfea:	2900      	cmp	r1, #0
 801cfec:	d0c9      	beq.n	801cf82 <__sflush_r+0x1a>
 801cfee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cff2:	4299      	cmp	r1, r3
 801cff4:	d002      	beq.n	801cffc <__sflush_r+0x94>
 801cff6:	4628      	mov	r0, r5
 801cff8:	f001 f90e 	bl	801e218 <_free_r>
 801cffc:	2000      	movs	r0, #0
 801cffe:	6360      	str	r0, [r4, #52]	; 0x34
 801d000:	e7c0      	b.n	801cf84 <__sflush_r+0x1c>
 801d002:	2301      	movs	r3, #1
 801d004:	4628      	mov	r0, r5
 801d006:	47b0      	blx	r6
 801d008:	1c41      	adds	r1, r0, #1
 801d00a:	d1c8      	bne.n	801cf9e <__sflush_r+0x36>
 801d00c:	682b      	ldr	r3, [r5, #0]
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d0c5      	beq.n	801cf9e <__sflush_r+0x36>
 801d012:	2b1d      	cmp	r3, #29
 801d014:	d001      	beq.n	801d01a <__sflush_r+0xb2>
 801d016:	2b16      	cmp	r3, #22
 801d018:	d101      	bne.n	801d01e <__sflush_r+0xb6>
 801d01a:	602f      	str	r7, [r5, #0]
 801d01c:	e7b1      	b.n	801cf82 <__sflush_r+0x1a>
 801d01e:	89a3      	ldrh	r3, [r4, #12]
 801d020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d024:	81a3      	strh	r3, [r4, #12]
 801d026:	e7ad      	b.n	801cf84 <__sflush_r+0x1c>
 801d028:	690f      	ldr	r7, [r1, #16]
 801d02a:	2f00      	cmp	r7, #0
 801d02c:	d0a9      	beq.n	801cf82 <__sflush_r+0x1a>
 801d02e:	0793      	lsls	r3, r2, #30
 801d030:	680e      	ldr	r6, [r1, #0]
 801d032:	bf08      	it	eq
 801d034:	694b      	ldreq	r3, [r1, #20]
 801d036:	600f      	str	r7, [r1, #0]
 801d038:	bf18      	it	ne
 801d03a:	2300      	movne	r3, #0
 801d03c:	eba6 0807 	sub.w	r8, r6, r7
 801d040:	608b      	str	r3, [r1, #8]
 801d042:	f1b8 0f00 	cmp.w	r8, #0
 801d046:	dd9c      	ble.n	801cf82 <__sflush_r+0x1a>
 801d048:	4643      	mov	r3, r8
 801d04a:	463a      	mov	r2, r7
 801d04c:	6a21      	ldr	r1, [r4, #32]
 801d04e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d050:	4628      	mov	r0, r5
 801d052:	47b0      	blx	r6
 801d054:	2800      	cmp	r0, #0
 801d056:	dc06      	bgt.n	801d066 <__sflush_r+0xfe>
 801d058:	89a3      	ldrh	r3, [r4, #12]
 801d05a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d05e:	81a3      	strh	r3, [r4, #12]
 801d060:	f04f 30ff 	mov.w	r0, #4294967295
 801d064:	e78e      	b.n	801cf84 <__sflush_r+0x1c>
 801d066:	4407      	add	r7, r0
 801d068:	eba8 0800 	sub.w	r8, r8, r0
 801d06c:	e7e9      	b.n	801d042 <__sflush_r+0xda>
 801d06e:	bf00      	nop
 801d070:	20400001 	.word	0x20400001

0801d074 <_fflush_r>:
 801d074:	b538      	push	{r3, r4, r5, lr}
 801d076:	690b      	ldr	r3, [r1, #16]
 801d078:	4605      	mov	r5, r0
 801d07a:	460c      	mov	r4, r1
 801d07c:	b1db      	cbz	r3, 801d0b6 <_fflush_r+0x42>
 801d07e:	b118      	cbz	r0, 801d088 <_fflush_r+0x14>
 801d080:	6983      	ldr	r3, [r0, #24]
 801d082:	b90b      	cbnz	r3, 801d088 <_fflush_r+0x14>
 801d084:	f000 f860 	bl	801d148 <__sinit>
 801d088:	4b0c      	ldr	r3, [pc, #48]	; (801d0bc <_fflush_r+0x48>)
 801d08a:	429c      	cmp	r4, r3
 801d08c:	d109      	bne.n	801d0a2 <_fflush_r+0x2e>
 801d08e:	686c      	ldr	r4, [r5, #4]
 801d090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d094:	b17b      	cbz	r3, 801d0b6 <_fflush_r+0x42>
 801d096:	4621      	mov	r1, r4
 801d098:	4628      	mov	r0, r5
 801d09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d09e:	f7ff bf63 	b.w	801cf68 <__sflush_r>
 801d0a2:	4b07      	ldr	r3, [pc, #28]	; (801d0c0 <_fflush_r+0x4c>)
 801d0a4:	429c      	cmp	r4, r3
 801d0a6:	d101      	bne.n	801d0ac <_fflush_r+0x38>
 801d0a8:	68ac      	ldr	r4, [r5, #8]
 801d0aa:	e7f1      	b.n	801d090 <_fflush_r+0x1c>
 801d0ac:	4b05      	ldr	r3, [pc, #20]	; (801d0c4 <_fflush_r+0x50>)
 801d0ae:	429c      	cmp	r4, r3
 801d0b0:	bf08      	it	eq
 801d0b2:	68ec      	ldreq	r4, [r5, #12]
 801d0b4:	e7ec      	b.n	801d090 <_fflush_r+0x1c>
 801d0b6:	2000      	movs	r0, #0
 801d0b8:	bd38      	pop	{r3, r4, r5, pc}
 801d0ba:	bf00      	nop
 801d0bc:	0801f578 	.word	0x0801f578
 801d0c0:	0801f598 	.word	0x0801f598
 801d0c4:	0801f558 	.word	0x0801f558

0801d0c8 <std>:
 801d0c8:	2300      	movs	r3, #0
 801d0ca:	b510      	push	{r4, lr}
 801d0cc:	4604      	mov	r4, r0
 801d0ce:	e9c0 3300 	strd	r3, r3, [r0]
 801d0d2:	6083      	str	r3, [r0, #8]
 801d0d4:	8181      	strh	r1, [r0, #12]
 801d0d6:	6643      	str	r3, [r0, #100]	; 0x64
 801d0d8:	81c2      	strh	r2, [r0, #14]
 801d0da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d0de:	6183      	str	r3, [r0, #24]
 801d0e0:	4619      	mov	r1, r3
 801d0e2:	2208      	movs	r2, #8
 801d0e4:	305c      	adds	r0, #92	; 0x5c
 801d0e6:	f7fd f8be 	bl	801a266 <memset>
 801d0ea:	4b05      	ldr	r3, [pc, #20]	; (801d100 <std+0x38>)
 801d0ec:	6263      	str	r3, [r4, #36]	; 0x24
 801d0ee:	4b05      	ldr	r3, [pc, #20]	; (801d104 <std+0x3c>)
 801d0f0:	62a3      	str	r3, [r4, #40]	; 0x28
 801d0f2:	4b05      	ldr	r3, [pc, #20]	; (801d108 <std+0x40>)
 801d0f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d0f6:	4b05      	ldr	r3, [pc, #20]	; (801d10c <std+0x44>)
 801d0f8:	6224      	str	r4, [r4, #32]
 801d0fa:	6323      	str	r3, [r4, #48]	; 0x30
 801d0fc:	bd10      	pop	{r4, pc}
 801d0fe:	bf00      	nop
 801d100:	0801e701 	.word	0x0801e701
 801d104:	0801e723 	.word	0x0801e723
 801d108:	0801e75b 	.word	0x0801e75b
 801d10c:	0801e77f 	.word	0x0801e77f

0801d110 <_cleanup_r>:
 801d110:	4901      	ldr	r1, [pc, #4]	; (801d118 <_cleanup_r+0x8>)
 801d112:	f000 b885 	b.w	801d220 <_fwalk_reent>
 801d116:	bf00      	nop
 801d118:	0801d075 	.word	0x0801d075

0801d11c <__sfmoreglue>:
 801d11c:	b570      	push	{r4, r5, r6, lr}
 801d11e:	1e4a      	subs	r2, r1, #1
 801d120:	2568      	movs	r5, #104	; 0x68
 801d122:	4355      	muls	r5, r2
 801d124:	460e      	mov	r6, r1
 801d126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d12a:	f001 f8c3 	bl	801e2b4 <_malloc_r>
 801d12e:	4604      	mov	r4, r0
 801d130:	b140      	cbz	r0, 801d144 <__sfmoreglue+0x28>
 801d132:	2100      	movs	r1, #0
 801d134:	e9c0 1600 	strd	r1, r6, [r0]
 801d138:	300c      	adds	r0, #12
 801d13a:	60a0      	str	r0, [r4, #8]
 801d13c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d140:	f7fd f891 	bl	801a266 <memset>
 801d144:	4620      	mov	r0, r4
 801d146:	bd70      	pop	{r4, r5, r6, pc}

0801d148 <__sinit>:
 801d148:	6983      	ldr	r3, [r0, #24]
 801d14a:	b510      	push	{r4, lr}
 801d14c:	4604      	mov	r4, r0
 801d14e:	bb33      	cbnz	r3, 801d19e <__sinit+0x56>
 801d150:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801d154:	6503      	str	r3, [r0, #80]	; 0x50
 801d156:	4b12      	ldr	r3, [pc, #72]	; (801d1a0 <__sinit+0x58>)
 801d158:	4a12      	ldr	r2, [pc, #72]	; (801d1a4 <__sinit+0x5c>)
 801d15a:	681b      	ldr	r3, [r3, #0]
 801d15c:	6282      	str	r2, [r0, #40]	; 0x28
 801d15e:	4298      	cmp	r0, r3
 801d160:	bf04      	itt	eq
 801d162:	2301      	moveq	r3, #1
 801d164:	6183      	streq	r3, [r0, #24]
 801d166:	f000 f81f 	bl	801d1a8 <__sfp>
 801d16a:	6060      	str	r0, [r4, #4]
 801d16c:	4620      	mov	r0, r4
 801d16e:	f000 f81b 	bl	801d1a8 <__sfp>
 801d172:	60a0      	str	r0, [r4, #8]
 801d174:	4620      	mov	r0, r4
 801d176:	f000 f817 	bl	801d1a8 <__sfp>
 801d17a:	2200      	movs	r2, #0
 801d17c:	60e0      	str	r0, [r4, #12]
 801d17e:	2104      	movs	r1, #4
 801d180:	6860      	ldr	r0, [r4, #4]
 801d182:	f7ff ffa1 	bl	801d0c8 <std>
 801d186:	2201      	movs	r2, #1
 801d188:	2109      	movs	r1, #9
 801d18a:	68a0      	ldr	r0, [r4, #8]
 801d18c:	f7ff ff9c 	bl	801d0c8 <std>
 801d190:	2202      	movs	r2, #2
 801d192:	2112      	movs	r1, #18
 801d194:	68e0      	ldr	r0, [r4, #12]
 801d196:	f7ff ff97 	bl	801d0c8 <std>
 801d19a:	2301      	movs	r3, #1
 801d19c:	61a3      	str	r3, [r4, #24]
 801d19e:	bd10      	pop	{r4, pc}
 801d1a0:	0801f4ac 	.word	0x0801f4ac
 801d1a4:	0801d111 	.word	0x0801d111

0801d1a8 <__sfp>:
 801d1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1aa:	4b1b      	ldr	r3, [pc, #108]	; (801d218 <__sfp+0x70>)
 801d1ac:	681e      	ldr	r6, [r3, #0]
 801d1ae:	69b3      	ldr	r3, [r6, #24]
 801d1b0:	4607      	mov	r7, r0
 801d1b2:	b913      	cbnz	r3, 801d1ba <__sfp+0x12>
 801d1b4:	4630      	mov	r0, r6
 801d1b6:	f7ff ffc7 	bl	801d148 <__sinit>
 801d1ba:	3648      	adds	r6, #72	; 0x48
 801d1bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d1c0:	3b01      	subs	r3, #1
 801d1c2:	d503      	bpl.n	801d1cc <__sfp+0x24>
 801d1c4:	6833      	ldr	r3, [r6, #0]
 801d1c6:	b133      	cbz	r3, 801d1d6 <__sfp+0x2e>
 801d1c8:	6836      	ldr	r6, [r6, #0]
 801d1ca:	e7f7      	b.n	801d1bc <__sfp+0x14>
 801d1cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d1d0:	b16d      	cbz	r5, 801d1ee <__sfp+0x46>
 801d1d2:	3468      	adds	r4, #104	; 0x68
 801d1d4:	e7f4      	b.n	801d1c0 <__sfp+0x18>
 801d1d6:	2104      	movs	r1, #4
 801d1d8:	4638      	mov	r0, r7
 801d1da:	f7ff ff9f 	bl	801d11c <__sfmoreglue>
 801d1de:	6030      	str	r0, [r6, #0]
 801d1e0:	2800      	cmp	r0, #0
 801d1e2:	d1f1      	bne.n	801d1c8 <__sfp+0x20>
 801d1e4:	230c      	movs	r3, #12
 801d1e6:	603b      	str	r3, [r7, #0]
 801d1e8:	4604      	mov	r4, r0
 801d1ea:	4620      	mov	r0, r4
 801d1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1ee:	4b0b      	ldr	r3, [pc, #44]	; (801d21c <__sfp+0x74>)
 801d1f0:	6665      	str	r5, [r4, #100]	; 0x64
 801d1f2:	e9c4 5500 	strd	r5, r5, [r4]
 801d1f6:	60a5      	str	r5, [r4, #8]
 801d1f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801d1fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801d200:	2208      	movs	r2, #8
 801d202:	4629      	mov	r1, r5
 801d204:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d208:	f7fd f82d 	bl	801a266 <memset>
 801d20c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d210:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d214:	e7e9      	b.n	801d1ea <__sfp+0x42>
 801d216:	bf00      	nop
 801d218:	0801f4ac 	.word	0x0801f4ac
 801d21c:	ffff0001 	.word	0xffff0001

0801d220 <_fwalk_reent>:
 801d220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d224:	4680      	mov	r8, r0
 801d226:	4689      	mov	r9, r1
 801d228:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d22c:	2600      	movs	r6, #0
 801d22e:	b914      	cbnz	r4, 801d236 <_fwalk_reent+0x16>
 801d230:	4630      	mov	r0, r6
 801d232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d236:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801d23a:	3f01      	subs	r7, #1
 801d23c:	d501      	bpl.n	801d242 <_fwalk_reent+0x22>
 801d23e:	6824      	ldr	r4, [r4, #0]
 801d240:	e7f5      	b.n	801d22e <_fwalk_reent+0xe>
 801d242:	89ab      	ldrh	r3, [r5, #12]
 801d244:	2b01      	cmp	r3, #1
 801d246:	d907      	bls.n	801d258 <_fwalk_reent+0x38>
 801d248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d24c:	3301      	adds	r3, #1
 801d24e:	d003      	beq.n	801d258 <_fwalk_reent+0x38>
 801d250:	4629      	mov	r1, r5
 801d252:	4640      	mov	r0, r8
 801d254:	47c8      	blx	r9
 801d256:	4306      	orrs	r6, r0
 801d258:	3568      	adds	r5, #104	; 0x68
 801d25a:	e7ee      	b.n	801d23a <_fwalk_reent+0x1a>

0801d25c <rshift>:
 801d25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d25e:	6906      	ldr	r6, [r0, #16]
 801d260:	114b      	asrs	r3, r1, #5
 801d262:	429e      	cmp	r6, r3
 801d264:	f100 0414 	add.w	r4, r0, #20
 801d268:	dd30      	ble.n	801d2cc <rshift+0x70>
 801d26a:	f011 011f 	ands.w	r1, r1, #31
 801d26e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801d272:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801d276:	d108      	bne.n	801d28a <rshift+0x2e>
 801d278:	4621      	mov	r1, r4
 801d27a:	42b2      	cmp	r2, r6
 801d27c:	460b      	mov	r3, r1
 801d27e:	d211      	bcs.n	801d2a4 <rshift+0x48>
 801d280:	f852 3b04 	ldr.w	r3, [r2], #4
 801d284:	f841 3b04 	str.w	r3, [r1], #4
 801d288:	e7f7      	b.n	801d27a <rshift+0x1e>
 801d28a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801d28e:	f1c1 0c20 	rsb	ip, r1, #32
 801d292:	40cd      	lsrs	r5, r1
 801d294:	3204      	adds	r2, #4
 801d296:	4623      	mov	r3, r4
 801d298:	42b2      	cmp	r2, r6
 801d29a:	4617      	mov	r7, r2
 801d29c:	d30c      	bcc.n	801d2b8 <rshift+0x5c>
 801d29e:	601d      	str	r5, [r3, #0]
 801d2a0:	b105      	cbz	r5, 801d2a4 <rshift+0x48>
 801d2a2:	3304      	adds	r3, #4
 801d2a4:	1b1a      	subs	r2, r3, r4
 801d2a6:	42a3      	cmp	r3, r4
 801d2a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d2ac:	bf08      	it	eq
 801d2ae:	2300      	moveq	r3, #0
 801d2b0:	6102      	str	r2, [r0, #16]
 801d2b2:	bf08      	it	eq
 801d2b4:	6143      	streq	r3, [r0, #20]
 801d2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2b8:	683f      	ldr	r7, [r7, #0]
 801d2ba:	fa07 f70c 	lsl.w	r7, r7, ip
 801d2be:	433d      	orrs	r5, r7
 801d2c0:	f843 5b04 	str.w	r5, [r3], #4
 801d2c4:	f852 5b04 	ldr.w	r5, [r2], #4
 801d2c8:	40cd      	lsrs	r5, r1
 801d2ca:	e7e5      	b.n	801d298 <rshift+0x3c>
 801d2cc:	4623      	mov	r3, r4
 801d2ce:	e7e9      	b.n	801d2a4 <rshift+0x48>

0801d2d0 <__hexdig_fun>:
 801d2d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d2d4:	2b09      	cmp	r3, #9
 801d2d6:	d802      	bhi.n	801d2de <__hexdig_fun+0xe>
 801d2d8:	3820      	subs	r0, #32
 801d2da:	b2c0      	uxtb	r0, r0
 801d2dc:	4770      	bx	lr
 801d2de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d2e2:	2b05      	cmp	r3, #5
 801d2e4:	d801      	bhi.n	801d2ea <__hexdig_fun+0x1a>
 801d2e6:	3847      	subs	r0, #71	; 0x47
 801d2e8:	e7f7      	b.n	801d2da <__hexdig_fun+0xa>
 801d2ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d2ee:	2b05      	cmp	r3, #5
 801d2f0:	d801      	bhi.n	801d2f6 <__hexdig_fun+0x26>
 801d2f2:	3827      	subs	r0, #39	; 0x27
 801d2f4:	e7f1      	b.n	801d2da <__hexdig_fun+0xa>
 801d2f6:	2000      	movs	r0, #0
 801d2f8:	4770      	bx	lr

0801d2fa <__gethex>:
 801d2fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2fe:	b08b      	sub	sp, #44	; 0x2c
 801d300:	468a      	mov	sl, r1
 801d302:	9002      	str	r0, [sp, #8]
 801d304:	9816      	ldr	r0, [sp, #88]	; 0x58
 801d306:	9306      	str	r3, [sp, #24]
 801d308:	4690      	mov	r8, r2
 801d30a:	f000 fad0 	bl	801d8ae <__localeconv_l>
 801d30e:	6803      	ldr	r3, [r0, #0]
 801d310:	9303      	str	r3, [sp, #12]
 801d312:	4618      	mov	r0, r3
 801d314:	f7e2 ff6c 	bl	80001f0 <strlen>
 801d318:	9b03      	ldr	r3, [sp, #12]
 801d31a:	9001      	str	r0, [sp, #4]
 801d31c:	4403      	add	r3, r0
 801d31e:	f04f 0b00 	mov.w	fp, #0
 801d322:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d326:	9307      	str	r3, [sp, #28]
 801d328:	f8da 3000 	ldr.w	r3, [sl]
 801d32c:	3302      	adds	r3, #2
 801d32e:	461f      	mov	r7, r3
 801d330:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d334:	2830      	cmp	r0, #48	; 0x30
 801d336:	d06c      	beq.n	801d412 <__gethex+0x118>
 801d338:	f7ff ffca 	bl	801d2d0 <__hexdig_fun>
 801d33c:	4604      	mov	r4, r0
 801d33e:	2800      	cmp	r0, #0
 801d340:	d16a      	bne.n	801d418 <__gethex+0x11e>
 801d342:	9a01      	ldr	r2, [sp, #4]
 801d344:	9903      	ldr	r1, [sp, #12]
 801d346:	4638      	mov	r0, r7
 801d348:	f001 fa1d 	bl	801e786 <strncmp>
 801d34c:	2800      	cmp	r0, #0
 801d34e:	d166      	bne.n	801d41e <__gethex+0x124>
 801d350:	9b01      	ldr	r3, [sp, #4]
 801d352:	5cf8      	ldrb	r0, [r7, r3]
 801d354:	18fe      	adds	r6, r7, r3
 801d356:	f7ff ffbb 	bl	801d2d0 <__hexdig_fun>
 801d35a:	2800      	cmp	r0, #0
 801d35c:	d062      	beq.n	801d424 <__gethex+0x12a>
 801d35e:	4633      	mov	r3, r6
 801d360:	7818      	ldrb	r0, [r3, #0]
 801d362:	2830      	cmp	r0, #48	; 0x30
 801d364:	461f      	mov	r7, r3
 801d366:	f103 0301 	add.w	r3, r3, #1
 801d36a:	d0f9      	beq.n	801d360 <__gethex+0x66>
 801d36c:	f7ff ffb0 	bl	801d2d0 <__hexdig_fun>
 801d370:	fab0 f580 	clz	r5, r0
 801d374:	096d      	lsrs	r5, r5, #5
 801d376:	4634      	mov	r4, r6
 801d378:	f04f 0b01 	mov.w	fp, #1
 801d37c:	463a      	mov	r2, r7
 801d37e:	4616      	mov	r6, r2
 801d380:	3201      	adds	r2, #1
 801d382:	7830      	ldrb	r0, [r6, #0]
 801d384:	f7ff ffa4 	bl	801d2d0 <__hexdig_fun>
 801d388:	2800      	cmp	r0, #0
 801d38a:	d1f8      	bne.n	801d37e <__gethex+0x84>
 801d38c:	9a01      	ldr	r2, [sp, #4]
 801d38e:	9903      	ldr	r1, [sp, #12]
 801d390:	4630      	mov	r0, r6
 801d392:	f001 f9f8 	bl	801e786 <strncmp>
 801d396:	b950      	cbnz	r0, 801d3ae <__gethex+0xb4>
 801d398:	b954      	cbnz	r4, 801d3b0 <__gethex+0xb6>
 801d39a:	9b01      	ldr	r3, [sp, #4]
 801d39c:	18f4      	adds	r4, r6, r3
 801d39e:	4622      	mov	r2, r4
 801d3a0:	4616      	mov	r6, r2
 801d3a2:	3201      	adds	r2, #1
 801d3a4:	7830      	ldrb	r0, [r6, #0]
 801d3a6:	f7ff ff93 	bl	801d2d0 <__hexdig_fun>
 801d3aa:	2800      	cmp	r0, #0
 801d3ac:	d1f8      	bne.n	801d3a0 <__gethex+0xa6>
 801d3ae:	b10c      	cbz	r4, 801d3b4 <__gethex+0xba>
 801d3b0:	1ba4      	subs	r4, r4, r6
 801d3b2:	00a4      	lsls	r4, r4, #2
 801d3b4:	7833      	ldrb	r3, [r6, #0]
 801d3b6:	2b50      	cmp	r3, #80	; 0x50
 801d3b8:	d001      	beq.n	801d3be <__gethex+0xc4>
 801d3ba:	2b70      	cmp	r3, #112	; 0x70
 801d3bc:	d140      	bne.n	801d440 <__gethex+0x146>
 801d3be:	7873      	ldrb	r3, [r6, #1]
 801d3c0:	2b2b      	cmp	r3, #43	; 0x2b
 801d3c2:	d031      	beq.n	801d428 <__gethex+0x12e>
 801d3c4:	2b2d      	cmp	r3, #45	; 0x2d
 801d3c6:	d033      	beq.n	801d430 <__gethex+0x136>
 801d3c8:	1c71      	adds	r1, r6, #1
 801d3ca:	f04f 0900 	mov.w	r9, #0
 801d3ce:	7808      	ldrb	r0, [r1, #0]
 801d3d0:	f7ff ff7e 	bl	801d2d0 <__hexdig_fun>
 801d3d4:	1e43      	subs	r3, r0, #1
 801d3d6:	b2db      	uxtb	r3, r3
 801d3d8:	2b18      	cmp	r3, #24
 801d3da:	d831      	bhi.n	801d440 <__gethex+0x146>
 801d3dc:	f1a0 0210 	sub.w	r2, r0, #16
 801d3e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d3e4:	f7ff ff74 	bl	801d2d0 <__hexdig_fun>
 801d3e8:	1e43      	subs	r3, r0, #1
 801d3ea:	b2db      	uxtb	r3, r3
 801d3ec:	2b18      	cmp	r3, #24
 801d3ee:	d922      	bls.n	801d436 <__gethex+0x13c>
 801d3f0:	f1b9 0f00 	cmp.w	r9, #0
 801d3f4:	d000      	beq.n	801d3f8 <__gethex+0xfe>
 801d3f6:	4252      	negs	r2, r2
 801d3f8:	4414      	add	r4, r2
 801d3fa:	f8ca 1000 	str.w	r1, [sl]
 801d3fe:	b30d      	cbz	r5, 801d444 <__gethex+0x14a>
 801d400:	f1bb 0f00 	cmp.w	fp, #0
 801d404:	bf0c      	ite	eq
 801d406:	2706      	moveq	r7, #6
 801d408:	2700      	movne	r7, #0
 801d40a:	4638      	mov	r0, r7
 801d40c:	b00b      	add	sp, #44	; 0x2c
 801d40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d412:	f10b 0b01 	add.w	fp, fp, #1
 801d416:	e78a      	b.n	801d32e <__gethex+0x34>
 801d418:	2500      	movs	r5, #0
 801d41a:	462c      	mov	r4, r5
 801d41c:	e7ae      	b.n	801d37c <__gethex+0x82>
 801d41e:	463e      	mov	r6, r7
 801d420:	2501      	movs	r5, #1
 801d422:	e7c7      	b.n	801d3b4 <__gethex+0xba>
 801d424:	4604      	mov	r4, r0
 801d426:	e7fb      	b.n	801d420 <__gethex+0x126>
 801d428:	f04f 0900 	mov.w	r9, #0
 801d42c:	1cb1      	adds	r1, r6, #2
 801d42e:	e7ce      	b.n	801d3ce <__gethex+0xd4>
 801d430:	f04f 0901 	mov.w	r9, #1
 801d434:	e7fa      	b.n	801d42c <__gethex+0x132>
 801d436:	230a      	movs	r3, #10
 801d438:	fb03 0202 	mla	r2, r3, r2, r0
 801d43c:	3a10      	subs	r2, #16
 801d43e:	e7cf      	b.n	801d3e0 <__gethex+0xe6>
 801d440:	4631      	mov	r1, r6
 801d442:	e7da      	b.n	801d3fa <__gethex+0x100>
 801d444:	1bf3      	subs	r3, r6, r7
 801d446:	3b01      	subs	r3, #1
 801d448:	4629      	mov	r1, r5
 801d44a:	2b07      	cmp	r3, #7
 801d44c:	dc49      	bgt.n	801d4e2 <__gethex+0x1e8>
 801d44e:	9802      	ldr	r0, [sp, #8]
 801d450:	f000 fad5 	bl	801d9fe <_Balloc>
 801d454:	9b01      	ldr	r3, [sp, #4]
 801d456:	f100 0914 	add.w	r9, r0, #20
 801d45a:	f04f 0b00 	mov.w	fp, #0
 801d45e:	f1c3 0301 	rsb	r3, r3, #1
 801d462:	4605      	mov	r5, r0
 801d464:	f8cd 9010 	str.w	r9, [sp, #16]
 801d468:	46da      	mov	sl, fp
 801d46a:	9308      	str	r3, [sp, #32]
 801d46c:	42b7      	cmp	r7, r6
 801d46e:	d33b      	bcc.n	801d4e8 <__gethex+0x1ee>
 801d470:	9804      	ldr	r0, [sp, #16]
 801d472:	f840 ab04 	str.w	sl, [r0], #4
 801d476:	eba0 0009 	sub.w	r0, r0, r9
 801d47a:	1080      	asrs	r0, r0, #2
 801d47c:	6128      	str	r0, [r5, #16]
 801d47e:	0147      	lsls	r7, r0, #5
 801d480:	4650      	mov	r0, sl
 801d482:	f000 fb80 	bl	801db86 <__hi0bits>
 801d486:	f8d8 6000 	ldr.w	r6, [r8]
 801d48a:	1a3f      	subs	r7, r7, r0
 801d48c:	42b7      	cmp	r7, r6
 801d48e:	dd64      	ble.n	801d55a <__gethex+0x260>
 801d490:	1bbf      	subs	r7, r7, r6
 801d492:	4639      	mov	r1, r7
 801d494:	4628      	mov	r0, r5
 801d496:	f000 fe8f 	bl	801e1b8 <__any_on>
 801d49a:	4682      	mov	sl, r0
 801d49c:	b178      	cbz	r0, 801d4be <__gethex+0x1c4>
 801d49e:	1e7b      	subs	r3, r7, #1
 801d4a0:	1159      	asrs	r1, r3, #5
 801d4a2:	f003 021f 	and.w	r2, r3, #31
 801d4a6:	f04f 0a01 	mov.w	sl, #1
 801d4aa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d4ae:	fa0a f202 	lsl.w	r2, sl, r2
 801d4b2:	420a      	tst	r2, r1
 801d4b4:	d003      	beq.n	801d4be <__gethex+0x1c4>
 801d4b6:	4553      	cmp	r3, sl
 801d4b8:	dc46      	bgt.n	801d548 <__gethex+0x24e>
 801d4ba:	f04f 0a02 	mov.w	sl, #2
 801d4be:	4639      	mov	r1, r7
 801d4c0:	4628      	mov	r0, r5
 801d4c2:	f7ff fecb 	bl	801d25c <rshift>
 801d4c6:	443c      	add	r4, r7
 801d4c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d4cc:	42a3      	cmp	r3, r4
 801d4ce:	da52      	bge.n	801d576 <__gethex+0x27c>
 801d4d0:	4629      	mov	r1, r5
 801d4d2:	9802      	ldr	r0, [sp, #8]
 801d4d4:	f000 fac7 	bl	801da66 <_Bfree>
 801d4d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d4da:	2300      	movs	r3, #0
 801d4dc:	6013      	str	r3, [r2, #0]
 801d4de:	27a3      	movs	r7, #163	; 0xa3
 801d4e0:	e793      	b.n	801d40a <__gethex+0x110>
 801d4e2:	3101      	adds	r1, #1
 801d4e4:	105b      	asrs	r3, r3, #1
 801d4e6:	e7b0      	b.n	801d44a <__gethex+0x150>
 801d4e8:	1e73      	subs	r3, r6, #1
 801d4ea:	9305      	str	r3, [sp, #20]
 801d4ec:	9a07      	ldr	r2, [sp, #28]
 801d4ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d4f2:	4293      	cmp	r3, r2
 801d4f4:	d018      	beq.n	801d528 <__gethex+0x22e>
 801d4f6:	f1bb 0f20 	cmp.w	fp, #32
 801d4fa:	d107      	bne.n	801d50c <__gethex+0x212>
 801d4fc:	9b04      	ldr	r3, [sp, #16]
 801d4fe:	f8c3 a000 	str.w	sl, [r3]
 801d502:	3304      	adds	r3, #4
 801d504:	f04f 0a00 	mov.w	sl, #0
 801d508:	9304      	str	r3, [sp, #16]
 801d50a:	46d3      	mov	fp, sl
 801d50c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d510:	f7ff fede 	bl	801d2d0 <__hexdig_fun>
 801d514:	f000 000f 	and.w	r0, r0, #15
 801d518:	fa00 f00b 	lsl.w	r0, r0, fp
 801d51c:	ea4a 0a00 	orr.w	sl, sl, r0
 801d520:	f10b 0b04 	add.w	fp, fp, #4
 801d524:	9b05      	ldr	r3, [sp, #20]
 801d526:	e00d      	b.n	801d544 <__gethex+0x24a>
 801d528:	9b05      	ldr	r3, [sp, #20]
 801d52a:	9a08      	ldr	r2, [sp, #32]
 801d52c:	4413      	add	r3, r2
 801d52e:	42bb      	cmp	r3, r7
 801d530:	d3e1      	bcc.n	801d4f6 <__gethex+0x1fc>
 801d532:	4618      	mov	r0, r3
 801d534:	9a01      	ldr	r2, [sp, #4]
 801d536:	9903      	ldr	r1, [sp, #12]
 801d538:	9309      	str	r3, [sp, #36]	; 0x24
 801d53a:	f001 f924 	bl	801e786 <strncmp>
 801d53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d540:	2800      	cmp	r0, #0
 801d542:	d1d8      	bne.n	801d4f6 <__gethex+0x1fc>
 801d544:	461e      	mov	r6, r3
 801d546:	e791      	b.n	801d46c <__gethex+0x172>
 801d548:	1eb9      	subs	r1, r7, #2
 801d54a:	4628      	mov	r0, r5
 801d54c:	f000 fe34 	bl	801e1b8 <__any_on>
 801d550:	2800      	cmp	r0, #0
 801d552:	d0b2      	beq.n	801d4ba <__gethex+0x1c0>
 801d554:	f04f 0a03 	mov.w	sl, #3
 801d558:	e7b1      	b.n	801d4be <__gethex+0x1c4>
 801d55a:	da09      	bge.n	801d570 <__gethex+0x276>
 801d55c:	1bf7      	subs	r7, r6, r7
 801d55e:	4629      	mov	r1, r5
 801d560:	463a      	mov	r2, r7
 801d562:	9802      	ldr	r0, [sp, #8]
 801d564:	f000 fc4a 	bl	801ddfc <__lshift>
 801d568:	1be4      	subs	r4, r4, r7
 801d56a:	4605      	mov	r5, r0
 801d56c:	f100 0914 	add.w	r9, r0, #20
 801d570:	f04f 0a00 	mov.w	sl, #0
 801d574:	e7a8      	b.n	801d4c8 <__gethex+0x1ce>
 801d576:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d57a:	42a0      	cmp	r0, r4
 801d57c:	dd6a      	ble.n	801d654 <__gethex+0x35a>
 801d57e:	1b04      	subs	r4, r0, r4
 801d580:	42a6      	cmp	r6, r4
 801d582:	dc2e      	bgt.n	801d5e2 <__gethex+0x2e8>
 801d584:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d588:	2b02      	cmp	r3, #2
 801d58a:	d022      	beq.n	801d5d2 <__gethex+0x2d8>
 801d58c:	2b03      	cmp	r3, #3
 801d58e:	d024      	beq.n	801d5da <__gethex+0x2e0>
 801d590:	2b01      	cmp	r3, #1
 801d592:	d115      	bne.n	801d5c0 <__gethex+0x2c6>
 801d594:	42a6      	cmp	r6, r4
 801d596:	d113      	bne.n	801d5c0 <__gethex+0x2c6>
 801d598:	2e01      	cmp	r6, #1
 801d59a:	dc0b      	bgt.n	801d5b4 <__gethex+0x2ba>
 801d59c:	9a06      	ldr	r2, [sp, #24]
 801d59e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d5a2:	6013      	str	r3, [r2, #0]
 801d5a4:	2301      	movs	r3, #1
 801d5a6:	612b      	str	r3, [r5, #16]
 801d5a8:	f8c9 3000 	str.w	r3, [r9]
 801d5ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d5ae:	2762      	movs	r7, #98	; 0x62
 801d5b0:	601d      	str	r5, [r3, #0]
 801d5b2:	e72a      	b.n	801d40a <__gethex+0x110>
 801d5b4:	1e71      	subs	r1, r6, #1
 801d5b6:	4628      	mov	r0, r5
 801d5b8:	f000 fdfe 	bl	801e1b8 <__any_on>
 801d5bc:	2800      	cmp	r0, #0
 801d5be:	d1ed      	bne.n	801d59c <__gethex+0x2a2>
 801d5c0:	4629      	mov	r1, r5
 801d5c2:	9802      	ldr	r0, [sp, #8]
 801d5c4:	f000 fa4f 	bl	801da66 <_Bfree>
 801d5c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d5ca:	2300      	movs	r3, #0
 801d5cc:	6013      	str	r3, [r2, #0]
 801d5ce:	2750      	movs	r7, #80	; 0x50
 801d5d0:	e71b      	b.n	801d40a <__gethex+0x110>
 801d5d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d0e1      	beq.n	801d59c <__gethex+0x2a2>
 801d5d8:	e7f2      	b.n	801d5c0 <__gethex+0x2c6>
 801d5da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	d1dd      	bne.n	801d59c <__gethex+0x2a2>
 801d5e0:	e7ee      	b.n	801d5c0 <__gethex+0x2c6>
 801d5e2:	1e67      	subs	r7, r4, #1
 801d5e4:	f1ba 0f00 	cmp.w	sl, #0
 801d5e8:	d131      	bne.n	801d64e <__gethex+0x354>
 801d5ea:	b127      	cbz	r7, 801d5f6 <__gethex+0x2fc>
 801d5ec:	4639      	mov	r1, r7
 801d5ee:	4628      	mov	r0, r5
 801d5f0:	f000 fde2 	bl	801e1b8 <__any_on>
 801d5f4:	4682      	mov	sl, r0
 801d5f6:	117a      	asrs	r2, r7, #5
 801d5f8:	2301      	movs	r3, #1
 801d5fa:	f007 071f 	and.w	r7, r7, #31
 801d5fe:	fa03 f707 	lsl.w	r7, r3, r7
 801d602:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801d606:	4621      	mov	r1, r4
 801d608:	421f      	tst	r7, r3
 801d60a:	4628      	mov	r0, r5
 801d60c:	bf18      	it	ne
 801d60e:	f04a 0a02 	orrne.w	sl, sl, #2
 801d612:	1b36      	subs	r6, r6, r4
 801d614:	f7ff fe22 	bl	801d25c <rshift>
 801d618:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801d61c:	2702      	movs	r7, #2
 801d61e:	f1ba 0f00 	cmp.w	sl, #0
 801d622:	d048      	beq.n	801d6b6 <__gethex+0x3bc>
 801d624:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d628:	2b02      	cmp	r3, #2
 801d62a:	d015      	beq.n	801d658 <__gethex+0x35e>
 801d62c:	2b03      	cmp	r3, #3
 801d62e:	d017      	beq.n	801d660 <__gethex+0x366>
 801d630:	2b01      	cmp	r3, #1
 801d632:	d109      	bne.n	801d648 <__gethex+0x34e>
 801d634:	f01a 0f02 	tst.w	sl, #2
 801d638:	d006      	beq.n	801d648 <__gethex+0x34e>
 801d63a:	f8d9 3000 	ldr.w	r3, [r9]
 801d63e:	ea4a 0a03 	orr.w	sl, sl, r3
 801d642:	f01a 0f01 	tst.w	sl, #1
 801d646:	d10e      	bne.n	801d666 <__gethex+0x36c>
 801d648:	f047 0710 	orr.w	r7, r7, #16
 801d64c:	e033      	b.n	801d6b6 <__gethex+0x3bc>
 801d64e:	f04f 0a01 	mov.w	sl, #1
 801d652:	e7d0      	b.n	801d5f6 <__gethex+0x2fc>
 801d654:	2701      	movs	r7, #1
 801d656:	e7e2      	b.n	801d61e <__gethex+0x324>
 801d658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d65a:	f1c3 0301 	rsb	r3, r3, #1
 801d65e:	9315      	str	r3, [sp, #84]	; 0x54
 801d660:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d662:	2b00      	cmp	r3, #0
 801d664:	d0f0      	beq.n	801d648 <__gethex+0x34e>
 801d666:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801d66a:	f105 0314 	add.w	r3, r5, #20
 801d66e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801d672:	eb03 010a 	add.w	r1, r3, sl
 801d676:	f04f 0c00 	mov.w	ip, #0
 801d67a:	4618      	mov	r0, r3
 801d67c:	f853 2b04 	ldr.w	r2, [r3], #4
 801d680:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d684:	d01c      	beq.n	801d6c0 <__gethex+0x3c6>
 801d686:	3201      	adds	r2, #1
 801d688:	6002      	str	r2, [r0, #0]
 801d68a:	2f02      	cmp	r7, #2
 801d68c:	f105 0314 	add.w	r3, r5, #20
 801d690:	d138      	bne.n	801d704 <__gethex+0x40a>
 801d692:	f8d8 2000 	ldr.w	r2, [r8]
 801d696:	3a01      	subs	r2, #1
 801d698:	42b2      	cmp	r2, r6
 801d69a:	d10a      	bne.n	801d6b2 <__gethex+0x3b8>
 801d69c:	1171      	asrs	r1, r6, #5
 801d69e:	2201      	movs	r2, #1
 801d6a0:	f006 061f 	and.w	r6, r6, #31
 801d6a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d6a8:	fa02 f606 	lsl.w	r6, r2, r6
 801d6ac:	421e      	tst	r6, r3
 801d6ae:	bf18      	it	ne
 801d6b0:	4617      	movne	r7, r2
 801d6b2:	f047 0720 	orr.w	r7, r7, #32
 801d6b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d6b8:	601d      	str	r5, [r3, #0]
 801d6ba:	9b06      	ldr	r3, [sp, #24]
 801d6bc:	601c      	str	r4, [r3, #0]
 801d6be:	e6a4      	b.n	801d40a <__gethex+0x110>
 801d6c0:	4299      	cmp	r1, r3
 801d6c2:	f843 cc04 	str.w	ip, [r3, #-4]
 801d6c6:	d8d8      	bhi.n	801d67a <__gethex+0x380>
 801d6c8:	68ab      	ldr	r3, [r5, #8]
 801d6ca:	4599      	cmp	r9, r3
 801d6cc:	db12      	blt.n	801d6f4 <__gethex+0x3fa>
 801d6ce:	6869      	ldr	r1, [r5, #4]
 801d6d0:	9802      	ldr	r0, [sp, #8]
 801d6d2:	3101      	adds	r1, #1
 801d6d4:	f000 f993 	bl	801d9fe <_Balloc>
 801d6d8:	692a      	ldr	r2, [r5, #16]
 801d6da:	3202      	adds	r2, #2
 801d6dc:	f105 010c 	add.w	r1, r5, #12
 801d6e0:	4683      	mov	fp, r0
 801d6e2:	0092      	lsls	r2, r2, #2
 801d6e4:	300c      	adds	r0, #12
 801d6e6:	f7fc fdb3 	bl	801a250 <memcpy>
 801d6ea:	4629      	mov	r1, r5
 801d6ec:	9802      	ldr	r0, [sp, #8]
 801d6ee:	f000 f9ba 	bl	801da66 <_Bfree>
 801d6f2:	465d      	mov	r5, fp
 801d6f4:	692b      	ldr	r3, [r5, #16]
 801d6f6:	1c5a      	adds	r2, r3, #1
 801d6f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801d6fc:	612a      	str	r2, [r5, #16]
 801d6fe:	2201      	movs	r2, #1
 801d700:	615a      	str	r2, [r3, #20]
 801d702:	e7c2      	b.n	801d68a <__gethex+0x390>
 801d704:	692a      	ldr	r2, [r5, #16]
 801d706:	454a      	cmp	r2, r9
 801d708:	dd0b      	ble.n	801d722 <__gethex+0x428>
 801d70a:	2101      	movs	r1, #1
 801d70c:	4628      	mov	r0, r5
 801d70e:	f7ff fda5 	bl	801d25c <rshift>
 801d712:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d716:	3401      	adds	r4, #1
 801d718:	42a3      	cmp	r3, r4
 801d71a:	f6ff aed9 	blt.w	801d4d0 <__gethex+0x1d6>
 801d71e:	2701      	movs	r7, #1
 801d720:	e7c7      	b.n	801d6b2 <__gethex+0x3b8>
 801d722:	f016 061f 	ands.w	r6, r6, #31
 801d726:	d0fa      	beq.n	801d71e <__gethex+0x424>
 801d728:	449a      	add	sl, r3
 801d72a:	f1c6 0620 	rsb	r6, r6, #32
 801d72e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801d732:	f000 fa28 	bl	801db86 <__hi0bits>
 801d736:	42b0      	cmp	r0, r6
 801d738:	dbe7      	blt.n	801d70a <__gethex+0x410>
 801d73a:	e7f0      	b.n	801d71e <__gethex+0x424>

0801d73c <L_shift>:
 801d73c:	f1c2 0208 	rsb	r2, r2, #8
 801d740:	0092      	lsls	r2, r2, #2
 801d742:	b570      	push	{r4, r5, r6, lr}
 801d744:	f1c2 0620 	rsb	r6, r2, #32
 801d748:	6843      	ldr	r3, [r0, #4]
 801d74a:	6804      	ldr	r4, [r0, #0]
 801d74c:	fa03 f506 	lsl.w	r5, r3, r6
 801d750:	432c      	orrs	r4, r5
 801d752:	40d3      	lsrs	r3, r2
 801d754:	6004      	str	r4, [r0, #0]
 801d756:	f840 3f04 	str.w	r3, [r0, #4]!
 801d75a:	4288      	cmp	r0, r1
 801d75c:	d3f4      	bcc.n	801d748 <L_shift+0xc>
 801d75e:	bd70      	pop	{r4, r5, r6, pc}

0801d760 <__match>:
 801d760:	b530      	push	{r4, r5, lr}
 801d762:	6803      	ldr	r3, [r0, #0]
 801d764:	3301      	adds	r3, #1
 801d766:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d76a:	b914      	cbnz	r4, 801d772 <__match+0x12>
 801d76c:	6003      	str	r3, [r0, #0]
 801d76e:	2001      	movs	r0, #1
 801d770:	bd30      	pop	{r4, r5, pc}
 801d772:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d776:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d77a:	2d19      	cmp	r5, #25
 801d77c:	bf98      	it	ls
 801d77e:	3220      	addls	r2, #32
 801d780:	42a2      	cmp	r2, r4
 801d782:	d0f0      	beq.n	801d766 <__match+0x6>
 801d784:	2000      	movs	r0, #0
 801d786:	e7f3      	b.n	801d770 <__match+0x10>

0801d788 <__hexnan>:
 801d788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d78c:	680b      	ldr	r3, [r1, #0]
 801d78e:	6801      	ldr	r1, [r0, #0]
 801d790:	115f      	asrs	r7, r3, #5
 801d792:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801d796:	f013 031f 	ands.w	r3, r3, #31
 801d79a:	b087      	sub	sp, #28
 801d79c:	bf18      	it	ne
 801d79e:	3704      	addne	r7, #4
 801d7a0:	2500      	movs	r5, #0
 801d7a2:	1f3e      	subs	r6, r7, #4
 801d7a4:	4682      	mov	sl, r0
 801d7a6:	4690      	mov	r8, r2
 801d7a8:	9301      	str	r3, [sp, #4]
 801d7aa:	f847 5c04 	str.w	r5, [r7, #-4]
 801d7ae:	46b1      	mov	r9, r6
 801d7b0:	4634      	mov	r4, r6
 801d7b2:	9502      	str	r5, [sp, #8]
 801d7b4:	46ab      	mov	fp, r5
 801d7b6:	784a      	ldrb	r2, [r1, #1]
 801d7b8:	1c4b      	adds	r3, r1, #1
 801d7ba:	9303      	str	r3, [sp, #12]
 801d7bc:	b342      	cbz	r2, 801d810 <__hexnan+0x88>
 801d7be:	4610      	mov	r0, r2
 801d7c0:	9105      	str	r1, [sp, #20]
 801d7c2:	9204      	str	r2, [sp, #16]
 801d7c4:	f7ff fd84 	bl	801d2d0 <__hexdig_fun>
 801d7c8:	2800      	cmp	r0, #0
 801d7ca:	d143      	bne.n	801d854 <__hexnan+0xcc>
 801d7cc:	9a04      	ldr	r2, [sp, #16]
 801d7ce:	9905      	ldr	r1, [sp, #20]
 801d7d0:	2a20      	cmp	r2, #32
 801d7d2:	d818      	bhi.n	801d806 <__hexnan+0x7e>
 801d7d4:	9b02      	ldr	r3, [sp, #8]
 801d7d6:	459b      	cmp	fp, r3
 801d7d8:	dd13      	ble.n	801d802 <__hexnan+0x7a>
 801d7da:	454c      	cmp	r4, r9
 801d7dc:	d206      	bcs.n	801d7ec <__hexnan+0x64>
 801d7de:	2d07      	cmp	r5, #7
 801d7e0:	dc04      	bgt.n	801d7ec <__hexnan+0x64>
 801d7e2:	462a      	mov	r2, r5
 801d7e4:	4649      	mov	r1, r9
 801d7e6:	4620      	mov	r0, r4
 801d7e8:	f7ff ffa8 	bl	801d73c <L_shift>
 801d7ec:	4544      	cmp	r4, r8
 801d7ee:	d944      	bls.n	801d87a <__hexnan+0xf2>
 801d7f0:	2300      	movs	r3, #0
 801d7f2:	f1a4 0904 	sub.w	r9, r4, #4
 801d7f6:	f844 3c04 	str.w	r3, [r4, #-4]
 801d7fa:	f8cd b008 	str.w	fp, [sp, #8]
 801d7fe:	464c      	mov	r4, r9
 801d800:	461d      	mov	r5, r3
 801d802:	9903      	ldr	r1, [sp, #12]
 801d804:	e7d7      	b.n	801d7b6 <__hexnan+0x2e>
 801d806:	2a29      	cmp	r2, #41	; 0x29
 801d808:	d14a      	bne.n	801d8a0 <__hexnan+0x118>
 801d80a:	3102      	adds	r1, #2
 801d80c:	f8ca 1000 	str.w	r1, [sl]
 801d810:	f1bb 0f00 	cmp.w	fp, #0
 801d814:	d044      	beq.n	801d8a0 <__hexnan+0x118>
 801d816:	454c      	cmp	r4, r9
 801d818:	d206      	bcs.n	801d828 <__hexnan+0xa0>
 801d81a:	2d07      	cmp	r5, #7
 801d81c:	dc04      	bgt.n	801d828 <__hexnan+0xa0>
 801d81e:	462a      	mov	r2, r5
 801d820:	4649      	mov	r1, r9
 801d822:	4620      	mov	r0, r4
 801d824:	f7ff ff8a 	bl	801d73c <L_shift>
 801d828:	4544      	cmp	r4, r8
 801d82a:	d928      	bls.n	801d87e <__hexnan+0xf6>
 801d82c:	4643      	mov	r3, r8
 801d82e:	f854 2b04 	ldr.w	r2, [r4], #4
 801d832:	f843 2b04 	str.w	r2, [r3], #4
 801d836:	42a6      	cmp	r6, r4
 801d838:	d2f9      	bcs.n	801d82e <__hexnan+0xa6>
 801d83a:	2200      	movs	r2, #0
 801d83c:	f843 2b04 	str.w	r2, [r3], #4
 801d840:	429e      	cmp	r6, r3
 801d842:	d2fb      	bcs.n	801d83c <__hexnan+0xb4>
 801d844:	6833      	ldr	r3, [r6, #0]
 801d846:	b91b      	cbnz	r3, 801d850 <__hexnan+0xc8>
 801d848:	4546      	cmp	r6, r8
 801d84a:	d127      	bne.n	801d89c <__hexnan+0x114>
 801d84c:	2301      	movs	r3, #1
 801d84e:	6033      	str	r3, [r6, #0]
 801d850:	2005      	movs	r0, #5
 801d852:	e026      	b.n	801d8a2 <__hexnan+0x11a>
 801d854:	3501      	adds	r5, #1
 801d856:	2d08      	cmp	r5, #8
 801d858:	f10b 0b01 	add.w	fp, fp, #1
 801d85c:	dd06      	ble.n	801d86c <__hexnan+0xe4>
 801d85e:	4544      	cmp	r4, r8
 801d860:	d9cf      	bls.n	801d802 <__hexnan+0x7a>
 801d862:	2300      	movs	r3, #0
 801d864:	f844 3c04 	str.w	r3, [r4, #-4]
 801d868:	2501      	movs	r5, #1
 801d86a:	3c04      	subs	r4, #4
 801d86c:	6822      	ldr	r2, [r4, #0]
 801d86e:	f000 000f 	and.w	r0, r0, #15
 801d872:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801d876:	6020      	str	r0, [r4, #0]
 801d878:	e7c3      	b.n	801d802 <__hexnan+0x7a>
 801d87a:	2508      	movs	r5, #8
 801d87c:	e7c1      	b.n	801d802 <__hexnan+0x7a>
 801d87e:	9b01      	ldr	r3, [sp, #4]
 801d880:	2b00      	cmp	r3, #0
 801d882:	d0df      	beq.n	801d844 <__hexnan+0xbc>
 801d884:	f04f 32ff 	mov.w	r2, #4294967295
 801d888:	f1c3 0320 	rsb	r3, r3, #32
 801d88c:	fa22 f303 	lsr.w	r3, r2, r3
 801d890:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801d894:	401a      	ands	r2, r3
 801d896:	f847 2c04 	str.w	r2, [r7, #-4]
 801d89a:	e7d3      	b.n	801d844 <__hexnan+0xbc>
 801d89c:	3e04      	subs	r6, #4
 801d89e:	e7d1      	b.n	801d844 <__hexnan+0xbc>
 801d8a0:	2004      	movs	r0, #4
 801d8a2:	b007      	add	sp, #28
 801d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d8a8 <__locale_ctype_ptr_l>:
 801d8a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801d8ac:	4770      	bx	lr

0801d8ae <__localeconv_l>:
 801d8ae:	30f0      	adds	r0, #240	; 0xf0
 801d8b0:	4770      	bx	lr
	...

0801d8b4 <_localeconv_r>:
 801d8b4:	4b04      	ldr	r3, [pc, #16]	; (801d8c8 <_localeconv_r+0x14>)
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	6a18      	ldr	r0, [r3, #32]
 801d8ba:	4b04      	ldr	r3, [pc, #16]	; (801d8cc <_localeconv_r+0x18>)
 801d8bc:	2800      	cmp	r0, #0
 801d8be:	bf08      	it	eq
 801d8c0:	4618      	moveq	r0, r3
 801d8c2:	30f0      	adds	r0, #240	; 0xf0
 801d8c4:	4770      	bx	lr
 801d8c6:	bf00      	nop
 801d8c8:	2000011c 	.word	0x2000011c
 801d8cc:	20000180 	.word	0x20000180

0801d8d0 <__swhatbuf_r>:
 801d8d0:	b570      	push	{r4, r5, r6, lr}
 801d8d2:	460e      	mov	r6, r1
 801d8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d8d8:	2900      	cmp	r1, #0
 801d8da:	b096      	sub	sp, #88	; 0x58
 801d8dc:	4614      	mov	r4, r2
 801d8de:	461d      	mov	r5, r3
 801d8e0:	da07      	bge.n	801d8f2 <__swhatbuf_r+0x22>
 801d8e2:	2300      	movs	r3, #0
 801d8e4:	602b      	str	r3, [r5, #0]
 801d8e6:	89b3      	ldrh	r3, [r6, #12]
 801d8e8:	061a      	lsls	r2, r3, #24
 801d8ea:	d410      	bmi.n	801d90e <__swhatbuf_r+0x3e>
 801d8ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d8f0:	e00e      	b.n	801d910 <__swhatbuf_r+0x40>
 801d8f2:	466a      	mov	r2, sp
 801d8f4:	f000 ff88 	bl	801e808 <_fstat_r>
 801d8f8:	2800      	cmp	r0, #0
 801d8fa:	dbf2      	blt.n	801d8e2 <__swhatbuf_r+0x12>
 801d8fc:	9a01      	ldr	r2, [sp, #4]
 801d8fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d902:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d906:	425a      	negs	r2, r3
 801d908:	415a      	adcs	r2, r3
 801d90a:	602a      	str	r2, [r5, #0]
 801d90c:	e7ee      	b.n	801d8ec <__swhatbuf_r+0x1c>
 801d90e:	2340      	movs	r3, #64	; 0x40
 801d910:	2000      	movs	r0, #0
 801d912:	6023      	str	r3, [r4, #0]
 801d914:	b016      	add	sp, #88	; 0x58
 801d916:	bd70      	pop	{r4, r5, r6, pc}

0801d918 <__smakebuf_r>:
 801d918:	898b      	ldrh	r3, [r1, #12]
 801d91a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d91c:	079d      	lsls	r5, r3, #30
 801d91e:	4606      	mov	r6, r0
 801d920:	460c      	mov	r4, r1
 801d922:	d507      	bpl.n	801d934 <__smakebuf_r+0x1c>
 801d924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d928:	6023      	str	r3, [r4, #0]
 801d92a:	6123      	str	r3, [r4, #16]
 801d92c:	2301      	movs	r3, #1
 801d92e:	6163      	str	r3, [r4, #20]
 801d930:	b002      	add	sp, #8
 801d932:	bd70      	pop	{r4, r5, r6, pc}
 801d934:	ab01      	add	r3, sp, #4
 801d936:	466a      	mov	r2, sp
 801d938:	f7ff ffca 	bl	801d8d0 <__swhatbuf_r>
 801d93c:	9900      	ldr	r1, [sp, #0]
 801d93e:	4605      	mov	r5, r0
 801d940:	4630      	mov	r0, r6
 801d942:	f000 fcb7 	bl	801e2b4 <_malloc_r>
 801d946:	b948      	cbnz	r0, 801d95c <__smakebuf_r+0x44>
 801d948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d94c:	059a      	lsls	r2, r3, #22
 801d94e:	d4ef      	bmi.n	801d930 <__smakebuf_r+0x18>
 801d950:	f023 0303 	bic.w	r3, r3, #3
 801d954:	f043 0302 	orr.w	r3, r3, #2
 801d958:	81a3      	strh	r3, [r4, #12]
 801d95a:	e7e3      	b.n	801d924 <__smakebuf_r+0xc>
 801d95c:	4b0d      	ldr	r3, [pc, #52]	; (801d994 <__smakebuf_r+0x7c>)
 801d95e:	62b3      	str	r3, [r6, #40]	; 0x28
 801d960:	89a3      	ldrh	r3, [r4, #12]
 801d962:	6020      	str	r0, [r4, #0]
 801d964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d968:	81a3      	strh	r3, [r4, #12]
 801d96a:	9b00      	ldr	r3, [sp, #0]
 801d96c:	6163      	str	r3, [r4, #20]
 801d96e:	9b01      	ldr	r3, [sp, #4]
 801d970:	6120      	str	r0, [r4, #16]
 801d972:	b15b      	cbz	r3, 801d98c <__smakebuf_r+0x74>
 801d974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d978:	4630      	mov	r0, r6
 801d97a:	f000 ff57 	bl	801e82c <_isatty_r>
 801d97e:	b128      	cbz	r0, 801d98c <__smakebuf_r+0x74>
 801d980:	89a3      	ldrh	r3, [r4, #12]
 801d982:	f023 0303 	bic.w	r3, r3, #3
 801d986:	f043 0301 	orr.w	r3, r3, #1
 801d98a:	81a3      	strh	r3, [r4, #12]
 801d98c:	89a3      	ldrh	r3, [r4, #12]
 801d98e:	431d      	orrs	r5, r3
 801d990:	81a5      	strh	r5, [r4, #12]
 801d992:	e7cd      	b.n	801d930 <__smakebuf_r+0x18>
 801d994:	0801d111 	.word	0x0801d111

0801d998 <malloc>:
 801d998:	4b02      	ldr	r3, [pc, #8]	; (801d9a4 <malloc+0xc>)
 801d99a:	4601      	mov	r1, r0
 801d99c:	6818      	ldr	r0, [r3, #0]
 801d99e:	f000 bc89 	b.w	801e2b4 <_malloc_r>
 801d9a2:	bf00      	nop
 801d9a4:	2000011c 	.word	0x2000011c

0801d9a8 <__ascii_mbtowc>:
 801d9a8:	b082      	sub	sp, #8
 801d9aa:	b901      	cbnz	r1, 801d9ae <__ascii_mbtowc+0x6>
 801d9ac:	a901      	add	r1, sp, #4
 801d9ae:	b142      	cbz	r2, 801d9c2 <__ascii_mbtowc+0x1a>
 801d9b0:	b14b      	cbz	r3, 801d9c6 <__ascii_mbtowc+0x1e>
 801d9b2:	7813      	ldrb	r3, [r2, #0]
 801d9b4:	600b      	str	r3, [r1, #0]
 801d9b6:	7812      	ldrb	r2, [r2, #0]
 801d9b8:	1c10      	adds	r0, r2, #0
 801d9ba:	bf18      	it	ne
 801d9bc:	2001      	movne	r0, #1
 801d9be:	b002      	add	sp, #8
 801d9c0:	4770      	bx	lr
 801d9c2:	4610      	mov	r0, r2
 801d9c4:	e7fb      	b.n	801d9be <__ascii_mbtowc+0x16>
 801d9c6:	f06f 0001 	mvn.w	r0, #1
 801d9ca:	e7f8      	b.n	801d9be <__ascii_mbtowc+0x16>

0801d9cc <memmove>:
 801d9cc:	4288      	cmp	r0, r1
 801d9ce:	b510      	push	{r4, lr}
 801d9d0:	eb01 0302 	add.w	r3, r1, r2
 801d9d4:	d807      	bhi.n	801d9e6 <memmove+0x1a>
 801d9d6:	1e42      	subs	r2, r0, #1
 801d9d8:	4299      	cmp	r1, r3
 801d9da:	d00a      	beq.n	801d9f2 <memmove+0x26>
 801d9dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d9e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 801d9e4:	e7f8      	b.n	801d9d8 <memmove+0xc>
 801d9e6:	4283      	cmp	r3, r0
 801d9e8:	d9f5      	bls.n	801d9d6 <memmove+0xa>
 801d9ea:	1881      	adds	r1, r0, r2
 801d9ec:	1ad2      	subs	r2, r2, r3
 801d9ee:	42d3      	cmn	r3, r2
 801d9f0:	d100      	bne.n	801d9f4 <memmove+0x28>
 801d9f2:	bd10      	pop	{r4, pc}
 801d9f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d9f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801d9fc:	e7f7      	b.n	801d9ee <memmove+0x22>

0801d9fe <_Balloc>:
 801d9fe:	b570      	push	{r4, r5, r6, lr}
 801da00:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801da02:	4604      	mov	r4, r0
 801da04:	460e      	mov	r6, r1
 801da06:	b93d      	cbnz	r5, 801da18 <_Balloc+0x1a>
 801da08:	2010      	movs	r0, #16
 801da0a:	f7ff ffc5 	bl	801d998 <malloc>
 801da0e:	6260      	str	r0, [r4, #36]	; 0x24
 801da10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801da14:	6005      	str	r5, [r0, #0]
 801da16:	60c5      	str	r5, [r0, #12]
 801da18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801da1a:	68eb      	ldr	r3, [r5, #12]
 801da1c:	b183      	cbz	r3, 801da40 <_Balloc+0x42>
 801da1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da20:	68db      	ldr	r3, [r3, #12]
 801da22:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801da26:	b9b8      	cbnz	r0, 801da58 <_Balloc+0x5a>
 801da28:	2101      	movs	r1, #1
 801da2a:	fa01 f506 	lsl.w	r5, r1, r6
 801da2e:	1d6a      	adds	r2, r5, #5
 801da30:	0092      	lsls	r2, r2, #2
 801da32:	4620      	mov	r0, r4
 801da34:	f000 fbe1 	bl	801e1fa <_calloc_r>
 801da38:	b160      	cbz	r0, 801da54 <_Balloc+0x56>
 801da3a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801da3e:	e00e      	b.n	801da5e <_Balloc+0x60>
 801da40:	2221      	movs	r2, #33	; 0x21
 801da42:	2104      	movs	r1, #4
 801da44:	4620      	mov	r0, r4
 801da46:	f000 fbd8 	bl	801e1fa <_calloc_r>
 801da4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da4c:	60e8      	str	r0, [r5, #12]
 801da4e:	68db      	ldr	r3, [r3, #12]
 801da50:	2b00      	cmp	r3, #0
 801da52:	d1e4      	bne.n	801da1e <_Balloc+0x20>
 801da54:	2000      	movs	r0, #0
 801da56:	bd70      	pop	{r4, r5, r6, pc}
 801da58:	6802      	ldr	r2, [r0, #0]
 801da5a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801da5e:	2300      	movs	r3, #0
 801da60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801da64:	e7f7      	b.n	801da56 <_Balloc+0x58>

0801da66 <_Bfree>:
 801da66:	b570      	push	{r4, r5, r6, lr}
 801da68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801da6a:	4606      	mov	r6, r0
 801da6c:	460d      	mov	r5, r1
 801da6e:	b93c      	cbnz	r4, 801da80 <_Bfree+0x1a>
 801da70:	2010      	movs	r0, #16
 801da72:	f7ff ff91 	bl	801d998 <malloc>
 801da76:	6270      	str	r0, [r6, #36]	; 0x24
 801da78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801da7c:	6004      	str	r4, [r0, #0]
 801da7e:	60c4      	str	r4, [r0, #12]
 801da80:	b13d      	cbz	r5, 801da92 <_Bfree+0x2c>
 801da82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801da84:	686a      	ldr	r2, [r5, #4]
 801da86:	68db      	ldr	r3, [r3, #12]
 801da88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801da8c:	6029      	str	r1, [r5, #0]
 801da8e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801da92:	bd70      	pop	{r4, r5, r6, pc}

0801da94 <__multadd>:
 801da94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da98:	690d      	ldr	r5, [r1, #16]
 801da9a:	461f      	mov	r7, r3
 801da9c:	4606      	mov	r6, r0
 801da9e:	460c      	mov	r4, r1
 801daa0:	f101 0c14 	add.w	ip, r1, #20
 801daa4:	2300      	movs	r3, #0
 801daa6:	f8dc 0000 	ldr.w	r0, [ip]
 801daaa:	b281      	uxth	r1, r0
 801daac:	fb02 7101 	mla	r1, r2, r1, r7
 801dab0:	0c0f      	lsrs	r7, r1, #16
 801dab2:	0c00      	lsrs	r0, r0, #16
 801dab4:	fb02 7000 	mla	r0, r2, r0, r7
 801dab8:	b289      	uxth	r1, r1
 801daba:	3301      	adds	r3, #1
 801dabc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801dac0:	429d      	cmp	r5, r3
 801dac2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801dac6:	f84c 1b04 	str.w	r1, [ip], #4
 801daca:	dcec      	bgt.n	801daa6 <__multadd+0x12>
 801dacc:	b1d7      	cbz	r7, 801db04 <__multadd+0x70>
 801dace:	68a3      	ldr	r3, [r4, #8]
 801dad0:	42ab      	cmp	r3, r5
 801dad2:	dc12      	bgt.n	801dafa <__multadd+0x66>
 801dad4:	6861      	ldr	r1, [r4, #4]
 801dad6:	4630      	mov	r0, r6
 801dad8:	3101      	adds	r1, #1
 801dada:	f7ff ff90 	bl	801d9fe <_Balloc>
 801dade:	6922      	ldr	r2, [r4, #16]
 801dae0:	3202      	adds	r2, #2
 801dae2:	f104 010c 	add.w	r1, r4, #12
 801dae6:	4680      	mov	r8, r0
 801dae8:	0092      	lsls	r2, r2, #2
 801daea:	300c      	adds	r0, #12
 801daec:	f7fc fbb0 	bl	801a250 <memcpy>
 801daf0:	4621      	mov	r1, r4
 801daf2:	4630      	mov	r0, r6
 801daf4:	f7ff ffb7 	bl	801da66 <_Bfree>
 801daf8:	4644      	mov	r4, r8
 801dafa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801dafe:	3501      	adds	r5, #1
 801db00:	615f      	str	r7, [r3, #20]
 801db02:	6125      	str	r5, [r4, #16]
 801db04:	4620      	mov	r0, r4
 801db06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801db0a <__s2b>:
 801db0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db0e:	460c      	mov	r4, r1
 801db10:	4615      	mov	r5, r2
 801db12:	461f      	mov	r7, r3
 801db14:	2209      	movs	r2, #9
 801db16:	3308      	adds	r3, #8
 801db18:	4606      	mov	r6, r0
 801db1a:	fb93 f3f2 	sdiv	r3, r3, r2
 801db1e:	2100      	movs	r1, #0
 801db20:	2201      	movs	r2, #1
 801db22:	429a      	cmp	r2, r3
 801db24:	db20      	blt.n	801db68 <__s2b+0x5e>
 801db26:	4630      	mov	r0, r6
 801db28:	f7ff ff69 	bl	801d9fe <_Balloc>
 801db2c:	9b08      	ldr	r3, [sp, #32]
 801db2e:	6143      	str	r3, [r0, #20]
 801db30:	2d09      	cmp	r5, #9
 801db32:	f04f 0301 	mov.w	r3, #1
 801db36:	6103      	str	r3, [r0, #16]
 801db38:	dd19      	ble.n	801db6e <__s2b+0x64>
 801db3a:	f104 0809 	add.w	r8, r4, #9
 801db3e:	46c1      	mov	r9, r8
 801db40:	442c      	add	r4, r5
 801db42:	f819 3b01 	ldrb.w	r3, [r9], #1
 801db46:	4601      	mov	r1, r0
 801db48:	3b30      	subs	r3, #48	; 0x30
 801db4a:	220a      	movs	r2, #10
 801db4c:	4630      	mov	r0, r6
 801db4e:	f7ff ffa1 	bl	801da94 <__multadd>
 801db52:	45a1      	cmp	r9, r4
 801db54:	d1f5      	bne.n	801db42 <__s2b+0x38>
 801db56:	eb08 0405 	add.w	r4, r8, r5
 801db5a:	3c08      	subs	r4, #8
 801db5c:	1b2d      	subs	r5, r5, r4
 801db5e:	1963      	adds	r3, r4, r5
 801db60:	42bb      	cmp	r3, r7
 801db62:	db07      	blt.n	801db74 <__s2b+0x6a>
 801db64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db68:	0052      	lsls	r2, r2, #1
 801db6a:	3101      	adds	r1, #1
 801db6c:	e7d9      	b.n	801db22 <__s2b+0x18>
 801db6e:	340a      	adds	r4, #10
 801db70:	2509      	movs	r5, #9
 801db72:	e7f3      	b.n	801db5c <__s2b+0x52>
 801db74:	f814 3b01 	ldrb.w	r3, [r4], #1
 801db78:	4601      	mov	r1, r0
 801db7a:	3b30      	subs	r3, #48	; 0x30
 801db7c:	220a      	movs	r2, #10
 801db7e:	4630      	mov	r0, r6
 801db80:	f7ff ff88 	bl	801da94 <__multadd>
 801db84:	e7eb      	b.n	801db5e <__s2b+0x54>

0801db86 <__hi0bits>:
 801db86:	0c02      	lsrs	r2, r0, #16
 801db88:	0412      	lsls	r2, r2, #16
 801db8a:	4603      	mov	r3, r0
 801db8c:	b9b2      	cbnz	r2, 801dbbc <__hi0bits+0x36>
 801db8e:	0403      	lsls	r3, r0, #16
 801db90:	2010      	movs	r0, #16
 801db92:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801db96:	bf04      	itt	eq
 801db98:	021b      	lsleq	r3, r3, #8
 801db9a:	3008      	addeq	r0, #8
 801db9c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801dba0:	bf04      	itt	eq
 801dba2:	011b      	lsleq	r3, r3, #4
 801dba4:	3004      	addeq	r0, #4
 801dba6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801dbaa:	bf04      	itt	eq
 801dbac:	009b      	lsleq	r3, r3, #2
 801dbae:	3002      	addeq	r0, #2
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	db06      	blt.n	801dbc2 <__hi0bits+0x3c>
 801dbb4:	005b      	lsls	r3, r3, #1
 801dbb6:	d503      	bpl.n	801dbc0 <__hi0bits+0x3a>
 801dbb8:	3001      	adds	r0, #1
 801dbba:	4770      	bx	lr
 801dbbc:	2000      	movs	r0, #0
 801dbbe:	e7e8      	b.n	801db92 <__hi0bits+0xc>
 801dbc0:	2020      	movs	r0, #32
 801dbc2:	4770      	bx	lr

0801dbc4 <__lo0bits>:
 801dbc4:	6803      	ldr	r3, [r0, #0]
 801dbc6:	f013 0207 	ands.w	r2, r3, #7
 801dbca:	4601      	mov	r1, r0
 801dbcc:	d00b      	beq.n	801dbe6 <__lo0bits+0x22>
 801dbce:	07da      	lsls	r2, r3, #31
 801dbd0:	d423      	bmi.n	801dc1a <__lo0bits+0x56>
 801dbd2:	0798      	lsls	r0, r3, #30
 801dbd4:	bf49      	itett	mi
 801dbd6:	085b      	lsrmi	r3, r3, #1
 801dbd8:	089b      	lsrpl	r3, r3, #2
 801dbda:	2001      	movmi	r0, #1
 801dbdc:	600b      	strmi	r3, [r1, #0]
 801dbde:	bf5c      	itt	pl
 801dbe0:	600b      	strpl	r3, [r1, #0]
 801dbe2:	2002      	movpl	r0, #2
 801dbe4:	4770      	bx	lr
 801dbe6:	b298      	uxth	r0, r3
 801dbe8:	b9a8      	cbnz	r0, 801dc16 <__lo0bits+0x52>
 801dbea:	0c1b      	lsrs	r3, r3, #16
 801dbec:	2010      	movs	r0, #16
 801dbee:	f013 0fff 	tst.w	r3, #255	; 0xff
 801dbf2:	bf04      	itt	eq
 801dbf4:	0a1b      	lsreq	r3, r3, #8
 801dbf6:	3008      	addeq	r0, #8
 801dbf8:	071a      	lsls	r2, r3, #28
 801dbfa:	bf04      	itt	eq
 801dbfc:	091b      	lsreq	r3, r3, #4
 801dbfe:	3004      	addeq	r0, #4
 801dc00:	079a      	lsls	r2, r3, #30
 801dc02:	bf04      	itt	eq
 801dc04:	089b      	lsreq	r3, r3, #2
 801dc06:	3002      	addeq	r0, #2
 801dc08:	07da      	lsls	r2, r3, #31
 801dc0a:	d402      	bmi.n	801dc12 <__lo0bits+0x4e>
 801dc0c:	085b      	lsrs	r3, r3, #1
 801dc0e:	d006      	beq.n	801dc1e <__lo0bits+0x5a>
 801dc10:	3001      	adds	r0, #1
 801dc12:	600b      	str	r3, [r1, #0]
 801dc14:	4770      	bx	lr
 801dc16:	4610      	mov	r0, r2
 801dc18:	e7e9      	b.n	801dbee <__lo0bits+0x2a>
 801dc1a:	2000      	movs	r0, #0
 801dc1c:	4770      	bx	lr
 801dc1e:	2020      	movs	r0, #32
 801dc20:	4770      	bx	lr

0801dc22 <__i2b>:
 801dc22:	b510      	push	{r4, lr}
 801dc24:	460c      	mov	r4, r1
 801dc26:	2101      	movs	r1, #1
 801dc28:	f7ff fee9 	bl	801d9fe <_Balloc>
 801dc2c:	2201      	movs	r2, #1
 801dc2e:	6144      	str	r4, [r0, #20]
 801dc30:	6102      	str	r2, [r0, #16]
 801dc32:	bd10      	pop	{r4, pc}

0801dc34 <__multiply>:
 801dc34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc38:	4614      	mov	r4, r2
 801dc3a:	690a      	ldr	r2, [r1, #16]
 801dc3c:	6923      	ldr	r3, [r4, #16]
 801dc3e:	429a      	cmp	r2, r3
 801dc40:	bfb8      	it	lt
 801dc42:	460b      	movlt	r3, r1
 801dc44:	4688      	mov	r8, r1
 801dc46:	bfbc      	itt	lt
 801dc48:	46a0      	movlt	r8, r4
 801dc4a:	461c      	movlt	r4, r3
 801dc4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801dc50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801dc54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801dc58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dc5c:	eb07 0609 	add.w	r6, r7, r9
 801dc60:	42b3      	cmp	r3, r6
 801dc62:	bfb8      	it	lt
 801dc64:	3101      	addlt	r1, #1
 801dc66:	f7ff feca 	bl	801d9fe <_Balloc>
 801dc6a:	f100 0514 	add.w	r5, r0, #20
 801dc6e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801dc72:	462b      	mov	r3, r5
 801dc74:	2200      	movs	r2, #0
 801dc76:	4573      	cmp	r3, lr
 801dc78:	d316      	bcc.n	801dca8 <__multiply+0x74>
 801dc7a:	f104 0214 	add.w	r2, r4, #20
 801dc7e:	f108 0114 	add.w	r1, r8, #20
 801dc82:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801dc86:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801dc8a:	9300      	str	r3, [sp, #0]
 801dc8c:	9b00      	ldr	r3, [sp, #0]
 801dc8e:	9201      	str	r2, [sp, #4]
 801dc90:	4293      	cmp	r3, r2
 801dc92:	d80c      	bhi.n	801dcae <__multiply+0x7a>
 801dc94:	2e00      	cmp	r6, #0
 801dc96:	dd03      	ble.n	801dca0 <__multiply+0x6c>
 801dc98:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	d05d      	beq.n	801dd5c <__multiply+0x128>
 801dca0:	6106      	str	r6, [r0, #16]
 801dca2:	b003      	add	sp, #12
 801dca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dca8:	f843 2b04 	str.w	r2, [r3], #4
 801dcac:	e7e3      	b.n	801dc76 <__multiply+0x42>
 801dcae:	f8b2 b000 	ldrh.w	fp, [r2]
 801dcb2:	f1bb 0f00 	cmp.w	fp, #0
 801dcb6:	d023      	beq.n	801dd00 <__multiply+0xcc>
 801dcb8:	4689      	mov	r9, r1
 801dcba:	46ac      	mov	ip, r5
 801dcbc:	f04f 0800 	mov.w	r8, #0
 801dcc0:	f859 4b04 	ldr.w	r4, [r9], #4
 801dcc4:	f8dc a000 	ldr.w	sl, [ip]
 801dcc8:	b2a3      	uxth	r3, r4
 801dcca:	fa1f fa8a 	uxth.w	sl, sl
 801dcce:	fb0b a303 	mla	r3, fp, r3, sl
 801dcd2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801dcd6:	f8dc 4000 	ldr.w	r4, [ip]
 801dcda:	4443      	add	r3, r8
 801dcdc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801dce0:	fb0b 840a 	mla	r4, fp, sl, r8
 801dce4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801dce8:	46e2      	mov	sl, ip
 801dcea:	b29b      	uxth	r3, r3
 801dcec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801dcf0:	454f      	cmp	r7, r9
 801dcf2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801dcf6:	f84a 3b04 	str.w	r3, [sl], #4
 801dcfa:	d82b      	bhi.n	801dd54 <__multiply+0x120>
 801dcfc:	f8cc 8004 	str.w	r8, [ip, #4]
 801dd00:	9b01      	ldr	r3, [sp, #4]
 801dd02:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801dd06:	3204      	adds	r2, #4
 801dd08:	f1ba 0f00 	cmp.w	sl, #0
 801dd0c:	d020      	beq.n	801dd50 <__multiply+0x11c>
 801dd0e:	682b      	ldr	r3, [r5, #0]
 801dd10:	4689      	mov	r9, r1
 801dd12:	46a8      	mov	r8, r5
 801dd14:	f04f 0b00 	mov.w	fp, #0
 801dd18:	f8b9 c000 	ldrh.w	ip, [r9]
 801dd1c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801dd20:	fb0a 440c 	mla	r4, sl, ip, r4
 801dd24:	445c      	add	r4, fp
 801dd26:	46c4      	mov	ip, r8
 801dd28:	b29b      	uxth	r3, r3
 801dd2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801dd2e:	f84c 3b04 	str.w	r3, [ip], #4
 801dd32:	f859 3b04 	ldr.w	r3, [r9], #4
 801dd36:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801dd3a:	0c1b      	lsrs	r3, r3, #16
 801dd3c:	fb0a b303 	mla	r3, sl, r3, fp
 801dd40:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801dd44:	454f      	cmp	r7, r9
 801dd46:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801dd4a:	d805      	bhi.n	801dd58 <__multiply+0x124>
 801dd4c:	f8c8 3004 	str.w	r3, [r8, #4]
 801dd50:	3504      	adds	r5, #4
 801dd52:	e79b      	b.n	801dc8c <__multiply+0x58>
 801dd54:	46d4      	mov	ip, sl
 801dd56:	e7b3      	b.n	801dcc0 <__multiply+0x8c>
 801dd58:	46e0      	mov	r8, ip
 801dd5a:	e7dd      	b.n	801dd18 <__multiply+0xe4>
 801dd5c:	3e01      	subs	r6, #1
 801dd5e:	e799      	b.n	801dc94 <__multiply+0x60>

0801dd60 <__pow5mult>:
 801dd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd64:	4615      	mov	r5, r2
 801dd66:	f012 0203 	ands.w	r2, r2, #3
 801dd6a:	4606      	mov	r6, r0
 801dd6c:	460f      	mov	r7, r1
 801dd6e:	d007      	beq.n	801dd80 <__pow5mult+0x20>
 801dd70:	3a01      	subs	r2, #1
 801dd72:	4c21      	ldr	r4, [pc, #132]	; (801ddf8 <__pow5mult+0x98>)
 801dd74:	2300      	movs	r3, #0
 801dd76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dd7a:	f7ff fe8b 	bl	801da94 <__multadd>
 801dd7e:	4607      	mov	r7, r0
 801dd80:	10ad      	asrs	r5, r5, #2
 801dd82:	d035      	beq.n	801ddf0 <__pow5mult+0x90>
 801dd84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801dd86:	b93c      	cbnz	r4, 801dd98 <__pow5mult+0x38>
 801dd88:	2010      	movs	r0, #16
 801dd8a:	f7ff fe05 	bl	801d998 <malloc>
 801dd8e:	6270      	str	r0, [r6, #36]	; 0x24
 801dd90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dd94:	6004      	str	r4, [r0, #0]
 801dd96:	60c4      	str	r4, [r0, #12]
 801dd98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801dd9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dda0:	b94c      	cbnz	r4, 801ddb6 <__pow5mult+0x56>
 801dda2:	f240 2171 	movw	r1, #625	; 0x271
 801dda6:	4630      	mov	r0, r6
 801dda8:	f7ff ff3b 	bl	801dc22 <__i2b>
 801ddac:	2300      	movs	r3, #0
 801ddae:	f8c8 0008 	str.w	r0, [r8, #8]
 801ddb2:	4604      	mov	r4, r0
 801ddb4:	6003      	str	r3, [r0, #0]
 801ddb6:	f04f 0800 	mov.w	r8, #0
 801ddba:	07eb      	lsls	r3, r5, #31
 801ddbc:	d50a      	bpl.n	801ddd4 <__pow5mult+0x74>
 801ddbe:	4639      	mov	r1, r7
 801ddc0:	4622      	mov	r2, r4
 801ddc2:	4630      	mov	r0, r6
 801ddc4:	f7ff ff36 	bl	801dc34 <__multiply>
 801ddc8:	4639      	mov	r1, r7
 801ddca:	4681      	mov	r9, r0
 801ddcc:	4630      	mov	r0, r6
 801ddce:	f7ff fe4a 	bl	801da66 <_Bfree>
 801ddd2:	464f      	mov	r7, r9
 801ddd4:	106d      	asrs	r5, r5, #1
 801ddd6:	d00b      	beq.n	801ddf0 <__pow5mult+0x90>
 801ddd8:	6820      	ldr	r0, [r4, #0]
 801ddda:	b938      	cbnz	r0, 801ddec <__pow5mult+0x8c>
 801dddc:	4622      	mov	r2, r4
 801ddde:	4621      	mov	r1, r4
 801dde0:	4630      	mov	r0, r6
 801dde2:	f7ff ff27 	bl	801dc34 <__multiply>
 801dde6:	6020      	str	r0, [r4, #0]
 801dde8:	f8c0 8000 	str.w	r8, [r0]
 801ddec:	4604      	mov	r4, r0
 801ddee:	e7e4      	b.n	801ddba <__pow5mult+0x5a>
 801ddf0:	4638      	mov	r0, r7
 801ddf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ddf6:	bf00      	nop
 801ddf8:	0801f6b8 	.word	0x0801f6b8

0801ddfc <__lshift>:
 801ddfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de00:	460c      	mov	r4, r1
 801de02:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801de06:	6923      	ldr	r3, [r4, #16]
 801de08:	6849      	ldr	r1, [r1, #4]
 801de0a:	eb0a 0903 	add.w	r9, sl, r3
 801de0e:	68a3      	ldr	r3, [r4, #8]
 801de10:	4607      	mov	r7, r0
 801de12:	4616      	mov	r6, r2
 801de14:	f109 0501 	add.w	r5, r9, #1
 801de18:	42ab      	cmp	r3, r5
 801de1a:	db32      	blt.n	801de82 <__lshift+0x86>
 801de1c:	4638      	mov	r0, r7
 801de1e:	f7ff fdee 	bl	801d9fe <_Balloc>
 801de22:	2300      	movs	r3, #0
 801de24:	4680      	mov	r8, r0
 801de26:	f100 0114 	add.w	r1, r0, #20
 801de2a:	461a      	mov	r2, r3
 801de2c:	4553      	cmp	r3, sl
 801de2e:	db2b      	blt.n	801de88 <__lshift+0x8c>
 801de30:	6920      	ldr	r0, [r4, #16]
 801de32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801de36:	f104 0314 	add.w	r3, r4, #20
 801de3a:	f016 021f 	ands.w	r2, r6, #31
 801de3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801de42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801de46:	d025      	beq.n	801de94 <__lshift+0x98>
 801de48:	f1c2 0e20 	rsb	lr, r2, #32
 801de4c:	2000      	movs	r0, #0
 801de4e:	681e      	ldr	r6, [r3, #0]
 801de50:	468a      	mov	sl, r1
 801de52:	4096      	lsls	r6, r2
 801de54:	4330      	orrs	r0, r6
 801de56:	f84a 0b04 	str.w	r0, [sl], #4
 801de5a:	f853 0b04 	ldr.w	r0, [r3], #4
 801de5e:	459c      	cmp	ip, r3
 801de60:	fa20 f00e 	lsr.w	r0, r0, lr
 801de64:	d814      	bhi.n	801de90 <__lshift+0x94>
 801de66:	6048      	str	r0, [r1, #4]
 801de68:	b108      	cbz	r0, 801de6e <__lshift+0x72>
 801de6a:	f109 0502 	add.w	r5, r9, #2
 801de6e:	3d01      	subs	r5, #1
 801de70:	4638      	mov	r0, r7
 801de72:	f8c8 5010 	str.w	r5, [r8, #16]
 801de76:	4621      	mov	r1, r4
 801de78:	f7ff fdf5 	bl	801da66 <_Bfree>
 801de7c:	4640      	mov	r0, r8
 801de7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de82:	3101      	adds	r1, #1
 801de84:	005b      	lsls	r3, r3, #1
 801de86:	e7c7      	b.n	801de18 <__lshift+0x1c>
 801de88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801de8c:	3301      	adds	r3, #1
 801de8e:	e7cd      	b.n	801de2c <__lshift+0x30>
 801de90:	4651      	mov	r1, sl
 801de92:	e7dc      	b.n	801de4e <__lshift+0x52>
 801de94:	3904      	subs	r1, #4
 801de96:	f853 2b04 	ldr.w	r2, [r3], #4
 801de9a:	f841 2f04 	str.w	r2, [r1, #4]!
 801de9e:	459c      	cmp	ip, r3
 801dea0:	d8f9      	bhi.n	801de96 <__lshift+0x9a>
 801dea2:	e7e4      	b.n	801de6e <__lshift+0x72>

0801dea4 <__mcmp>:
 801dea4:	6903      	ldr	r3, [r0, #16]
 801dea6:	690a      	ldr	r2, [r1, #16]
 801dea8:	1a9b      	subs	r3, r3, r2
 801deaa:	b530      	push	{r4, r5, lr}
 801deac:	d10c      	bne.n	801dec8 <__mcmp+0x24>
 801deae:	0092      	lsls	r2, r2, #2
 801deb0:	3014      	adds	r0, #20
 801deb2:	3114      	adds	r1, #20
 801deb4:	1884      	adds	r4, r0, r2
 801deb6:	4411      	add	r1, r2
 801deb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801debc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801dec0:	4295      	cmp	r5, r2
 801dec2:	d003      	beq.n	801decc <__mcmp+0x28>
 801dec4:	d305      	bcc.n	801ded2 <__mcmp+0x2e>
 801dec6:	2301      	movs	r3, #1
 801dec8:	4618      	mov	r0, r3
 801deca:	bd30      	pop	{r4, r5, pc}
 801decc:	42a0      	cmp	r0, r4
 801dece:	d3f3      	bcc.n	801deb8 <__mcmp+0x14>
 801ded0:	e7fa      	b.n	801dec8 <__mcmp+0x24>
 801ded2:	f04f 33ff 	mov.w	r3, #4294967295
 801ded6:	e7f7      	b.n	801dec8 <__mcmp+0x24>

0801ded8 <__mdiff>:
 801ded8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dedc:	460d      	mov	r5, r1
 801dede:	4607      	mov	r7, r0
 801dee0:	4611      	mov	r1, r2
 801dee2:	4628      	mov	r0, r5
 801dee4:	4614      	mov	r4, r2
 801dee6:	f7ff ffdd 	bl	801dea4 <__mcmp>
 801deea:	1e06      	subs	r6, r0, #0
 801deec:	d108      	bne.n	801df00 <__mdiff+0x28>
 801deee:	4631      	mov	r1, r6
 801def0:	4638      	mov	r0, r7
 801def2:	f7ff fd84 	bl	801d9fe <_Balloc>
 801def6:	2301      	movs	r3, #1
 801def8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801defc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df00:	bfa4      	itt	ge
 801df02:	4623      	movge	r3, r4
 801df04:	462c      	movge	r4, r5
 801df06:	4638      	mov	r0, r7
 801df08:	6861      	ldr	r1, [r4, #4]
 801df0a:	bfa6      	itte	ge
 801df0c:	461d      	movge	r5, r3
 801df0e:	2600      	movge	r6, #0
 801df10:	2601      	movlt	r6, #1
 801df12:	f7ff fd74 	bl	801d9fe <_Balloc>
 801df16:	692b      	ldr	r3, [r5, #16]
 801df18:	60c6      	str	r6, [r0, #12]
 801df1a:	6926      	ldr	r6, [r4, #16]
 801df1c:	f105 0914 	add.w	r9, r5, #20
 801df20:	f104 0214 	add.w	r2, r4, #20
 801df24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801df28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801df2c:	f100 0514 	add.w	r5, r0, #20
 801df30:	f04f 0e00 	mov.w	lr, #0
 801df34:	f852 ab04 	ldr.w	sl, [r2], #4
 801df38:	f859 4b04 	ldr.w	r4, [r9], #4
 801df3c:	fa1e f18a 	uxtah	r1, lr, sl
 801df40:	b2a3      	uxth	r3, r4
 801df42:	1ac9      	subs	r1, r1, r3
 801df44:	0c23      	lsrs	r3, r4, #16
 801df46:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801df4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801df4e:	b289      	uxth	r1, r1
 801df50:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801df54:	45c8      	cmp	r8, r9
 801df56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801df5a:	4694      	mov	ip, r2
 801df5c:	f845 3b04 	str.w	r3, [r5], #4
 801df60:	d8e8      	bhi.n	801df34 <__mdiff+0x5c>
 801df62:	45bc      	cmp	ip, r7
 801df64:	d304      	bcc.n	801df70 <__mdiff+0x98>
 801df66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801df6a:	b183      	cbz	r3, 801df8e <__mdiff+0xb6>
 801df6c:	6106      	str	r6, [r0, #16]
 801df6e:	e7c5      	b.n	801defc <__mdiff+0x24>
 801df70:	f85c 1b04 	ldr.w	r1, [ip], #4
 801df74:	fa1e f381 	uxtah	r3, lr, r1
 801df78:	141a      	asrs	r2, r3, #16
 801df7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801df7e:	b29b      	uxth	r3, r3
 801df80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801df84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801df88:	f845 3b04 	str.w	r3, [r5], #4
 801df8c:	e7e9      	b.n	801df62 <__mdiff+0x8a>
 801df8e:	3e01      	subs	r6, #1
 801df90:	e7e9      	b.n	801df66 <__mdiff+0x8e>
	...

0801df94 <__ulp>:
 801df94:	4b12      	ldr	r3, [pc, #72]	; (801dfe0 <__ulp+0x4c>)
 801df96:	ee10 2a90 	vmov	r2, s1
 801df9a:	401a      	ands	r2, r3
 801df9c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	dd04      	ble.n	801dfae <__ulp+0x1a>
 801dfa4:	2000      	movs	r0, #0
 801dfa6:	4619      	mov	r1, r3
 801dfa8:	ec41 0b10 	vmov	d0, r0, r1
 801dfac:	4770      	bx	lr
 801dfae:	425b      	negs	r3, r3
 801dfb0:	151b      	asrs	r3, r3, #20
 801dfb2:	2b13      	cmp	r3, #19
 801dfb4:	f04f 0000 	mov.w	r0, #0
 801dfb8:	f04f 0100 	mov.w	r1, #0
 801dfbc:	dc04      	bgt.n	801dfc8 <__ulp+0x34>
 801dfbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801dfc2:	fa42 f103 	asr.w	r1, r2, r3
 801dfc6:	e7ef      	b.n	801dfa8 <__ulp+0x14>
 801dfc8:	3b14      	subs	r3, #20
 801dfca:	2b1e      	cmp	r3, #30
 801dfcc:	f04f 0201 	mov.w	r2, #1
 801dfd0:	bfda      	itte	le
 801dfd2:	f1c3 031f 	rsble	r3, r3, #31
 801dfd6:	fa02 f303 	lslle.w	r3, r2, r3
 801dfda:	4613      	movgt	r3, r2
 801dfdc:	4618      	mov	r0, r3
 801dfde:	e7e3      	b.n	801dfa8 <__ulp+0x14>
 801dfe0:	7ff00000 	.word	0x7ff00000

0801dfe4 <__b2d>:
 801dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfe6:	6905      	ldr	r5, [r0, #16]
 801dfe8:	f100 0714 	add.w	r7, r0, #20
 801dfec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801dff0:	1f2e      	subs	r6, r5, #4
 801dff2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801dff6:	4620      	mov	r0, r4
 801dff8:	f7ff fdc5 	bl	801db86 <__hi0bits>
 801dffc:	f1c0 0320 	rsb	r3, r0, #32
 801e000:	280a      	cmp	r0, #10
 801e002:	600b      	str	r3, [r1, #0]
 801e004:	f8df c074 	ldr.w	ip, [pc, #116]	; 801e07c <__b2d+0x98>
 801e008:	dc14      	bgt.n	801e034 <__b2d+0x50>
 801e00a:	f1c0 0e0b 	rsb	lr, r0, #11
 801e00e:	fa24 f10e 	lsr.w	r1, r4, lr
 801e012:	42b7      	cmp	r7, r6
 801e014:	ea41 030c 	orr.w	r3, r1, ip
 801e018:	bf34      	ite	cc
 801e01a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e01e:	2100      	movcs	r1, #0
 801e020:	3015      	adds	r0, #21
 801e022:	fa04 f000 	lsl.w	r0, r4, r0
 801e026:	fa21 f10e 	lsr.w	r1, r1, lr
 801e02a:	ea40 0201 	orr.w	r2, r0, r1
 801e02e:	ec43 2b10 	vmov	d0, r2, r3
 801e032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e034:	42b7      	cmp	r7, r6
 801e036:	bf3a      	itte	cc
 801e038:	f1a5 0608 	subcc.w	r6, r5, #8
 801e03c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e040:	2100      	movcs	r1, #0
 801e042:	380b      	subs	r0, #11
 801e044:	d015      	beq.n	801e072 <__b2d+0x8e>
 801e046:	4084      	lsls	r4, r0
 801e048:	f1c0 0520 	rsb	r5, r0, #32
 801e04c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801e050:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801e054:	42be      	cmp	r6, r7
 801e056:	fa21 fc05 	lsr.w	ip, r1, r5
 801e05a:	ea44 030c 	orr.w	r3, r4, ip
 801e05e:	bf8c      	ite	hi
 801e060:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e064:	2400      	movls	r4, #0
 801e066:	fa01 f000 	lsl.w	r0, r1, r0
 801e06a:	40ec      	lsrs	r4, r5
 801e06c:	ea40 0204 	orr.w	r2, r0, r4
 801e070:	e7dd      	b.n	801e02e <__b2d+0x4a>
 801e072:	ea44 030c 	orr.w	r3, r4, ip
 801e076:	460a      	mov	r2, r1
 801e078:	e7d9      	b.n	801e02e <__b2d+0x4a>
 801e07a:	bf00      	nop
 801e07c:	3ff00000 	.word	0x3ff00000

0801e080 <__d2b>:
 801e080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e084:	460e      	mov	r6, r1
 801e086:	2101      	movs	r1, #1
 801e088:	ec59 8b10 	vmov	r8, r9, d0
 801e08c:	4615      	mov	r5, r2
 801e08e:	f7ff fcb6 	bl	801d9fe <_Balloc>
 801e092:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801e096:	4607      	mov	r7, r0
 801e098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e09c:	bb34      	cbnz	r4, 801e0ec <__d2b+0x6c>
 801e09e:	9301      	str	r3, [sp, #4]
 801e0a0:	f1b8 0300 	subs.w	r3, r8, #0
 801e0a4:	d027      	beq.n	801e0f6 <__d2b+0x76>
 801e0a6:	a802      	add	r0, sp, #8
 801e0a8:	f840 3d08 	str.w	r3, [r0, #-8]!
 801e0ac:	f7ff fd8a 	bl	801dbc4 <__lo0bits>
 801e0b0:	9900      	ldr	r1, [sp, #0]
 801e0b2:	b1f0      	cbz	r0, 801e0f2 <__d2b+0x72>
 801e0b4:	9a01      	ldr	r2, [sp, #4]
 801e0b6:	f1c0 0320 	rsb	r3, r0, #32
 801e0ba:	fa02 f303 	lsl.w	r3, r2, r3
 801e0be:	430b      	orrs	r3, r1
 801e0c0:	40c2      	lsrs	r2, r0
 801e0c2:	617b      	str	r3, [r7, #20]
 801e0c4:	9201      	str	r2, [sp, #4]
 801e0c6:	9b01      	ldr	r3, [sp, #4]
 801e0c8:	61bb      	str	r3, [r7, #24]
 801e0ca:	2b00      	cmp	r3, #0
 801e0cc:	bf14      	ite	ne
 801e0ce:	2102      	movne	r1, #2
 801e0d0:	2101      	moveq	r1, #1
 801e0d2:	6139      	str	r1, [r7, #16]
 801e0d4:	b1c4      	cbz	r4, 801e108 <__d2b+0x88>
 801e0d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801e0da:	4404      	add	r4, r0
 801e0dc:	6034      	str	r4, [r6, #0]
 801e0de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e0e2:	6028      	str	r0, [r5, #0]
 801e0e4:	4638      	mov	r0, r7
 801e0e6:	b003      	add	sp, #12
 801e0e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e0ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e0f0:	e7d5      	b.n	801e09e <__d2b+0x1e>
 801e0f2:	6179      	str	r1, [r7, #20]
 801e0f4:	e7e7      	b.n	801e0c6 <__d2b+0x46>
 801e0f6:	a801      	add	r0, sp, #4
 801e0f8:	f7ff fd64 	bl	801dbc4 <__lo0bits>
 801e0fc:	9b01      	ldr	r3, [sp, #4]
 801e0fe:	617b      	str	r3, [r7, #20]
 801e100:	2101      	movs	r1, #1
 801e102:	6139      	str	r1, [r7, #16]
 801e104:	3020      	adds	r0, #32
 801e106:	e7e5      	b.n	801e0d4 <__d2b+0x54>
 801e108:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801e10c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e110:	6030      	str	r0, [r6, #0]
 801e112:	6918      	ldr	r0, [r3, #16]
 801e114:	f7ff fd37 	bl	801db86 <__hi0bits>
 801e118:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801e11c:	e7e1      	b.n	801e0e2 <__d2b+0x62>

0801e11e <__ratio>:
 801e11e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e122:	4688      	mov	r8, r1
 801e124:	4669      	mov	r1, sp
 801e126:	4681      	mov	r9, r0
 801e128:	f7ff ff5c 	bl	801dfe4 <__b2d>
 801e12c:	a901      	add	r1, sp, #4
 801e12e:	4640      	mov	r0, r8
 801e130:	ec57 6b10 	vmov	r6, r7, d0
 801e134:	f7ff ff56 	bl	801dfe4 <__b2d>
 801e138:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e13c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801e140:	eba3 0c02 	sub.w	ip, r3, r2
 801e144:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e148:	1a9b      	subs	r3, r3, r2
 801e14a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e14e:	ec5b ab10 	vmov	sl, fp, d0
 801e152:	2b00      	cmp	r3, #0
 801e154:	bfce      	itee	gt
 801e156:	463a      	movgt	r2, r7
 801e158:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e15c:	465a      	movle	r2, fp
 801e15e:	4659      	mov	r1, fp
 801e160:	463d      	mov	r5, r7
 801e162:	bfd4      	ite	le
 801e164:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801e168:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801e16c:	4630      	mov	r0, r6
 801e16e:	ee10 2a10 	vmov	r2, s0
 801e172:	460b      	mov	r3, r1
 801e174:	4629      	mov	r1, r5
 801e176:	f7e2 fb79 	bl	800086c <__aeabi_ddiv>
 801e17a:	ec41 0b10 	vmov	d0, r0, r1
 801e17e:	b003      	add	sp, #12
 801e180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e184 <__copybits>:
 801e184:	3901      	subs	r1, #1
 801e186:	b510      	push	{r4, lr}
 801e188:	1149      	asrs	r1, r1, #5
 801e18a:	6914      	ldr	r4, [r2, #16]
 801e18c:	3101      	adds	r1, #1
 801e18e:	f102 0314 	add.w	r3, r2, #20
 801e192:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e196:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e19a:	42a3      	cmp	r3, r4
 801e19c:	4602      	mov	r2, r0
 801e19e:	d303      	bcc.n	801e1a8 <__copybits+0x24>
 801e1a0:	2300      	movs	r3, #0
 801e1a2:	428a      	cmp	r2, r1
 801e1a4:	d305      	bcc.n	801e1b2 <__copybits+0x2e>
 801e1a6:	bd10      	pop	{r4, pc}
 801e1a8:	f853 2b04 	ldr.w	r2, [r3], #4
 801e1ac:	f840 2b04 	str.w	r2, [r0], #4
 801e1b0:	e7f3      	b.n	801e19a <__copybits+0x16>
 801e1b2:	f842 3b04 	str.w	r3, [r2], #4
 801e1b6:	e7f4      	b.n	801e1a2 <__copybits+0x1e>

0801e1b8 <__any_on>:
 801e1b8:	f100 0214 	add.w	r2, r0, #20
 801e1bc:	6900      	ldr	r0, [r0, #16]
 801e1be:	114b      	asrs	r3, r1, #5
 801e1c0:	4298      	cmp	r0, r3
 801e1c2:	b510      	push	{r4, lr}
 801e1c4:	db11      	blt.n	801e1ea <__any_on+0x32>
 801e1c6:	dd0a      	ble.n	801e1de <__any_on+0x26>
 801e1c8:	f011 011f 	ands.w	r1, r1, #31
 801e1cc:	d007      	beq.n	801e1de <__any_on+0x26>
 801e1ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e1d2:	fa24 f001 	lsr.w	r0, r4, r1
 801e1d6:	fa00 f101 	lsl.w	r1, r0, r1
 801e1da:	428c      	cmp	r4, r1
 801e1dc:	d10b      	bne.n	801e1f6 <__any_on+0x3e>
 801e1de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e1e2:	4293      	cmp	r3, r2
 801e1e4:	d803      	bhi.n	801e1ee <__any_on+0x36>
 801e1e6:	2000      	movs	r0, #0
 801e1e8:	bd10      	pop	{r4, pc}
 801e1ea:	4603      	mov	r3, r0
 801e1ec:	e7f7      	b.n	801e1de <__any_on+0x26>
 801e1ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e1f2:	2900      	cmp	r1, #0
 801e1f4:	d0f5      	beq.n	801e1e2 <__any_on+0x2a>
 801e1f6:	2001      	movs	r0, #1
 801e1f8:	e7f6      	b.n	801e1e8 <__any_on+0x30>

0801e1fa <_calloc_r>:
 801e1fa:	b538      	push	{r3, r4, r5, lr}
 801e1fc:	fb02 f401 	mul.w	r4, r2, r1
 801e200:	4621      	mov	r1, r4
 801e202:	f000 f857 	bl	801e2b4 <_malloc_r>
 801e206:	4605      	mov	r5, r0
 801e208:	b118      	cbz	r0, 801e212 <_calloc_r+0x18>
 801e20a:	4622      	mov	r2, r4
 801e20c:	2100      	movs	r1, #0
 801e20e:	f7fc f82a 	bl	801a266 <memset>
 801e212:	4628      	mov	r0, r5
 801e214:	bd38      	pop	{r3, r4, r5, pc}
	...

0801e218 <_free_r>:
 801e218:	b538      	push	{r3, r4, r5, lr}
 801e21a:	4605      	mov	r5, r0
 801e21c:	2900      	cmp	r1, #0
 801e21e:	d045      	beq.n	801e2ac <_free_r+0x94>
 801e220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e224:	1f0c      	subs	r4, r1, #4
 801e226:	2b00      	cmp	r3, #0
 801e228:	bfb8      	it	lt
 801e22a:	18e4      	addlt	r4, r4, r3
 801e22c:	f000 fb20 	bl	801e870 <__malloc_lock>
 801e230:	4a1f      	ldr	r2, [pc, #124]	; (801e2b0 <_free_r+0x98>)
 801e232:	6813      	ldr	r3, [r2, #0]
 801e234:	4610      	mov	r0, r2
 801e236:	b933      	cbnz	r3, 801e246 <_free_r+0x2e>
 801e238:	6063      	str	r3, [r4, #4]
 801e23a:	6014      	str	r4, [r2, #0]
 801e23c:	4628      	mov	r0, r5
 801e23e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e242:	f000 bb16 	b.w	801e872 <__malloc_unlock>
 801e246:	42a3      	cmp	r3, r4
 801e248:	d90c      	bls.n	801e264 <_free_r+0x4c>
 801e24a:	6821      	ldr	r1, [r4, #0]
 801e24c:	1862      	adds	r2, r4, r1
 801e24e:	4293      	cmp	r3, r2
 801e250:	bf04      	itt	eq
 801e252:	681a      	ldreq	r2, [r3, #0]
 801e254:	685b      	ldreq	r3, [r3, #4]
 801e256:	6063      	str	r3, [r4, #4]
 801e258:	bf04      	itt	eq
 801e25a:	1852      	addeq	r2, r2, r1
 801e25c:	6022      	streq	r2, [r4, #0]
 801e25e:	6004      	str	r4, [r0, #0]
 801e260:	e7ec      	b.n	801e23c <_free_r+0x24>
 801e262:	4613      	mov	r3, r2
 801e264:	685a      	ldr	r2, [r3, #4]
 801e266:	b10a      	cbz	r2, 801e26c <_free_r+0x54>
 801e268:	42a2      	cmp	r2, r4
 801e26a:	d9fa      	bls.n	801e262 <_free_r+0x4a>
 801e26c:	6819      	ldr	r1, [r3, #0]
 801e26e:	1858      	adds	r0, r3, r1
 801e270:	42a0      	cmp	r0, r4
 801e272:	d10b      	bne.n	801e28c <_free_r+0x74>
 801e274:	6820      	ldr	r0, [r4, #0]
 801e276:	4401      	add	r1, r0
 801e278:	1858      	adds	r0, r3, r1
 801e27a:	4282      	cmp	r2, r0
 801e27c:	6019      	str	r1, [r3, #0]
 801e27e:	d1dd      	bne.n	801e23c <_free_r+0x24>
 801e280:	6810      	ldr	r0, [r2, #0]
 801e282:	6852      	ldr	r2, [r2, #4]
 801e284:	605a      	str	r2, [r3, #4]
 801e286:	4401      	add	r1, r0
 801e288:	6019      	str	r1, [r3, #0]
 801e28a:	e7d7      	b.n	801e23c <_free_r+0x24>
 801e28c:	d902      	bls.n	801e294 <_free_r+0x7c>
 801e28e:	230c      	movs	r3, #12
 801e290:	602b      	str	r3, [r5, #0]
 801e292:	e7d3      	b.n	801e23c <_free_r+0x24>
 801e294:	6820      	ldr	r0, [r4, #0]
 801e296:	1821      	adds	r1, r4, r0
 801e298:	428a      	cmp	r2, r1
 801e29a:	bf04      	itt	eq
 801e29c:	6811      	ldreq	r1, [r2, #0]
 801e29e:	6852      	ldreq	r2, [r2, #4]
 801e2a0:	6062      	str	r2, [r4, #4]
 801e2a2:	bf04      	itt	eq
 801e2a4:	1809      	addeq	r1, r1, r0
 801e2a6:	6021      	streq	r1, [r4, #0]
 801e2a8:	605c      	str	r4, [r3, #4]
 801e2aa:	e7c7      	b.n	801e23c <_free_r+0x24>
 801e2ac:	bd38      	pop	{r3, r4, r5, pc}
 801e2ae:	bf00      	nop
 801e2b0:	200052d0 	.word	0x200052d0

0801e2b4 <_malloc_r>:
 801e2b4:	b570      	push	{r4, r5, r6, lr}
 801e2b6:	1ccd      	adds	r5, r1, #3
 801e2b8:	f025 0503 	bic.w	r5, r5, #3
 801e2bc:	3508      	adds	r5, #8
 801e2be:	2d0c      	cmp	r5, #12
 801e2c0:	bf38      	it	cc
 801e2c2:	250c      	movcc	r5, #12
 801e2c4:	2d00      	cmp	r5, #0
 801e2c6:	4606      	mov	r6, r0
 801e2c8:	db01      	blt.n	801e2ce <_malloc_r+0x1a>
 801e2ca:	42a9      	cmp	r1, r5
 801e2cc:	d903      	bls.n	801e2d6 <_malloc_r+0x22>
 801e2ce:	230c      	movs	r3, #12
 801e2d0:	6033      	str	r3, [r6, #0]
 801e2d2:	2000      	movs	r0, #0
 801e2d4:	bd70      	pop	{r4, r5, r6, pc}
 801e2d6:	f000 facb 	bl	801e870 <__malloc_lock>
 801e2da:	4a21      	ldr	r2, [pc, #132]	; (801e360 <_malloc_r+0xac>)
 801e2dc:	6814      	ldr	r4, [r2, #0]
 801e2de:	4621      	mov	r1, r4
 801e2e0:	b991      	cbnz	r1, 801e308 <_malloc_r+0x54>
 801e2e2:	4c20      	ldr	r4, [pc, #128]	; (801e364 <_malloc_r+0xb0>)
 801e2e4:	6823      	ldr	r3, [r4, #0]
 801e2e6:	b91b      	cbnz	r3, 801e2f0 <_malloc_r+0x3c>
 801e2e8:	4630      	mov	r0, r6
 801e2ea:	f000 f9b5 	bl	801e658 <_sbrk_r>
 801e2ee:	6020      	str	r0, [r4, #0]
 801e2f0:	4629      	mov	r1, r5
 801e2f2:	4630      	mov	r0, r6
 801e2f4:	f000 f9b0 	bl	801e658 <_sbrk_r>
 801e2f8:	1c43      	adds	r3, r0, #1
 801e2fa:	d124      	bne.n	801e346 <_malloc_r+0x92>
 801e2fc:	230c      	movs	r3, #12
 801e2fe:	6033      	str	r3, [r6, #0]
 801e300:	4630      	mov	r0, r6
 801e302:	f000 fab6 	bl	801e872 <__malloc_unlock>
 801e306:	e7e4      	b.n	801e2d2 <_malloc_r+0x1e>
 801e308:	680b      	ldr	r3, [r1, #0]
 801e30a:	1b5b      	subs	r3, r3, r5
 801e30c:	d418      	bmi.n	801e340 <_malloc_r+0x8c>
 801e30e:	2b0b      	cmp	r3, #11
 801e310:	d90f      	bls.n	801e332 <_malloc_r+0x7e>
 801e312:	600b      	str	r3, [r1, #0]
 801e314:	50cd      	str	r5, [r1, r3]
 801e316:	18cc      	adds	r4, r1, r3
 801e318:	4630      	mov	r0, r6
 801e31a:	f000 faaa 	bl	801e872 <__malloc_unlock>
 801e31e:	f104 000b 	add.w	r0, r4, #11
 801e322:	1d23      	adds	r3, r4, #4
 801e324:	f020 0007 	bic.w	r0, r0, #7
 801e328:	1ac3      	subs	r3, r0, r3
 801e32a:	d0d3      	beq.n	801e2d4 <_malloc_r+0x20>
 801e32c:	425a      	negs	r2, r3
 801e32e:	50e2      	str	r2, [r4, r3]
 801e330:	e7d0      	b.n	801e2d4 <_malloc_r+0x20>
 801e332:	428c      	cmp	r4, r1
 801e334:	684b      	ldr	r3, [r1, #4]
 801e336:	bf16      	itet	ne
 801e338:	6063      	strne	r3, [r4, #4]
 801e33a:	6013      	streq	r3, [r2, #0]
 801e33c:	460c      	movne	r4, r1
 801e33e:	e7eb      	b.n	801e318 <_malloc_r+0x64>
 801e340:	460c      	mov	r4, r1
 801e342:	6849      	ldr	r1, [r1, #4]
 801e344:	e7cc      	b.n	801e2e0 <_malloc_r+0x2c>
 801e346:	1cc4      	adds	r4, r0, #3
 801e348:	f024 0403 	bic.w	r4, r4, #3
 801e34c:	42a0      	cmp	r0, r4
 801e34e:	d005      	beq.n	801e35c <_malloc_r+0xa8>
 801e350:	1a21      	subs	r1, r4, r0
 801e352:	4630      	mov	r0, r6
 801e354:	f000 f980 	bl	801e658 <_sbrk_r>
 801e358:	3001      	adds	r0, #1
 801e35a:	d0cf      	beq.n	801e2fc <_malloc_r+0x48>
 801e35c:	6025      	str	r5, [r4, #0]
 801e35e:	e7db      	b.n	801e318 <_malloc_r+0x64>
 801e360:	200052d0 	.word	0x200052d0
 801e364:	200052d4 	.word	0x200052d4

0801e368 <_realloc_r>:
 801e368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e36a:	4607      	mov	r7, r0
 801e36c:	4614      	mov	r4, r2
 801e36e:	460e      	mov	r6, r1
 801e370:	b921      	cbnz	r1, 801e37c <_realloc_r+0x14>
 801e372:	4611      	mov	r1, r2
 801e374:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e378:	f7ff bf9c 	b.w	801e2b4 <_malloc_r>
 801e37c:	b922      	cbnz	r2, 801e388 <_realloc_r+0x20>
 801e37e:	f7ff ff4b 	bl	801e218 <_free_r>
 801e382:	4625      	mov	r5, r4
 801e384:	4628      	mov	r0, r5
 801e386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e388:	f000 fa74 	bl	801e874 <_malloc_usable_size_r>
 801e38c:	42a0      	cmp	r0, r4
 801e38e:	d20f      	bcs.n	801e3b0 <_realloc_r+0x48>
 801e390:	4621      	mov	r1, r4
 801e392:	4638      	mov	r0, r7
 801e394:	f7ff ff8e 	bl	801e2b4 <_malloc_r>
 801e398:	4605      	mov	r5, r0
 801e39a:	2800      	cmp	r0, #0
 801e39c:	d0f2      	beq.n	801e384 <_realloc_r+0x1c>
 801e39e:	4631      	mov	r1, r6
 801e3a0:	4622      	mov	r2, r4
 801e3a2:	f7fb ff55 	bl	801a250 <memcpy>
 801e3a6:	4631      	mov	r1, r6
 801e3a8:	4638      	mov	r0, r7
 801e3aa:	f7ff ff35 	bl	801e218 <_free_r>
 801e3ae:	e7e9      	b.n	801e384 <_realloc_r+0x1c>
 801e3b0:	4635      	mov	r5, r6
 801e3b2:	e7e7      	b.n	801e384 <_realloc_r+0x1c>

0801e3b4 <__ssputs_r>:
 801e3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e3b8:	688e      	ldr	r6, [r1, #8]
 801e3ba:	429e      	cmp	r6, r3
 801e3bc:	4682      	mov	sl, r0
 801e3be:	460c      	mov	r4, r1
 801e3c0:	4690      	mov	r8, r2
 801e3c2:	4699      	mov	r9, r3
 801e3c4:	d837      	bhi.n	801e436 <__ssputs_r+0x82>
 801e3c6:	898a      	ldrh	r2, [r1, #12]
 801e3c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e3cc:	d031      	beq.n	801e432 <__ssputs_r+0x7e>
 801e3ce:	6825      	ldr	r5, [r4, #0]
 801e3d0:	6909      	ldr	r1, [r1, #16]
 801e3d2:	1a6f      	subs	r7, r5, r1
 801e3d4:	6965      	ldr	r5, [r4, #20]
 801e3d6:	2302      	movs	r3, #2
 801e3d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e3dc:	fb95 f5f3 	sdiv	r5, r5, r3
 801e3e0:	f109 0301 	add.w	r3, r9, #1
 801e3e4:	443b      	add	r3, r7
 801e3e6:	429d      	cmp	r5, r3
 801e3e8:	bf38      	it	cc
 801e3ea:	461d      	movcc	r5, r3
 801e3ec:	0553      	lsls	r3, r2, #21
 801e3ee:	d530      	bpl.n	801e452 <__ssputs_r+0x9e>
 801e3f0:	4629      	mov	r1, r5
 801e3f2:	f7ff ff5f 	bl	801e2b4 <_malloc_r>
 801e3f6:	4606      	mov	r6, r0
 801e3f8:	b950      	cbnz	r0, 801e410 <__ssputs_r+0x5c>
 801e3fa:	230c      	movs	r3, #12
 801e3fc:	f8ca 3000 	str.w	r3, [sl]
 801e400:	89a3      	ldrh	r3, [r4, #12]
 801e402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e406:	81a3      	strh	r3, [r4, #12]
 801e408:	f04f 30ff 	mov.w	r0, #4294967295
 801e40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e410:	463a      	mov	r2, r7
 801e412:	6921      	ldr	r1, [r4, #16]
 801e414:	f7fb ff1c 	bl	801a250 <memcpy>
 801e418:	89a3      	ldrh	r3, [r4, #12]
 801e41a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e41e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e422:	81a3      	strh	r3, [r4, #12]
 801e424:	6126      	str	r6, [r4, #16]
 801e426:	6165      	str	r5, [r4, #20]
 801e428:	443e      	add	r6, r7
 801e42a:	1bed      	subs	r5, r5, r7
 801e42c:	6026      	str	r6, [r4, #0]
 801e42e:	60a5      	str	r5, [r4, #8]
 801e430:	464e      	mov	r6, r9
 801e432:	454e      	cmp	r6, r9
 801e434:	d900      	bls.n	801e438 <__ssputs_r+0x84>
 801e436:	464e      	mov	r6, r9
 801e438:	4632      	mov	r2, r6
 801e43a:	4641      	mov	r1, r8
 801e43c:	6820      	ldr	r0, [r4, #0]
 801e43e:	f7ff fac5 	bl	801d9cc <memmove>
 801e442:	68a3      	ldr	r3, [r4, #8]
 801e444:	1b9b      	subs	r3, r3, r6
 801e446:	60a3      	str	r3, [r4, #8]
 801e448:	6823      	ldr	r3, [r4, #0]
 801e44a:	441e      	add	r6, r3
 801e44c:	6026      	str	r6, [r4, #0]
 801e44e:	2000      	movs	r0, #0
 801e450:	e7dc      	b.n	801e40c <__ssputs_r+0x58>
 801e452:	462a      	mov	r2, r5
 801e454:	f7ff ff88 	bl	801e368 <_realloc_r>
 801e458:	4606      	mov	r6, r0
 801e45a:	2800      	cmp	r0, #0
 801e45c:	d1e2      	bne.n	801e424 <__ssputs_r+0x70>
 801e45e:	6921      	ldr	r1, [r4, #16]
 801e460:	4650      	mov	r0, sl
 801e462:	f7ff fed9 	bl	801e218 <_free_r>
 801e466:	e7c8      	b.n	801e3fa <__ssputs_r+0x46>

0801e468 <_svfiprintf_r>:
 801e468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e46c:	461d      	mov	r5, r3
 801e46e:	898b      	ldrh	r3, [r1, #12]
 801e470:	061f      	lsls	r7, r3, #24
 801e472:	b09d      	sub	sp, #116	; 0x74
 801e474:	4680      	mov	r8, r0
 801e476:	460c      	mov	r4, r1
 801e478:	4616      	mov	r6, r2
 801e47a:	d50f      	bpl.n	801e49c <_svfiprintf_r+0x34>
 801e47c:	690b      	ldr	r3, [r1, #16]
 801e47e:	b96b      	cbnz	r3, 801e49c <_svfiprintf_r+0x34>
 801e480:	2140      	movs	r1, #64	; 0x40
 801e482:	f7ff ff17 	bl	801e2b4 <_malloc_r>
 801e486:	6020      	str	r0, [r4, #0]
 801e488:	6120      	str	r0, [r4, #16]
 801e48a:	b928      	cbnz	r0, 801e498 <_svfiprintf_r+0x30>
 801e48c:	230c      	movs	r3, #12
 801e48e:	f8c8 3000 	str.w	r3, [r8]
 801e492:	f04f 30ff 	mov.w	r0, #4294967295
 801e496:	e0c8      	b.n	801e62a <_svfiprintf_r+0x1c2>
 801e498:	2340      	movs	r3, #64	; 0x40
 801e49a:	6163      	str	r3, [r4, #20]
 801e49c:	2300      	movs	r3, #0
 801e49e:	9309      	str	r3, [sp, #36]	; 0x24
 801e4a0:	2320      	movs	r3, #32
 801e4a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e4a6:	2330      	movs	r3, #48	; 0x30
 801e4a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e4ac:	9503      	str	r5, [sp, #12]
 801e4ae:	f04f 0b01 	mov.w	fp, #1
 801e4b2:	4637      	mov	r7, r6
 801e4b4:	463d      	mov	r5, r7
 801e4b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e4ba:	b10b      	cbz	r3, 801e4c0 <_svfiprintf_r+0x58>
 801e4bc:	2b25      	cmp	r3, #37	; 0x25
 801e4be:	d13e      	bne.n	801e53e <_svfiprintf_r+0xd6>
 801e4c0:	ebb7 0a06 	subs.w	sl, r7, r6
 801e4c4:	d00b      	beq.n	801e4de <_svfiprintf_r+0x76>
 801e4c6:	4653      	mov	r3, sl
 801e4c8:	4632      	mov	r2, r6
 801e4ca:	4621      	mov	r1, r4
 801e4cc:	4640      	mov	r0, r8
 801e4ce:	f7ff ff71 	bl	801e3b4 <__ssputs_r>
 801e4d2:	3001      	adds	r0, #1
 801e4d4:	f000 80a4 	beq.w	801e620 <_svfiprintf_r+0x1b8>
 801e4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4da:	4453      	add	r3, sl
 801e4dc:	9309      	str	r3, [sp, #36]	; 0x24
 801e4de:	783b      	ldrb	r3, [r7, #0]
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	f000 809d 	beq.w	801e620 <_svfiprintf_r+0x1b8>
 801e4e6:	2300      	movs	r3, #0
 801e4e8:	f04f 32ff 	mov.w	r2, #4294967295
 801e4ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e4f0:	9304      	str	r3, [sp, #16]
 801e4f2:	9307      	str	r3, [sp, #28]
 801e4f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e4f8:	931a      	str	r3, [sp, #104]	; 0x68
 801e4fa:	462f      	mov	r7, r5
 801e4fc:	2205      	movs	r2, #5
 801e4fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 801e502:	4850      	ldr	r0, [pc, #320]	; (801e644 <_svfiprintf_r+0x1dc>)
 801e504:	f7e1 fe7c 	bl	8000200 <memchr>
 801e508:	9b04      	ldr	r3, [sp, #16]
 801e50a:	b9d0      	cbnz	r0, 801e542 <_svfiprintf_r+0xda>
 801e50c:	06d9      	lsls	r1, r3, #27
 801e50e:	bf44      	itt	mi
 801e510:	2220      	movmi	r2, #32
 801e512:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e516:	071a      	lsls	r2, r3, #28
 801e518:	bf44      	itt	mi
 801e51a:	222b      	movmi	r2, #43	; 0x2b
 801e51c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e520:	782a      	ldrb	r2, [r5, #0]
 801e522:	2a2a      	cmp	r2, #42	; 0x2a
 801e524:	d015      	beq.n	801e552 <_svfiprintf_r+0xea>
 801e526:	9a07      	ldr	r2, [sp, #28]
 801e528:	462f      	mov	r7, r5
 801e52a:	2000      	movs	r0, #0
 801e52c:	250a      	movs	r5, #10
 801e52e:	4639      	mov	r1, r7
 801e530:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e534:	3b30      	subs	r3, #48	; 0x30
 801e536:	2b09      	cmp	r3, #9
 801e538:	d94d      	bls.n	801e5d6 <_svfiprintf_r+0x16e>
 801e53a:	b1b8      	cbz	r0, 801e56c <_svfiprintf_r+0x104>
 801e53c:	e00f      	b.n	801e55e <_svfiprintf_r+0xf6>
 801e53e:	462f      	mov	r7, r5
 801e540:	e7b8      	b.n	801e4b4 <_svfiprintf_r+0x4c>
 801e542:	4a40      	ldr	r2, [pc, #256]	; (801e644 <_svfiprintf_r+0x1dc>)
 801e544:	1a80      	subs	r0, r0, r2
 801e546:	fa0b f000 	lsl.w	r0, fp, r0
 801e54a:	4318      	orrs	r0, r3
 801e54c:	9004      	str	r0, [sp, #16]
 801e54e:	463d      	mov	r5, r7
 801e550:	e7d3      	b.n	801e4fa <_svfiprintf_r+0x92>
 801e552:	9a03      	ldr	r2, [sp, #12]
 801e554:	1d11      	adds	r1, r2, #4
 801e556:	6812      	ldr	r2, [r2, #0]
 801e558:	9103      	str	r1, [sp, #12]
 801e55a:	2a00      	cmp	r2, #0
 801e55c:	db01      	blt.n	801e562 <_svfiprintf_r+0xfa>
 801e55e:	9207      	str	r2, [sp, #28]
 801e560:	e004      	b.n	801e56c <_svfiprintf_r+0x104>
 801e562:	4252      	negs	r2, r2
 801e564:	f043 0302 	orr.w	r3, r3, #2
 801e568:	9207      	str	r2, [sp, #28]
 801e56a:	9304      	str	r3, [sp, #16]
 801e56c:	783b      	ldrb	r3, [r7, #0]
 801e56e:	2b2e      	cmp	r3, #46	; 0x2e
 801e570:	d10c      	bne.n	801e58c <_svfiprintf_r+0x124>
 801e572:	787b      	ldrb	r3, [r7, #1]
 801e574:	2b2a      	cmp	r3, #42	; 0x2a
 801e576:	d133      	bne.n	801e5e0 <_svfiprintf_r+0x178>
 801e578:	9b03      	ldr	r3, [sp, #12]
 801e57a:	1d1a      	adds	r2, r3, #4
 801e57c:	681b      	ldr	r3, [r3, #0]
 801e57e:	9203      	str	r2, [sp, #12]
 801e580:	2b00      	cmp	r3, #0
 801e582:	bfb8      	it	lt
 801e584:	f04f 33ff 	movlt.w	r3, #4294967295
 801e588:	3702      	adds	r7, #2
 801e58a:	9305      	str	r3, [sp, #20]
 801e58c:	4d2e      	ldr	r5, [pc, #184]	; (801e648 <_svfiprintf_r+0x1e0>)
 801e58e:	7839      	ldrb	r1, [r7, #0]
 801e590:	2203      	movs	r2, #3
 801e592:	4628      	mov	r0, r5
 801e594:	f7e1 fe34 	bl	8000200 <memchr>
 801e598:	b138      	cbz	r0, 801e5aa <_svfiprintf_r+0x142>
 801e59a:	2340      	movs	r3, #64	; 0x40
 801e59c:	1b40      	subs	r0, r0, r5
 801e59e:	fa03 f000 	lsl.w	r0, r3, r0
 801e5a2:	9b04      	ldr	r3, [sp, #16]
 801e5a4:	4303      	orrs	r3, r0
 801e5a6:	3701      	adds	r7, #1
 801e5a8:	9304      	str	r3, [sp, #16]
 801e5aa:	7839      	ldrb	r1, [r7, #0]
 801e5ac:	4827      	ldr	r0, [pc, #156]	; (801e64c <_svfiprintf_r+0x1e4>)
 801e5ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e5b2:	2206      	movs	r2, #6
 801e5b4:	1c7e      	adds	r6, r7, #1
 801e5b6:	f7e1 fe23 	bl	8000200 <memchr>
 801e5ba:	2800      	cmp	r0, #0
 801e5bc:	d038      	beq.n	801e630 <_svfiprintf_r+0x1c8>
 801e5be:	4b24      	ldr	r3, [pc, #144]	; (801e650 <_svfiprintf_r+0x1e8>)
 801e5c0:	bb13      	cbnz	r3, 801e608 <_svfiprintf_r+0x1a0>
 801e5c2:	9b03      	ldr	r3, [sp, #12]
 801e5c4:	3307      	adds	r3, #7
 801e5c6:	f023 0307 	bic.w	r3, r3, #7
 801e5ca:	3308      	adds	r3, #8
 801e5cc:	9303      	str	r3, [sp, #12]
 801e5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5d0:	444b      	add	r3, r9
 801e5d2:	9309      	str	r3, [sp, #36]	; 0x24
 801e5d4:	e76d      	b.n	801e4b2 <_svfiprintf_r+0x4a>
 801e5d6:	fb05 3202 	mla	r2, r5, r2, r3
 801e5da:	2001      	movs	r0, #1
 801e5dc:	460f      	mov	r7, r1
 801e5de:	e7a6      	b.n	801e52e <_svfiprintf_r+0xc6>
 801e5e0:	2300      	movs	r3, #0
 801e5e2:	3701      	adds	r7, #1
 801e5e4:	9305      	str	r3, [sp, #20]
 801e5e6:	4619      	mov	r1, r3
 801e5e8:	250a      	movs	r5, #10
 801e5ea:	4638      	mov	r0, r7
 801e5ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e5f0:	3a30      	subs	r2, #48	; 0x30
 801e5f2:	2a09      	cmp	r2, #9
 801e5f4:	d903      	bls.n	801e5fe <_svfiprintf_r+0x196>
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d0c8      	beq.n	801e58c <_svfiprintf_r+0x124>
 801e5fa:	9105      	str	r1, [sp, #20]
 801e5fc:	e7c6      	b.n	801e58c <_svfiprintf_r+0x124>
 801e5fe:	fb05 2101 	mla	r1, r5, r1, r2
 801e602:	2301      	movs	r3, #1
 801e604:	4607      	mov	r7, r0
 801e606:	e7f0      	b.n	801e5ea <_svfiprintf_r+0x182>
 801e608:	ab03      	add	r3, sp, #12
 801e60a:	9300      	str	r3, [sp, #0]
 801e60c:	4622      	mov	r2, r4
 801e60e:	4b11      	ldr	r3, [pc, #68]	; (801e654 <_svfiprintf_r+0x1ec>)
 801e610:	a904      	add	r1, sp, #16
 801e612:	4640      	mov	r0, r8
 801e614:	f7fc f802 	bl	801a61c <_printf_float>
 801e618:	f1b0 3fff 	cmp.w	r0, #4294967295
 801e61c:	4681      	mov	r9, r0
 801e61e:	d1d6      	bne.n	801e5ce <_svfiprintf_r+0x166>
 801e620:	89a3      	ldrh	r3, [r4, #12]
 801e622:	065b      	lsls	r3, r3, #25
 801e624:	f53f af35 	bmi.w	801e492 <_svfiprintf_r+0x2a>
 801e628:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e62a:	b01d      	add	sp, #116	; 0x74
 801e62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e630:	ab03      	add	r3, sp, #12
 801e632:	9300      	str	r3, [sp, #0]
 801e634:	4622      	mov	r2, r4
 801e636:	4b07      	ldr	r3, [pc, #28]	; (801e654 <_svfiprintf_r+0x1ec>)
 801e638:	a904      	add	r1, sp, #16
 801e63a:	4640      	mov	r0, r8
 801e63c:	f7fc faa4 	bl	801ab88 <_printf_i>
 801e640:	e7ea      	b.n	801e618 <_svfiprintf_r+0x1b0>
 801e642:	bf00      	nop
 801e644:	0801f4b0 	.word	0x0801f4b0
 801e648:	0801f4b6 	.word	0x0801f4b6
 801e64c:	0801f4ba 	.word	0x0801f4ba
 801e650:	0801a61d 	.word	0x0801a61d
 801e654:	0801e3b5 	.word	0x0801e3b5

0801e658 <_sbrk_r>:
 801e658:	b538      	push	{r3, r4, r5, lr}
 801e65a:	4c06      	ldr	r4, [pc, #24]	; (801e674 <_sbrk_r+0x1c>)
 801e65c:	2300      	movs	r3, #0
 801e65e:	4605      	mov	r5, r0
 801e660:	4608      	mov	r0, r1
 801e662:	6023      	str	r3, [r4, #0]
 801e664:	f7ea f8f0 	bl	8008848 <_sbrk>
 801e668:	1c43      	adds	r3, r0, #1
 801e66a:	d102      	bne.n	801e672 <_sbrk_r+0x1a>
 801e66c:	6823      	ldr	r3, [r4, #0]
 801e66e:	b103      	cbz	r3, 801e672 <_sbrk_r+0x1a>
 801e670:	602b      	str	r3, [r5, #0]
 801e672:	bd38      	pop	{r3, r4, r5, pc}
 801e674:	20009a9c 	.word	0x20009a9c

0801e678 <_raise_r>:
 801e678:	291f      	cmp	r1, #31
 801e67a:	b538      	push	{r3, r4, r5, lr}
 801e67c:	4604      	mov	r4, r0
 801e67e:	460d      	mov	r5, r1
 801e680:	d904      	bls.n	801e68c <_raise_r+0x14>
 801e682:	2316      	movs	r3, #22
 801e684:	6003      	str	r3, [r0, #0]
 801e686:	f04f 30ff 	mov.w	r0, #4294967295
 801e68a:	bd38      	pop	{r3, r4, r5, pc}
 801e68c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e68e:	b112      	cbz	r2, 801e696 <_raise_r+0x1e>
 801e690:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e694:	b94b      	cbnz	r3, 801e6aa <_raise_r+0x32>
 801e696:	4620      	mov	r0, r4
 801e698:	f000 f830 	bl	801e6fc <_getpid_r>
 801e69c:	462a      	mov	r2, r5
 801e69e:	4601      	mov	r1, r0
 801e6a0:	4620      	mov	r0, r4
 801e6a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e6a6:	f000 b817 	b.w	801e6d8 <_kill_r>
 801e6aa:	2b01      	cmp	r3, #1
 801e6ac:	d00a      	beq.n	801e6c4 <_raise_r+0x4c>
 801e6ae:	1c59      	adds	r1, r3, #1
 801e6b0:	d103      	bne.n	801e6ba <_raise_r+0x42>
 801e6b2:	2316      	movs	r3, #22
 801e6b4:	6003      	str	r3, [r0, #0]
 801e6b6:	2001      	movs	r0, #1
 801e6b8:	e7e7      	b.n	801e68a <_raise_r+0x12>
 801e6ba:	2400      	movs	r4, #0
 801e6bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e6c0:	4628      	mov	r0, r5
 801e6c2:	4798      	blx	r3
 801e6c4:	2000      	movs	r0, #0
 801e6c6:	e7e0      	b.n	801e68a <_raise_r+0x12>

0801e6c8 <raise>:
 801e6c8:	4b02      	ldr	r3, [pc, #8]	; (801e6d4 <raise+0xc>)
 801e6ca:	4601      	mov	r1, r0
 801e6cc:	6818      	ldr	r0, [r3, #0]
 801e6ce:	f7ff bfd3 	b.w	801e678 <_raise_r>
 801e6d2:	bf00      	nop
 801e6d4:	2000011c 	.word	0x2000011c

0801e6d8 <_kill_r>:
 801e6d8:	b538      	push	{r3, r4, r5, lr}
 801e6da:	4c07      	ldr	r4, [pc, #28]	; (801e6f8 <_kill_r+0x20>)
 801e6dc:	2300      	movs	r3, #0
 801e6de:	4605      	mov	r5, r0
 801e6e0:	4608      	mov	r0, r1
 801e6e2:	4611      	mov	r1, r2
 801e6e4:	6023      	str	r3, [r4, #0]
 801e6e6:	f7ea f827 	bl	8008738 <_kill>
 801e6ea:	1c43      	adds	r3, r0, #1
 801e6ec:	d102      	bne.n	801e6f4 <_kill_r+0x1c>
 801e6ee:	6823      	ldr	r3, [r4, #0]
 801e6f0:	b103      	cbz	r3, 801e6f4 <_kill_r+0x1c>
 801e6f2:	602b      	str	r3, [r5, #0]
 801e6f4:	bd38      	pop	{r3, r4, r5, pc}
 801e6f6:	bf00      	nop
 801e6f8:	20009a9c 	.word	0x20009a9c

0801e6fc <_getpid_r>:
 801e6fc:	f7ea b814 	b.w	8008728 <_getpid>

0801e700 <__sread>:
 801e700:	b510      	push	{r4, lr}
 801e702:	460c      	mov	r4, r1
 801e704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e708:	f000 f8bc 	bl	801e884 <_read_r>
 801e70c:	2800      	cmp	r0, #0
 801e70e:	bfab      	itete	ge
 801e710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e712:	89a3      	ldrhlt	r3, [r4, #12]
 801e714:	181b      	addge	r3, r3, r0
 801e716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e71a:	bfac      	ite	ge
 801e71c:	6563      	strge	r3, [r4, #84]	; 0x54
 801e71e:	81a3      	strhlt	r3, [r4, #12]
 801e720:	bd10      	pop	{r4, pc}

0801e722 <__swrite>:
 801e722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e726:	461f      	mov	r7, r3
 801e728:	898b      	ldrh	r3, [r1, #12]
 801e72a:	05db      	lsls	r3, r3, #23
 801e72c:	4605      	mov	r5, r0
 801e72e:	460c      	mov	r4, r1
 801e730:	4616      	mov	r6, r2
 801e732:	d505      	bpl.n	801e740 <__swrite+0x1e>
 801e734:	2302      	movs	r3, #2
 801e736:	2200      	movs	r2, #0
 801e738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e73c:	f000 f886 	bl	801e84c <_lseek_r>
 801e740:	89a3      	ldrh	r3, [r4, #12]
 801e742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e74a:	81a3      	strh	r3, [r4, #12]
 801e74c:	4632      	mov	r2, r6
 801e74e:	463b      	mov	r3, r7
 801e750:	4628      	mov	r0, r5
 801e752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e756:	f000 b835 	b.w	801e7c4 <_write_r>

0801e75a <__sseek>:
 801e75a:	b510      	push	{r4, lr}
 801e75c:	460c      	mov	r4, r1
 801e75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e762:	f000 f873 	bl	801e84c <_lseek_r>
 801e766:	1c43      	adds	r3, r0, #1
 801e768:	89a3      	ldrh	r3, [r4, #12]
 801e76a:	bf15      	itete	ne
 801e76c:	6560      	strne	r0, [r4, #84]	; 0x54
 801e76e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e776:	81a3      	strheq	r3, [r4, #12]
 801e778:	bf18      	it	ne
 801e77a:	81a3      	strhne	r3, [r4, #12]
 801e77c:	bd10      	pop	{r4, pc}

0801e77e <__sclose>:
 801e77e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e782:	f000 b831 	b.w	801e7e8 <_close_r>

0801e786 <strncmp>:
 801e786:	b510      	push	{r4, lr}
 801e788:	b16a      	cbz	r2, 801e7a6 <strncmp+0x20>
 801e78a:	3901      	subs	r1, #1
 801e78c:	1884      	adds	r4, r0, r2
 801e78e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e792:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e796:	4293      	cmp	r3, r2
 801e798:	d103      	bne.n	801e7a2 <strncmp+0x1c>
 801e79a:	42a0      	cmp	r0, r4
 801e79c:	d001      	beq.n	801e7a2 <strncmp+0x1c>
 801e79e:	2b00      	cmp	r3, #0
 801e7a0:	d1f5      	bne.n	801e78e <strncmp+0x8>
 801e7a2:	1a98      	subs	r0, r3, r2
 801e7a4:	bd10      	pop	{r4, pc}
 801e7a6:	4610      	mov	r0, r2
 801e7a8:	e7fc      	b.n	801e7a4 <strncmp+0x1e>

0801e7aa <__ascii_wctomb>:
 801e7aa:	b149      	cbz	r1, 801e7c0 <__ascii_wctomb+0x16>
 801e7ac:	2aff      	cmp	r2, #255	; 0xff
 801e7ae:	bf85      	ittet	hi
 801e7b0:	238a      	movhi	r3, #138	; 0x8a
 801e7b2:	6003      	strhi	r3, [r0, #0]
 801e7b4:	700a      	strbls	r2, [r1, #0]
 801e7b6:	f04f 30ff 	movhi.w	r0, #4294967295
 801e7ba:	bf98      	it	ls
 801e7bc:	2001      	movls	r0, #1
 801e7be:	4770      	bx	lr
 801e7c0:	4608      	mov	r0, r1
 801e7c2:	4770      	bx	lr

0801e7c4 <_write_r>:
 801e7c4:	b538      	push	{r3, r4, r5, lr}
 801e7c6:	4c07      	ldr	r4, [pc, #28]	; (801e7e4 <_write_r+0x20>)
 801e7c8:	4605      	mov	r5, r0
 801e7ca:	4608      	mov	r0, r1
 801e7cc:	4611      	mov	r1, r2
 801e7ce:	2200      	movs	r2, #0
 801e7d0:	6022      	str	r2, [r4, #0]
 801e7d2:	461a      	mov	r2, r3
 801e7d4:	f7e9 ffe7 	bl	80087a6 <_write>
 801e7d8:	1c43      	adds	r3, r0, #1
 801e7da:	d102      	bne.n	801e7e2 <_write_r+0x1e>
 801e7dc:	6823      	ldr	r3, [r4, #0]
 801e7de:	b103      	cbz	r3, 801e7e2 <_write_r+0x1e>
 801e7e0:	602b      	str	r3, [r5, #0]
 801e7e2:	bd38      	pop	{r3, r4, r5, pc}
 801e7e4:	20009a9c 	.word	0x20009a9c

0801e7e8 <_close_r>:
 801e7e8:	b538      	push	{r3, r4, r5, lr}
 801e7ea:	4c06      	ldr	r4, [pc, #24]	; (801e804 <_close_r+0x1c>)
 801e7ec:	2300      	movs	r3, #0
 801e7ee:	4605      	mov	r5, r0
 801e7f0:	4608      	mov	r0, r1
 801e7f2:	6023      	str	r3, [r4, #0]
 801e7f4:	f7e9 fff3 	bl	80087de <_close>
 801e7f8:	1c43      	adds	r3, r0, #1
 801e7fa:	d102      	bne.n	801e802 <_close_r+0x1a>
 801e7fc:	6823      	ldr	r3, [r4, #0]
 801e7fe:	b103      	cbz	r3, 801e802 <_close_r+0x1a>
 801e800:	602b      	str	r3, [r5, #0]
 801e802:	bd38      	pop	{r3, r4, r5, pc}
 801e804:	20009a9c 	.word	0x20009a9c

0801e808 <_fstat_r>:
 801e808:	b538      	push	{r3, r4, r5, lr}
 801e80a:	4c07      	ldr	r4, [pc, #28]	; (801e828 <_fstat_r+0x20>)
 801e80c:	2300      	movs	r3, #0
 801e80e:	4605      	mov	r5, r0
 801e810:	4608      	mov	r0, r1
 801e812:	4611      	mov	r1, r2
 801e814:	6023      	str	r3, [r4, #0]
 801e816:	f7e9 ffee 	bl	80087f6 <_fstat>
 801e81a:	1c43      	adds	r3, r0, #1
 801e81c:	d102      	bne.n	801e824 <_fstat_r+0x1c>
 801e81e:	6823      	ldr	r3, [r4, #0]
 801e820:	b103      	cbz	r3, 801e824 <_fstat_r+0x1c>
 801e822:	602b      	str	r3, [r5, #0]
 801e824:	bd38      	pop	{r3, r4, r5, pc}
 801e826:	bf00      	nop
 801e828:	20009a9c 	.word	0x20009a9c

0801e82c <_isatty_r>:
 801e82c:	b538      	push	{r3, r4, r5, lr}
 801e82e:	4c06      	ldr	r4, [pc, #24]	; (801e848 <_isatty_r+0x1c>)
 801e830:	2300      	movs	r3, #0
 801e832:	4605      	mov	r5, r0
 801e834:	4608      	mov	r0, r1
 801e836:	6023      	str	r3, [r4, #0]
 801e838:	f7e9 ffed 	bl	8008816 <_isatty>
 801e83c:	1c43      	adds	r3, r0, #1
 801e83e:	d102      	bne.n	801e846 <_isatty_r+0x1a>
 801e840:	6823      	ldr	r3, [r4, #0]
 801e842:	b103      	cbz	r3, 801e846 <_isatty_r+0x1a>
 801e844:	602b      	str	r3, [r5, #0]
 801e846:	bd38      	pop	{r3, r4, r5, pc}
 801e848:	20009a9c 	.word	0x20009a9c

0801e84c <_lseek_r>:
 801e84c:	b538      	push	{r3, r4, r5, lr}
 801e84e:	4c07      	ldr	r4, [pc, #28]	; (801e86c <_lseek_r+0x20>)
 801e850:	4605      	mov	r5, r0
 801e852:	4608      	mov	r0, r1
 801e854:	4611      	mov	r1, r2
 801e856:	2200      	movs	r2, #0
 801e858:	6022      	str	r2, [r4, #0]
 801e85a:	461a      	mov	r2, r3
 801e85c:	f7e9 ffe6 	bl	800882c <_lseek>
 801e860:	1c43      	adds	r3, r0, #1
 801e862:	d102      	bne.n	801e86a <_lseek_r+0x1e>
 801e864:	6823      	ldr	r3, [r4, #0]
 801e866:	b103      	cbz	r3, 801e86a <_lseek_r+0x1e>
 801e868:	602b      	str	r3, [r5, #0]
 801e86a:	bd38      	pop	{r3, r4, r5, pc}
 801e86c:	20009a9c 	.word	0x20009a9c

0801e870 <__malloc_lock>:
 801e870:	4770      	bx	lr

0801e872 <__malloc_unlock>:
 801e872:	4770      	bx	lr

0801e874 <_malloc_usable_size_r>:
 801e874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e878:	1f18      	subs	r0, r3, #4
 801e87a:	2b00      	cmp	r3, #0
 801e87c:	bfbc      	itt	lt
 801e87e:	580b      	ldrlt	r3, [r1, r0]
 801e880:	18c0      	addlt	r0, r0, r3
 801e882:	4770      	bx	lr

0801e884 <_read_r>:
 801e884:	b538      	push	{r3, r4, r5, lr}
 801e886:	4c07      	ldr	r4, [pc, #28]	; (801e8a4 <_read_r+0x20>)
 801e888:	4605      	mov	r5, r0
 801e88a:	4608      	mov	r0, r1
 801e88c:	4611      	mov	r1, r2
 801e88e:	2200      	movs	r2, #0
 801e890:	6022      	str	r2, [r4, #0]
 801e892:	461a      	mov	r2, r3
 801e894:	f7e9 ff6a 	bl	800876c <_read>
 801e898:	1c43      	adds	r3, r0, #1
 801e89a:	d102      	bne.n	801e8a2 <_read_r+0x1e>
 801e89c:	6823      	ldr	r3, [r4, #0]
 801e89e:	b103      	cbz	r3, 801e8a2 <_read_r+0x1e>
 801e8a0:	602b      	str	r3, [r5, #0]
 801e8a2:	bd38      	pop	{r3, r4, r5, pc}
 801e8a4:	20009a9c 	.word	0x20009a9c

0801e8a8 <_init>:
 801e8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8aa:	bf00      	nop
 801e8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e8ae:	bc08      	pop	{r3}
 801e8b0:	469e      	mov	lr, r3
 801e8b2:	4770      	bx	lr

0801e8b4 <_fini>:
 801e8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8b6:	bf00      	nop
 801e8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e8ba:	bc08      	pop	{r3}
 801e8bc:	469e      	mov	lr, r3
 801e8be:	4770      	bx	lr
