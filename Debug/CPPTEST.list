
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800ef20  0800ef20  0001ef20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2f8  0800f2f8  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2f8  0800f2f8  0001f2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f300  0800f300  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f300  0800f300  0001f300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f304  0800f304  0001f304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800f308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b4  20000240  0800f544  00020240  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bf4  0800f544  00020bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f065  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000408b  00000000  00000000  0003f2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001670  00000000  00000000  00043360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  000449d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000282b3  00000000  00000000  00045e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000152c4  00000000  00000000  0006e10b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8f7d  00000000  00000000  000833cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016c34c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d74  00000000  00000000  0016c3c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000240 	.word	0x20000240
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ef08 	.word	0x0800ef08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000244 	.word	0x20000244
 80001ec:	0800ef08 	.word	0x0800ef08

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <invSqrt>:
#include "algorithmCollection.h"
#include <math.h>

#define DEG2PI 0.01745329251F

float invSqrt(float x) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	105a      	asrs	r2, r3, #1
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <invSqrt+0x74>)
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000fa0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fac:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000fb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd2:	371c      	adds	r7, #28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	5f3759df 	.word	0x5f3759df

08000fe0 <quat2eul>:

void quat2eul(float* q, float* roll, float* pitch, float* yaw){
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
	*roll = atan2(2*(q[0]*q[1] + q[2]* q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	ed93 7a00 	vldr	s14, [r3]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	edd3 7a00 	vldr	s15, [r3]
 8000ffc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3308      	adds	r3, #8
 8001004:	edd3 6a00 	vldr	s13, [r3]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	330c      	adds	r3, #12
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800101c:	ee17 0a90 	vmov	r0, s15
 8001020:	f7ff faa2 	bl	8000568 <__aeabi_f2d>
 8001024:	4604      	mov	r4, r0
 8001026:	460d      	mov	r5, r1
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	ed93 7a00 	vldr	s14, [r3]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3304      	adds	r3, #4
 800103c:	edd3 6a00 	vldr	s13, [r3]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3304      	adds	r3, #4
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800104c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3308      	adds	r3, #8
 8001054:	edd3 6a00 	vldr	s13, [r3]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3308      	adds	r3, #8
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001064:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	330c      	adds	r3, #12
 800106c:	edd3 6a00 	vldr	s13, [r3]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	330c      	adds	r3, #12
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800107c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001080:	ee17 0a90 	vmov	r0, s15
 8001084:	f7ff fa70 	bl	8000568 <__aeabi_f2d>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	ec43 2b11 	vmov	d1, r2, r3
 8001090:	ec45 4b10 	vmov	d0, r4, r5
 8001094:	f00a fd6c 	bl	800bb70 <atan2>
 8001098:	ec54 3b10 	vmov	r3, r4, d0
 800109c:	4618      	mov	r0, r3
 800109e:	4621      	mov	r1, r4
 80010a0:	f7ff fd92 	bl	8000bc8 <__aeabi_d2f>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	601a      	str	r2, [r3, #0]
	*pitch = asin(-2*(q[1]*q[3] - q[0]*q[2]));
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3304      	adds	r3, #4
 80010ae:	ed93 7a00 	vldr	s14, [r3]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	330c      	adds	r3, #12
 80010b6:	edd3 7a00 	vldr	s15, [r3]
 80010ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	edd3 6a00 	vldr	s13, [r3]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3308      	adds	r3, #8
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80010d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010dc:	ee17 0a90 	vmov	r0, s15
 80010e0:	f7ff fa42 	bl	8000568 <__aeabi_f2d>
 80010e4:	4603      	mov	r3, r0
 80010e6:	460c      	mov	r4, r1
 80010e8:	ec44 3b10 	vmov	d0, r3, r4
 80010ec:	f00a fce8 	bl	800bac0 <asin>
 80010f0:	ec54 3b10 	vmov	r3, r4, d0
 80010f4:	4618      	mov	r0, r3
 80010f6:	4621      	mov	r1, r4
 80010f8:	f7ff fd66 	bl	8000bc8 <__aeabi_d2f>
 80010fc:	4602      	mov	r2, r0
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	601a      	str	r2, [r3, #0]
	*yaw = atan2(2*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3304      	adds	r3, #4
 8001106:	ed93 7a00 	vldr	s14, [r3]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3308      	adds	r3, #8
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	edd3 6a00 	vldr	s13, [r3]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	330c      	adds	r3, #12
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001130:	ee17 0a90 	vmov	r0, s15
 8001134:	f7ff fa18 	bl	8000568 <__aeabi_f2d>
 8001138:	4604      	mov	r4, r0
 800113a:	460d      	mov	r5, r1
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3304      	adds	r3, #4
 8001150:	edd3 6a00 	vldr	s13, [r3]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3304      	adds	r3, #4
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001160:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3308      	adds	r3, #8
 8001168:	edd3 6a00 	vldr	s13, [r3]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3308      	adds	r3, #8
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001178:	ee37 7a67 	vsub.f32	s14, s14, s15
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	330c      	adds	r3, #12
 8001180:	edd3 6a00 	vldr	s13, [r3]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	330c      	adds	r3, #12
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001194:	ee17 0a90 	vmov	r0, s15
 8001198:	f7ff f9e6 	bl	8000568 <__aeabi_f2d>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	ec43 2b11 	vmov	d1, r2, r3
 80011a4:	ec45 4b10 	vmov	d0, r4, r5
 80011a8:	f00a fce2 	bl	800bb70 <atan2>
 80011ac:	ec54 3b10 	vmov	r3, r4, d0
 80011b0:	4618      	mov	r0, r3
 80011b2:	4621      	mov	r1, r4
 80011b4:	f7ff fd08 	bl	8000bc8 <__aeabi_d2f>
 80011b8:	4602      	mov	r2, r0
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	601a      	str	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bdb0      	pop	{r4, r5, r7, pc}

080011c6 <junTimer_tic>:

void junTimer_tic(struct junTimer* t){
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   t->last_time = HAL_GetTick();
 80011ce:	f001 f99d 	bl	800250c <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	601a      	str	r2, [r3, #0]
   t->start = 1;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	711a      	strb	r2, [r3, #4]
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <junTimer_toc>:

uint32_t junTimer_toc(struct junTimer* t){
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return HAL_GetTick() - t->last_time;
 80011ee:	f001 f98d 	bl	800250c <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1ad3      	subs	r3, r2, r3
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_DMA_Init+0x3c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <MX_DMA_Init+0x3c>)
 8001214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_DMA_Init+0x3c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	200e      	movs	r0, #14
 800122c:	f001 fa77 	bl	800271e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001230:	200e      	movs	r0, #14
 8001232:	f001 fa90 	bl	8002756 <HAL_NVIC_EnableIRQ>

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_ETH_Init+0x78>)
 800124a:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <MX_ETH_Init+0x7c>)
 800124c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_ETH_Init+0x78>)
 8001250:	2201      	movs	r2, #1
 8001252:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <MX_ETH_Init+0x78>)
 8001256:	2200      	movs	r2, #0
 8001258:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_ETH_Init+0x78>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_ETH_Init+0x78>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	3301      	adds	r3, #1
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <MX_ETH_Init+0x78>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	3302      	adds	r3, #2
 8001272:	22e1      	movs	r2, #225	; 0xe1
 8001274:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_ETH_Init+0x78>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	3303      	adds	r3, #3
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_ETH_Init+0x78>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	3304      	adds	r3, #4
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_ETH_Init+0x78>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	3305      	adds	r3, #5
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_ETH_Init+0x78>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_ETH_Init+0x78>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_ETH_Init+0x78>)
 80012a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012a6:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_ETH_Init+0x78>)
 80012aa:	f001 fe0d 	bl	8002ec8 <HAL_ETH_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80012b4:	f000 fac8 	bl	8001848 <Error_Handler>
  }

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000384 	.word	0x20000384
 80012c0:	40028000 	.word	0x40028000

080012c4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08e      	sub	sp, #56	; 0x38
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a55      	ldr	r2, [pc, #340]	; (8001438 <HAL_ETH_MspInit+0x174>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	f040 80a4 	bne.w	8001430 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
 80012ec:	4b53      	ldr	r3, [pc, #332]	; (800143c <HAL_ETH_MspInit+0x178>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a52      	ldr	r2, [pc, #328]	; (800143c <HAL_ETH_MspInit+0x178>)
 80012f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b50      	ldr	r3, [pc, #320]	; (800143c <HAL_ETH_MspInit+0x178>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001300:	623b      	str	r3, [r7, #32]
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	4b4c      	ldr	r3, [pc, #304]	; (800143c <HAL_ETH_MspInit+0x178>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	4a4b      	ldr	r2, [pc, #300]	; (800143c <HAL_ETH_MspInit+0x178>)
 800130e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001312:	6313      	str	r3, [r2, #48]	; 0x30
 8001314:	4b49      	ldr	r3, [pc, #292]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	4b45      	ldr	r3, [pc, #276]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	4a44      	ldr	r2, [pc, #272]	; (800143c <HAL_ETH_MspInit+0x178>)
 800132a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800132e:	6313      	str	r3, [r2, #48]	; 0x30
 8001330:	4b42      	ldr	r3, [pc, #264]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	4b3e      	ldr	r3, [pc, #248]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a3d      	ldr	r2, [pc, #244]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <HAL_ETH_MspInit+0x178>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	4b37      	ldr	r3, [pc, #220]	; (800143c <HAL_ETH_MspInit+0x178>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a36      	ldr	r2, [pc, #216]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <HAL_ETH_MspInit+0x178>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <HAL_ETH_MspInit+0x178>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	4a2f      	ldr	r2, [pc, #188]	; (800143c <HAL_ETH_MspInit+0x178>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	6313      	str	r3, [r2, #48]	; 0x30
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	4b29      	ldr	r3, [pc, #164]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	4a28      	ldr	r2, [pc, #160]	; (800143c <HAL_ETH_MspInit+0x178>)
 800139a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
 80013a0:	4b26      	ldr	r3, [pc, #152]	; (800143c <HAL_ETH_MspInit+0x178>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013ac:	2332      	movs	r3, #50	; 0x32
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013bc:	230b      	movs	r3, #11
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	481e      	ldr	r0, [pc, #120]	; (8001440 <HAL_ETH_MspInit+0x17c>)
 80013c8:	f002 f9ec 	bl	80037a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013cc:	2386      	movs	r3, #134	; 0x86
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013dc:	230b      	movs	r3, #11
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	4817      	ldr	r0, [pc, #92]	; (8001444 <HAL_ETH_MspInit+0x180>)
 80013e8:	f002 f9dc 	bl	80037a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013fe:	230b      	movs	r3, #11
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	480f      	ldr	r0, [pc, #60]	; (8001448 <HAL_ETH_MspInit+0x184>)
 800140a:	f002 f9cb 	bl	80037a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800140e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001420:	230b      	movs	r3, #11
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <HAL_ETH_MspInit+0x188>)
 800142c:	f002 f9ba 	bl	80037a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001430:	bf00      	nop
 8001432:	3738      	adds	r7, #56	; 0x38
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40028000 	.word	0x40028000
 800143c:	40023800 	.word	0x40023800
 8001440:	40020800 	.word	0x40020800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40021800 	.word	0x40021800

08001450 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08e      	sub	sp, #56	; 0x38
 8001454:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <MX_GPIO_Init+0x180>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a58      	ldr	r2, [pc, #352]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b56      	ldr	r3, [pc, #344]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	4b52      	ldr	r3, [pc, #328]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a51      	ldr	r2, [pc, #324]	; (80015d0 <MX_GPIO_Init+0x180>)
 800148c:	f043 0320 	orr.w	r3, r3, #32
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b4f      	ldr	r3, [pc, #316]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0320 	and.w	r3, r3, #32
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a4a      	ldr	r2, [pc, #296]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a43      	ldr	r2, [pc, #268]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a3c      	ldr	r2, [pc, #240]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a35      	ldr	r2, [pc, #212]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014fc:	f043 0310 	orr.w	r3, r3, #16
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a27      	ldr	r2, [pc, #156]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <MX_GPIO_Init+0x180>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f244 0181 	movw	r1, #16513	; 0x4081
 800154c:	4821      	ldr	r0, [pc, #132]	; (80015d4 <MX_GPIO_Init+0x184>)
 800154e:	f002 fad3 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2140      	movs	r1, #64	; 0x40
 8001556:	4820      	ldr	r0, [pc, #128]	; (80015d8 <MX_GPIO_Init+0x188>)
 8001558:	f002 face 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800155c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <MX_GPIO_Init+0x18c>)
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	481b      	ldr	r0, [pc, #108]	; (80015e0 <MX_GPIO_Init+0x190>)
 8001572:	f002 f917 	bl	80037a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001576:	f244 0381 	movw	r3, #16513	; 0x4081
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	4811      	ldr	r0, [pc, #68]	; (80015d4 <MX_GPIO_Init+0x184>)
 8001590:	f002 f908 	bl	80037a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001594:	2340      	movs	r3, #64	; 0x40
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a8:	4619      	mov	r1, r3
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <MX_GPIO_Init+0x188>)
 80015ac:	f002 f8fa 	bl	80037a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_GPIO_Init+0x188>)
 80015c4:	f002 f8ee 	bl	80037a4 <HAL_GPIO_Init>

}
 80015c8:	bf00      	nop
 80015ca:	3738      	adds	r7, #56	; 0x38
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	10110000 	.word	0x10110000
 80015e0:	40020800 	.word	0x40020800

080015e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_I2C1_Init+0x74>)
 80015ea:	4a1c      	ldr	r2, [pc, #112]	; (800165c <MX_I2C1_Init+0x78>)
 80015ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_I2C1_Init+0x74>)
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <MX_I2C1_Init+0x7c>)
 80015f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_I2C1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_I2C1_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_I2C1_Init+0x74>)
 8001602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_I2C1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MX_I2C1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_I2C1_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_I2C1_Init+0x74>)
 8001622:	f002 fa83 	bl	8003b2c <HAL_I2C_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800162c:	f000 f90c 	bl	8001848 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001630:	2100      	movs	r1, #0
 8001632:	4809      	ldr	r0, [pc, #36]	; (8001658 <MX_I2C1_Init+0x74>)
 8001634:	f004 fec5 	bl	80063c2 <HAL_I2CEx_ConfigAnalogFilter>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800163e:	f000 f903 	bl	8001848 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001642:	2100      	movs	r1, #0
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_I2C1_Init+0x74>)
 8001646:	f004 fef8 	bl	800643a <HAL_I2CEx_ConfigDigitalFilter>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001650:	f000 f8fa 	bl	8001848 <Error_Handler>
  }

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200003cc 	.word	0x200003cc
 800165c:	40005400 	.word	0x40005400
 8001660:	00061a80 	.word	0x00061a80

08001664 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <HAL_I2C_MspInit+0x84>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d12c      	bne.n	80016e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_I2C_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a17      	ldr	r2, [pc, #92]	; (80016ec <HAL_I2C_MspInit+0x88>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_I2C_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80016a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a8:	2312      	movs	r3, #18
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b4:	2304      	movs	r3, #4
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	480c      	ldr	r0, [pc, #48]	; (80016f0 <HAL_I2C_MspInit+0x8c>)
 80016c0:	f002 f870 	bl	80037a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_I2C_MspInit+0x88>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_I2C_MspInit+0x88>)
 80016ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d2:	6413      	str	r3, [r2, #64]	; 0x40
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_I2C_MspInit+0x88>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40005400 	.word	0x40005400
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020400 	.word	0x40020400

080016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f8:	f000 fea2 	bl	8002440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fc:	f000 f81e 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001700:	f7ff fea6 	bl	8001450 <MX_GPIO_Init>
  MX_DMA_Init();
 8001704:	f7ff fd7e 	bl	8001204 <MX_DMA_Init>
  MX_ETH_Init();
 8001708:	f7ff fd9c 	bl	8001244 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800170c:	f000 fcb6 	bl	800207c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001710:	f000 fde4 	bl	80022dc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001714:	f7ff ff66 	bl	80015e4 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001718:	f000 fad4 	bl	8001cc4 <MX_TIM10_Init>
  MX_TIM11_Init();
 800171c:	f000 fb1e 	bl	8001d5c <MX_TIM11_Init>
  MX_TIM3_Init();
 8001720:	f000 f9b6 	bl	8001a90 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001724:	f000 fa36 	bl	8001b94 <MX_TIM4_Init>
  MX_UART7_Init();
 8001728:	f000 fc50 	bl	8001fcc <MX_UART7_Init>
  MX_USART2_UART_Init();
 800172c:	f000 fc7c 	bl	8002028 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001730:	f000 f86e 	bl	8001810 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    userMain();
 8001734:	f009 f850 	bl	800a7d8 <userMain>
 8001738:	e7fc      	b.n	8001734 <main+0x40>
	...

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	; 0x50
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2230      	movs	r2, #48	; 0x30
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f00a ffad 	bl	800c6aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <SystemClock_Config+0xcc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <SystemClock_Config+0xcc>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	; 0x40
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <SystemClock_Config+0xcc>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <SystemClock_Config+0xd0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <SystemClock_Config+0xd0>)
 8001786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <SystemClock_Config+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001798:	2301      	movs	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a2:	2302      	movs	r3, #2
 80017a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ac:	2308      	movs	r3, #8
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017ba:	2307      	movs	r3, #7
 80017bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 ff96 	bl	80066f4 <HAL_RCC_OscConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017ce:	f000 f83b 	bl	8001848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d2:	230f      	movs	r3, #15
 80017d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d6:	2302      	movs	r3, #2
 80017d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	2105      	movs	r1, #5
 80017f0:	4618      	mov	r0, r3
 80017f2:	f005 f9ef 	bl	8006bd4 <HAL_RCC_ClockConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017fc:	f000 f824 	bl	8001848 <Error_Handler>
  }
}
 8001800:	bf00      	nop
 8001802:	3750      	adds	r7, #80	; 0x50
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000

08001810 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	201f      	movs	r0, #31
 800181a:	f000 ff80 	bl	800271e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800181e:	201f      	movs	r0, #31
 8001820:	f000 ff99 	bl	8002756 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	2020      	movs	r0, #32
 800182a:	f000 ff78 	bl	800271e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800182e:	2020      	movs	r0, #32
 8001830:	f000 ff91 	bl	8002756 <HAL_NVIC_EnableIRQ>
  /* UART7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2052      	movs	r0, #82	; 0x52
 800183a:	f000 ff70 	bl	800271e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART7_IRQn);
 800183e:	2052      	movs	r0, #82	; 0x52
 8001840:	f000 ff89 	bl	8002756 <HAL_NVIC_EnableIRQ>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <HAL_MspInit+0x4c>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_MspInit+0x4c>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fc:	f000 fdf2 	bl	80024e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA1_Stream3_IRQHandler+0x10>)
 800190a:	f001 f867 	bl	80029dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200005a0 	.word	0x200005a0

08001918 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800191e:	f005 fc0d 	bl	800713c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200004e0 	.word	0x200004e0

0800192c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <I2C1_EV_IRQHandler+0x10>)
 8001932:	f002 fe15 	bl	8004560 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200003cc 	.word	0x200003cc

08001940 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <I2C1_ER_IRQHandler+0x10>)
 8001946:	f002 ff71 	bl	800482c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200003cc 	.word	0x200003cc

08001954 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <UART7_IRQHandler+0x10>)
 800195a:	f006 fba3 	bl	80080a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000520 	.word	0x20000520

08001968 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e00a      	b.n	8001990 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800197a:	f3af 8000 	nop.w
 800197e:	4601      	mov	r1, r0
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	b2ca      	uxtb	r2, r1
 8001988:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf0      	blt.n	800197a <_read+0x12>
	}

return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	return -1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ca:	605a      	str	r2, [r3, #4]
	return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_isatty>:

int _isatty(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	return 1;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
	return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x50>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x16>
		heap_end = &end;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <_sbrk+0x50>)
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <_sbrk+0x54>)
 8001a20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <_sbrk+0x50>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <_sbrk+0x50>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	466a      	mov	r2, sp
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d907      	bls.n	8001a46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a36:	f00a fdf3 	bl	800c620 <__errno>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
 8001a44:	e006      	b.n	8001a54 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <_sbrk+0x50>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <_sbrk+0x50>)
 8001a50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000025c 	.word	0x2000025c
 8001a60:	20000bf8 	.word	0x20000bf8

08001a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <SystemInit+0x28>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <SystemInit+0x28>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SystemInit+0x28>)
 8001a7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a7e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08e      	sub	sp, #56	; 0x38
 8001a94:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	f107 0320 	add.w	r3, r7, #32
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001ac2:	4a33      	ldr	r2, [pc, #204]	; (8001b90 <MX_TIM3_Init+0x100>)
 8001ac4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8001ac6:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001ac8:	2229      	movs	r2, #41	; 0x29
 8001aca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001ad4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001ad8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ae6:	4829      	ldr	r0, [pc, #164]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001ae8:	f005 fa66 	bl	8006fb8 <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001af2:	f7ff fea9 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b00:	4619      	mov	r1, r3
 8001b02:	4822      	ldr	r0, [pc, #136]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001b04:	f005 fce8 	bl	80074d8 <HAL_TIM_ConfigClockSource>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b0e:	f7ff fe9b 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b12:	481e      	ldr	r0, [pc, #120]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001b14:	f005 fa9f 	bl	8007056 <HAL_TIM_PWM_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b1e:	f7ff fe93 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b2a:	f107 0320 	add.w	r3, r7, #32
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4816      	ldr	r0, [pc, #88]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001b32:	f006 f8c1 	bl	8007cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b3c:	f7ff fe84 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b40:	2360      	movs	r3, #96	; 0x60
 8001b42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001b58:	f005 fbf8 	bl	800734c <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b62:	f7ff fe71 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2204      	movs	r2, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4807      	ldr	r0, [pc, #28]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001b6e:	f005 fbed 	bl	800734c <HAL_TIM_PWM_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b78:	f7ff fe66 	bl	8001848 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001b7e:	f000 f97b 	bl	8001e78 <HAL_TIM_MspPostInit>

}
 8001b82:	bf00      	nop
 8001b84:	3738      	adds	r7, #56	; 0x38
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200004a0 	.word	0x200004a0
 8001b90:	40000400 	.word	0x40000400

08001b94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08e      	sub	sp, #56	; 0x38
 8001b98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba8:	f107 0320 	add.w	r3, r7, #32
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
 8001bc0:	615a      	str	r2, [r3, #20]
 8001bc2:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001bc4:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001bc6:	4a3e      	ldr	r2, [pc, #248]	; (8001cc0 <MX_TIM4_Init+0x12c>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8001bca:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001bcc:	2229      	movs	r2, #41	; 0x29
 8001bce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 8001bd6:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001bd8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001bdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bea:	4834      	ldr	r0, [pc, #208]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001bec:	f005 f9e4 	bl	8006fb8 <HAL_TIM_Base_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001bf6:	f7ff fe27 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c04:	4619      	mov	r1, r3
 8001c06:	482d      	ldr	r0, [pc, #180]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c08:	f005 fc66 	bl	80074d8 <HAL_TIM_ConfigClockSource>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001c12:	f7ff fe19 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c16:	4829      	ldr	r0, [pc, #164]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c18:	f005 fa1d 	bl	8007056 <HAL_TIM_PWM_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001c22:	f7ff fe11 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c2e:	f107 0320 	add.w	r3, r7, #32
 8001c32:	4619      	mov	r1, r3
 8001c34:	4821      	ldr	r0, [pc, #132]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c36:	f006 f83f 	bl	8007cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001c40:	f7ff fe02 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c44:	2360      	movs	r3, #96	; 0x60
 8001c46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2200      	movs	r2, #0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4818      	ldr	r0, [pc, #96]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c5c:	f005 fb76 	bl	800734c <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001c66:	f7ff fdef 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4812      	ldr	r0, [pc, #72]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c72:	f005 fb6b 	bl	800734c <HAL_TIM_PWM_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001c7c:	f7ff fde4 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2208      	movs	r2, #8
 8001c84:	4619      	mov	r1, r3
 8001c86:	480d      	ldr	r0, [pc, #52]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c88:	f005 fb60 	bl	800734c <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001c92:	f7ff fdd9 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	220c      	movs	r2, #12
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4807      	ldr	r0, [pc, #28]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c9e:	f005 fb55 	bl	800734c <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001ca8:	f7ff fdce 	bl	8001848 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001cae:	f000 f8e3 	bl	8001e78 <HAL_TIM_MspPostInit>

}
 8001cb2:	bf00      	nop
 8001cb4:	3738      	adds	r7, #56	; 0x38
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000420 	.word	0x20000420
 8001cc0:	40000800 	.word	0x40000800

08001cc4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
 8001cd8:	615a      	str	r2, [r3, #20]
 8001cda:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001cde:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <MX_TIM10_Init+0x94>)
 8001ce0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001d00:	4814      	ldr	r0, [pc, #80]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001d02:	f005 f959 	bl	8006fb8 <HAL_TIM_Base_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001d0c:	f7ff fd9c 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001d10:	4810      	ldr	r0, [pc, #64]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001d12:	f005 f9a0 	bl	8007056 <HAL_TIM_PWM_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8001d1c:	f7ff fd94 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d20:	2360      	movs	r3, #96	; 0x60
 8001d22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2200      	movs	r2, #0
 8001d34:	4619      	mov	r1, r3
 8001d36:	4807      	ldr	r0, [pc, #28]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001d38:	f005 fb08 	bl	800734c <HAL_TIM_PWM_ConfigChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8001d42:	f7ff fd81 	bl	8001848 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001d48:	f000 f896 	bl	8001e78 <HAL_TIM_MspPostInit>

}
 8001d4c:	bf00      	nop
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000460 	.word	0x20000460
 8001d58:	40014400 	.word	0x40014400

08001d5c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d62:	4a0f      	ldr	r2, [pc, #60]	; (8001da0 <MX_TIM11_Init+0x44>)
 8001d64:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1680-1;
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d68:	f240 628f 	movw	r2, #1679	; 0x68f
 8001d6c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d7a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d8a:	f005 f915 	bl	8006fb8 <HAL_TIM_Base_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001d94:	f7ff fd58 	bl	8001848 <Error_Handler>
  }

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200004e0 	.word	0x200004e0
 8001da0:	40014800 	.word	0x40014800

08001da4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <HAL_TIM_Base_MspInit+0xc0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10e      	bne.n	8001dd4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a2a      	ldr	r2, [pc, #168]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001dd2:	e042      	b.n	8001e5a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <HAL_TIM_Base_MspInit+0xc8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10e      	bne.n	8001dfc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a20      	ldr	r2, [pc, #128]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
}
 8001dfa:	e02e      	b.n	8001e5a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_TIM_Base_MspInit+0xcc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a16      	ldr	r2, [pc, #88]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
}
 8001e22:	e01a      	b.n	8001e5a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <HAL_TIM_Base_MspInit+0xd0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d115      	bne.n	8001e5a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	201a      	movs	r0, #26
 8001e50:	f000 fc65 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e54:	201a      	movs	r0, #26
 8001e56:	f000 fc7e 	bl	8002756 <HAL_NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40000400 	.word	0x40000400
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	40014400 	.word	0x40014400
 8001e74:	40014800 	.word	0x40014800

08001e78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a45      	ldr	r2, [pc, #276]	; (8001fac <HAL_TIM_MspPostInit+0x134>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d13c      	bne.n	8001f14 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a43      	ldr	r2, [pc, #268]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a3c      	ldr	r2, [pc, #240]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ed2:	2340      	movs	r3, #64	; 0x40
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	4831      	ldr	r0, [pc, #196]	; (8001fb4 <HAL_TIM_MspPostInit+0x13c>)
 8001eee:	f001 fc59 	bl	80037a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f02:	2302      	movs	r3, #2
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	482a      	ldr	r0, [pc, #168]	; (8001fb8 <HAL_TIM_MspPostInit+0x140>)
 8001f0e:	f001 fc49 	bl	80037a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001f12:	e047      	b.n	8001fa4 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a28      	ldr	r2, [pc, #160]	; (8001fbc <HAL_TIM_MspPostInit+0x144>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d11f      	bne.n	8001f5e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f3a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	4619      	mov	r1, r3
 8001f56:	481a      	ldr	r0, [pc, #104]	; (8001fc0 <HAL_TIM_MspPostInit+0x148>)
 8001f58:	f001 fc24 	bl	80037a4 <HAL_GPIO_Init>
}
 8001f5c:	e022      	b.n	8001fa4 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM10)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a18      	ldr	r2, [pc, #96]	; (8001fc4 <HAL_TIM_MspPostInit+0x14c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d11d      	bne.n	8001fa4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001f72:	f043 0320 	orr.w	r3, r3, #32
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f84:	2340      	movs	r3, #64	; 0x40
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001f94:	2303      	movs	r3, #3
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <HAL_TIM_MspPostInit+0x150>)
 8001fa0:	f001 fc00 	bl	80037a4 <HAL_GPIO_Init>
}
 8001fa4:	bf00      	nop
 8001fa6:	3730      	adds	r7, #48	; 0x30
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40000400 	.word	0x40000400
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40000800 	.word	0x40000800
 8001fc0:	40020c00 	.word	0x40020c00
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40021400 	.word	0x40021400

08001fcc <MX_UART7_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart7_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <MX_UART7_Init+0x50>)
 8001fd2:	4a13      	ldr	r2, [pc, #76]	; (8002020 <MX_UART7_Init+0x54>)
 8001fd4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_UART7_Init+0x50>)
 8001fd8:	4a12      	ldr	r2, [pc, #72]	; (8002024 <MX_UART7_Init+0x58>)
 8001fda:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_UART7_Init+0x50>)
 8001fde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fe2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <MX_UART7_Init+0x50>)
 8001fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fea:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_UART7_Init+0x50>)
 8001fee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_UART7_Init+0x50>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_UART7_Init+0x50>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_UART7_Init+0x50>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_UART7_Init+0x50>)
 8002008:	f005 fee6 	bl	8007dd8 <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 8002012:	f7ff fc19 	bl	8001848 <Error_Handler>
  }

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000520 	.word	0x20000520
 8002020:	40007800 	.word	0x40007800
 8002024:	000186a0 	.word	0x000186a0

08002028 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <MX_USART2_UART_Init+0x50>)
 8002030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 8002034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 800204e:	220c      	movs	r2, #12
 8002050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 8002054:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002058:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002060:	4804      	ldr	r0, [pc, #16]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 8002062:	f005 feb9 	bl	8007dd8 <HAL_UART_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800206c:	f7ff fbec 	bl	8001848 <Error_Handler>
  }

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000600 	.word	0x20000600
 8002078:	40004400 	.word	0x40004400

0800207c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <MX_USART3_UART_Init+0x50>)
 8002084:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 8002088:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800208c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 80020a2:	220c      	movs	r2, #12
 80020a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 80020b4:	f005 fe90 	bl	8007dd8 <HAL_UART_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020be:	f7ff fbc3 	bl	8001848 <Error_Handler>
  }

}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000560 	.word	0x20000560
 80020cc:	40004800 	.word	0x40004800

080020d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08e      	sub	sp, #56	; 0x38
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a72      	ldr	r2, [pc, #456]	; (80022b8 <HAL_UART_MspInit+0x1e8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d15c      	bne.n	80021ac <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
 80020f6:	4b71      	ldr	r3, [pc, #452]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a70      	ldr	r2, [pc, #448]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80020fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b6e      	ldr	r3, [pc, #440]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800210a:	623b      	str	r3, [r7, #32]
 800210c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a69      	ldr	r2, [pc, #420]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002118:	f043 0310 	orr.w	r3, r3, #16
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800212a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002134:	2301      	movs	r3, #1
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800213c:	2308      	movs	r3, #8
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002144:	4619      	mov	r1, r3
 8002146:	485e      	ldr	r0, [pc, #376]	; (80022c0 <HAL_UART_MspInit+0x1f0>)
 8002148:	f001 fb2c 	bl	80037a4 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 800214c:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 800214e:	4a5e      	ldr	r2, [pc, #376]	; (80022c8 <HAL_UART_MspInit+0x1f8>)
 8002150:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8002152:	4b5c      	ldr	r3, [pc, #368]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002154:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002158:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800215a:	4b5a      	ldr	r3, [pc, #360]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002160:	4b58      	ldr	r3, [pc, #352]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002166:	4b57      	ldr	r3, [pc, #348]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800216c:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800216e:	4b55      	ldr	r3, [pc, #340]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002170:	2200      	movs	r2, #0
 8002172:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 800217a:	4b52      	ldr	r3, [pc, #328]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 800217c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002180:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002182:	4b50      	ldr	r3, [pc, #320]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002184:	2200      	movs	r2, #0
 8002186:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002188:	4b4e      	ldr	r3, [pc, #312]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 800218a:	2200      	movs	r2, #0
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800218e:	484d      	ldr	r0, [pc, #308]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002190:	f000 fafc 	bl	800278c <HAL_DMA_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800219a:	f7ff fb55 	bl	8001848 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a48      	ldr	r2, [pc, #288]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34
 80021a4:	4a47      	ldr	r2, [pc, #284]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021aa:	e081      	b.n	80022b0 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a46      	ldr	r2, [pc, #280]	; (80022cc <HAL_UART_MspInit+0x1fc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d14a      	bne.n	800224c <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	4b40      	ldr	r3, [pc, #256]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a3f      	ldr	r2, [pc, #252]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a38      	ldr	r2, [pc, #224]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a31      	ldr	r2, [pc, #196]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800220a:	2301      	movs	r3, #1
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800221a:	2307      	movs	r3, #7
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002222:	4619      	mov	r1, r3
 8002224:	482a      	ldr	r0, [pc, #168]	; (80022d0 <HAL_UART_MspInit+0x200>)
 8002226:	f001 fabd 	bl	80037a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800222a:	2370      	movs	r3, #112	; 0x70
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800223a:	2307      	movs	r3, #7
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	4619      	mov	r1, r3
 8002244:	4823      	ldr	r0, [pc, #140]	; (80022d4 <HAL_UART_MspInit+0x204>)
 8002246:	f001 faad 	bl	80037a4 <HAL_GPIO_Init>
}
 800224a:	e031      	b.n	80022b0 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <HAL_UART_MspInit+0x208>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d12c      	bne.n	80022b0 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a17      	ldr	r2, [pc, #92]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800228e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022a0:	2307      	movs	r3, #7
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	480a      	ldr	r0, [pc, #40]	; (80022d4 <HAL_UART_MspInit+0x204>)
 80022ac:	f001 fa7a 	bl	80037a4 <HAL_GPIO_Init>
}
 80022b0:	bf00      	nop
 80022b2:	3738      	adds	r7, #56	; 0x38
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40007800 	.word	0x40007800
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40021000 	.word	0x40021000
 80022c4:	200005a0 	.word	0x200005a0
 80022c8:	40026058 	.word	0x40026058
 80022cc:	40004400 	.word	0x40004400
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40020c00 	.word	0x40020c00
 80022d8:	40004800 	.word	0x40004800

080022dc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80022e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ea:	2204      	movs	r2, #4
 80022ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022f0:	2202      	movs	r2, #2
 80022f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022fc:	2202      	movs	r2, #2
 80022fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002302:	2201      	movs	r2, #1
 8002304:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002314:	2201      	movs	r2, #1
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800231a:	2200      	movs	r2, #0
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002320:	f004 f8ca 	bl	80064b8 <HAL_PCD_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800232a:	f7ff fa8d 	bl	8001848 <Error_Handler>
  }

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000640 	.word	0x20000640

08002338 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002358:	d13f      	bne.n	80023da <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002376:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002388:	230a      	movs	r3, #10
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4619      	mov	r1, r3
 8002392:	4815      	ldr	r0, [pc, #84]	; (80023e8 <HAL_PCD_MspInit+0xb0>)
 8002394:	f001 fa06 	bl	80037a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	480e      	ldr	r0, [pc, #56]	; (80023e8 <HAL_PCD_MspInit+0xb0>)
 80023ae:	f001 f9f9 	bl	80037a4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b6:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 80023b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023bc:	6353      	str	r3, [r2, #52]	; 0x34
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	; 0x44
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80023da:	bf00      	nop
 80023dc:	3728      	adds	r7, #40	; 0x28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020000 	.word	0x40020000

080023ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002424 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023f2:	e003      	b.n	80023fc <LoopCopyDataInit>

080023f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023fa:	3104      	adds	r1, #4

080023fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023fc:	480b      	ldr	r0, [pc, #44]	; (800242c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002400:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002402:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002404:	d3f6      	bcc.n	80023f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002408:	e002      	b.n	8002410 <LoopFillZerobss>

0800240a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800240a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800240c:	f842 3b04 	str.w	r3, [r2], #4

08002410 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002412:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002414:	d3f9      	bcc.n	800240a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002416:	f7ff fb25 	bl	8001a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241a:	f00a f907 	bl	800c62c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800241e:	f7ff f969 	bl	80016f4 <main>
  bx  lr    
 8002422:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002424:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002428:	0800f308 	.word	0x0800f308
  ldr  r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002430:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 8002434:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 8002438:	20000bf4 	.word	0x20000bf4

0800243c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800243c:	e7fe      	b.n	800243c <ADC_IRQHandler>
	...

08002440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <HAL_Init+0x40>)
 800244a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800244e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_Init+0x40>)
 8002456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_Init+0x40>)
 8002462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002468:	2003      	movs	r0, #3
 800246a:	f000 f94d 	bl	8002708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246e:	2000      	movs	r0, #0
 8002470:	f000 f808 	bl	8002484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002474:	f7ff f9f0 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00

08002484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_InitTick+0x54>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_InitTick+0x58>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249a:	fbb3 f3f1 	udiv	r3, r3, r1
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f965 	bl	8002772 <HAL_SYSTICK_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00e      	b.n	80024d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b0f      	cmp	r3, #15
 80024b6:	d80a      	bhi.n	80024ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b8:	2200      	movs	r2, #0
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f000 f92d 	bl	800271e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <HAL_InitTick+0x5c>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000000 	.word	0x20000000
 80024dc:	20000008 	.word	0x20000008
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_IncTick+0x20>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_IncTick+0x24>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_IncTick+0x24>)
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000008 	.word	0x20000008
 8002508:	20000a48 	.word	0x20000a48

0800250c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return uwTick;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_GetTick+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000a48 	.word	0x20000a48

08002524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff ffee 	bl	800250c <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d005      	beq.n	800254a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_Delay+0x40>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800254a:	bf00      	nop
 800254c:	f7ff ffde 	bl	800250c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	429a      	cmp	r2, r3
 800255a:	d8f7      	bhi.n	800254c <HAL_Delay+0x28>
  {
  }
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000008 	.word	0x20000008

08002568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002584:	4013      	ands	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259a:	4a04      	ldr	r2, [pc, #16]	; (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	60d3      	str	r3, [r2, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <__NVIC_GetPriorityGrouping+0x18>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0307 	and.w	r3, r3, #7
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	db0b      	blt.n	80025f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4907      	ldr	r1, [pc, #28]	; (8002604 <__NVIC_EnableIRQ+0x38>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2001      	movs	r0, #1
 80025ee:	fa00 f202 	lsl.w	r2, r0, r2
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000e100 	.word	0xe000e100

08002608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	2b00      	cmp	r3, #0
 800261a:	db0a      	blt.n	8002632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	490c      	ldr	r1, [pc, #48]	; (8002654 <__NVIC_SetPriority+0x4c>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	0112      	lsls	r2, r2, #4
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	440b      	add	r3, r1
 800262c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002630:	e00a      	b.n	8002648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4908      	ldr	r1, [pc, #32]	; (8002658 <__NVIC_SetPriority+0x50>)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	3b04      	subs	r3, #4
 8002640:	0112      	lsls	r2, r2, #4
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	440b      	add	r3, r1
 8002646:	761a      	strb	r2, [r3, #24]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000e100 	.word	0xe000e100
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	; 0x24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f1c3 0307 	rsb	r3, r3, #7
 8002676:	2b04      	cmp	r3, #4
 8002678:	bf28      	it	cs
 800267a:	2304      	movcs	r3, #4
 800267c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3304      	adds	r3, #4
 8002682:	2b06      	cmp	r3, #6
 8002684:	d902      	bls.n	800268c <NVIC_EncodePriority+0x30>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3b03      	subs	r3, #3
 800268a:	e000      	b.n	800268e <NVIC_EncodePriority+0x32>
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	f04f 32ff 	mov.w	r2, #4294967295
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	401a      	ands	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a4:	f04f 31ff 	mov.w	r1, #4294967295
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43d9      	mvns	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	4313      	orrs	r3, r2
         );
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3724      	adds	r7, #36	; 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d4:	d301      	bcc.n	80026da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00f      	b.n	80026fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <SysTick_Config+0x40>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e2:	210f      	movs	r1, #15
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f7ff ff8e 	bl	8002608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <SysTick_Config+0x40>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <SysTick_Config+0x40>)
 80026f4:	2207      	movs	r2, #7
 80026f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	e000e010 	.word	0xe000e010

08002708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff29 	bl	8002568 <__NVIC_SetPriorityGrouping>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002730:	f7ff ff3e 	bl	80025b0 <__NVIC_GetPriorityGrouping>
 8002734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7ff ff8e 	bl	800265c <NVIC_EncodePriority>
 8002740:	4602      	mov	r2, r0
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff5d 	bl	8002608 <__NVIC_SetPriority>
}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff31 	bl	80025cc <__NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ffa2 	bl	80026c4 <SysTick_Config>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002798:	f7ff feb8 	bl	800250c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e099      	b.n	80028dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c8:	e00f      	b.n	80027ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ca:	f7ff fe9f 	bl	800250c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d908      	bls.n	80027ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2203      	movs	r2, #3
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e078      	b.n	80028dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e8      	bne.n	80027ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <HAL_DMA_Init+0x158>)
 8002804:	4013      	ands	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002816:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2b04      	cmp	r3, #4
 8002842:	d107      	bne.n	8002854 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	4313      	orrs	r3, r2
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f023 0307 	bic.w	r3, r3, #7
 800286a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	2b04      	cmp	r3, #4
 800287c:	d117      	bne.n	80028ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00e      	beq.n	80028ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fa9f 	bl	8002dd4 <DMA_CheckFifoParam>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2240      	movs	r2, #64	; 0x40
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028aa:	2301      	movs	r3, #1
 80028ac:	e016      	b.n	80028dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fa56 	bl	8002d68 <DMA_CalcBaseAndBitshift>
 80028bc:	4603      	mov	r3, r0
 80028be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	223f      	movs	r2, #63	; 0x3f
 80028c6:	409a      	lsls	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	f010803f 	.word	0xf010803f

080028e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_DMA_Start_IT+0x26>
 800290a:	2302      	movs	r3, #2
 800290c:	e040      	b.n	8002990 <HAL_DMA_Start_IT+0xa8>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d12f      	bne.n	8002982 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2202      	movs	r2, #2
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f9e8 	bl	8002d0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	223f      	movs	r2, #63	; 0x3f
 8002942:	409a      	lsls	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0216 	orr.w	r2, r2, #22
 8002956:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0208 	orr.w	r2, r2, #8
 800296e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e005      	b.n	800298e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800298a:	2302      	movs	r3, #2
 800298c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800298e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d004      	beq.n	80029b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00c      	b.n	80029d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2205      	movs	r2, #5
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0201 	bic.w	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029e8:	4b92      	ldr	r3, [pc, #584]	; (8002c34 <HAL_DMA_IRQHandler+0x258>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a92      	ldr	r2, [pc, #584]	; (8002c38 <HAL_DMA_IRQHandler+0x25c>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0a9b      	lsrs	r3, r3, #10
 80029f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	2208      	movs	r2, #8
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01a      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0204 	bic.w	r2, r2, #4
 8002a2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	2208      	movs	r2, #8
 8002a36:	409a      	lsls	r2, r3
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d012      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a76:	f043 0202 	orr.w	r2, r3, #2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	2204      	movs	r2, #4
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d012      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	f043 0204 	orr.w	r2, r3, #4
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	2210      	movs	r2, #16
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d043      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d03c      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d018      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d108      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d024      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
 8002b0a:	e01f      	b.n	8002b4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01b      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
 8002b1c:	e016      	b.n	8002b4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d107      	bne.n	8002b3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0208 	bic.w	r2, r2, #8
 8002b3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2220      	movs	r2, #32
 8002b52:	409a      	lsls	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 808e 	beq.w	8002c7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8086 	beq.w	8002c7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	2220      	movs	r2, #32
 8002b74:	409a      	lsls	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d136      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0216 	bic.w	r2, r2, #22
 8002b94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0x1da>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0208 	bic.w	r2, r2, #8
 8002bc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	223f      	movs	r2, #63	; 0x3f
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d07d      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4798      	blx	r3
        }
        return;
 8002bf2:	e078      	b.n	8002ce6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d01c      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d108      	bne.n	8002c22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d030      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
 8002c20:	e02b      	b.n	8002c7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d027      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
 8002c32:	e022      	b.n	8002c7a <HAL_DMA_IRQHandler+0x29e>
 8002c34:	20000000 	.word	0x20000000
 8002c38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10f      	bne.n	8002c6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0210 	bic.w	r2, r2, #16
 8002c58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d032      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d022      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2205      	movs	r2, #5
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d307      	bcc.n	8002cc2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f2      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x2ca>
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cc2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
 8002ce4:	e000      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ce6:	bf00      	nop
    }
  }
}
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop

08002cf0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cfe:	b2db      	uxtb	r3, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d108      	bne.n	8002d4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d4a:	e007      	b.n	8002d5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	3b10      	subs	r3, #16
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <DMA_CalcBaseAndBitshift+0x64>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d909      	bls.n	8002daa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	1d1a      	adds	r2, r3, #4
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	659a      	str	r2, [r3, #88]	; 0x58
 8002da8:	e007      	b.n	8002dba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	aaaaaaab 	.word	0xaaaaaaab
 8002dd0:	0800efe4 	.word	0x0800efe4

08002dd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11f      	bne.n	8002e2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d855      	bhi.n	8002ea0 <DMA_CheckFifoParam+0xcc>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <DMA_CheckFifoParam+0x28>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e1f 	.word	0x08002e1f
 8002e04:	08002e0d 	.word	0x08002e0d
 8002e08:	08002ea1 	.word	0x08002ea1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d045      	beq.n	8002ea4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1c:	e042      	b.n	8002ea4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e26:	d13f      	bne.n	8002ea8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2c:	e03c      	b.n	8002ea8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e36:	d121      	bne.n	8002e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d836      	bhi.n	8002eac <DMA_CheckFifoParam+0xd8>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <DMA_CheckFifoParam+0x70>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e55 	.word	0x08002e55
 8002e48:	08002e5b 	.word	0x08002e5b
 8002e4c:	08002e55 	.word	0x08002e55
 8002e50:	08002e6d 	.word	0x08002e6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
      break;
 8002e58:	e02f      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d024      	beq.n	8002eb0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6a:	e021      	b.n	8002eb0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e74:	d11e      	bne.n	8002eb4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e7a:	e01b      	b.n	8002eb4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d902      	bls.n	8002e88 <DMA_CheckFifoParam+0xb4>
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d003      	beq.n	8002e8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e86:	e018      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8c:	e015      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00e      	beq.n	8002eb8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9e:	e00b      	b.n	8002eb8 <DMA_CheckFifoParam+0xe4>
      break;
 8002ea0:	bf00      	nop
 8002ea2:	e00a      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;
 8002ea4:	bf00      	nop
 8002ea6:	e008      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;
 8002ea8:	bf00      	nop
 8002eaa:	e006      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;
 8002eac:	bf00      	nop
 8002eae:	e004      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;
 8002eb0:	bf00      	nop
 8002eb2:	e002      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;   
 8002eb4:	bf00      	nop
 8002eb6:	e000      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;
 8002eb8:	bf00      	nop
    }
  } 
  
  return status; 
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002ed8:	4baa      	ldr	r3, [pc, #680]	; (8003184 <HAL_ETH_Init+0x2bc>)
 8002eda:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e185      	b.n	80031fa <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fe f9de 	bl	80012c4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	4b9e      	ldr	r3, [pc, #632]	; (8003188 <HAL_ETH_Init+0x2c0>)
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	4a9d      	ldr	r2, [pc, #628]	; (8003188 <HAL_ETH_Init+0x2c0>)
 8002f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f16:	6453      	str	r3, [r2, #68]	; 0x44
 8002f18:	4b9b      	ldr	r3, [pc, #620]	; (8003188 <HAL_ETH_Init+0x2c0>)
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002f24:	4b99      	ldr	r3, [pc, #612]	; (800318c <HAL_ETH_Init+0x2c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a98      	ldr	r2, [pc, #608]	; (800318c <HAL_ETH_Init+0x2c4>)
 8002f2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f2e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002f30:	4b96      	ldr	r3, [pc, #600]	; (800318c <HAL_ETH_Init+0x2c4>)
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4994      	ldr	r1, [pc, #592]	; (800318c <HAL_ETH_Init+0x2c4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f54:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f56:	f7ff fad9 	bl	800250c <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f5c:	e011      	b.n	8002f82 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002f5e:	f7ff fad5 	bl	800250c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f6c:	d909      	bls.n	8002f82 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2203      	movs	r2, #3
 8002f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e13b      	b.n	80031fa <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1e4      	bne.n	8002f5e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f023 031c 	bic.w	r3, r3, #28
 8002fa2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002fa4:	f003 ffd4 	bl	8006f50 <HAL_RCC_GetHCLKFreq>
 8002fa8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4a78      	ldr	r2, [pc, #480]	; (8003190 <HAL_ETH_Init+0x2c8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d908      	bls.n	8002fc4 <HAL_ETH_Init+0xfc>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4a77      	ldr	r2, [pc, #476]	; (8003194 <HAL_ETH_Init+0x2cc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d804      	bhi.n	8002fc4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e027      	b.n	8003014 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	4a73      	ldr	r2, [pc, #460]	; (8003194 <HAL_ETH_Init+0x2cc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d908      	bls.n	8002fde <HAL_ETH_Init+0x116>
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	4a72      	ldr	r2, [pc, #456]	; (8003198 <HAL_ETH_Init+0x2d0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d804      	bhi.n	8002fde <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f043 030c 	orr.w	r3, r3, #12
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	e01a      	b.n	8003014 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4a6d      	ldr	r2, [pc, #436]	; (8003198 <HAL_ETH_Init+0x2d0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d903      	bls.n	8002fee <HAL_ETH_Init+0x126>
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4a6c      	ldr	r2, [pc, #432]	; (800319c <HAL_ETH_Init+0x2d4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d911      	bls.n	8003012 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	4a6a      	ldr	r2, [pc, #424]	; (800319c <HAL_ETH_Init+0x2d4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d908      	bls.n	8003008 <HAL_ETH_Init+0x140>
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4a69      	ldr	r2, [pc, #420]	; (80031a0 <HAL_ETH_Init+0x2d8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d804      	bhi.n	8003008 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e005      	b.n	8003014 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f043 0310 	orr.w	r3, r3, #16
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	e000      	b.n	8003014 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003012:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800301c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003020:	2100      	movs	r1, #0
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f956 	bl	80032d4 <HAL_ETH_WritePHYRegister>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003032:	6939      	ldr	r1, [r7, #16]
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f9b3 	bl	80033a0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e0d9      	b.n	80031fa <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003046:	20ff      	movs	r0, #255	; 0xff
 8003048:	f7ff fa6c 	bl	8002524 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a7 	beq.w	80031a4 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003056:	f7ff fa59 	bl	800250c <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800305c:	f107 030c 	add.w	r3, r7, #12
 8003060:	461a      	mov	r2, r3
 8003062:	2101      	movs	r1, #1
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f8cd 	bl	8003204 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800306a:	f7ff fa4f 	bl	800250c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d90f      	bls.n	800309c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003080:	6939      	ldr	r1, [r7, #16]
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f98c 	bl	80033a0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e0ae      	b.n	80031fa <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0da      	beq.n	800305c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80030a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030aa:	2100      	movs	r1, #0
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f911 	bl	80032d4 <HAL_ETH_WritePHYRegister>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80030bc:	6939      	ldr	r1, [r7, #16]
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f96e 	bl	80033a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80030cc:	2301      	movs	r3, #1
 80030ce:	e094      	b.n	80031fa <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80030d0:	f7ff fa1c 	bl	800250c <HAL_GetTick>
 80030d4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80030d6:	f107 030c 	add.w	r3, r7, #12
 80030da:	461a      	mov	r2, r3
 80030dc:	2101      	movs	r1, #1
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f890 	bl	8003204 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80030e4:	f7ff fa12 	bl	800250c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d90f      	bls.n	8003116 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80030fa:	6939      	ldr	r1, [r7, #16]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f94f 	bl	80033a0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e071      	b.n	80031fa <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0da      	beq.n	80030d6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003120:	f107 030c 	add.w	r3, r7, #12
 8003124:	461a      	mov	r2, r3
 8003126:	211f      	movs	r1, #31
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f86b 	bl	8003204 <HAL_ETH_ReadPHYRegister>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003138:	6939      	ldr	r1, [r7, #16]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f930 	bl	80033a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003148:	2301      	movs	r3, #1
 800314a:	e056      	b.n	80031fa <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	e002      	b.n	8003166 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	e037      	b.n	80031e8 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	e032      	b.n	80031e8 <HAL_ETH_Init+0x320>
 8003182:	bf00      	nop
 8003184:	03938700 	.word	0x03938700
 8003188:	40023800 	.word	0x40023800
 800318c:	40013800 	.word	0x40013800
 8003190:	01312cff 	.word	0x01312cff
 8003194:	02160ebf 	.word	0x02160ebf
 8003198:	039386ff 	.word	0x039386ff
 800319c:	05f5e0ff 	.word	0x05f5e0ff
 80031a0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80031b4:	4313      	orrs	r3, r2
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	2100      	movs	r1, #0
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f889 	bl	80032d4 <HAL_ETH_WritePHYRegister>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00b      	beq.n	80031e0 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80031cc:	6939      	ldr	r1, [r7, #16]
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f8e6 	bl	80033a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e00c      	b.n	80031fa <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80031e0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80031e4:	f7ff f99e 	bl	8002524 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80031e8:	6939      	ldr	r1, [r7, #16]
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8d8 	bl	80033a0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop

08003204 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	460b      	mov	r3, r1
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b82      	cmp	r3, #130	; 0x82
 8003224:	d101      	bne.n	800322a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003226:	2302      	movs	r3, #2
 8003228:	e050      	b.n	80032cc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2282      	movs	r2, #130	; 0x82
 800322e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f003 031c 	and.w	r3, r3, #28
 8003240:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8a1b      	ldrh	r3, [r3, #16]
 8003246:	02db      	lsls	r3, r3, #11
 8003248:	b29b      	uxth	r3, r3
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003250:	897b      	ldrh	r3, [r7, #10]
 8003252:	019b      	lsls	r3, r3, #6
 8003254:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f023 0302 	bic.w	r3, r3, #2
 8003264:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003276:	f7ff f949 	bl	800250c <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800327c:	e015      	b.n	80032aa <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800327e:	f7ff f945 	bl	800250c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328c:	d309      	bcc.n	80032a2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e014      	b.n	80032cc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e4      	bne.n	800327e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	460b      	mov	r3, r1
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b42      	cmp	r3, #66	; 0x42
 80032f4:	d101      	bne.n	80032fa <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	e04e      	b.n	8003398 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2242      	movs	r2, #66	; 0x42
 80032fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 031c 	and.w	r3, r3, #28
 8003310:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8a1b      	ldrh	r3, [r3, #16]
 8003316:	02db      	lsls	r3, r3, #11
 8003318:	b29b      	uxth	r3, r3
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003320:	897b      	ldrh	r3, [r7, #10]
 8003322:	019b      	lsls	r3, r3, #6
 8003324:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003350:	f7ff f8dc 	bl	800250c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003356:	e015      	b.n	8003384 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003358:	f7ff f8d8 	bl	800250c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003366:	d309      	bcc.n	800337c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e00d      	b.n	8003398 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e4      	bne.n	8003358 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b0b0      	sub	sp, #192	; 0xc0
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033bc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80033ce:	2300      	movs	r3, #0
 80033d0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80033da:	2300      	movs	r3, #0
 80033dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80033e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ea:	663b      	str	r3, [r7, #96]	; 0x60
 80033ec:	e001      	b.n	80033f2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80033f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033f6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80033fc:	2300      	movs	r3, #0
 80033fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003400:	2300      	movs	r3, #0
 8003402:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003404:	2300      	movs	r3, #0
 8003406:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003408:	2300      	movs	r3, #0
 800340a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800340c:	2340      	movs	r3, #64	; 0x40
 800340e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003416:	2300      	movs	r3, #0
 8003418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800341c:	2300      	movs	r3, #0
 800341e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003422:	2300      	movs	r3, #0
 8003424:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800342e:	2300      	movs	r3, #0
 8003430:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003446:	2300      	movs	r3, #0
 8003448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003452:	2300      	movs	r3, #0
 8003454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800345e:	2300      	movs	r3, #0
 8003460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003474:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003478:	4bac      	ldr	r3, [pc, #688]	; (800372c <ETH_MACDMAConfig+0x38c>)
 800347a:	4013      	ands	r3, r2
 800347c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003480:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003484:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003488:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800348a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800348c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003492:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003496:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800349a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80034a0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80034a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80034a4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80034a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80034a8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80034aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80034ac:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80034b0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80034b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80034b4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80034b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034c8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034d4:	2001      	movs	r0, #1
 80034d6:	f7ff f825 	bl	8002524 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034e2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80034e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80034e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80034e8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80034ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80034ec:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80034ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80034f2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80034f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80034f8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80034fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80034fe:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003504:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003508:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003510:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003512:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800351e:	2001      	movs	r0, #1
 8003520:	f7ff f800 	bl	8002524 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800352c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003536:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003540:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800354c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003550:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003554:	4013      	ands	r3, r2
 8003556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800355a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800355e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003560:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003564:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800356a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800356c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003570:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003576:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003578:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800357c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800357e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003590:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800359c:	2001      	movs	r0, #1
 800359e:	f7fe ffc1 	bl	8002524 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035aa:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80035ac:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80035b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80035c6:	2001      	movs	r0, #1
 80035c8:	f7fe ffac 	bl	8002524 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035d4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80035da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035de:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80035e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035e8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80035fa:	2304      	movs	r3, #4
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80035fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003608:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800360a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800360e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003614:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800361a:	2300      	movs	r3, #0
 800361c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800361e:	2300      	movs	r3, #0
 8003620:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800362a:	3318      	adds	r3, #24
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003632:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003636:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <ETH_MACDMAConfig+0x390>)
 8003638:	4013      	ands	r3, r2
 800363a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800363e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003640:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003642:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003644:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003646:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003648:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800364a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800364c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800364e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003650:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003652:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003654:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003656:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800365a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800365e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003660:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003672:	3318      	adds	r3, #24
 8003674:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003678:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003682:	3318      	adds	r3, #24
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800368a:	2001      	movs	r0, #1
 800368c:	f7fe ff4a 	bl	8002524 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003698:	3318      	adds	r3, #24
 800369a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800369e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80036a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80036a4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80036a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80036a8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80036ac:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80036ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80036b0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80036b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80036b6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80036b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80036ba:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80036c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80036d8:	2001      	movs	r0, #1
 80036da:	f7fe ff23 	bl	8002524 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036ea:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d10f      	bne.n	8003714 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fc:	331c      	adds	r3, #28
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800370c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003710:	331c      	adds	r3, #28
 8003712:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	461a      	mov	r2, r3
 800371a:	2100      	movs	r1, #0
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f809 	bl	8003734 <ETH_MACAddressConfig>
}
 8003722:	bf00      	nop
 8003724:	37c0      	adds	r7, #192	; 0xc0
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	ff20810f 	.word	0xff20810f
 8003730:	f8de3f23 	.word	0xf8de3f23

08003734 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3305      	adds	r3, #5
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	3204      	adds	r2, #4
 800374c:	7812      	ldrb	r2, [r2, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <ETH_MACAddressConfig+0x68>)
 8003756:	4413      	add	r3, r2
 8003758:	461a      	mov	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3303      	adds	r3, #3
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	061a      	lsls	r2, r3, #24
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3302      	adds	r3, #2
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3301      	adds	r3, #1
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	4313      	orrs	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	7812      	ldrb	r2, [r2, #0]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <ETH_MACAddressConfig+0x6c>)
 8003786:	4413      	add	r3, r2
 8003788:	461a      	mov	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	6013      	str	r3, [r2, #0]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40028040 	.word	0x40028040
 80037a0:	40028044 	.word	0x40028044

080037a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e177      	b.n	8003ab0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037c0:	2201      	movs	r2, #1
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	429a      	cmp	r2, r3
 80037da:	f040 8166 	bne.w	8003aaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d00b      	beq.n	80037fe <HAL_GPIO_Init+0x5a>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d007      	beq.n	80037fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037f2:	2b11      	cmp	r3, #17
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b12      	cmp	r3, #18
 80037fc:	d130      	bne.n	8003860 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	2203      	movs	r2, #3
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003834:	2201      	movs	r2, #1
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 0201 	and.w	r2, r3, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0xfc>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b12      	cmp	r3, #18
 800389e:	d123      	bne.n	80038e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	08da      	lsrs	r2, r3, #3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3208      	adds	r2, #8
 80038a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	220f      	movs	r2, #15
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	08da      	lsrs	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3208      	adds	r2, #8
 80038e2:	69b9      	ldr	r1, [r7, #24]
 80038e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	2203      	movs	r2, #3
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0203 	and.w	r2, r3, #3
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80c0 	beq.w	8003aaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4b65      	ldr	r3, [pc, #404]	; (8003ac4 <HAL_GPIO_Init+0x320>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	4a64      	ldr	r2, [pc, #400]	; (8003ac4 <HAL_GPIO_Init+0x320>)
 8003934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003938:	6453      	str	r3, [r2, #68]	; 0x44
 800393a:	4b62      	ldr	r3, [pc, #392]	; (8003ac4 <HAL_GPIO_Init+0x320>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003946:	4a60      	ldr	r2, [pc, #384]	; (8003ac8 <HAL_GPIO_Init+0x324>)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	3302      	adds	r3, #2
 800394e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	220f      	movs	r2, #15
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a57      	ldr	r2, [pc, #348]	; (8003acc <HAL_GPIO_Init+0x328>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d037      	beq.n	80039e2 <HAL_GPIO_Init+0x23e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a56      	ldr	r2, [pc, #344]	; (8003ad0 <HAL_GPIO_Init+0x32c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d031      	beq.n	80039de <HAL_GPIO_Init+0x23a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a55      	ldr	r2, [pc, #340]	; (8003ad4 <HAL_GPIO_Init+0x330>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d02b      	beq.n	80039da <HAL_GPIO_Init+0x236>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a54      	ldr	r2, [pc, #336]	; (8003ad8 <HAL_GPIO_Init+0x334>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d025      	beq.n	80039d6 <HAL_GPIO_Init+0x232>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a53      	ldr	r2, [pc, #332]	; (8003adc <HAL_GPIO_Init+0x338>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01f      	beq.n	80039d2 <HAL_GPIO_Init+0x22e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a52      	ldr	r2, [pc, #328]	; (8003ae0 <HAL_GPIO_Init+0x33c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d019      	beq.n	80039ce <HAL_GPIO_Init+0x22a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a51      	ldr	r2, [pc, #324]	; (8003ae4 <HAL_GPIO_Init+0x340>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <HAL_GPIO_Init+0x226>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a50      	ldr	r2, [pc, #320]	; (8003ae8 <HAL_GPIO_Init+0x344>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00d      	beq.n	80039c6 <HAL_GPIO_Init+0x222>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a4f      	ldr	r2, [pc, #316]	; (8003aec <HAL_GPIO_Init+0x348>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <HAL_GPIO_Init+0x21e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a4e      	ldr	r2, [pc, #312]	; (8003af0 <HAL_GPIO_Init+0x34c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_GPIO_Init+0x21a>
 80039ba:	2309      	movs	r3, #9
 80039bc:	e012      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039be:	230a      	movs	r3, #10
 80039c0:	e010      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039c2:	2308      	movs	r3, #8
 80039c4:	e00e      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039c6:	2307      	movs	r3, #7
 80039c8:	e00c      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039ca:	2306      	movs	r3, #6
 80039cc:	e00a      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039ce:	2305      	movs	r3, #5
 80039d0:	e008      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039d2:	2304      	movs	r3, #4
 80039d4:	e006      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039d6:	2303      	movs	r3, #3
 80039d8:	e004      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039da:	2302      	movs	r3, #2
 80039dc:	e002      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039e2:	2300      	movs	r3, #0
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	f002 0203 	and.w	r2, r2, #3
 80039ea:	0092      	lsls	r2, r2, #2
 80039ec:	4093      	lsls	r3, r2
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f4:	4934      	ldr	r1, [pc, #208]	; (8003ac8 <HAL_GPIO_Init+0x324>)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	3302      	adds	r3, #2
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a02:	4b3c      	ldr	r3, [pc, #240]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a26:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a2c:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a50:	4a28      	ldr	r2, [pc, #160]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a56:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a80:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aa4:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3301      	adds	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b0f      	cmp	r3, #15
 8003ab4:	f67f ae84 	bls.w	80037c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab8:	bf00      	nop
 8003aba:	3724      	adds	r7, #36	; 0x24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40013800 	.word	0x40013800
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	40020400 	.word	0x40020400
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	40020c00 	.word	0x40020c00
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40021400 	.word	0x40021400
 8003ae4:	40021800 	.word	0x40021800
 8003ae8:	40021c00 	.word	0x40021c00
 8003aec:	40022000 	.word	0x40022000
 8003af0:	40022400 	.word	0x40022400
 8003af4:	40013c00 	.word	0x40013c00

08003af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
 8003b04:	4613      	mov	r3, r2
 8003b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b08:	787b      	ldrb	r3, [r7, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b14:	e003      	b.n	8003b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b16:	887b      	ldrh	r3, [r7, #2]
 8003b18:	041a      	lsls	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	619a      	str	r2, [r3, #24]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e11f      	b.n	8003d7e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fd86 	bl	8001664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2224      	movs	r2, #36	; 0x24
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b90:	f003 f9ea 	bl	8006f68 <HAL_RCC_GetPCLK1Freq>
 8003b94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4a7b      	ldr	r2, [pc, #492]	; (8003d88 <HAL_I2C_Init+0x25c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d807      	bhi.n	8003bb0 <HAL_I2C_Init+0x84>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a7a      	ldr	r2, [pc, #488]	; (8003d8c <HAL_I2C_Init+0x260>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bf94      	ite	ls
 8003ba8:	2301      	movls	r3, #1
 8003baa:	2300      	movhi	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e006      	b.n	8003bbe <HAL_I2C_Init+0x92>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a77      	ldr	r2, [pc, #476]	; (8003d90 <HAL_I2C_Init+0x264>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	bf94      	ite	ls
 8003bb8:	2301      	movls	r3, #1
 8003bba:	2300      	movhi	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0db      	b.n	8003d7e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a72      	ldr	r2, [pc, #456]	; (8003d94 <HAL_I2C_Init+0x268>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	0c9b      	lsrs	r3, r3, #18
 8003bd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a64      	ldr	r2, [pc, #400]	; (8003d88 <HAL_I2C_Init+0x25c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d802      	bhi.n	8003c00 <HAL_I2C_Init+0xd4>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	e009      	b.n	8003c14 <HAL_I2C_Init+0xe8>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	4a63      	ldr	r2, [pc, #396]	; (8003d98 <HAL_I2C_Init+0x26c>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	3301      	adds	r3, #1
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4956      	ldr	r1, [pc, #344]	; (8003d88 <HAL_I2C_Init+0x25c>)
 8003c30:	428b      	cmp	r3, r1
 8003c32:	d80d      	bhi.n	8003c50 <HAL_I2C_Init+0x124>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e59      	subs	r1, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c42:	3301      	adds	r3, #1
 8003c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	bf38      	it	cc
 8003c4c:	2304      	movcc	r3, #4
 8003c4e:	e04f      	b.n	8003cf0 <HAL_I2C_Init+0x1c4>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d111      	bne.n	8003c7c <HAL_I2C_Init+0x150>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e58      	subs	r0, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	440b      	add	r3, r1
 8003c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e012      	b.n	8003ca2 <HAL_I2C_Init+0x176>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1e58      	subs	r0, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	0099      	lsls	r1, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_Init+0x17e>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e022      	b.n	8003cf0 <HAL_I2C_Init+0x1c4>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_I2C_Init+0x1a4>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1e58      	subs	r0, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6859      	ldr	r1, [r3, #4]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	440b      	add	r3, r1
 8003cc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cce:	e00f      	b.n	8003cf0 <HAL_I2C_Init+0x1c4>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1e58      	subs	r0, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	0099      	lsls	r1, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	6809      	ldr	r1, [r1, #0]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6911      	ldr	r1, [r2, #16]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	4311      	orrs	r1, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	000186a0 	.word	0x000186a0
 8003d8c:	001e847f 	.word	0x001e847f
 8003d90:	003d08ff 	.word	0x003d08ff
 8003d94:	431bde83 	.word	0x431bde83
 8003d98:	10624dd3 	.word	0x10624dd3

08003d9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	461a      	mov	r2, r3
 8003da8:	460b      	mov	r3, r1
 8003daa:	817b      	strh	r3, [r7, #10]
 8003dac:	4613      	mov	r3, r2
 8003dae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003db0:	f7fe fbac 	bl	800250c <HAL_GetTick>
 8003db4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	f040 80e0 	bne.w	8003f84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	2319      	movs	r3, #25
 8003dca:	2201      	movs	r2, #1
 8003dcc:	4970      	ldr	r1, [pc, #448]	; (8003f90 <HAL_I2C_Master_Transmit+0x1f4>)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f002 f8ff 	bl	8005fd2 <I2C_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e0d3      	b.n	8003f86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_I2C_Master_Transmit+0x50>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e0cc      	b.n	8003f86 <HAL_I2C_Master_Transmit+0x1ea>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d007      	beq.n	8003e12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0201 	orr.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2221      	movs	r2, #33	; 0x21
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	893a      	ldrh	r2, [r7, #8]
 8003e42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4a50      	ldr	r2, [pc, #320]	; (8003f94 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e54:	8979      	ldrh	r1, [r7, #10]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	6a3a      	ldr	r2, [r7, #32]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f001 feec 	bl	8005c38 <I2C_MasterRequestWrite>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e08d      	b.n	8003f86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e80:	e066      	b.n	8003f50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	6a39      	ldr	r1, [r7, #32]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f002 f979 	bl	800617e <I2C_WaitOnTXEFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00d      	beq.n	8003eae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d107      	bne.n	8003eaa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e06b      	b.n	8003f86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	781a      	ldrb	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d11b      	bne.n	8003f24 <HAL_I2C_Master_Transmit+0x188>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d017      	beq.n	8003f24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	6a39      	ldr	r1, [r7, #32]
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f002 f969 	bl	8006200 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00d      	beq.n	8003f50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d107      	bne.n	8003f4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e01a      	b.n	8003f86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d194      	bne.n	8003e82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e000      	b.n	8003f86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	00100002 	.word	0x00100002
 8003f94:	ffff0000 	.word	0xffff0000

08003f98 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08c      	sub	sp, #48	; 0x30
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	817b      	strh	r3, [r7, #10]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fac:	f7fe faae 	bl	800250c <HAL_GetTick>
 8003fb0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	f040 820b 	bne.w	80043d6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2319      	movs	r3, #25
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	497c      	ldr	r1, [pc, #496]	; (80041bc <HAL_I2C_Master_Receive+0x224>)
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f002 f801 	bl	8005fd2 <I2C_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e1fe      	b.n	80043d8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_I2C_Master_Receive+0x50>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e1f7      	b.n	80043d8 <HAL_I2C_Master_Receive+0x440>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d007      	beq.n	800400e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800401c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2222      	movs	r2, #34	; 0x22
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2210      	movs	r2, #16
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	893a      	ldrh	r2, [r7, #8]
 800403e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4a5c      	ldr	r2, [pc, #368]	; (80041c0 <HAL_I2C_Master_Receive+0x228>)
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004050:	8979      	ldrh	r1, [r7, #10]
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f001 fe70 	bl	8005d3c <I2C_MasterRequestRead>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e1b8      	b.n	80043d8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	2b00      	cmp	r3, #0
 800406c:	d113      	bne.n	8004096 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406e:	2300      	movs	r3, #0
 8004070:	623b      	str	r3, [r7, #32]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	623b      	str	r3, [r7, #32]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e18c      	b.n	80043b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	2b01      	cmp	r3, #1
 800409c:	d11b      	bne.n	80040d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e16c      	b.n	80043b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d11b      	bne.n	8004116 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fe:	2300      	movs	r3, #0
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	e14c      	b.n	80043b0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004124:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800413c:	e138      	b.n	80043b0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	2b03      	cmp	r3, #3
 8004144:	f200 80f1 	bhi.w	800432a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	2b01      	cmp	r3, #1
 800414e:	d123      	bne.n	8004198 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004152:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f002 f894 	bl	8006282 <I2C_WaitOnRXNEFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e139      	b.n	80043d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004196:	e10b      	b.n	80043b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	2b02      	cmp	r3, #2
 800419e:	d14e      	bne.n	800423e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	2200      	movs	r2, #0
 80041a8:	4906      	ldr	r1, [pc, #24]	; (80041c4 <HAL_I2C_Master_Receive+0x22c>)
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f001 ff11 	bl	8005fd2 <I2C_WaitOnFlagUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e10e      	b.n	80043d8 <HAL_I2C_Master_Receive+0x440>
 80041ba:	bf00      	nop
 80041bc:	00100002 	.word	0x00100002
 80041c0:	ffff0000 	.word	0xffff0000
 80041c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800423c:	e0b8      	b.n	80043b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	2200      	movs	r2, #0
 8004246:	4966      	ldr	r1, [pc, #408]	; (80043e0 <HAL_I2C_Master_Receive+0x448>)
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f001 fec2 	bl	8005fd2 <I2C_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0bf      	b.n	80043d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	2200      	movs	r2, #0
 80042a2:	494f      	ldr	r1, [pc, #316]	; (80043e0 <HAL_I2C_Master_Receive+0x448>)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f001 fe94 	bl	8005fd2 <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e091      	b.n	80043d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004328:	e042      	b.n	80043b0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f001 ffa7 	bl	8006282 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e04c      	b.n	80043d8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d118      	bne.n	80043b0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f47f aec2 	bne.w	800413e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3728      	adds	r7, #40	; 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	00010004 	.word	0x00010004

080043e4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	4608      	mov	r0, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	461a      	mov	r2, r3
 80043f2:	4603      	mov	r3, r0
 80043f4:	817b      	strh	r3, [r7, #10]
 80043f6:	460b      	mov	r3, r1
 80043f8:	813b      	strh	r3, [r7, #8]
 80043fa:	4613      	mov	r3, r2
 80043fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b20      	cmp	r3, #32
 800440c:	f040 809a 	bne.w	8004544 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004410:	4b50      	ldr	r3, [pc, #320]	; (8004554 <HAL_I2C_Mem_Read_IT+0x170>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	08db      	lsrs	r3, r3, #3
 8004416:	4a50      	ldr	r2, [pc, #320]	; (8004558 <HAL_I2C_Mem_Read_IT+0x174>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	0a1a      	lsrs	r2, r3, #8
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009a      	lsls	r2, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	3b01      	subs	r3, #1
 800442e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d116      	bne.n	8004464 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	f043 0220 	orr.w	r2, r3, #32
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e070      	b.n	8004546 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b02      	cmp	r3, #2
 8004470:	d0db      	beq.n	800442a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_I2C_Mem_Read_IT+0x9c>
 800447c:	2302      	movs	r3, #2
 800447e:	e062      	b.n	8004546 <HAL_I2C_Mem_Read_IT+0x162>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b01      	cmp	r3, #1
 8004494:	d007      	beq.n	80044a6 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2222      	movs	r2, #34	; 0x22
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2240      	movs	r2, #64	; 0x40
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a3a      	ldr	r2, [r7, #32]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a1d      	ldr	r2, [pc, #116]	; (800455c <HAL_I2C_Mem_Read_IT+0x178>)
 80044e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80044e8:	897a      	ldrh	r2, [r7, #10]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80044ee:	893a      	ldrh	r2, [r7, #8]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800450e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800451e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800453e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	e000      	b.n	8004546 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8004544:	2302      	movs	r3, #2
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000000 	.word	0x20000000
 8004558:	14f8b589 	.word	0x14f8b589
 800455c:	ffff0000 	.word	0xffff0000

08004560 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004580:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004588:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b10      	cmp	r3, #16
 800458e:	d003      	beq.n	8004598 <HAL_I2C_EV_IRQHandler+0x38>
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	f040 80b6 	bne.w	8004704 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10d      	bne.n	80045ce <HAL_I2C_EV_IRQHandler+0x6e>
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80045b8:	d003      	beq.n	80045c2 <HAL_I2C_EV_IRQHandler+0x62>
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80045c0:	d101      	bne.n	80045c6 <HAL_I2C_EV_IRQHandler+0x66>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <HAL_I2C_EV_IRQHandler+0x68>
 80045c6:	2300      	movs	r3, #0
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	f000 8127 	beq.w	800481c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00c      	beq.n	80045f2 <HAL_I2C_EV_IRQHandler+0x92>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	0a5b      	lsrs	r3, r3, #9
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d006      	beq.n	80045f2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f001 fed1 	bl	800638c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fd12 	bl	8005014 <I2C_Master_SB>
 80045f0:	e087      	b.n	8004702 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	08db      	lsrs	r3, r3, #3
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_I2C_EV_IRQHandler+0xb2>
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	0a5b      	lsrs	r3, r3, #9
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fd88 	bl	8005120 <I2C_Master_ADD10>
 8004610:	e077      	b.n	8004702 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_I2C_EV_IRQHandler+0xd2>
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	0a5b      	lsrs	r3, r3, #9
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fda2 	bl	8005174 <I2C_Master_ADDR>
 8004630:	e067      	b.n	8004702 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	089b      	lsrs	r3, r3, #2
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d030      	beq.n	80046a0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464c:	f000 80e8 	beq.w	8004820 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	09db      	lsrs	r3, r3, #7
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00f      	beq.n	800467c <HAL_I2C_EV_IRQHandler+0x11c>
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	0a9b      	lsrs	r3, r3, #10
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d009      	beq.n	800467c <HAL_I2C_EV_IRQHandler+0x11c>
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d103      	bne.n	800467c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f9de 	bl	8004a36 <I2C_MasterTransmit_TXE>
 800467a:	e042      	b.n	8004702 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	089b      	lsrs	r3, r3, #2
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80cb 	beq.w	8004820 <HAL_I2C_EV_IRQHandler+0x2c0>
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	0a5b      	lsrs	r3, r3, #9
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80c4 	beq.w	8004820 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fa68 	bl	8004b6e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800469e:	e0bf      	b.n	8004820 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ae:	f000 80b7 	beq.w	8004820 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	099b      	lsrs	r3, r3, #6
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00f      	beq.n	80046de <HAL_I2C_EV_IRQHandler+0x17e>
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	0a9b      	lsrs	r3, r3, #10
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_I2C_EV_IRQHandler+0x17e>
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d103      	bne.n	80046de <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fb30 	bl	8004d3c <I2C_MasterReceive_RXNE>
 80046dc:	e011      	b.n	8004702 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	089b      	lsrs	r3, r3, #2
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 809a 	beq.w	8004820 <HAL_I2C_EV_IRQHandler+0x2c0>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	0a5b      	lsrs	r3, r3, #9
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8093 	beq.w	8004820 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fba0 	bl	8004e40 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004700:	e08e      	b.n	8004820 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004702:	e08d      	b.n	8004820 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d004      	beq.n	8004716 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	e007      	b.n	8004726 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d012      	beq.n	8004758 <HAL_I2C_EV_IRQHandler+0x1f8>
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	0a5b      	lsrs	r3, r3, #9
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00c      	beq.n	8004758 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800474e:	69b9      	ldr	r1, [r7, #24]
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 ff5e 	bl	8005612 <I2C_Slave_ADDR>
 8004756:	e066      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <HAL_I2C_EV_IRQHandler+0x218>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	0a5b      	lsrs	r3, r3, #9
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 ff93 	bl	800569c <I2C_Slave_STOPF>
 8004776:	e056      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004778:	7bbb      	ldrb	r3, [r7, #14]
 800477a:	2b21      	cmp	r3, #33	; 0x21
 800477c:	d002      	beq.n	8004784 <HAL_I2C_EV_IRQHandler+0x224>
 800477e:	7bbb      	ldrb	r3, [r7, #14]
 8004780:	2b29      	cmp	r3, #41	; 0x29
 8004782:	d125      	bne.n	80047d0 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	09db      	lsrs	r3, r3, #7
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00f      	beq.n	80047b0 <HAL_I2C_EV_IRQHandler+0x250>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	0a9b      	lsrs	r3, r3, #10
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d009      	beq.n	80047b0 <HAL_I2C_EV_IRQHandler+0x250>
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	089b      	lsrs	r3, r3, #2
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d103      	bne.n	80047b0 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fe74 	bl	8005496 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047ae:	e039      	b.n	8004824 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d033      	beq.n	8004824 <HAL_I2C_EV_IRQHandler+0x2c4>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	0a5b      	lsrs	r3, r3, #9
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d02d      	beq.n	8004824 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fea1 	bl	8005510 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047ce:	e029      	b.n	8004824 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	099b      	lsrs	r3, r3, #6
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00f      	beq.n	80047fc <HAL_I2C_EV_IRQHandler+0x29c>
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	0a9b      	lsrs	r3, r3, #10
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d009      	beq.n	80047fc <HAL_I2C_EV_IRQHandler+0x29c>
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d103      	bne.n	80047fc <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 feac 	bl	8005552 <I2C_SlaveReceive_RXNE>
 80047fa:	e014      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00e      	beq.n	8004826 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	0a5b      	lsrs	r3, r3, #9
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 feda 	bl	80055ce <I2C_SlaveReceive_BTF>
 800481a:	e004      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 800481c:	bf00      	nop
 800481e:	e002      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004824:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	; 0x28
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004844:	2300      	movs	r3, #0
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800484e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00e      	beq.n	800487a <HAL_I2C_ER_IRQHandler+0x4e>
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004878:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	0a5b      	lsrs	r3, r3, #9
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00e      	beq.n	80048a4 <HAL_I2C_ER_IRQHandler+0x78>
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	0a1b      	lsrs	r3, r3, #8
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	f043 0302 	orr.w	r3, r3, #2
 8004898:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80048a2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	0a9b      	lsrs	r3, r3, #10
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d03f      	beq.n	8004930 <HAL_I2C_ER_IRQHandler+0x104>
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	0a1b      	lsrs	r3, r3, #8
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d039      	beq.n	8004930 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80048bc:	7efb      	ldrb	r3, [r7, #27]
 80048be:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ce:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80048d6:	7ebb      	ldrb	r3, [r7, #26]
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d112      	bne.n	8004902 <HAL_I2C_ER_IRQHandler+0xd6>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <HAL_I2C_ER_IRQHandler+0xd6>
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	2b21      	cmp	r3, #33	; 0x21
 80048e6:	d008      	beq.n	80048fa <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	2b29      	cmp	r3, #41	; 0x29
 80048ec:	d005      	beq.n	80048fa <HAL_I2C_ER_IRQHandler+0xce>
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	2b28      	cmp	r3, #40	; 0x28
 80048f2:	d106      	bne.n	8004902 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b21      	cmp	r3, #33	; 0x21
 80048f8:	d103      	bne.n	8004902 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fffe 	bl	80058fc <I2C_Slave_AF>
 8004900:	e016      	b.n	8004930 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800490a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	f043 0304 	orr.w	r3, r3, #4
 8004912:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004914:	7efb      	ldrb	r3, [r7, #27]
 8004916:	2b10      	cmp	r3, #16
 8004918:	d002      	beq.n	8004920 <HAL_I2C_ER_IRQHandler+0xf4>
 800491a:	7efb      	ldrb	r3, [r7, #27]
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d107      	bne.n	8004930 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	0adb      	lsrs	r3, r3, #11
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00e      	beq.n	800495a <HAL_I2C_ER_IRQHandler+0x12e>
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	f043 0308 	orr.w	r3, r3, #8
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004958:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f001 f835 	bl	80059dc <I2C_ITError>
  }
}
 8004972:	bf00      	nop
 8004974:	3728      	adds	r7, #40	; 0x28
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	460b      	mov	r3, r1
 80049d4:	70fb      	strb	r3, [r7, #3]
 80049d6:	4613      	mov	r3, r2
 80049d8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a4c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d150      	bne.n	8004afe <I2C_MasterTransmit_TXE+0xc8>
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b21      	cmp	r3, #33	; 0x21
 8004a60:	d14d      	bne.n	8004afe <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d01d      	beq.n	8004aa4 <I2C_MasterTransmit_TXE+0x6e>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d01a      	beq.n	8004aa4 <I2C_MasterTransmit_TXE+0x6e>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a74:	d016      	beq.n	8004aa4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a84:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2211      	movs	r2, #17
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ff6c 	bl	800497a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004aa2:	e060      	b.n	8004b66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ab2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d107      	bne.n	8004aee <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff ff87 	bl	80049fa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004aec:	e03b      	b.n	8004b66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff ff3f 	bl	800497a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004afc:	e033      	b.n	8004b66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b21      	cmp	r3, #33	; 0x21
 8004b02:	d005      	beq.n	8004b10 <I2C_MasterTransmit_TXE+0xda>
 8004b04:	7bbb      	ldrb	r3, [r7, #14]
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d12d      	bne.n	8004b66 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	2b22      	cmp	r3, #34	; 0x22
 8004b0e:	d12a      	bne.n	8004b66 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d108      	bne.n	8004b2c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b28:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b2a:	e01c      	b.n	8004b66 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d103      	bne.n	8004b40 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f898 	bl	8004c6e <I2C_MemoryTransmit_TXE_BTF>
}
 8004b3e:	e012      	b.n	8004b66 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	781a      	ldrb	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b64:	e7ff      	b.n	8004b66 <I2C_MasterTransmit_TXE+0x130>
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b21      	cmp	r3, #33	; 0x21
 8004b86:	d165      	bne.n	8004c54 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d012      	beq.n	8004bb8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	781a      	ldrb	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004bb6:	e056      	b.n	8004c66 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d01d      	beq.n	8004bfa <I2C_MasterTransmit_BTF+0x8c>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d01a      	beq.n	8004bfa <I2C_MasterTransmit_BTF+0x8c>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bca:	d016      	beq.n	8004bfa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bda:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2211      	movs	r2, #17
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff fec1 	bl	800497a <HAL_I2C_MasterTxCpltCallback>
}
 8004bf8:	e035      	b.n	8004c66 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c08:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c18:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d107      	bne.n	8004c44 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff fedc 	bl	80049fa <HAL_I2C_MemTxCpltCallback>
}
 8004c42:	e010      	b.n	8004c66 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff fe94 	bl	800497a <HAL_I2C_MasterTxCpltCallback>
}
 8004c52:	e008      	b.n	8004c66 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	d102      	bne.n	8004c66 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f804 	bl	8004c6e <I2C_MemoryTransmit_TXE_BTF>
}
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d11d      	bne.n	8004cba <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d10b      	bne.n	8004c9e <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c96:	1c9a      	adds	r2, r3, #2
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004c9c:	e048      	b.n	8004d30 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	121b      	asrs	r3, r3, #8
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cb8:	e03a      	b.n	8004d30 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d10b      	bne.n	8004cda <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cd8:	e02a      	b.n	8004d30 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d126      	bne.n	8004d30 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b22      	cmp	r3, #34	; 0x22
 8004cec:	d108      	bne.n	8004d00 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cfc:	601a      	str	r2, [r3, #0]
}
 8004cfe:	e017      	b.n	8004d30 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b21      	cmp	r3, #33	; 0x21
 8004d0a:	d111      	bne.n	8004d30 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	781a      	ldrb	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b22      	cmp	r3, #34	; 0x22
 8004d4e:	d173      	bne.n	8004e38 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d920      	bls.n	8004da0 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d154      	bne.n	8004e38 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004d9e:	e04b      	b.n	8004e38 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d047      	beq.n	8004e38 <I2C_MasterReceive_RXNE+0xfc>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d002      	beq.n	8004db4 <I2C_MasterReceive_RXNE+0x78>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d141      	bne.n	8004e38 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dd2:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d10a      	bne.n	8004e24 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f005 fdcd 	bl	800a9bc <HAL_I2C_MemRxCpltCallback>
}
 8004e22:	e009      	b.n	8004e38 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2212      	movs	r2, #18
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff fdab 	bl	800498e <HAL_I2C_MasterRxCpltCallback>
}
 8004e38:	bf00      	nop
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d11b      	bne.n	8004e90 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e66:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e8e:	e0bd      	b.n	800500c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d129      	bne.n	8004eee <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d00a      	beq.n	8004ec6 <I2C_MasterReceive_BTF+0x86>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d007      	beq.n	8004ec6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eec:	e08e      	b.n	800500c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d176      	bne.n	8004fe6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d002      	beq.n	8004f04 <I2C_MasterReceive_BTF+0xc4>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d108      	bne.n	8004f16 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	e019      	b.n	8004f4a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d002      	beq.n	8004f22 <I2C_MasterReceive_BTF+0xe2>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d108      	bne.n	8004f34 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e00a      	b.n	8004f4a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d007      	beq.n	8004f4a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f48:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fa4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d10a      	bne.n	8004fd0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f005 fcf7 	bl	800a9bc <HAL_I2C_MemRxCpltCallback>
}
 8004fce:	e01d      	b.n	800500c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2212      	movs	r2, #18
 8004fdc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff fcd5 	bl	800498e <HAL_I2C_MasterRxCpltCallback>
}
 8004fe4:	e012      	b.n	800500c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d117      	bne.n	8005058 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005040:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005042:	e067      	b.n	8005114 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	b2da      	uxtb	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	611a      	str	r2, [r3, #16]
}
 8005056:	e05d      	b.n	8005114 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005060:	d133      	bne.n	80050ca <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b21      	cmp	r3, #33	; 0x21
 800506c:	d109      	bne.n	8005082 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800507e:	611a      	str	r2, [r3, #16]
 8005080:	e008      	b.n	8005094 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	b2da      	uxtb	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	2b00      	cmp	r3, #0
 800509a:	d004      	beq.n	80050a6 <I2C_Master_SB+0x92>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d108      	bne.n	80050b8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d032      	beq.n	8005114 <I2C_Master_SB+0x100>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d02d      	beq.n	8005114 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c6:	605a      	str	r2, [r3, #4]
}
 80050c8:	e024      	b.n	8005114 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10e      	bne.n	80050f0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	11db      	asrs	r3, r3, #7
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f003 0306 	and.w	r3, r3, #6
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f063 030f 	orn	r3, r3, #15
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	611a      	str	r2, [r3, #16]
}
 80050ee:	e011      	b.n	8005114 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d10d      	bne.n	8005114 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	11db      	asrs	r3, r3, #7
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f003 0306 	and.w	r3, r3, #6
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f063 030e 	orn	r3, r3, #14
 800510c:	b2da      	uxtb	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	611a      	str	r2, [r3, #16]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512c:	b2da      	uxtb	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005138:	2b00      	cmp	r3, #0
 800513a:	d103      	bne.n	8005144 <I2C_Master_ADD10+0x24>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	2b00      	cmp	r3, #0
 8005142:	d011      	beq.n	8005168 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <I2C_Master_ADD10+0x38>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005166:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005174:	b480      	push	{r7}
 8005176:	b091      	sub	sp, #68	; 0x44
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005182:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b22      	cmp	r3, #34	; 0x22
 800519c:	f040 8169 	bne.w	8005472 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10f      	bne.n	80051c8 <I2C_Master_ADDR+0x54>
 80051a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	d10b      	bne.n	80051c8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b0:	2300      	movs	r3, #0
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	633b      	str	r3, [r7, #48]	; 0x30
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	e160      	b.n	800548a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d11d      	bne.n	800520c <I2C_Master_ADDR+0x98>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051d8:	d118      	bne.n	800520c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051da:	2300      	movs	r3, #0
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fe:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	651a      	str	r2, [r3, #80]	; 0x50
 800520a:	e13e      	b.n	800548a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d113      	bne.n	800523e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005216:	2300      	movs	r3, #0
 8005218:	62bb      	str	r3, [r7, #40]	; 0x28
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	e115      	b.n	800546a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b01      	cmp	r3, #1
 8005246:	f040 808a 	bne.w	800535e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005250:	d137      	bne.n	80052c2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005260:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800526c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005270:	d113      	bne.n	800529a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005280:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005282:	2300      	movs	r3, #0
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	e0e7      	b.n	800546a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800529a:	2300      	movs	r3, #0
 800529c:	623b      	str	r3, [r7, #32]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	623b      	str	r3, [r7, #32]
 80052ae:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	e0d3      	b.n	800546a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d02e      	beq.n	8005326 <I2C_Master_ADDR+0x1b2>
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d02b      	beq.n	8005326 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	2b12      	cmp	r3, #18
 80052d2:	d102      	bne.n	80052da <I2C_Master_ADDR+0x166>
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d125      	bne.n	8005326 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d00e      	beq.n	80052fe <I2C_Master_ADDR+0x18a>
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d00b      	beq.n	80052fe <I2C_Master_ADDR+0x18a>
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d008      	beq.n	80052fe <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e007      	b.n	800530e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800530c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	e0a1      	b.n	800546a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005334:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005336:	2300      	movs	r3, #0
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e085      	b.n	800546a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d14d      	bne.n	8005404 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	2b04      	cmp	r3, #4
 800536c:	d016      	beq.n	800539c <I2C_Master_ADDR+0x228>
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	2b02      	cmp	r3, #2
 8005372:	d013      	beq.n	800539c <I2C_Master_ADDR+0x228>
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	2b10      	cmp	r3, #16
 8005378:	d010      	beq.n	800539c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005388:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e007      	b.n	80053ac <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053aa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ba:	d117      	bne.n	80053ec <I2C_Master_ADDR+0x278>
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053c2:	d00b      	beq.n	80053dc <I2C_Master_ADDR+0x268>
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d008      	beq.n	80053dc <I2C_Master_ADDR+0x268>
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d005      	beq.n	80053dc <I2C_Master_ADDR+0x268>
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d002      	beq.n	80053dc <I2C_Master_ADDR+0x268>
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d107      	bne.n	80053ec <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053ea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	e032      	b.n	800546a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005412:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005422:	d117      	bne.n	8005454 <I2C_Master_ADDR+0x2e0>
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800542a:	d00b      	beq.n	8005444 <I2C_Master_ADDR+0x2d0>
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	2b01      	cmp	r3, #1
 8005430:	d008      	beq.n	8005444 <I2C_Master_ADDR+0x2d0>
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	2b08      	cmp	r3, #8
 8005436:	d005      	beq.n	8005444 <I2C_Master_ADDR+0x2d0>
 8005438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543a:	2b10      	cmp	r3, #16
 800543c:	d002      	beq.n	8005444 <I2C_Master_ADDR+0x2d0>
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	2b20      	cmp	r3, #32
 8005442:	d107      	bne.n	8005454 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005452:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005470:	e00b      	b.n	800548a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
}
 8005488:	e7ff      	b.n	800548a <I2C_Master_ADDR+0x316>
 800548a:	bf00      	nop
 800548c:	3744      	adds	r7, #68	; 0x44
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d02b      	beq.n	8005508 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	781a      	ldrb	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d114      	bne.n	8005508 <I2C_SlaveTransmit_TXE+0x72>
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	2b29      	cmp	r3, #41	; 0x29
 80054e2:	d111      	bne.n	8005508 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2221      	movs	r2, #33	; 0x21
 80054f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2228      	movs	r2, #40	; 0x28
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff fa4d 	bl	80049a2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005508:	bf00      	nop
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d011      	beq.n	8005546 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	781a      	ldrb	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d02c      	beq.n	80055c6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d114      	bne.n	80055c6 <I2C_SlaveReceive_RXNE+0x74>
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b2a      	cmp	r3, #42	; 0x2a
 80055a0:	d111      	bne.n	80055c6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2222      	movs	r2, #34	; 0x22
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2228      	movs	r2, #40	; 0x28
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff f9f8 	bl	80049b6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055c6:	bf00      	nop
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d012      	beq.n	8005606 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800561c:	2300      	movs	r3, #0
 800561e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005626:	b2db      	uxtb	r3, r3
 8005628:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800562c:	2b28      	cmp	r3, #40	; 0x28
 800562e:	d127      	bne.n	8005680 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800563e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	089b      	lsrs	r3, r3, #2
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	09db      	lsrs	r3, r3, #7
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	81bb      	strh	r3, [r7, #12]
 8005662:	e002      	b.n	800566a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005672:	89ba      	ldrh	r2, [r7, #12]
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff f9a6 	bl	80049ca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800567e:	e008      	b.n	8005692 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0202 	mvn.w	r2, #2
 8005688:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80056bc:	2300      	movs	r3, #0
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f8:	d172      	bne.n	80057e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b22      	cmp	r3, #34	; 0x22
 80056fe:	d002      	beq.n	8005706 <I2C_Slave_STOPF+0x6a>
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	2b2a      	cmp	r3, #42	; 0x2a
 8005704:	d135      	bne.n	8005772 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	b29a      	uxth	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d005      	beq.n	800572a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f043 0204 	orr.w	r2, r3, #4
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005738:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	4618      	mov	r0, r3
 8005740:	f7fd fad6 	bl	8002cf0 <HAL_DMA_GetState>
 8005744:	4603      	mov	r3, r0
 8005746:	2b01      	cmp	r3, #1
 8005748:	d049      	beq.n	80057de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	4a69      	ldr	r2, [pc, #420]	; (80058f4 <I2C_Slave_STOPF+0x258>)
 8005750:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	4618      	mov	r0, r3
 8005758:	f7fd f91e 	bl	8002998 <HAL_DMA_Abort_IT>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d03d      	beq.n	80057de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800576c:	4610      	mov	r0, r2
 800576e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005770:	e035      	b.n	80057de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	b29a      	uxth	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f043 0204 	orr.w	r2, r3, #4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fd faa0 	bl	8002cf0 <HAL_DMA_GetState>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d014      	beq.n	80057e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ba:	4a4e      	ldr	r2, [pc, #312]	; (80058f4 <I2C_Slave_STOPF+0x258>)
 80057bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fd f8e8 	bl	8002998 <HAL_DMA_Abort_IT>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d008      	beq.n	80057e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057d8:	4610      	mov	r0, r2
 80057da:	4798      	blx	r3
 80057dc:	e000      	b.n	80057e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d03e      	beq.n	8005868 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d112      	bne.n	800581e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d112      	bne.n	8005852 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d005      	beq.n	8005868 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	f043 0204 	orr.w	r2, r3, #4
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f8b3 	bl	80059dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005876:	e039      	b.n	80058ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	2b2a      	cmp	r3, #42	; 0x2a
 800587c:	d109      	bne.n	8005892 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2228      	movs	r2, #40	; 0x28
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff f892 	bl	80049b6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b28      	cmp	r3, #40	; 0x28
 800589c:	d111      	bne.n	80058c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <I2C_Slave_STOPF+0x25c>)
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff f893 	bl	80049e6 <HAL_I2C_ListenCpltCallback>
}
 80058c0:	e014      	b.n	80058ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	2b22      	cmp	r3, #34	; 0x22
 80058c8:	d002      	beq.n	80058d0 <I2C_Slave_STOPF+0x234>
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b22      	cmp	r3, #34	; 0x22
 80058ce:	d10d      	bne.n	80058ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff f865 	bl	80049b6 <HAL_I2C_SlaveRxCpltCallback>
}
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	08005ed5 	.word	0x08005ed5
 80058f8:	ffff0000 	.word	0xffff0000

080058fc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b08      	cmp	r3, #8
 8005916:	d002      	beq.n	800591e <I2C_Slave_AF+0x22>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b20      	cmp	r3, #32
 800591c:	d129      	bne.n	8005972 <I2C_Slave_AF+0x76>
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b28      	cmp	r3, #40	; 0x28
 8005922:	d126      	bne.n	8005972 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a2c      	ldr	r2, [pc, #176]	; (80059d8 <I2C_Slave_AF+0xdc>)
 8005928:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005938:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005942:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005952:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff f83b 	bl	80049e6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005970:	e02e      	b.n	80059d0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	2b21      	cmp	r3, #33	; 0x21
 8005976:	d126      	bne.n	80059c6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <I2C_Slave_AF+0xdc>)
 800597c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2221      	movs	r2, #33	; 0x21
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059bc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fe ffef 	bl	80049a2 <HAL_I2C_SlaveTxCpltCallback>
}
 80059c4:	e004      	b.n	80059d0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059ce:	615a      	str	r2, [r3, #20]
}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	ffff0000 	.word	0xffff0000

080059dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d10a      	bne.n	8005a0e <I2C_ITError+0x32>
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b22      	cmp	r3, #34	; 0x22
 80059fc:	d107      	bne.n	8005a0e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a0c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a14:	2b28      	cmp	r3, #40	; 0x28
 8005a16:	d107      	bne.n	8005a28 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2228      	movs	r2, #40	; 0x28
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a26:	e015      	b.n	8005a54 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a36:	d006      	beq.n	8005a46 <I2C_ITError+0x6a>
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	2b60      	cmp	r3, #96	; 0x60
 8005a3c:	d003      	beq.n	8005a46 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a62:	d162      	bne.n	8005b2a <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a72:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d020      	beq.n	8005ac4 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a86:	4a6a      	ldr	r2, [pc, #424]	; (8005c30 <I2C_ITError+0x254>)
 8005a88:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fc ff82 	bl	8002998 <HAL_DMA_Abort_IT>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8089 	beq.w	8005bae <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4798      	blx	r3
 8005ac2:	e074      	b.n	8005bae <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	4a59      	ldr	r2, [pc, #356]	; (8005c30 <I2C_ITError+0x254>)
 8005aca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fc ff61 	bl	8002998 <HAL_DMA_Abort_IT>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d068      	beq.n	8005bae <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	d10b      	bne.n	8005b02 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0201 	bic.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b24:	4610      	mov	r0, r2
 8005b26:	4798      	blx	r3
 8005b28:	e041      	b.n	8005bae <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b60      	cmp	r3, #96	; 0x60
 8005b34:	d125      	bne.n	8005b82 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b40      	cmp	r3, #64	; 0x40
 8005b50:	d10b      	bne.n	8005b6a <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0201 	bic.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fe ff51 	bl	8004a22 <HAL_I2C_AbortCpltCallback>
 8005b80:	e015      	b.n	8005bae <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8c:	2b40      	cmp	r3, #64	; 0x40
 8005b8e:	d10b      	bne.n	8005ba8 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7fe ff30 	bl	8004a0e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10e      	bne.n	8005bdc <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d104      	bne.n	8005bdc <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d113      	bne.n	8005c28 <I2C_ITError+0x24c>
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
 8005c02:	2b28      	cmp	r3, #40	; 0x28
 8005c04:	d110      	bne.n	8005c28 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a0a      	ldr	r2, [pc, #40]	; (8005c34 <I2C_ITError+0x258>)
 8005c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fe fedf 	bl	80049e6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	08005ed5 	.word	0x08005ed5
 8005c34:	ffff0000 	.word	0xffff0000

08005c38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	607a      	str	r2, [r7, #4]
 8005c42:	603b      	str	r3, [r7, #0]
 8005c44:	460b      	mov	r3, r1
 8005c46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d006      	beq.n	8005c62 <I2C_MasterRequestWrite+0x2a>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d003      	beq.n	8005c62 <I2C_MasterRequestWrite+0x2a>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c60:	d108      	bne.n	8005c74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	e00b      	b.n	8005c8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	2b12      	cmp	r3, #18
 8005c7a:	d107      	bne.n	8005c8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f99a 	bl	8005fd2 <I2C_WaitOnFlagUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00c      	beq.n	8005cbe <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e035      	b.n	8005d2a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cc6:	d108      	bne.n	8005cda <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cc8:	897b      	ldrh	r3, [r7, #10]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cd6:	611a      	str	r2, [r3, #16]
 8005cd8:	e01b      	b.n	8005d12 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cda:	897b      	ldrh	r3, [r7, #10]
 8005cdc:	11db      	asrs	r3, r3, #7
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f003 0306 	and.w	r3, r3, #6
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	f063 030f 	orn	r3, r3, #15
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	490f      	ldr	r1, [pc, #60]	; (8005d34 <I2C_MasterRequestWrite+0xfc>)
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f9c1 	bl	8006080 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e010      	b.n	8005d2a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d08:	897b      	ldrh	r3, [r7, #10]
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4908      	ldr	r1, [pc, #32]	; (8005d38 <I2C_MasterRequestWrite+0x100>)
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f9b1 	bl	8006080 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e000      	b.n	8005d2a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	00010008 	.word	0x00010008
 8005d38:	00010002 	.word	0x00010002

08005d3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d006      	beq.n	8005d76 <I2C_MasterRequestRead+0x3a>
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d003      	beq.n	8005d76 <I2C_MasterRequestRead+0x3a>
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d74:	d108      	bne.n	8005d88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	e00b      	b.n	8005da0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	2b11      	cmp	r3, #17
 8005d8e:	d107      	bne.n	8005da0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f910 	bl	8005fd2 <I2C_WaitOnFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00c      	beq.n	8005dd2 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e078      	b.n	8005ec4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dda:	d108      	bne.n	8005dee <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ddc:	897b      	ldrh	r3, [r7, #10]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	611a      	str	r2, [r3, #16]
 8005dec:	e05e      	b.n	8005eac <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005dee:	897b      	ldrh	r3, [r7, #10]
 8005df0:	11db      	asrs	r3, r3, #7
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f003 0306 	and.w	r3, r3, #6
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	f063 030f 	orn	r3, r3, #15
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	4930      	ldr	r1, [pc, #192]	; (8005ecc <I2C_MasterRequestRead+0x190>)
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f937 	bl	8006080 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e053      	b.n	8005ec4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e1c:	897b      	ldrh	r3, [r7, #10]
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	4929      	ldr	r1, [pc, #164]	; (8005ed0 <I2C_MasterRequestRead+0x194>)
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f927 	bl	8006080 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e043      	b.n	8005ec4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	613b      	str	r3, [r7, #16]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e60:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f8af 	bl	8005fd2 <I2C_WaitOnFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00c      	beq.n	8005e94 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e8e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e017      	b.n	8005ec4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e94:	897b      	ldrh	r3, [r7, #10]
 8005e96:	11db      	asrs	r3, r3, #7
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	f003 0306 	and.w	r3, r3, #6
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f063 030e 	orn	r3, r3, #14
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4907      	ldr	r1, [pc, #28]	; (8005ed0 <I2C_MasterRequestRead+0x194>)
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f8e4 	bl	8006080 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	00010008 	.word	0x00010008
 8005ed0:	00010002 	.word	0x00010002

08005ed4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	2200      	movs	r2, #0
 8005f08:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f18:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0201 	bic.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b60      	cmp	r3, #96	; 0x60
 8005f5a:	d10e      	bne.n	8005f7a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7fe fd55 	bl	8004a22 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f78:	e027      	b.n	8005fca <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f7a:	7afb      	ldrb	r3, [r7, #11]
 8005f7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f80:	2b28      	cmp	r3, #40	; 0x28
 8005f82:	d117      	bne.n	8005fb4 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fa2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2228      	movs	r2, #40	; 0x28
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fb2:	e007      	b.n	8005fc4 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7fe fd22 	bl	8004a0e <HAL_I2C_ErrorCallback>
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe2:	e025      	b.n	8006030 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fea:	d021      	beq.n	8006030 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fec:	f7fc fa8e 	bl	800250c <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d116      	bne.n	8006030 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e023      	b.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	0c1b      	lsrs	r3, r3, #16
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b01      	cmp	r3, #1
 8006038:	d10d      	bne.n	8006056 <I2C_WaitOnFlagUntilTimeout+0x84>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	43da      	mvns	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	e00c      	b.n	8006070 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	43da      	mvns	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4013      	ands	r3, r2
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	429a      	cmp	r2, r3
 8006074:	d0b6      	beq.n	8005fe4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800608e:	e051      	b.n	8006134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800609e:	d123      	bne.n	80060e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	f043 0204 	orr.w	r2, r3, #4
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e046      	b.n	8006176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d021      	beq.n	8006134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f0:	f7fc fa0c 	bl	800250c <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d302      	bcc.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d116      	bne.n	8006134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	f043 0220 	orr.w	r2, r3, #32
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e020      	b.n	8006176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	0c1b      	lsrs	r3, r3, #16
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	d10c      	bne.n	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	43da      	mvns	r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4013      	ands	r3, r2
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	bf14      	ite	ne
 8006150:	2301      	movne	r3, #1
 8006152:	2300      	moveq	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	e00b      	b.n	8006170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	43da      	mvns	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4013      	ands	r3, r2
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	bf14      	ite	ne
 800616a:	2301      	movne	r3, #1
 800616c:	2300      	moveq	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d18d      	bne.n	8006090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800618a:	e02d      	b.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f8ce 	bl	800632e <I2C_IsAcknowledgeFailed>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e02d      	b.n	80061f8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	d021      	beq.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a4:	f7fc f9b2 	bl	800250c <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d302      	bcc.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d116      	bne.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	f043 0220 	orr.w	r2, r3, #32
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e007      	b.n	80061f8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f2:	2b80      	cmp	r3, #128	; 0x80
 80061f4:	d1ca      	bne.n	800618c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800620c:	e02d      	b.n	800626a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f88d 	bl	800632e <I2C_IsAcknowledgeFailed>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e02d      	b.n	800627a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d021      	beq.n	800626a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006226:	f7fc f971 	bl	800250c <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	429a      	cmp	r2, r3
 8006234:	d302      	bcc.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d116      	bne.n	800626a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2220      	movs	r2, #32
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f043 0220 	orr.w	r2, r3, #32
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e007      	b.n	800627a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b04      	cmp	r3, #4
 8006276:	d1ca      	bne.n	800620e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800628e:	e042      	b.n	8006316 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b10      	cmp	r3, #16
 800629c:	d119      	bne.n	80062d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f06f 0210 	mvn.w	r2, #16
 80062a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e029      	b.n	8006326 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d2:	f7fc f91b 	bl	800250c <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d302      	bcc.n	80062e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d116      	bne.n	8006316 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f043 0220 	orr.w	r2, r3, #32
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e007      	b.n	8006326 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006320:	2b40      	cmp	r3, #64	; 0x40
 8006322:	d1b5      	bne.n	8006290 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006344:	d11b      	bne.n	800637e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800634e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	f043 0204 	orr.w	r2, r3, #4
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800639c:	d103      	bne.n	80063a6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80063a4:	e007      	b.n	80063b6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063ae:	d102      	bne.n	80063b6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2208      	movs	r2, #8
 80063b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d129      	bne.n	800642c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2224      	movs	r2, #36	; 0x24
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0210 	bic.w	r2, r2, #16
 80063fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0201 	orr.w	r2, r2, #1
 800641e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	e000      	b.n	800642e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800642c:	2302      	movs	r3, #2
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b20      	cmp	r3, #32
 8006452:	d12a      	bne.n	80064aa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2224      	movs	r2, #36	; 0x24
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006474:	89fb      	ldrh	r3, [r7, #14]
 8006476:	f023 030f 	bic.w	r3, r3, #15
 800647a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	b29a      	uxth	r2, r3
 8006480:	89fb      	ldrh	r3, [r7, #14]
 8006482:	4313      	orrs	r3, r2
 8006484:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	89fa      	ldrh	r2, [r7, #14]
 800648c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0201 	orr.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	e000      	b.n	80064ac <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80064aa:	2302      	movs	r3, #2
  }
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80064b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ba:	b08f      	sub	sp, #60	; 0x3c
 80064bc:	af0a      	add	r7, sp, #40	; 0x28
 80064be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e10f      	b.n	80066ea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d106      	bne.n	80064ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7fb ff27 	bl	8002338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2203      	movs	r2, #3
 80064ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f002 fcd4 	bl	8008eb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	603b      	str	r3, [r7, #0]
 8006514:	687e      	ldr	r6, [r7, #4]
 8006516:	466d      	mov	r5, sp
 8006518:	f106 0410 	add.w	r4, r6, #16
 800651c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800651e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006524:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006528:	e885 0003 	stmia.w	r5, {r0, r1}
 800652c:	1d33      	adds	r3, r6, #4
 800652e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006530:	6838      	ldr	r0, [r7, #0]
 8006532:	f002 fc5f 	bl	8008df4 <USB_CoreInit>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0d0      	b.n	80066ea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2100      	movs	r1, #0
 800654e:	4618      	mov	r0, r3
 8006550:	f002 fcc2 	bl	8008ed8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
 8006558:	e04a      	b.n	80065f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800655a:	7bfa      	ldrb	r2, [r7, #15]
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	440b      	add	r3, r1
 8006568:	333d      	adds	r3, #61	; 0x3d
 800656a:	2201      	movs	r2, #1
 800656c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800656e:	7bfa      	ldrb	r2, [r7, #15]
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	333c      	adds	r3, #60	; 0x3c
 800657e:	7bfa      	ldrb	r2, [r7, #15]
 8006580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006582:	7bfa      	ldrb	r2, [r7, #15]
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	b298      	uxth	r0, r3
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	1a9b      	subs	r3, r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	3342      	adds	r3, #66	; 0x42
 8006596:	4602      	mov	r2, r0
 8006598:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800659a:	7bfa      	ldrb	r2, [r7, #15]
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	1a9b      	subs	r3, r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	333f      	adds	r3, #63	; 0x3f
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80065ae:	7bfa      	ldrb	r2, [r7, #15]
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	1a9b      	subs	r3, r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	3344      	adds	r3, #68	; 0x44
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80065c2:	7bfa      	ldrb	r2, [r7, #15]
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	3348      	adds	r3, #72	; 0x48
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065d6:	7bfa      	ldrb	r2, [r7, #15]
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	4613      	mov	r3, r2
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	1a9b      	subs	r3, r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	440b      	add	r3, r1
 80065e4:	3350      	adds	r3, #80	; 0x50
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	3301      	adds	r3, #1
 80065ee:	73fb      	strb	r3, [r7, #15]
 80065f0:	7bfa      	ldrb	r2, [r7, #15]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d3af      	bcc.n	800655a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]
 80065fe:	e044      	b.n	800668a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006600:	7bfa      	ldrb	r2, [r7, #15]
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	4613      	mov	r3, r2
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	1a9b      	subs	r3, r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006612:	2200      	movs	r2, #0
 8006614:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006616:	7bfa      	ldrb	r2, [r7, #15]
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	1a9b      	subs	r3, r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006628:	7bfa      	ldrb	r2, [r7, #15]
 800662a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800662c:	7bfa      	ldrb	r2, [r7, #15]
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	4613      	mov	r3, r2
 8006632:	00db      	lsls	r3, r3, #3
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	440b      	add	r3, r1
 800663a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800663e:	2200      	movs	r2, #0
 8006640:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006642:	7bfa      	ldrb	r2, [r7, #15]
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	440b      	add	r3, r1
 8006650:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006658:	7bfa      	ldrb	r2, [r7, #15]
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	4613      	mov	r3, r2
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	440b      	add	r3, r1
 8006666:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800666e:	7bfa      	ldrb	r2, [r7, #15]
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	4613      	mov	r3, r2
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	440b      	add	r3, r1
 800667c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	3301      	adds	r3, #1
 8006688:	73fb      	strb	r3, [r7, #15]
 800668a:	7bfa      	ldrb	r2, [r7, #15]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	429a      	cmp	r2, r3
 8006692:	d3b5      	bcc.n	8006600 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	603b      	str	r3, [r7, #0]
 800669a:	687e      	ldr	r6, [r7, #4]
 800669c:	466d      	mov	r5, sp
 800669e:	f106 0410 	add.w	r4, r6, #16
 80066a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80066b2:	1d33      	adds	r3, r6, #4
 80066b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066b6:	6838      	ldr	r0, [r7, #0]
 80066b8:	f002 fc38 	bl	8008f2c <USB_DevInit>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2202      	movs	r2, #2
 80066c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e00d      	b.n	80066ea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f002 fde7 	bl	80092b6 <USB_DevDisconnect>

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080066f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e25b      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d075      	beq.n	80067fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006712:	4ba3      	ldr	r3, [pc, #652]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 030c 	and.w	r3, r3, #12
 800671a:	2b04      	cmp	r3, #4
 800671c:	d00c      	beq.n	8006738 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800671e:	4ba0      	ldr	r3, [pc, #640]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006726:	2b08      	cmp	r3, #8
 8006728:	d112      	bne.n	8006750 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800672a:	4b9d      	ldr	r3, [pc, #628]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006736:	d10b      	bne.n	8006750 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006738:	4b99      	ldr	r3, [pc, #612]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d05b      	beq.n	80067fc <HAL_RCC_OscConfig+0x108>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d157      	bne.n	80067fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e236      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006758:	d106      	bne.n	8006768 <HAL_RCC_OscConfig+0x74>
 800675a:	4b91      	ldr	r3, [pc, #580]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a90      	ldr	r2, [pc, #576]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	e01d      	b.n	80067a4 <HAL_RCC_OscConfig+0xb0>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006770:	d10c      	bne.n	800678c <HAL_RCC_OscConfig+0x98>
 8006772:	4b8b      	ldr	r3, [pc, #556]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a8a      	ldr	r2, [pc, #552]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	4b88      	ldr	r3, [pc, #544]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a87      	ldr	r2, [pc, #540]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	e00b      	b.n	80067a4 <HAL_RCC_OscConfig+0xb0>
 800678c:	4b84      	ldr	r3, [pc, #528]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a83      	ldr	r2, [pc, #524]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	4b81      	ldr	r3, [pc, #516]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a80      	ldr	r2, [pc, #512]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 800679e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d013      	beq.n	80067d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ac:	f7fb feae 	bl	800250c <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067b4:	f7fb feaa 	bl	800250c <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b64      	cmp	r3, #100	; 0x64
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e1fb      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067c6:	4b76      	ldr	r3, [pc, #472]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0f0      	beq.n	80067b4 <HAL_RCC_OscConfig+0xc0>
 80067d2:	e014      	b.n	80067fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d4:	f7fb fe9a 	bl	800250c <HAL_GetTick>
 80067d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067da:	e008      	b.n	80067ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067dc:	f7fb fe96 	bl	800250c <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b64      	cmp	r3, #100	; 0x64
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e1e7      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ee:	4b6c      	ldr	r3, [pc, #432]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1f0      	bne.n	80067dc <HAL_RCC_OscConfig+0xe8>
 80067fa:	e000      	b.n	80067fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d063      	beq.n	80068d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800680a:	4b65      	ldr	r3, [pc, #404]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 030c 	and.w	r3, r3, #12
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006816:	4b62      	ldr	r3, [pc, #392]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800681e:	2b08      	cmp	r3, #8
 8006820:	d11c      	bne.n	800685c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006822:	4b5f      	ldr	r3, [pc, #380]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d116      	bne.n	800685c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800682e:	4b5c      	ldr	r3, [pc, #368]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <HAL_RCC_OscConfig+0x152>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d001      	beq.n	8006846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e1bb      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006846:	4b56      	ldr	r3, [pc, #344]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	4952      	ldr	r1, [pc, #328]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006856:	4313      	orrs	r3, r2
 8006858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800685a:	e03a      	b.n	80068d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d020      	beq.n	80068a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006864:	4b4f      	ldr	r3, [pc, #316]	; (80069a4 <HAL_RCC_OscConfig+0x2b0>)
 8006866:	2201      	movs	r2, #1
 8006868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686a:	f7fb fe4f 	bl	800250c <HAL_GetTick>
 800686e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006870:	e008      	b.n	8006884 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006872:	f7fb fe4b 	bl	800250c <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d901      	bls.n	8006884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e19c      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006884:	4b46      	ldr	r3, [pc, #280]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0f0      	beq.n	8006872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006890:	4b43      	ldr	r3, [pc, #268]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	4940      	ldr	r1, [pc, #256]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	600b      	str	r3, [r1, #0]
 80068a4:	e015      	b.n	80068d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068a6:	4b3f      	ldr	r3, [pc, #252]	; (80069a4 <HAL_RCC_OscConfig+0x2b0>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ac:	f7fb fe2e 	bl	800250c <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068b4:	f7fb fe2a 	bl	800250c <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e17b      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068c6:	4b36      	ldr	r3, [pc, #216]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f0      	bne.n	80068b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d030      	beq.n	8006940 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d016      	beq.n	8006914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068e6:	4b30      	ldr	r3, [pc, #192]	; (80069a8 <HAL_RCC_OscConfig+0x2b4>)
 80068e8:	2201      	movs	r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ec:	f7fb fe0e 	bl	800250c <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068f4:	f7fb fe0a 	bl	800250c <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e15b      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006906:	4b26      	ldr	r3, [pc, #152]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0f0      	beq.n	80068f4 <HAL_RCC_OscConfig+0x200>
 8006912:	e015      	b.n	8006940 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006914:	4b24      	ldr	r3, [pc, #144]	; (80069a8 <HAL_RCC_OscConfig+0x2b4>)
 8006916:	2200      	movs	r2, #0
 8006918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800691a:	f7fb fdf7 	bl	800250c <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006922:	f7fb fdf3 	bl	800250c <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e144      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006934:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1f0      	bne.n	8006922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80a0 	beq.w	8006a8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800694e:	2300      	movs	r3, #0
 8006950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006952:	4b13      	ldr	r3, [pc, #76]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10f      	bne.n	800697e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800695e:	2300      	movs	r3, #0
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	4a0e      	ldr	r2, [pc, #56]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800696c:	6413      	str	r3, [r2, #64]	; 0x40
 800696e:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <HAL_RCC_OscConfig+0x2ac>)
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006976:	60bb      	str	r3, [r7, #8]
 8006978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800697a:	2301      	movs	r3, #1
 800697c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800697e:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <HAL_RCC_OscConfig+0x2b8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006986:	2b00      	cmp	r3, #0
 8006988:	d121      	bne.n	80069ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800698a:	4b08      	ldr	r3, [pc, #32]	; (80069ac <HAL_RCC_OscConfig+0x2b8>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a07      	ldr	r2, [pc, #28]	; (80069ac <HAL_RCC_OscConfig+0x2b8>)
 8006990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006996:	f7fb fdb9 	bl	800250c <HAL_GetTick>
 800699a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800699c:	e011      	b.n	80069c2 <HAL_RCC_OscConfig+0x2ce>
 800699e:	bf00      	nop
 80069a0:	40023800 	.word	0x40023800
 80069a4:	42470000 	.word	0x42470000
 80069a8:	42470e80 	.word	0x42470e80
 80069ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069b0:	f7fb fdac 	bl	800250c <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e0fd      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c2:	4b81      	ldr	r3, [pc, #516]	; (8006bc8 <HAL_RCC_OscConfig+0x4d4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0f0      	beq.n	80069b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d106      	bne.n	80069e4 <HAL_RCC_OscConfig+0x2f0>
 80069d6:	4b7d      	ldr	r3, [pc, #500]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 80069d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069da:	4a7c      	ldr	r2, [pc, #496]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 80069dc:	f043 0301 	orr.w	r3, r3, #1
 80069e0:	6713      	str	r3, [r2, #112]	; 0x70
 80069e2:	e01c      	b.n	8006a1e <HAL_RCC_OscConfig+0x32a>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b05      	cmp	r3, #5
 80069ea:	d10c      	bne.n	8006a06 <HAL_RCC_OscConfig+0x312>
 80069ec:	4b77      	ldr	r3, [pc, #476]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 80069ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f0:	4a76      	ldr	r2, [pc, #472]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 80069f2:	f043 0304 	orr.w	r3, r3, #4
 80069f6:	6713      	str	r3, [r2, #112]	; 0x70
 80069f8:	4b74      	ldr	r3, [pc, #464]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 80069fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fc:	4a73      	ldr	r2, [pc, #460]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 80069fe:	f043 0301 	orr.w	r3, r3, #1
 8006a02:	6713      	str	r3, [r2, #112]	; 0x70
 8006a04:	e00b      	b.n	8006a1e <HAL_RCC_OscConfig+0x32a>
 8006a06:	4b71      	ldr	r3, [pc, #452]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	4a70      	ldr	r2, [pc, #448]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	6713      	str	r3, [r2, #112]	; 0x70
 8006a12:	4b6e      	ldr	r3, [pc, #440]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a16:	4a6d      	ldr	r2, [pc, #436]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006a18:	f023 0304 	bic.w	r3, r3, #4
 8006a1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d015      	beq.n	8006a52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a26:	f7fb fd71 	bl	800250c <HAL_GetTick>
 8006a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2c:	e00a      	b.n	8006a44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a2e:	f7fb fd6d 	bl	800250c <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e0bc      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a44:	4b61      	ldr	r3, [pc, #388]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0ee      	beq.n	8006a2e <HAL_RCC_OscConfig+0x33a>
 8006a50:	e014      	b.n	8006a7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a52:	f7fb fd5b 	bl	800250c <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a58:	e00a      	b.n	8006a70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a5a:	f7fb fd57 	bl	800250c <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e0a6      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a70:	4b56      	ldr	r3, [pc, #344]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1ee      	bne.n	8006a5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d105      	bne.n	8006a8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a82:	4b52      	ldr	r3, [pc, #328]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	4a51      	ldr	r2, [pc, #324]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 8092 	beq.w	8006bbc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a98:	4b4c      	ldr	r3, [pc, #304]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 030c 	and.w	r3, r3, #12
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d05c      	beq.n	8006b5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d141      	bne.n	8006b30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aac:	4b48      	ldr	r3, [pc, #288]	; (8006bd0 <HAL_RCC_OscConfig+0x4dc>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab2:	f7fb fd2b 	bl	800250c <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aba:	f7fb fd27 	bl	800250c <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e078      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006acc:	4b3f      	ldr	r3, [pc, #252]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1f0      	bne.n	8006aba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	019b      	lsls	r3, r3, #6
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	085b      	lsrs	r3, r3, #1
 8006af0:	3b01      	subs	r3, #1
 8006af2:	041b      	lsls	r3, r3, #16
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	061b      	lsls	r3, r3, #24
 8006afc:	4933      	ldr	r1, [pc, #204]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b02:	4b33      	ldr	r3, [pc, #204]	; (8006bd0 <HAL_RCC_OscConfig+0x4dc>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b08:	f7fb fd00 	bl	800250c <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b10:	f7fb fcfc 	bl	800250c <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e04d      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b22:	4b2a      	ldr	r3, [pc, #168]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0f0      	beq.n	8006b10 <HAL_RCC_OscConfig+0x41c>
 8006b2e:	e045      	b.n	8006bbc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b30:	4b27      	ldr	r3, [pc, #156]	; (8006bd0 <HAL_RCC_OscConfig+0x4dc>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b36:	f7fb fce9 	bl	800250c <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b3e:	f7fb fce5 	bl	800250c <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e036      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b50:	4b1e      	ldr	r3, [pc, #120]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f0      	bne.n	8006b3e <HAL_RCC_OscConfig+0x44a>
 8006b5c:	e02e      	b.n	8006bbc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e029      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b6a:	4b18      	ldr	r3, [pc, #96]	; (8006bcc <HAL_RCC_OscConfig+0x4d8>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d11c      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d115      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b92:	4013      	ands	r3, r2
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d10d      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d106      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d001      	beq.n	8006bbc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	40007000 	.word	0x40007000
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	42470060 	.word	0x42470060

08006bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e0cc      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006be8:	4b68      	ldr	r3, [pc, #416]	; (8006d8c <HAL_RCC_ClockConfig+0x1b8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 030f 	and.w	r3, r3, #15
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d90c      	bls.n	8006c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bf6:	4b65      	ldr	r3, [pc, #404]	; (8006d8c <HAL_RCC_ClockConfig+0x1b8>)
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfe:	4b63      	ldr	r3, [pc, #396]	; (8006d8c <HAL_RCC_ClockConfig+0x1b8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e0b8      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d020      	beq.n	8006c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c28:	4b59      	ldr	r3, [pc, #356]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4a58      	ldr	r2, [pc, #352]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0308 	and.w	r3, r3, #8
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c40:	4b53      	ldr	r3, [pc, #332]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	4a52      	ldr	r2, [pc, #328]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c4c:	4b50      	ldr	r3, [pc, #320]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	494d      	ldr	r1, [pc, #308]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d044      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d107      	bne.n	8006c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c72:	4b47      	ldr	r3, [pc, #284]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d119      	bne.n	8006cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e07f      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d003      	beq.n	8006c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d107      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c92:	4b3f      	ldr	r3, [pc, #252]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d109      	bne.n	8006cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e06f      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ca2:	4b3b      	ldr	r3, [pc, #236]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e067      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cb2:	4b37      	ldr	r3, [pc, #220]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f023 0203 	bic.w	r2, r3, #3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	4934      	ldr	r1, [pc, #208]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cc4:	f7fb fc22 	bl	800250c <HAL_GetTick>
 8006cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cca:	e00a      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ccc:	f7fb fc1e 	bl	800250c <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e04f      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ce2:	4b2b      	ldr	r3, [pc, #172]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 020c 	and.w	r2, r3, #12
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d1eb      	bne.n	8006ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cf4:	4b25      	ldr	r3, [pc, #148]	; (8006d8c <HAL_RCC_ClockConfig+0x1b8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d20c      	bcs.n	8006d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d02:	4b22      	ldr	r3, [pc, #136]	; (8006d8c <HAL_RCC_ClockConfig+0x1b8>)
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d0a:	4b20      	ldr	r3, [pc, #128]	; (8006d8c <HAL_RCC_ClockConfig+0x1b8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d001      	beq.n	8006d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e032      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d008      	beq.n	8006d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d28:	4b19      	ldr	r3, [pc, #100]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	4916      	ldr	r1, [pc, #88]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0308 	and.w	r3, r3, #8
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d009      	beq.n	8006d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d46:	4b12      	ldr	r3, [pc, #72]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	490e      	ldr	r1, [pc, #56]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d5a:	f000 f821 	bl	8006da0 <HAL_RCC_GetSysClockFreq>
 8006d5e:	4601      	mov	r1, r0
 8006d60:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	091b      	lsrs	r3, r3, #4
 8006d66:	f003 030f 	and.w	r3, r3, #15
 8006d6a:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <HAL_RCC_ClockConfig+0x1c0>)
 8006d6c:	5cd3      	ldrb	r3, [r2, r3]
 8006d6e:	fa21 f303 	lsr.w	r3, r1, r3
 8006d72:	4a09      	ldr	r2, [pc, #36]	; (8006d98 <HAL_RCC_ClockConfig+0x1c4>)
 8006d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d76:	4b09      	ldr	r3, [pc, #36]	; (8006d9c <HAL_RCC_ClockConfig+0x1c8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fb fb82 	bl	8002484 <HAL_InitTick>

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	40023c00 	.word	0x40023c00
 8006d90:	40023800 	.word	0x40023800
 8006d94:	0800efcc 	.word	0x0800efcc
 8006d98:	20000000 	.word	0x20000000
 8006d9c:	20000004 	.word	0x20000004

08006da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	607b      	str	r3, [r7, #4]
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	2300      	movs	r3, #0
 8006db0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006db6:	4b63      	ldr	r3, [pc, #396]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 030c 	and.w	r3, r3, #12
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d007      	beq.n	8006dd2 <HAL_RCC_GetSysClockFreq+0x32>
 8006dc2:	2b08      	cmp	r3, #8
 8006dc4:	d008      	beq.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x38>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f040 80b4 	bne.w	8006f34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dcc:	4b5e      	ldr	r3, [pc, #376]	; (8006f48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006dce:	60bb      	str	r3, [r7, #8]
       break;
 8006dd0:	e0b3      	b.n	8006f3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dd2:	4b5e      	ldr	r3, [pc, #376]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006dd4:	60bb      	str	r3, [r7, #8]
      break;
 8006dd6:	e0b0      	b.n	8006f3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dd8:	4b5a      	ldr	r3, [pc, #360]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006de2:	4b58      	ldr	r3, [pc, #352]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d04a      	beq.n	8006e84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dee:	4b55      	ldr	r3, [pc, #340]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	099b      	lsrs	r3, r3, #6
 8006df4:	f04f 0400 	mov.w	r4, #0
 8006df8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	ea03 0501 	and.w	r5, r3, r1
 8006e04:	ea04 0602 	and.w	r6, r4, r2
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4632      	mov	r2, r6
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	f04f 0400 	mov.w	r4, #0
 8006e14:	0154      	lsls	r4, r2, #5
 8006e16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e1a:	014b      	lsls	r3, r1, #5
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4622      	mov	r2, r4
 8006e20:	1b49      	subs	r1, r1, r5
 8006e22:	eb62 0206 	sbc.w	r2, r2, r6
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	f04f 0400 	mov.w	r4, #0
 8006e2e:	0194      	lsls	r4, r2, #6
 8006e30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e34:	018b      	lsls	r3, r1, #6
 8006e36:	1a5b      	subs	r3, r3, r1
 8006e38:	eb64 0402 	sbc.w	r4, r4, r2
 8006e3c:	f04f 0100 	mov.w	r1, #0
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	00e2      	lsls	r2, r4, #3
 8006e46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e4a:	00d9      	lsls	r1, r3, #3
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4614      	mov	r4, r2
 8006e50:	195b      	adds	r3, r3, r5
 8006e52:	eb44 0406 	adc.w	r4, r4, r6
 8006e56:	f04f 0100 	mov.w	r1, #0
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	0262      	lsls	r2, r4, #9
 8006e60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006e64:	0259      	lsls	r1, r3, #9
 8006e66:	460b      	mov	r3, r1
 8006e68:	4614      	mov	r4, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f04f 0400 	mov.w	r4, #0
 8006e74:	461a      	mov	r2, r3
 8006e76:	4623      	mov	r3, r4
 8006e78:	f7f9 fef6 	bl	8000c68 <__aeabi_uldivmod>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	460c      	mov	r4, r1
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	e049      	b.n	8006f18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e84:	4b2f      	ldr	r3, [pc, #188]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	099b      	lsrs	r3, r3, #6
 8006e8a:	f04f 0400 	mov.w	r4, #0
 8006e8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e92:	f04f 0200 	mov.w	r2, #0
 8006e96:	ea03 0501 	and.w	r5, r3, r1
 8006e9a:	ea04 0602 	and.w	r6, r4, r2
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4632      	mov	r2, r6
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	f04f 0400 	mov.w	r4, #0
 8006eaa:	0154      	lsls	r4, r2, #5
 8006eac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006eb0:	014b      	lsls	r3, r1, #5
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	1b49      	subs	r1, r1, r5
 8006eb8:	eb62 0206 	sbc.w	r2, r2, r6
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	f04f 0400 	mov.w	r4, #0
 8006ec4:	0194      	lsls	r4, r2, #6
 8006ec6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006eca:	018b      	lsls	r3, r1, #6
 8006ecc:	1a5b      	subs	r3, r3, r1
 8006ece:	eb64 0402 	sbc.w	r4, r4, r2
 8006ed2:	f04f 0100 	mov.w	r1, #0
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	00e2      	lsls	r2, r4, #3
 8006edc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006ee0:	00d9      	lsls	r1, r3, #3
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	195b      	adds	r3, r3, r5
 8006ee8:	eb44 0406 	adc.w	r4, r4, r6
 8006eec:	f04f 0100 	mov.w	r1, #0
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	02a2      	lsls	r2, r4, #10
 8006ef6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006efa:	0299      	lsls	r1, r3, #10
 8006efc:	460b      	mov	r3, r1
 8006efe:	4614      	mov	r4, r2
 8006f00:	4618      	mov	r0, r3
 8006f02:	4621      	mov	r1, r4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f04f 0400 	mov.w	r4, #0
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	f7f9 feab 	bl	8000c68 <__aeabi_uldivmod>
 8006f12:	4603      	mov	r3, r0
 8006f14:	460c      	mov	r4, r1
 8006f16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f18:	4b0a      	ldr	r3, [pc, #40]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	0c1b      	lsrs	r3, r3, #16
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	3301      	adds	r3, #1
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f30:	60bb      	str	r3, [r7, #8]
      break;
 8006f32:	e002      	b.n	8006f3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f34:	4b04      	ldr	r3, [pc, #16]	; (8006f48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006f36:	60bb      	str	r3, [r7, #8]
      break;
 8006f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f44:	40023800 	.word	0x40023800
 8006f48:	00f42400 	.word	0x00f42400
 8006f4c:	007a1200 	.word	0x007a1200

08006f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f54:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f56:	681b      	ldr	r3, [r3, #0]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000000 	.word	0x20000000

08006f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f6c:	f7ff fff0 	bl	8006f50 <HAL_RCC_GetHCLKFreq>
 8006f70:	4601      	mov	r1, r0
 8006f72:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	0a9b      	lsrs	r3, r3, #10
 8006f78:	f003 0307 	and.w	r3, r3, #7
 8006f7c:	4a03      	ldr	r2, [pc, #12]	; (8006f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f7e:	5cd3      	ldrb	r3, [r2, r3]
 8006f80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	0800efdc 	.word	0x0800efdc

08006f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f94:	f7ff ffdc 	bl	8006f50 <HAL_RCC_GetHCLKFreq>
 8006f98:	4601      	mov	r1, r0
 8006f9a:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	0b5b      	lsrs	r3, r3, #13
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	4a03      	ldr	r2, [pc, #12]	; (8006fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fa6:	5cd3      	ldrb	r3, [r2, r3]
 8006fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40023800 	.word	0x40023800
 8006fb4:	0800efdc 	.word	0x0800efdc

08006fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e01d      	b.n	8007006 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fa fee0 	bl	8001da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f000 fb4e 	bl	8007698 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0201 	orr.w	r2, r2, #1
 8007024:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b06      	cmp	r3, #6
 8007036:	d007      	beq.n	8007048 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e01d      	b.n	80070a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d106      	bne.n	8007082 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f815 	bl	80070ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2202      	movs	r2, #2
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3304      	adds	r3, #4
 8007092:	4619      	mov	r1, r3
 8007094:	4610      	mov	r0, r2
 8007096:	f000 faff 	bl	8007698 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2201      	movs	r2, #1
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fdca 	bl	8007c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a15      	ldr	r2, [pc, #84]	; (8007134 <HAL_TIM_PWM_Start+0x74>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d004      	beq.n	80070ec <HAL_TIM_PWM_Start+0x2c>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a14      	ldr	r2, [pc, #80]	; (8007138 <HAL_TIM_PWM_Start+0x78>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d101      	bne.n	80070f0 <HAL_TIM_PWM_Start+0x30>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e000      	b.n	80070f2 <HAL_TIM_PWM_Start+0x32>
 80070f0:	2300      	movs	r3, #0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d007      	beq.n	8007106 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007104:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b06      	cmp	r3, #6
 8007116:	d007      	beq.n	8007128 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	40010000 	.word	0x40010000
 8007138:	40010400 	.word	0x40010400

0800713c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b02      	cmp	r3, #2
 8007150:	d122      	bne.n	8007198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b02      	cmp	r3, #2
 800715e:	d11b      	bne.n	8007198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0202 	mvn.w	r2, #2
 8007168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fa6b 	bl	800765a <HAL_TIM_IC_CaptureCallback>
 8007184:	e005      	b.n	8007192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa5d 	bl	8007646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fa6e 	bl	800766e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f003 0304 	and.w	r3, r3, #4
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d122      	bne.n	80071ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d11b      	bne.n	80071ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f06f 0204 	mvn.w	r2, #4
 80071bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2202      	movs	r2, #2
 80071c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa41 	bl	800765a <HAL_TIM_IC_CaptureCallback>
 80071d8:	e005      	b.n	80071e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fa33 	bl	8007646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fa44 	bl	800766e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b08      	cmp	r3, #8
 80071f8:	d122      	bne.n	8007240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f003 0308 	and.w	r3, r3, #8
 8007204:	2b08      	cmp	r3, #8
 8007206:	d11b      	bne.n	8007240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f06f 0208 	mvn.w	r2, #8
 8007210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2204      	movs	r2, #4
 8007216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa17 	bl	800765a <HAL_TIM_IC_CaptureCallback>
 800722c:	e005      	b.n	800723a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fa09 	bl	8007646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fa1a 	bl	800766e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	f003 0310 	and.w	r3, r3, #16
 800724a:	2b10      	cmp	r3, #16
 800724c:	d122      	bne.n	8007294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b10      	cmp	r3, #16
 800725a:	d11b      	bne.n	8007294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f06f 0210 	mvn.w	r2, #16
 8007264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2208      	movs	r2, #8
 800726a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f9ed 	bl	800765a <HAL_TIM_IC_CaptureCallback>
 8007280:	e005      	b.n	800728e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f9df 	bl	8007646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f9f0 	bl	800766e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d10e      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d107      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0201 	mvn.w	r2, #1
 80072b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f003 fba4 	bl	800aa08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ca:	2b80      	cmp	r3, #128	; 0x80
 80072cc:	d10e      	bne.n	80072ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d8:	2b80      	cmp	r3, #128	; 0x80
 80072da:	d107      	bne.n	80072ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fd6c 	bl	8007dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f6:	2b40      	cmp	r3, #64	; 0x40
 80072f8:	d10e      	bne.n	8007318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d107      	bne.n	8007318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f9b5 	bl	8007682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b20      	cmp	r3, #32
 8007324:	d10e      	bne.n	8007344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f003 0320 	and.w	r3, r3, #32
 8007330:	2b20      	cmp	r3, #32
 8007332:	d107      	bne.n	8007344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0220 	mvn.w	r2, #32
 800733c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fd36 	bl	8007db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007344:	bf00      	nop
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800735e:	2b01      	cmp	r3, #1
 8007360:	d101      	bne.n	8007366 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007362:	2302      	movs	r3, #2
 8007364:	e0b4      	b.n	80074d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2202      	movs	r2, #2
 8007372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b0c      	cmp	r3, #12
 800737a:	f200 809f 	bhi.w	80074bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	080073b9 	.word	0x080073b9
 8007388:	080074bd 	.word	0x080074bd
 800738c:	080074bd 	.word	0x080074bd
 8007390:	080074bd 	.word	0x080074bd
 8007394:	080073f9 	.word	0x080073f9
 8007398:	080074bd 	.word	0x080074bd
 800739c:	080074bd 	.word	0x080074bd
 80073a0:	080074bd 	.word	0x080074bd
 80073a4:	0800743b 	.word	0x0800743b
 80073a8:	080074bd 	.word	0x080074bd
 80073ac:	080074bd 	.word	0x080074bd
 80073b0:	080074bd 	.word	0x080074bd
 80073b4:	0800747b 	.word	0x0800747b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fa0a 	bl	80077d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0208 	orr.w	r2, r2, #8
 80073d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0204 	bic.w	r2, r2, #4
 80073e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6999      	ldr	r1, [r3, #24]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	691a      	ldr	r2, [r3, #16]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	619a      	str	r2, [r3, #24]
      break;
 80073f6:	e062      	b.n	80074be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fa5a 	bl	80078b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6999      	ldr	r1, [r3, #24]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	021a      	lsls	r2, r3, #8
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	619a      	str	r2, [r3, #24]
      break;
 8007438:	e041      	b.n	80074be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68b9      	ldr	r1, [r7, #8]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 faaf 	bl	80079a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69da      	ldr	r2, [r3, #28]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f042 0208 	orr.w	r2, r2, #8
 8007454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69da      	ldr	r2, [r3, #28]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0204 	bic.w	r2, r2, #4
 8007464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69d9      	ldr	r1, [r3, #28]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	61da      	str	r2, [r3, #28]
      break;
 8007478:	e021      	b.n	80074be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fb03 	bl	8007a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69da      	ldr	r2, [r3, #28]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69d9      	ldr	r1, [r3, #28]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	021a      	lsls	r2, r3, #8
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	61da      	str	r2, [r3, #28]
      break;
 80074ba:	e000      	b.n	80074be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80074bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d101      	bne.n	80074f0 <HAL_TIM_ConfigClockSource+0x18>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e0a6      	b.n	800763e <HAL_TIM_ConfigClockSource+0x166>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800750e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007516:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b40      	cmp	r3, #64	; 0x40
 8007526:	d067      	beq.n	80075f8 <HAL_TIM_ConfigClockSource+0x120>
 8007528:	2b40      	cmp	r3, #64	; 0x40
 800752a:	d80b      	bhi.n	8007544 <HAL_TIM_ConfigClockSource+0x6c>
 800752c:	2b10      	cmp	r3, #16
 800752e:	d073      	beq.n	8007618 <HAL_TIM_ConfigClockSource+0x140>
 8007530:	2b10      	cmp	r3, #16
 8007532:	d802      	bhi.n	800753a <HAL_TIM_ConfigClockSource+0x62>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d06f      	beq.n	8007618 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007538:	e078      	b.n	800762c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800753a:	2b20      	cmp	r3, #32
 800753c:	d06c      	beq.n	8007618 <HAL_TIM_ConfigClockSource+0x140>
 800753e:	2b30      	cmp	r3, #48	; 0x30
 8007540:	d06a      	beq.n	8007618 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007542:	e073      	b.n	800762c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007544:	2b70      	cmp	r3, #112	; 0x70
 8007546:	d00d      	beq.n	8007564 <HAL_TIM_ConfigClockSource+0x8c>
 8007548:	2b70      	cmp	r3, #112	; 0x70
 800754a:	d804      	bhi.n	8007556 <HAL_TIM_ConfigClockSource+0x7e>
 800754c:	2b50      	cmp	r3, #80	; 0x50
 800754e:	d033      	beq.n	80075b8 <HAL_TIM_ConfigClockSource+0xe0>
 8007550:	2b60      	cmp	r3, #96	; 0x60
 8007552:	d041      	beq.n	80075d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007554:	e06a      	b.n	800762c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755a:	d066      	beq.n	800762a <HAL_TIM_ConfigClockSource+0x152>
 800755c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007560:	d017      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007562:	e063      	b.n	800762c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	6899      	ldr	r1, [r3, #8]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f000 fb5a 	bl	8007c2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007586:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	609a      	str	r2, [r3, #8]
      break;
 8007590:	e04c      	b.n	800762c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6818      	ldr	r0, [r3, #0]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	6899      	ldr	r1, [r3, #8]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f000 fb43 	bl	8007c2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075b4:	609a      	str	r2, [r3, #8]
      break;
 80075b6:	e039      	b.n	800762c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6818      	ldr	r0, [r3, #0]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	6859      	ldr	r1, [r3, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	461a      	mov	r2, r3
 80075c6:	f000 fab7 	bl	8007b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2150      	movs	r1, #80	; 0x50
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fb10 	bl	8007bf6 <TIM_ITRx_SetConfig>
      break;
 80075d6:	e029      	b.n	800762c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	6859      	ldr	r1, [r3, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	461a      	mov	r2, r3
 80075e6:	f000 fad6 	bl	8007b96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2160      	movs	r1, #96	; 0x60
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 fb00 	bl	8007bf6 <TIM_ITRx_SetConfig>
      break;
 80075f6:	e019      	b.n	800762c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	6859      	ldr	r1, [r3, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	461a      	mov	r2, r3
 8007606:	f000 fa97 	bl	8007b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2140      	movs	r1, #64	; 0x40
 8007610:	4618      	mov	r0, r3
 8007612:	f000 faf0 	bl	8007bf6 <TIM_ITRx_SetConfig>
      break;
 8007616:	e009      	b.n	800762c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4619      	mov	r1, r3
 8007622:	4610      	mov	r0, r2
 8007624:	f000 fae7 	bl	8007bf6 <TIM_ITRx_SetConfig>
      break;
 8007628:	e000      	b.n	800762c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800762a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
	...

08007698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a40      	ldr	r2, [pc, #256]	; (80077ac <TIM_Base_SetConfig+0x114>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <TIM_Base_SetConfig+0x40>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b6:	d00f      	beq.n	80076d8 <TIM_Base_SetConfig+0x40>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a3d      	ldr	r2, [pc, #244]	; (80077b0 <TIM_Base_SetConfig+0x118>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d00b      	beq.n	80076d8 <TIM_Base_SetConfig+0x40>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a3c      	ldr	r2, [pc, #240]	; (80077b4 <TIM_Base_SetConfig+0x11c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d007      	beq.n	80076d8 <TIM_Base_SetConfig+0x40>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a3b      	ldr	r2, [pc, #236]	; (80077b8 <TIM_Base_SetConfig+0x120>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d003      	beq.n	80076d8 <TIM_Base_SetConfig+0x40>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a3a      	ldr	r2, [pc, #232]	; (80077bc <TIM_Base_SetConfig+0x124>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d108      	bne.n	80076ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a2f      	ldr	r2, [pc, #188]	; (80077ac <TIM_Base_SetConfig+0x114>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d02b      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f8:	d027      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a2c      	ldr	r2, [pc, #176]	; (80077b0 <TIM_Base_SetConfig+0x118>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d023      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a2b      	ldr	r2, [pc, #172]	; (80077b4 <TIM_Base_SetConfig+0x11c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d01f      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a2a      	ldr	r2, [pc, #168]	; (80077b8 <TIM_Base_SetConfig+0x120>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d01b      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a29      	ldr	r2, [pc, #164]	; (80077bc <TIM_Base_SetConfig+0x124>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d017      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a28      	ldr	r2, [pc, #160]	; (80077c0 <TIM_Base_SetConfig+0x128>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d013      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a27      	ldr	r2, [pc, #156]	; (80077c4 <TIM_Base_SetConfig+0x12c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00f      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a26      	ldr	r2, [pc, #152]	; (80077c8 <TIM_Base_SetConfig+0x130>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d00b      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a25      	ldr	r2, [pc, #148]	; (80077cc <TIM_Base_SetConfig+0x134>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d007      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a24      	ldr	r2, [pc, #144]	; (80077d0 <TIM_Base_SetConfig+0x138>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d003      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a23      	ldr	r2, [pc, #140]	; (80077d4 <TIM_Base_SetConfig+0x13c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d108      	bne.n	800775c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	4313      	orrs	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a0a      	ldr	r2, [pc, #40]	; (80077ac <TIM_Base_SetConfig+0x114>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d003      	beq.n	8007790 <TIM_Base_SetConfig+0xf8>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a0c      	ldr	r2, [pc, #48]	; (80077bc <TIM_Base_SetConfig+0x124>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d103      	bne.n	8007798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	691a      	ldr	r2, [r3, #16]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	615a      	str	r2, [r3, #20]
}
 800779e:	bf00      	nop
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40010000 	.word	0x40010000
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40000800 	.word	0x40000800
 80077b8:	40000c00 	.word	0x40000c00
 80077bc:	40010400 	.word	0x40010400
 80077c0:	40014000 	.word	0x40014000
 80077c4:	40014400 	.word	0x40014400
 80077c8:	40014800 	.word	0x40014800
 80077cc:	40001800 	.word	0x40001800
 80077d0:	40001c00 	.word	0x40001c00
 80077d4:	40002000 	.word	0x40002000

080077d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	f023 0201 	bic.w	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f023 0302 	bic.w	r3, r3, #2
 8007820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	4313      	orrs	r3, r2
 800782a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a20      	ldr	r2, [pc, #128]	; (80078b0 <TIM_OC1_SetConfig+0xd8>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d003      	beq.n	800783c <TIM_OC1_SetConfig+0x64>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a1f      	ldr	r2, [pc, #124]	; (80078b4 <TIM_OC1_SetConfig+0xdc>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d10c      	bne.n	8007856 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f023 0308 	bic.w	r3, r3, #8
 8007842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f023 0304 	bic.w	r3, r3, #4
 8007854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a15      	ldr	r2, [pc, #84]	; (80078b0 <TIM_OC1_SetConfig+0xd8>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d003      	beq.n	8007866 <TIM_OC1_SetConfig+0x8e>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a14      	ldr	r2, [pc, #80]	; (80078b4 <TIM_OC1_SetConfig+0xdc>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d111      	bne.n	800788a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800786c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	4313      	orrs	r3, r2
 8007888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	621a      	str	r2, [r3, #32]
}
 80078a4:	bf00      	nop
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	40010000 	.word	0x40010000
 80078b4:	40010400 	.word	0x40010400

080078b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	f023 0210 	bic.w	r2, r3, #16
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f023 0320 	bic.w	r3, r3, #32
 8007902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	011b      	lsls	r3, r3, #4
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a22      	ldr	r2, [pc, #136]	; (800799c <TIM_OC2_SetConfig+0xe4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d003      	beq.n	8007920 <TIM_OC2_SetConfig+0x68>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a21      	ldr	r2, [pc, #132]	; (80079a0 <TIM_OC2_SetConfig+0xe8>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d10d      	bne.n	800793c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	011b      	lsls	r3, r3, #4
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800793a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a17      	ldr	r2, [pc, #92]	; (800799c <TIM_OC2_SetConfig+0xe4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_OC2_SetConfig+0x94>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a16      	ldr	r2, [pc, #88]	; (80079a0 <TIM_OC2_SetConfig+0xe8>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d113      	bne.n	8007974 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800795a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4313      	orrs	r3, r2
 8007966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	4313      	orrs	r3, r2
 8007972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	621a      	str	r2, [r3, #32]
}
 800798e:	bf00      	nop
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	40010000 	.word	0x40010000
 80079a0:	40010400 	.word	0x40010400

080079a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0303 	bic.w	r3, r3, #3
 80079da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	021b      	lsls	r3, r3, #8
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a21      	ldr	r2, [pc, #132]	; (8007a84 <TIM_OC3_SetConfig+0xe0>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d003      	beq.n	8007a0a <TIM_OC3_SetConfig+0x66>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a20      	ldr	r2, [pc, #128]	; (8007a88 <TIM_OC3_SetConfig+0xe4>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d10d      	bne.n	8007a26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a16      	ldr	r2, [pc, #88]	; (8007a84 <TIM_OC3_SetConfig+0xe0>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d003      	beq.n	8007a36 <TIM_OC3_SetConfig+0x92>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a15      	ldr	r2, [pc, #84]	; (8007a88 <TIM_OC3_SetConfig+0xe4>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d113      	bne.n	8007a5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	011b      	lsls	r3, r3, #4
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	621a      	str	r2, [r3, #32]
}
 8007a78:	bf00      	nop
 8007a7a:	371c      	adds	r7, #28
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	40010000 	.word	0x40010000
 8007a88:	40010400 	.word	0x40010400

08007a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	031b      	lsls	r3, r3, #12
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a12      	ldr	r2, [pc, #72]	; (8007b30 <TIM_OC4_SetConfig+0xa4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d003      	beq.n	8007af4 <TIM_OC4_SetConfig+0x68>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a11      	ldr	r2, [pc, #68]	; (8007b34 <TIM_OC4_SetConfig+0xa8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d109      	bne.n	8007b08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007afa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	019b      	lsls	r3, r3, #6
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	621a      	str	r2, [r3, #32]
}
 8007b22:	bf00      	nop
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	40010000 	.word	0x40010000
 8007b34:	40010400 	.word	0x40010400

08007b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	f023 0201 	bic.w	r2, r3, #1
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	011b      	lsls	r3, r3, #4
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f023 030a 	bic.w	r3, r3, #10
 8007b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	621a      	str	r2, [r3, #32]
}
 8007b8a:	bf00      	nop
 8007b8c:	371c      	adds	r7, #28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b087      	sub	sp, #28
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	f023 0210 	bic.w	r2, r3, #16
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	031b      	lsls	r3, r3, #12
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	621a      	str	r2, [r3, #32]
}
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b085      	sub	sp, #20
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f043 0307 	orr.w	r3, r3, #7
 8007c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	609a      	str	r2, [r3, #8]
}
 8007c20:	bf00      	nop
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	021a      	lsls	r2, r3, #8
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	609a      	str	r2, [r3, #8]
}
 8007c60:	bf00      	nop
 8007c62:	371c      	adds	r7, #28
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f003 031f 	and.w	r3, r3, #31
 8007c7e:	2201      	movs	r2, #1
 8007c80:	fa02 f303 	lsl.w	r3, r2, r3
 8007c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a1a      	ldr	r2, [r3, #32]
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	401a      	ands	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a1a      	ldr	r2, [r3, #32]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f003 031f 	and.w	r3, r3, #31
 8007c9e:	6879      	ldr	r1, [r7, #4]
 8007ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	621a      	str	r2, [r3, #32]
}
 8007caa:	bf00      	nop
 8007cac:	371c      	adds	r7, #28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
	...

08007cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e05a      	b.n	8007d86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a21      	ldr	r2, [pc, #132]	; (8007d94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d022      	beq.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d1c:	d01d      	beq.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a1d      	ldr	r2, [pc, #116]	; (8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d018      	beq.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a1b      	ldr	r2, [pc, #108]	; (8007d9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d013      	beq.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1a      	ldr	r2, [pc, #104]	; (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00e      	beq.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a18      	ldr	r2, [pc, #96]	; (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d009      	beq.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a17      	ldr	r2, [pc, #92]	; (8007da8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d004      	beq.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a15      	ldr	r2, [pc, #84]	; (8007dac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d10c      	bne.n	8007d74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40010000 	.word	0x40010000
 8007d98:	40000400 	.word	0x40000400
 8007d9c:	40000800 	.word	0x40000800
 8007da0:	40000c00 	.word	0x40000c00
 8007da4:	40010400 	.word	0x40010400
 8007da8:	40014000 	.word	0x40014000
 8007dac:	40001800 	.word	0x40001800

08007db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e03f      	b.n	8007e6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7fa f966 	bl	80020d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2224      	movs	r2, #36	; 0x24
 8007e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fc6d 	bl	80086fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695a      	ldr	r2, [r3, #20]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b088      	sub	sp, #32
 8007e76:	af02      	add	r7, sp, #8
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	603b      	str	r3, [r7, #0]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	f040 8083 	bne.w	8007f9a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <HAL_UART_Transmit+0x2e>
 8007e9a:	88fb      	ldrh	r3, [r7, #6]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e07b      	b.n	8007f9c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d101      	bne.n	8007eb2 <HAL_UART_Transmit+0x40>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	e074      	b.n	8007f9c <HAL_UART_Transmit+0x12a>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2221      	movs	r2, #33	; 0x21
 8007ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007ec8:	f7fa fb20 	bl	800250c <HAL_GetTick>
 8007ecc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	88fa      	ldrh	r2, [r7, #6]
 8007ed2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	88fa      	ldrh	r2, [r7, #6]
 8007ed8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007ee2:	e042      	b.n	8007f6a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efa:	d122      	bne.n	8007f42 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2200      	movs	r2, #0
 8007f04:	2180      	movs	r1, #128	; 0x80
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 fa76 	bl	80083f8 <UART_WaitOnFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e042      	b.n	8007f9c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f28:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d103      	bne.n	8007f3a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	3302      	adds	r3, #2
 8007f36:	60bb      	str	r3, [r7, #8]
 8007f38:	e017      	b.n	8007f6a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60bb      	str	r3, [r7, #8]
 8007f40:	e013      	b.n	8007f6a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2180      	movs	r1, #128	; 0x80
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 fa53 	bl	80083f8 <UART_WaitOnFlagUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e01f      	b.n	8007f9c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	1c5a      	adds	r2, r3, #1
 8007f60:	60ba      	str	r2, [r7, #8]
 8007f62:	781a      	ldrb	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1b7      	bne.n	8007ee4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2140      	movs	r1, #64	; 0x40
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 fa3a 	bl	80083f8 <UART_WaitOnFlagUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e006      	b.n	8007f9c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	e000      	b.n	8007f9c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007f9a:	2302      	movs	r3, #2
  }
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d166      	bne.n	800808c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <HAL_UART_Receive_DMA+0x26>
 8007fc4:	88fb      	ldrh	r3, [r7, #6]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e05f      	b.n	800808e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d101      	bne.n	8007fdc <HAL_UART_Receive_DMA+0x38>
 8007fd8:	2302      	movs	r3, #2
 8007fda:	e058      	b.n	800808e <HAL_UART_Receive_DMA+0xea>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	88fa      	ldrh	r2, [r7, #6]
 8007fee:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2222      	movs	r2, #34	; 0x22
 8007ffa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008002:	4a25      	ldr	r2, [pc, #148]	; (8008098 <HAL_UART_Receive_DMA+0xf4>)
 8008004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800a:	4a24      	ldr	r2, [pc, #144]	; (800809c <HAL_UART_Receive_DMA+0xf8>)
 800800c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008012:	4a23      	ldr	r2, [pc, #140]	; (80080a0 <HAL_UART_Receive_DMA+0xfc>)
 8008014:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801a:	2200      	movs	r2, #0
 800801c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800801e:	f107 0308 	add.w	r3, r7, #8
 8008022:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3304      	adds	r3, #4
 800802e:	4619      	mov	r1, r3
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	88fb      	ldrh	r3, [r7, #6]
 8008036:	f7fa fc57 	bl	80028e8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800803a:	2300      	movs	r3, #0
 800803c:	613b      	str	r3, [r7, #16]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	613b      	str	r3, [r7, #16]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	613b      	str	r3, [r7, #16]
 800804e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008066:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695a      	ldr	r2, [r3, #20]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0201 	orr.w	r2, r2, #1
 8008076:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	695a      	ldr	r2, [r3, #20]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008086:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	e000      	b.n	800808e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800808c:	2302      	movs	r3, #2
  }
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	080082e1 	.word	0x080082e1
 800809c:	08008349 	.word	0x08008349
 80080a0:	08008365 	.word	0x08008365

080080a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	f003 030f 	and.w	r3, r3, #15
 80080d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10d      	bne.n	80080f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d008      	beq.n	80080f6 <HAL_UART_IRQHandler+0x52>
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa82 	bl	80085f8 <UART_Receive_IT>
      return;
 80080f4:	e0d1      	b.n	800829a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 80b0 	beq.w	800825e <HAL_UART_IRQHandler+0x1ba>
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	d105      	bne.n	8008114 <HAL_UART_IRQHandler+0x70>
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 80a5 	beq.w	800825e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <HAL_UART_IRQHandler+0x90>
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008124:	2b00      	cmp	r3, #0
 8008126:	d005      	beq.n	8008134 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812c:	f043 0201 	orr.w	r2, r3, #1
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f003 0304 	and.w	r3, r3, #4
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_UART_IRQHandler+0xb0>
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814c:	f043 0202 	orr.w	r2, r3, #2
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <HAL_UART_IRQHandler+0xd0>
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816c:	f043 0204 	orr.w	r2, r3, #4
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f003 0308 	and.w	r3, r3, #8
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00f      	beq.n	800819e <HAL_UART_IRQHandler+0xfa>
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <HAL_UART_IRQHandler+0xee>
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008196:	f043 0208 	orr.w	r2, r3, #8
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d078      	beq.n	8008298 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <HAL_UART_IRQHandler+0x11c>
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fa1c 	bl	80085f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	bf0c      	ite	eq
 80081ce:	2301      	moveq	r3, #1
 80081d0:	2300      	movne	r3, #0
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081da:	f003 0308 	and.w	r3, r3, #8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <HAL_UART_IRQHandler+0x144>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d031      	beq.n	800824c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f965 	bl	80084b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f8:	2b40      	cmp	r3, #64	; 0x40
 80081fa:	d123      	bne.n	8008244 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	695a      	ldr	r2, [r3, #20]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800820a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	2b00      	cmp	r3, #0
 8008212:	d013      	beq.n	800823c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008218:	4a21      	ldr	r2, [pc, #132]	; (80082a0 <HAL_UART_IRQHandler+0x1fc>)
 800821a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008220:	4618      	mov	r0, r3
 8008222:	f7fa fbb9 	bl	8002998 <HAL_DMA_Abort_IT>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d016      	beq.n	800825a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008236:	4610      	mov	r0, r2
 8008238:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823a:	e00e      	b.n	800825a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f845 	bl	80082cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008242:	e00a      	b.n	800825a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f841 	bl	80082cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800824a:	e006      	b.n	800825a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f83d 	bl	80082cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008258:	e01e      	b.n	8008298 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825a:	bf00      	nop
    return;
 800825c:	e01c      	b.n	8008298 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008264:	2b00      	cmp	r3, #0
 8008266:	d008      	beq.n	800827a <HAL_UART_IRQHandler+0x1d6>
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f952 	bl	800851c <UART_Transmit_IT>
    return;
 8008278:	e00f      	b.n	800829a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <HAL_UART_IRQHandler+0x1f6>
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f99a 	bl	80085c8 <UART_EndTransmit_IT>
    return;
 8008294:	bf00      	nop
 8008296:	e000      	b.n	800829a <HAL_UART_IRQHandler+0x1f6>
    return;
 8008298:	bf00      	nop
  }
}
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	080084f5 	.word	0x080084f5

080082a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d11e      	bne.n	800833a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008310:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	695a      	ldr	r2, [r3, #20]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 0201 	bic.w	r2, r2, #1
 8008320:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	695a      	ldr	r2, [r3, #20]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008330:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2220      	movs	r2, #32
 8008336:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f002 fb88 	bl	800aa50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008340:	bf00      	nop
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff ffae 	bl	80082b8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800836c:	2300      	movs	r3, #0
 800836e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008380:	2b80      	cmp	r3, #128	; 0x80
 8008382:	bf0c      	ite	eq
 8008384:	2301      	moveq	r3, #1
 8008386:	2300      	movne	r3, #0
 8008388:	b2db      	uxtb	r3, r3
 800838a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b21      	cmp	r3, #33	; 0x21
 8008396:	d108      	bne.n	80083aa <UART_DMAError+0x46>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d005      	beq.n	80083aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2200      	movs	r2, #0
 80083a2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80083a4:	68b8      	ldr	r0, [r7, #8]
 80083a6:	f000 f871 	bl	800848c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b4:	2b40      	cmp	r3, #64	; 0x40
 80083b6:	bf0c      	ite	eq
 80083b8:	2301      	moveq	r3, #1
 80083ba:	2300      	movne	r3, #0
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b22      	cmp	r3, #34	; 0x22
 80083ca:	d108      	bne.n	80083de <UART_DMAError+0x7a>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d005      	beq.n	80083de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2200      	movs	r2, #0
 80083d6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80083d8:	68b8      	ldr	r0, [r7, #8]
 80083da:	f000 f86d 	bl	80084b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e2:	f043 0210 	orr.w	r2, r3, #16
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083ea:	68b8      	ldr	r0, [r7, #8]
 80083ec:	f7ff ff6e 	bl	80082cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	4613      	mov	r3, r2
 8008406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008408:	e02c      	b.n	8008464 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d028      	beq.n	8008464 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d007      	beq.n	8008428 <UART_WaitOnFlagUntilTimeout+0x30>
 8008418:	f7fa f878 	bl	800250c <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	429a      	cmp	r2, r3
 8008426:	d21d      	bcs.n	8008464 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008436:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695a      	ldr	r2, [r3, #20]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 0201 	bic.w	r2, r2, #1
 8008446:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2220      	movs	r2, #32
 800844c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2220      	movs	r2, #32
 8008454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e00f      	b.n	8008484 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	4013      	ands	r3, r2
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	429a      	cmp	r2, r3
 8008472:	bf0c      	ite	eq
 8008474:	2301      	moveq	r3, #1
 8008476:	2300      	movne	r3, #0
 8008478:	b2db      	uxtb	r3, r3
 800847a:	461a      	mov	r2, r3
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	429a      	cmp	r2, r3
 8008480:	d0c3      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80084a2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2220      	movs	r2, #32
 80084a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68da      	ldr	r2, [r3, #12]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80084ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695a      	ldr	r2, [r3, #20]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0201 	bic.w	r2, r2, #1
 80084de:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008500:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f7ff fedc 	bl	80082cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008514:	bf00      	nop
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b21      	cmp	r3, #33	; 0x21
 800852e:	d144      	bne.n	80085ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008538:	d11a      	bne.n	8008570 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800854e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d105      	bne.n	8008564 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a1b      	ldr	r3, [r3, #32]
 800855c:	1c9a      	adds	r2, r3, #2
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	621a      	str	r2, [r3, #32]
 8008562:	e00e      	b.n	8008582 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	1c5a      	adds	r2, r3, #1
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	621a      	str	r2, [r3, #32]
 800856e:	e008      	b.n	8008582 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	1c59      	adds	r1, r3, #1
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6211      	str	r1, [r2, #32]
 800857a:	781a      	ldrb	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008586:	b29b      	uxth	r3, r3
 8008588:	3b01      	subs	r3, #1
 800858a:	b29b      	uxth	r3, r3
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4619      	mov	r1, r3
 8008590:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10f      	bne.n	80085b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68da      	ldr	r2, [r3, #12]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68da      	ldr	r2, [r3, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	e000      	b.n	80085bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80085ba:	2302      	movs	r3, #2
  }
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff fe5b 	bl	80082a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b22      	cmp	r3, #34	; 0x22
 800860a:	d171      	bne.n	80086f0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008614:	d123      	bne.n	800865e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10e      	bne.n	8008642 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	b29b      	uxth	r3, r3
 800862c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008630:	b29a      	uxth	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	1c9a      	adds	r2, r3, #2
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	629a      	str	r2, [r3, #40]	; 0x28
 8008640:	e029      	b.n	8008696 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	b29b      	uxth	r3, r3
 800864a:	b2db      	uxtb	r3, r3
 800864c:	b29a      	uxth	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	629a      	str	r2, [r3, #40]	; 0x28
 800865c:	e01b      	b.n	8008696 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6858      	ldr	r0, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	1c59      	adds	r1, r3, #1
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6291      	str	r1, [r2, #40]	; 0x28
 8008676:	b2c2      	uxtb	r2, r0
 8008678:	701a      	strb	r2, [r3, #0]
 800867a:	e00c      	b.n	8008696 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	b2da      	uxtb	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	1c58      	adds	r0, r3, #1
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	6288      	str	r0, [r1, #40]	; 0x28
 800868e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008692:	b2d2      	uxtb	r2, r2
 8008694:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800869a:	b29b      	uxth	r3, r3
 800869c:	3b01      	subs	r3, #1
 800869e:	b29b      	uxth	r3, r3
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	4619      	mov	r1, r3
 80086a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d120      	bne.n	80086ec <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0220 	bic.w	r2, r2, #32
 80086b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	695a      	ldr	r2, [r3, #20]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0201 	bic.w	r2, r2, #1
 80086d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2220      	movs	r2, #32
 80086de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f002 f9b4 	bl	800aa50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	e002      	b.n	80086f2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e000      	b.n	80086f2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80086f0:	2302      	movs	r3, #2
  }
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	b085      	sub	sp, #20
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68da      	ldr	r2, [r3, #12]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689a      	ldr	r2, [r3, #8]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	431a      	orrs	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	431a      	orrs	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800873e:	f023 030c 	bic.w	r3, r3, #12
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	68f9      	ldr	r1, [r7, #12]
 8008748:	430b      	orrs	r3, r1
 800874a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	69db      	ldr	r3, [r3, #28]
 8008766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800876a:	f040 818b 	bne.w	8008a84 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4ac1      	ldr	r2, [pc, #772]	; (8008a78 <UART_SetConfig+0x37c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d005      	beq.n	8008784 <UART_SetConfig+0x88>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4abf      	ldr	r2, [pc, #764]	; (8008a7c <UART_SetConfig+0x380>)
 800877e:	4293      	cmp	r3, r2
 8008780:	f040 80bd 	bne.w	80088fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008784:	f7fe fc04 	bl	8006f90 <HAL_RCC_GetPCLK2Freq>
 8008788:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	461d      	mov	r5, r3
 800878e:	f04f 0600 	mov.w	r6, #0
 8008792:	46a8      	mov	r8, r5
 8008794:	46b1      	mov	r9, r6
 8008796:	eb18 0308 	adds.w	r3, r8, r8
 800879a:	eb49 0409 	adc.w	r4, r9, r9
 800879e:	4698      	mov	r8, r3
 80087a0:	46a1      	mov	r9, r4
 80087a2:	eb18 0805 	adds.w	r8, r8, r5
 80087a6:	eb49 0906 	adc.w	r9, r9, r6
 80087aa:	f04f 0100 	mov.w	r1, #0
 80087ae:	f04f 0200 	mov.w	r2, #0
 80087b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80087b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80087ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80087be:	4688      	mov	r8, r1
 80087c0:	4691      	mov	r9, r2
 80087c2:	eb18 0005 	adds.w	r0, r8, r5
 80087c6:	eb49 0106 	adc.w	r1, r9, r6
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	461d      	mov	r5, r3
 80087d0:	f04f 0600 	mov.w	r6, #0
 80087d4:	196b      	adds	r3, r5, r5
 80087d6:	eb46 0406 	adc.w	r4, r6, r6
 80087da:	461a      	mov	r2, r3
 80087dc:	4623      	mov	r3, r4
 80087de:	f7f8 fa43 	bl	8000c68 <__aeabi_uldivmod>
 80087e2:	4603      	mov	r3, r0
 80087e4:	460c      	mov	r4, r1
 80087e6:	461a      	mov	r2, r3
 80087e8:	4ba5      	ldr	r3, [pc, #660]	; (8008a80 <UART_SetConfig+0x384>)
 80087ea:	fba3 2302 	umull	r2, r3, r3, r2
 80087ee:	095b      	lsrs	r3, r3, #5
 80087f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	461d      	mov	r5, r3
 80087f8:	f04f 0600 	mov.w	r6, #0
 80087fc:	46a9      	mov	r9, r5
 80087fe:	46b2      	mov	sl, r6
 8008800:	eb19 0309 	adds.w	r3, r9, r9
 8008804:	eb4a 040a 	adc.w	r4, sl, sl
 8008808:	4699      	mov	r9, r3
 800880a:	46a2      	mov	sl, r4
 800880c:	eb19 0905 	adds.w	r9, r9, r5
 8008810:	eb4a 0a06 	adc.w	sl, sl, r6
 8008814:	f04f 0100 	mov.w	r1, #0
 8008818:	f04f 0200 	mov.w	r2, #0
 800881c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008820:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008824:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008828:	4689      	mov	r9, r1
 800882a:	4692      	mov	sl, r2
 800882c:	eb19 0005 	adds.w	r0, r9, r5
 8008830:	eb4a 0106 	adc.w	r1, sl, r6
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	461d      	mov	r5, r3
 800883a:	f04f 0600 	mov.w	r6, #0
 800883e:	196b      	adds	r3, r5, r5
 8008840:	eb46 0406 	adc.w	r4, r6, r6
 8008844:	461a      	mov	r2, r3
 8008846:	4623      	mov	r3, r4
 8008848:	f7f8 fa0e 	bl	8000c68 <__aeabi_uldivmod>
 800884c:	4603      	mov	r3, r0
 800884e:	460c      	mov	r4, r1
 8008850:	461a      	mov	r2, r3
 8008852:	4b8b      	ldr	r3, [pc, #556]	; (8008a80 <UART_SetConfig+0x384>)
 8008854:	fba3 1302 	umull	r1, r3, r3, r2
 8008858:	095b      	lsrs	r3, r3, #5
 800885a:	2164      	movs	r1, #100	; 0x64
 800885c:	fb01 f303 	mul.w	r3, r1, r3
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	3332      	adds	r3, #50	; 0x32
 8008866:	4a86      	ldr	r2, [pc, #536]	; (8008a80 <UART_SetConfig+0x384>)
 8008868:	fba2 2303 	umull	r2, r3, r2, r3
 800886c:	095b      	lsrs	r3, r3, #5
 800886e:	005b      	lsls	r3, r3, #1
 8008870:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008874:	4498      	add	r8, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	461d      	mov	r5, r3
 800887a:	f04f 0600 	mov.w	r6, #0
 800887e:	46a9      	mov	r9, r5
 8008880:	46b2      	mov	sl, r6
 8008882:	eb19 0309 	adds.w	r3, r9, r9
 8008886:	eb4a 040a 	adc.w	r4, sl, sl
 800888a:	4699      	mov	r9, r3
 800888c:	46a2      	mov	sl, r4
 800888e:	eb19 0905 	adds.w	r9, r9, r5
 8008892:	eb4a 0a06 	adc.w	sl, sl, r6
 8008896:	f04f 0100 	mov.w	r1, #0
 800889a:	f04f 0200 	mov.w	r2, #0
 800889e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088aa:	4689      	mov	r9, r1
 80088ac:	4692      	mov	sl, r2
 80088ae:	eb19 0005 	adds.w	r0, r9, r5
 80088b2:	eb4a 0106 	adc.w	r1, sl, r6
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	461d      	mov	r5, r3
 80088bc:	f04f 0600 	mov.w	r6, #0
 80088c0:	196b      	adds	r3, r5, r5
 80088c2:	eb46 0406 	adc.w	r4, r6, r6
 80088c6:	461a      	mov	r2, r3
 80088c8:	4623      	mov	r3, r4
 80088ca:	f7f8 f9cd 	bl	8000c68 <__aeabi_uldivmod>
 80088ce:	4603      	mov	r3, r0
 80088d0:	460c      	mov	r4, r1
 80088d2:	461a      	mov	r2, r3
 80088d4:	4b6a      	ldr	r3, [pc, #424]	; (8008a80 <UART_SetConfig+0x384>)
 80088d6:	fba3 1302 	umull	r1, r3, r3, r2
 80088da:	095b      	lsrs	r3, r3, #5
 80088dc:	2164      	movs	r1, #100	; 0x64
 80088de:	fb01 f303 	mul.w	r3, r1, r3
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	00db      	lsls	r3, r3, #3
 80088e6:	3332      	adds	r3, #50	; 0x32
 80088e8:	4a65      	ldr	r2, [pc, #404]	; (8008a80 <UART_SetConfig+0x384>)
 80088ea:	fba2 2303 	umull	r2, r3, r2, r3
 80088ee:	095b      	lsrs	r3, r3, #5
 80088f0:	f003 0207 	and.w	r2, r3, #7
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4442      	add	r2, r8
 80088fa:	609a      	str	r2, [r3, #8]
 80088fc:	e26f      	b.n	8008dde <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088fe:	f7fe fb33 	bl	8006f68 <HAL_RCC_GetPCLK1Freq>
 8008902:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	461d      	mov	r5, r3
 8008908:	f04f 0600 	mov.w	r6, #0
 800890c:	46a8      	mov	r8, r5
 800890e:	46b1      	mov	r9, r6
 8008910:	eb18 0308 	adds.w	r3, r8, r8
 8008914:	eb49 0409 	adc.w	r4, r9, r9
 8008918:	4698      	mov	r8, r3
 800891a:	46a1      	mov	r9, r4
 800891c:	eb18 0805 	adds.w	r8, r8, r5
 8008920:	eb49 0906 	adc.w	r9, r9, r6
 8008924:	f04f 0100 	mov.w	r1, #0
 8008928:	f04f 0200 	mov.w	r2, #0
 800892c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008930:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008934:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008938:	4688      	mov	r8, r1
 800893a:	4691      	mov	r9, r2
 800893c:	eb18 0005 	adds.w	r0, r8, r5
 8008940:	eb49 0106 	adc.w	r1, r9, r6
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	461d      	mov	r5, r3
 800894a:	f04f 0600 	mov.w	r6, #0
 800894e:	196b      	adds	r3, r5, r5
 8008950:	eb46 0406 	adc.w	r4, r6, r6
 8008954:	461a      	mov	r2, r3
 8008956:	4623      	mov	r3, r4
 8008958:	f7f8 f986 	bl	8000c68 <__aeabi_uldivmod>
 800895c:	4603      	mov	r3, r0
 800895e:	460c      	mov	r4, r1
 8008960:	461a      	mov	r2, r3
 8008962:	4b47      	ldr	r3, [pc, #284]	; (8008a80 <UART_SetConfig+0x384>)
 8008964:	fba3 2302 	umull	r2, r3, r3, r2
 8008968:	095b      	lsrs	r3, r3, #5
 800896a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	461d      	mov	r5, r3
 8008972:	f04f 0600 	mov.w	r6, #0
 8008976:	46a9      	mov	r9, r5
 8008978:	46b2      	mov	sl, r6
 800897a:	eb19 0309 	adds.w	r3, r9, r9
 800897e:	eb4a 040a 	adc.w	r4, sl, sl
 8008982:	4699      	mov	r9, r3
 8008984:	46a2      	mov	sl, r4
 8008986:	eb19 0905 	adds.w	r9, r9, r5
 800898a:	eb4a 0a06 	adc.w	sl, sl, r6
 800898e:	f04f 0100 	mov.w	r1, #0
 8008992:	f04f 0200 	mov.w	r2, #0
 8008996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800899a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800899e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089a2:	4689      	mov	r9, r1
 80089a4:	4692      	mov	sl, r2
 80089a6:	eb19 0005 	adds.w	r0, r9, r5
 80089aa:	eb4a 0106 	adc.w	r1, sl, r6
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	461d      	mov	r5, r3
 80089b4:	f04f 0600 	mov.w	r6, #0
 80089b8:	196b      	adds	r3, r5, r5
 80089ba:	eb46 0406 	adc.w	r4, r6, r6
 80089be:	461a      	mov	r2, r3
 80089c0:	4623      	mov	r3, r4
 80089c2:	f7f8 f951 	bl	8000c68 <__aeabi_uldivmod>
 80089c6:	4603      	mov	r3, r0
 80089c8:	460c      	mov	r4, r1
 80089ca:	461a      	mov	r2, r3
 80089cc:	4b2c      	ldr	r3, [pc, #176]	; (8008a80 <UART_SetConfig+0x384>)
 80089ce:	fba3 1302 	umull	r1, r3, r3, r2
 80089d2:	095b      	lsrs	r3, r3, #5
 80089d4:	2164      	movs	r1, #100	; 0x64
 80089d6:	fb01 f303 	mul.w	r3, r1, r3
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	3332      	adds	r3, #50	; 0x32
 80089e0:	4a27      	ldr	r2, [pc, #156]	; (8008a80 <UART_SetConfig+0x384>)
 80089e2:	fba2 2303 	umull	r2, r3, r2, r3
 80089e6:	095b      	lsrs	r3, r3, #5
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089ee:	4498      	add	r8, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	461d      	mov	r5, r3
 80089f4:	f04f 0600 	mov.w	r6, #0
 80089f8:	46a9      	mov	r9, r5
 80089fa:	46b2      	mov	sl, r6
 80089fc:	eb19 0309 	adds.w	r3, r9, r9
 8008a00:	eb4a 040a 	adc.w	r4, sl, sl
 8008a04:	4699      	mov	r9, r3
 8008a06:	46a2      	mov	sl, r4
 8008a08:	eb19 0905 	adds.w	r9, r9, r5
 8008a0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a10:	f04f 0100 	mov.w	r1, #0
 8008a14:	f04f 0200 	mov.w	r2, #0
 8008a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a24:	4689      	mov	r9, r1
 8008a26:	4692      	mov	sl, r2
 8008a28:	eb19 0005 	adds.w	r0, r9, r5
 8008a2c:	eb4a 0106 	adc.w	r1, sl, r6
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	461d      	mov	r5, r3
 8008a36:	f04f 0600 	mov.w	r6, #0
 8008a3a:	196b      	adds	r3, r5, r5
 8008a3c:	eb46 0406 	adc.w	r4, r6, r6
 8008a40:	461a      	mov	r2, r3
 8008a42:	4623      	mov	r3, r4
 8008a44:	f7f8 f910 	bl	8000c68 <__aeabi_uldivmod>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <UART_SetConfig+0x384>)
 8008a50:	fba3 1302 	umull	r1, r3, r3, r2
 8008a54:	095b      	lsrs	r3, r3, #5
 8008a56:	2164      	movs	r1, #100	; 0x64
 8008a58:	fb01 f303 	mul.w	r3, r1, r3
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	3332      	adds	r3, #50	; 0x32
 8008a62:	4a07      	ldr	r2, [pc, #28]	; (8008a80 <UART_SetConfig+0x384>)
 8008a64:	fba2 2303 	umull	r2, r3, r2, r3
 8008a68:	095b      	lsrs	r3, r3, #5
 8008a6a:	f003 0207 	and.w	r2, r3, #7
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4442      	add	r2, r8
 8008a74:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008a76:	e1b2      	b.n	8008dde <UART_SetConfig+0x6e2>
 8008a78:	40011000 	.word	0x40011000
 8008a7c:	40011400 	.word	0x40011400
 8008a80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4ad7      	ldr	r2, [pc, #860]	; (8008de8 <UART_SetConfig+0x6ec>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d005      	beq.n	8008a9a <UART_SetConfig+0x39e>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4ad6      	ldr	r2, [pc, #856]	; (8008dec <UART_SetConfig+0x6f0>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	f040 80d1 	bne.w	8008c3c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a9a:	f7fe fa79 	bl	8006f90 <HAL_RCC_GetPCLK2Freq>
 8008a9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	469a      	mov	sl, r3
 8008aa4:	f04f 0b00 	mov.w	fp, #0
 8008aa8:	46d0      	mov	r8, sl
 8008aaa:	46d9      	mov	r9, fp
 8008aac:	eb18 0308 	adds.w	r3, r8, r8
 8008ab0:	eb49 0409 	adc.w	r4, r9, r9
 8008ab4:	4698      	mov	r8, r3
 8008ab6:	46a1      	mov	r9, r4
 8008ab8:	eb18 080a 	adds.w	r8, r8, sl
 8008abc:	eb49 090b 	adc.w	r9, r9, fp
 8008ac0:	f04f 0100 	mov.w	r1, #0
 8008ac4:	f04f 0200 	mov.w	r2, #0
 8008ac8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008acc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ad0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008ad4:	4688      	mov	r8, r1
 8008ad6:	4691      	mov	r9, r2
 8008ad8:	eb1a 0508 	adds.w	r5, sl, r8
 8008adc:	eb4b 0609 	adc.w	r6, fp, r9
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	f04f 0200 	mov.w	r2, #0
 8008aea:	f04f 0300 	mov.w	r3, #0
 8008aee:	f04f 0400 	mov.w	r4, #0
 8008af2:	0094      	lsls	r4, r2, #2
 8008af4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008af8:	008b      	lsls	r3, r1, #2
 8008afa:	461a      	mov	r2, r3
 8008afc:	4623      	mov	r3, r4
 8008afe:	4628      	mov	r0, r5
 8008b00:	4631      	mov	r1, r6
 8008b02:	f7f8 f8b1 	bl	8000c68 <__aeabi_uldivmod>
 8008b06:	4603      	mov	r3, r0
 8008b08:	460c      	mov	r4, r1
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	4bb8      	ldr	r3, [pc, #736]	; (8008df0 <UART_SetConfig+0x6f4>)
 8008b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b12:	095b      	lsrs	r3, r3, #5
 8008b14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	469b      	mov	fp, r3
 8008b1c:	f04f 0c00 	mov.w	ip, #0
 8008b20:	46d9      	mov	r9, fp
 8008b22:	46e2      	mov	sl, ip
 8008b24:	eb19 0309 	adds.w	r3, r9, r9
 8008b28:	eb4a 040a 	adc.w	r4, sl, sl
 8008b2c:	4699      	mov	r9, r3
 8008b2e:	46a2      	mov	sl, r4
 8008b30:	eb19 090b 	adds.w	r9, r9, fp
 8008b34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b38:	f04f 0100 	mov.w	r1, #0
 8008b3c:	f04f 0200 	mov.w	r2, #0
 8008b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b4c:	4689      	mov	r9, r1
 8008b4e:	4692      	mov	sl, r2
 8008b50:	eb1b 0509 	adds.w	r5, fp, r9
 8008b54:	eb4c 060a 	adc.w	r6, ip, sl
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	f04f 0200 	mov.w	r2, #0
 8008b62:	f04f 0300 	mov.w	r3, #0
 8008b66:	f04f 0400 	mov.w	r4, #0
 8008b6a:	0094      	lsls	r4, r2, #2
 8008b6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b70:	008b      	lsls	r3, r1, #2
 8008b72:	461a      	mov	r2, r3
 8008b74:	4623      	mov	r3, r4
 8008b76:	4628      	mov	r0, r5
 8008b78:	4631      	mov	r1, r6
 8008b7a:	f7f8 f875 	bl	8000c68 <__aeabi_uldivmod>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	460c      	mov	r4, r1
 8008b82:	461a      	mov	r2, r3
 8008b84:	4b9a      	ldr	r3, [pc, #616]	; (8008df0 <UART_SetConfig+0x6f4>)
 8008b86:	fba3 1302 	umull	r1, r3, r3, r2
 8008b8a:	095b      	lsrs	r3, r3, #5
 8008b8c:	2164      	movs	r1, #100	; 0x64
 8008b8e:	fb01 f303 	mul.w	r3, r1, r3
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	011b      	lsls	r3, r3, #4
 8008b96:	3332      	adds	r3, #50	; 0x32
 8008b98:	4a95      	ldr	r2, [pc, #596]	; (8008df0 <UART_SetConfig+0x6f4>)
 8008b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9e:	095b      	lsrs	r3, r3, #5
 8008ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ba4:	4498      	add	r8, r3
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	469b      	mov	fp, r3
 8008baa:	f04f 0c00 	mov.w	ip, #0
 8008bae:	46d9      	mov	r9, fp
 8008bb0:	46e2      	mov	sl, ip
 8008bb2:	eb19 0309 	adds.w	r3, r9, r9
 8008bb6:	eb4a 040a 	adc.w	r4, sl, sl
 8008bba:	4699      	mov	r9, r3
 8008bbc:	46a2      	mov	sl, r4
 8008bbe:	eb19 090b 	adds.w	r9, r9, fp
 8008bc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008bc6:	f04f 0100 	mov.w	r1, #0
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008bd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bda:	4689      	mov	r9, r1
 8008bdc:	4692      	mov	sl, r2
 8008bde:	eb1b 0509 	adds.w	r5, fp, r9
 8008be2:	eb4c 060a 	adc.w	r6, ip, sl
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	4619      	mov	r1, r3
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	f04f 0400 	mov.w	r4, #0
 8008bf8:	0094      	lsls	r4, r2, #2
 8008bfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008bfe:	008b      	lsls	r3, r1, #2
 8008c00:	461a      	mov	r2, r3
 8008c02:	4623      	mov	r3, r4
 8008c04:	4628      	mov	r0, r5
 8008c06:	4631      	mov	r1, r6
 8008c08:	f7f8 f82e 	bl	8000c68 <__aeabi_uldivmod>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	460c      	mov	r4, r1
 8008c10:	461a      	mov	r2, r3
 8008c12:	4b77      	ldr	r3, [pc, #476]	; (8008df0 <UART_SetConfig+0x6f4>)
 8008c14:	fba3 1302 	umull	r1, r3, r3, r2
 8008c18:	095b      	lsrs	r3, r3, #5
 8008c1a:	2164      	movs	r1, #100	; 0x64
 8008c1c:	fb01 f303 	mul.w	r3, r1, r3
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	3332      	adds	r3, #50	; 0x32
 8008c26:	4a72      	ldr	r2, [pc, #456]	; (8008df0 <UART_SetConfig+0x6f4>)
 8008c28:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2c:	095b      	lsrs	r3, r3, #5
 8008c2e:	f003 020f 	and.w	r2, r3, #15
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4442      	add	r2, r8
 8008c38:	609a      	str	r2, [r3, #8]
 8008c3a:	e0d0      	b.n	8008dde <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c3c:	f7fe f994 	bl	8006f68 <HAL_RCC_GetPCLK1Freq>
 8008c40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	469a      	mov	sl, r3
 8008c46:	f04f 0b00 	mov.w	fp, #0
 8008c4a:	46d0      	mov	r8, sl
 8008c4c:	46d9      	mov	r9, fp
 8008c4e:	eb18 0308 	adds.w	r3, r8, r8
 8008c52:	eb49 0409 	adc.w	r4, r9, r9
 8008c56:	4698      	mov	r8, r3
 8008c58:	46a1      	mov	r9, r4
 8008c5a:	eb18 080a 	adds.w	r8, r8, sl
 8008c5e:	eb49 090b 	adc.w	r9, r9, fp
 8008c62:	f04f 0100 	mov.w	r1, #0
 8008c66:	f04f 0200 	mov.w	r2, #0
 8008c6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008c6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008c72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008c76:	4688      	mov	r8, r1
 8008c78:	4691      	mov	r9, r2
 8008c7a:	eb1a 0508 	adds.w	r5, sl, r8
 8008c7e:	eb4b 0609 	adc.w	r6, fp, r9
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	4619      	mov	r1, r3
 8008c88:	f04f 0200 	mov.w	r2, #0
 8008c8c:	f04f 0300 	mov.w	r3, #0
 8008c90:	f04f 0400 	mov.w	r4, #0
 8008c94:	0094      	lsls	r4, r2, #2
 8008c96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c9a:	008b      	lsls	r3, r1, #2
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4623      	mov	r3, r4
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	f7f7 ffe0 	bl	8000c68 <__aeabi_uldivmod>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	461a      	mov	r2, r3
 8008cae:	4b50      	ldr	r3, [pc, #320]	; (8008df0 <UART_SetConfig+0x6f4>)
 8008cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8008cb4:	095b      	lsrs	r3, r3, #5
 8008cb6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	469b      	mov	fp, r3
 8008cbe:	f04f 0c00 	mov.w	ip, #0
 8008cc2:	46d9      	mov	r9, fp
 8008cc4:	46e2      	mov	sl, ip
 8008cc6:	eb19 0309 	adds.w	r3, r9, r9
 8008cca:	eb4a 040a 	adc.w	r4, sl, sl
 8008cce:	4699      	mov	r9, r3
 8008cd0:	46a2      	mov	sl, r4
 8008cd2:	eb19 090b 	adds.w	r9, r9, fp
 8008cd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008cda:	f04f 0100 	mov.w	r1, #0
 8008cde:	f04f 0200 	mov.w	r2, #0
 8008ce2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ce6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008cea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008cee:	4689      	mov	r9, r1
 8008cf0:	4692      	mov	sl, r2
 8008cf2:	eb1b 0509 	adds.w	r5, fp, r9
 8008cf6:	eb4c 060a 	adc.w	r6, ip, sl
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	f04f 0200 	mov.w	r2, #0
 8008d04:	f04f 0300 	mov.w	r3, #0
 8008d08:	f04f 0400 	mov.w	r4, #0
 8008d0c:	0094      	lsls	r4, r2, #2
 8008d0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d12:	008b      	lsls	r3, r1, #2
 8008d14:	461a      	mov	r2, r3
 8008d16:	4623      	mov	r3, r4
 8008d18:	4628      	mov	r0, r5
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	f7f7 ffa4 	bl	8000c68 <__aeabi_uldivmod>
 8008d20:	4603      	mov	r3, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	461a      	mov	r2, r3
 8008d26:	4b32      	ldr	r3, [pc, #200]	; (8008df0 <UART_SetConfig+0x6f4>)
 8008d28:	fba3 1302 	umull	r1, r3, r3, r2
 8008d2c:	095b      	lsrs	r3, r3, #5
 8008d2e:	2164      	movs	r1, #100	; 0x64
 8008d30:	fb01 f303 	mul.w	r3, r1, r3
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	011b      	lsls	r3, r3, #4
 8008d38:	3332      	adds	r3, #50	; 0x32
 8008d3a:	4a2d      	ldr	r2, [pc, #180]	; (8008df0 <UART_SetConfig+0x6f4>)
 8008d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d40:	095b      	lsrs	r3, r3, #5
 8008d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d46:	4498      	add	r8, r3
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	469b      	mov	fp, r3
 8008d4c:	f04f 0c00 	mov.w	ip, #0
 8008d50:	46d9      	mov	r9, fp
 8008d52:	46e2      	mov	sl, ip
 8008d54:	eb19 0309 	adds.w	r3, r9, r9
 8008d58:	eb4a 040a 	adc.w	r4, sl, sl
 8008d5c:	4699      	mov	r9, r3
 8008d5e:	46a2      	mov	sl, r4
 8008d60:	eb19 090b 	adds.w	r9, r9, fp
 8008d64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008d68:	f04f 0100 	mov.w	r1, #0
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d7c:	4689      	mov	r9, r1
 8008d7e:	4692      	mov	sl, r2
 8008d80:	eb1b 0509 	adds.w	r5, fp, r9
 8008d84:	eb4c 060a 	adc.w	r6, ip, sl
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	f04f 0300 	mov.w	r3, #0
 8008d96:	f04f 0400 	mov.w	r4, #0
 8008d9a:	0094      	lsls	r4, r2, #2
 8008d9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008da0:	008b      	lsls	r3, r1, #2
 8008da2:	461a      	mov	r2, r3
 8008da4:	4623      	mov	r3, r4
 8008da6:	4628      	mov	r0, r5
 8008da8:	4631      	mov	r1, r6
 8008daa:	f7f7 ff5d 	bl	8000c68 <__aeabi_uldivmod>
 8008dae:	4603      	mov	r3, r0
 8008db0:	460c      	mov	r4, r1
 8008db2:	461a      	mov	r2, r3
 8008db4:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <UART_SetConfig+0x6f4>)
 8008db6:	fba3 1302 	umull	r1, r3, r3, r2
 8008dba:	095b      	lsrs	r3, r3, #5
 8008dbc:	2164      	movs	r1, #100	; 0x64
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	3332      	adds	r3, #50	; 0x32
 8008dc8:	4a09      	ldr	r2, [pc, #36]	; (8008df0 <UART_SetConfig+0x6f4>)
 8008dca:	fba2 2303 	umull	r2, r3, r2, r3
 8008dce:	095b      	lsrs	r3, r3, #5
 8008dd0:	f003 020f 	and.w	r2, r3, #15
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4442      	add	r2, r8
 8008dda:	609a      	str	r2, [r3, #8]
}
 8008ddc:	e7ff      	b.n	8008dde <UART_SetConfig+0x6e2>
 8008dde:	bf00      	nop
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de8:	40011000 	.word	0x40011000
 8008dec:	40011400 	.word	0x40011400
 8008df0:	51eb851f 	.word	0x51eb851f

08008df4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008df4:	b084      	sub	sp, #16
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	f107 001c 	add.w	r0, r7, #28
 8008e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d122      	bne.n	8008e52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d105      	bne.n	8008e46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa4e 	bl	80092e8 <USB_CoreReset>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]
 8008e50:	e01a      	b.n	8008e88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fa42 	bl	80092e8 <USB_CoreReset>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d106      	bne.n	8008e7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	639a      	str	r2, [r3, #56]	; 0x38
 8008e7a:	e005      	b.n	8008e88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d10b      	bne.n	8008ea6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f043 0206 	orr.w	r2, r3, #6
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f043 0220 	orr.w	r2, r3, #32
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008eb2:	b004      	add	sp, #16
 8008eb4:	4770      	bx	lr

08008eb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f023 0201 	bic.w	r2, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d106      	bne.n	8008f04 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	60da      	str	r2, [r3, #12]
 8008f02:	e00b      	b.n	8008f1c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d106      	bne.n	8008f18 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	60da      	str	r2, [r3, #12]
 8008f16:	e001      	b.n	8008f1c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e003      	b.n	8008f24 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008f1c:	2032      	movs	r0, #50	; 0x32
 8008f1e:	f7f9 fb01 	bl	8002524 <HAL_Delay>

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b086      	sub	sp, #24
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f46:	2300      	movs	r3, #0
 8008f48:	613b      	str	r3, [r7, #16]
 8008f4a:	e009      	b.n	8008f60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	3340      	adds	r3, #64	; 0x40
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4413      	add	r3, r2
 8008f56:	2200      	movs	r2, #0
 8008f58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	613b      	str	r3, [r7, #16]
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	2b0e      	cmp	r3, #14
 8008f64:	d9f2      	bls.n	8008f4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d11c      	bne.n	8008fa6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f7a:	f043 0302 	orr.w	r3, r3, #2
 8008f7e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f90:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	639a      	str	r2, [r3, #56]	; 0x38
 8008fa4:	e00b      	b.n	8008fbe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008faa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd8:	461a      	mov	r2, r3
 8008fda:	680b      	ldr	r3, [r1, #0]
 8008fdc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d10c      	bne.n	8008ffe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d104      	bne.n	8008ff4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008fea:	2100      	movs	r1, #0
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f949 	bl	8009284 <USB_SetDevSpeed>
 8008ff2:	e008      	b.n	8009006 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f944 	bl	8009284 <USB_SetDevSpeed>
 8008ffc:	e003      	b.n	8009006 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ffe:	2103      	movs	r1, #3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f93f 	bl	8009284 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009006:	2110      	movs	r1, #16
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f8f3 	bl	80091f4 <USB_FlushTxFifo>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f911 	bl	8009240 <USB_FlushRxFifo>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902e:	461a      	mov	r2, r3
 8009030:	2300      	movs	r3, #0
 8009032:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800903a:	461a      	mov	r2, r3
 800903c:	2300      	movs	r3, #0
 800903e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009046:	461a      	mov	r2, r3
 8009048:	2300      	movs	r3, #0
 800904a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800904c:	2300      	movs	r3, #0
 800904e:	613b      	str	r3, [r7, #16]
 8009050:	e043      	b.n	80090da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	015a      	lsls	r2, r3, #5
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	4413      	add	r3, r2
 800905a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009068:	d118      	bne.n	800909c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4413      	add	r3, r2
 8009078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800907c:	461a      	mov	r2, r3
 800907e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	e013      	b.n	80090ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009092:	461a      	mov	r2, r3
 8009094:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	e008      	b.n	80090ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a8:	461a      	mov	r2, r3
 80090aa:	2300      	movs	r3, #0
 80090ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	015a      	lsls	r2, r3, #5
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	4413      	add	r3, r2
 80090b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ba:	461a      	mov	r2, r3
 80090bc:	2300      	movs	r3, #0
 80090be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090cc:	461a      	mov	r2, r3
 80090ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	3301      	adds	r3, #1
 80090d8:	613b      	str	r3, [r7, #16]
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d3b7      	bcc.n	8009052 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090e2:	2300      	movs	r3, #0
 80090e4:	613b      	str	r3, [r7, #16]
 80090e6:	e043      	b.n	8009170 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090fe:	d118      	bne.n	8009132 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10a      	bne.n	800911c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009112:	461a      	mov	r2, r3
 8009114:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	e013      	b.n	8009144 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009128:	461a      	mov	r2, r3
 800912a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	e008      	b.n	8009144 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913e:	461a      	mov	r2, r3
 8009140:	2300      	movs	r3, #0
 8009142:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009150:	461a      	mov	r2, r3
 8009152:	2300      	movs	r3, #0
 8009154:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009162:	461a      	mov	r2, r3
 8009164:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009168:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	3301      	adds	r3, #1
 800916e:	613b      	str	r3, [r7, #16]
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	429a      	cmp	r2, r3
 8009176:	d3b7      	bcc.n	80090e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800918a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009198:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	2b00      	cmp	r3, #0
 800919e:	d105      	bne.n	80091ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	f043 0210 	orr.w	r2, r3, #16
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	699a      	ldr	r2, [r3, #24]
 80091b0:	4b0f      	ldr	r3, [pc, #60]	; (80091f0 <USB_DevInit+0x2c4>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80091b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d005      	beq.n	80091ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	f043 0208 	orr.w	r2, r3, #8
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80091ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d107      	bne.n	80091e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091d8:	f043 0304 	orr.w	r3, r3, #4
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091ec:	b004      	add	sp, #16
 80091ee:	4770      	bx	lr
 80091f0:	803c3800 	.word	0x803c3800

080091f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	019b      	lsls	r3, r3, #6
 8009206:	f043 0220 	orr.w	r2, r3, #32
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3301      	adds	r3, #1
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4a09      	ldr	r2, [pc, #36]	; (800923c <USB_FlushTxFifo+0x48>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d901      	bls.n	8009220 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e006      	b.n	800922e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	f003 0320 	and.w	r3, r3, #32
 8009228:	2b20      	cmp	r3, #32
 800922a:	d0f0      	beq.n	800920e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	00030d40 	.word	0x00030d40

08009240 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2210      	movs	r2, #16
 8009250:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3301      	adds	r3, #1
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4a09      	ldr	r2, [pc, #36]	; (8009280 <USB_FlushRxFifo+0x40>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d901      	bls.n	8009264 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e006      	b.n	8009272 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f003 0310 	and.w	r3, r3, #16
 800926c:	2b10      	cmp	r3, #16
 800926e:	d0f0      	beq.n	8009252 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	00030d40 	.word	0x00030d40

08009284 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092a4:	4313      	orrs	r3, r2
 80092a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092d0:	f043 0302 	orr.w	r3, r3, #2
 80092d4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80092d6:	2003      	movs	r0, #3
 80092d8:	f7f9 f924 	bl	8002524 <HAL_Delay>

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3301      	adds	r3, #1
 80092f8:	60fb      	str	r3, [r7, #12]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4a13      	ldr	r2, [pc, #76]	; (800934c <USB_CoreReset+0x64>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d901      	bls.n	8009306 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e01b      	b.n	800933e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	daf2      	bge.n	80092f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	f043 0201 	orr.w	r2, r3, #1
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3301      	adds	r3, #1
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4a09      	ldr	r2, [pc, #36]	; (800934c <USB_CoreReset+0x64>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d901      	bls.n	8009330 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e006      	b.n	800933e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b01      	cmp	r3, #1
 800933a:	d0f0      	beq.n	800931e <USB_CoreReset+0x36>

  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	00030d40 	.word	0x00030d40

08009350 <MPU9250_getHz>:

// mpu global instance
struct MPU9250 iMPU9250 = {0, };


uint16_t MPU9250_getHz(){ // call this func 1hz
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
	uint16_t temp = MPU9250_hzcnt;
 8009356:	4b06      	ldr	r3, [pc, #24]	; (8009370 <MPU9250_getHz+0x20>)
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	80fb      	strh	r3, [r7, #6]
	MPU9250_hzcnt = 0;
 800935c:	4b04      	ldr	r3, [pc, #16]	; (8009370 <MPU9250_getHz+0x20>)
 800935e:	2200      	movs	r2, #0
 8009360:	801a      	strh	r2, [r3, #0]
	return temp;
 8009362:	88fb      	ldrh	r3, [r7, #6]
}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	20000260 	.word	0x20000260

08009374 <MPU9250_init>:

void MPU9250_init(struct MPU9250* obj, I2C_HandleTypeDef *phi2c){
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
//	obj->gyroBias[3] = {0, 0, 0}
//	obj->accelBias[3] = {0, 0, 0}; // Bias corrections for gyro and accelerometer

	obj->phi2c = phi2c;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	601a      	str	r2, [r3, #0]

	obj->Ascale = AFS_2G;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	711a      	strb	r2, [r3, #4]
	obj->Gscale = GFS_250DPS;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	715a      	strb	r2, [r3, #5]
	obj->Mscale = MFS_14BITS;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	719a      	strb	r2, [r3, #6]
	obj->Mmode = 0x06;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2206      	movs	r2, #6
 800939a:	71da      	strb	r2, [r3, #7]

	obj->initQ[0] = 1;//initial value
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80093a2:	675a      	str	r2, [r3, #116]	; 0x74
	obj->initQ[1] = 0;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f04f 0200 	mov.w	r2, #0
 80093aa:	679a      	str	r2, [r3, #120]	; 0x78
	obj->initQ[2] = 0;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f04f 0200 	mov.w	r2, #0
 80093b2:	67da      	str	r2, [r3, #124]	; 0x7c
	obj->initQ[3] = 0;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f04f 0200 	mov.w	r2, #0
 80093ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	obj->status = MPU9250_disable;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	MPU9250_resetMPU9250(obj);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fa64 	bl	8009894 <MPU9250_resetMPU9250>
//	MPU9250_calibrateMPU9250(obj);

	MPU9250_initMPU9250(obj); // calculate ay, ac bias
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fae7 	bl	80099a0 <MPU9250_initMPU9250>
	MPU9250_initAK8963(obj);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fa70 	bl	80098b8 <MPU9250_initAK8963>

	MPU9250_getMres(obj);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f9dd 	bl	8009798 <MPU9250_getMres>
	MPU9250_getGres(obj);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f9f8 	bl	80097d4 <MPU9250_getGres>
	MPU9250_getAres(obj);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fa27 	bl	8009838 <MPU9250_getAres>
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <MPU9250_writeByte>:

uint16_t MPU9250_writeByte(struct MPU9250* obj, uint8_t address, uint8_t subAddress, uint8_t data)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b086      	sub	sp, #24
 80093f6:	af02      	add	r7, sp, #8
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	4608      	mov	r0, r1
 80093fc:	4611      	mov	r1, r2
 80093fe:	461a      	mov	r2, r3
 8009400:	4603      	mov	r3, r0
 8009402:	70fb      	strb	r3, [r7, #3]
 8009404:	460b      	mov	r3, r1
 8009406:	70bb      	strb	r3, [r7, #2]
 8009408:	4613      	mov	r3, r2
 800940a:	707b      	strb	r3, [r7, #1]
	// Creating dynamic array to store regAddr + data in one buffer
	#define SIZE 1
	uint8_t * dynBuffer;
	dynBuffer = (uint8_t *) malloc(sizeof(uint8_t) * (SIZE+1));
 800940c:	2002      	movs	r0, #2
 800940e:	f003 f931 	bl	800c674 <malloc>
 8009412:	4603      	mov	r3, r0
 8009414:	60fb      	str	r3, [r7, #12]
	dynBuffer[0] = subAddress;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	78ba      	ldrb	r2, [r7, #2]
 800941a:	701a      	strb	r2, [r3, #0]

	// copy array
	memcpy(dynBuffer+1, &data, sizeof(uint8_t) * SIZE);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3301      	adds	r3, #1
 8009420:	787a      	ldrb	r2, [r7, #1]
 8009422:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(obj->phi2c, address, dynBuffer, SIZE+1, DEFAULT_TIMEOUT);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	b299      	uxth	r1, r3
 800942c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	2302      	movs	r3, #2
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	f7fa fcb1 	bl	8003d9c <HAL_I2C_Master_Transmit>
 800943a:	4603      	mov	r3, r0
 800943c:	72fb      	strb	r3, [r7, #11]
	free(dynBuffer);
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f003 f920 	bl	800c684 <free>
	return status == HAL_OK;
 8009444:	7afb      	ldrb	r3, [r7, #11]
 8009446:	2b00      	cmp	r3, #0
 8009448:	bf0c      	ite	eq
 800944a:	2301      	moveq	r3, #1
 800944c:	2300      	movne	r3, #0
 800944e:	b2db      	uxtb	r3, r3
 8009450:	b29b      	uxth	r3, r3
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <MPU9250_readBytes>:



void MPU9250_readBytes(struct MPU9250* obj, uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 800945a:	b590      	push	{r4, r7, lr}
 800945c:	b08b      	sub	sp, #44	; 0x2c
 800945e:	af02      	add	r7, sp, #8
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	4608      	mov	r0, r1
 8009464:	4611      	mov	r1, r2
 8009466:	461a      	mov	r2, r3
 8009468:	4603      	mov	r3, r0
 800946a:	70fb      	strb	r3, [r7, #3]
 800946c:	460b      	mov	r3, r1
 800946e:	70bb      	strb	r3, [r7, #2]
 8009470:	4613      	mov	r3, r2
 8009472:	707b      	strb	r3, [r7, #1]
	char data[14];
	char data_write[1];
	data_write[0] = subAddress;
 8009474:	78bb      	ldrb	r3, [r7, #2]
 8009476:	723b      	strb	r3, [r7, #8]

	//    uint16_t tout = timeout > 0 ? timeout : DEFAULT_TIMEOUT;
	HAL_I2C_Master_Transmit(obj->phi2c, address, (uint8_t*)data_write, 1, DEFAULT_TIMEOUT);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6818      	ldr	r0, [r3, #0]
 800947c:	78fb      	ldrb	r3, [r7, #3]
 800947e:	b299      	uxth	r1, r3
 8009480:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009484:	f107 0208 	add.w	r2, r7, #8
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	2301      	movs	r3, #1
 800948c:	f7fa fc86 	bl	8003d9c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(obj->phi2c, address, (uint8_t*)data, count, DEFAULT_TIMEOUT);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	b299      	uxth	r1, r3
 8009498:	787b      	ldrb	r3, [r7, #1]
 800949a:	b29b      	uxth	r3, r3
 800949c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80094a0:	4614      	mov	r4, r2
 80094a2:	f107 020c 	add.w	r2, r7, #12
 80094a6:	9400      	str	r4, [sp, #0]
 80094a8:	f7fa fd76 	bl	8003f98 <HAL_I2C_Master_Receive>
	for(int ii = 0; ii < count; ii++) {
 80094ac:	2300      	movs	r3, #0
 80094ae:	61fb      	str	r3, [r7, #28]
 80094b0:	e00b      	b.n	80094ca <MPU9250_readBytes+0x70>
		dest[ii] = data[ii];
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b6:	4413      	add	r3, r2
 80094b8:	f107 010c 	add.w	r1, r7, #12
 80094bc:	69fa      	ldr	r2, [r7, #28]
 80094be:	440a      	add	r2, r1
 80094c0:	7812      	ldrb	r2, [r2, #0]
 80094c2:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii < count; ii++) {
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	3301      	adds	r3, #1
 80094c8:	61fb      	str	r3, [r7, #28]
 80094ca:	787b      	ldrb	r3, [r7, #1]
 80094cc:	69fa      	ldr	r2, [r7, #28]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	dbef      	blt.n	80094b2 <MPU9250_readBytes+0x58>
	}
}
 80094d2:	bf00      	nop
 80094d4:	3724      	adds	r7, #36	; 0x24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd90      	pop	{r4, r7, pc}

080094da <MPU9250_readByte>:

char MPU9250_readByte(struct MPU9250* obj, uint8_t address, uint8_t subAddress)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b086      	sub	sp, #24
 80094de:	af02      	add	r7, sp, #8
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	460b      	mov	r3, r1
 80094e4:	70fb      	strb	r3, [r7, #3]
 80094e6:	4613      	mov	r3, r2
 80094e8:	70bb      	strb	r3, [r7, #2]
	char data[1]; // `data` will store the register data
	MPU9250_readBytes(obj, address, subAddress, 1, (uint8_t*)data);
 80094ea:	78ba      	ldrb	r2, [r7, #2]
 80094ec:	78f9      	ldrb	r1, [r7, #3]
 80094ee:	f107 030c 	add.w	r3, r7, #12
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	2301      	movs	r3, #1
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7ff ffaf 	bl	800945a <MPU9250_readBytes>
	return data[1];
 80094fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <MPU9250_readMPU9250IT>:

void MPU9250_readMPU9250IT(struct MPU9250* obj){
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af02      	add	r7, sp, #8
 800950c:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(obj->phi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, obj->agtBuffer, 14);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6818      	ldr	r0, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	3388      	adds	r3, #136	; 0x88
 8009516:	220e      	movs	r2, #14
 8009518:	9201      	str	r2, [sp, #4]
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	2301      	movs	r3, #1
 800951e:	223b      	movs	r2, #59	; 0x3b
 8009520:	21d0      	movs	r1, #208	; 0xd0
 8009522:	f7fa ff5f 	bl	80043e4 <HAL_I2C_Mem_Read_IT>
}
 8009526:	bf00      	nop
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <MPU9250_callbackMPU9250IT>:

uint8_t MPU9250_callbackMPU9250IT(struct MPU9250* obj){
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
	obj->accelCount[0] = (((int16_t)obj->agtBuffer[0]) << 8) | obj->agtBuffer[1];
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800953e:	021b      	lsls	r3, r3, #8
 8009540:	b21a      	sxth	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009548:	b21b      	sxth	r3, r3
 800954a:	4313      	orrs	r3, r2
 800954c:	b21a      	sxth	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	829a      	strh	r2, [r3, #20]
	obj->accelCount[1] = (((int16_t)obj->agtBuffer[2]) << 8) | obj->agtBuffer[3];
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8009558:	021b      	lsls	r3, r3, #8
 800955a:	b21a      	sxth	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8009562:	b21b      	sxth	r3, r3
 8009564:	4313      	orrs	r3, r2
 8009566:	b21a      	sxth	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	82da      	strh	r2, [r3, #22]
	obj->accelCount[2] = (((int16_t)obj->agtBuffer[4]) << 8) | obj->agtBuffer[5];
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009572:	021b      	lsls	r3, r3, #8
 8009574:	b21a      	sxth	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800957c:	b21b      	sxth	r3, r3
 800957e:	4313      	orrs	r3, r2
 8009580:	b21a      	sxth	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	831a      	strh	r2, [r3, #24]
	obj->tmpCount = (int16_t) (obj->agtBuffer[6] << 8 | obj->agtBuffer[7]);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800958c:	021b      	lsls	r3, r3, #8
 800958e:	b21a      	sxth	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8009596:	b21b      	sxth	r3, r3
 8009598:	4313      	orrs	r3, r2
 800959a:	b21a      	sxth	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	84da      	strh	r2, [r3, #38]	; 0x26
	obj->gyroCount[0] = (((int16_t)obj->agtBuffer[8]) << 8) | obj->agtBuffer[9];
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80095a6:	021b      	lsls	r3, r3, #8
 80095a8:	b21a      	sxth	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80095b0:	b21b      	sxth	r3, r3
 80095b2:	4313      	orrs	r3, r2
 80095b4:	b21a      	sxth	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	835a      	strh	r2, [r3, #26]
	obj->gyroCount[1] = (((int16_t)obj->agtBuffer[10]) << 8) | obj->agtBuffer[11];
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80095c0:	021b      	lsls	r3, r3, #8
 80095c2:	b21a      	sxth	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80095ca:	b21b      	sxth	r3, r3
 80095cc:	4313      	orrs	r3, r2
 80095ce:	b21a      	sxth	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	839a      	strh	r2, [r3, #28]
	obj->gyroCount[2] = (((int16_t)obj->agtBuffer[12]) << 8) | obj->agtBuffer[13];
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80095da:	021b      	lsls	r3, r3, #8
 80095dc:	b21a      	sxth	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80095e4:	b21b      	sxth	r3, r3
 80095e6:	4313      	orrs	r3, r2
 80095e8:	b21a      	sxth	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	83da      	strh	r2, [r3, #30]

	if((!(obj->accelCount[0])&!(obj->accelCount[1])&!(obj->accelCount[2]))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	b21a      	sxth	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009604:	4313      	orrs	r3, r2
 8009606:	b21b      	sxth	r3, r3
	   |(!(obj->gyroCount[0])&!(obj->gyroCount[1])&!(obj->gyroCount[2]))){
 8009608:	2b00      	cmp	r3, #0
 800960a:	bf0c      	ite	eq
 800960c:	2301      	moveq	r3, #1
 800960e:	2300      	movne	r3, #0
 8009610:	b2da      	uxtb	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800961e:	430b      	orrs	r3, r1
 8009620:	b219      	sxth	r1, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009628:	430b      	orrs	r3, r1
 800962a:	b21b      	sxth	r3, r3
 800962c:	2b00      	cmp	r3, #0
 800962e:	bf0c      	ite	eq
 8009630:	2301      	moveq	r3, #1
 8009632:	2300      	movne	r3, #0
 8009634:	b2db      	uxtb	r3, r3
 8009636:	4313      	orrs	r3, r2
 8009638:	b2db      	uxtb	r3, r3
	if((!(obj->accelCount[0])&!(obj->accelCount[1])&!(obj->accelCount[2]))
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <MPU9250_callbackMPU9250IT+0x112>
		return 0;
 800963e:	2300      	movs	r3, #0
 8009640:	e09c      	b.n	800977c <MPU9250_callbackMPU9250IT+0x24c>
//	Gx = (rawGx-baseGyX) / 131.0;
//	Gy = (rawGy-baseGyY) / 131.0;
//	Gz = (rawGz-baseGyZ) / 131.0;

	// Now we'll calculate the accleration value into actual g's
	obj->ax = ((float)obj->accelCount[0]*obj->aRes - obj->accelBias[0]);  // get actual g value, this depends on scale being set
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009648:	ee07 3a90 	vmov	s15, r3
 800964c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	edd3 7a02 	vldr	s15, [r3, #8]
 8009656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	obj->ay = ((float)obj->accelCount[1]*obj->aRes - obj->accelBias[1]);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009670:	ee07 3a90 	vmov	s15, r3
 8009674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	edd3 7a02 	vldr	s15, [r3, #8]
 800967e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	obj->az = ((float)obj->accelCount[2]*obj->aRes - obj->accelBias[2]);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009698:	ee07 3a90 	vmov	s15, r3
 800969c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80096a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80096b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	obj->tmp = (float) ((int16_t) obj->tmpCount / (float) 340.0 + (float) 36.53);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80096c0:	ee07 3a90 	vmov	s15, r3
 80096c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096c8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009788 <MPU9250_callbackMPU9250IT+0x258>
 80096cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80096d0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800978c <MPU9250_callbackMPU9250IT+0x25c>
 80096d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	// Calculate the gyro value into actual degrees per second
	obj->gx = MPU9250_DEG2RAD*((float)obj->gyroCount[0]*obj->gRes - obj->gyroBias[0]);  // get actual gyro value, this depends on scale being set
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80096f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80096fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009700:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8009790 <MPU9250_callbackMPU9250IT+0x260>
 8009704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	obj->gy = MPU9250_DEG2RAD*((float)obj->gyroCount[1]*obj->gRes - obj->gyroBias[1]);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009722:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800972c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009730:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8009790 <MPU9250_callbackMPU9250IT+0x260>
 8009734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	obj->gz = MPU9250_DEG2RAD*((float)obj->gyroCount[2]*obj->gRes - obj->gyroBias[2]);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009744:	ee07 3a90 	vmov	s15, r3
 8009748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800975c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009760:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8009790 <MPU9250_callbackMPU9250IT+0x260>
 8009764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

	MPU9250_hzcnt++;
 800976e:	4b09      	ldr	r3, [pc, #36]	; (8009794 <MPU9250_callbackMPU9250IT+0x264>)
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	3301      	adds	r3, #1
 8009774:	b29a      	uxth	r2, r3
 8009776:	4b07      	ldr	r3, [pc, #28]	; (8009794 <MPU9250_callbackMPU9250IT+0x264>)
 8009778:	801a      	strh	r2, [r3, #0]
	return 1;
 800977a:	2301      	movs	r3, #1
}
 800977c:	4618      	mov	r0, r3
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	43aa0000 	.word	0x43aa0000
 800978c:	42121eb8 	.word	0x42121eb8
 8009790:	3c8efa35 	.word	0x3c8efa35
 8009794:	20000260 	.word	0x20000260

08009798 <MPU9250_getMres>:

void MPU9250_getMres(struct MPU9250* obj) {
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
	switch (obj->Mscale)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	799b      	ldrb	r3, [r3, #6]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <MPU9250_getMres+0x16>
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d004      	beq.n	80097b6 <MPU9250_getMres+0x1e>
		  break;
	case MFS_16BITS:
		  obj->mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 80097ac:	e007      	b.n	80097be <MPU9250_getMres+0x26>
		  obj->mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a06      	ldr	r2, [pc, #24]	; (80097cc <MPU9250_getMres+0x34>)
 80097b2:	611a      	str	r2, [r3, #16]
		  break;
 80097b4:	e003      	b.n	80097be <MPU9250_getMres+0x26>
		  obj->mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a05      	ldr	r2, [pc, #20]	; (80097d0 <MPU9250_getMres+0x38>)
 80097ba:	611a      	str	r2, [r3, #16]
		  break;
 80097bc:	bf00      	nop
}
 80097be:	bf00      	nop
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	40bfebff 	.word	0x40bfebff
 80097d0:	3fbfebff 	.word	0x3fbfebff

080097d4 <MPU9250_getGres>:

void MPU9250_getGres(struct MPU9250* obj) {
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  switch (obj->Gscale)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	795b      	ldrb	r3, [r3, #5]
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d81b      	bhi.n	800981c <MPU9250_getGres+0x48>
 80097e4:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <MPU9250_getGres+0x18>)
 80097e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ea:	bf00      	nop
 80097ec:	080097fd 	.word	0x080097fd
 80097f0:	08009805 	.word	0x08009805
 80097f4:	0800980d 	.word	0x0800980d
 80097f8:	08009815 	.word	0x08009815
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
    	  obj->gRes = 250.0/32768.0;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a0a      	ldr	r2, [pc, #40]	; (8009828 <MPU9250_getGres+0x54>)
 8009800:	60da      	str	r2, [r3, #12]
          break;
 8009802:	e00b      	b.n	800981c <MPU9250_getGres+0x48>
    case GFS_500DPS:
    	  obj->gRes = 500.0/32768.0;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a09      	ldr	r2, [pc, #36]	; (800982c <MPU9250_getGres+0x58>)
 8009808:	60da      	str	r2, [r3, #12]
          break;
 800980a:	e007      	b.n	800981c <MPU9250_getGres+0x48>
    case GFS_1000DPS:
    	  obj->gRes = 1000.0/32768.0;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a08      	ldr	r2, [pc, #32]	; (8009830 <MPU9250_getGres+0x5c>)
 8009810:	60da      	str	r2, [r3, #12]
          break;
 8009812:	e003      	b.n	800981c <MPU9250_getGres+0x48>
    case GFS_2000DPS:
    	  obj->gRes = 2000.0/32768.0;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a07      	ldr	r2, [pc, #28]	; (8009834 <MPU9250_getGres+0x60>)
 8009818:	60da      	str	r2, [r3, #12]
          break;
 800981a:	bf00      	nop
  }
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	3bfa0000 	.word	0x3bfa0000
 800982c:	3c7a0000 	.word	0x3c7a0000
 8009830:	3cfa0000 	.word	0x3cfa0000
 8009834:	3d7a0000 	.word	0x3d7a0000

08009838 <MPU9250_getAres>:


void MPU9250_getAres(struct MPU9250* obj) {
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  switch (obj->Ascale)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	791b      	ldrb	r3, [r3, #4]
 8009844:	2b03      	cmp	r3, #3
 8009846:	d81f      	bhi.n	8009888 <MPU9250_getAres+0x50>
 8009848:	a201      	add	r2, pc, #4	; (adr r2, 8009850 <MPU9250_getAres+0x18>)
 800984a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984e:	bf00      	nop
 8009850:	08009861 	.word	0x08009861
 8009854:	0800986b 	.word	0x0800986b
 8009858:	08009875 	.word	0x08009875
 800985c:	0800987f 	.word	0x0800987f
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	  obj->aRes = 2.0/32768.0;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8009866:	609a      	str	r2, [r3, #8]
          break;
 8009868:	e00e      	b.n	8009888 <MPU9250_getAres+0x50>
    case AFS_4G:
    	  obj->aRes = 4.0/32768.0;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8009870:	609a      	str	r2, [r3, #8]
          break;
 8009872:	e009      	b.n	8009888 <MPU9250_getAres+0x50>
    case AFS_8G:
    	  obj->aRes = 8.0/32768.0;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800987a:	609a      	str	r2, [r3, #8]
          break;
 800987c:	e004      	b.n	8009888 <MPU9250_getAres+0x50>
    case AFS_16G:
    	  obj->aRes = 16.0/32768.0;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8009884:	609a      	str	r2, [r3, #8]
          break;
 8009886:	bf00      	nop
  }
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <MPU9250_resetMPU9250>:
  obj->tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return obj->tmpCount;
}


void MPU9250_resetMPU9250(struct MPU9250* obj) {
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
    // reset device
    MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800989c:	2380      	movs	r3, #128	; 0x80
 800989e:	226b      	movs	r2, #107	; 0x6b
 80098a0:	21d0      	movs	r1, #208	; 0xd0
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7ff fda5 	bl	80093f2 <MPU9250_writeByte>
    HAL_Delay(10);
 80098a8:	200a      	movs	r0, #10
 80098aa:	f7f8 fe3b 	bl	8002524 <HAL_Delay>
}
 80098ae:	bf00      	nop
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <MPU9250_initAK8963>:

void MPU9250_initAK8963(struct MPU9250* obj)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af02      	add	r7, sp, #8
 80098be:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 80098c0:	2300      	movs	r3, #0
 80098c2:	220a      	movs	r2, #10
 80098c4:	2118      	movs	r1, #24
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff fd93 	bl	80093f2 <MPU9250_writeByte>
	HAL_Delay(10);
 80098cc:	200a      	movs	r0, #10
 80098ce:	f7f8 fe29 	bl	8002524 <HAL_Delay>
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 80098d2:	230f      	movs	r3, #15
 80098d4:	220a      	movs	r2, #10
 80098d6:	2118      	movs	r1, #24
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff fd8a 	bl	80093f2 <MPU9250_writeByte>
	HAL_Delay(10);
 80098de:	200a      	movs	r0, #10
 80098e0:	f7f8 fe20 	bl	8002524 <HAL_Delay>
	MPU9250_readBytes(obj, AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 80098e4:	f107 030c 	add.w	r3, r7, #12
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	2303      	movs	r3, #3
 80098ec:	2210      	movs	r2, #16
 80098ee:	2118      	movs	r1, #24
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff fdb2 	bl	800945a <MPU9250_readBytes>
	obj->magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 80098f6:	7b3b      	ldrb	r3, [r7, #12]
 80098f8:	3b80      	subs	r3, #128	; 0x80
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009902:	eddf 6a26 	vldr	s13, [pc, #152]	; 800999c <MPU9250_initAK8963+0xe4>
 8009906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800990a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800990e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	obj->magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8009918:	7b7b      	ldrb	r3, [r7, #13]
 800991a:	3b80      	subs	r3, #128	; 0x80
 800991c:	ee07 3a90 	vmov	s15, r3
 8009920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009924:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800999c <MPU9250_initAK8963+0xe4>
 8009928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800992c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009930:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	obj->magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	3b80      	subs	r3, #128	; 0x80
 800993e:	ee07 3a90 	vmov	s15, r3
 8009942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009946:	eddf 6a15 	vldr	s13, [pc, #84]	; 800999c <MPU9250_initAK8963+0xe4>
 800994a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800994e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009952:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 800995c:	2300      	movs	r3, #0
 800995e:	220a      	movs	r2, #10
 8009960:	2118      	movs	r1, #24
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7ff fd45 	bl	80093f2 <MPU9250_writeByte>
	HAL_Delay(10);
 8009968:	200a      	movs	r0, #10
 800996a:	f7f8 fddb 	bl	8002524 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, obj->Mscale << 4 | obj->Mmode); // Set magnetometer data resolution and sample ODR
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	799b      	ldrb	r3, [r3, #6]
 8009972:	011b      	lsls	r3, r3, #4
 8009974:	b25a      	sxtb	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	79db      	ldrb	r3, [r3, #7]
 800997a:	b25b      	sxtb	r3, r3
 800997c:	4313      	orrs	r3, r2
 800997e:	b25b      	sxtb	r3, r3
 8009980:	b2db      	uxtb	r3, r3
 8009982:	220a      	movs	r2, #10
 8009984:	2118      	movs	r1, #24
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff fd33 	bl	80093f2 <MPU9250_writeByte>
	HAL_Delay(10);
 800998c:	200a      	movs	r0, #10
 800998e:	f7f8 fdc9 	bl	8002524 <HAL_Delay>
}
 8009992:	bf00      	nop
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	43800000 	.word	0x43800000

080099a0 <MPU9250_initMPU9250>:


void MPU9250_initMPU9250(struct MPU9250* obj)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80099a8:	2300      	movs	r3, #0
 80099aa:	226b      	movs	r2, #107	; 0x6b
 80099ac:	21d0      	movs	r1, #208	; 0xd0
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7ff fd1f 	bl	80093f2 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80099b4:	2064      	movs	r0, #100	; 0x64
 80099b6:	f7f8 fdb5 	bl	8002524 <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80099ba:	2301      	movs	r3, #1
 80099bc:	226b      	movs	r2, #107	; 0x6b
 80099be:	21d0      	movs	r1, #208	; 0xd0
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff fd16 	bl	80093f2 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(obj, MPU9250_ADDRESS, CONFIG, 0x03);
 80099c6:	2303      	movs	r3, #3
 80099c8:	221a      	movs	r2, #26
 80099ca:	21d0      	movs	r1, #208	; 0xd0
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff fd10 	bl	80093f2 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(obj, MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 80099d2:	2304      	movs	r3, #4
 80099d4:	2219      	movs	r2, #25
 80099d6:	21d0      	movs	r1, #208	; 0xd0
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff fd0a 	bl	80093f2 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(obj, MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 80099de:	221b      	movs	r2, #27
 80099e0:	21d0      	movs	r1, #208	; 0xd0
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff fd79 	bl	80094da <MPU9250_readByte>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73fb      	strb	r3, [r7, #15]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	f023 0302 	bic.w	r3, r3, #2
 80099f2:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x18; // Clear AFS bits [4:3]
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	f023 0318 	bic.w	r3, r3, #24
 80099fa:	73fb      	strb	r3, [r7, #15]
  c = c | obj->Gscale << 3; // Set full scale range for the gyro
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	795b      	ldrb	r3, [r3, #5]
 8009a00:	00db      	lsls	r3, r3, #3
 8009a02:	b25a      	sxtb	r2, r3
 8009a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	b25b      	sxtb	r3, r3
 8009a0c:	73fb      	strb	r3, [r7, #15]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  MPU9250_writeByte(obj, MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8009a0e:	7bfb      	ldrb	r3, [r7, #15]
 8009a10:	221b      	movs	r2, #27
 8009a12:	21d0      	movs	r1, #208	; 0xd0
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff fcec 	bl	80093f2 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8009a1a:	221c      	movs	r2, #28
 8009a1c:	21d0      	movs	r1, #208	; 0xd0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff fd5b 	bl	80094da <MPU9250_readByte>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	f023 0318 	bic.w	r3, r3, #24
 8009a2e:	73fb      	strb	r3, [r7, #15]
  c = c | obj->Ascale << 3; // Set full scale range for the accelerometer
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	791b      	ldrb	r3, [r3, #4]
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	b25a      	sxtb	r2, r3
 8009a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	b25b      	sxtb	r3, r3
 8009a40:	73fb      	strb	r3, [r7, #15]
  MPU9250_writeByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	221c      	movs	r2, #28
 8009a46:	21d0      	movs	r1, #208	; 0xd0
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7ff fcd2 	bl	80093f2 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8009a4e:	221d      	movs	r2, #29
 8009a50:	21d0      	movs	r1, #208	; 0xd0
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff fd41 	bl	80094da <MPU9250_readByte>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	f023 030f 	bic.w	r3, r3, #15
 8009a62:	73fb      	strb	r3, [r7, #15]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
 8009a66:	f043 0303 	orr.w	r3, r3, #3
 8009a6a:	73fb      	strb	r3, [r7, #15]
  MPU9250_writeByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	221d      	movs	r2, #29
 8009a70:	21d0      	movs	r1, #208	; 0xd0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff fcbd 	bl	80093f2 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(obj, MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8009a78:	2322      	movs	r3, #34	; 0x22
 8009a7a:	2237      	movs	r2, #55	; 0x37
 8009a7c:	21d0      	movs	r1, #208	; 0xd0
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff fcb7 	bl	80093f2 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8009a84:	2301      	movs	r3, #1
 8009a86:	2238      	movs	r2, #56	; 0x38
 8009a88:	21d0      	movs	r1, #208	; 0xd0
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7ff fcb1 	bl	80093f2 <MPU9250_writeByte>
}
 8009a90:	bf00      	nop
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <MPU9250_print>:
   for (int i = 0; i < 3; i++) {
     destination[i] = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.; // Report percent differences
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
}
void MPU9250_print(struct MPU9250* obj, uint8_t type){//type 0: raw, 1:after calli value
 8009a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a9c:	b092      	sub	sp, #72	; 0x48
 8009a9e:	af0a      	add	r7, sp, #40	; 0x28
 8009aa0:	6178      	str	r0, [r7, #20]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	74fb      	strb	r3, [r7, #19]
	if(type == 0){
 8009aa6:	7cfb      	ldrb	r3, [r7, #19]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d12b      	bne.n	8009b04 <MPU9250_print+0x6c>
		for(int i=0; i<3; i++){
 8009aac:	2300      	movs	r3, #0
 8009aae:	61fb      	str	r3, [r7, #28]
 8009ab0:	e00d      	b.n	8009ace <MPU9250_print+0x36>
			printf("%d ", obj->accelCount[i]);
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	3308      	adds	r3, #8
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	4413      	add	r3, r2
 8009abc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4832      	ldr	r0, [pc, #200]	; (8009b8c <MPU9250_print+0xf4>)
 8009ac4:	f003 fafe 	bl	800d0c4 <iprintf>
		for(int i=0; i<3; i++){
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	3301      	adds	r3, #1
 8009acc:	61fb      	str	r3, [r7, #28]
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	ddee      	ble.n	8009ab2 <MPU9250_print+0x1a>
		}
		for(int i=0; i<3; i++){
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	61bb      	str	r3, [r7, #24]
 8009ad8:	e00d      	b.n	8009af6 <MPU9250_print+0x5e>
			printf("%d ", obj->gyroCount[i]);
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	330c      	adds	r3, #12
 8009ae0:	005b      	lsls	r3, r3, #1
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4828      	ldr	r0, [pc, #160]	; (8009b8c <MPU9250_print+0xf4>)
 8009aec:	f003 faea 	bl	800d0c4 <iprintf>
		for(int i=0; i<3; i++){
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	3301      	adds	r3, #1
 8009af4:	61bb      	str	r3, [r7, #24]
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	ddee      	ble.n	8009ada <MPU9250_print+0x42>
		}
		printf("\r\n");
 8009afc:	4824      	ldr	r0, [pc, #144]	; (8009b90 <MPU9250_print+0xf8>)
 8009afe:	f003 fb55 	bl	800d1ac <puts>
	}
	else if(type == 1){
		printf("%f %f %f, %f %f %f\r\n", obj->ax, obj->ay, obj->az, obj->gx, obj->gy, obj->gz);
	}
}
 8009b02:	e03d      	b.n	8009b80 <MPU9250_print+0xe8>
	else if(type == 1){
 8009b04:	7cfb      	ldrb	r3, [r7, #19]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d13a      	bne.n	8009b80 <MPU9250_print+0xe8>
		printf("%f %f %f, %f %f %f\r\n", obj->ax, obj->ay, obj->az, obj->gx, obj->gy, obj->gz);
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7f6 fd2a 	bl	8000568 <__aeabi_f2d>
 8009b14:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7f6 fd23 	bl	8000568 <__aeabi_f2d>
 8009b22:	4604      	mov	r4, r0
 8009b24:	460d      	mov	r5, r1
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7f6 fd1c 	bl	8000568 <__aeabi_f2d>
 8009b30:	4680      	mov	r8, r0
 8009b32:	4689      	mov	r9, r1
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7f6 fd15 	bl	8000568 <__aeabi_f2d>
 8009b3e:	4682      	mov	sl, r0
 8009b40:	468b      	mov	fp, r1
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7f6 fd0e 	bl	8000568 <__aeabi_f2d>
 8009b4c:	e9c7 0100 	strd	r0, r1, [r7]
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7f6 fd07 	bl	8000568 <__aeabi_f2d>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b62:	ed97 7b00 	vldr	d7, [r7]
 8009b66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b6a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8009b6e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009b72:	e9cd 4500 	strd	r4, r5, [sp]
 8009b76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b7a:	4806      	ldr	r0, [pc, #24]	; (8009b94 <MPU9250_print+0xfc>)
 8009b7c:	f003 faa2 	bl	800d0c4 <iprintf>
}
 8009b80:	bf00      	nop
 8009b82:	3720      	adds	r7, #32
 8009b84:	46bd      	mov	sp, r7
 8009b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b8a:	bf00      	nop
 8009b8c:	0800ef20 	.word	0x0800ef20
 8009b90:	0800ef24 	.word	0x0800ef24
 8009b94:	0800ef28 	.word	0x0800ef28

08009b98 <sensorHz_update>:
struct bootState iBootState;


// hz check
uint16_t imu_hz, mag_hz, sbus_hz, gps_hz, estimator_hz;
void sensorHz_update(){
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
	imu_hz = MPU9250_getHz();
 8009b9c:	f7ff fbd8 	bl	8009350 <MPU9250_getHz>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	4b08      	ldr	r3, [pc, #32]	; (8009bc8 <sensorHz_update+0x30>)
 8009ba6:	801a      	strh	r2, [r3, #0]
	estimator_hz = estimate_getHz(&iEstimate);
 8009ba8:	4808      	ldr	r0, [pc, #32]	; (8009bcc <sensorHz_update+0x34>)
 8009baa:	f000 f82d 	bl	8009c08 <estimate_getHz>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <sensorHz_update+0x38>)
 8009bb4:	801a      	strh	r2, [r3, #0]
	sbus_hz = sbus_getHz();
 8009bb6:	f000 fd51 	bl	800a65c <sbus_getHz>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <sensorHz_update+0x3c>)
 8009bc0:	801a      	strh	r2, [r3, #0]
}
 8009bc2:	bf00      	nop
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20000a54 	.word	0x20000a54
 8009bcc:	2000000c 	.word	0x2000000c
 8009bd0:	20000a5e 	.word	0x20000a5e
 8009bd4:	20000a56 	.word	0x20000a56

08009bd8 <sensorHz_print>:

void sensorHz_print(){
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	af00      	add	r7, sp, #0
	printf("imu: %uhz, estimator: %uhz, sbus_hz: %uhz\r\n", imu_hz, estimator_hz, sbus_hz);
 8009bdc:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <sensorHz_print+0x20>)
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	4619      	mov	r1, r3
 8009be2:	4b06      	ldr	r3, [pc, #24]	; (8009bfc <sensorHz_print+0x24>)
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	4b05      	ldr	r3, [pc, #20]	; (8009c00 <sensorHz_print+0x28>)
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	4805      	ldr	r0, [pc, #20]	; (8009c04 <sensorHz_print+0x2c>)
 8009bee:	f003 fa69 	bl	800d0c4 <iprintf>
}
 8009bf2:	bf00      	nop
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20000a54 	.word	0x20000a54
 8009bfc:	20000a5e 	.word	0x20000a5e
 8009c00:	20000a56 	.word	0x20000a56
 8009c04:	0800ef40 	.word	0x0800ef40

08009c08 <estimate_getHz>:
#include "estimate.h"
#include "algorithmCollection.h"

struct estimate iEstimate = {{1, 0, 0, 0}, 0, 0, 0, 0, 0, 0};

uint16_t estimate_getHz(struct estimate* e){ // call this func 1hz
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
	uint16_t temp = e->estimate_hzcnt;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c14:	81fb      	strh	r3, [r7, #14]
	e->estimate_hzcnt = 0;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	851a      	strh	r2, [r3, #40]	; 0x28
	return temp;
 8009c1c:	89fb      	ldrh	r3, [r7, #14]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3714      	adds	r7, #20
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
	...

08009c2c <estimate_update>:
//---------------------------------------------------------------------------------------------------
// Variable definitions

volatile float beta = betaDef;

void estimate_update(struct estimate* e, struct MPU9250* mpu9250){
 8009c2c:	b590      	push	{r4, r7, lr}
 8009c2e:	ed2d 8b06 	vpush	{d8-d10}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
	static struct junTimer timer;
	if(!timer.start){
 8009c3a:	4b3f      	ldr	r3, [pc, #252]	; (8009d38 <estimate_update+0x10c>)
 8009c3c:	791b      	ldrb	r3, [r3, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d103      	bne.n	8009c4a <estimate_update+0x1e>
		junTimer_tic(&timer);
 8009c42:	483d      	ldr	r0, [pc, #244]	; (8009d38 <estimate_update+0x10c>)
 8009c44:	f7f7 fabf 	bl	80011c6 <junTimer_tic>
 8009c48:	e070      	b.n	8009d2c <estimate_update+0x100>
		return;
	}

	MadgwickAHRSupdateIMU(e, mpu9250->gx, mpu9250->gy, mpu9250->gz
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	ed93 8a16 	vldr	s16, [r3, #88]	; 0x58
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	edd3 8a17 	vldr	s17, [r3, #92]	; 0x5c
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	ed93 9a18 	vldr	s18, [r3, #96]	; 0x60
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	edd3 9a13 	vldr	s19, [r3, #76]	; 0x4c
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	ed93 aa14 	vldr	s20, [r3, #80]	; 0x50
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	edd3 aa15 	vldr	s21, [r3, #84]	; 0x54
						, mpu9250->ax, mpu9250->ay, mpu9250->az, junTimer_toc(&timer)/1000.0);
 8009c6e:	4832      	ldr	r0, [pc, #200]	; (8009d38 <estimate_update+0x10c>)
 8009c70:	f7f7 fab9 	bl	80011e6 <junTimer_toc>
 8009c74:	4603      	mov	r3, r0
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7f6 fc54 	bl	8000524 <__aeabi_ui2d>
 8009c7c:	f04f 0200 	mov.w	r2, #0
 8009c80:	4b2e      	ldr	r3, [pc, #184]	; (8009d3c <estimate_update+0x110>)
 8009c82:	f7f6 fdf3 	bl	800086c <__aeabi_ddiv>
 8009c86:	4603      	mov	r3, r0
 8009c88:	460c      	mov	r4, r1
	MadgwickAHRSupdateIMU(e, mpu9250->gx, mpu9250->gy, mpu9250->gz
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	f7f6 ff9b 	bl	8000bc8 <__aeabi_d2f>
 8009c92:	4603      	mov	r3, r0
 8009c94:	ee03 3a10 	vmov	s6, r3
 8009c98:	eef0 2a6a 	vmov.f32	s5, s21
 8009c9c:	eeb0 2a4a 	vmov.f32	s4, s20
 8009ca0:	eef0 1a69 	vmov.f32	s3, s19
 8009ca4:	eeb0 1a49 	vmov.f32	s2, s18
 8009ca8:	eef0 0a68 	vmov.f32	s1, s17
 8009cac:	eeb0 0a48 	vmov.f32	s0, s16
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f845 	bl	8009d40 <MadgwickAHRSupdateIMU>

	float roll, pitch, yaw;
	quat2eul(e->bodyQ, &roll, &pitch, &yaw);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f107 030c 	add.w	r3, r7, #12
 8009cbc:	f107 0210 	add.w	r2, r7, #16
 8009cc0:	f107 0114 	add.w	r1, r7, #20
 8009cc4:	f7f7 f98c 	bl	8000fe0 <quat2eul>
	e->roll = -1*roll;//rpy vector
 8009cc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ccc:	eef1 7a67 	vneg.f32	s15, s15
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	edc3 7a04 	vstr	s15, [r3, #16]
	e->pitch = pitch;
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	615a      	str	r2, [r3, #20]
	e->yaw = -1*yaw;
 8009cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ce0:	eef1 7a67 	vneg.f32	s15, s15
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	edc3 7a06 	vstr	s15, [r3, #24]

	e->p = -mpu9250->gx;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009cf0:	eef1 7a67 	vneg.f32	s15, s15
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	edc3 7a07 	vstr	s15, [r3, #28]
	e->q = -mpu9250->gy;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8009d00:	eef1 7a67 	vneg.f32	s15, s15
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	edc3 7a08 	vstr	s15, [r3, #32]
	e->r = -mpu9250->gz;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8009d10:	eef1 7a67 	vneg.f32	s15, s15
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	e->estimate_hzcnt++;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d1e:	3301      	adds	r3, #1
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	851a      	strh	r2, [r3, #40]	; 0x28
	junTimer_tic(&timer);
 8009d26:	4804      	ldr	r0, [pc, #16]	; (8009d38 <estimate_update+0x10c>)
 8009d28:	f7f7 fa4d 	bl	80011c6 <junTimer_tic>
}
 8009d2c:	371c      	adds	r7, #28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	ecbd 8b06 	vpop	{d8-d10}
 8009d34:	bd90      	pop	{r4, r7, pc}
 8009d36:	bf00      	nop
 8009d38:	200002fc 	.word	0x200002fc
 8009d3c:	408f4000 	.word	0x408f4000

08009d40 <MadgwickAHRSupdateIMU>:

void estimate_print(struct estimate* e){
	printf("%f %f %f\r\n", e->roll, e->pitch, e->yaw);
}
void MadgwickAHRSupdateIMU(struct estimate* e, float gx, float gy, float gz, float ax, float ay, float az , float dt) { // dt : second
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b0a2      	sub	sp, #136	; 0x88
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	61f8      	str	r0, [r7, #28]
 8009d48:	ed87 0a06 	vstr	s0, [r7, #24]
 8009d4c:	edc7 0a05 	vstr	s1, [r7, #20]
 8009d50:	ed87 1a04 	vstr	s2, [r7, #16]
 8009d54:	edc7 1a03 	vstr	s3, [r7, #12]
 8009d58:	ed87 2a02 	vstr	s4, [r7, #8]
 8009d5c:	edc7 2a01 	vstr	s5, [r7, #4]
 8009d60:	ed87 3a00 	vstr	s6, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	float q0 = e->bodyQ[0];
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	677b      	str	r3, [r7, #116]	; 0x74
	float q1 = e->bodyQ[1];
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	673b      	str	r3, [r7, #112]	; 0x70
	float q2 = e->bodyQ[2];
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	66fb      	str	r3, [r7, #108]	; 0x6c
	float q3 = e->bodyQ[3];
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	66bb      	str	r3, [r7, #104]	; 0x68

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8009d7c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009d80:	eeb1 7a67 	vneg.f32	s14, s15
 8009d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8009d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d8c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8009d90:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d9c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8009da0:	edd7 7a04 	vldr	s15, [r7, #16]
 8009da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009db4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8009db8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009dbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8009dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009dc4:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8009dc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8009dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009dd4:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8009dd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009de4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009dec:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8009df0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009df4:	edd7 7a05 	vldr	s15, [r7, #20]
 8009df8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009dfc:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8009e00:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e0c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8009e10:	edd7 7a06 	vldr	s15, [r7, #24]
 8009e14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e24:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8009e28:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009e2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e34:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8009e38:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e44:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8009e48:	edd7 7a06 	vldr	s15, [r7, #24]
 8009e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e54:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e5c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8009e60:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e6c:	d10e      	bne.n	8009e8c <MadgwickAHRSupdateIMU+0x14c>
 8009e6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009e72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e7a:	d107      	bne.n	8009e8c <MadgwickAHRSupdateIMU+0x14c>
 8009e7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e88:	f000 81d4 	beq.w	800a234 <MadgwickAHRSupdateIMU+0x4f4>
		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8009e8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009e90:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e98:	edd7 6a02 	vldr	s13, [r7, #8]
 8009e9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ea8:	edd7 6a01 	vldr	s13, [r7, #4]
 8009eac:	edd7 7a01 	vldr	s15, [r7, #4]
 8009eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8009ebc:	f7f7 f854 	bl	8000f68 <invSqrt>
 8009ec0:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 8009ec4:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ec8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8009ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed0:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8009ed4:	ed97 7a02 	vldr	s14, [r7, #8]
 8009ed8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8009edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee0:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8009ee4:	ed97 7a01 	vldr	s14, [r7, #4]
 8009ee8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8009eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef0:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8009ef4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009ef8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009efc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 8009f00:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009f04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f08:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 8009f0c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009f10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f14:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 8009f18:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8009f1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f20:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 8009f24:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009f28:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f30:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 8009f34:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009f38:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f40:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 8009f44:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009f48:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f50:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 8009f54:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009f58:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f60:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 8009f64:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009f68:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f70:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 8009f74:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009f78:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 8009f84:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8009f88:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f90:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 8009f94:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8009f98:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fa0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 8009fa4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8009fa8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8009fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8009fb4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009fb8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fc0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8009fc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8009fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fd0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8009fd4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fe0:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8009fe4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ff0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8009ff4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ff8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009ffc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a000:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800a004:	edd7 7a03 	vldr	s15, [r7, #12]
 800a008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a00c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a010:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a014:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a018:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a01c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a024:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a028:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800a02c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a034:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a038:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a03c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a040:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800a044:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a04c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a050:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800a054:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a05c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a060:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800a064:	edd7 7a01 	vldr	s15, [r7, #4]
 800a068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a06c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a070:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800a074:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a078:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a07c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a080:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a084:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a088:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800a08c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a094:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a098:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800a09c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a0a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0a8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800a0ac:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a0b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a0bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a0c0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a0c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a0c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0d0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a0d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a0d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0e0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800a0e4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a0e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800a0f4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a0f8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a0fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a100:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a104:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a108:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800a10c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a114:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a118:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a11c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a120:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a124:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a12c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a130:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800a134:	edd7 7a02 	vldr	s15, [r7, #8]
 800a138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a13c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a140:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800a144:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a148:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a14c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a150:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a154:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a15c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a160:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a164:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a168:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a16c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a170:	edd7 6a08 	vldr	s13, [r7, #32]
 800a174:	edd7 7a08 	vldr	s15, [r7, #32]
 800a178:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a17c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a180:	eeb0 0a67 	vmov.f32	s0, s15
 800a184:	f7f6 fef0 	bl	8000f68 <invSqrt>
 800a188:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 800a18c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a190:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a194:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a198:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 800a19c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1a0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a1a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1a8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 800a1ac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a1b0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a1b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 800a1bc:	ed97 7a08 	vldr	s14, [r7, #32]
 800a1c0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c8:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 800a1cc:	4b5b      	ldr	r3, [pc, #364]	; (800a33c <MadgwickAHRSupdateIMU+0x5fc>)
 800a1ce:	ed93 7a00 	vldr	s14, [r3]
 800a1d2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1da:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800a1de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1e2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		qDot2 -= beta * s1;
 800a1e6:	4b55      	ldr	r3, [pc, #340]	; (800a33c <MadgwickAHRSupdateIMU+0x5fc>)
 800a1e8:	ed93 7a00 	vldr	s14, [r3]
 800a1ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a1f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1fc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		qDot3 -= beta * s2;
 800a200:	4b4e      	ldr	r3, [pc, #312]	; (800a33c <MadgwickAHRSupdateIMU+0x5fc>)
 800a202:	ed93 7a00 	vldr	s14, [r3]
 800a206:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a20a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a20e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a212:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a216:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		qDot4 -= beta * s3;
 800a21a:	4b48      	ldr	r3, [pc, #288]	; (800a33c <MadgwickAHRSupdateIMU+0x5fc>)
 800a21c:	ed93 7a00 	vldr	s14, [r3]
 800a220:	edd7 7a08 	vldr	s15, [r7, #32]
 800a224:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a228:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800a22c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a230:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
//	q0 += qDot1 * (1.0f / sampleFreq);
//	q1 += qDot2 * (1.0f / sampleFreq);
//	q2 += qDot3 * (1.0f / sampleFreq);
//	q3 += qDot4 * (1.0f / sampleFreq);

	q0 += qDot1 * (dt);
 800a234:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800a238:	edd7 7a00 	vldr	s15, [r7]
 800a23c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a240:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a244:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a248:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q1 += qDot2 * (dt);
 800a24c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a250:	edd7 7a00 	vldr	s15, [r7]
 800a254:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a258:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a25c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a260:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q2 += qDot3 * (dt);
 800a264:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a268:	edd7 7a00 	vldr	s15, [r7]
 800a26c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a270:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a274:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a278:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q3 += qDot4 * (dt);
 800a27c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800a280:	edd7 7a00 	vldr	s15, [r7]
 800a284:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a288:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800a28c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a290:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800a294:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a298:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a29c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2a0:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800a2a4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a2a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2b0:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800a2b4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a2b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2c0:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800a2c4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a2c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2d0:	eeb0 0a67 	vmov.f32	s0, s15
 800a2d4:	f7f6 fe48 	bl	8000f68 <invSqrt>
 800a2d8:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 800a2dc:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a2e0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a2e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2e8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q1 *= recipNorm;
 800a2ec:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a2f0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a2f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q2 *= recipNorm;
 800a2fc:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a300:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a304:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a308:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q3 *= recipNorm;
 800a30c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800a310:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a314:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a318:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


	e->bodyQ[0] = q0;
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a320:	601a      	str	r2, [r3, #0]
	e->bodyQ[1] = q1;
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a326:	605a      	str	r2, [r3, #4]
	e->bodyQ[2] = q2;
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a32c:	609a      	str	r2, [r3, #8]
	e->bodyQ[3] = q3;
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a332:	60da      	str	r2, [r3, #12]
}
 800a334:	bf00      	nop
 800a336:	3788      	adds	r7, #136	; 0x88
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	20000038 	.word	0x20000038

0800a340 <sbus_start>:
static uint16_t sbus_rcValue[SBUS_CHANNEL_NUMBER];
static uint16_t sbus_comp_rcValue[SBUS_CHANNEL_NUMBER];

uint16_t sbus_hzcnt = 0;

void sbus_start(UART_HandleTypeDef *huart) {
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(huart, sbus_rxBuf, SBUS_BUF_SIZE);
 800a348:	2219      	movs	r2, #25
 800a34a:	4904      	ldr	r1, [pc, #16]	; (800a35c <sbus_start+0x1c>)
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f7fd fe29 	bl	8007fa4 <HAL_UART_Receive_DMA>
}
 800a352:	bf00      	nop
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	20000304 	.word	0x20000304

0800a360 <sbus_callback>:

void sbus_callback() { // input to HAL_UART_RxCpltCallback
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
	sbus_rcValue[0] = ((uint16_t)sbus_rxBuf[1] >> 0 | ((uint16_t)sbus_rxBuf[2] << 8)) & 0x07FF;
 800a366:	4b95      	ldr	r3, [pc, #596]	; (800a5bc <sbus_callback+0x25c>)
 800a368:	785b      	ldrb	r3, [r3, #1]
 800a36a:	b21a      	sxth	r2, r3
 800a36c:	4b93      	ldr	r3, [pc, #588]	; (800a5bc <sbus_callback+0x25c>)
 800a36e:	789b      	ldrb	r3, [r3, #2]
 800a370:	021b      	lsls	r3, r3, #8
 800a372:	b21b      	sxth	r3, r3
 800a374:	4313      	orrs	r3, r2
 800a376:	b21b      	sxth	r3, r3
 800a378:	b29b      	uxth	r3, r3
 800a37a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a37e:	b29a      	uxth	r2, r3
 800a380:	4b8f      	ldr	r3, [pc, #572]	; (800a5c0 <sbus_callback+0x260>)
 800a382:	801a      	strh	r2, [r3, #0]
	sbus_rcValue[1] = ((uint16_t)sbus_rxBuf[2] >> 3 | ((uint16_t)sbus_rxBuf[3] << 5)) & 0x07FF;
 800a384:	4b8d      	ldr	r3, [pc, #564]	; (800a5bc <sbus_callback+0x25c>)
 800a386:	789b      	ldrb	r3, [r3, #2]
 800a388:	08db      	lsrs	r3, r3, #3
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	b21a      	sxth	r2, r3
 800a38e:	4b8b      	ldr	r3, [pc, #556]	; (800a5bc <sbus_callback+0x25c>)
 800a390:	78db      	ldrb	r3, [r3, #3]
 800a392:	015b      	lsls	r3, r3, #5
 800a394:	b21b      	sxth	r3, r3
 800a396:	4313      	orrs	r3, r2
 800a398:	b21b      	sxth	r3, r3
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	4b87      	ldr	r3, [pc, #540]	; (800a5c0 <sbus_callback+0x260>)
 800a3a4:	805a      	strh	r2, [r3, #2]
	sbus_rcValue[2] = ((uint16_t)sbus_rxBuf[3] >> 6 | ((uint16_t)sbus_rxBuf[4] << 2) | (uint16_t)sbus_rxBuf[5] << 10) & 0x07FF;
 800a3a6:	4b85      	ldr	r3, [pc, #532]	; (800a5bc <sbus_callback+0x25c>)
 800a3a8:	78db      	ldrb	r3, [r3, #3]
 800a3aa:	099b      	lsrs	r3, r3, #6
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	b21a      	sxth	r2, r3
 800a3b0:	4b82      	ldr	r3, [pc, #520]	; (800a5bc <sbus_callback+0x25c>)
 800a3b2:	791b      	ldrb	r3, [r3, #4]
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	b21b      	sxth	r3, r3
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	b21a      	sxth	r2, r3
 800a3bc:	4b7f      	ldr	r3, [pc, #508]	; (800a5bc <sbus_callback+0x25c>)
 800a3be:	795b      	ldrb	r3, [r3, #5]
 800a3c0:	029b      	lsls	r3, r3, #10
 800a3c2:	b21b      	sxth	r3, r3
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	b21b      	sxth	r3, r3
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	4b7b      	ldr	r3, [pc, #492]	; (800a5c0 <sbus_callback+0x260>)
 800a3d2:	809a      	strh	r2, [r3, #4]
	sbus_rcValue[3] = ((uint16_t)sbus_rxBuf[5] >> 1 | ((uint16_t)sbus_rxBuf[6] << 7)) & 0x07FF;
 800a3d4:	4b79      	ldr	r3, [pc, #484]	; (800a5bc <sbus_callback+0x25c>)
 800a3d6:	795b      	ldrb	r3, [r3, #5]
 800a3d8:	085b      	lsrs	r3, r3, #1
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	b21a      	sxth	r2, r3
 800a3de:	4b77      	ldr	r3, [pc, #476]	; (800a5bc <sbus_callback+0x25c>)
 800a3e0:	799b      	ldrb	r3, [r3, #6]
 800a3e2:	01db      	lsls	r3, r3, #7
 800a3e4:	b21b      	sxth	r3, r3
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	b21b      	sxth	r3, r3
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	4b73      	ldr	r3, [pc, #460]	; (800a5c0 <sbus_callback+0x260>)
 800a3f4:	80da      	strh	r2, [r3, #6]
	sbus_rcValue[4] = ((uint16_t)sbus_rxBuf[6] >> 4 | ((uint16_t)sbus_rxBuf[7] << 4)) & 0x07FF;
 800a3f6:	4b71      	ldr	r3, [pc, #452]	; (800a5bc <sbus_callback+0x25c>)
 800a3f8:	799b      	ldrb	r3, [r3, #6]
 800a3fa:	091b      	lsrs	r3, r3, #4
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	b21a      	sxth	r2, r3
 800a400:	4b6e      	ldr	r3, [pc, #440]	; (800a5bc <sbus_callback+0x25c>)
 800a402:	79db      	ldrb	r3, [r3, #7]
 800a404:	011b      	lsls	r3, r3, #4
 800a406:	b21b      	sxth	r3, r3
 800a408:	4313      	orrs	r3, r2
 800a40a:	b21b      	sxth	r3, r3
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a412:	b29a      	uxth	r2, r3
 800a414:	4b6a      	ldr	r3, [pc, #424]	; (800a5c0 <sbus_callback+0x260>)
 800a416:	811a      	strh	r2, [r3, #8]
	sbus_rcValue[5] = ((uint16_t)sbus_rxBuf[7] >> 7 | ((uint16_t)sbus_rxBuf[8] << 1) | (uint16_t)sbus_rxBuf[9] << 9) & 0x07FF;
 800a418:	4b68      	ldr	r3, [pc, #416]	; (800a5bc <sbus_callback+0x25c>)
 800a41a:	79db      	ldrb	r3, [r3, #7]
 800a41c:	09db      	lsrs	r3, r3, #7
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	b21a      	sxth	r2, r3
 800a422:	4b66      	ldr	r3, [pc, #408]	; (800a5bc <sbus_callback+0x25c>)
 800a424:	7a1b      	ldrb	r3, [r3, #8]
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	b21b      	sxth	r3, r3
 800a42a:	4313      	orrs	r3, r2
 800a42c:	b21a      	sxth	r2, r3
 800a42e:	4b63      	ldr	r3, [pc, #396]	; (800a5bc <sbus_callback+0x25c>)
 800a430:	7a5b      	ldrb	r3, [r3, #9]
 800a432:	025b      	lsls	r3, r3, #9
 800a434:	b21b      	sxth	r3, r3
 800a436:	4313      	orrs	r3, r2
 800a438:	b21b      	sxth	r3, r3
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a440:	b29a      	uxth	r2, r3
 800a442:	4b5f      	ldr	r3, [pc, #380]	; (800a5c0 <sbus_callback+0x260>)
 800a444:	815a      	strh	r2, [r3, #10]
	sbus_rcValue[6] = ((uint16_t)sbus_rxBuf[9] >> 2 | ((uint16_t)sbus_rxBuf[10] << 6)) & 0x07FF;
 800a446:	4b5d      	ldr	r3, [pc, #372]	; (800a5bc <sbus_callback+0x25c>)
 800a448:	7a5b      	ldrb	r3, [r3, #9]
 800a44a:	089b      	lsrs	r3, r3, #2
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	b21a      	sxth	r2, r3
 800a450:	4b5a      	ldr	r3, [pc, #360]	; (800a5bc <sbus_callback+0x25c>)
 800a452:	7a9b      	ldrb	r3, [r3, #10]
 800a454:	019b      	lsls	r3, r3, #6
 800a456:	b21b      	sxth	r3, r3
 800a458:	4313      	orrs	r3, r2
 800a45a:	b21b      	sxth	r3, r3
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a462:	b29a      	uxth	r2, r3
 800a464:	4b56      	ldr	r3, [pc, #344]	; (800a5c0 <sbus_callback+0x260>)
 800a466:	819a      	strh	r2, [r3, #12]
	sbus_rcValue[7] = ((uint16_t)sbus_rxBuf[10] >> 5 | ((uint16_t)sbus_rxBuf[11] << 3)) & 0x07FF;
 800a468:	4b54      	ldr	r3, [pc, #336]	; (800a5bc <sbus_callback+0x25c>)
 800a46a:	7a9b      	ldrb	r3, [r3, #10]
 800a46c:	095b      	lsrs	r3, r3, #5
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	b21a      	sxth	r2, r3
 800a472:	4b52      	ldr	r3, [pc, #328]	; (800a5bc <sbus_callback+0x25c>)
 800a474:	7adb      	ldrb	r3, [r3, #11]
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	b21b      	sxth	r3, r3
 800a47a:	4313      	orrs	r3, r2
 800a47c:	b21b      	sxth	r3, r3
 800a47e:	b29b      	uxth	r3, r3
 800a480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a484:	b29a      	uxth	r2, r3
 800a486:	4b4e      	ldr	r3, [pc, #312]	; (800a5c0 <sbus_callback+0x260>)
 800a488:	81da      	strh	r2, [r3, #14]

	sbus_rcValue[8] = ((uint16_t)sbus_rxBuf[12] << 0 | ((uint16_t)sbus_rxBuf[13] << 8)) & 0x07FF;
 800a48a:	4b4c      	ldr	r3, [pc, #304]	; (800a5bc <sbus_callback+0x25c>)
 800a48c:	7b1b      	ldrb	r3, [r3, #12]
 800a48e:	b21a      	sxth	r2, r3
 800a490:	4b4a      	ldr	r3, [pc, #296]	; (800a5bc <sbus_callback+0x25c>)
 800a492:	7b5b      	ldrb	r3, [r3, #13]
 800a494:	021b      	lsls	r3, r3, #8
 800a496:	b21b      	sxth	r3, r3
 800a498:	4313      	orrs	r3, r2
 800a49a:	b21b      	sxth	r3, r3
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	4b46      	ldr	r3, [pc, #280]	; (800a5c0 <sbus_callback+0x260>)
 800a4a6:	821a      	strh	r2, [r3, #16]
	sbus_rcValue[9] = ((uint16_t)sbus_rxBuf[13] >> 3 | ((uint16_t)sbus_rxBuf[14] << 5)) & 0x07FF;
 800a4a8:	4b44      	ldr	r3, [pc, #272]	; (800a5bc <sbus_callback+0x25c>)
 800a4aa:	7b5b      	ldrb	r3, [r3, #13]
 800a4ac:	08db      	lsrs	r3, r3, #3
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	b21a      	sxth	r2, r3
 800a4b2:	4b42      	ldr	r3, [pc, #264]	; (800a5bc <sbus_callback+0x25c>)
 800a4b4:	7b9b      	ldrb	r3, [r3, #14]
 800a4b6:	015b      	lsls	r3, r3, #5
 800a4b8:	b21b      	sxth	r3, r3
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	b21b      	sxth	r3, r3
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	4b3e      	ldr	r3, [pc, #248]	; (800a5c0 <sbus_callback+0x260>)
 800a4c8:	825a      	strh	r2, [r3, #18]
	sbus_rcValue[10] = ((uint16_t)sbus_rxBuf[14] >> 6 | ((uint16_t)sbus_rxBuf[15] << 2) | (uint16_t)sbus_rxBuf[16] << 10) & 0x07FF;
 800a4ca:	4b3c      	ldr	r3, [pc, #240]	; (800a5bc <sbus_callback+0x25c>)
 800a4cc:	7b9b      	ldrb	r3, [r3, #14]
 800a4ce:	099b      	lsrs	r3, r3, #6
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	b21a      	sxth	r2, r3
 800a4d4:	4b39      	ldr	r3, [pc, #228]	; (800a5bc <sbus_callback+0x25c>)
 800a4d6:	7bdb      	ldrb	r3, [r3, #15]
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	b21b      	sxth	r3, r3
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	b21a      	sxth	r2, r3
 800a4e0:	4b36      	ldr	r3, [pc, #216]	; (800a5bc <sbus_callback+0x25c>)
 800a4e2:	7c1b      	ldrb	r3, [r3, #16]
 800a4e4:	029b      	lsls	r3, r3, #10
 800a4e6:	b21b      	sxth	r3, r3
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	b21b      	sxth	r3, r3
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	4b32      	ldr	r3, [pc, #200]	; (800a5c0 <sbus_callback+0x260>)
 800a4f6:	829a      	strh	r2, [r3, #20]
	sbus_rcValue[11] = ((uint16_t)sbus_rxBuf[16] >> 1 | ((uint16_t)sbus_rxBuf[17] << 7)) & 0x07FF;
 800a4f8:	4b30      	ldr	r3, [pc, #192]	; (800a5bc <sbus_callback+0x25c>)
 800a4fa:	7c1b      	ldrb	r3, [r3, #16]
 800a4fc:	085b      	lsrs	r3, r3, #1
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	b21a      	sxth	r2, r3
 800a502:	4b2e      	ldr	r3, [pc, #184]	; (800a5bc <sbus_callback+0x25c>)
 800a504:	7c5b      	ldrb	r3, [r3, #17]
 800a506:	01db      	lsls	r3, r3, #7
 800a508:	b21b      	sxth	r3, r3
 800a50a:	4313      	orrs	r3, r2
 800a50c:	b21b      	sxth	r3, r3
 800a50e:	b29b      	uxth	r3, r3
 800a510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a514:	b29a      	uxth	r2, r3
 800a516:	4b2a      	ldr	r3, [pc, #168]	; (800a5c0 <sbus_callback+0x260>)
 800a518:	82da      	strh	r2, [r3, #22]
	sbus_rcValue[12] = ((uint16_t)sbus_rxBuf[17] >> 4 | ((uint16_t)sbus_rxBuf[18] << 4)) & 0x07FF;
 800a51a:	4b28      	ldr	r3, [pc, #160]	; (800a5bc <sbus_callback+0x25c>)
 800a51c:	7c5b      	ldrb	r3, [r3, #17]
 800a51e:	091b      	lsrs	r3, r3, #4
 800a520:	b2db      	uxtb	r3, r3
 800a522:	b21a      	sxth	r2, r3
 800a524:	4b25      	ldr	r3, [pc, #148]	; (800a5bc <sbus_callback+0x25c>)
 800a526:	7c9b      	ldrb	r3, [r3, #18]
 800a528:	011b      	lsls	r3, r3, #4
 800a52a:	b21b      	sxth	r3, r3
 800a52c:	4313      	orrs	r3, r2
 800a52e:	b21b      	sxth	r3, r3
 800a530:	b29b      	uxth	r3, r3
 800a532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a536:	b29a      	uxth	r2, r3
 800a538:	4b21      	ldr	r3, [pc, #132]	; (800a5c0 <sbus_callback+0x260>)
 800a53a:	831a      	strh	r2, [r3, #24]
	sbus_rcValue[13] = ((uint16_t)sbus_rxBuf[18] >> 7 | ((uint16_t)sbus_rxBuf[19] << 1) | (uint16_t)sbus_rxBuf[21] << 9) & 0x07FF;
 800a53c:	4b1f      	ldr	r3, [pc, #124]	; (800a5bc <sbus_callback+0x25c>)
 800a53e:	7c9b      	ldrb	r3, [r3, #18]
 800a540:	09db      	lsrs	r3, r3, #7
 800a542:	b2db      	uxtb	r3, r3
 800a544:	b21a      	sxth	r2, r3
 800a546:	4b1d      	ldr	r3, [pc, #116]	; (800a5bc <sbus_callback+0x25c>)
 800a548:	7cdb      	ldrb	r3, [r3, #19]
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	b21b      	sxth	r3, r3
 800a54e:	4313      	orrs	r3, r2
 800a550:	b21a      	sxth	r2, r3
 800a552:	4b1a      	ldr	r3, [pc, #104]	; (800a5bc <sbus_callback+0x25c>)
 800a554:	7d5b      	ldrb	r3, [r3, #21]
 800a556:	025b      	lsls	r3, r3, #9
 800a558:	b21b      	sxth	r3, r3
 800a55a:	4313      	orrs	r3, r2
 800a55c:	b21b      	sxth	r3, r3
 800a55e:	b29b      	uxth	r3, r3
 800a560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a564:	b29a      	uxth	r2, r3
 800a566:	4b16      	ldr	r3, [pc, #88]	; (800a5c0 <sbus_callback+0x260>)
 800a568:	835a      	strh	r2, [r3, #26]
	sbus_rcValue[14] = ((uint16_t)sbus_rxBuf[20] >> 2 | ((uint16_t)sbus_rxBuf[21] << 6)) & 0x07FF;
 800a56a:	4b14      	ldr	r3, [pc, #80]	; (800a5bc <sbus_callback+0x25c>)
 800a56c:	7d1b      	ldrb	r3, [r3, #20]
 800a56e:	089b      	lsrs	r3, r3, #2
 800a570:	b2db      	uxtb	r3, r3
 800a572:	b21a      	sxth	r2, r3
 800a574:	4b11      	ldr	r3, [pc, #68]	; (800a5bc <sbus_callback+0x25c>)
 800a576:	7d5b      	ldrb	r3, [r3, #21]
 800a578:	019b      	lsls	r3, r3, #6
 800a57a:	b21b      	sxth	r3, r3
 800a57c:	4313      	orrs	r3, r2
 800a57e:	b21b      	sxth	r3, r3
 800a580:	b29b      	uxth	r3, r3
 800a582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a586:	b29a      	uxth	r2, r3
 800a588:	4b0d      	ldr	r3, [pc, #52]	; (800a5c0 <sbus_callback+0x260>)
 800a58a:	839a      	strh	r2, [r3, #28]
	sbus_rcValue[15] = ((uint16_t)sbus_rxBuf[21] >> 5 | ((uint16_t)sbus_rxBuf[22] << 3)) & 0x07FF;
 800a58c:	4b0b      	ldr	r3, [pc, #44]	; (800a5bc <sbus_callback+0x25c>)
 800a58e:	7d5b      	ldrb	r3, [r3, #21]
 800a590:	095b      	lsrs	r3, r3, #5
 800a592:	b2db      	uxtb	r3, r3
 800a594:	b21a      	sxth	r2, r3
 800a596:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <sbus_callback+0x25c>)
 800a598:	7d9b      	ldrb	r3, [r3, #22]
 800a59a:	00db      	lsls	r3, r3, #3
 800a59c:	b21b      	sxth	r3, r3
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	b21b      	sxth	r3, r3
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <sbus_callback+0x260>)
 800a5ac:	83da      	strh	r2, [r3, #30]

	if (((uint16_t)sbus_rxBuf[23]) & 0x0001)       sbus_rcValue[16] = 2000; else sbus_rcValue[16] = 1000;
 800a5ae:	4b03      	ldr	r3, [pc, #12]	; (800a5bc <sbus_callback+0x25c>)
 800a5b0:	7ddb      	ldrb	r3, [r3, #23]
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d009      	beq.n	800a5ce <sbus_callback+0x26e>
 800a5ba:	e003      	b.n	800a5c4 <sbus_callback+0x264>
 800a5bc:	20000304 	.word	0x20000304
 800a5c0:	20000320 	.word	0x20000320
 800a5c4:	4b21      	ldr	r3, [pc, #132]	; (800a64c <sbus_callback+0x2ec>)
 800a5c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a5ca:	841a      	strh	r2, [r3, #32]
 800a5cc:	e003      	b.n	800a5d6 <sbus_callback+0x276>
 800a5ce:	4b1f      	ldr	r3, [pc, #124]	; (800a64c <sbus_callback+0x2ec>)
 800a5d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a5d4:	841a      	strh	r2, [r3, #32]
	if (((uint16_t)sbus_rxBuf[23] >> 1) & 0x0001)  sbus_rcValue[17] = 2000; else sbus_rcValue[17] = 1000;
 800a5d6:	4b1e      	ldr	r3, [pc, #120]	; (800a650 <sbus_callback+0x2f0>)
 800a5d8:	7ddb      	ldrb	r3, [r3, #23]
 800a5da:	085b      	lsrs	r3, r3, #1
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	f003 0301 	and.w	r3, r3, #1
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d004      	beq.n	800a5f0 <sbus_callback+0x290>
 800a5e6:	4b19      	ldr	r3, [pc, #100]	; (800a64c <sbus_callback+0x2ec>)
 800a5e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a5ec:	845a      	strh	r2, [r3, #34]	; 0x22
 800a5ee:	e003      	b.n	800a5f8 <sbus_callback+0x298>
 800a5f0:	4b16      	ldr	r3, [pc, #88]	; (800a64c <sbus_callback+0x2ec>)
 800a5f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a5f6:	845a      	strh	r2, [r3, #34]	; 0x22

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	607b      	str	r3, [r7, #4]
 800a5fc:	e016      	b.n	800a62c <sbus_callback+0x2cc>
		sbus_comp_rcValue[i] = (sbus_rcValue[i]) * 5 / 8 + 880;
 800a5fe:	4a13      	ldr	r2, [pc, #76]	; (800a64c <sbus_callback+0x2ec>)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a606:	461a      	mov	r2, r3
 800a608:	4613      	mov	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	2b00      	cmp	r3, #0
 800a610:	da00      	bge.n	800a614 <sbus_callback+0x2b4>
 800a612:	3307      	adds	r3, #7
 800a614:	10db      	asrs	r3, r3, #3
 800a616:	b29b      	uxth	r3, r3
 800a618:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800a61c:	b299      	uxth	r1, r3
 800a61e:	4a0d      	ldr	r2, [pc, #52]	; (800a654 <sbus_callback+0x2f4>)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	3301      	adds	r3, #1
 800a62a:	607b      	str	r3, [r7, #4]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b11      	cmp	r3, #17
 800a630:	dde5      	ble.n	800a5fe <sbus_callback+0x29e>
	}
	sbus_hzcnt++;
 800a632:	4b09      	ldr	r3, [pc, #36]	; (800a658 <sbus_callback+0x2f8>)
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	3301      	adds	r3, #1
 800a638:	b29a      	uxth	r2, r3
 800a63a:	4b07      	ldr	r3, [pc, #28]	; (800a658 <sbus_callback+0x2f8>)
 800a63c:	801a      	strh	r2, [r3, #0]
}
 800a63e:	bf00      	nop
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	20000320 	.word	0x20000320
 800a650:	20000304 	.word	0x20000304
 800a654:	20000344 	.word	0x20000344
 800a658:	20000368 	.word	0x20000368

0800a65c <sbus_getHz>:

uint16_t sbus_getHz(){ // call this func 1hz
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
	uint16_t temp = sbus_hzcnt;
 800a662:	4b06      	ldr	r3, [pc, #24]	; (800a67c <sbus_getHz+0x20>)
 800a664:	881b      	ldrh	r3, [r3, #0]
 800a666:	80fb      	strh	r3, [r7, #6]
	sbus_hzcnt = 0;
 800a668:	4b04      	ldr	r3, [pc, #16]	; (800a67c <sbus_getHz+0x20>)
 800a66a:	2200      	movs	r2, #0
 800a66c:	801a      	strh	r2, [r3, #0]
	return temp;
 800a66e:	88fb      	ldrh	r3, [r7, #6]
}
 800a670:	4618      	mov	r0, r3
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	20000368 	.word	0x20000368

0800a680 <sbus_getChannel>:
		printf("%d \t", sbus_comp_rcValue[i]);
	}
	printf("\r\n");
}

uint16_t sbus_getChannel(uint8_t chan) { // start from 1
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	4603      	mov	r3, r0
 800a688:	71fb      	strb	r3, [r7, #7]
	return sbus_comp_rcValue[chan - 1];
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	4a04      	ldr	r2, [pc, #16]	; (800a6a0 <sbus_getChannel+0x20>)
 800a690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 800a694:	4618      	mov	r0, r3
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	20000344 	.word	0x20000344

0800a6a4 <motor_init>:
	TIM_HandleTypeDef* pTim;
	uint32_t Channel;
};


void motor_init(struct motor *m, TIM_HandleTypeDef *htim, uint32_t Channel){
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
	m->pTim = htim;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	601a      	str	r2, [r3, #0]
	m->Channel = Channel;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	605a      	str	r2, [r3, #4]
}
 800a6bc:	bf00      	nop
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <motor_start>:

void motor_start(struct motor *m){
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(m->pTim, m->Channel);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	4610      	mov	r0, r2
 800a6dc:	f7fc fcf0 	bl	80070c0 <HAL_TIM_PWM_Start>
}
 800a6e0:	bf00      	nop
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <motor_write>:

void motor_write(struct motor *m, uint16_t pwm){
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	807b      	strh	r3, [r7, #2]
	if(pwm < MOTOR_PWM_MIN) pwm = MOTOR_PWM_MIN;
 800a6f4:	887b      	ldrh	r3, [r7, #2]
 800a6f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6fa:	d203      	bcs.n	800a704 <motor_write+0x1c>
 800a6fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a700:	807b      	strh	r3, [r7, #2]
 800a702:	e006      	b.n	800a712 <motor_write+0x2a>
	else if(pwm > MOTOR_PWM_MAX) pwm = MOTOR_PWM_MAX;
 800a704:	887b      	ldrh	r3, [r7, #2]
 800a706:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a70a:	d902      	bls.n	800a712 <motor_write+0x2a>
 800a70c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a710:	807b      	strh	r3, [r7, #2]

	pwm *= 2; // scale the signal for time
 800a712:	887b      	ldrh	r3, [r7, #2]
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(m->pTim, m->Channel, pwm);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d105      	bne.n	800a72c <motor_write+0x44>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	887a      	ldrh	r2, [r7, #2]
 800a728:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a72a:	e018      	b.n	800a75e <motor_write+0x76>
	__HAL_TIM_SET_COMPARE(m->pTim, m->Channel, pwm);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	2b04      	cmp	r3, #4
 800a732:	d105      	bne.n	800a740 <motor_write+0x58>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	887a      	ldrh	r2, [r7, #2]
 800a73c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a73e:	e00e      	b.n	800a75e <motor_write+0x76>
	__HAL_TIM_SET_COMPARE(m->pTim, m->Channel, pwm);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	2b08      	cmp	r3, #8
 800a746:	d105      	bne.n	800a754 <motor_write+0x6c>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	887a      	ldrh	r2, [r7, #2]
 800a750:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a752:	e004      	b.n	800a75e <motor_write+0x76>
	__HAL_TIM_SET_COMPARE(m->pTim, m->Channel, pwm);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	887a      	ldrh	r2, [r7, #2]
 800a75c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800a75e:	bf00      	nop
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
	...

0800a76c <_write>:
//__IO ITStatus flagMpu = RESET;
//__IO ITStatus flagControl = RESET;

//we can use printf
int _write(int file, unsigned char* p, int len) // for debug through uart3
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	230a      	movs	r3, #10
 800a77e:	68b9      	ldr	r1, [r7, #8]
 800a780:	4803      	ldr	r0, [pc, #12]	; (800a790 <_write+0x24>)
 800a782:	f7fd fb76 	bl	8007e72 <HAL_UART_Transmit>
	return len;
 800a786:	687b      	ldr	r3, [r7, #4]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	20000560 	.word	0x20000560

0800a794 <rt_OneStep>:


volatile int IsrOverrun = 0;
static boolean_T OverrunFlag = 0;
void rt_OneStep(void)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
  /* Check for overrun. Protect OverrunFlag against preemption */
  if (OverrunFlag++) {
 800a798:	4b0d      	ldr	r3, [pc, #52]	; (800a7d0 <rt_OneStep+0x3c>)
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	1c5a      	adds	r2, r3, #1
 800a79e:	b2d1      	uxtb	r1, r2
 800a7a0:	4a0b      	ldr	r2, [pc, #44]	; (800a7d0 <rt_OneStep+0x3c>)
 800a7a2:	7011      	strb	r1, [r2, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d009      	beq.n	800a7bc <rt_OneStep+0x28>
    IsrOverrun = 1;
 800a7a8:	4b0a      	ldr	r3, [pc, #40]	; (800a7d4 <rt_OneStep+0x40>)
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	601a      	str	r2, [r3, #0]
    OverrunFlag--;
 800a7ae:	4b08      	ldr	r3, [pc, #32]	; (800a7d0 <rt_OneStep+0x3c>)
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <rt_OneStep+0x3c>)
 800a7b8:	701a      	strb	r2, [r3, #0]
    return;
 800a7ba:	e007      	b.n	800a7cc <rt_OneStep+0x38>
  }

//  __enable_irq();
  Second_att_control_codeblock_step();
 800a7bc:	f000 f9c8 	bl	800ab50 <Second_att_control_codeblock_step>

  /* Get model outputs here */
//  __disable_irq();
  OverrunFlag--;
 800a7c0:	4b03      	ldr	r3, [pc, #12]	; (800a7d0 <rt_OneStep+0x3c>)
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	4b01      	ldr	r3, [pc, #4]	; (800a7d0 <rt_OneStep+0x3c>)
 800a7ca:	701a      	strb	r2, [r3, #0]
}
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20000370 	.word	0x20000370
 800a7d4:	2000036c 	.word	0x2000036c

0800a7d8 <userMain>:
}


//struct junTimer debugTimer = {0,};

void userMain(){
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	af00      	add	r7, sp, #0
    setvbuf(stdout, NULL, _IONBF, 0);
 800a7dc:	4b64      	ldr	r3, [pc, #400]	; (800a970 <userMain+0x198>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	6898      	ldr	r0, [r3, #8]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	2202      	movs	r2, #2
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	f002 fcf8 	bl	800d1dc <setvbuf>

    printf("boot complete\r\n");
 800a7ec:	4861      	ldr	r0, [pc, #388]	; (800a974 <userMain+0x19c>)
 800a7ee:	f002 fcdd 	bl	800d1ac <puts>
    MPU9250_init(&iMPU9250, &hi2c1);
 800a7f2:	4961      	ldr	r1, [pc, #388]	; (800a978 <userMain+0x1a0>)
 800a7f4:	4861      	ldr	r0, [pc, #388]	; (800a97c <userMain+0x1a4>)
 800a7f6:	f7fe fdbd 	bl	8009374 <MPU9250_init>

    sbus_start(&huart7);
 800a7fa:	4861      	ldr	r0, [pc, #388]	; (800a980 <userMain+0x1a8>)
 800a7fc:	f7ff fda0 	bl	800a340 <sbus_start>

    HAL_TIM_Base_Start_IT(&htim11); // start mpu9250 it
 800a800:	4860      	ldr	r0, [pc, #384]	; (800a984 <userMain+0x1ac>)
 800a802:	f7fc fc04 	bl	800700e <HAL_TIM_Base_Start_IT>

    motor_init(&iMotor1, &htim4, TIM_CHANNEL_1);
 800a806:	2200      	movs	r2, #0
 800a808:	495f      	ldr	r1, [pc, #380]	; (800a988 <userMain+0x1b0>)
 800a80a:	4860      	ldr	r0, [pc, #384]	; (800a98c <userMain+0x1b4>)
 800a80c:	f7ff ff4a 	bl	800a6a4 <motor_init>
    motor_init(&iMotor2, &htim4, TIM_CHANNEL_2);
 800a810:	2204      	movs	r2, #4
 800a812:	495d      	ldr	r1, [pc, #372]	; (800a988 <userMain+0x1b0>)
 800a814:	485e      	ldr	r0, [pc, #376]	; (800a990 <userMain+0x1b8>)
 800a816:	f7ff ff45 	bl	800a6a4 <motor_init>
    motor_init(&iMotor3, &htim4, TIM_CHANNEL_3);
 800a81a:	2208      	movs	r2, #8
 800a81c:	495a      	ldr	r1, [pc, #360]	; (800a988 <userMain+0x1b0>)
 800a81e:	485d      	ldr	r0, [pc, #372]	; (800a994 <userMain+0x1bc>)
 800a820:	f7ff ff40 	bl	800a6a4 <motor_init>
    motor_init(&iMotor4, &htim4, TIM_CHANNEL_4);
 800a824:	220c      	movs	r2, #12
 800a826:	4958      	ldr	r1, [pc, #352]	; (800a988 <userMain+0x1b0>)
 800a828:	485b      	ldr	r0, [pc, #364]	; (800a998 <userMain+0x1c0>)
 800a82a:	f7ff ff3b 	bl	800a6a4 <motor_init>
    motor_init(&iMotor5, &htim3, TIM_CHANNEL_1);
 800a82e:	2200      	movs	r2, #0
 800a830:	495a      	ldr	r1, [pc, #360]	; (800a99c <userMain+0x1c4>)
 800a832:	485b      	ldr	r0, [pc, #364]	; (800a9a0 <userMain+0x1c8>)
 800a834:	f7ff ff36 	bl	800a6a4 <motor_init>
    motor_init(&iMotor6, &htim3, TIM_CHANNEL_2);
 800a838:	2204      	movs	r2, #4
 800a83a:	4958      	ldr	r1, [pc, #352]	; (800a99c <userMain+0x1c4>)
 800a83c:	4859      	ldr	r0, [pc, #356]	; (800a9a4 <userMain+0x1cc>)
 800a83e:	f7ff ff31 	bl	800a6a4 <motor_init>

    motor_start(&iMotor1);
 800a842:	4852      	ldr	r0, [pc, #328]	; (800a98c <userMain+0x1b4>)
 800a844:	f7ff ff40 	bl	800a6c8 <motor_start>
    motor_start(&iMotor2);
 800a848:	4851      	ldr	r0, [pc, #324]	; (800a990 <userMain+0x1b8>)
 800a84a:	f7ff ff3d 	bl	800a6c8 <motor_start>
    motor_start(&iMotor3);
 800a84e:	4851      	ldr	r0, [pc, #324]	; (800a994 <userMain+0x1bc>)
 800a850:	f7ff ff3a 	bl	800a6c8 <motor_start>
    motor_start(&iMotor4);
 800a854:	4850      	ldr	r0, [pc, #320]	; (800a998 <userMain+0x1c0>)
 800a856:	f7ff ff37 	bl	800a6c8 <motor_start>
    motor_start(&iMotor5);
 800a85a:	4851      	ldr	r0, [pc, #324]	; (800a9a0 <userMain+0x1c8>)
 800a85c:	f7ff ff34 	bl	800a6c8 <motor_start>
    motor_start(&iMotor6);
 800a860:	4850      	ldr	r0, [pc, #320]	; (800a9a4 <userMain+0x1cc>)
 800a862:	f7ff ff31 	bl	800a6c8 <motor_start>
	while(1){
		sensorHz_print();
 800a866:	f7ff f9b7 	bl	8009bd8 <sensorHz_print>
		//boot essential part
		if(iMPU9250.itSet == SET){
 800a86a:	4b44      	ldr	r3, [pc, #272]	; (800a97c <userMain+0x1a4>)
 800a86c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b01      	cmp	r3, #1
 800a874:	d16b      	bne.n	800a94e <userMain+0x176>
			estimate_update(&iEstimate, &iMPU9250);
 800a876:	4941      	ldr	r1, [pc, #260]	; (800a97c <userMain+0x1a4>)
 800a878:	484b      	ldr	r0, [pc, #300]	; (800a9a8 <userMain+0x1d0>)
 800a87a:	f7ff f9d7 	bl	8009c2c <estimate_update>
//			estimate_print(&iEstimate);
			iMPU9250.itSet = RESET;
 800a87e:	4b3f      	ldr	r3, [pc, #252]	; (800a97c <userMain+0x1a4>)
 800a880:	2200      	movs	r2, #0
 800a882:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			if(runModel){
 800a886:	4b49      	ldr	r3, [pc, #292]	; (800a9ac <userMain+0x1d4>)
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d05e      	beq.n	800a94e <userMain+0x176>
//				junTimer_tic(&debugTimer);
				Second_att_control_codeblock_U.Roll = iEstimate.roll;
 800a890:	4b45      	ldr	r3, [pc, #276]	; (800a9a8 <userMain+0x1d0>)
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	4a46      	ldr	r2, [pc, #280]	; (800a9b0 <userMain+0x1d8>)
 800a896:	6013      	str	r3, [r2, #0]
				Second_att_control_codeblock_U.Pitch = iEstimate.pitch;
 800a898:	4b43      	ldr	r3, [pc, #268]	; (800a9a8 <userMain+0x1d0>)
 800a89a:	695b      	ldr	r3, [r3, #20]
 800a89c:	4a44      	ldr	r2, [pc, #272]	; (800a9b0 <userMain+0x1d8>)
 800a89e:	6053      	str	r3, [r2, #4]
				Second_att_control_codeblock_U.p = iEstimate.p;
 800a8a0:	4b41      	ldr	r3, [pc, #260]	; (800a9a8 <userMain+0x1d0>)
 800a8a2:	69db      	ldr	r3, [r3, #28]
 800a8a4:	4a42      	ldr	r2, [pc, #264]	; (800a9b0 <userMain+0x1d8>)
 800a8a6:	6093      	str	r3, [r2, #8]
				Second_att_control_codeblock_U.q = iEstimate.q;
 800a8a8:	4b3f      	ldr	r3, [pc, #252]	; (800a9a8 <userMain+0x1d0>)
 800a8aa:	6a1b      	ldr	r3, [r3, #32]
 800a8ac:	4a40      	ldr	r2, [pc, #256]	; (800a9b0 <userMain+0x1d8>)
 800a8ae:	60d3      	str	r3, [r2, #12]
				Second_att_control_codeblock_U.r = iEstimate.r;
 800a8b0:	4b3d      	ldr	r3, [pc, #244]	; (800a9a8 <userMain+0x1d0>)
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	4a3e      	ldr	r2, [pc, #248]	; (800a9b0 <userMain+0x1d8>)
 800a8b6:	6113      	str	r3, [r2, #16]
				Second_att_control_codeblock_U.set_thrust = sbus_getChannel(1);
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	f7ff fee1 	bl	800a680 <sbus_getChannel>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	4b3b      	ldr	r3, [pc, #236]	; (800a9b0 <userMain+0x1d8>)
 800a8c4:	829a      	strh	r2, [r3, #20]
				Second_att_control_codeblock_U.set_roll = sbus_getChannel(2);
 800a8c6:	2002      	movs	r0, #2
 800a8c8:	f7ff feda 	bl	800a680 <sbus_getChannel>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	4b37      	ldr	r3, [pc, #220]	; (800a9b0 <userMain+0x1d8>)
 800a8d2:	82da      	strh	r2, [r3, #22]
				Second_att_control_codeblock_U.set_pitch = sbus_getChannel(3);
 800a8d4:	2003      	movs	r0, #3
 800a8d6:	f7ff fed3 	bl	800a680 <sbus_getChannel>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	461a      	mov	r2, r3
 800a8de:	4b34      	ldr	r3, [pc, #208]	; (800a9b0 <userMain+0x1d8>)
 800a8e0:	831a      	strh	r2, [r3, #24]
				Second_att_control_codeblock_U.set_yaw = sbus_getChannel(4);
 800a8e2:	2004      	movs	r0, #4
 800a8e4:	f7ff fecc 	bl	800a680 <sbus_getChannel>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	4b30      	ldr	r3, [pc, #192]	; (800a9b0 <userMain+0x1d8>)
 800a8ee:	835a      	strh	r2, [r3, #26]
				Second_att_control_codeblock_U.Arm_cmd = sbus_getChannel(11);
 800a8f0:	200b      	movs	r0, #11
 800a8f2:	f7ff fec5 	bl	800a680 <sbus_getChannel>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	4b2d      	ldr	r3, [pc, #180]	; (800a9b0 <userMain+0x1d8>)
 800a8fc:	839a      	strh	r2, [r3, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a8fe:	b672      	cpsid	i

				__disable_irq();
				rt_OneStep();
 800a900:	f7ff ff48 	bl	800a794 <rt_OneStep>
  __ASM volatile ("cpsie i" : : : "memory");
 800a904:	b662      	cpsie	i
				__enable_irq();

				motor_write(&iMotor1, Second_att_control_codeblock_Y.PWM_OUT[0]);
 800a906:	4b2b      	ldr	r3, [pc, #172]	; (800a9b4 <userMain+0x1dc>)
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	4619      	mov	r1, r3
 800a90c:	481f      	ldr	r0, [pc, #124]	; (800a98c <userMain+0x1b4>)
 800a90e:	f7ff feeb 	bl	800a6e8 <motor_write>
				motor_write(&iMotor2, Second_att_control_codeblock_Y.PWM_OUT[1]);
 800a912:	4b28      	ldr	r3, [pc, #160]	; (800a9b4 <userMain+0x1dc>)
 800a914:	885b      	ldrh	r3, [r3, #2]
 800a916:	4619      	mov	r1, r3
 800a918:	481d      	ldr	r0, [pc, #116]	; (800a990 <userMain+0x1b8>)
 800a91a:	f7ff fee5 	bl	800a6e8 <motor_write>
				motor_write(&iMotor3, Second_att_control_codeblock_Y.PWM_OUT[2]);
 800a91e:	4b25      	ldr	r3, [pc, #148]	; (800a9b4 <userMain+0x1dc>)
 800a920:	889b      	ldrh	r3, [r3, #4]
 800a922:	4619      	mov	r1, r3
 800a924:	481b      	ldr	r0, [pc, #108]	; (800a994 <userMain+0x1bc>)
 800a926:	f7ff fedf 	bl	800a6e8 <motor_write>
				motor_write(&iMotor4, Second_att_control_codeblock_Y.PWM_OUT[3]);
 800a92a:	4b22      	ldr	r3, [pc, #136]	; (800a9b4 <userMain+0x1dc>)
 800a92c:	88db      	ldrh	r3, [r3, #6]
 800a92e:	4619      	mov	r1, r3
 800a930:	4819      	ldr	r0, [pc, #100]	; (800a998 <userMain+0x1c0>)
 800a932:	f7ff fed9 	bl	800a6e8 <motor_write>
				motor_write(&iMotor5, Second_att_control_codeblock_Y.PWM_OUT[4]);
 800a936:	4b1f      	ldr	r3, [pc, #124]	; (800a9b4 <userMain+0x1dc>)
 800a938:	891b      	ldrh	r3, [r3, #8]
 800a93a:	4619      	mov	r1, r3
 800a93c:	4818      	ldr	r0, [pc, #96]	; (800a9a0 <userMain+0x1c8>)
 800a93e:	f7ff fed3 	bl	800a6e8 <motor_write>
				motor_write(&iMotor6, Second_att_control_codeblock_Y.PWM_OUT[5]);
 800a942:	4b1c      	ldr	r3, [pc, #112]	; (800a9b4 <userMain+0x1dc>)
 800a944:	895b      	ldrh	r3, [r3, #10]
 800a946:	4619      	mov	r1, r3
 800a948:	4816      	ldr	r0, [pc, #88]	; (800a9a4 <userMain+0x1cc>)
 800a94a:	f7ff fecd 	bl	800a6e8 <motor_write>
			}
//			printIn(&Second_att_control_codeblock_U);
//			printOut(&Second_att_control_codeblock_Y);
		}
		MPU9250_print(&iMPU9250,1);
 800a94e:	2101      	movs	r1, #1
 800a950:	480a      	ldr	r0, [pc, #40]	; (800a97c <userMain+0x1a4>)
 800a952:	f7ff f8a1 	bl	8009a98 <MPU9250_print>
		if(vehicleState == VEHICLE_INIT){
 800a956:	4b18      	ldr	r3, [pc, #96]	; (800a9b8 <userMain+0x1e0>)
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d083      	beq.n	800a866 <userMain+0x8e>

		}
		else if(vehicleState == VEHICLE_PREARM){
 800a95e:	4b16      	ldr	r3, [pc, #88]	; (800a9b8 <userMain+0x1e0>)
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	2b01      	cmp	r3, #1
 800a964:	f43f af7f 	beq.w	800a866 <userMain+0x8e>

		}
		else if(vehicleState == VEHICLE_DISARM){
 800a968:	4b13      	ldr	r3, [pc, #76]	; (800a9b8 <userMain+0x1e0>)
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	2b02      	cmp	r3, #2
	while(1){
 800a96e:	e77a      	b.n	800a866 <userMain+0x8e>
 800a970:	2000006c 	.word	0x2000006c
 800a974:	0800efbc 	.word	0x0800efbc
 800a978:	200003cc 	.word	0x200003cc
 800a97c:	20000264 	.word	0x20000264
 800a980:	20000520 	.word	0x20000520
 800a984:	200004e0 	.word	0x200004e0
 800a988:	20000420 	.word	0x20000420
 800a98c:	20000a60 	.word	0x20000a60
 800a990:	20000a68 	.word	0x20000a68
 800a994:	20000a70 	.word	0x20000a70
 800a998:	20000a80 	.word	0x20000a80
 800a99c:	200004a0 	.word	0x200004a0
 800a9a0:	20000a88 	.word	0x20000a88
 800a9a4:	20000a78 	.word	0x20000a78
 800a9a8:	2000000c 	.word	0x2000000c
 800a9ac:	2000003c 	.word	0x2000003c
 800a9b0:	20000bd0 	.word	0x20000bd0
 800a9b4:	20000bc0 	.word	0x20000bc0
 800a9b8:	20000a52 	.word	0x20000a52

0800a9bc <HAL_I2C_MemRxCpltCallback>:
}



//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
	//mpu9250
	if(hi2c->Instance == I2C1){
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a0d      	ldr	r2, [pc, #52]	; (800aa00 <HAL_I2C_MemRxCpltCallback+0x44>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d113      	bne.n	800a9f6 <HAL_I2C_MemRxCpltCallback+0x3a>
		uint8_t result = MPU9250_callbackMPU9250IT(&iMPU9250);
 800a9ce:	480d      	ldr	r0, [pc, #52]	; (800aa04 <HAL_I2C_MemRxCpltCallback+0x48>)
 800a9d0:	f7fe fdae 	bl	8009530 <MPU9250_callbackMPU9250IT>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]
		if(result){
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00b      	beq.n	800a9f6 <HAL_I2C_MemRxCpltCallback+0x3a>
			iMPU9250.hzCnt++;
 800a9de:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <HAL_I2C_MemRxCpltCallback+0x48>)
 800a9e0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <HAL_I2C_MemRxCpltCallback+0x48>)
 800a9ea:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			iMPU9250.itSet = SET;
 800a9ee:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <HAL_I2C_MemRxCpltCallback+0x48>)
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		}
	}
}
 800a9f6:	bf00      	nop
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	40005400 	.word	0x40005400
 800aa04:	20000264 	.word	0x20000264

0800aa08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
	static uint8_t hz_update = 0;
	if(iMPU9250.itSet == RESET){// imu hz timer 100hz
 800aa10:	4b0d      	ldr	r3, [pc, #52]	; (800aa48 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800aa12:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d102      	bne.n	800aa22 <HAL_TIM_PeriodElapsedCallback+0x1a>
		MPU9250_readMPU9250IT(&iMPU9250);
 800aa1c:	480a      	ldr	r0, [pc, #40]	; (800aa48 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800aa1e:	f7fe fd72 	bl	8009506 <MPU9250_readMPU9250IT>
	}
	if(++hz_update > 99){
 800aa22:	4b0a      	ldr	r3, [pc, #40]	; (800aa4c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	3301      	adds	r3, #1
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	4b08      	ldr	r3, [pc, #32]	; (800aa4c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800aa2c:	701a      	strb	r2, [r3, #0]
 800aa2e:	4b07      	ldr	r3, [pc, #28]	; (800aa4c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b63      	cmp	r3, #99	; 0x63
 800aa34:	d904      	bls.n	800aa40 <HAL_TIM_PeriodElapsedCallback+0x38>
		sensorHz_update();
 800aa36:	f7ff f8af 	bl	8009b98 <sensorHz_update>
		hz_update = 0;
 800aa3a:	4b04      	ldr	r3, [pc, #16]	; (800aa4c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	701a      	strb	r2, [r3, #0]
	}
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	20000264 	.word	0x20000264
 800aa4c:	20000371 	.word	0x20000371

0800aa50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART7){
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a04      	ldr	r2, [pc, #16]	; (800aa70 <HAL_UART_RxCpltCallback+0x20>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d101      	bne.n	800aa66 <HAL_UART_RxCpltCallback+0x16>
		sbus_callback();
 800aa62:	f7ff fc7d 	bl	800a360 <sbus_callback>
	}
	if(huart->Instance == USART2){
		// telemetry
	}
}
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	40007800 	.word	0x40007800

0800aa74 <rt_roundf_snf>:
ExtU_Second_att_control_codeb_T Second_att_control_codeblock_U;

/* External outputs (root outports fed by signals with default storage) */
ExtY_Second_att_control_codeb_T Second_att_control_codeblock_Y;
real32_T rt_roundf_snf(real32_T u)
{
 800aa74:	b590      	push	{r4, r7, lr}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T y;
  if ((real32_T)fabs(u) < 8.388608E+6F) {
 800aa7e:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa82:	eef0 7ae7 	vabs.f32	s15, s15
 800aa86:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ab44 <rt_roundf_snf+0xd0>
 800aa8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa92:	d54c      	bpl.n	800ab2e <rt_roundf_snf+0xba>
    if (u >= 0.5F) {
 800aa94:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aa9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa4:	db18      	blt.n	800aad8 <rt_roundf_snf+0x64>
      y = (real32_T)floor(u + 0.5F);
 800aaa6:	edd7 7a01 	vldr	s15, [r7, #4]
 800aaaa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aaae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aab2:	ee17 0a90 	vmov	r0, s15
 800aab6:	f7f5 fd57 	bl	8000568 <__aeabi_f2d>
 800aaba:	4603      	mov	r3, r0
 800aabc:	460c      	mov	r4, r1
 800aabe:	ec44 3b10 	vmov	d0, r3, r4
 800aac2:	f000 ff79 	bl	800b9b8 <floor>
 800aac6:	ec54 3b10 	vmov	r3, r4, d0
 800aaca:	4618      	mov	r0, r3
 800aacc:	4621      	mov	r1, r4
 800aace:	f7f6 f87b 	bl	8000bc8 <__aeabi_d2f>
 800aad2:	4603      	mov	r3, r0
 800aad4:	60fb      	str	r3, [r7, #12]
 800aad6:	e02c      	b.n	800ab32 <rt_roundf_snf+0xbe>
    } else if (u > -0.5F) {
 800aad8:	edd7 7a01 	vldr	s15, [r7, #4]
 800aadc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800aae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aae8:	dd08      	ble.n	800aafc <rt_roundf_snf+0x88>
      y = u * 0.0F;
 800aaea:	edd7 7a01 	vldr	s15, [r7, #4]
 800aaee:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800ab48 <rt_roundf_snf+0xd4>
 800aaf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aaf6:	edc7 7a03 	vstr	s15, [r7, #12]
 800aafa:	e01a      	b.n	800ab32 <rt_roundf_snf+0xbe>
    } else {
      y = (real32_T)ceil(u - 0.5F);
 800aafc:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ab04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab08:	ee17 0a90 	vmov	r0, s15
 800ab0c:	f7f5 fd2c 	bl	8000568 <__aeabi_f2d>
 800ab10:	4603      	mov	r3, r0
 800ab12:	460c      	mov	r4, r1
 800ab14:	ec44 3b10 	vmov	d0, r3, r4
 800ab18:	f000 fece 	bl	800b8b8 <ceil>
 800ab1c:	ec54 3b10 	vmov	r3, r4, d0
 800ab20:	4618      	mov	r0, r3
 800ab22:	4621      	mov	r1, r4
 800ab24:	f7f6 f850 	bl	8000bc8 <__aeabi_d2f>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	e001      	b.n	800ab32 <rt_roundf_snf+0xbe>
    }
  } else {
    y = u;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	60fb      	str	r3, [r7, #12]
  }

  return y;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	ee07 3a90 	vmov	s15, r3
}
 800ab38:	eeb0 0a67 	vmov.f32	s0, s15
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd90      	pop	{r4, r7, pc}
 800ab42:	bf00      	nop
 800ab44:	4b000000 	.word	0x4b000000
	...

0800ab50 <Second_att_control_codeblock_step>:

/* Model step function */
void Second_att_control_codeblock_step(void)
{
 800ab50:	b5b0      	push	{r4, r5, r7, lr}
 800ab52:	ed2d 8b02 	vpush	{d8}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0

  /* DataTypeConversion: '<S4>/Data Type Conversion' incorporates:
   *  Inport: '<Root>/set_roll'
   */
  Second_att_control_codeblock_B.DataTypeConversion =
    Second_att_control_codeblock_U.set_roll;
 800ab5a:	4b9c      	ldr	r3, [pc, #624]	; (800adcc <Second_att_control_codeblock_step+0x27c>)
 800ab5c:	8adb      	ldrh	r3, [r3, #22]
  Second_att_control_codeblock_B.DataTypeConversion =
 800ab5e:	ee07 3a90 	vmov	s15, r3
 800ab62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab66:	4b9a      	ldr	r3, [pc, #616]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ab68:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  /* Fcn: '<S4>/Fcn2' */
  Second_att_control_codeblock_B.Fcn2 =
    (Second_att_control_codeblock_B.DataTypeConversion - 1500.0F) / 500.0F;
 800ab6c:	4b98      	ldr	r3, [pc, #608]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ab6e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ab72:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800add4 <Second_att_control_codeblock_step+0x284>
 800ab76:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ab7a:	eddf 6a97 	vldr	s13, [pc, #604]	; 800add8 <Second_att_control_codeblock_step+0x288>
 800ab7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock_B.Fcn2 =
 800ab82:	4b93      	ldr	r3, [pc, #588]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ab84:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  /* Saturate: '<S4>/Saturation9' */
  u0 = Second_att_control_codeblock_B.Fcn2;
 800ab88:	4b91      	ldr	r3, [pc, #580]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ab8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8c:	60fb      	str	r3, [r7, #12]
  if (u0 > 1.0F) {
 800ab8e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ab92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9e:	dd04      	ble.n	800abaa <Second_att_control_codeblock_step+0x5a>
    Second_att_control_codeblock_B.Saturation9 = 1.0F;
 800aba0:	4b8b      	ldr	r3, [pc, #556]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800aba2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800aba6:	631a      	str	r2, [r3, #48]	; 0x30
 800aba8:	e00f      	b.n	800abca <Second_att_control_codeblock_step+0x7a>
  } else if (u0 < -1.0F) {
 800abaa:	edd7 7a03 	vldr	s15, [r7, #12]
 800abae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800abb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abba:	d503      	bpl.n	800abc4 <Second_att_control_codeblock_step+0x74>
    Second_att_control_codeblock_B.Saturation9 = -1.0F;
 800abbc:	4b84      	ldr	r3, [pc, #528]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800abbe:	4a87      	ldr	r2, [pc, #540]	; (800addc <Second_att_control_codeblock_step+0x28c>)
 800abc0:	631a      	str	r2, [r3, #48]	; 0x30
 800abc2:	e002      	b.n	800abca <Second_att_control_codeblock_step+0x7a>
  } else {
    Second_att_control_codeblock_B.Saturation9 = u0;
 800abc4:	4a82      	ldr	r2, [pc, #520]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6313      	str	r3, [r2, #48]	; 0x30

  /* DataTypeConversion: '<S4>/Data Type Conversion1' incorporates:
   *  Inport: '<Root>/set_pitch'
   */
  Second_att_control_codeblock_B.DataTypeConversion1 =
    Second_att_control_codeblock_U.set_pitch;
 800abca:	4b80      	ldr	r3, [pc, #512]	; (800adcc <Second_att_control_codeblock_step+0x27c>)
 800abcc:	8b1b      	ldrh	r3, [r3, #24]
  Second_att_control_codeblock_B.DataTypeConversion1 =
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd6:	4b7e      	ldr	r3, [pc, #504]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800abd8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  /* Fcn: '<S4>/Fcn5' */
  Second_att_control_codeblock_B.Fcn5 =
    (Second_att_control_codeblock_B.DataTypeConversion1 - 1500.0F) / 500.0F;
 800abdc:	4b7c      	ldr	r3, [pc, #496]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800abde:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800abe2:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800add4 <Second_att_control_codeblock_step+0x284>
 800abe6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800abea:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800add8 <Second_att_control_codeblock_step+0x288>
 800abee:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock_B.Fcn5 =
 800abf2:	4b77      	ldr	r3, [pc, #476]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800abf4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  /* Saturate: '<S4>/Saturation8' */
  u0 = Second_att_control_codeblock_B.Fcn5;
 800abf8:	4b75      	ldr	r3, [pc, #468]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800abfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfc:	60fb      	str	r3, [r7, #12]
  if (u0 > 1.0F) {
 800abfe:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac06:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac0e:	dd04      	ble.n	800ac1a <Second_att_control_codeblock_step+0xca>
    Second_att_control_codeblock_B.Saturation8 = 1.0F;
 800ac10:	4b6f      	ldr	r3, [pc, #444]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ac16:	63da      	str	r2, [r3, #60]	; 0x3c
 800ac18:	e00f      	b.n	800ac3a <Second_att_control_codeblock_step+0xea>
  } else if (u0 < -1.0F) {
 800ac1a:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ac22:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2a:	d503      	bpl.n	800ac34 <Second_att_control_codeblock_step+0xe4>
    Second_att_control_codeblock_B.Saturation8 = -1.0F;
 800ac2c:	4b68      	ldr	r3, [pc, #416]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac2e:	4a6b      	ldr	r2, [pc, #428]	; (800addc <Second_att_control_codeblock_step+0x28c>)
 800ac30:	63da      	str	r2, [r3, #60]	; 0x3c
 800ac32:	e002      	b.n	800ac3a <Second_att_control_codeblock_step+0xea>
  } else {
    Second_att_control_codeblock_B.Saturation8 = u0;
 800ac34:	4a66      	ldr	r2, [pc, #408]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* End of Saturate: '<S4>/Saturation8' */

  /* Gain: '<S4>/Gain2' */
  Second_att_control_codeblock_B.Gain2[0] =
    Second_att_control_codeblock_B.Saturation9;
 800ac3a:	4b65      	ldr	r3, [pc, #404]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  Second_att_control_codeblock_B.Gain2[0] =
 800ac3e:	4a64      	ldr	r2, [pc, #400]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac40:	6413      	str	r3, [r2, #64]	; 0x40
  Second_att_control_codeblock_B.Gain2[1] =
    -Second_att_control_codeblock_B.Saturation8;
 800ac42:	4b63      	ldr	r3, [pc, #396]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac44:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800ac48:	eef1 7a67 	vneg.f32	s15, s15
  Second_att_control_codeblock_B.Gain2[1] =
 800ac4c:	4b60      	ldr	r3, [pc, #384]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac4e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

  /* Gain: '<S4>/1//rad_max' */
  Second_att_control_codeblock_B.urad_max[0] = Max_angle_coef *
    Second_att_control_codeblock_B.Gain2[0];
 800ac52:	4b5f      	ldr	r3, [pc, #380]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac54:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
  Second_att_control_codeblock_B.urad_max[0] = Max_angle_coef *
 800ac58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ac5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac60:	4b5b      	ldr	r3, [pc, #364]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac62:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  Second_att_control_codeblock_B.urad_max[1] = Max_angle_coef *
    Second_att_control_codeblock_B.Gain2[1];
 800ac66:	4b5a      	ldr	r3, [pc, #360]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac68:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
  Second_att_control_codeblock_B.urad_max[1] = Max_angle_coef *
 800ac6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ac70:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac74:	4b56      	ldr	r3, [pc, #344]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac76:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

  /* Gain: '<S7>/FF_roll_gain' */
  Second_att_control_codeblock_B.FF_roll_gain = 0.0F *
    Second_att_control_codeblock_B.urad_max[0];
 800ac7a:	4b55      	ldr	r3, [pc, #340]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac7c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
  Second_att_control_codeblock_B.FF_roll_gain = 0.0F *
 800ac80:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800ade0 <Second_att_control_codeblock_step+0x290>
 800ac84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac88:	4b51      	ldr	r3, [pc, #324]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac8a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  /* Sum: '<S7>/Sum' incorporates:
   *  Inport: '<Root>/Roll'
   */
  Second_att_control_codeblock_B.Sum_f =
    Second_att_control_codeblock_B.urad_max[0] -
 800ac8e:	4b50      	ldr	r3, [pc, #320]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ac90:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    Second_att_control_codeblock_U.Roll;
 800ac94:	4b4d      	ldr	r3, [pc, #308]	; (800adcc <Second_att_control_codeblock_step+0x27c>)
 800ac96:	edd3 7a00 	vldr	s15, [r3]
    Second_att_control_codeblock_B.urad_max[0] -
 800ac9a:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_f =
 800ac9e:	4b4c      	ldr	r3, [pc, #304]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800aca0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  /* Gain: '<S48>/Proportional Gain' */
  Second_att_control_codeblock_B.ProportionalGain = Angle_rate_roll_PI_kP *
    Second_att_control_codeblock_B.Sum_f;
 800aca4:	4b4a      	ldr	r3, [pc, #296]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800aca6:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
  Second_att_control_codeblock_B.ProportionalGain = Angle_rate_roll_PI_kP *
 800acaa:	4b4e      	ldr	r3, [pc, #312]	; (800ade4 <Second_att_control_codeblock_step+0x294>)
 800acac:	edd3 7a00 	vldr	s15, [r3]
 800acb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb4:	4b46      	ldr	r3, [pc, #280]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800acb6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  /* DiscreteIntegrator: '<S43>/Integrator' */
  Second_att_control_codeblock_B.Integrator =
    Second_att_control_codeblock_DW.Integrator_DSTATE;
 800acba:	4b4b      	ldr	r3, [pc, #300]	; (800ade8 <Second_att_control_codeblock_step+0x298>)
 800acbc:	691b      	ldr	r3, [r3, #16]
  Second_att_control_codeblock_B.Integrator =
 800acbe:	4a44      	ldr	r2, [pc, #272]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800acc0:	65d3      	str	r3, [r2, #92]	; 0x5c

  /* Sum: '<S52>/Sum' */
  Second_att_control_codeblock_B.Sum_j =
    Second_att_control_codeblock_B.ProportionalGain +
 800acc2:	4b43      	ldr	r3, [pc, #268]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800acc4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
    Second_att_control_codeblock_B.Integrator;
 800acc8:	4b41      	ldr	r3, [pc, #260]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800acca:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
    Second_att_control_codeblock_B.ProportionalGain +
 800acce:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_j =
 800acd2:	4b3f      	ldr	r3, [pc, #252]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800acd4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

  /* Sum: '<S7>/Sum1' */
  Second_att_control_codeblock_B.Sum1 =
    Second_att_control_codeblock_B.FF_roll_gain +
 800acd8:	4b3d      	ldr	r3, [pc, #244]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800acda:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
    Second_att_control_codeblock_B.Sum_j;
 800acde:	4b3c      	ldr	r3, [pc, #240]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ace0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
    Second_att_control_codeblock_B.FF_roll_gain +
 800ace4:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum1 =
 800ace8:	4b39      	ldr	r3, [pc, #228]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800acea:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

  /* Sum: '<S8>/Sum' incorporates:
   *  Inport: '<Root>/p'
   */
  Second_att_control_codeblock_B.Sum_c = Second_att_control_codeblock_B.Sum1 -
 800acee:	4b38      	ldr	r3, [pc, #224]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800acf0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
    Second_att_control_codeblock_U.p;
 800acf4:	4b35      	ldr	r3, [pc, #212]	; (800adcc <Second_att_control_codeblock_step+0x27c>)
 800acf6:	edd3 7a02 	vldr	s15, [r3, #8]
  Second_att_control_codeblock_B.Sum_c = Second_att_control_codeblock_B.Sum1 -
 800acfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acfe:	4b34      	ldr	r3, [pc, #208]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad00:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

  /* Gain: '<S194>/Proportional Gain' */
  Second_att_control_codeblock_B.ProportionalGain_b = kP_Roll_rate_PID *
    Second_att_control_codeblock_B.Sum_c;
 800ad04:	4b32      	ldr	r3, [pc, #200]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad06:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
  Second_att_control_codeblock_B.ProportionalGain_b = kP_Roll_rate_PID *
 800ad0a:	4b38      	ldr	r3, [pc, #224]	; (800adec <Second_att_control_codeblock_step+0x29c>)
 800ad0c:	edd3 7a00 	vldr	s15, [r3]
 800ad10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad14:	4b2e      	ldr	r3, [pc, #184]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad16:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  /* DiscreteIntegrator: '<S189>/Integrator' */
  Second_att_control_codeblock_B.Integrator_b =
    Second_att_control_codeblock_DW.Integrator_DSTATE_n;
 800ad1a:	4b33      	ldr	r3, [pc, #204]	; (800ade8 <Second_att_control_codeblock_step+0x298>)
 800ad1c:	695b      	ldr	r3, [r3, #20]
  Second_att_control_codeblock_B.Integrator_b =
 800ad1e:	4a2c      	ldr	r2, [pc, #176]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad20:	6713      	str	r3, [r2, #112]	; 0x70

  /* Gain: '<S183>/Derivative Gain' */
  Second_att_control_codeblock_B.DerivativeGain = kD_Roll_rate_PID *
    Second_att_control_codeblock_B.Sum_c;
 800ad22:	4b2b      	ldr	r3, [pc, #172]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad24:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
  Second_att_control_codeblock_B.DerivativeGain = kD_Roll_rate_PID *
 800ad28:	4b31      	ldr	r3, [pc, #196]	; (800adf0 <Second_att_control_codeblock_step+0x2a0>)
 800ad2a:	edd3 7a00 	vldr	s15, [r3]
 800ad2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad32:	4b27      	ldr	r3, [pc, #156]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad34:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

  /* DiscreteIntegrator: '<S184>/Filter' */
  Second_att_control_codeblock_B.Filter_h =
    Second_att_control_codeblock_DW.Filter_DSTATE_n;
 800ad38:	4b2b      	ldr	r3, [pc, #172]	; (800ade8 <Second_att_control_codeblock_step+0x298>)
 800ad3a:	699b      	ldr	r3, [r3, #24]
  Second_att_control_codeblock_B.Filter_h =
 800ad3c:	4a24      	ldr	r2, [pc, #144]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad3e:	6793      	str	r3, [r2, #120]	; 0x78

  /* Sum: '<S184>/SumD' */
  Second_att_control_codeblock_B.SumD_h =
    Second_att_control_codeblock_B.DerivativeGain -
 800ad40:	4b23      	ldr	r3, [pc, #140]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad42:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
    Second_att_control_codeblock_B.Filter_h;
 800ad46:	4b22      	ldr	r3, [pc, #136]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad48:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
    Second_att_control_codeblock_B.DerivativeGain -
 800ad4c:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.SumD_h =
 800ad50:	4b1f      	ldr	r3, [pc, #124]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad52:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

  /* Gain: '<S192>/Filter Coefficient' */
  Second_att_control_codeblock_B.FilterCoefficient_a = Hz_LPF_Roll_rate *
    Second_att_control_codeblock_B.SumD_h;
 800ad56:	4b1e      	ldr	r3, [pc, #120]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad58:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
  Second_att_control_codeblock_B.FilterCoefficient_a = Hz_LPF_Roll_rate *
 800ad5c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800ad60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad64:	4b1a      	ldr	r3, [pc, #104]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad66:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

  /* Sum: '<S198>/Sum' */
  Second_att_control_codeblock_B.Sum_n =
    (Second_att_control_codeblock_B.ProportionalGain_b +
 800ad6a:	4b19      	ldr	r3, [pc, #100]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad6c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
     Second_att_control_codeblock_B.Integrator_b) +
 800ad70:	4b17      	ldr	r3, [pc, #92]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad72:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
    (Second_att_control_codeblock_B.ProportionalGain_b +
 800ad76:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock_B.FilterCoefficient_a;
 800ad7a:	4b15      	ldr	r3, [pc, #84]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad7c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
     Second_att_control_codeblock_B.Integrator_b) +
 800ad80:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_n =
 800ad84:	4b12      	ldr	r3, [pc, #72]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad86:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

  /* Saturate: '<S196>/Saturation' */
  u0 = Second_att_control_codeblock_B.Sum_n;
 800ad8a:	4b11      	ldr	r3, [pc, #68]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ad8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad90:	60fb      	str	r3, [r7, #12]
  if (u0 > 1.0F) {
 800ad92:	edd7 7a03 	vldr	s15, [r7, #12]
 800ad96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada2:	dd05      	ble.n	800adb0 <Second_att_control_codeblock_step+0x260>
    Second_att_control_codeblock_B.Saturation_b = 1.0F;
 800ada4:	4b0a      	ldr	r3, [pc, #40]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800ada6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800adaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800adae:	e025      	b.n	800adfc <Second_att_control_codeblock_step+0x2ac>
  } else if (u0 < -1.0F) {
 800adb0:	edd7 7a03 	vldr	s15, [r7, #12]
 800adb4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800adb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc0:	d518      	bpl.n	800adf4 <Second_att_control_codeblock_step+0x2a4>
    Second_att_control_codeblock_B.Saturation_b = -1.0F;
 800adc2:	4b03      	ldr	r3, [pc, #12]	; (800add0 <Second_att_control_codeblock_step+0x280>)
 800adc4:	4a05      	ldr	r2, [pc, #20]	; (800addc <Second_att_control_codeblock_step+0x28c>)
 800adc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800adca:	e017      	b.n	800adfc <Second_att_control_codeblock_step+0x2ac>
 800adcc:	20000bd0 	.word	0x20000bd0
 800add0:	20000a90 	.word	0x20000a90
 800add4:	44bb8000 	.word	0x44bb8000
 800add8:	43fa0000 	.word	0x43fa0000
 800addc:	bf800000 	.word	0xbf800000
 800ade0:	00000000 	.word	0x00000000
 800ade4:	2000004c 	.word	0x2000004c
 800ade8:	20000b98 	.word	0x20000b98
 800adec:	20000060 	.word	0x20000060
 800adf0:	20000378 	.word	0x20000378
  } else {
    Second_att_control_codeblock_B.Saturation_b = u0;
 800adf4:	4ab4      	ldr	r2, [pc, #720]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* End of Saturate: '<S196>/Saturation' */

  /* Gain: '<S7>/FF_pitch_gain' */
  Second_att_control_codeblock_B.FF_pitch_gain = 0.0F *
    Second_att_control_codeblock_B.urad_max[1];
 800adfc:	4bb2      	ldr	r3, [pc, #712]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800adfe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
  Second_att_control_codeblock_B.FF_pitch_gain = 0.0F *
 800ae02:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800b0cc <Second_att_control_codeblock_step+0x57c>
 800ae06:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae0a:	4baf      	ldr	r3, [pc, #700]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae0c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

  /* Sum: '<S7>/Sum2' incorporates:
   *  Inport: '<Root>/Pitch'
   */
  Second_att_control_codeblock_B.Sum2 = Second_att_control_codeblock_B.urad_max
    [1] - Second_att_control_codeblock_U.Pitch;
 800ae10:	4bad      	ldr	r3, [pc, #692]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae12:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800ae16:	4bae      	ldr	r3, [pc, #696]	; (800b0d0 <Second_att_control_codeblock_step+0x580>)
 800ae18:	edd3 7a01 	vldr	s15, [r3, #4]
 800ae1c:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum2 = Second_att_control_codeblock_B.urad_max
 800ae20:	4ba9      	ldr	r3, [pc, #676]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae22:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

  /* Gain: '<S96>/Proportional Gain' */
  Second_att_control_codeblock_B.ProportionalGain_l = Angle_rate_pitch_kP *
    Second_att_control_codeblock_B.Sum2;
 800ae26:	4ba8      	ldr	r3, [pc, #672]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae28:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
  Second_att_control_codeblock_B.ProportionalGain_l = Angle_rate_pitch_kP *
 800ae2c:	4ba9      	ldr	r3, [pc, #676]	; (800b0d4 <Second_att_control_codeblock_step+0x584>)
 800ae2e:	edd3 7a00 	vldr	s15, [r3]
 800ae32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae36:	4ba4      	ldr	r3, [pc, #656]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae38:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

  /* DiscreteIntegrator: '<S91>/Integrator' */
  Second_att_control_codeblock_B.Integrator_f =
    Second_att_control_codeblock_DW.Integrator_DSTATE_l;
 800ae3c:	4ba6      	ldr	r3, [pc, #664]	; (800b0d8 <Second_att_control_codeblock_step+0x588>)
 800ae3e:	69db      	ldr	r3, [r3, #28]
  Second_att_control_codeblock_B.Integrator_f =
 800ae40:	4aa1      	ldr	r2, [pc, #644]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Sum: '<S100>/Sum' */
  Second_att_control_codeblock_B.Sum_l =
    Second_att_control_codeblock_B.ProportionalGain_l +
 800ae46:	4ba0      	ldr	r3, [pc, #640]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae48:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
    Second_att_control_codeblock_B.Integrator_f;
 800ae4c:	4b9e      	ldr	r3, [pc, #632]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae4e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
    Second_att_control_codeblock_B.ProportionalGain_l +
 800ae52:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_l =
 800ae56:	4b9c      	ldr	r3, [pc, #624]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae58:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

  /* Sum: '<S7>/Sum3' */
  Second_att_control_codeblock_B.Sum3 =
    Second_att_control_codeblock_B.FF_pitch_gain +
 800ae5c:	4b9a      	ldr	r3, [pc, #616]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae5e:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
    Second_att_control_codeblock_B.Sum_l;
 800ae62:	4b99      	ldr	r3, [pc, #612]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae64:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
    Second_att_control_codeblock_B.FF_pitch_gain +
 800ae68:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum3 =
 800ae6c:	4b96      	ldr	r3, [pc, #600]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae6e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

  /* Sum: '<S8>/Sum1' incorporates:
   *  Inport: '<Root>/q'
   */
  Second_att_control_codeblock_B.Sum1_h = Second_att_control_codeblock_B.Sum3 -
 800ae72:	4b95      	ldr	r3, [pc, #596]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae74:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
    Second_att_control_codeblock_U.q;
 800ae78:	4b95      	ldr	r3, [pc, #596]	; (800b0d0 <Second_att_control_codeblock_step+0x580>)
 800ae7a:	edd3 7a03 	vldr	s15, [r3, #12]
  Second_att_control_codeblock_B.Sum1_h = Second_att_control_codeblock_B.Sum3 -
 800ae7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae82:	4b91      	ldr	r3, [pc, #580]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae84:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

  /* Gain: '<S146>/Proportional Gain' */
  Second_att_control_codeblock_B.ProportionalGain_b4 = kP_Pitch_rate_PID *
    Second_att_control_codeblock_B.Sum1_h;
 800ae88:	4b8f      	ldr	r3, [pc, #572]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae8a:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
  Second_att_control_codeblock_B.ProportionalGain_b4 = kP_Pitch_rate_PID *
 800ae8e:	4b93      	ldr	r3, [pc, #588]	; (800b0dc <Second_att_control_codeblock_step+0x58c>)
 800ae90:	edd3 7a00 	vldr	s15, [r3]
 800ae94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae98:	4b8b      	ldr	r3, [pc, #556]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800ae9a:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

  /* DiscreteIntegrator: '<S141>/Integrator' */
  Second_att_control_codeblock_B.Integrator_a =
    Second_att_control_codeblock_DW.Integrator_DSTATE_d;
 800ae9e:	4b8e      	ldr	r3, [pc, #568]	; (800b0d8 <Second_att_control_codeblock_step+0x588>)
 800aea0:	6a1b      	ldr	r3, [r3, #32]
  Second_att_control_codeblock_B.Integrator_a =
 800aea2:	4a89      	ldr	r2, [pc, #548]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800aea4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Gain: '<S135>/Derivative Gain' */
  Second_att_control_codeblock_B.DerivativeGain_o = kD_Pitch_rate_PID *
    Second_att_control_codeblock_B.Sum1_h;
 800aea8:	4b87      	ldr	r3, [pc, #540]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800aeaa:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
  Second_att_control_codeblock_B.DerivativeGain_o = kD_Pitch_rate_PID *
 800aeae:	4b8c      	ldr	r3, [pc, #560]	; (800b0e0 <Second_att_control_codeblock_step+0x590>)
 800aeb0:	edd3 7a00 	vldr	s15, [r3]
 800aeb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb8:	4b83      	ldr	r3, [pc, #524]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800aeba:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

  /* DiscreteIntegrator: '<S136>/Filter' */
  Second_att_control_codeblock_B.Filter =
    Second_att_control_codeblock_DW.Filter_DSTATE;
 800aebe:	4b86      	ldr	r3, [pc, #536]	; (800b0d8 <Second_att_control_codeblock_step+0x588>)
 800aec0:	e9d3 3400 	ldrd	r3, r4, [r3]
  Second_att_control_codeblock_B.Filter =
 800aec4:	4a80      	ldr	r2, [pc, #512]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800aec6:	e9c2 3400 	strd	r3, r4, [r2]

  /* Sum: '<S136>/SumD' */
  Second_att_control_codeblock_B.SumD =
    Second_att_control_codeblock_B.DerivativeGain_o -
 800aeca:	4b7f      	ldr	r3, [pc, #508]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800aecc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7f5 fb49 	bl	8000568 <__aeabi_f2d>
    Second_att_control_codeblock_B.Filter;
 800aed6:	4b7c      	ldr	r3, [pc, #496]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800aed8:	e9d3 3400 	ldrd	r3, r4, [r3]
    Second_att_control_codeblock_B.DerivativeGain_o -
 800aedc:	461a      	mov	r2, r3
 800aede:	4623      	mov	r3, r4
 800aee0:	f7f5 f9e2 	bl	80002a8 <__aeabi_dsub>
 800aee4:	4603      	mov	r3, r0
 800aee6:	460c      	mov	r4, r1
  Second_att_control_codeblock_B.SumD =
 800aee8:	4a77      	ldr	r2, [pc, #476]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800aeea:	e9c2 3402 	strd	r3, r4, [r2, #8]

  /* Gain: '<S144>/Filter Coefficient' */
  Second_att_control_codeblock_B.FilterCoefficient = Hz_LPF_Pitch_rate *
 800aeee:	4b7d      	ldr	r3, [pc, #500]	; (800b0e4 <Second_att_control_codeblock_step+0x594>)
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7f5 fb39 	bl	8000568 <__aeabi_f2d>
    Second_att_control_codeblock_B.SumD;
 800aef6:	4b74      	ldr	r3, [pc, #464]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800aef8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  Second_att_control_codeblock_B.FilterCoefficient = Hz_LPF_Pitch_rate *
 800aefc:	461a      	mov	r2, r3
 800aefe:	4623      	mov	r3, r4
 800af00:	f7f5 fb8a 	bl	8000618 <__aeabi_dmul>
 800af04:	4603      	mov	r3, r0
 800af06:	460c      	mov	r4, r1
 800af08:	4a6f      	ldr	r2, [pc, #444]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800af0a:	e9c2 3404 	strd	r3, r4, [r2, #16]

  /* Sum: '<S150>/Sum' */
  Second_att_control_codeblock_B.Sum = ((real_T)
    Second_att_control_codeblock_B.ProportionalGain_b4 +
 800af0e:	4b6e      	ldr	r3, [pc, #440]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800af10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
  Second_att_control_codeblock_B.Sum = ((real_T)
 800af14:	4618      	mov	r0, r3
 800af16:	f7f5 fb27 	bl	8000568 <__aeabi_f2d>
 800af1a:	4604      	mov	r4, r0
 800af1c:	460d      	mov	r5, r1
    Second_att_control_codeblock_B.Integrator_a) +
 800af1e:	4b6a      	ldr	r3, [pc, #424]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800af20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af24:	4618      	mov	r0, r3
 800af26:	f7f5 fb1f 	bl	8000568 <__aeabi_f2d>
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
    Second_att_control_codeblock_B.ProportionalGain_b4 +
 800af2e:	4620      	mov	r0, r4
 800af30:	4629      	mov	r1, r5
 800af32:	f7f5 f9bb 	bl	80002ac <__adddf3>
 800af36:	4603      	mov	r3, r0
 800af38:	460c      	mov	r4, r1
 800af3a:	4618      	mov	r0, r3
 800af3c:	4621      	mov	r1, r4
    Second_att_control_codeblock_B.FilterCoefficient;
 800af3e:	4b62      	ldr	r3, [pc, #392]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800af40:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
    Second_att_control_codeblock_B.Integrator_a) +
 800af44:	461a      	mov	r2, r3
 800af46:	4623      	mov	r3, r4
 800af48:	f7f5 f9b0 	bl	80002ac <__adddf3>
 800af4c:	4603      	mov	r3, r0
 800af4e:	460c      	mov	r4, r1
  Second_att_control_codeblock_B.Sum = ((real_T)
 800af50:	4a5d      	ldr	r2, [pc, #372]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800af52:	e9c2 3406 	strd	r3, r4, [r2, #24]

  /* Saturate: '<S148>/Saturation' */
  u0_0 = Second_att_control_codeblock_B.Sum;
 800af56:	4b5c      	ldr	r3, [pc, #368]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800af58:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800af5c:	e9c7 3400 	strd	r3, r4, [r7]
  if (u0_0 > 1.0) {
 800af60:	f04f 0200 	mov.w	r2, #0
 800af64:	4b60      	ldr	r3, [pc, #384]	; (800b0e8 <Second_att_control_codeblock_step+0x598>)
 800af66:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af6a:	f7f5 fde5 	bl	8000b38 <__aeabi_dcmpgt>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d006      	beq.n	800af82 <Second_att_control_codeblock_step+0x432>
    Second_att_control_codeblock_B.Saturation = 1.0;
 800af74:	4a54      	ldr	r2, [pc, #336]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800af76:	f04f 0300 	mov.w	r3, #0
 800af7a:	4c5b      	ldr	r4, [pc, #364]	; (800b0e8 <Second_att_control_codeblock_step+0x598>)
 800af7c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800af80:	e015      	b.n	800afae <Second_att_control_codeblock_step+0x45e>
  } else if (u0_0 < -1.0) {
 800af82:	f04f 0200 	mov.w	r2, #0
 800af86:	4b59      	ldr	r3, [pc, #356]	; (800b0ec <Second_att_control_codeblock_step+0x59c>)
 800af88:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af8c:	f7f5 fdb6 	bl	8000afc <__aeabi_dcmplt>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d006      	beq.n	800afa4 <Second_att_control_codeblock_step+0x454>
    Second_att_control_codeblock_B.Saturation = -1.0;
 800af96:	4a4c      	ldr	r2, [pc, #304]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800af98:	f04f 0300 	mov.w	r3, #0
 800af9c:	4c53      	ldr	r4, [pc, #332]	; (800b0ec <Second_att_control_codeblock_step+0x59c>)
 800af9e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800afa2:	e004      	b.n	800afae <Second_att_control_codeblock_step+0x45e>
  } else {
    Second_att_control_codeblock_B.Saturation = u0_0;
 800afa4:	4a48      	ldr	r2, [pc, #288]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800afa6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800afaa:	e9c2 3408 	strd	r3, r4, [r2, #32]

  /* DataTypeConversion: '<S4>/Data Type Conversion2' incorporates:
   *  Inport: '<Root>/set_yaw'
   */
  Second_att_control_codeblock_B.DataTypeConversion2 =
    Second_att_control_codeblock_U.set_yaw;
 800afae:	4b48      	ldr	r3, [pc, #288]	; (800b0d0 <Second_att_control_codeblock_step+0x580>)
 800afb0:	8b5b      	ldrh	r3, [r3, #26]
  Second_att_control_codeblock_B.DataTypeConversion2 =
 800afb2:	ee07 3a90 	vmov	s15, r3
 800afb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afba:	4b43      	ldr	r3, [pc, #268]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800afbc:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

  /* Fcn: '<S4>/Fcn7' */
  Second_att_control_codeblock_B.Fcn7 =
    (Second_att_control_codeblock_B.DataTypeConversion2 - 1500.0F) / 500.0F;
 800afc0:	4b41      	ldr	r3, [pc, #260]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800afc2:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800afc6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b0f0 <Second_att_control_codeblock_step+0x5a0>
 800afca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800afce:	eddf 6a49 	vldr	s13, [pc, #292]	; 800b0f4 <Second_att_control_codeblock_step+0x5a4>
 800afd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock_B.Fcn7 =
 800afd6:	4b3c      	ldr	r3, [pc, #240]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800afd8:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8

  /* Saturate: '<S4>/Saturation7' */
  u0 = Second_att_control_codeblock_B.Fcn7;
 800afdc:	4b3a      	ldr	r3, [pc, #232]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800afde:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800afe2:	60fb      	str	r3, [r7, #12]
  if (u0 > 1.0F) {
 800afe4:	edd7 7a03 	vldr	s15, [r7, #12]
 800afe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aff4:	dd05      	ble.n	800b002 <Second_att_control_codeblock_step+0x4b2>
    Second_att_control_codeblock_B.Saturation7 = 1.0F;
 800aff6:	4b34      	ldr	r3, [pc, #208]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800aff8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800affc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800b000:	e011      	b.n	800b026 <Second_att_control_codeblock_step+0x4d6>
  } else if (u0 < -1.0F) {
 800b002:	edd7 7a03 	vldr	s15, [r7, #12]
 800b006:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b00a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b012:	d504      	bpl.n	800b01e <Second_att_control_codeblock_step+0x4ce>
    Second_att_control_codeblock_B.Saturation7 = -1.0F;
 800b014:	4b2c      	ldr	r3, [pc, #176]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b016:	4a38      	ldr	r2, [pc, #224]	; (800b0f8 <Second_att_control_codeblock_step+0x5a8>)
 800b018:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800b01c:	e003      	b.n	800b026 <Second_att_control_codeblock_step+0x4d6>
  } else {
    Second_att_control_codeblock_B.Saturation7 = u0;
 800b01e:	4a2a      	ldr	r2, [pc, #168]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

  /* Sum: '<S9>/Sum' incorporates:
   *  Inport: '<Root>/r'
   */
  Second_att_control_codeblock_B.Sum_m =
    Second_att_control_codeblock_B.Saturation7 -
 800b026:	4b28      	ldr	r3, [pc, #160]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b028:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
    Second_att_control_codeblock_U.r;
 800b02c:	4b28      	ldr	r3, [pc, #160]	; (800b0d0 <Second_att_control_codeblock_step+0x580>)
 800b02e:	edd3 7a04 	vldr	s15, [r3, #16]
    Second_att_control_codeblock_B.Saturation7 -
 800b032:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_m =
 800b036:	4b24      	ldr	r3, [pc, #144]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b038:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0

  /* Gain: '<S9>/Gain' */
  Second_att_control_codeblock_B.Gain = Yaw_rate_max_rad *
    Second_att_control_codeblock_B.Sum_m;
 800b03c:	4b22      	ldr	r3, [pc, #136]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b03e:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
  Second_att_control_codeblock_B.Gain = Yaw_rate_max_rad *
 800b042:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800b0fc <Second_att_control_codeblock_step+0x5ac>
 800b046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b04a:	4b1f      	ldr	r3, [pc, #124]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b04c:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

  /* Gain: '<S243>/Proportional Gain' */
  Second_att_control_codeblock_B.ProportionalGain_j = kP_Yaw_rate_PID *
    Second_att_control_codeblock_B.Gain;
 800b050:	4b1d      	ldr	r3, [pc, #116]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b052:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
  Second_att_control_codeblock_B.ProportionalGain_j = kP_Yaw_rate_PID *
 800b056:	4b2a      	ldr	r3, [pc, #168]	; (800b100 <Second_att_control_codeblock_step+0x5b0>)
 800b058:	edd3 7a00 	vldr	s15, [r3]
 800b05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b060:	4b19      	ldr	r3, [pc, #100]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b062:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8

  /* DiscreteIntegrator: '<S238>/Integrator' */
  Second_att_control_codeblock_B.Integrator_d =
    Second_att_control_codeblock_DW.Integrator_DSTATE_j;
 800b066:	4b1c      	ldr	r3, [pc, #112]	; (800b0d8 <Second_att_control_codeblock_step+0x588>)
 800b068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  Second_att_control_codeblock_B.Integrator_d =
 800b06a:	4a17      	ldr	r2, [pc, #92]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b06c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

  /* Sum: '<S247>/Sum' */
  Second_att_control_codeblock_B.Sum_f3 =
    Second_att_control_codeblock_B.ProportionalGain_j +
 800b070:	4b15      	ldr	r3, [pc, #84]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b072:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
    Second_att_control_codeblock_B.Integrator_d;
 800b076:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b078:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
    Second_att_control_codeblock_B.ProportionalGain_j +
 800b07c:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_f3 =
 800b080:	4b11      	ldr	r3, [pc, #68]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b082:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

  /* Saturate: '<S245>/Saturation' */
  u0 = Second_att_control_codeblock_B.Sum_f3;
 800b086:	4b10      	ldr	r3, [pc, #64]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b088:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800b08c:	60fb      	str	r3, [r7, #12]
  if (u0 > 1.0F) {
 800b08e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b09e:	dd05      	ble.n	800b0ac <Second_att_control_codeblock_step+0x55c>
    Second_att_control_codeblock_B.Saturation_o = 1.0F;
 800b0a0:	4b09      	ldr	r3, [pc, #36]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b0a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b0a6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800b0aa:	e02f      	b.n	800b10c <Second_att_control_codeblock_step+0x5bc>
  } else if (u0 < -1.0F) {
 800b0ac:	edd7 7a03 	vldr	s15, [r7, #12]
 800b0b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b0b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0bc:	d522      	bpl.n	800b104 <Second_att_control_codeblock_step+0x5b4>
    Second_att_control_codeblock_B.Saturation_o = -1.0F;
 800b0be:	4b02      	ldr	r3, [pc, #8]	; (800b0c8 <Second_att_control_codeblock_step+0x578>)
 800b0c0:	4a0d      	ldr	r2, [pc, #52]	; (800b0f8 <Second_att_control_codeblock_step+0x5a8>)
 800b0c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800b0c6:	e021      	b.n	800b10c <Second_att_control_codeblock_step+0x5bc>
 800b0c8:	20000a90 	.word	0x20000a90
 800b0cc:	00000000 	.word	0x00000000
 800b0d0:	20000bd0 	.word	0x20000bd0
 800b0d4:	20000044 	.word	0x20000044
 800b0d8:	20000b98 	.word	0x20000b98
 800b0dc:	2000005c 	.word	0x2000005c
 800b0e0:	20000374 	.word	0x20000374
 800b0e4:	41a00000 	.word	0x41a00000
 800b0e8:	3ff00000 	.word	0x3ff00000
 800b0ec:	bff00000 	.word	0xbff00000
 800b0f0:	44bb8000 	.word	0x44bb8000
 800b0f4:	43fa0000 	.word	0x43fa0000
 800b0f8:	bf800000 	.word	0xbf800000
 800b0fc:	3f860a90 	.word	0x3f860a90
 800b100:	20000064 	.word	0x20000064
  } else {
    Second_att_control_codeblock_B.Saturation_o = u0;
 800b104:	4ac3      	ldr	r2, [pc, #780]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

  /* DataTypeConversion: '<S4>/Data Type Conversion3' incorporates:
   *  Inport: '<Root>/set_thrust'
   */
  Second_att_control_codeblock_B.DataTypeConversion3 =
    Second_att_control_codeblock_U.set_thrust;
 800b10c:	4bc2      	ldr	r3, [pc, #776]	; (800b418 <Second_att_control_codeblock_step+0x8c8>)
 800b10e:	8a9b      	ldrh	r3, [r3, #20]
  Second_att_control_codeblock_B.DataTypeConversion3 =
 800b110:	ee07 3a90 	vmov	s15, r3
 800b114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b118:	4bbe      	ldr	r3, [pc, #760]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b11a:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8

  /* Fcn: '<S4>/Fcn6' */
  Second_att_control_codeblock_B.Fcn6 =
    (Second_att_control_codeblock_B.DataTypeConversion3 - 1000.0F) / 1000.0F;
 800b11e:	4bbd      	ldr	r3, [pc, #756]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b120:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800b124:	ed9f 7abd 	vldr	s14, [pc, #756]	; 800b41c <Second_att_control_codeblock_step+0x8cc>
 800b128:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b12c:	eddf 6abb 	vldr	s13, [pc, #748]	; 800b41c <Second_att_control_codeblock_step+0x8cc>
 800b130:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock_B.Fcn6 =
 800b134:	4bb7      	ldr	r3, [pc, #732]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b136:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc

  /* Saturate: '<S4>/Saturation10' */
  u0 = Second_att_control_codeblock_B.Fcn6;
 800b13a:	4bb6      	ldr	r3, [pc, #728]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b13c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b140:	60fb      	str	r3, [r7, #12]
  if (u0 > 1.0F) {
 800b142:	edd7 7a03 	vldr	s15, [r7, #12]
 800b146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b14a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b152:	dd05      	ble.n	800b160 <Second_att_control_codeblock_step+0x610>
    Second_att_control_codeblock_B.Saturation10 = 1.0F;
 800b154:	4baf      	ldr	r3, [pc, #700]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b156:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b15a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b15e:	e010      	b.n	800b182 <Second_att_control_codeblock_step+0x632>
  } else if (u0 < 0.0F) {
 800b160:	edd7 7a03 	vldr	s15, [r7, #12]
 800b164:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b16c:	d505      	bpl.n	800b17a <Second_att_control_codeblock_step+0x62a>
    Second_att_control_codeblock_B.Saturation10 = 0.0F;
 800b16e:	4ba9      	ldr	r3, [pc, #676]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b170:	f04f 0200 	mov.w	r2, #0
 800b174:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b178:	e003      	b.n	800b182 <Second_att_control_codeblock_step+0x632>
  } else {
    Second_att_control_codeblock_B.Saturation10 = u0;
 800b17a:	4aa6      	ldr	r2, [pc, #664]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /* End of Saturate: '<S4>/Saturation10' */

  /* MATLAB Function: '<S1>/pwm_out1' */
  u0 = rt_roundf_snf(((-Second_att_control_codeblock_B.Saturation_b -
 800b182:	4ba4      	ldr	r3, [pc, #656]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b184:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800b188:	eeb1 7a67 	vneg.f32	s14, s15
                       Second_att_control_codeblock_B.Saturation_o) *
 800b18c:	4ba1      	ldr	r3, [pc, #644]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b18e:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
  u0 = rt_roundf_snf(((-Second_att_control_codeblock_B.Saturation_b -
 800b192:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b196:	4b9f      	ldr	r3, [pc, #636]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b198:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                       Second_att_control_codeblock_B.Saturation_o) *
 800b19c:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b1a0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b1a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b1a8:	4b9a      	ldr	r3, [pc, #616]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b1aa:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b1ae:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((-Second_att_control_codeblock_B.Saturation_b -
 800b1b2:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800b41c <Second_att_control_codeblock_step+0x8cc>
 800b1b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b1ba:	eeb0 0a67 	vmov.f32	s0, s15
 800b1be:	f7ff fc59 	bl	800aa74 <rt_roundf_snf>
 800b1c2:	ed87 0a03 	vstr	s0, [r7, #12]
  if (u0 < 65536.0F) {
 800b1c6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1ca:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800b420 <Second_att_control_codeblock_step+0x8d0>
 800b1ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1d6:	d511      	bpl.n	800b1fc <Second_att_control_codeblock_step+0x6ac>
    if (u0 >= 0.0F) {
 800b1d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e4:	db07      	blt.n	800b1f6 <Second_att_control_codeblock_step+0x6a6>
      y = (uint16_T)u0;
 800b1e6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1ee:	ee17 3a90 	vmov	r3, s15
 800b1f2:	827b      	strh	r3, [r7, #18]
 800b1f4:	e005      	b.n	800b202 <Second_att_control_codeblock_step+0x6b2>
    } else {
      y = 0U;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	827b      	strh	r3, [r7, #18]
 800b1fa:	e002      	b.n	800b202 <Second_att_control_codeblock_step+0x6b2>
    }
  } else {
    y = MAX_uint16_T;
 800b1fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b200:	827b      	strh	r3, [r7, #18]
  }

  tmp = y + 1000U;
 800b202:	8a7b      	ldrh	r3, [r7, #18]
 800b204:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b208:	617b      	str	r3, [r7, #20]
  if (tmp > 65535U) {
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b210:	d302      	bcc.n	800b218 <Second_att_control_codeblock_step+0x6c8>
    tmp = 65535U;
 800b212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b216:	617b      	str	r3, [r7, #20]
  }

  Second_att_control_codeblock_B.M1 = (uint16_T)tmp;
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	4b7d      	ldr	r3, [pc, #500]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b21e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
  u0 = rt_roundf_snf(((Second_att_control_codeblock_B.Saturation_b +
 800b222:	4b7c      	ldr	r3, [pc, #496]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b224:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
                       Second_att_control_codeblock_B.Saturation_o) *
 800b228:	4b7a      	ldr	r3, [pc, #488]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b22a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
  u0 = rt_roundf_snf(((Second_att_control_codeblock_B.Saturation_b +
 800b22e:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b232:	4b78      	ldr	r3, [pc, #480]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b234:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                       Second_att_control_codeblock_B.Saturation_o) *
 800b238:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b23c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b240:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b244:	4b73      	ldr	r3, [pc, #460]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b246:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b24a:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((Second_att_control_codeblock_B.Saturation_b +
 800b24e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b41c <Second_att_control_codeblock_step+0x8cc>
 800b252:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b256:	eeb0 0a67 	vmov.f32	s0, s15
 800b25a:	f7ff fc0b 	bl	800aa74 <rt_roundf_snf>
 800b25e:	ed87 0a03 	vstr	s0, [r7, #12]
  if (u0 < 65536.0F) {
 800b262:	edd7 7a03 	vldr	s15, [r7, #12]
 800b266:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800b420 <Second_att_control_codeblock_step+0x8d0>
 800b26a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b272:	d511      	bpl.n	800b298 <Second_att_control_codeblock_step+0x748>
    if (u0 >= 0.0F) {
 800b274:	edd7 7a03 	vldr	s15, [r7, #12]
 800b278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b280:	db07      	blt.n	800b292 <Second_att_control_codeblock_step+0x742>
      y = (uint16_T)u0;
 800b282:	edd7 7a03 	vldr	s15, [r7, #12]
 800b286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b28a:	ee17 3a90 	vmov	r3, s15
 800b28e:	827b      	strh	r3, [r7, #18]
 800b290:	e005      	b.n	800b29e <Second_att_control_codeblock_step+0x74e>
    } else {
      y = 0U;
 800b292:	2300      	movs	r3, #0
 800b294:	827b      	strh	r3, [r7, #18]
 800b296:	e002      	b.n	800b29e <Second_att_control_codeblock_step+0x74e>
    }
  } else {
    y = MAX_uint16_T;
 800b298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b29c:	827b      	strh	r3, [r7, #18]
  }

  tmp = y + 1000U;
 800b29e:	8a7b      	ldrh	r3, [r7, #18]
 800b2a0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b2a4:	617b      	str	r3, [r7, #20]
  if (tmp > 65535U) {
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2ac:	d302      	bcc.n	800b2b4 <Second_att_control_codeblock_step+0x764>
    tmp = 65535U;
 800b2ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2b2:	617b      	str	r3, [r7, #20]
  }

  Second_att_control_codeblock_B.M2 = (uint16_T)tmp;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	b29a      	uxth	r2, r3
 800b2b8:	4b56      	ldr	r3, [pc, #344]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b2ba:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Saturation_b / 2.0F +
 800b2be:	4b55      	ldr	r3, [pc, #340]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b2c0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800b2c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b2c8:	ee87 8a87 	vdiv.f32	s16, s15, s14
                        (real32_T)Second_att_control_codeblock_B.Saturation) -
 800b2cc:	4b51      	ldr	r3, [pc, #324]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b2ce:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	f7f5 fc77 	bl	8000bc8 <__aeabi_d2f>
 800b2da:	ee07 0a90 	vmov	s15, r0
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Saturation_b / 2.0F +
 800b2de:	ee38 7a27 	vadd.f32	s14, s16, s15
                       Second_att_control_codeblock_B.Saturation_o) *
 800b2e2:	4b4c      	ldr	r3, [pc, #304]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b2e4:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
                        (real32_T)Second_att_control_codeblock_B.Saturation) -
 800b2e8:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b2ec:	4b49      	ldr	r3, [pc, #292]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b2ee:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                       Second_att_control_codeblock_B.Saturation_o) *
 800b2f2:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b2f6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b2fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b2fe:	4b45      	ldr	r3, [pc, #276]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b300:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b304:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Saturation_b / 2.0F +
 800b308:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b41c <Second_att_control_codeblock_step+0x8cc>
 800b30c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b310:	eeb0 0a67 	vmov.f32	s0, s15
 800b314:	f7ff fbae 	bl	800aa74 <rt_roundf_snf>
 800b318:	ed87 0a03 	vstr	s0, [r7, #12]
  if (u0 < 65536.0F) {
 800b31c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b320:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800b420 <Second_att_control_codeblock_step+0x8d0>
 800b324:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b32c:	d511      	bpl.n	800b352 <Second_att_control_codeblock_step+0x802>
    if (u0 >= 0.0F) {
 800b32e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b33a:	db07      	blt.n	800b34c <Second_att_control_codeblock_step+0x7fc>
      y = (uint16_T)u0;
 800b33c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b344:	ee17 3a90 	vmov	r3, s15
 800b348:	827b      	strh	r3, [r7, #18]
 800b34a:	e005      	b.n	800b358 <Second_att_control_codeblock_step+0x808>
    } else {
      y = 0U;
 800b34c:	2300      	movs	r3, #0
 800b34e:	827b      	strh	r3, [r7, #18]
 800b350:	e002      	b.n	800b358 <Second_att_control_codeblock_step+0x808>
    }
  } else {
    y = MAX_uint16_T;
 800b352:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b356:	827b      	strh	r3, [r7, #18]
  }

  tmp = y + 1000U;
 800b358:	8a7b      	ldrh	r3, [r7, #18]
 800b35a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b35e:	617b      	str	r3, [r7, #20]
  if (tmp > 65535U) {
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b366:	d302      	bcc.n	800b36e <Second_att_control_codeblock_step+0x81e>
    tmp = 65535U;
 800b368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b36c:	617b      	str	r3, [r7, #20]
  }

  Second_att_control_codeblock_B.M3 = (uint16_T)tmp;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	b29a      	uxth	r2, r3
 800b372:	4b28      	ldr	r3, [pc, #160]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b374:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  u0 = rt_roundf_snf(((((real32_T)-Second_att_control_codeblock_B.Saturation -
 800b378:	4b26      	ldr	r3, [pc, #152]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b37a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800b37e:	4618      	mov	r0, r3
 800b380:	4621      	mov	r1, r4
 800b382:	f7f5 fc21 	bl	8000bc8 <__aeabi_d2f>
 800b386:	4603      	mov	r3, r0
 800b388:	ee07 3a90 	vmov	s15, r3
 800b38c:	eeb1 7a67 	vneg.f32	s14, s15
                        Second_att_control_codeblock_B.Saturation_b / 2.0F) +
 800b390:	4b20      	ldr	r3, [pc, #128]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b392:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 800b396:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800b39a:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf(((((real32_T)-Second_att_control_codeblock_B.Saturation -
 800b39e:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock_B.Saturation_o) *
 800b3a2:	4b1c      	ldr	r3, [pc, #112]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b3a4:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
                        Second_att_control_codeblock_B.Saturation_b / 2.0F) +
 800b3a8:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b3ac:	4b19      	ldr	r3, [pc, #100]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b3ae:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                       Second_att_control_codeblock_B.Saturation_o) *
 800b3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b3b6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b3ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b3be:	4b15      	ldr	r3, [pc, #84]	; (800b414 <Second_att_control_codeblock_step+0x8c4>)
 800b3c0:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b3c4:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((((real32_T)-Second_att_control_codeblock_B.Saturation -
 800b3c8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800b41c <Second_att_control_codeblock_step+0x8cc>
 800b3cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3d0:	eeb0 0a67 	vmov.f32	s0, s15
 800b3d4:	f7ff fb4e 	bl	800aa74 <rt_roundf_snf>
 800b3d8:	ed87 0a03 	vstr	s0, [r7, #12]
  if (u0 < 65536.0F) {
 800b3dc:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800b420 <Second_att_control_codeblock_step+0x8d0>
 800b3e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ec:	d51a      	bpl.n	800b424 <Second_att_control_codeblock_step+0x8d4>
    if (u0 >= 0.0F) {
 800b3ee:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3fa:	db07      	blt.n	800b40c <Second_att_control_codeblock_step+0x8bc>
      y = (uint16_T)u0;
 800b3fc:	edd7 7a03 	vldr	s15, [r7, #12]
 800b400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b404:	ee17 3a90 	vmov	r3, s15
 800b408:	827b      	strh	r3, [r7, #18]
 800b40a:	e00e      	b.n	800b42a <Second_att_control_codeblock_step+0x8da>
    } else {
      y = 0U;
 800b40c:	2300      	movs	r3, #0
 800b40e:	827b      	strh	r3, [r7, #18]
 800b410:	e00b      	b.n	800b42a <Second_att_control_codeblock_step+0x8da>
 800b412:	bf00      	nop
 800b414:	20000a90 	.word	0x20000a90
 800b418:	20000bd0 	.word	0x20000bd0
 800b41c:	447a0000 	.word	0x447a0000
 800b420:	47800000 	.word	0x47800000
    }
  } else {
    y = MAX_uint16_T;
 800b424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b428:	827b      	strh	r3, [r7, #18]
  }

  tmp = y + 1000U;
 800b42a:	8a7b      	ldrh	r3, [r7, #18]
 800b42c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b430:	617b      	str	r3, [r7, #20]
  if (tmp > 65535U) {
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b438:	d302      	bcc.n	800b440 <Second_att_control_codeblock_step+0x8f0>
    tmp = 65535U;
 800b43a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b43e:	617b      	str	r3, [r7, #20]
  }

  Second_att_control_codeblock_B.M4 = (uint16_T)tmp;
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	b29a      	uxth	r2, r3
 800b444:	4bab      	ldr	r3, [pc, #684]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b446:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
  u0 = rt_roundf_snf(((((real32_T)Second_att_control_codeblock_B.Saturation -
 800b44a:	4baa      	ldr	r3, [pc, #680]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b44c:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800b450:	4618      	mov	r0, r3
 800b452:	4621      	mov	r1, r4
 800b454:	f7f5 fbb8 	bl	8000bc8 <__aeabi_d2f>
 800b458:	ee06 0a10 	vmov	s12, r0
                        Second_att_control_codeblock_B.Saturation_b / 2.0F) +
 800b45c:	4ba5      	ldr	r3, [pc, #660]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b45e:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800b462:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b466:	eec7 7a26 	vdiv.f32	s15, s14, s13
  u0 = rt_roundf_snf(((((real32_T)Second_att_control_codeblock_B.Saturation -
 800b46a:	ee36 7a67 	vsub.f32	s14, s12, s15
                       Second_att_control_codeblock_B.Saturation_o) *
 800b46e:	4ba1      	ldr	r3, [pc, #644]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b470:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
                        Second_att_control_codeblock_B.Saturation_b / 2.0F) +
 800b474:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b478:	4b9e      	ldr	r3, [pc, #632]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b47a:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                       Second_att_control_codeblock_B.Saturation_o) *
 800b47e:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b482:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b486:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b48a:	4b9a      	ldr	r3, [pc, #616]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b48c:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b490:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((((real32_T)Second_att_control_codeblock_B.Saturation -
 800b494:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800b6f8 <Second_att_control_codeblock_step+0xba8>
 800b498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b49c:	eeb0 0a67 	vmov.f32	s0, s15
 800b4a0:	f7ff fae8 	bl	800aa74 <rt_roundf_snf>
 800b4a4:	ed87 0a03 	vstr	s0, [r7, #12]
  if (u0 < 65536.0F) {
 800b4a8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b4ac:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800b6fc <Second_att_control_codeblock_step+0xbac>
 800b4b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b8:	d511      	bpl.n	800b4de <Second_att_control_codeblock_step+0x98e>
    if (u0 >= 0.0F) {
 800b4ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800b4be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c6:	db07      	blt.n	800b4d8 <Second_att_control_codeblock_step+0x988>
      y = (uint16_T)u0;
 800b4c8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b4cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4d0:	ee17 3a90 	vmov	r3, s15
 800b4d4:	827b      	strh	r3, [r7, #18]
 800b4d6:	e005      	b.n	800b4e4 <Second_att_control_codeblock_step+0x994>
    } else {
      y = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	827b      	strh	r3, [r7, #18]
 800b4dc:	e002      	b.n	800b4e4 <Second_att_control_codeblock_step+0x994>
    }
  } else {
    y = MAX_uint16_T;
 800b4de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4e2:	827b      	strh	r3, [r7, #18]
  }

  tmp = y + 1000U;
 800b4e4:	8a7b      	ldrh	r3, [r7, #18]
 800b4e6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b4ea:	617b      	str	r3, [r7, #20]
  if (tmp > 65535U) {
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4f2:	d302      	bcc.n	800b4fa <Second_att_control_codeblock_step+0x9aa>
    tmp = 65535U;
 800b4f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4f8:	617b      	str	r3, [r7, #20]
  }

  Second_att_control_codeblock_B.M5 = (uint16_T)tmp;
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	4b7d      	ldr	r3, [pc, #500]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b500:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Saturation_b / 2.0F +
 800b504:	4b7b      	ldr	r3, [pc, #492]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b506:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800b50a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b50e:	ee87 8a87 	vdiv.f32	s16, s15, s14
                        (real32_T)-Second_att_control_codeblock_B.Saturation) -
 800b512:	4b78      	ldr	r3, [pc, #480]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b514:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800b518:	4618      	mov	r0, r3
 800b51a:	4621      	mov	r1, r4
 800b51c:	f7f5 fb54 	bl	8000bc8 <__aeabi_d2f>
 800b520:	ee07 0a90 	vmov	s15, r0
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Saturation_b / 2.0F +
 800b524:	ee38 7a67 	vsub.f32	s14, s16, s15
                       Second_att_control_codeblock_B.Saturation_o) *
 800b528:	4b72      	ldr	r3, [pc, #456]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b52a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
                        (real32_T)-Second_att_control_codeblock_B.Saturation) -
 800b52e:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b532:	4b70      	ldr	r3, [pc, #448]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b534:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                       Second_att_control_codeblock_B.Saturation_o) *
 800b538:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b53c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b540:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b544:	4b6b      	ldr	r3, [pc, #428]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b546:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b54a:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Saturation_b / 2.0F +
 800b54e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b6f8 <Second_att_control_codeblock_step+0xba8>
 800b552:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b556:	eeb0 0a67 	vmov.f32	s0, s15
 800b55a:	f7ff fa8b 	bl	800aa74 <rt_roundf_snf>
 800b55e:	ed87 0a03 	vstr	s0, [r7, #12]
  if (u0 < 65536.0F) {
 800b562:	edd7 7a03 	vldr	s15, [r7, #12]
 800b566:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800b6fc <Second_att_control_codeblock_step+0xbac>
 800b56a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b572:	d511      	bpl.n	800b598 <Second_att_control_codeblock_step+0xa48>
    if (u0 >= 0.0F) {
 800b574:	edd7 7a03 	vldr	s15, [r7, #12]
 800b578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b580:	db07      	blt.n	800b592 <Second_att_control_codeblock_step+0xa42>
      y = (uint16_T)u0;
 800b582:	edd7 7a03 	vldr	s15, [r7, #12]
 800b586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b58a:	ee17 3a90 	vmov	r3, s15
 800b58e:	827b      	strh	r3, [r7, #18]
 800b590:	e005      	b.n	800b59e <Second_att_control_codeblock_step+0xa4e>
    } else {
      y = 0U;
 800b592:	2300      	movs	r3, #0
 800b594:	827b      	strh	r3, [r7, #18]
 800b596:	e002      	b.n	800b59e <Second_att_control_codeblock_step+0xa4e>
    }
  } else {
    y = MAX_uint16_T;
 800b598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b59c:	827b      	strh	r3, [r7, #18]
  }

  tmp = y + 1000U;
 800b59e:	8a7b      	ldrh	r3, [r7, #18]
 800b5a0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b5a4:	617b      	str	r3, [r7, #20]
  if (tmp > 65535U) {
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5ac:	d302      	bcc.n	800b5b4 <Second_att_control_codeblock_step+0xa64>
    tmp = 65535U;
 800b5ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5b2:	617b      	str	r3, [r7, #20]
  }

  Second_att_control_codeblock_B.M6 = (uint16_T)tmp;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	4b4e      	ldr	r3, [pc, #312]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b5ba:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

  /* End of MATLAB Function: '<S1>/pwm_out1' */

  /* Saturate: '<S1>/Saturation' */
  if (Second_att_control_codeblock_B.M1 > 2000) {
 800b5be:	4b4d      	ldr	r3, [pc, #308]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b5c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b5c8:	d903      	bls.n	800b5d2 <Second_att_control_codeblock_step+0xa82>
    y = 2000U;
 800b5ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b5ce:	827b      	strh	r3, [r7, #18]
 800b5d0:	e00d      	b.n	800b5ee <Second_att_control_codeblock_step+0xa9e>
  } else if (Second_att_control_codeblock_B.M1 < 1000) {
 800b5d2:	4b48      	ldr	r3, [pc, #288]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b5d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b5dc:	d203      	bcs.n	800b5e6 <Second_att_control_codeblock_step+0xa96>
    y = 1000U;
 800b5de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b5e2:	827b      	strh	r3, [r7, #18]
 800b5e4:	e003      	b.n	800b5ee <Second_att_control_codeblock_step+0xa9e>
  } else {
    y = Second_att_control_codeblock_B.M1;
 800b5e6:	4b43      	ldr	r3, [pc, #268]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b5e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5ec:	827b      	strh	r3, [r7, #18]
  }

  /* Outport: '<Root>/PWM_OUT' incorporates:
   *  Saturate: '<S1>/Saturation'
   */
  Second_att_control_codeblock_Y.PWM_OUT[0] = y;
 800b5ee:	4a44      	ldr	r2, [pc, #272]	; (800b700 <Second_att_control_codeblock_step+0xbb0>)
 800b5f0:	8a7b      	ldrh	r3, [r7, #18]
 800b5f2:	8013      	strh	r3, [r2, #0]

  /* Saturate: '<S1>/Saturation' */
  if (Second_att_control_codeblock_B.M2 > 2000) {
 800b5f4:	4b3f      	ldr	r3, [pc, #252]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b5f6:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 800b5fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b5fe:	d903      	bls.n	800b608 <Second_att_control_codeblock_step+0xab8>
    y = 2000U;
 800b600:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b604:	827b      	strh	r3, [r7, #18]
 800b606:	e00d      	b.n	800b624 <Second_att_control_codeblock_step+0xad4>
  } else if (Second_att_control_codeblock_B.M2 < 1000) {
 800b608:	4b3a      	ldr	r3, [pc, #232]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b60a:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 800b60e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b612:	d203      	bcs.n	800b61c <Second_att_control_codeblock_step+0xacc>
    y = 1000U;
 800b614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b618:	827b      	strh	r3, [r7, #18]
 800b61a:	e003      	b.n	800b624 <Second_att_control_codeblock_step+0xad4>
  } else {
    y = Second_att_control_codeblock_B.M2;
 800b61c:	4b35      	ldr	r3, [pc, #212]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b61e:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 800b622:	827b      	strh	r3, [r7, #18]
  }

  /* Outport: '<Root>/PWM_OUT' incorporates:
   *  Saturate: '<S1>/Saturation'
   */
  Second_att_control_codeblock_Y.PWM_OUT[1] = y;
 800b624:	4a36      	ldr	r2, [pc, #216]	; (800b700 <Second_att_control_codeblock_step+0xbb0>)
 800b626:	8a7b      	ldrh	r3, [r7, #18]
 800b628:	8053      	strh	r3, [r2, #2]

  /* Saturate: '<S1>/Saturation' */
  if (Second_att_control_codeblock_B.M3 > 2000) {
 800b62a:	4b32      	ldr	r3, [pc, #200]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b62c:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800b630:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b634:	d903      	bls.n	800b63e <Second_att_control_codeblock_step+0xaee>
    y = 2000U;
 800b636:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b63a:	827b      	strh	r3, [r7, #18]
 800b63c:	e00d      	b.n	800b65a <Second_att_control_codeblock_step+0xb0a>
  } else if (Second_att_control_codeblock_B.M3 < 1000) {
 800b63e:	4b2d      	ldr	r3, [pc, #180]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b640:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800b644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b648:	d203      	bcs.n	800b652 <Second_att_control_codeblock_step+0xb02>
    y = 1000U;
 800b64a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b64e:	827b      	strh	r3, [r7, #18]
 800b650:	e003      	b.n	800b65a <Second_att_control_codeblock_step+0xb0a>
  } else {
    y = Second_att_control_codeblock_B.M3;
 800b652:	4b28      	ldr	r3, [pc, #160]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b654:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800b658:	827b      	strh	r3, [r7, #18]
  }

  /* Outport: '<Root>/PWM_OUT' incorporates:
   *  Saturate: '<S1>/Saturation'
   */
  Second_att_control_codeblock_Y.PWM_OUT[2] = y;
 800b65a:	4a29      	ldr	r2, [pc, #164]	; (800b700 <Second_att_control_codeblock_step+0xbb0>)
 800b65c:	8a7b      	ldrh	r3, [r7, #18]
 800b65e:	8093      	strh	r3, [r2, #4]

  /* Saturate: '<S1>/Saturation' */
  if (Second_att_control_codeblock_B.M4 > 2000) {
 800b660:	4b24      	ldr	r3, [pc, #144]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b662:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 800b666:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b66a:	d903      	bls.n	800b674 <Second_att_control_codeblock_step+0xb24>
    y = 2000U;
 800b66c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b670:	827b      	strh	r3, [r7, #18]
 800b672:	e00d      	b.n	800b690 <Second_att_control_codeblock_step+0xb40>
  } else if (Second_att_control_codeblock_B.M4 < 1000) {
 800b674:	4b1f      	ldr	r3, [pc, #124]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b676:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 800b67a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b67e:	d203      	bcs.n	800b688 <Second_att_control_codeblock_step+0xb38>
    y = 1000U;
 800b680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b684:	827b      	strh	r3, [r7, #18]
 800b686:	e003      	b.n	800b690 <Second_att_control_codeblock_step+0xb40>
  } else {
    y = Second_att_control_codeblock_B.M4;
 800b688:	4b1a      	ldr	r3, [pc, #104]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b68a:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 800b68e:	827b      	strh	r3, [r7, #18]
  }

  /* Outport: '<Root>/PWM_OUT' incorporates:
   *  Saturate: '<S1>/Saturation'
   */
  Second_att_control_codeblock_Y.PWM_OUT[3] = y;
 800b690:	4a1b      	ldr	r2, [pc, #108]	; (800b700 <Second_att_control_codeblock_step+0xbb0>)
 800b692:	8a7b      	ldrh	r3, [r7, #18]
 800b694:	80d3      	strh	r3, [r2, #6]

  /* Saturate: '<S1>/Saturation' */
  if (Second_att_control_codeblock_B.M5 > 2000) {
 800b696:	4b17      	ldr	r3, [pc, #92]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b698:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800b69c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b6a0:	d903      	bls.n	800b6aa <Second_att_control_codeblock_step+0xb5a>
    y = 2000U;
 800b6a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b6a6:	827b      	strh	r3, [r7, #18]
 800b6a8:	e00d      	b.n	800b6c6 <Second_att_control_codeblock_step+0xb76>
  } else if (Second_att_control_codeblock_B.M5 < 1000) {
 800b6aa:	4b12      	ldr	r3, [pc, #72]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b6ac:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800b6b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6b4:	d203      	bcs.n	800b6be <Second_att_control_codeblock_step+0xb6e>
    y = 1000U;
 800b6b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6ba:	827b      	strh	r3, [r7, #18]
 800b6bc:	e003      	b.n	800b6c6 <Second_att_control_codeblock_step+0xb76>
  } else {
    y = Second_att_control_codeblock_B.M5;
 800b6be:	4b0d      	ldr	r3, [pc, #52]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b6c0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800b6c4:	827b      	strh	r3, [r7, #18]
  }

  /* Outport: '<Root>/PWM_OUT' incorporates:
   *  Saturate: '<S1>/Saturation'
   */
  Second_att_control_codeblock_Y.PWM_OUT[4] = y;
 800b6c6:	4a0e      	ldr	r2, [pc, #56]	; (800b700 <Second_att_control_codeblock_step+0xbb0>)
 800b6c8:	8a7b      	ldrh	r3, [r7, #18]
 800b6ca:	8113      	strh	r3, [r2, #8]

  /* Saturate: '<S1>/Saturation' */
  if (Second_att_control_codeblock_B.M6 > 2000) {
 800b6cc:	4b09      	ldr	r3, [pc, #36]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b6ce:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800b6d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b6d6:	d903      	bls.n	800b6e0 <Second_att_control_codeblock_step+0xb90>
    y = 2000U;
 800b6d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b6dc:	827b      	strh	r3, [r7, #18]
 800b6de:	e015      	b.n	800b70c <Second_att_control_codeblock_step+0xbbc>
  } else if (Second_att_control_codeblock_B.M6 < 1000) {
 800b6e0:	4b04      	ldr	r3, [pc, #16]	; (800b6f4 <Second_att_control_codeblock_step+0xba4>)
 800b6e2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800b6e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6ea:	d20b      	bcs.n	800b704 <Second_att_control_codeblock_step+0xbb4>
    y = 1000U;
 800b6ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6f0:	827b      	strh	r3, [r7, #18]
 800b6f2:	e00b      	b.n	800b70c <Second_att_control_codeblock_step+0xbbc>
 800b6f4:	20000a90 	.word	0x20000a90
 800b6f8:	447a0000 	.word	0x447a0000
 800b6fc:	47800000 	.word	0x47800000
 800b700:	20000bc0 	.word	0x20000bc0
  } else {
    y = Second_att_control_codeblock_B.M6;
 800b704:	4b62      	ldr	r3, [pc, #392]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b706:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800b70a:	827b      	strh	r3, [r7, #18]
  }

  /* Outport: '<Root>/PWM_OUT' incorporates:
   *  Saturate: '<S1>/Saturation'
   */
  Second_att_control_codeblock_Y.PWM_OUT[5] = y;
 800b70c:	4a61      	ldr	r2, [pc, #388]	; (800b894 <Second_att_control_codeblock_step+0xd44>)
 800b70e:	8a7b      	ldrh	r3, [r7, #18]
 800b710:	8153      	strh	r3, [r2, #10]
   *  Constant: '<S6>/Constant'
   *  Inport: '<Root>/Arm_cmd'
   *  RelationalOperator: '<S6>/Compare'
   */
  Second_att_control_codeblock_Y.ARMControl =
    (Second_att_control_codeblock_U.Arm_cmd >= 1500);
 800b712:	4b61      	ldr	r3, [pc, #388]	; (800b898 <Second_att_control_codeblock_step+0xd48>)
 800b714:	8b9b      	ldrh	r3, [r3, #28]
 800b716:	f240 52db 	movw	r2, #1499	; 0x5db
 800b71a:	4293      	cmp	r3, r2
 800b71c:	bf8c      	ite	hi
 800b71e:	2301      	movhi	r3, #1
 800b720:	2300      	movls	r3, #0
 800b722:	b2db      	uxtb	r3, r3
 800b724:	461a      	mov	r2, r3
  Second_att_control_codeblock_Y.ARMControl =
 800b726:	4b5b      	ldr	r3, [pc, #364]	; (800b894 <Second_att_control_codeblock_step+0xd44>)
 800b728:	731a      	strb	r2, [r3, #12]

  /* Gain: '<S40>/Integral Gain' */
  Second_att_control_codeblock_B.IntegralGain = Angle_rate_roll_PI_kI *
    Second_att_control_codeblock_B.Sum_f;
 800b72a:	4b59      	ldr	r3, [pc, #356]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b72c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
  Second_att_control_codeblock_B.IntegralGain = Angle_rate_roll_PI_kI *
 800b730:	4b5a      	ldr	r3, [pc, #360]	; (800b89c <Second_att_control_codeblock_step+0xd4c>)
 800b732:	edd3 7a00 	vldr	s15, [r3]
 800b736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b73a:	4b55      	ldr	r3, [pc, #340]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b73c:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4

  /* Gain: '<S88>/Integral Gain' */
  Second_att_control_codeblock_B.IntegralGain_f = Angle_rate_pitch_kI *
    Second_att_control_codeblock_B.Sum2;
 800b740:	4b53      	ldr	r3, [pc, #332]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b742:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
  Second_att_control_codeblock_B.IntegralGain_f = Angle_rate_pitch_kI *
 800b746:	4b56      	ldr	r3, [pc, #344]	; (800b8a0 <Second_att_control_codeblock_step+0xd50>)
 800b748:	edd3 7a00 	vldr	s15, [r3]
 800b74c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b750:	4b4f      	ldr	r3, [pc, #316]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b752:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8

  /* Gain: '<S186>/Integral Gain' */
  Second_att_control_codeblock_B.IntegralGain_d = kI_Roll_rate_PID *
    Second_att_control_codeblock_B.Sum_c;
 800b756:	4b4e      	ldr	r3, [pc, #312]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b758:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
  Second_att_control_codeblock_B.IntegralGain_d = kI_Roll_rate_PID *
 800b75c:	4b51      	ldr	r3, [pc, #324]	; (800b8a4 <Second_att_control_codeblock_step+0xd54>)
 800b75e:	edd3 7a00 	vldr	s15, [r3]
 800b762:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b766:	4b4a      	ldr	r3, [pc, #296]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b768:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec

  /* Gain: '<S138>/Integral Gain' */
  Second_att_control_codeblock_B.IntegralGain_e = kI_Pitch_rate_PID *
    Second_att_control_codeblock_B.Sum1_h;
 800b76c:	4b48      	ldr	r3, [pc, #288]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b76e:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
  Second_att_control_codeblock_B.IntegralGain_e = kI_Pitch_rate_PID *
 800b772:	4b4d      	ldr	r3, [pc, #308]	; (800b8a8 <Second_att_control_codeblock_step+0xd58>)
 800b774:	edd3 7a00 	vldr	s15, [r3]
 800b778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77c:	4b44      	ldr	r3, [pc, #272]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b77e:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0

  /* Gain: '<S235>/Integral Gain' */
  Second_att_control_codeblock_B.IntegralGain_h = kI_Yaw_rate_PID *
    Second_att_control_codeblock_B.Gain;
 800b782:	4b43      	ldr	r3, [pc, #268]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b784:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
  Second_att_control_codeblock_B.IntegralGain_h = kI_Yaw_rate_PID *
 800b788:	4b48      	ldr	r3, [pc, #288]	; (800b8ac <Second_att_control_codeblock_step+0xd5c>)
 800b78a:	edd3 7a00 	vldr	s15, [r3]
 800b78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b792:	4b3f      	ldr	r3, [pc, #252]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b794:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4

  /* Update for DiscreteIntegrator: '<S43>/Integrator' */
  Second_att_control_codeblock_DW.Integrator_DSTATE += 0.01F *
 800b798:	4b45      	ldr	r3, [pc, #276]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b79a:	ed93 7a04 	vldr	s14, [r3, #16]
    Second_att_control_codeblock_B.IntegralGain;
 800b79e:	4b3c      	ldr	r3, [pc, #240]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b7a0:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
  Second_att_control_codeblock_DW.Integrator_DSTATE += 0.01F *
 800b7a4:	eddf 6a43 	vldr	s13, [pc, #268]	; 800b8b4 <Second_att_control_codeblock_step+0xd64>
 800b7a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b7ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7b0:	4b3f      	ldr	r3, [pc, #252]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b7b2:	edc3 7a04 	vstr	s15, [r3, #16]

  /* Update for DiscreteIntegrator: '<S189>/Integrator' */
  Second_att_control_codeblock_DW.Integrator_DSTATE_n += 0.01F *
 800b7b6:	4b3e      	ldr	r3, [pc, #248]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b7b8:	ed93 7a05 	vldr	s14, [r3, #20]
    Second_att_control_codeblock_B.IntegralGain_d;
 800b7bc:	4b34      	ldr	r3, [pc, #208]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b7be:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
  Second_att_control_codeblock_DW.Integrator_DSTATE_n += 0.01F *
 800b7c2:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800b8b4 <Second_att_control_codeblock_step+0xd64>
 800b7c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b7ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7ce:	4b38      	ldr	r3, [pc, #224]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b7d0:	edc3 7a05 	vstr	s15, [r3, #20]

  /* Update for DiscreteIntegrator: '<S184>/Filter' */
  Second_att_control_codeblock_DW.Filter_DSTATE_n += 0.01F *
 800b7d4:	4b36      	ldr	r3, [pc, #216]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b7d6:	ed93 7a06 	vldr	s14, [r3, #24]
    Second_att_control_codeblock_B.FilterCoefficient_a;
 800b7da:	4b2d      	ldr	r3, [pc, #180]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b7dc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
  Second_att_control_codeblock_DW.Filter_DSTATE_n += 0.01F *
 800b7e0:	eddf 6a34 	vldr	s13, [pc, #208]	; 800b8b4 <Second_att_control_codeblock_step+0xd64>
 800b7e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b7e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7ec:	4b30      	ldr	r3, [pc, #192]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b7ee:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Update for DiscreteIntegrator: '<S91>/Integrator' */
  Second_att_control_codeblock_DW.Integrator_DSTATE_l += 0.01F *
 800b7f2:	4b2f      	ldr	r3, [pc, #188]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b7f4:	ed93 7a07 	vldr	s14, [r3, #28]
    Second_att_control_codeblock_B.IntegralGain_f;
 800b7f8:	4b25      	ldr	r3, [pc, #148]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b7fa:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
  Second_att_control_codeblock_DW.Integrator_DSTATE_l += 0.01F *
 800b7fe:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800b8b4 <Second_att_control_codeblock_step+0xd64>
 800b802:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b80a:	4b29      	ldr	r3, [pc, #164]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b80c:	edc3 7a07 	vstr	s15, [r3, #28]

  /* Update for DiscreteIntegrator: '<S141>/Integrator' */
  Second_att_control_codeblock_DW.Integrator_DSTATE_d += 0.01F *
 800b810:	4b27      	ldr	r3, [pc, #156]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b812:	ed93 7a08 	vldr	s14, [r3, #32]
    Second_att_control_codeblock_B.IntegralGain_e;
 800b816:	4b1e      	ldr	r3, [pc, #120]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b818:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
  Second_att_control_codeblock_DW.Integrator_DSTATE_d += 0.01F *
 800b81c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b8b4 <Second_att_control_codeblock_step+0xd64>
 800b820:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b824:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b828:	4b21      	ldr	r3, [pc, #132]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b82a:	edc3 7a08 	vstr	s15, [r3, #32]

  /* Update for DiscreteIntegrator: '<S136>/Filter' */
  Second_att_control_codeblock_DW.Filter_DSTATE += 0.01 *
 800b82e:	4b20      	ldr	r3, [pc, #128]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b830:	e9d3 4500 	ldrd	r4, r5, [r3]
    Second_att_control_codeblock_B.FilterCoefficient;
 800b834:	4b16      	ldr	r3, [pc, #88]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b836:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
  Second_att_control_codeblock_DW.Filter_DSTATE += 0.01 *
 800b83a:	a313      	add	r3, pc, #76	; (adr r3, 800b888 <Second_att_control_codeblock_step+0xd38>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f4 feea 	bl	8000618 <__aeabi_dmul>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	4620      	mov	r0, r4
 800b84a:	4629      	mov	r1, r5
 800b84c:	f7f4 fd2e 	bl	80002ac <__adddf3>
 800b850:	4603      	mov	r3, r0
 800b852:	460c      	mov	r4, r1
 800b854:	4a16      	ldr	r2, [pc, #88]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b856:	e9c2 3400 	strd	r3, r4, [r2]

  /* Update for DiscreteIntegrator: '<S238>/Integrator' */
  Second_att_control_codeblock_DW.Integrator_DSTATE_j += 0.01F *
 800b85a:	4b15      	ldr	r3, [pc, #84]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b85c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    Second_att_control_codeblock_B.IntegralGain_h;
 800b860:	4b0b      	ldr	r3, [pc, #44]	; (800b890 <Second_att_control_codeblock_step+0xd40>)
 800b862:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
  Second_att_control_codeblock_DW.Integrator_DSTATE_j += 0.01F *
 800b866:	eddf 6a13 	vldr	s13, [pc, #76]	; 800b8b4 <Second_att_control_codeblock_step+0xd64>
 800b86a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b86e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b872:	4b0f      	ldr	r3, [pc, #60]	; (800b8b0 <Second_att_control_codeblock_step+0xd60>)
 800b874:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800b878:	bf00      	nop
 800b87a:	3718      	adds	r7, #24
 800b87c:	46bd      	mov	sp, r7
 800b87e:	ecbd 8b02 	vpop	{d8}
 800b882:	bdb0      	pop	{r4, r5, r7, pc}
 800b884:	f3af 8000 	nop.w
 800b888:	47ae147b 	.word	0x47ae147b
 800b88c:	3f847ae1 	.word	0x3f847ae1
 800b890:	20000a90 	.word	0x20000a90
 800b894:	20000bc0 	.word	0x20000bc0
 800b898:	20000bd0 	.word	0x20000bd0
 800b89c:	20000048 	.word	0x20000048
 800b8a0:	20000040 	.word	0x20000040
 800b8a4:	20000054 	.word	0x20000054
 800b8a8:	20000050 	.word	0x20000050
 800b8ac:	20000058 	.word	0x20000058
 800b8b0:	20000b98 	.word	0x20000b98
 800b8b4:	3c23d70a 	.word	0x3c23d70a

0800b8b8 <ceil>:
 800b8b8:	ec51 0b10 	vmov	r0, r1, d0
 800b8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b8c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b8c8:	2e13      	cmp	r6, #19
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	ee10 5a10 	vmov	r5, s0
 800b8d0:	4680      	mov	r8, r0
 800b8d2:	dc30      	bgt.n	800b936 <ceil+0x7e>
 800b8d4:	2e00      	cmp	r6, #0
 800b8d6:	da12      	bge.n	800b8fe <ceil+0x46>
 800b8d8:	a333      	add	r3, pc, #204	; (adr r3, 800b9a8 <ceil+0xf0>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	f7f4 fce5 	bl	80002ac <__adddf3>
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f7f5 f927 	bl	8000b38 <__aeabi_dcmpgt>
 800b8ea:	b128      	cbz	r0, 800b8f8 <ceil+0x40>
 800b8ec:	2c00      	cmp	r4, #0
 800b8ee:	db55      	blt.n	800b99c <ceil+0xe4>
 800b8f0:	432c      	orrs	r4, r5
 800b8f2:	d057      	beq.n	800b9a4 <ceil+0xec>
 800b8f4:	4c2e      	ldr	r4, [pc, #184]	; (800b9b0 <ceil+0xf8>)
 800b8f6:	2500      	movs	r5, #0
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	e025      	b.n	800b94a <ceil+0x92>
 800b8fe:	4f2d      	ldr	r7, [pc, #180]	; (800b9b4 <ceil+0xfc>)
 800b900:	4137      	asrs	r7, r6
 800b902:	ea01 0307 	and.w	r3, r1, r7
 800b906:	4303      	orrs	r3, r0
 800b908:	d01f      	beq.n	800b94a <ceil+0x92>
 800b90a:	a327      	add	r3, pc, #156	; (adr r3, 800b9a8 <ceil+0xf0>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fccc 	bl	80002ac <__adddf3>
 800b914:	2200      	movs	r2, #0
 800b916:	2300      	movs	r3, #0
 800b918:	f7f5 f90e 	bl	8000b38 <__aeabi_dcmpgt>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d0eb      	beq.n	800b8f8 <ceil+0x40>
 800b920:	2c00      	cmp	r4, #0
 800b922:	bfc2      	ittt	gt
 800b924:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800b928:	fa43 f606 	asrgt.w	r6, r3, r6
 800b92c:	19a4      	addgt	r4, r4, r6
 800b92e:	ea24 0407 	bic.w	r4, r4, r7
 800b932:	2500      	movs	r5, #0
 800b934:	e7e0      	b.n	800b8f8 <ceil+0x40>
 800b936:	2e33      	cmp	r6, #51	; 0x33
 800b938:	dd0b      	ble.n	800b952 <ceil+0x9a>
 800b93a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b93e:	d104      	bne.n	800b94a <ceil+0x92>
 800b940:	ee10 2a10 	vmov	r2, s0
 800b944:	460b      	mov	r3, r1
 800b946:	f7f4 fcb1 	bl	80002ac <__adddf3>
 800b94a:	ec41 0b10 	vmov	d0, r0, r1
 800b94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b952:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b956:	f04f 33ff 	mov.w	r3, #4294967295
 800b95a:	fa23 f707 	lsr.w	r7, r3, r7
 800b95e:	4207      	tst	r7, r0
 800b960:	d0f3      	beq.n	800b94a <ceil+0x92>
 800b962:	a311      	add	r3, pc, #68	; (adr r3, 800b9a8 <ceil+0xf0>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 fca0 	bl	80002ac <__adddf3>
 800b96c:	2200      	movs	r2, #0
 800b96e:	2300      	movs	r3, #0
 800b970:	f7f5 f8e2 	bl	8000b38 <__aeabi_dcmpgt>
 800b974:	2800      	cmp	r0, #0
 800b976:	d0bf      	beq.n	800b8f8 <ceil+0x40>
 800b978:	2c00      	cmp	r4, #0
 800b97a:	dd02      	ble.n	800b982 <ceil+0xca>
 800b97c:	2e14      	cmp	r6, #20
 800b97e:	d103      	bne.n	800b988 <ceil+0xd0>
 800b980:	3401      	adds	r4, #1
 800b982:	ea25 0507 	bic.w	r5, r5, r7
 800b986:	e7b7      	b.n	800b8f8 <ceil+0x40>
 800b988:	2301      	movs	r3, #1
 800b98a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b98e:	fa03 f606 	lsl.w	r6, r3, r6
 800b992:	4435      	add	r5, r6
 800b994:	4545      	cmp	r5, r8
 800b996:	bf38      	it	cc
 800b998:	18e4      	addcc	r4, r4, r3
 800b99a:	e7f2      	b.n	800b982 <ceil+0xca>
 800b99c:	2500      	movs	r5, #0
 800b99e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b9a2:	e7a9      	b.n	800b8f8 <ceil+0x40>
 800b9a4:	4625      	mov	r5, r4
 800b9a6:	e7a7      	b.n	800b8f8 <ceil+0x40>
 800b9a8:	8800759c 	.word	0x8800759c
 800b9ac:	7e37e43c 	.word	0x7e37e43c
 800b9b0:	3ff00000 	.word	0x3ff00000
 800b9b4:	000fffff 	.word	0x000fffff

0800b9b8 <floor>:
 800b9b8:	ec51 0b10 	vmov	r0, r1, d0
 800b9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b9c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b9c8:	2e13      	cmp	r6, #19
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	ee10 5a10 	vmov	r5, s0
 800b9d0:	4680      	mov	r8, r0
 800b9d2:	dc34      	bgt.n	800ba3e <floor+0x86>
 800b9d4:	2e00      	cmp	r6, #0
 800b9d6:	da16      	bge.n	800ba06 <floor+0x4e>
 800b9d8:	a335      	add	r3, pc, #212	; (adr r3, 800bab0 <floor+0xf8>)
 800b9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9de:	f7f4 fc65 	bl	80002ac <__adddf3>
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	f7f5 f8a7 	bl	8000b38 <__aeabi_dcmpgt>
 800b9ea:	b148      	cbz	r0, 800ba00 <floor+0x48>
 800b9ec:	2c00      	cmp	r4, #0
 800b9ee:	da59      	bge.n	800baa4 <floor+0xec>
 800b9f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b9f4:	4a30      	ldr	r2, [pc, #192]	; (800bab8 <floor+0x100>)
 800b9f6:	432b      	orrs	r3, r5
 800b9f8:	2500      	movs	r5, #0
 800b9fa:	42ab      	cmp	r3, r5
 800b9fc:	bf18      	it	ne
 800b9fe:	4614      	movne	r4, r2
 800ba00:	4621      	mov	r1, r4
 800ba02:	4628      	mov	r0, r5
 800ba04:	e025      	b.n	800ba52 <floor+0x9a>
 800ba06:	4f2d      	ldr	r7, [pc, #180]	; (800babc <floor+0x104>)
 800ba08:	4137      	asrs	r7, r6
 800ba0a:	ea01 0307 	and.w	r3, r1, r7
 800ba0e:	4303      	orrs	r3, r0
 800ba10:	d01f      	beq.n	800ba52 <floor+0x9a>
 800ba12:	a327      	add	r3, pc, #156	; (adr r3, 800bab0 <floor+0xf8>)
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f7f4 fc48 	bl	80002ac <__adddf3>
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f7f5 f88a 	bl	8000b38 <__aeabi_dcmpgt>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d0eb      	beq.n	800ba00 <floor+0x48>
 800ba28:	2c00      	cmp	r4, #0
 800ba2a:	bfbe      	ittt	lt
 800ba2c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ba30:	fa43 f606 	asrlt.w	r6, r3, r6
 800ba34:	19a4      	addlt	r4, r4, r6
 800ba36:	ea24 0407 	bic.w	r4, r4, r7
 800ba3a:	2500      	movs	r5, #0
 800ba3c:	e7e0      	b.n	800ba00 <floor+0x48>
 800ba3e:	2e33      	cmp	r6, #51	; 0x33
 800ba40:	dd0b      	ble.n	800ba5a <floor+0xa2>
 800ba42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ba46:	d104      	bne.n	800ba52 <floor+0x9a>
 800ba48:	ee10 2a10 	vmov	r2, s0
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	f7f4 fc2d 	bl	80002ac <__adddf3>
 800ba52:	ec41 0b10 	vmov	d0, r0, r1
 800ba56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba5a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ba5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba62:	fa23 f707 	lsr.w	r7, r3, r7
 800ba66:	4207      	tst	r7, r0
 800ba68:	d0f3      	beq.n	800ba52 <floor+0x9a>
 800ba6a:	a311      	add	r3, pc, #68	; (adr r3, 800bab0 <floor+0xf8>)
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	f7f4 fc1c 	bl	80002ac <__adddf3>
 800ba74:	2200      	movs	r2, #0
 800ba76:	2300      	movs	r3, #0
 800ba78:	f7f5 f85e 	bl	8000b38 <__aeabi_dcmpgt>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d0bf      	beq.n	800ba00 <floor+0x48>
 800ba80:	2c00      	cmp	r4, #0
 800ba82:	da02      	bge.n	800ba8a <floor+0xd2>
 800ba84:	2e14      	cmp	r6, #20
 800ba86:	d103      	bne.n	800ba90 <floor+0xd8>
 800ba88:	3401      	adds	r4, #1
 800ba8a:	ea25 0507 	bic.w	r5, r5, r7
 800ba8e:	e7b7      	b.n	800ba00 <floor+0x48>
 800ba90:	2301      	movs	r3, #1
 800ba92:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ba96:	fa03 f606 	lsl.w	r6, r3, r6
 800ba9a:	4435      	add	r5, r6
 800ba9c:	4545      	cmp	r5, r8
 800ba9e:	bf38      	it	cc
 800baa0:	18e4      	addcc	r4, r4, r3
 800baa2:	e7f2      	b.n	800ba8a <floor+0xd2>
 800baa4:	2500      	movs	r5, #0
 800baa6:	462c      	mov	r4, r5
 800baa8:	e7aa      	b.n	800ba00 <floor+0x48>
 800baaa:	bf00      	nop
 800baac:	f3af 8000 	nop.w
 800bab0:	8800759c 	.word	0x8800759c
 800bab4:	7e37e43c 	.word	0x7e37e43c
 800bab8:	bff00000 	.word	0xbff00000
 800babc:	000fffff 	.word	0x000fffff

0800bac0 <asin>:
 800bac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bac2:	ed2d 8b02 	vpush	{d8}
 800bac6:	4e26      	ldr	r6, [pc, #152]	; (800bb60 <asin+0xa0>)
 800bac8:	b08b      	sub	sp, #44	; 0x2c
 800baca:	ec55 4b10 	vmov	r4, r5, d0
 800bace:	f000 f853 	bl	800bb78 <__ieee754_asin>
 800bad2:	f996 3000 	ldrsb.w	r3, [r6]
 800bad6:	eeb0 8a40 	vmov.f32	s16, s0
 800bada:	eef0 8a60 	vmov.f32	s17, s1
 800bade:	3301      	adds	r3, #1
 800bae0:	d036      	beq.n	800bb50 <asin+0x90>
 800bae2:	4622      	mov	r2, r4
 800bae4:	462b      	mov	r3, r5
 800bae6:	4620      	mov	r0, r4
 800bae8:	4629      	mov	r1, r5
 800baea:	f7f5 f82f 	bl	8000b4c <__aeabi_dcmpun>
 800baee:	4607      	mov	r7, r0
 800baf0:	bb70      	cbnz	r0, 800bb50 <asin+0x90>
 800baf2:	ec45 4b10 	vmov	d0, r4, r5
 800baf6:	f000 fd7f 	bl	800c5f8 <fabs>
 800bafa:	2200      	movs	r2, #0
 800bafc:	4b19      	ldr	r3, [pc, #100]	; (800bb64 <asin+0xa4>)
 800bafe:	ec51 0b10 	vmov	r0, r1, d0
 800bb02:	f7f5 f819 	bl	8000b38 <__aeabi_dcmpgt>
 800bb06:	b318      	cbz	r0, 800bb50 <asin+0x90>
 800bb08:	2301      	movs	r3, #1
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	4816      	ldr	r0, [pc, #88]	; (800bb68 <asin+0xa8>)
 800bb0e:	4b17      	ldr	r3, [pc, #92]	; (800bb6c <asin+0xac>)
 800bb10:	9301      	str	r3, [sp, #4]
 800bb12:	9708      	str	r7, [sp, #32]
 800bb14:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800bb18:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bb1c:	f000 fd78 	bl	800c610 <nan>
 800bb20:	f996 3000 	ldrsb.w	r3, [r6]
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	ed8d 0b06 	vstr	d0, [sp, #24]
 800bb2a:	d104      	bne.n	800bb36 <asin+0x76>
 800bb2c:	f000 fd78 	bl	800c620 <__errno>
 800bb30:	2321      	movs	r3, #33	; 0x21
 800bb32:	6003      	str	r3, [r0, #0]
 800bb34:	e004      	b.n	800bb40 <asin+0x80>
 800bb36:	4668      	mov	r0, sp
 800bb38:	f000 fd67 	bl	800c60a <matherr>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d0f5      	beq.n	800bb2c <asin+0x6c>
 800bb40:	9b08      	ldr	r3, [sp, #32]
 800bb42:	b11b      	cbz	r3, 800bb4c <asin+0x8c>
 800bb44:	f000 fd6c 	bl	800c620 <__errno>
 800bb48:	9b08      	ldr	r3, [sp, #32]
 800bb4a:	6003      	str	r3, [r0, #0]
 800bb4c:	ed9d 8b06 	vldr	d8, [sp, #24]
 800bb50:	eeb0 0a48 	vmov.f32	s0, s16
 800bb54:	eef0 0a68 	vmov.f32	s1, s17
 800bb58:	b00b      	add	sp, #44	; 0x2c
 800bb5a:	ecbd 8b02 	vpop	{d8}
 800bb5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb60:	20000068 	.word	0x20000068
 800bb64:	3ff00000 	.word	0x3ff00000
 800bb68:	0800f1e1 	.word	0x0800f1e1
 800bb6c:	0800efec 	.word	0x0800efec

0800bb70 <atan2>:
 800bb70:	f000 ba12 	b.w	800bf98 <__ieee754_atan2>
 800bb74:	0000      	movs	r0, r0
	...

0800bb78 <__ieee754_asin>:
 800bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	ec55 4b10 	vmov	r4, r5, d0
 800bb80:	4bcb      	ldr	r3, [pc, #812]	; (800beb0 <__ieee754_asin+0x338>)
 800bb82:	b087      	sub	sp, #28
 800bb84:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800bb88:	429f      	cmp	r7, r3
 800bb8a:	9501      	str	r5, [sp, #4]
 800bb8c:	dd31      	ble.n	800bbf2 <__ieee754_asin+0x7a>
 800bb8e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800bb92:	ee10 3a10 	vmov	r3, s0
 800bb96:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800bb9a:	433b      	orrs	r3, r7
 800bb9c:	d117      	bne.n	800bbce <__ieee754_asin+0x56>
 800bb9e:	a3aa      	add	r3, pc, #680	; (adr r3, 800be48 <__ieee754_asin+0x2d0>)
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	ee10 0a10 	vmov	r0, s0
 800bba8:	4629      	mov	r1, r5
 800bbaa:	f7f4 fd35 	bl	8000618 <__aeabi_dmul>
 800bbae:	a3a8      	add	r3, pc, #672	; (adr r3, 800be50 <__ieee754_asin+0x2d8>)
 800bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	460f      	mov	r7, r1
 800bbb8:	4620      	mov	r0, r4
 800bbba:	4629      	mov	r1, r5
 800bbbc:	f7f4 fd2c 	bl	8000618 <__aeabi_dmul>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	4639      	mov	r1, r7
 800bbc8:	f7f4 fb70 	bl	80002ac <__adddf3>
 800bbcc:	e00a      	b.n	800bbe4 <__ieee754_asin+0x6c>
 800bbce:	ee10 2a10 	vmov	r2, s0
 800bbd2:	462b      	mov	r3, r5
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	4629      	mov	r1, r5
 800bbd8:	f7f4 fb66 	bl	80002a8 <__aeabi_dsub>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	460b      	mov	r3, r1
 800bbe0:	f7f4 fe44 	bl	800086c <__aeabi_ddiv>
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	460d      	mov	r5, r1
 800bbe8:	ec45 4b10 	vmov	d0, r4, r5
 800bbec:	b007      	add	sp, #28
 800bbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf2:	4bb0      	ldr	r3, [pc, #704]	; (800beb4 <__ieee754_asin+0x33c>)
 800bbf4:	429f      	cmp	r7, r3
 800bbf6:	dc11      	bgt.n	800bc1c <__ieee754_asin+0xa4>
 800bbf8:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800bbfc:	f280 80ae 	bge.w	800bd5c <__ieee754_asin+0x1e4>
 800bc00:	a395      	add	r3, pc, #596	; (adr r3, 800be58 <__ieee754_asin+0x2e0>)
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	ee10 0a10 	vmov	r0, s0
 800bc0a:	4629      	mov	r1, r5
 800bc0c:	f7f4 fb4e 	bl	80002ac <__adddf3>
 800bc10:	2200      	movs	r2, #0
 800bc12:	4ba9      	ldr	r3, [pc, #676]	; (800beb8 <__ieee754_asin+0x340>)
 800bc14:	f7f4 ff90 	bl	8000b38 <__aeabi_dcmpgt>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d1e5      	bne.n	800bbe8 <__ieee754_asin+0x70>
 800bc1c:	ec45 4b10 	vmov	d0, r4, r5
 800bc20:	f000 fcea 	bl	800c5f8 <fabs>
 800bc24:	2000      	movs	r0, #0
 800bc26:	ec53 2b10 	vmov	r2, r3, d0
 800bc2a:	49a3      	ldr	r1, [pc, #652]	; (800beb8 <__ieee754_asin+0x340>)
 800bc2c:	f7f4 fb3c 	bl	80002a8 <__aeabi_dsub>
 800bc30:	2200      	movs	r2, #0
 800bc32:	4ba2      	ldr	r3, [pc, #648]	; (800bebc <__ieee754_asin+0x344>)
 800bc34:	f7f4 fcf0 	bl	8000618 <__aeabi_dmul>
 800bc38:	a389      	add	r3, pc, #548	; (adr r3, 800be60 <__ieee754_asin+0x2e8>)
 800bc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3e:	4604      	mov	r4, r0
 800bc40:	460d      	mov	r5, r1
 800bc42:	f7f4 fce9 	bl	8000618 <__aeabi_dmul>
 800bc46:	a388      	add	r3, pc, #544	; (adr r3, 800be68 <__ieee754_asin+0x2f0>)
 800bc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4c:	f7f4 fb2e 	bl	80002ac <__adddf3>
 800bc50:	4622      	mov	r2, r4
 800bc52:	462b      	mov	r3, r5
 800bc54:	f7f4 fce0 	bl	8000618 <__aeabi_dmul>
 800bc58:	a385      	add	r3, pc, #532	; (adr r3, 800be70 <__ieee754_asin+0x2f8>)
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f7f4 fb23 	bl	80002a8 <__aeabi_dsub>
 800bc62:	4622      	mov	r2, r4
 800bc64:	462b      	mov	r3, r5
 800bc66:	f7f4 fcd7 	bl	8000618 <__aeabi_dmul>
 800bc6a:	a383      	add	r3, pc, #524	; (adr r3, 800be78 <__ieee754_asin+0x300>)
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	f7f4 fb1c 	bl	80002ac <__adddf3>
 800bc74:	4622      	mov	r2, r4
 800bc76:	462b      	mov	r3, r5
 800bc78:	f7f4 fcce 	bl	8000618 <__aeabi_dmul>
 800bc7c:	a380      	add	r3, pc, #512	; (adr r3, 800be80 <__ieee754_asin+0x308>)
 800bc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc82:	f7f4 fb11 	bl	80002a8 <__aeabi_dsub>
 800bc86:	4622      	mov	r2, r4
 800bc88:	462b      	mov	r3, r5
 800bc8a:	f7f4 fcc5 	bl	8000618 <__aeabi_dmul>
 800bc8e:	a37e      	add	r3, pc, #504	; (adr r3, 800be88 <__ieee754_asin+0x310>)
 800bc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc94:	f7f4 fb0a 	bl	80002ac <__adddf3>
 800bc98:	4622      	mov	r2, r4
 800bc9a:	462b      	mov	r3, r5
 800bc9c:	f7f4 fcbc 	bl	8000618 <__aeabi_dmul>
 800bca0:	a37b      	add	r3, pc, #492	; (adr r3, 800be90 <__ieee754_asin+0x318>)
 800bca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca6:	4680      	mov	r8, r0
 800bca8:	4689      	mov	r9, r1
 800bcaa:	4620      	mov	r0, r4
 800bcac:	4629      	mov	r1, r5
 800bcae:	f7f4 fcb3 	bl	8000618 <__aeabi_dmul>
 800bcb2:	a379      	add	r3, pc, #484	; (adr r3, 800be98 <__ieee754_asin+0x320>)
 800bcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb8:	f7f4 faf6 	bl	80002a8 <__aeabi_dsub>
 800bcbc:	4622      	mov	r2, r4
 800bcbe:	462b      	mov	r3, r5
 800bcc0:	f7f4 fcaa 	bl	8000618 <__aeabi_dmul>
 800bcc4:	a376      	add	r3, pc, #472	; (adr r3, 800bea0 <__ieee754_asin+0x328>)
 800bcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcca:	f7f4 faef 	bl	80002ac <__adddf3>
 800bcce:	4622      	mov	r2, r4
 800bcd0:	462b      	mov	r3, r5
 800bcd2:	f7f4 fca1 	bl	8000618 <__aeabi_dmul>
 800bcd6:	a374      	add	r3, pc, #464	; (adr r3, 800bea8 <__ieee754_asin+0x330>)
 800bcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcdc:	f7f4 fae4 	bl	80002a8 <__aeabi_dsub>
 800bce0:	4622      	mov	r2, r4
 800bce2:	462b      	mov	r3, r5
 800bce4:	f7f4 fc98 	bl	8000618 <__aeabi_dmul>
 800bce8:	4b73      	ldr	r3, [pc, #460]	; (800beb8 <__ieee754_asin+0x340>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	f7f4 fade 	bl	80002ac <__adddf3>
 800bcf0:	ec45 4b10 	vmov	d0, r4, r5
 800bcf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcf8:	f000 fa2c 	bl	800c154 <__ieee754_sqrt>
 800bcfc:	4b70      	ldr	r3, [pc, #448]	; (800bec0 <__ieee754_asin+0x348>)
 800bcfe:	429f      	cmp	r7, r3
 800bd00:	ec5b ab10 	vmov	sl, fp, d0
 800bd04:	f340 80de 	ble.w	800bec4 <__ieee754_asin+0x34c>
 800bd08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd0c:	4640      	mov	r0, r8
 800bd0e:	4649      	mov	r1, r9
 800bd10:	f7f4 fdac 	bl	800086c <__aeabi_ddiv>
 800bd14:	4652      	mov	r2, sl
 800bd16:	465b      	mov	r3, fp
 800bd18:	f7f4 fc7e 	bl	8000618 <__aeabi_dmul>
 800bd1c:	4652      	mov	r2, sl
 800bd1e:	465b      	mov	r3, fp
 800bd20:	f7f4 fac4 	bl	80002ac <__adddf3>
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	f7f4 fac0 	bl	80002ac <__adddf3>
 800bd2c:	a348      	add	r3, pc, #288	; (adr r3, 800be50 <__ieee754_asin+0x2d8>)
 800bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd32:	f7f4 fab9 	bl	80002a8 <__aeabi_dsub>
 800bd36:	4602      	mov	r2, r0
 800bd38:	460b      	mov	r3, r1
 800bd3a:	a143      	add	r1, pc, #268	; (adr r1, 800be48 <__ieee754_asin+0x2d0>)
 800bd3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd40:	f7f4 fab2 	bl	80002a8 <__aeabi_dsub>
 800bd44:	9b01      	ldr	r3, [sp, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	bfdc      	itt	le
 800bd4a:	4602      	movle	r2, r0
 800bd4c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800bd50:	4604      	mov	r4, r0
 800bd52:	460d      	mov	r5, r1
 800bd54:	bfdc      	itt	le
 800bd56:	4614      	movle	r4, r2
 800bd58:	461d      	movle	r5, r3
 800bd5a:	e745      	b.n	800bbe8 <__ieee754_asin+0x70>
 800bd5c:	ee10 2a10 	vmov	r2, s0
 800bd60:	ee10 0a10 	vmov	r0, s0
 800bd64:	462b      	mov	r3, r5
 800bd66:	4629      	mov	r1, r5
 800bd68:	f7f4 fc56 	bl	8000618 <__aeabi_dmul>
 800bd6c:	a33c      	add	r3, pc, #240	; (adr r3, 800be60 <__ieee754_asin+0x2e8>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	4606      	mov	r6, r0
 800bd74:	460f      	mov	r7, r1
 800bd76:	f7f4 fc4f 	bl	8000618 <__aeabi_dmul>
 800bd7a:	a33b      	add	r3, pc, #236	; (adr r3, 800be68 <__ieee754_asin+0x2f0>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 fa94 	bl	80002ac <__adddf3>
 800bd84:	4632      	mov	r2, r6
 800bd86:	463b      	mov	r3, r7
 800bd88:	f7f4 fc46 	bl	8000618 <__aeabi_dmul>
 800bd8c:	a338      	add	r3, pc, #224	; (adr r3, 800be70 <__ieee754_asin+0x2f8>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fa89 	bl	80002a8 <__aeabi_dsub>
 800bd96:	4632      	mov	r2, r6
 800bd98:	463b      	mov	r3, r7
 800bd9a:	f7f4 fc3d 	bl	8000618 <__aeabi_dmul>
 800bd9e:	a336      	add	r3, pc, #216	; (adr r3, 800be78 <__ieee754_asin+0x300>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f7f4 fa82 	bl	80002ac <__adddf3>
 800bda8:	4632      	mov	r2, r6
 800bdaa:	463b      	mov	r3, r7
 800bdac:	f7f4 fc34 	bl	8000618 <__aeabi_dmul>
 800bdb0:	a333      	add	r3, pc, #204	; (adr r3, 800be80 <__ieee754_asin+0x308>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f7f4 fa77 	bl	80002a8 <__aeabi_dsub>
 800bdba:	4632      	mov	r2, r6
 800bdbc:	463b      	mov	r3, r7
 800bdbe:	f7f4 fc2b 	bl	8000618 <__aeabi_dmul>
 800bdc2:	a331      	add	r3, pc, #196	; (adr r3, 800be88 <__ieee754_asin+0x310>)
 800bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc8:	f7f4 fa70 	bl	80002ac <__adddf3>
 800bdcc:	4632      	mov	r2, r6
 800bdce:	463b      	mov	r3, r7
 800bdd0:	f7f4 fc22 	bl	8000618 <__aeabi_dmul>
 800bdd4:	a32e      	add	r3, pc, #184	; (adr r3, 800be90 <__ieee754_asin+0x318>)
 800bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdda:	4680      	mov	r8, r0
 800bddc:	4689      	mov	r9, r1
 800bdde:	4630      	mov	r0, r6
 800bde0:	4639      	mov	r1, r7
 800bde2:	f7f4 fc19 	bl	8000618 <__aeabi_dmul>
 800bde6:	a32c      	add	r3, pc, #176	; (adr r3, 800be98 <__ieee754_asin+0x320>)
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	f7f4 fa5c 	bl	80002a8 <__aeabi_dsub>
 800bdf0:	4632      	mov	r2, r6
 800bdf2:	463b      	mov	r3, r7
 800bdf4:	f7f4 fc10 	bl	8000618 <__aeabi_dmul>
 800bdf8:	a329      	add	r3, pc, #164	; (adr r3, 800bea0 <__ieee754_asin+0x328>)
 800bdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfe:	f7f4 fa55 	bl	80002ac <__adddf3>
 800be02:	4632      	mov	r2, r6
 800be04:	463b      	mov	r3, r7
 800be06:	f7f4 fc07 	bl	8000618 <__aeabi_dmul>
 800be0a:	a327      	add	r3, pc, #156	; (adr r3, 800bea8 <__ieee754_asin+0x330>)
 800be0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be10:	f7f4 fa4a 	bl	80002a8 <__aeabi_dsub>
 800be14:	4632      	mov	r2, r6
 800be16:	463b      	mov	r3, r7
 800be18:	f7f4 fbfe 	bl	8000618 <__aeabi_dmul>
 800be1c:	2200      	movs	r2, #0
 800be1e:	4b26      	ldr	r3, [pc, #152]	; (800beb8 <__ieee754_asin+0x340>)
 800be20:	f7f4 fa44 	bl	80002ac <__adddf3>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	4640      	mov	r0, r8
 800be2a:	4649      	mov	r1, r9
 800be2c:	f7f4 fd1e 	bl	800086c <__aeabi_ddiv>
 800be30:	4622      	mov	r2, r4
 800be32:	462b      	mov	r3, r5
 800be34:	f7f4 fbf0 	bl	8000618 <__aeabi_dmul>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4620      	mov	r0, r4
 800be3e:	4629      	mov	r1, r5
 800be40:	e6c2      	b.n	800bbc8 <__ieee754_asin+0x50>
 800be42:	bf00      	nop
 800be44:	f3af 8000 	nop.w
 800be48:	54442d18 	.word	0x54442d18
 800be4c:	3ff921fb 	.word	0x3ff921fb
 800be50:	33145c07 	.word	0x33145c07
 800be54:	3c91a626 	.word	0x3c91a626
 800be58:	8800759c 	.word	0x8800759c
 800be5c:	7e37e43c 	.word	0x7e37e43c
 800be60:	0dfdf709 	.word	0x0dfdf709
 800be64:	3f023de1 	.word	0x3f023de1
 800be68:	7501b288 	.word	0x7501b288
 800be6c:	3f49efe0 	.word	0x3f49efe0
 800be70:	b5688f3b 	.word	0xb5688f3b
 800be74:	3fa48228 	.word	0x3fa48228
 800be78:	0e884455 	.word	0x0e884455
 800be7c:	3fc9c155 	.word	0x3fc9c155
 800be80:	03eb6f7d 	.word	0x03eb6f7d
 800be84:	3fd4d612 	.word	0x3fd4d612
 800be88:	55555555 	.word	0x55555555
 800be8c:	3fc55555 	.word	0x3fc55555
 800be90:	b12e9282 	.word	0xb12e9282
 800be94:	3fb3b8c5 	.word	0x3fb3b8c5
 800be98:	1b8d0159 	.word	0x1b8d0159
 800be9c:	3fe6066c 	.word	0x3fe6066c
 800bea0:	9c598ac8 	.word	0x9c598ac8
 800bea4:	40002ae5 	.word	0x40002ae5
 800bea8:	1c8a2d4b 	.word	0x1c8a2d4b
 800beac:	40033a27 	.word	0x40033a27
 800beb0:	3fefffff 	.word	0x3fefffff
 800beb4:	3fdfffff 	.word	0x3fdfffff
 800beb8:	3ff00000 	.word	0x3ff00000
 800bebc:	3fe00000 	.word	0x3fe00000
 800bec0:	3fef3332 	.word	0x3fef3332
 800bec4:	ee10 2a10 	vmov	r2, s0
 800bec8:	ee10 0a10 	vmov	r0, s0
 800becc:	465b      	mov	r3, fp
 800bece:	4659      	mov	r1, fp
 800bed0:	f7f4 f9ec 	bl	80002ac <__adddf3>
 800bed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bedc:	4640      	mov	r0, r8
 800bede:	4649      	mov	r1, r9
 800bee0:	f7f4 fcc4 	bl	800086c <__aeabi_ddiv>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beec:	f7f4 fb94 	bl	8000618 <__aeabi_dmul>
 800bef0:	2600      	movs	r6, #0
 800bef2:	4680      	mov	r8, r0
 800bef4:	4689      	mov	r9, r1
 800bef6:	4632      	mov	r2, r6
 800bef8:	465b      	mov	r3, fp
 800befa:	4630      	mov	r0, r6
 800befc:	4659      	mov	r1, fp
 800befe:	f7f4 fb8b 	bl	8000618 <__aeabi_dmul>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4620      	mov	r0, r4
 800bf08:	4629      	mov	r1, r5
 800bf0a:	f7f4 f9cd 	bl	80002a8 <__aeabi_dsub>
 800bf0e:	4632      	mov	r2, r6
 800bf10:	4604      	mov	r4, r0
 800bf12:	460d      	mov	r5, r1
 800bf14:	465b      	mov	r3, fp
 800bf16:	4650      	mov	r0, sl
 800bf18:	4659      	mov	r1, fp
 800bf1a:	f7f4 f9c7 	bl	80002ac <__adddf3>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	4620      	mov	r0, r4
 800bf24:	4629      	mov	r1, r5
 800bf26:	f7f4 fca1 	bl	800086c <__aeabi_ddiv>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	f7f4 f9bd 	bl	80002ac <__adddf3>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	a114      	add	r1, pc, #80	; (adr r1, 800bf88 <__ieee754_asin+0x410>)
 800bf38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf3c:	f7f4 f9b4 	bl	80002a8 <__aeabi_dsub>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	4640      	mov	r0, r8
 800bf46:	4649      	mov	r1, r9
 800bf48:	f7f4 f9ae 	bl	80002a8 <__aeabi_dsub>
 800bf4c:	465f      	mov	r7, fp
 800bf4e:	4604      	mov	r4, r0
 800bf50:	460d      	mov	r5, r1
 800bf52:	4632      	mov	r2, r6
 800bf54:	465b      	mov	r3, fp
 800bf56:	4630      	mov	r0, r6
 800bf58:	4639      	mov	r1, r7
 800bf5a:	f7f4 f9a7 	bl	80002ac <__adddf3>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	460b      	mov	r3, r1
 800bf62:	a10b      	add	r1, pc, #44	; (adr r1, 800bf90 <__ieee754_asin+0x418>)
 800bf64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf68:	f7f4 f99e 	bl	80002a8 <__aeabi_dsub>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4620      	mov	r0, r4
 800bf72:	4629      	mov	r1, r5
 800bf74:	f7f4 f998 	bl	80002a8 <__aeabi_dsub>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	a104      	add	r1, pc, #16	; (adr r1, 800bf90 <__ieee754_asin+0x418>)
 800bf7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf82:	e6dd      	b.n	800bd40 <__ieee754_asin+0x1c8>
 800bf84:	f3af 8000 	nop.w
 800bf88:	33145c07 	.word	0x33145c07
 800bf8c:	3c91a626 	.word	0x3c91a626
 800bf90:	54442d18 	.word	0x54442d18
 800bf94:	3fe921fb 	.word	0x3fe921fb

0800bf98 <__ieee754_atan2>:
 800bf98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf9c:	ec57 6b11 	vmov	r6, r7, d1
 800bfa0:	4273      	negs	r3, r6
 800bfa2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bfa6:	4333      	orrs	r3, r6
 800bfa8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800c150 <__ieee754_atan2+0x1b8>
 800bfac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bfb0:	4573      	cmp	r3, lr
 800bfb2:	ec51 0b10 	vmov	r0, r1, d0
 800bfb6:	ee11 8a10 	vmov	r8, s2
 800bfba:	d80a      	bhi.n	800bfd2 <__ieee754_atan2+0x3a>
 800bfbc:	4244      	negs	r4, r0
 800bfbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfc2:	4304      	orrs	r4, r0
 800bfc4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bfc8:	4574      	cmp	r4, lr
 800bfca:	468c      	mov	ip, r1
 800bfcc:	ee10 9a10 	vmov	r9, s0
 800bfd0:	d907      	bls.n	800bfe2 <__ieee754_atan2+0x4a>
 800bfd2:	4632      	mov	r2, r6
 800bfd4:	463b      	mov	r3, r7
 800bfd6:	f7f4 f969 	bl	80002ac <__adddf3>
 800bfda:	ec41 0b10 	vmov	d0, r0, r1
 800bfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfe2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bfe6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bfea:	4334      	orrs	r4, r6
 800bfec:	d103      	bne.n	800bff6 <__ieee754_atan2+0x5e>
 800bfee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bff2:	f000 b961 	b.w	800c2b8 <atan>
 800bff6:	17bc      	asrs	r4, r7, #30
 800bff8:	f004 0402 	and.w	r4, r4, #2
 800bffc:	ea53 0909 	orrs.w	r9, r3, r9
 800c000:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c004:	d107      	bne.n	800c016 <__ieee754_atan2+0x7e>
 800c006:	2c02      	cmp	r4, #2
 800c008:	d073      	beq.n	800c0f2 <__ieee754_atan2+0x15a>
 800c00a:	2c03      	cmp	r4, #3
 800c00c:	d1e5      	bne.n	800bfda <__ieee754_atan2+0x42>
 800c00e:	a13e      	add	r1, pc, #248	; (adr r1, 800c108 <__ieee754_atan2+0x170>)
 800c010:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c014:	e7e1      	b.n	800bfda <__ieee754_atan2+0x42>
 800c016:	ea52 0808 	orrs.w	r8, r2, r8
 800c01a:	d106      	bne.n	800c02a <__ieee754_atan2+0x92>
 800c01c:	f1bc 0f00 	cmp.w	ip, #0
 800c020:	da6b      	bge.n	800c0fa <__ieee754_atan2+0x162>
 800c022:	a13b      	add	r1, pc, #236	; (adr r1, 800c110 <__ieee754_atan2+0x178>)
 800c024:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c028:	e7d7      	b.n	800bfda <__ieee754_atan2+0x42>
 800c02a:	4572      	cmp	r2, lr
 800c02c:	d120      	bne.n	800c070 <__ieee754_atan2+0xd8>
 800c02e:	4293      	cmp	r3, r2
 800c030:	d111      	bne.n	800c056 <__ieee754_atan2+0xbe>
 800c032:	2c02      	cmp	r4, #2
 800c034:	d007      	beq.n	800c046 <__ieee754_atan2+0xae>
 800c036:	2c03      	cmp	r4, #3
 800c038:	d009      	beq.n	800c04e <__ieee754_atan2+0xb6>
 800c03a:	2c01      	cmp	r4, #1
 800c03c:	d155      	bne.n	800c0ea <__ieee754_atan2+0x152>
 800c03e:	a136      	add	r1, pc, #216	; (adr r1, 800c118 <__ieee754_atan2+0x180>)
 800c040:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c044:	e7c9      	b.n	800bfda <__ieee754_atan2+0x42>
 800c046:	a136      	add	r1, pc, #216	; (adr r1, 800c120 <__ieee754_atan2+0x188>)
 800c048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c04c:	e7c5      	b.n	800bfda <__ieee754_atan2+0x42>
 800c04e:	a136      	add	r1, pc, #216	; (adr r1, 800c128 <__ieee754_atan2+0x190>)
 800c050:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c054:	e7c1      	b.n	800bfda <__ieee754_atan2+0x42>
 800c056:	2c02      	cmp	r4, #2
 800c058:	d04b      	beq.n	800c0f2 <__ieee754_atan2+0x15a>
 800c05a:	2c03      	cmp	r4, #3
 800c05c:	d0d7      	beq.n	800c00e <__ieee754_atan2+0x76>
 800c05e:	2c01      	cmp	r4, #1
 800c060:	f04f 0000 	mov.w	r0, #0
 800c064:	d102      	bne.n	800c06c <__ieee754_atan2+0xd4>
 800c066:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c06a:	e7b6      	b.n	800bfda <__ieee754_atan2+0x42>
 800c06c:	2100      	movs	r1, #0
 800c06e:	e7b4      	b.n	800bfda <__ieee754_atan2+0x42>
 800c070:	4573      	cmp	r3, lr
 800c072:	d0d3      	beq.n	800c01c <__ieee754_atan2+0x84>
 800c074:	1a9b      	subs	r3, r3, r2
 800c076:	151b      	asrs	r3, r3, #20
 800c078:	2b3c      	cmp	r3, #60	; 0x3c
 800c07a:	dc1e      	bgt.n	800c0ba <__ieee754_atan2+0x122>
 800c07c:	2f00      	cmp	r7, #0
 800c07e:	da01      	bge.n	800c084 <__ieee754_atan2+0xec>
 800c080:	333c      	adds	r3, #60	; 0x3c
 800c082:	db1e      	blt.n	800c0c2 <__ieee754_atan2+0x12a>
 800c084:	4632      	mov	r2, r6
 800c086:	463b      	mov	r3, r7
 800c088:	f7f4 fbf0 	bl	800086c <__aeabi_ddiv>
 800c08c:	ec41 0b10 	vmov	d0, r0, r1
 800c090:	f000 fab2 	bl	800c5f8 <fabs>
 800c094:	f000 f910 	bl	800c2b8 <atan>
 800c098:	ec51 0b10 	vmov	r0, r1, d0
 800c09c:	2c01      	cmp	r4, #1
 800c09e:	d013      	beq.n	800c0c8 <__ieee754_atan2+0x130>
 800c0a0:	2c02      	cmp	r4, #2
 800c0a2:	d015      	beq.n	800c0d0 <__ieee754_atan2+0x138>
 800c0a4:	2c00      	cmp	r4, #0
 800c0a6:	d098      	beq.n	800bfda <__ieee754_atan2+0x42>
 800c0a8:	a321      	add	r3, pc, #132	; (adr r3, 800c130 <__ieee754_atan2+0x198>)
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	f7f4 f8fb 	bl	80002a8 <__aeabi_dsub>
 800c0b2:	a321      	add	r3, pc, #132	; (adr r3, 800c138 <__ieee754_atan2+0x1a0>)
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	e014      	b.n	800c0e4 <__ieee754_atan2+0x14c>
 800c0ba:	a121      	add	r1, pc, #132	; (adr r1, 800c140 <__ieee754_atan2+0x1a8>)
 800c0bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0c0:	e7ec      	b.n	800c09c <__ieee754_atan2+0x104>
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	e7e9      	b.n	800c09c <__ieee754_atan2+0x104>
 800c0c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	e784      	b.n	800bfda <__ieee754_atan2+0x42>
 800c0d0:	a317      	add	r3, pc, #92	; (adr r3, 800c130 <__ieee754_atan2+0x198>)
 800c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d6:	f7f4 f8e7 	bl	80002a8 <__aeabi_dsub>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	460b      	mov	r3, r1
 800c0de:	a116      	add	r1, pc, #88	; (adr r1, 800c138 <__ieee754_atan2+0x1a0>)
 800c0e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0e4:	f7f4 f8e0 	bl	80002a8 <__aeabi_dsub>
 800c0e8:	e777      	b.n	800bfda <__ieee754_atan2+0x42>
 800c0ea:	a117      	add	r1, pc, #92	; (adr r1, 800c148 <__ieee754_atan2+0x1b0>)
 800c0ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0f0:	e773      	b.n	800bfda <__ieee754_atan2+0x42>
 800c0f2:	a111      	add	r1, pc, #68	; (adr r1, 800c138 <__ieee754_atan2+0x1a0>)
 800c0f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0f8:	e76f      	b.n	800bfda <__ieee754_atan2+0x42>
 800c0fa:	a111      	add	r1, pc, #68	; (adr r1, 800c140 <__ieee754_atan2+0x1a8>)
 800c0fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c100:	e76b      	b.n	800bfda <__ieee754_atan2+0x42>
 800c102:	bf00      	nop
 800c104:	f3af 8000 	nop.w
 800c108:	54442d18 	.word	0x54442d18
 800c10c:	c00921fb 	.word	0xc00921fb
 800c110:	54442d18 	.word	0x54442d18
 800c114:	bff921fb 	.word	0xbff921fb
 800c118:	54442d18 	.word	0x54442d18
 800c11c:	bfe921fb 	.word	0xbfe921fb
 800c120:	7f3321d2 	.word	0x7f3321d2
 800c124:	4002d97c 	.word	0x4002d97c
 800c128:	7f3321d2 	.word	0x7f3321d2
 800c12c:	c002d97c 	.word	0xc002d97c
 800c130:	33145c07 	.word	0x33145c07
 800c134:	3ca1a626 	.word	0x3ca1a626
 800c138:	54442d18 	.word	0x54442d18
 800c13c:	400921fb 	.word	0x400921fb
 800c140:	54442d18 	.word	0x54442d18
 800c144:	3ff921fb 	.word	0x3ff921fb
 800c148:	54442d18 	.word	0x54442d18
 800c14c:	3fe921fb 	.word	0x3fe921fb
 800c150:	7ff00000 	.word	0x7ff00000

0800c154 <__ieee754_sqrt>:
 800c154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c158:	4955      	ldr	r1, [pc, #340]	; (800c2b0 <__ieee754_sqrt+0x15c>)
 800c15a:	ec55 4b10 	vmov	r4, r5, d0
 800c15e:	43a9      	bics	r1, r5
 800c160:	462b      	mov	r3, r5
 800c162:	462a      	mov	r2, r5
 800c164:	d112      	bne.n	800c18c <__ieee754_sqrt+0x38>
 800c166:	ee10 2a10 	vmov	r2, s0
 800c16a:	ee10 0a10 	vmov	r0, s0
 800c16e:	4629      	mov	r1, r5
 800c170:	f7f4 fa52 	bl	8000618 <__aeabi_dmul>
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	4620      	mov	r0, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	f7f4 f896 	bl	80002ac <__adddf3>
 800c180:	4604      	mov	r4, r0
 800c182:	460d      	mov	r5, r1
 800c184:	ec45 4b10 	vmov	d0, r4, r5
 800c188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c18c:	2d00      	cmp	r5, #0
 800c18e:	ee10 0a10 	vmov	r0, s0
 800c192:	4621      	mov	r1, r4
 800c194:	dc0f      	bgt.n	800c1b6 <__ieee754_sqrt+0x62>
 800c196:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c19a:	4330      	orrs	r0, r6
 800c19c:	d0f2      	beq.n	800c184 <__ieee754_sqrt+0x30>
 800c19e:	b155      	cbz	r5, 800c1b6 <__ieee754_sqrt+0x62>
 800c1a0:	ee10 2a10 	vmov	r2, s0
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	f7f4 f87e 	bl	80002a8 <__aeabi_dsub>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	f7f4 fb5c 	bl	800086c <__aeabi_ddiv>
 800c1b4:	e7e4      	b.n	800c180 <__ieee754_sqrt+0x2c>
 800c1b6:	151b      	asrs	r3, r3, #20
 800c1b8:	d073      	beq.n	800c2a2 <__ieee754_sqrt+0x14e>
 800c1ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c1be:	07dd      	lsls	r5, r3, #31
 800c1c0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c1c4:	bf48      	it	mi
 800c1c6:	0fc8      	lsrmi	r0, r1, #31
 800c1c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c1cc:	bf44      	itt	mi
 800c1ce:	0049      	lslmi	r1, r1, #1
 800c1d0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c1d4:	2500      	movs	r5, #0
 800c1d6:	1058      	asrs	r0, r3, #1
 800c1d8:	0fcb      	lsrs	r3, r1, #31
 800c1da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c1de:	0049      	lsls	r1, r1, #1
 800c1e0:	2316      	movs	r3, #22
 800c1e2:	462c      	mov	r4, r5
 800c1e4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c1e8:	19a7      	adds	r7, r4, r6
 800c1ea:	4297      	cmp	r7, r2
 800c1ec:	bfde      	ittt	le
 800c1ee:	19bc      	addle	r4, r7, r6
 800c1f0:	1bd2      	suble	r2, r2, r7
 800c1f2:	19ad      	addle	r5, r5, r6
 800c1f4:	0fcf      	lsrs	r7, r1, #31
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c1fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c200:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c204:	d1f0      	bne.n	800c1e8 <__ieee754_sqrt+0x94>
 800c206:	f04f 0c20 	mov.w	ip, #32
 800c20a:	469e      	mov	lr, r3
 800c20c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c210:	42a2      	cmp	r2, r4
 800c212:	eb06 070e 	add.w	r7, r6, lr
 800c216:	dc02      	bgt.n	800c21e <__ieee754_sqrt+0xca>
 800c218:	d112      	bne.n	800c240 <__ieee754_sqrt+0xec>
 800c21a:	428f      	cmp	r7, r1
 800c21c:	d810      	bhi.n	800c240 <__ieee754_sqrt+0xec>
 800c21e:	2f00      	cmp	r7, #0
 800c220:	eb07 0e06 	add.w	lr, r7, r6
 800c224:	da42      	bge.n	800c2ac <__ieee754_sqrt+0x158>
 800c226:	f1be 0f00 	cmp.w	lr, #0
 800c22a:	db3f      	blt.n	800c2ac <__ieee754_sqrt+0x158>
 800c22c:	f104 0801 	add.w	r8, r4, #1
 800c230:	1b12      	subs	r2, r2, r4
 800c232:	428f      	cmp	r7, r1
 800c234:	bf88      	it	hi
 800c236:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c23a:	1bc9      	subs	r1, r1, r7
 800c23c:	4433      	add	r3, r6
 800c23e:	4644      	mov	r4, r8
 800c240:	0052      	lsls	r2, r2, #1
 800c242:	f1bc 0c01 	subs.w	ip, ip, #1
 800c246:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c24a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c24e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c252:	d1dd      	bne.n	800c210 <__ieee754_sqrt+0xbc>
 800c254:	430a      	orrs	r2, r1
 800c256:	d006      	beq.n	800c266 <__ieee754_sqrt+0x112>
 800c258:	1c5c      	adds	r4, r3, #1
 800c25a:	bf13      	iteet	ne
 800c25c:	3301      	addne	r3, #1
 800c25e:	3501      	addeq	r5, #1
 800c260:	4663      	moveq	r3, ip
 800c262:	f023 0301 	bicne.w	r3, r3, #1
 800c266:	106a      	asrs	r2, r5, #1
 800c268:	085b      	lsrs	r3, r3, #1
 800c26a:	07e9      	lsls	r1, r5, #31
 800c26c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c270:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c274:	bf48      	it	mi
 800c276:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c27a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c27e:	461c      	mov	r4, r3
 800c280:	e780      	b.n	800c184 <__ieee754_sqrt+0x30>
 800c282:	0aca      	lsrs	r2, r1, #11
 800c284:	3815      	subs	r0, #21
 800c286:	0549      	lsls	r1, r1, #21
 800c288:	2a00      	cmp	r2, #0
 800c28a:	d0fa      	beq.n	800c282 <__ieee754_sqrt+0x12e>
 800c28c:	02d6      	lsls	r6, r2, #11
 800c28e:	d50a      	bpl.n	800c2a6 <__ieee754_sqrt+0x152>
 800c290:	f1c3 0420 	rsb	r4, r3, #32
 800c294:	fa21 f404 	lsr.w	r4, r1, r4
 800c298:	1e5d      	subs	r5, r3, #1
 800c29a:	4099      	lsls	r1, r3
 800c29c:	4322      	orrs	r2, r4
 800c29e:	1b43      	subs	r3, r0, r5
 800c2a0:	e78b      	b.n	800c1ba <__ieee754_sqrt+0x66>
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	e7f0      	b.n	800c288 <__ieee754_sqrt+0x134>
 800c2a6:	0052      	lsls	r2, r2, #1
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	e7ef      	b.n	800c28c <__ieee754_sqrt+0x138>
 800c2ac:	46a0      	mov	r8, r4
 800c2ae:	e7bf      	b.n	800c230 <__ieee754_sqrt+0xdc>
 800c2b0:	7ff00000 	.word	0x7ff00000
 800c2b4:	00000000 	.word	0x00000000

0800c2b8 <atan>:
 800c2b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	ec55 4b10 	vmov	r4, r5, d0
 800c2c0:	4bc3      	ldr	r3, [pc, #780]	; (800c5d0 <atan+0x318>)
 800c2c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c2c6:	429e      	cmp	r6, r3
 800c2c8:	46ab      	mov	fp, r5
 800c2ca:	dd18      	ble.n	800c2fe <atan+0x46>
 800c2cc:	4bc1      	ldr	r3, [pc, #772]	; (800c5d4 <atan+0x31c>)
 800c2ce:	429e      	cmp	r6, r3
 800c2d0:	dc01      	bgt.n	800c2d6 <atan+0x1e>
 800c2d2:	d109      	bne.n	800c2e8 <atan+0x30>
 800c2d4:	b144      	cbz	r4, 800c2e8 <atan+0x30>
 800c2d6:	4622      	mov	r2, r4
 800c2d8:	462b      	mov	r3, r5
 800c2da:	4620      	mov	r0, r4
 800c2dc:	4629      	mov	r1, r5
 800c2de:	f7f3 ffe5 	bl	80002ac <__adddf3>
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	460d      	mov	r5, r1
 800c2e6:	e006      	b.n	800c2f6 <atan+0x3e>
 800c2e8:	f1bb 0f00 	cmp.w	fp, #0
 800c2ec:	f340 8131 	ble.w	800c552 <atan+0x29a>
 800c2f0:	a59b      	add	r5, pc, #620	; (adr r5, 800c560 <atan+0x2a8>)
 800c2f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2f6:	ec45 4b10 	vmov	d0, r4, r5
 800c2fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2fe:	4bb6      	ldr	r3, [pc, #728]	; (800c5d8 <atan+0x320>)
 800c300:	429e      	cmp	r6, r3
 800c302:	dc14      	bgt.n	800c32e <atan+0x76>
 800c304:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c308:	429e      	cmp	r6, r3
 800c30a:	dc0d      	bgt.n	800c328 <atan+0x70>
 800c30c:	a396      	add	r3, pc, #600	; (adr r3, 800c568 <atan+0x2b0>)
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	ee10 0a10 	vmov	r0, s0
 800c316:	4629      	mov	r1, r5
 800c318:	f7f3 ffc8 	bl	80002ac <__adddf3>
 800c31c:	2200      	movs	r2, #0
 800c31e:	4baf      	ldr	r3, [pc, #700]	; (800c5dc <atan+0x324>)
 800c320:	f7f4 fc0a 	bl	8000b38 <__aeabi_dcmpgt>
 800c324:	2800      	cmp	r0, #0
 800c326:	d1e6      	bne.n	800c2f6 <atan+0x3e>
 800c328:	f04f 3aff 	mov.w	sl, #4294967295
 800c32c:	e02b      	b.n	800c386 <atan+0xce>
 800c32e:	f000 f963 	bl	800c5f8 <fabs>
 800c332:	4bab      	ldr	r3, [pc, #684]	; (800c5e0 <atan+0x328>)
 800c334:	429e      	cmp	r6, r3
 800c336:	ec55 4b10 	vmov	r4, r5, d0
 800c33a:	f300 80bf 	bgt.w	800c4bc <atan+0x204>
 800c33e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c342:	429e      	cmp	r6, r3
 800c344:	f300 80a0 	bgt.w	800c488 <atan+0x1d0>
 800c348:	ee10 2a10 	vmov	r2, s0
 800c34c:	ee10 0a10 	vmov	r0, s0
 800c350:	462b      	mov	r3, r5
 800c352:	4629      	mov	r1, r5
 800c354:	f7f3 ffaa 	bl	80002ac <__adddf3>
 800c358:	2200      	movs	r2, #0
 800c35a:	4ba0      	ldr	r3, [pc, #640]	; (800c5dc <atan+0x324>)
 800c35c:	f7f3 ffa4 	bl	80002a8 <__aeabi_dsub>
 800c360:	2200      	movs	r2, #0
 800c362:	4606      	mov	r6, r0
 800c364:	460f      	mov	r7, r1
 800c366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c36a:	4620      	mov	r0, r4
 800c36c:	4629      	mov	r1, r5
 800c36e:	f7f3 ff9d 	bl	80002ac <__adddf3>
 800c372:	4602      	mov	r2, r0
 800c374:	460b      	mov	r3, r1
 800c376:	4630      	mov	r0, r6
 800c378:	4639      	mov	r1, r7
 800c37a:	f7f4 fa77 	bl	800086c <__aeabi_ddiv>
 800c37e:	f04f 0a00 	mov.w	sl, #0
 800c382:	4604      	mov	r4, r0
 800c384:	460d      	mov	r5, r1
 800c386:	4622      	mov	r2, r4
 800c388:	462b      	mov	r3, r5
 800c38a:	4620      	mov	r0, r4
 800c38c:	4629      	mov	r1, r5
 800c38e:	f7f4 f943 	bl	8000618 <__aeabi_dmul>
 800c392:	4602      	mov	r2, r0
 800c394:	460b      	mov	r3, r1
 800c396:	4680      	mov	r8, r0
 800c398:	4689      	mov	r9, r1
 800c39a:	f7f4 f93d 	bl	8000618 <__aeabi_dmul>
 800c39e:	a374      	add	r3, pc, #464	; (adr r3, 800c570 <atan+0x2b8>)
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	4606      	mov	r6, r0
 800c3a6:	460f      	mov	r7, r1
 800c3a8:	f7f4 f936 	bl	8000618 <__aeabi_dmul>
 800c3ac:	a372      	add	r3, pc, #456	; (adr r3, 800c578 <atan+0x2c0>)
 800c3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b2:	f7f3 ff7b 	bl	80002ac <__adddf3>
 800c3b6:	4632      	mov	r2, r6
 800c3b8:	463b      	mov	r3, r7
 800c3ba:	f7f4 f92d 	bl	8000618 <__aeabi_dmul>
 800c3be:	a370      	add	r3, pc, #448	; (adr r3, 800c580 <atan+0x2c8>)
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	f7f3 ff72 	bl	80002ac <__adddf3>
 800c3c8:	4632      	mov	r2, r6
 800c3ca:	463b      	mov	r3, r7
 800c3cc:	f7f4 f924 	bl	8000618 <__aeabi_dmul>
 800c3d0:	a36d      	add	r3, pc, #436	; (adr r3, 800c588 <atan+0x2d0>)
 800c3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d6:	f7f3 ff69 	bl	80002ac <__adddf3>
 800c3da:	4632      	mov	r2, r6
 800c3dc:	463b      	mov	r3, r7
 800c3de:	f7f4 f91b 	bl	8000618 <__aeabi_dmul>
 800c3e2:	a36b      	add	r3, pc, #428	; (adr r3, 800c590 <atan+0x2d8>)
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	f7f3 ff60 	bl	80002ac <__adddf3>
 800c3ec:	4632      	mov	r2, r6
 800c3ee:	463b      	mov	r3, r7
 800c3f0:	f7f4 f912 	bl	8000618 <__aeabi_dmul>
 800c3f4:	a368      	add	r3, pc, #416	; (adr r3, 800c598 <atan+0x2e0>)
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	f7f3 ff57 	bl	80002ac <__adddf3>
 800c3fe:	4642      	mov	r2, r8
 800c400:	464b      	mov	r3, r9
 800c402:	f7f4 f909 	bl	8000618 <__aeabi_dmul>
 800c406:	a366      	add	r3, pc, #408	; (adr r3, 800c5a0 <atan+0x2e8>)
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	4680      	mov	r8, r0
 800c40e:	4689      	mov	r9, r1
 800c410:	4630      	mov	r0, r6
 800c412:	4639      	mov	r1, r7
 800c414:	f7f4 f900 	bl	8000618 <__aeabi_dmul>
 800c418:	a363      	add	r3, pc, #396	; (adr r3, 800c5a8 <atan+0x2f0>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	f7f3 ff43 	bl	80002a8 <__aeabi_dsub>
 800c422:	4632      	mov	r2, r6
 800c424:	463b      	mov	r3, r7
 800c426:	f7f4 f8f7 	bl	8000618 <__aeabi_dmul>
 800c42a:	a361      	add	r3, pc, #388	; (adr r3, 800c5b0 <atan+0x2f8>)
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	f7f3 ff3a 	bl	80002a8 <__aeabi_dsub>
 800c434:	4632      	mov	r2, r6
 800c436:	463b      	mov	r3, r7
 800c438:	f7f4 f8ee 	bl	8000618 <__aeabi_dmul>
 800c43c:	a35e      	add	r3, pc, #376	; (adr r3, 800c5b8 <atan+0x300>)
 800c43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c442:	f7f3 ff31 	bl	80002a8 <__aeabi_dsub>
 800c446:	4632      	mov	r2, r6
 800c448:	463b      	mov	r3, r7
 800c44a:	f7f4 f8e5 	bl	8000618 <__aeabi_dmul>
 800c44e:	a35c      	add	r3, pc, #368	; (adr r3, 800c5c0 <atan+0x308>)
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	f7f3 ff28 	bl	80002a8 <__aeabi_dsub>
 800c458:	4632      	mov	r2, r6
 800c45a:	463b      	mov	r3, r7
 800c45c:	f7f4 f8dc 	bl	8000618 <__aeabi_dmul>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4640      	mov	r0, r8
 800c466:	4649      	mov	r1, r9
 800c468:	f7f3 ff20 	bl	80002ac <__adddf3>
 800c46c:	4622      	mov	r2, r4
 800c46e:	462b      	mov	r3, r5
 800c470:	f7f4 f8d2 	bl	8000618 <__aeabi_dmul>
 800c474:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	d14b      	bne.n	800c516 <atan+0x25e>
 800c47e:	4620      	mov	r0, r4
 800c480:	4629      	mov	r1, r5
 800c482:	f7f3 ff11 	bl	80002a8 <__aeabi_dsub>
 800c486:	e72c      	b.n	800c2e2 <atan+0x2a>
 800c488:	ee10 0a10 	vmov	r0, s0
 800c48c:	2200      	movs	r2, #0
 800c48e:	4b53      	ldr	r3, [pc, #332]	; (800c5dc <atan+0x324>)
 800c490:	4629      	mov	r1, r5
 800c492:	f7f3 ff09 	bl	80002a8 <__aeabi_dsub>
 800c496:	2200      	movs	r2, #0
 800c498:	4606      	mov	r6, r0
 800c49a:	460f      	mov	r7, r1
 800c49c:	4b4f      	ldr	r3, [pc, #316]	; (800c5dc <atan+0x324>)
 800c49e:	4620      	mov	r0, r4
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	f7f3 ff03 	bl	80002ac <__adddf3>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	f7f4 f9dd 	bl	800086c <__aeabi_ddiv>
 800c4b2:	f04f 0a01 	mov.w	sl, #1
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	460d      	mov	r5, r1
 800c4ba:	e764      	b.n	800c386 <atan+0xce>
 800c4bc:	4b49      	ldr	r3, [pc, #292]	; (800c5e4 <atan+0x32c>)
 800c4be:	429e      	cmp	r6, r3
 800c4c0:	dc1d      	bgt.n	800c4fe <atan+0x246>
 800c4c2:	ee10 0a10 	vmov	r0, s0
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	4b47      	ldr	r3, [pc, #284]	; (800c5e8 <atan+0x330>)
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	f7f3 feec 	bl	80002a8 <__aeabi_dsub>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	460f      	mov	r7, r1
 800c4d6:	4b44      	ldr	r3, [pc, #272]	; (800c5e8 <atan+0x330>)
 800c4d8:	4620      	mov	r0, r4
 800c4da:	4629      	mov	r1, r5
 800c4dc:	f7f4 f89c 	bl	8000618 <__aeabi_dmul>
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	4b3e      	ldr	r3, [pc, #248]	; (800c5dc <atan+0x324>)
 800c4e4:	f7f3 fee2 	bl	80002ac <__adddf3>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	4639      	mov	r1, r7
 800c4f0:	f7f4 f9bc 	bl	800086c <__aeabi_ddiv>
 800c4f4:	f04f 0a02 	mov.w	sl, #2
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	e743      	b.n	800c386 <atan+0xce>
 800c4fe:	462b      	mov	r3, r5
 800c500:	ee10 2a10 	vmov	r2, s0
 800c504:	2000      	movs	r0, #0
 800c506:	4939      	ldr	r1, [pc, #228]	; (800c5ec <atan+0x334>)
 800c508:	f7f4 f9b0 	bl	800086c <__aeabi_ddiv>
 800c50c:	f04f 0a03 	mov.w	sl, #3
 800c510:	4604      	mov	r4, r0
 800c512:	460d      	mov	r5, r1
 800c514:	e737      	b.n	800c386 <atan+0xce>
 800c516:	4b36      	ldr	r3, [pc, #216]	; (800c5f0 <atan+0x338>)
 800c518:	4e36      	ldr	r6, [pc, #216]	; (800c5f4 <atan+0x33c>)
 800c51a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c51e:	4456      	add	r6, sl
 800c520:	449a      	add	sl, r3
 800c522:	e9da 2300 	ldrd	r2, r3, [sl]
 800c526:	f7f3 febf 	bl	80002a8 <__aeabi_dsub>
 800c52a:	4622      	mov	r2, r4
 800c52c:	462b      	mov	r3, r5
 800c52e:	f7f3 febb 	bl	80002a8 <__aeabi_dsub>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c53a:	f7f3 feb5 	bl	80002a8 <__aeabi_dsub>
 800c53e:	f1bb 0f00 	cmp.w	fp, #0
 800c542:	4604      	mov	r4, r0
 800c544:	460d      	mov	r5, r1
 800c546:	f6bf aed6 	bge.w	800c2f6 <atan+0x3e>
 800c54a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c54e:	461d      	mov	r5, r3
 800c550:	e6d1      	b.n	800c2f6 <atan+0x3e>
 800c552:	a51d      	add	r5, pc, #116	; (adr r5, 800c5c8 <atan+0x310>)
 800c554:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c558:	e6cd      	b.n	800c2f6 <atan+0x3e>
 800c55a:	bf00      	nop
 800c55c:	f3af 8000 	nop.w
 800c560:	54442d18 	.word	0x54442d18
 800c564:	3ff921fb 	.word	0x3ff921fb
 800c568:	8800759c 	.word	0x8800759c
 800c56c:	7e37e43c 	.word	0x7e37e43c
 800c570:	e322da11 	.word	0xe322da11
 800c574:	3f90ad3a 	.word	0x3f90ad3a
 800c578:	24760deb 	.word	0x24760deb
 800c57c:	3fa97b4b 	.word	0x3fa97b4b
 800c580:	a0d03d51 	.word	0xa0d03d51
 800c584:	3fb10d66 	.word	0x3fb10d66
 800c588:	c54c206e 	.word	0xc54c206e
 800c58c:	3fb745cd 	.word	0x3fb745cd
 800c590:	920083ff 	.word	0x920083ff
 800c594:	3fc24924 	.word	0x3fc24924
 800c598:	5555550d 	.word	0x5555550d
 800c59c:	3fd55555 	.word	0x3fd55555
 800c5a0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c5a4:	bfa2b444 	.word	0xbfa2b444
 800c5a8:	52defd9a 	.word	0x52defd9a
 800c5ac:	3fadde2d 	.word	0x3fadde2d
 800c5b0:	af749a6d 	.word	0xaf749a6d
 800c5b4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c5b8:	fe231671 	.word	0xfe231671
 800c5bc:	3fbc71c6 	.word	0x3fbc71c6
 800c5c0:	9998ebc4 	.word	0x9998ebc4
 800c5c4:	3fc99999 	.word	0x3fc99999
 800c5c8:	54442d18 	.word	0x54442d18
 800c5cc:	bff921fb 	.word	0xbff921fb
 800c5d0:	440fffff 	.word	0x440fffff
 800c5d4:	7ff00000 	.word	0x7ff00000
 800c5d8:	3fdbffff 	.word	0x3fdbffff
 800c5dc:	3ff00000 	.word	0x3ff00000
 800c5e0:	3ff2ffff 	.word	0x3ff2ffff
 800c5e4:	40037fff 	.word	0x40037fff
 800c5e8:	3ff80000 	.word	0x3ff80000
 800c5ec:	bff00000 	.word	0xbff00000
 800c5f0:	0800f018 	.word	0x0800f018
 800c5f4:	0800eff8 	.word	0x0800eff8

0800c5f8 <fabs>:
 800c5f8:	ec51 0b10 	vmov	r0, r1, d0
 800c5fc:	ee10 2a10 	vmov	r2, s0
 800c600:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c604:	ec43 2b10 	vmov	d0, r2, r3
 800c608:	4770      	bx	lr

0800c60a <matherr>:
 800c60a:	2000      	movs	r0, #0
 800c60c:	4770      	bx	lr
	...

0800c610 <nan>:
 800c610:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c618 <nan+0x8>
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	00000000 	.word	0x00000000
 800c61c:	7ff80000 	.word	0x7ff80000

0800c620 <__errno>:
 800c620:	4b01      	ldr	r3, [pc, #4]	; (800c628 <__errno+0x8>)
 800c622:	6818      	ldr	r0, [r3, #0]
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	2000006c 	.word	0x2000006c

0800c62c <__libc_init_array>:
 800c62c:	b570      	push	{r4, r5, r6, lr}
 800c62e:	4e0d      	ldr	r6, [pc, #52]	; (800c664 <__libc_init_array+0x38>)
 800c630:	4c0d      	ldr	r4, [pc, #52]	; (800c668 <__libc_init_array+0x3c>)
 800c632:	1ba4      	subs	r4, r4, r6
 800c634:	10a4      	asrs	r4, r4, #2
 800c636:	2500      	movs	r5, #0
 800c638:	42a5      	cmp	r5, r4
 800c63a:	d109      	bne.n	800c650 <__libc_init_array+0x24>
 800c63c:	4e0b      	ldr	r6, [pc, #44]	; (800c66c <__libc_init_array+0x40>)
 800c63e:	4c0c      	ldr	r4, [pc, #48]	; (800c670 <__libc_init_array+0x44>)
 800c640:	f002 fc62 	bl	800ef08 <_init>
 800c644:	1ba4      	subs	r4, r4, r6
 800c646:	10a4      	asrs	r4, r4, #2
 800c648:	2500      	movs	r5, #0
 800c64a:	42a5      	cmp	r5, r4
 800c64c:	d105      	bne.n	800c65a <__libc_init_array+0x2e>
 800c64e:	bd70      	pop	{r4, r5, r6, pc}
 800c650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c654:	4798      	blx	r3
 800c656:	3501      	adds	r5, #1
 800c658:	e7ee      	b.n	800c638 <__libc_init_array+0xc>
 800c65a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c65e:	4798      	blx	r3
 800c660:	3501      	adds	r5, #1
 800c662:	e7f2      	b.n	800c64a <__libc_init_array+0x1e>
 800c664:	0800f300 	.word	0x0800f300
 800c668:	0800f300 	.word	0x0800f300
 800c66c:	0800f300 	.word	0x0800f300
 800c670:	0800f304 	.word	0x0800f304

0800c674 <malloc>:
 800c674:	4b02      	ldr	r3, [pc, #8]	; (800c680 <malloc+0xc>)
 800c676:	4601      	mov	r1, r0
 800c678:	6818      	ldr	r0, [r3, #0]
 800c67a:	f000 b86d 	b.w	800c758 <_malloc_r>
 800c67e:	bf00      	nop
 800c680:	2000006c 	.word	0x2000006c

0800c684 <free>:
 800c684:	4b02      	ldr	r3, [pc, #8]	; (800c690 <free+0xc>)
 800c686:	4601      	mov	r1, r0
 800c688:	6818      	ldr	r0, [r3, #0]
 800c68a:	f000 b817 	b.w	800c6bc <_free_r>
 800c68e:	bf00      	nop
 800c690:	2000006c 	.word	0x2000006c

0800c694 <memcpy>:
 800c694:	b510      	push	{r4, lr}
 800c696:	1e43      	subs	r3, r0, #1
 800c698:	440a      	add	r2, r1
 800c69a:	4291      	cmp	r1, r2
 800c69c:	d100      	bne.n	800c6a0 <memcpy+0xc>
 800c69e:	bd10      	pop	{r4, pc}
 800c6a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6a8:	e7f7      	b.n	800c69a <memcpy+0x6>

0800c6aa <memset>:
 800c6aa:	4402      	add	r2, r0
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d100      	bne.n	800c6b4 <memset+0xa>
 800c6b2:	4770      	bx	lr
 800c6b4:	f803 1b01 	strb.w	r1, [r3], #1
 800c6b8:	e7f9      	b.n	800c6ae <memset+0x4>
	...

0800c6bc <_free_r>:
 800c6bc:	b538      	push	{r3, r4, r5, lr}
 800c6be:	4605      	mov	r5, r0
 800c6c0:	2900      	cmp	r1, #0
 800c6c2:	d045      	beq.n	800c750 <_free_r+0x94>
 800c6c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6c8:	1f0c      	subs	r4, r1, #4
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	bfb8      	it	lt
 800c6ce:	18e4      	addlt	r4, r4, r3
 800c6d0:	f001 ff22 	bl	800e518 <__malloc_lock>
 800c6d4:	4a1f      	ldr	r2, [pc, #124]	; (800c754 <_free_r+0x98>)
 800c6d6:	6813      	ldr	r3, [r2, #0]
 800c6d8:	4610      	mov	r0, r2
 800c6da:	b933      	cbnz	r3, 800c6ea <_free_r+0x2e>
 800c6dc:	6063      	str	r3, [r4, #4]
 800c6de:	6014      	str	r4, [r2, #0]
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6e6:	f001 bf18 	b.w	800e51a <__malloc_unlock>
 800c6ea:	42a3      	cmp	r3, r4
 800c6ec:	d90c      	bls.n	800c708 <_free_r+0x4c>
 800c6ee:	6821      	ldr	r1, [r4, #0]
 800c6f0:	1862      	adds	r2, r4, r1
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	bf04      	itt	eq
 800c6f6:	681a      	ldreq	r2, [r3, #0]
 800c6f8:	685b      	ldreq	r3, [r3, #4]
 800c6fa:	6063      	str	r3, [r4, #4]
 800c6fc:	bf04      	itt	eq
 800c6fe:	1852      	addeq	r2, r2, r1
 800c700:	6022      	streq	r2, [r4, #0]
 800c702:	6004      	str	r4, [r0, #0]
 800c704:	e7ec      	b.n	800c6e0 <_free_r+0x24>
 800c706:	4613      	mov	r3, r2
 800c708:	685a      	ldr	r2, [r3, #4]
 800c70a:	b10a      	cbz	r2, 800c710 <_free_r+0x54>
 800c70c:	42a2      	cmp	r2, r4
 800c70e:	d9fa      	bls.n	800c706 <_free_r+0x4a>
 800c710:	6819      	ldr	r1, [r3, #0]
 800c712:	1858      	adds	r0, r3, r1
 800c714:	42a0      	cmp	r0, r4
 800c716:	d10b      	bne.n	800c730 <_free_r+0x74>
 800c718:	6820      	ldr	r0, [r4, #0]
 800c71a:	4401      	add	r1, r0
 800c71c:	1858      	adds	r0, r3, r1
 800c71e:	4282      	cmp	r2, r0
 800c720:	6019      	str	r1, [r3, #0]
 800c722:	d1dd      	bne.n	800c6e0 <_free_r+0x24>
 800c724:	6810      	ldr	r0, [r2, #0]
 800c726:	6852      	ldr	r2, [r2, #4]
 800c728:	605a      	str	r2, [r3, #4]
 800c72a:	4401      	add	r1, r0
 800c72c:	6019      	str	r1, [r3, #0]
 800c72e:	e7d7      	b.n	800c6e0 <_free_r+0x24>
 800c730:	d902      	bls.n	800c738 <_free_r+0x7c>
 800c732:	230c      	movs	r3, #12
 800c734:	602b      	str	r3, [r5, #0]
 800c736:	e7d3      	b.n	800c6e0 <_free_r+0x24>
 800c738:	6820      	ldr	r0, [r4, #0]
 800c73a:	1821      	adds	r1, r4, r0
 800c73c:	428a      	cmp	r2, r1
 800c73e:	bf04      	itt	eq
 800c740:	6811      	ldreq	r1, [r2, #0]
 800c742:	6852      	ldreq	r2, [r2, #4]
 800c744:	6062      	str	r2, [r4, #4]
 800c746:	bf04      	itt	eq
 800c748:	1809      	addeq	r1, r1, r0
 800c74a:	6021      	streq	r1, [r4, #0]
 800c74c:	605c      	str	r4, [r3, #4]
 800c74e:	e7c7      	b.n	800c6e0 <_free_r+0x24>
 800c750:	bd38      	pop	{r3, r4, r5, pc}
 800c752:	bf00      	nop
 800c754:	2000037c 	.word	0x2000037c

0800c758 <_malloc_r>:
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	1ccd      	adds	r5, r1, #3
 800c75c:	f025 0503 	bic.w	r5, r5, #3
 800c760:	3508      	adds	r5, #8
 800c762:	2d0c      	cmp	r5, #12
 800c764:	bf38      	it	cc
 800c766:	250c      	movcc	r5, #12
 800c768:	2d00      	cmp	r5, #0
 800c76a:	4606      	mov	r6, r0
 800c76c:	db01      	blt.n	800c772 <_malloc_r+0x1a>
 800c76e:	42a9      	cmp	r1, r5
 800c770:	d903      	bls.n	800c77a <_malloc_r+0x22>
 800c772:	230c      	movs	r3, #12
 800c774:	6033      	str	r3, [r6, #0]
 800c776:	2000      	movs	r0, #0
 800c778:	bd70      	pop	{r4, r5, r6, pc}
 800c77a:	f001 fecd 	bl	800e518 <__malloc_lock>
 800c77e:	4a21      	ldr	r2, [pc, #132]	; (800c804 <_malloc_r+0xac>)
 800c780:	6814      	ldr	r4, [r2, #0]
 800c782:	4621      	mov	r1, r4
 800c784:	b991      	cbnz	r1, 800c7ac <_malloc_r+0x54>
 800c786:	4c20      	ldr	r4, [pc, #128]	; (800c808 <_malloc_r+0xb0>)
 800c788:	6823      	ldr	r3, [r4, #0]
 800c78a:	b91b      	cbnz	r3, 800c794 <_malloc_r+0x3c>
 800c78c:	4630      	mov	r0, r6
 800c78e:	f000 fd15 	bl	800d1bc <_sbrk_r>
 800c792:	6020      	str	r0, [r4, #0]
 800c794:	4629      	mov	r1, r5
 800c796:	4630      	mov	r0, r6
 800c798:	f000 fd10 	bl	800d1bc <_sbrk_r>
 800c79c:	1c43      	adds	r3, r0, #1
 800c79e:	d124      	bne.n	800c7ea <_malloc_r+0x92>
 800c7a0:	230c      	movs	r3, #12
 800c7a2:	6033      	str	r3, [r6, #0]
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	f001 feb8 	bl	800e51a <__malloc_unlock>
 800c7aa:	e7e4      	b.n	800c776 <_malloc_r+0x1e>
 800c7ac:	680b      	ldr	r3, [r1, #0]
 800c7ae:	1b5b      	subs	r3, r3, r5
 800c7b0:	d418      	bmi.n	800c7e4 <_malloc_r+0x8c>
 800c7b2:	2b0b      	cmp	r3, #11
 800c7b4:	d90f      	bls.n	800c7d6 <_malloc_r+0x7e>
 800c7b6:	600b      	str	r3, [r1, #0]
 800c7b8:	50cd      	str	r5, [r1, r3]
 800c7ba:	18cc      	adds	r4, r1, r3
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f001 feac 	bl	800e51a <__malloc_unlock>
 800c7c2:	f104 000b 	add.w	r0, r4, #11
 800c7c6:	1d23      	adds	r3, r4, #4
 800c7c8:	f020 0007 	bic.w	r0, r0, #7
 800c7cc:	1ac3      	subs	r3, r0, r3
 800c7ce:	d0d3      	beq.n	800c778 <_malloc_r+0x20>
 800c7d0:	425a      	negs	r2, r3
 800c7d2:	50e2      	str	r2, [r4, r3]
 800c7d4:	e7d0      	b.n	800c778 <_malloc_r+0x20>
 800c7d6:	428c      	cmp	r4, r1
 800c7d8:	684b      	ldr	r3, [r1, #4]
 800c7da:	bf16      	itet	ne
 800c7dc:	6063      	strne	r3, [r4, #4]
 800c7de:	6013      	streq	r3, [r2, #0]
 800c7e0:	460c      	movne	r4, r1
 800c7e2:	e7eb      	b.n	800c7bc <_malloc_r+0x64>
 800c7e4:	460c      	mov	r4, r1
 800c7e6:	6849      	ldr	r1, [r1, #4]
 800c7e8:	e7cc      	b.n	800c784 <_malloc_r+0x2c>
 800c7ea:	1cc4      	adds	r4, r0, #3
 800c7ec:	f024 0403 	bic.w	r4, r4, #3
 800c7f0:	42a0      	cmp	r0, r4
 800c7f2:	d005      	beq.n	800c800 <_malloc_r+0xa8>
 800c7f4:	1a21      	subs	r1, r4, r0
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f000 fce0 	bl	800d1bc <_sbrk_r>
 800c7fc:	3001      	adds	r0, #1
 800c7fe:	d0cf      	beq.n	800c7a0 <_malloc_r+0x48>
 800c800:	6025      	str	r5, [r4, #0]
 800c802:	e7db      	b.n	800c7bc <_malloc_r+0x64>
 800c804:	2000037c 	.word	0x2000037c
 800c808:	20000380 	.word	0x20000380

0800c80c <__cvt>:
 800c80c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c810:	ec55 4b10 	vmov	r4, r5, d0
 800c814:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c816:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c81a:	2d00      	cmp	r5, #0
 800c81c:	460e      	mov	r6, r1
 800c81e:	4691      	mov	r9, r2
 800c820:	4619      	mov	r1, r3
 800c822:	bfb8      	it	lt
 800c824:	4622      	movlt	r2, r4
 800c826:	462b      	mov	r3, r5
 800c828:	f027 0720 	bic.w	r7, r7, #32
 800c82c:	bfbb      	ittet	lt
 800c82e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c832:	461d      	movlt	r5, r3
 800c834:	2300      	movge	r3, #0
 800c836:	232d      	movlt	r3, #45	; 0x2d
 800c838:	bfb8      	it	lt
 800c83a:	4614      	movlt	r4, r2
 800c83c:	2f46      	cmp	r7, #70	; 0x46
 800c83e:	700b      	strb	r3, [r1, #0]
 800c840:	d004      	beq.n	800c84c <__cvt+0x40>
 800c842:	2f45      	cmp	r7, #69	; 0x45
 800c844:	d100      	bne.n	800c848 <__cvt+0x3c>
 800c846:	3601      	adds	r6, #1
 800c848:	2102      	movs	r1, #2
 800c84a:	e000      	b.n	800c84e <__cvt+0x42>
 800c84c:	2103      	movs	r1, #3
 800c84e:	ab03      	add	r3, sp, #12
 800c850:	9301      	str	r3, [sp, #4]
 800c852:	ab02      	add	r3, sp, #8
 800c854:	9300      	str	r3, [sp, #0]
 800c856:	4632      	mov	r2, r6
 800c858:	4653      	mov	r3, sl
 800c85a:	ec45 4b10 	vmov	d0, r4, r5
 800c85e:	f000 feb7 	bl	800d5d0 <_dtoa_r>
 800c862:	2f47      	cmp	r7, #71	; 0x47
 800c864:	4680      	mov	r8, r0
 800c866:	d102      	bne.n	800c86e <__cvt+0x62>
 800c868:	f019 0f01 	tst.w	r9, #1
 800c86c:	d026      	beq.n	800c8bc <__cvt+0xb0>
 800c86e:	2f46      	cmp	r7, #70	; 0x46
 800c870:	eb08 0906 	add.w	r9, r8, r6
 800c874:	d111      	bne.n	800c89a <__cvt+0x8e>
 800c876:	f898 3000 	ldrb.w	r3, [r8]
 800c87a:	2b30      	cmp	r3, #48	; 0x30
 800c87c:	d10a      	bne.n	800c894 <__cvt+0x88>
 800c87e:	2200      	movs	r2, #0
 800c880:	2300      	movs	r3, #0
 800c882:	4620      	mov	r0, r4
 800c884:	4629      	mov	r1, r5
 800c886:	f7f4 f92f 	bl	8000ae8 <__aeabi_dcmpeq>
 800c88a:	b918      	cbnz	r0, 800c894 <__cvt+0x88>
 800c88c:	f1c6 0601 	rsb	r6, r6, #1
 800c890:	f8ca 6000 	str.w	r6, [sl]
 800c894:	f8da 3000 	ldr.w	r3, [sl]
 800c898:	4499      	add	r9, r3
 800c89a:	2200      	movs	r2, #0
 800c89c:	2300      	movs	r3, #0
 800c89e:	4620      	mov	r0, r4
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	f7f4 f921 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8a6:	b938      	cbnz	r0, 800c8b8 <__cvt+0xac>
 800c8a8:	2230      	movs	r2, #48	; 0x30
 800c8aa:	9b03      	ldr	r3, [sp, #12]
 800c8ac:	454b      	cmp	r3, r9
 800c8ae:	d205      	bcs.n	800c8bc <__cvt+0xb0>
 800c8b0:	1c59      	adds	r1, r3, #1
 800c8b2:	9103      	str	r1, [sp, #12]
 800c8b4:	701a      	strb	r2, [r3, #0]
 800c8b6:	e7f8      	b.n	800c8aa <__cvt+0x9e>
 800c8b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c8bc:	9b03      	ldr	r3, [sp, #12]
 800c8be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8c0:	eba3 0308 	sub.w	r3, r3, r8
 800c8c4:	4640      	mov	r0, r8
 800c8c6:	6013      	str	r3, [r2, #0]
 800c8c8:	b004      	add	sp, #16
 800c8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c8ce <__exponent>:
 800c8ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8d0:	2900      	cmp	r1, #0
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	bfba      	itte	lt
 800c8d6:	4249      	neglt	r1, r1
 800c8d8:	232d      	movlt	r3, #45	; 0x2d
 800c8da:	232b      	movge	r3, #43	; 0x2b
 800c8dc:	2909      	cmp	r1, #9
 800c8de:	f804 2b02 	strb.w	r2, [r4], #2
 800c8e2:	7043      	strb	r3, [r0, #1]
 800c8e4:	dd20      	ble.n	800c928 <__exponent+0x5a>
 800c8e6:	f10d 0307 	add.w	r3, sp, #7
 800c8ea:	461f      	mov	r7, r3
 800c8ec:	260a      	movs	r6, #10
 800c8ee:	fb91 f5f6 	sdiv	r5, r1, r6
 800c8f2:	fb06 1115 	mls	r1, r6, r5, r1
 800c8f6:	3130      	adds	r1, #48	; 0x30
 800c8f8:	2d09      	cmp	r5, #9
 800c8fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c8fe:	f103 32ff 	add.w	r2, r3, #4294967295
 800c902:	4629      	mov	r1, r5
 800c904:	dc09      	bgt.n	800c91a <__exponent+0x4c>
 800c906:	3130      	adds	r1, #48	; 0x30
 800c908:	3b02      	subs	r3, #2
 800c90a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c90e:	42bb      	cmp	r3, r7
 800c910:	4622      	mov	r2, r4
 800c912:	d304      	bcc.n	800c91e <__exponent+0x50>
 800c914:	1a10      	subs	r0, r2, r0
 800c916:	b003      	add	sp, #12
 800c918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c91a:	4613      	mov	r3, r2
 800c91c:	e7e7      	b.n	800c8ee <__exponent+0x20>
 800c91e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c922:	f804 2b01 	strb.w	r2, [r4], #1
 800c926:	e7f2      	b.n	800c90e <__exponent+0x40>
 800c928:	2330      	movs	r3, #48	; 0x30
 800c92a:	4419      	add	r1, r3
 800c92c:	7083      	strb	r3, [r0, #2]
 800c92e:	1d02      	adds	r2, r0, #4
 800c930:	70c1      	strb	r1, [r0, #3]
 800c932:	e7ef      	b.n	800c914 <__exponent+0x46>

0800c934 <_printf_float>:
 800c934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c938:	b08d      	sub	sp, #52	; 0x34
 800c93a:	460c      	mov	r4, r1
 800c93c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c940:	4616      	mov	r6, r2
 800c942:	461f      	mov	r7, r3
 800c944:	4605      	mov	r5, r0
 800c946:	f001 fd75 	bl	800e434 <_localeconv_r>
 800c94a:	6803      	ldr	r3, [r0, #0]
 800c94c:	9304      	str	r3, [sp, #16]
 800c94e:	4618      	mov	r0, r3
 800c950:	f7f3 fc4e 	bl	80001f0 <strlen>
 800c954:	2300      	movs	r3, #0
 800c956:	930a      	str	r3, [sp, #40]	; 0x28
 800c958:	f8d8 3000 	ldr.w	r3, [r8]
 800c95c:	9005      	str	r0, [sp, #20]
 800c95e:	3307      	adds	r3, #7
 800c960:	f023 0307 	bic.w	r3, r3, #7
 800c964:	f103 0208 	add.w	r2, r3, #8
 800c968:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c96c:	f8d4 b000 	ldr.w	fp, [r4]
 800c970:	f8c8 2000 	str.w	r2, [r8]
 800c974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c978:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c97c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c980:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c984:	9307      	str	r3, [sp, #28]
 800c986:	f8cd 8018 	str.w	r8, [sp, #24]
 800c98a:	f04f 32ff 	mov.w	r2, #4294967295
 800c98e:	4ba7      	ldr	r3, [pc, #668]	; (800cc2c <_printf_float+0x2f8>)
 800c990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c994:	f7f4 f8da 	bl	8000b4c <__aeabi_dcmpun>
 800c998:	bb70      	cbnz	r0, 800c9f8 <_printf_float+0xc4>
 800c99a:	f04f 32ff 	mov.w	r2, #4294967295
 800c99e:	4ba3      	ldr	r3, [pc, #652]	; (800cc2c <_printf_float+0x2f8>)
 800c9a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9a4:	f7f4 f8b4 	bl	8000b10 <__aeabi_dcmple>
 800c9a8:	bb30      	cbnz	r0, 800c9f8 <_printf_float+0xc4>
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	4640      	mov	r0, r8
 800c9b0:	4649      	mov	r1, r9
 800c9b2:	f7f4 f8a3 	bl	8000afc <__aeabi_dcmplt>
 800c9b6:	b110      	cbz	r0, 800c9be <_printf_float+0x8a>
 800c9b8:	232d      	movs	r3, #45	; 0x2d
 800c9ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9be:	4a9c      	ldr	r2, [pc, #624]	; (800cc30 <_printf_float+0x2fc>)
 800c9c0:	4b9c      	ldr	r3, [pc, #624]	; (800cc34 <_printf_float+0x300>)
 800c9c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c9c6:	bf8c      	ite	hi
 800c9c8:	4690      	movhi	r8, r2
 800c9ca:	4698      	movls	r8, r3
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	f02b 0204 	bic.w	r2, fp, #4
 800c9d2:	6123      	str	r3, [r4, #16]
 800c9d4:	6022      	str	r2, [r4, #0]
 800c9d6:	f04f 0900 	mov.w	r9, #0
 800c9da:	9700      	str	r7, [sp, #0]
 800c9dc:	4633      	mov	r3, r6
 800c9de:	aa0b      	add	r2, sp, #44	; 0x2c
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	f000 f9e6 	bl	800cdb4 <_printf_common>
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	f040 808d 	bne.w	800cb08 <_printf_float+0x1d4>
 800c9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f2:	b00d      	add	sp, #52	; 0x34
 800c9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f8:	4642      	mov	r2, r8
 800c9fa:	464b      	mov	r3, r9
 800c9fc:	4640      	mov	r0, r8
 800c9fe:	4649      	mov	r1, r9
 800ca00:	f7f4 f8a4 	bl	8000b4c <__aeabi_dcmpun>
 800ca04:	b110      	cbz	r0, 800ca0c <_printf_float+0xd8>
 800ca06:	4a8c      	ldr	r2, [pc, #560]	; (800cc38 <_printf_float+0x304>)
 800ca08:	4b8c      	ldr	r3, [pc, #560]	; (800cc3c <_printf_float+0x308>)
 800ca0a:	e7da      	b.n	800c9c2 <_printf_float+0x8e>
 800ca0c:	6861      	ldr	r1, [r4, #4]
 800ca0e:	1c4b      	adds	r3, r1, #1
 800ca10:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ca14:	a80a      	add	r0, sp, #40	; 0x28
 800ca16:	d13e      	bne.n	800ca96 <_printf_float+0x162>
 800ca18:	2306      	movs	r3, #6
 800ca1a:	6063      	str	r3, [r4, #4]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ca22:	ab09      	add	r3, sp, #36	; 0x24
 800ca24:	9300      	str	r3, [sp, #0]
 800ca26:	ec49 8b10 	vmov	d0, r8, r9
 800ca2a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca2e:	6022      	str	r2, [r4, #0]
 800ca30:	f8cd a004 	str.w	sl, [sp, #4]
 800ca34:	6861      	ldr	r1, [r4, #4]
 800ca36:	4628      	mov	r0, r5
 800ca38:	f7ff fee8 	bl	800c80c <__cvt>
 800ca3c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ca40:	2b47      	cmp	r3, #71	; 0x47
 800ca42:	4680      	mov	r8, r0
 800ca44:	d109      	bne.n	800ca5a <_printf_float+0x126>
 800ca46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca48:	1cd8      	adds	r0, r3, #3
 800ca4a:	db02      	blt.n	800ca52 <_printf_float+0x11e>
 800ca4c:	6862      	ldr	r2, [r4, #4]
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	dd47      	ble.n	800cae2 <_printf_float+0x1ae>
 800ca52:	f1aa 0a02 	sub.w	sl, sl, #2
 800ca56:	fa5f fa8a 	uxtb.w	sl, sl
 800ca5a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ca5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca60:	d824      	bhi.n	800caac <_printf_float+0x178>
 800ca62:	3901      	subs	r1, #1
 800ca64:	4652      	mov	r2, sl
 800ca66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ca6a:	9109      	str	r1, [sp, #36]	; 0x24
 800ca6c:	f7ff ff2f 	bl	800c8ce <__exponent>
 800ca70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca72:	1813      	adds	r3, r2, r0
 800ca74:	2a01      	cmp	r2, #1
 800ca76:	4681      	mov	r9, r0
 800ca78:	6123      	str	r3, [r4, #16]
 800ca7a:	dc02      	bgt.n	800ca82 <_printf_float+0x14e>
 800ca7c:	6822      	ldr	r2, [r4, #0]
 800ca7e:	07d1      	lsls	r1, r2, #31
 800ca80:	d501      	bpl.n	800ca86 <_printf_float+0x152>
 800ca82:	3301      	adds	r3, #1
 800ca84:	6123      	str	r3, [r4, #16]
 800ca86:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d0a5      	beq.n	800c9da <_printf_float+0xa6>
 800ca8e:	232d      	movs	r3, #45	; 0x2d
 800ca90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca94:	e7a1      	b.n	800c9da <_printf_float+0xa6>
 800ca96:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ca9a:	f000 8177 	beq.w	800cd8c <_printf_float+0x458>
 800ca9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800caa2:	d1bb      	bne.n	800ca1c <_printf_float+0xe8>
 800caa4:	2900      	cmp	r1, #0
 800caa6:	d1b9      	bne.n	800ca1c <_printf_float+0xe8>
 800caa8:	2301      	movs	r3, #1
 800caaa:	e7b6      	b.n	800ca1a <_printf_float+0xe6>
 800caac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800cab0:	d119      	bne.n	800cae6 <_printf_float+0x1b2>
 800cab2:	2900      	cmp	r1, #0
 800cab4:	6863      	ldr	r3, [r4, #4]
 800cab6:	dd0c      	ble.n	800cad2 <_printf_float+0x19e>
 800cab8:	6121      	str	r1, [r4, #16]
 800caba:	b913      	cbnz	r3, 800cac2 <_printf_float+0x18e>
 800cabc:	6822      	ldr	r2, [r4, #0]
 800cabe:	07d2      	lsls	r2, r2, #31
 800cac0:	d502      	bpl.n	800cac8 <_printf_float+0x194>
 800cac2:	3301      	adds	r3, #1
 800cac4:	440b      	add	r3, r1
 800cac6:	6123      	str	r3, [r4, #16]
 800cac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caca:	65a3      	str	r3, [r4, #88]	; 0x58
 800cacc:	f04f 0900 	mov.w	r9, #0
 800cad0:	e7d9      	b.n	800ca86 <_printf_float+0x152>
 800cad2:	b913      	cbnz	r3, 800cada <_printf_float+0x1a6>
 800cad4:	6822      	ldr	r2, [r4, #0]
 800cad6:	07d0      	lsls	r0, r2, #31
 800cad8:	d501      	bpl.n	800cade <_printf_float+0x1aa>
 800cada:	3302      	adds	r3, #2
 800cadc:	e7f3      	b.n	800cac6 <_printf_float+0x192>
 800cade:	2301      	movs	r3, #1
 800cae0:	e7f1      	b.n	800cac6 <_printf_float+0x192>
 800cae2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800cae6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800caea:	4293      	cmp	r3, r2
 800caec:	db05      	blt.n	800cafa <_printf_float+0x1c6>
 800caee:	6822      	ldr	r2, [r4, #0]
 800caf0:	6123      	str	r3, [r4, #16]
 800caf2:	07d1      	lsls	r1, r2, #31
 800caf4:	d5e8      	bpl.n	800cac8 <_printf_float+0x194>
 800caf6:	3301      	adds	r3, #1
 800caf8:	e7e5      	b.n	800cac6 <_printf_float+0x192>
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	bfd4      	ite	le
 800cafe:	f1c3 0302 	rsble	r3, r3, #2
 800cb02:	2301      	movgt	r3, #1
 800cb04:	4413      	add	r3, r2
 800cb06:	e7de      	b.n	800cac6 <_printf_float+0x192>
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	055a      	lsls	r2, r3, #21
 800cb0c:	d407      	bmi.n	800cb1e <_printf_float+0x1ea>
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	4642      	mov	r2, r8
 800cb12:	4631      	mov	r1, r6
 800cb14:	4628      	mov	r0, r5
 800cb16:	47b8      	blx	r7
 800cb18:	3001      	adds	r0, #1
 800cb1a:	d12b      	bne.n	800cb74 <_printf_float+0x240>
 800cb1c:	e767      	b.n	800c9ee <_printf_float+0xba>
 800cb1e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cb22:	f240 80dc 	bls.w	800ccde <_printf_float+0x3aa>
 800cb26:	2200      	movs	r2, #0
 800cb28:	2300      	movs	r3, #0
 800cb2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb2e:	f7f3 ffdb 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb32:	2800      	cmp	r0, #0
 800cb34:	d033      	beq.n	800cb9e <_printf_float+0x26a>
 800cb36:	2301      	movs	r3, #1
 800cb38:	4a41      	ldr	r2, [pc, #260]	; (800cc40 <_printf_float+0x30c>)
 800cb3a:	4631      	mov	r1, r6
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	47b8      	blx	r7
 800cb40:	3001      	adds	r0, #1
 800cb42:	f43f af54 	beq.w	800c9ee <_printf_float+0xba>
 800cb46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	db02      	blt.n	800cb54 <_printf_float+0x220>
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	07d8      	lsls	r0, r3, #31
 800cb52:	d50f      	bpl.n	800cb74 <_printf_float+0x240>
 800cb54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb58:	4631      	mov	r1, r6
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	47b8      	blx	r7
 800cb5e:	3001      	adds	r0, #1
 800cb60:	f43f af45 	beq.w	800c9ee <_printf_float+0xba>
 800cb64:	f04f 0800 	mov.w	r8, #0
 800cb68:	f104 091a 	add.w	r9, r4, #26
 800cb6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb6e:	3b01      	subs	r3, #1
 800cb70:	4543      	cmp	r3, r8
 800cb72:	dc09      	bgt.n	800cb88 <_printf_float+0x254>
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	079b      	lsls	r3, r3, #30
 800cb78:	f100 8103 	bmi.w	800cd82 <_printf_float+0x44e>
 800cb7c:	68e0      	ldr	r0, [r4, #12]
 800cb7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb80:	4298      	cmp	r0, r3
 800cb82:	bfb8      	it	lt
 800cb84:	4618      	movlt	r0, r3
 800cb86:	e734      	b.n	800c9f2 <_printf_float+0xbe>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	464a      	mov	r2, r9
 800cb8c:	4631      	mov	r1, r6
 800cb8e:	4628      	mov	r0, r5
 800cb90:	47b8      	blx	r7
 800cb92:	3001      	adds	r0, #1
 800cb94:	f43f af2b 	beq.w	800c9ee <_printf_float+0xba>
 800cb98:	f108 0801 	add.w	r8, r8, #1
 800cb9c:	e7e6      	b.n	800cb6c <_printf_float+0x238>
 800cb9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	dc2b      	bgt.n	800cbfc <_printf_float+0x2c8>
 800cba4:	2301      	movs	r3, #1
 800cba6:	4a26      	ldr	r2, [pc, #152]	; (800cc40 <_printf_float+0x30c>)
 800cba8:	4631      	mov	r1, r6
 800cbaa:	4628      	mov	r0, r5
 800cbac:	47b8      	blx	r7
 800cbae:	3001      	adds	r0, #1
 800cbb0:	f43f af1d 	beq.w	800c9ee <_printf_float+0xba>
 800cbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb6:	b923      	cbnz	r3, 800cbc2 <_printf_float+0x28e>
 800cbb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbba:	b913      	cbnz	r3, 800cbc2 <_printf_float+0x28e>
 800cbbc:	6823      	ldr	r3, [r4, #0]
 800cbbe:	07d9      	lsls	r1, r3, #31
 800cbc0:	d5d8      	bpl.n	800cb74 <_printf_float+0x240>
 800cbc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	4628      	mov	r0, r5
 800cbca:	47b8      	blx	r7
 800cbcc:	3001      	adds	r0, #1
 800cbce:	f43f af0e 	beq.w	800c9ee <_printf_float+0xba>
 800cbd2:	f04f 0900 	mov.w	r9, #0
 800cbd6:	f104 0a1a 	add.w	sl, r4, #26
 800cbda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbdc:	425b      	negs	r3, r3
 800cbde:	454b      	cmp	r3, r9
 800cbe0:	dc01      	bgt.n	800cbe6 <_printf_float+0x2b2>
 800cbe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbe4:	e794      	b.n	800cb10 <_printf_float+0x1dc>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	4652      	mov	r2, sl
 800cbea:	4631      	mov	r1, r6
 800cbec:	4628      	mov	r0, r5
 800cbee:	47b8      	blx	r7
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	f43f aefc 	beq.w	800c9ee <_printf_float+0xba>
 800cbf6:	f109 0901 	add.w	r9, r9, #1
 800cbfa:	e7ee      	b.n	800cbda <_printf_float+0x2a6>
 800cbfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc00:	429a      	cmp	r2, r3
 800cc02:	bfa8      	it	ge
 800cc04:	461a      	movge	r2, r3
 800cc06:	2a00      	cmp	r2, #0
 800cc08:	4691      	mov	r9, r2
 800cc0a:	dd07      	ble.n	800cc1c <_printf_float+0x2e8>
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	4631      	mov	r1, r6
 800cc10:	4642      	mov	r2, r8
 800cc12:	4628      	mov	r0, r5
 800cc14:	47b8      	blx	r7
 800cc16:	3001      	adds	r0, #1
 800cc18:	f43f aee9 	beq.w	800c9ee <_printf_float+0xba>
 800cc1c:	f104 031a 	add.w	r3, r4, #26
 800cc20:	f04f 0b00 	mov.w	fp, #0
 800cc24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc28:	9306      	str	r3, [sp, #24]
 800cc2a:	e015      	b.n	800cc58 <_printf_float+0x324>
 800cc2c:	7fefffff 	.word	0x7fefffff
 800cc30:	0800f040 	.word	0x0800f040
 800cc34:	0800f03c 	.word	0x0800f03c
 800cc38:	0800f048 	.word	0x0800f048
 800cc3c:	0800f044 	.word	0x0800f044
 800cc40:	0800f04c 	.word	0x0800f04c
 800cc44:	2301      	movs	r3, #1
 800cc46:	9a06      	ldr	r2, [sp, #24]
 800cc48:	4631      	mov	r1, r6
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	47b8      	blx	r7
 800cc4e:	3001      	adds	r0, #1
 800cc50:	f43f aecd 	beq.w	800c9ee <_printf_float+0xba>
 800cc54:	f10b 0b01 	add.w	fp, fp, #1
 800cc58:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800cc5c:	ebaa 0309 	sub.w	r3, sl, r9
 800cc60:	455b      	cmp	r3, fp
 800cc62:	dcef      	bgt.n	800cc44 <_printf_float+0x310>
 800cc64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	44d0      	add	r8, sl
 800cc6c:	db15      	blt.n	800cc9a <_printf_float+0x366>
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	07da      	lsls	r2, r3, #31
 800cc72:	d412      	bmi.n	800cc9a <_printf_float+0x366>
 800cc74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc78:	eba3 020a 	sub.w	r2, r3, sl
 800cc7c:	eba3 0a01 	sub.w	sl, r3, r1
 800cc80:	4592      	cmp	sl, r2
 800cc82:	bfa8      	it	ge
 800cc84:	4692      	movge	sl, r2
 800cc86:	f1ba 0f00 	cmp.w	sl, #0
 800cc8a:	dc0e      	bgt.n	800ccaa <_printf_float+0x376>
 800cc8c:	f04f 0800 	mov.w	r8, #0
 800cc90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc94:	f104 091a 	add.w	r9, r4, #26
 800cc98:	e019      	b.n	800ccce <_printf_float+0x39a>
 800cc9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc9e:	4631      	mov	r1, r6
 800cca0:	4628      	mov	r0, r5
 800cca2:	47b8      	blx	r7
 800cca4:	3001      	adds	r0, #1
 800cca6:	d1e5      	bne.n	800cc74 <_printf_float+0x340>
 800cca8:	e6a1      	b.n	800c9ee <_printf_float+0xba>
 800ccaa:	4653      	mov	r3, sl
 800ccac:	4642      	mov	r2, r8
 800ccae:	4631      	mov	r1, r6
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	47b8      	blx	r7
 800ccb4:	3001      	adds	r0, #1
 800ccb6:	d1e9      	bne.n	800cc8c <_printf_float+0x358>
 800ccb8:	e699      	b.n	800c9ee <_printf_float+0xba>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	464a      	mov	r2, r9
 800ccbe:	4631      	mov	r1, r6
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	47b8      	blx	r7
 800ccc4:	3001      	adds	r0, #1
 800ccc6:	f43f ae92 	beq.w	800c9ee <_printf_float+0xba>
 800ccca:	f108 0801 	add.w	r8, r8, #1
 800ccce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccd2:	1a9b      	subs	r3, r3, r2
 800ccd4:	eba3 030a 	sub.w	r3, r3, sl
 800ccd8:	4543      	cmp	r3, r8
 800ccda:	dcee      	bgt.n	800ccba <_printf_float+0x386>
 800ccdc:	e74a      	b.n	800cb74 <_printf_float+0x240>
 800ccde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cce0:	2a01      	cmp	r2, #1
 800cce2:	dc01      	bgt.n	800cce8 <_printf_float+0x3b4>
 800cce4:	07db      	lsls	r3, r3, #31
 800cce6:	d53a      	bpl.n	800cd5e <_printf_float+0x42a>
 800cce8:	2301      	movs	r3, #1
 800ccea:	4642      	mov	r2, r8
 800ccec:	4631      	mov	r1, r6
 800ccee:	4628      	mov	r0, r5
 800ccf0:	47b8      	blx	r7
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	f43f ae7b 	beq.w	800c9ee <_printf_float+0xba>
 800ccf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccfc:	4631      	mov	r1, r6
 800ccfe:	4628      	mov	r0, r5
 800cd00:	47b8      	blx	r7
 800cd02:	3001      	adds	r0, #1
 800cd04:	f108 0801 	add.w	r8, r8, #1
 800cd08:	f43f ae71 	beq.w	800c9ee <_printf_float+0xba>
 800cd0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f103 3aff 	add.w	sl, r3, #4294967295
 800cd14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd18:	2300      	movs	r3, #0
 800cd1a:	f7f3 fee5 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd1e:	b9c8      	cbnz	r0, 800cd54 <_printf_float+0x420>
 800cd20:	4653      	mov	r3, sl
 800cd22:	4642      	mov	r2, r8
 800cd24:	4631      	mov	r1, r6
 800cd26:	4628      	mov	r0, r5
 800cd28:	47b8      	blx	r7
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	d10e      	bne.n	800cd4c <_printf_float+0x418>
 800cd2e:	e65e      	b.n	800c9ee <_printf_float+0xba>
 800cd30:	2301      	movs	r3, #1
 800cd32:	4652      	mov	r2, sl
 800cd34:	4631      	mov	r1, r6
 800cd36:	4628      	mov	r0, r5
 800cd38:	47b8      	blx	r7
 800cd3a:	3001      	adds	r0, #1
 800cd3c:	f43f ae57 	beq.w	800c9ee <_printf_float+0xba>
 800cd40:	f108 0801 	add.w	r8, r8, #1
 800cd44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd46:	3b01      	subs	r3, #1
 800cd48:	4543      	cmp	r3, r8
 800cd4a:	dcf1      	bgt.n	800cd30 <_printf_float+0x3fc>
 800cd4c:	464b      	mov	r3, r9
 800cd4e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cd52:	e6de      	b.n	800cb12 <_printf_float+0x1de>
 800cd54:	f04f 0800 	mov.w	r8, #0
 800cd58:	f104 0a1a 	add.w	sl, r4, #26
 800cd5c:	e7f2      	b.n	800cd44 <_printf_float+0x410>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e7df      	b.n	800cd22 <_printf_float+0x3ee>
 800cd62:	2301      	movs	r3, #1
 800cd64:	464a      	mov	r2, r9
 800cd66:	4631      	mov	r1, r6
 800cd68:	4628      	mov	r0, r5
 800cd6a:	47b8      	blx	r7
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	f43f ae3e 	beq.w	800c9ee <_printf_float+0xba>
 800cd72:	f108 0801 	add.w	r8, r8, #1
 800cd76:	68e3      	ldr	r3, [r4, #12]
 800cd78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd7a:	1a9b      	subs	r3, r3, r2
 800cd7c:	4543      	cmp	r3, r8
 800cd7e:	dcf0      	bgt.n	800cd62 <_printf_float+0x42e>
 800cd80:	e6fc      	b.n	800cb7c <_printf_float+0x248>
 800cd82:	f04f 0800 	mov.w	r8, #0
 800cd86:	f104 0919 	add.w	r9, r4, #25
 800cd8a:	e7f4      	b.n	800cd76 <_printf_float+0x442>
 800cd8c:	2900      	cmp	r1, #0
 800cd8e:	f43f ae8b 	beq.w	800caa8 <_printf_float+0x174>
 800cd92:	2300      	movs	r3, #0
 800cd94:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cd98:	ab09      	add	r3, sp, #36	; 0x24
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	ec49 8b10 	vmov	d0, r8, r9
 800cda0:	6022      	str	r2, [r4, #0]
 800cda2:	f8cd a004 	str.w	sl, [sp, #4]
 800cda6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f7ff fd2e 	bl	800c80c <__cvt>
 800cdb0:	4680      	mov	r8, r0
 800cdb2:	e648      	b.n	800ca46 <_printf_float+0x112>

0800cdb4 <_printf_common>:
 800cdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdb8:	4691      	mov	r9, r2
 800cdba:	461f      	mov	r7, r3
 800cdbc:	688a      	ldr	r2, [r1, #8]
 800cdbe:	690b      	ldr	r3, [r1, #16]
 800cdc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	bfb8      	it	lt
 800cdc8:	4613      	movlt	r3, r2
 800cdca:	f8c9 3000 	str.w	r3, [r9]
 800cdce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdd2:	4606      	mov	r6, r0
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	b112      	cbz	r2, 800cdde <_printf_common+0x2a>
 800cdd8:	3301      	adds	r3, #1
 800cdda:	f8c9 3000 	str.w	r3, [r9]
 800cdde:	6823      	ldr	r3, [r4, #0]
 800cde0:	0699      	lsls	r1, r3, #26
 800cde2:	bf42      	ittt	mi
 800cde4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cde8:	3302      	addmi	r3, #2
 800cdea:	f8c9 3000 	strmi.w	r3, [r9]
 800cdee:	6825      	ldr	r5, [r4, #0]
 800cdf0:	f015 0506 	ands.w	r5, r5, #6
 800cdf4:	d107      	bne.n	800ce06 <_printf_common+0x52>
 800cdf6:	f104 0a19 	add.w	sl, r4, #25
 800cdfa:	68e3      	ldr	r3, [r4, #12]
 800cdfc:	f8d9 2000 	ldr.w	r2, [r9]
 800ce00:	1a9b      	subs	r3, r3, r2
 800ce02:	42ab      	cmp	r3, r5
 800ce04:	dc28      	bgt.n	800ce58 <_printf_common+0xa4>
 800ce06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ce0a:	6822      	ldr	r2, [r4, #0]
 800ce0c:	3300      	adds	r3, #0
 800ce0e:	bf18      	it	ne
 800ce10:	2301      	movne	r3, #1
 800ce12:	0692      	lsls	r2, r2, #26
 800ce14:	d42d      	bmi.n	800ce72 <_printf_common+0xbe>
 800ce16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce1a:	4639      	mov	r1, r7
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	47c0      	blx	r8
 800ce20:	3001      	adds	r0, #1
 800ce22:	d020      	beq.n	800ce66 <_printf_common+0xb2>
 800ce24:	6823      	ldr	r3, [r4, #0]
 800ce26:	68e5      	ldr	r5, [r4, #12]
 800ce28:	f8d9 2000 	ldr.w	r2, [r9]
 800ce2c:	f003 0306 	and.w	r3, r3, #6
 800ce30:	2b04      	cmp	r3, #4
 800ce32:	bf08      	it	eq
 800ce34:	1aad      	subeq	r5, r5, r2
 800ce36:	68a3      	ldr	r3, [r4, #8]
 800ce38:	6922      	ldr	r2, [r4, #16]
 800ce3a:	bf0c      	ite	eq
 800ce3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce40:	2500      	movne	r5, #0
 800ce42:	4293      	cmp	r3, r2
 800ce44:	bfc4      	itt	gt
 800ce46:	1a9b      	subgt	r3, r3, r2
 800ce48:	18ed      	addgt	r5, r5, r3
 800ce4a:	f04f 0900 	mov.w	r9, #0
 800ce4e:	341a      	adds	r4, #26
 800ce50:	454d      	cmp	r5, r9
 800ce52:	d11a      	bne.n	800ce8a <_printf_common+0xd6>
 800ce54:	2000      	movs	r0, #0
 800ce56:	e008      	b.n	800ce6a <_printf_common+0xb6>
 800ce58:	2301      	movs	r3, #1
 800ce5a:	4652      	mov	r2, sl
 800ce5c:	4639      	mov	r1, r7
 800ce5e:	4630      	mov	r0, r6
 800ce60:	47c0      	blx	r8
 800ce62:	3001      	adds	r0, #1
 800ce64:	d103      	bne.n	800ce6e <_printf_common+0xba>
 800ce66:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce6e:	3501      	adds	r5, #1
 800ce70:	e7c3      	b.n	800cdfa <_printf_common+0x46>
 800ce72:	18e1      	adds	r1, r4, r3
 800ce74:	1c5a      	adds	r2, r3, #1
 800ce76:	2030      	movs	r0, #48	; 0x30
 800ce78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce7c:	4422      	add	r2, r4
 800ce7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce86:	3302      	adds	r3, #2
 800ce88:	e7c5      	b.n	800ce16 <_printf_common+0x62>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	4622      	mov	r2, r4
 800ce8e:	4639      	mov	r1, r7
 800ce90:	4630      	mov	r0, r6
 800ce92:	47c0      	blx	r8
 800ce94:	3001      	adds	r0, #1
 800ce96:	d0e6      	beq.n	800ce66 <_printf_common+0xb2>
 800ce98:	f109 0901 	add.w	r9, r9, #1
 800ce9c:	e7d8      	b.n	800ce50 <_printf_common+0x9c>
	...

0800cea0 <_printf_i>:
 800cea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cea4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cea8:	460c      	mov	r4, r1
 800ceaa:	7e09      	ldrb	r1, [r1, #24]
 800ceac:	b085      	sub	sp, #20
 800ceae:	296e      	cmp	r1, #110	; 0x6e
 800ceb0:	4617      	mov	r7, r2
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	4698      	mov	r8, r3
 800ceb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ceb8:	f000 80b3 	beq.w	800d022 <_printf_i+0x182>
 800cebc:	d822      	bhi.n	800cf04 <_printf_i+0x64>
 800cebe:	2963      	cmp	r1, #99	; 0x63
 800cec0:	d036      	beq.n	800cf30 <_printf_i+0x90>
 800cec2:	d80a      	bhi.n	800ceda <_printf_i+0x3a>
 800cec4:	2900      	cmp	r1, #0
 800cec6:	f000 80b9 	beq.w	800d03c <_printf_i+0x19c>
 800ceca:	2958      	cmp	r1, #88	; 0x58
 800cecc:	f000 8083 	beq.w	800cfd6 <_printf_i+0x136>
 800ced0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ced4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ced8:	e032      	b.n	800cf40 <_printf_i+0xa0>
 800ceda:	2964      	cmp	r1, #100	; 0x64
 800cedc:	d001      	beq.n	800cee2 <_printf_i+0x42>
 800cede:	2969      	cmp	r1, #105	; 0x69
 800cee0:	d1f6      	bne.n	800ced0 <_printf_i+0x30>
 800cee2:	6820      	ldr	r0, [r4, #0]
 800cee4:	6813      	ldr	r3, [r2, #0]
 800cee6:	0605      	lsls	r5, r0, #24
 800cee8:	f103 0104 	add.w	r1, r3, #4
 800ceec:	d52a      	bpl.n	800cf44 <_printf_i+0xa4>
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	6011      	str	r1, [r2, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	da03      	bge.n	800cefe <_printf_i+0x5e>
 800cef6:	222d      	movs	r2, #45	; 0x2d
 800cef8:	425b      	negs	r3, r3
 800cefa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cefe:	486f      	ldr	r0, [pc, #444]	; (800d0bc <_printf_i+0x21c>)
 800cf00:	220a      	movs	r2, #10
 800cf02:	e039      	b.n	800cf78 <_printf_i+0xd8>
 800cf04:	2973      	cmp	r1, #115	; 0x73
 800cf06:	f000 809d 	beq.w	800d044 <_printf_i+0x1a4>
 800cf0a:	d808      	bhi.n	800cf1e <_printf_i+0x7e>
 800cf0c:	296f      	cmp	r1, #111	; 0x6f
 800cf0e:	d020      	beq.n	800cf52 <_printf_i+0xb2>
 800cf10:	2970      	cmp	r1, #112	; 0x70
 800cf12:	d1dd      	bne.n	800ced0 <_printf_i+0x30>
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	f043 0320 	orr.w	r3, r3, #32
 800cf1a:	6023      	str	r3, [r4, #0]
 800cf1c:	e003      	b.n	800cf26 <_printf_i+0x86>
 800cf1e:	2975      	cmp	r1, #117	; 0x75
 800cf20:	d017      	beq.n	800cf52 <_printf_i+0xb2>
 800cf22:	2978      	cmp	r1, #120	; 0x78
 800cf24:	d1d4      	bne.n	800ced0 <_printf_i+0x30>
 800cf26:	2378      	movs	r3, #120	; 0x78
 800cf28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf2c:	4864      	ldr	r0, [pc, #400]	; (800d0c0 <_printf_i+0x220>)
 800cf2e:	e055      	b.n	800cfdc <_printf_i+0x13c>
 800cf30:	6813      	ldr	r3, [r2, #0]
 800cf32:	1d19      	adds	r1, r3, #4
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	6011      	str	r1, [r2, #0]
 800cf38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf40:	2301      	movs	r3, #1
 800cf42:	e08c      	b.n	800d05e <_printf_i+0x1be>
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	6011      	str	r1, [r2, #0]
 800cf48:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf4c:	bf18      	it	ne
 800cf4e:	b21b      	sxthne	r3, r3
 800cf50:	e7cf      	b.n	800cef2 <_printf_i+0x52>
 800cf52:	6813      	ldr	r3, [r2, #0]
 800cf54:	6825      	ldr	r5, [r4, #0]
 800cf56:	1d18      	adds	r0, r3, #4
 800cf58:	6010      	str	r0, [r2, #0]
 800cf5a:	0628      	lsls	r0, r5, #24
 800cf5c:	d501      	bpl.n	800cf62 <_printf_i+0xc2>
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	e002      	b.n	800cf68 <_printf_i+0xc8>
 800cf62:	0668      	lsls	r0, r5, #25
 800cf64:	d5fb      	bpl.n	800cf5e <_printf_i+0xbe>
 800cf66:	881b      	ldrh	r3, [r3, #0]
 800cf68:	4854      	ldr	r0, [pc, #336]	; (800d0bc <_printf_i+0x21c>)
 800cf6a:	296f      	cmp	r1, #111	; 0x6f
 800cf6c:	bf14      	ite	ne
 800cf6e:	220a      	movne	r2, #10
 800cf70:	2208      	moveq	r2, #8
 800cf72:	2100      	movs	r1, #0
 800cf74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf78:	6865      	ldr	r5, [r4, #4]
 800cf7a:	60a5      	str	r5, [r4, #8]
 800cf7c:	2d00      	cmp	r5, #0
 800cf7e:	f2c0 8095 	blt.w	800d0ac <_printf_i+0x20c>
 800cf82:	6821      	ldr	r1, [r4, #0]
 800cf84:	f021 0104 	bic.w	r1, r1, #4
 800cf88:	6021      	str	r1, [r4, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d13d      	bne.n	800d00a <_printf_i+0x16a>
 800cf8e:	2d00      	cmp	r5, #0
 800cf90:	f040 808e 	bne.w	800d0b0 <_printf_i+0x210>
 800cf94:	4665      	mov	r5, ip
 800cf96:	2a08      	cmp	r2, #8
 800cf98:	d10b      	bne.n	800cfb2 <_printf_i+0x112>
 800cf9a:	6823      	ldr	r3, [r4, #0]
 800cf9c:	07db      	lsls	r3, r3, #31
 800cf9e:	d508      	bpl.n	800cfb2 <_printf_i+0x112>
 800cfa0:	6923      	ldr	r3, [r4, #16]
 800cfa2:	6862      	ldr	r2, [r4, #4]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	bfde      	ittt	le
 800cfa8:	2330      	movle	r3, #48	; 0x30
 800cfaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cfae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cfb2:	ebac 0305 	sub.w	r3, ip, r5
 800cfb6:	6123      	str	r3, [r4, #16]
 800cfb8:	f8cd 8000 	str.w	r8, [sp]
 800cfbc:	463b      	mov	r3, r7
 800cfbe:	aa03      	add	r2, sp, #12
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f7ff fef6 	bl	800cdb4 <_printf_common>
 800cfc8:	3001      	adds	r0, #1
 800cfca:	d14d      	bne.n	800d068 <_printf_i+0x1c8>
 800cfcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd0:	b005      	add	sp, #20
 800cfd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfd6:	4839      	ldr	r0, [pc, #228]	; (800d0bc <_printf_i+0x21c>)
 800cfd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cfdc:	6813      	ldr	r3, [r2, #0]
 800cfde:	6821      	ldr	r1, [r4, #0]
 800cfe0:	1d1d      	adds	r5, r3, #4
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6015      	str	r5, [r2, #0]
 800cfe6:	060a      	lsls	r2, r1, #24
 800cfe8:	d50b      	bpl.n	800d002 <_printf_i+0x162>
 800cfea:	07ca      	lsls	r2, r1, #31
 800cfec:	bf44      	itt	mi
 800cfee:	f041 0120 	orrmi.w	r1, r1, #32
 800cff2:	6021      	strmi	r1, [r4, #0]
 800cff4:	b91b      	cbnz	r3, 800cffe <_printf_i+0x15e>
 800cff6:	6822      	ldr	r2, [r4, #0]
 800cff8:	f022 0220 	bic.w	r2, r2, #32
 800cffc:	6022      	str	r2, [r4, #0]
 800cffe:	2210      	movs	r2, #16
 800d000:	e7b7      	b.n	800cf72 <_printf_i+0xd2>
 800d002:	064d      	lsls	r5, r1, #25
 800d004:	bf48      	it	mi
 800d006:	b29b      	uxthmi	r3, r3
 800d008:	e7ef      	b.n	800cfea <_printf_i+0x14a>
 800d00a:	4665      	mov	r5, ip
 800d00c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d010:	fb02 3311 	mls	r3, r2, r1, r3
 800d014:	5cc3      	ldrb	r3, [r0, r3]
 800d016:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d01a:	460b      	mov	r3, r1
 800d01c:	2900      	cmp	r1, #0
 800d01e:	d1f5      	bne.n	800d00c <_printf_i+0x16c>
 800d020:	e7b9      	b.n	800cf96 <_printf_i+0xf6>
 800d022:	6813      	ldr	r3, [r2, #0]
 800d024:	6825      	ldr	r5, [r4, #0]
 800d026:	6961      	ldr	r1, [r4, #20]
 800d028:	1d18      	adds	r0, r3, #4
 800d02a:	6010      	str	r0, [r2, #0]
 800d02c:	0628      	lsls	r0, r5, #24
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	d501      	bpl.n	800d036 <_printf_i+0x196>
 800d032:	6019      	str	r1, [r3, #0]
 800d034:	e002      	b.n	800d03c <_printf_i+0x19c>
 800d036:	066a      	lsls	r2, r5, #25
 800d038:	d5fb      	bpl.n	800d032 <_printf_i+0x192>
 800d03a:	8019      	strh	r1, [r3, #0]
 800d03c:	2300      	movs	r3, #0
 800d03e:	6123      	str	r3, [r4, #16]
 800d040:	4665      	mov	r5, ip
 800d042:	e7b9      	b.n	800cfb8 <_printf_i+0x118>
 800d044:	6813      	ldr	r3, [r2, #0]
 800d046:	1d19      	adds	r1, r3, #4
 800d048:	6011      	str	r1, [r2, #0]
 800d04a:	681d      	ldr	r5, [r3, #0]
 800d04c:	6862      	ldr	r2, [r4, #4]
 800d04e:	2100      	movs	r1, #0
 800d050:	4628      	mov	r0, r5
 800d052:	f7f3 f8d5 	bl	8000200 <memchr>
 800d056:	b108      	cbz	r0, 800d05c <_printf_i+0x1bc>
 800d058:	1b40      	subs	r0, r0, r5
 800d05a:	6060      	str	r0, [r4, #4]
 800d05c:	6863      	ldr	r3, [r4, #4]
 800d05e:	6123      	str	r3, [r4, #16]
 800d060:	2300      	movs	r3, #0
 800d062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d066:	e7a7      	b.n	800cfb8 <_printf_i+0x118>
 800d068:	6923      	ldr	r3, [r4, #16]
 800d06a:	462a      	mov	r2, r5
 800d06c:	4639      	mov	r1, r7
 800d06e:	4630      	mov	r0, r6
 800d070:	47c0      	blx	r8
 800d072:	3001      	adds	r0, #1
 800d074:	d0aa      	beq.n	800cfcc <_printf_i+0x12c>
 800d076:	6823      	ldr	r3, [r4, #0]
 800d078:	079b      	lsls	r3, r3, #30
 800d07a:	d413      	bmi.n	800d0a4 <_printf_i+0x204>
 800d07c:	68e0      	ldr	r0, [r4, #12]
 800d07e:	9b03      	ldr	r3, [sp, #12]
 800d080:	4298      	cmp	r0, r3
 800d082:	bfb8      	it	lt
 800d084:	4618      	movlt	r0, r3
 800d086:	e7a3      	b.n	800cfd0 <_printf_i+0x130>
 800d088:	2301      	movs	r3, #1
 800d08a:	464a      	mov	r2, r9
 800d08c:	4639      	mov	r1, r7
 800d08e:	4630      	mov	r0, r6
 800d090:	47c0      	blx	r8
 800d092:	3001      	adds	r0, #1
 800d094:	d09a      	beq.n	800cfcc <_printf_i+0x12c>
 800d096:	3501      	adds	r5, #1
 800d098:	68e3      	ldr	r3, [r4, #12]
 800d09a:	9a03      	ldr	r2, [sp, #12]
 800d09c:	1a9b      	subs	r3, r3, r2
 800d09e:	42ab      	cmp	r3, r5
 800d0a0:	dcf2      	bgt.n	800d088 <_printf_i+0x1e8>
 800d0a2:	e7eb      	b.n	800d07c <_printf_i+0x1dc>
 800d0a4:	2500      	movs	r5, #0
 800d0a6:	f104 0919 	add.w	r9, r4, #25
 800d0aa:	e7f5      	b.n	800d098 <_printf_i+0x1f8>
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d1ac      	bne.n	800d00a <_printf_i+0x16a>
 800d0b0:	7803      	ldrb	r3, [r0, #0]
 800d0b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0ba:	e76c      	b.n	800cf96 <_printf_i+0xf6>
 800d0bc:	0800f04e 	.word	0x0800f04e
 800d0c0:	0800f05f 	.word	0x0800f05f

0800d0c4 <iprintf>:
 800d0c4:	b40f      	push	{r0, r1, r2, r3}
 800d0c6:	4b0a      	ldr	r3, [pc, #40]	; (800d0f0 <iprintf+0x2c>)
 800d0c8:	b513      	push	{r0, r1, r4, lr}
 800d0ca:	681c      	ldr	r4, [r3, #0]
 800d0cc:	b124      	cbz	r4, 800d0d8 <iprintf+0x14>
 800d0ce:	69a3      	ldr	r3, [r4, #24]
 800d0d0:	b913      	cbnz	r3, 800d0d8 <iprintf+0x14>
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f001 f924 	bl	800e320 <__sinit>
 800d0d8:	ab05      	add	r3, sp, #20
 800d0da:	9a04      	ldr	r2, [sp, #16]
 800d0dc:	68a1      	ldr	r1, [r4, #8]
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f001 fd2f 	bl	800eb44 <_vfiprintf_r>
 800d0e6:	b002      	add	sp, #8
 800d0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0ec:	b004      	add	sp, #16
 800d0ee:	4770      	bx	lr
 800d0f0:	2000006c 	.word	0x2000006c

0800d0f4 <_puts_r>:
 800d0f4:	b570      	push	{r4, r5, r6, lr}
 800d0f6:	460e      	mov	r6, r1
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	b118      	cbz	r0, 800d104 <_puts_r+0x10>
 800d0fc:	6983      	ldr	r3, [r0, #24]
 800d0fe:	b90b      	cbnz	r3, 800d104 <_puts_r+0x10>
 800d100:	f001 f90e 	bl	800e320 <__sinit>
 800d104:	69ab      	ldr	r3, [r5, #24]
 800d106:	68ac      	ldr	r4, [r5, #8]
 800d108:	b913      	cbnz	r3, 800d110 <_puts_r+0x1c>
 800d10a:	4628      	mov	r0, r5
 800d10c:	f001 f908 	bl	800e320 <__sinit>
 800d110:	4b23      	ldr	r3, [pc, #140]	; (800d1a0 <_puts_r+0xac>)
 800d112:	429c      	cmp	r4, r3
 800d114:	d117      	bne.n	800d146 <_puts_r+0x52>
 800d116:	686c      	ldr	r4, [r5, #4]
 800d118:	89a3      	ldrh	r3, [r4, #12]
 800d11a:	071b      	lsls	r3, r3, #28
 800d11c:	d51d      	bpl.n	800d15a <_puts_r+0x66>
 800d11e:	6923      	ldr	r3, [r4, #16]
 800d120:	b1db      	cbz	r3, 800d15a <_puts_r+0x66>
 800d122:	3e01      	subs	r6, #1
 800d124:	68a3      	ldr	r3, [r4, #8]
 800d126:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d12a:	3b01      	subs	r3, #1
 800d12c:	60a3      	str	r3, [r4, #8]
 800d12e:	b9e9      	cbnz	r1, 800d16c <_puts_r+0x78>
 800d130:	2b00      	cmp	r3, #0
 800d132:	da2e      	bge.n	800d192 <_puts_r+0x9e>
 800d134:	4622      	mov	r2, r4
 800d136:	210a      	movs	r1, #10
 800d138:	4628      	mov	r0, r5
 800d13a:	f000 f8fd 	bl	800d338 <__swbuf_r>
 800d13e:	3001      	adds	r0, #1
 800d140:	d011      	beq.n	800d166 <_puts_r+0x72>
 800d142:	200a      	movs	r0, #10
 800d144:	e011      	b.n	800d16a <_puts_r+0x76>
 800d146:	4b17      	ldr	r3, [pc, #92]	; (800d1a4 <_puts_r+0xb0>)
 800d148:	429c      	cmp	r4, r3
 800d14a:	d101      	bne.n	800d150 <_puts_r+0x5c>
 800d14c:	68ac      	ldr	r4, [r5, #8]
 800d14e:	e7e3      	b.n	800d118 <_puts_r+0x24>
 800d150:	4b15      	ldr	r3, [pc, #84]	; (800d1a8 <_puts_r+0xb4>)
 800d152:	429c      	cmp	r4, r3
 800d154:	bf08      	it	eq
 800d156:	68ec      	ldreq	r4, [r5, #12]
 800d158:	e7de      	b.n	800d118 <_puts_r+0x24>
 800d15a:	4621      	mov	r1, r4
 800d15c:	4628      	mov	r0, r5
 800d15e:	f000 f93d 	bl	800d3dc <__swsetup_r>
 800d162:	2800      	cmp	r0, #0
 800d164:	d0dd      	beq.n	800d122 <_puts_r+0x2e>
 800d166:	f04f 30ff 	mov.w	r0, #4294967295
 800d16a:	bd70      	pop	{r4, r5, r6, pc}
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	da04      	bge.n	800d17a <_puts_r+0x86>
 800d170:	69a2      	ldr	r2, [r4, #24]
 800d172:	429a      	cmp	r2, r3
 800d174:	dc06      	bgt.n	800d184 <_puts_r+0x90>
 800d176:	290a      	cmp	r1, #10
 800d178:	d004      	beq.n	800d184 <_puts_r+0x90>
 800d17a:	6823      	ldr	r3, [r4, #0]
 800d17c:	1c5a      	adds	r2, r3, #1
 800d17e:	6022      	str	r2, [r4, #0]
 800d180:	7019      	strb	r1, [r3, #0]
 800d182:	e7cf      	b.n	800d124 <_puts_r+0x30>
 800d184:	4622      	mov	r2, r4
 800d186:	4628      	mov	r0, r5
 800d188:	f000 f8d6 	bl	800d338 <__swbuf_r>
 800d18c:	3001      	adds	r0, #1
 800d18e:	d1c9      	bne.n	800d124 <_puts_r+0x30>
 800d190:	e7e9      	b.n	800d166 <_puts_r+0x72>
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	200a      	movs	r0, #10
 800d196:	1c5a      	adds	r2, r3, #1
 800d198:	6022      	str	r2, [r4, #0]
 800d19a:	7018      	strb	r0, [r3, #0]
 800d19c:	e7e5      	b.n	800d16a <_puts_r+0x76>
 800d19e:	bf00      	nop
 800d1a0:	0800f0a0 	.word	0x0800f0a0
 800d1a4:	0800f0c0 	.word	0x0800f0c0
 800d1a8:	0800f080 	.word	0x0800f080

0800d1ac <puts>:
 800d1ac:	4b02      	ldr	r3, [pc, #8]	; (800d1b8 <puts+0xc>)
 800d1ae:	4601      	mov	r1, r0
 800d1b0:	6818      	ldr	r0, [r3, #0]
 800d1b2:	f7ff bf9f 	b.w	800d0f4 <_puts_r>
 800d1b6:	bf00      	nop
 800d1b8:	2000006c 	.word	0x2000006c

0800d1bc <_sbrk_r>:
 800d1bc:	b538      	push	{r3, r4, r5, lr}
 800d1be:	4c06      	ldr	r4, [pc, #24]	; (800d1d8 <_sbrk_r+0x1c>)
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	4605      	mov	r5, r0
 800d1c4:	4608      	mov	r0, r1
 800d1c6:	6023      	str	r3, [r4, #0]
 800d1c8:	f7f4 fc20 	bl	8001a0c <_sbrk>
 800d1cc:	1c43      	adds	r3, r0, #1
 800d1ce:	d102      	bne.n	800d1d6 <_sbrk_r+0x1a>
 800d1d0:	6823      	ldr	r3, [r4, #0]
 800d1d2:	b103      	cbz	r3, 800d1d6 <_sbrk_r+0x1a>
 800d1d4:	602b      	str	r3, [r5, #0]
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	20000bf0 	.word	0x20000bf0

0800d1dc <setvbuf>:
 800d1dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1e0:	461d      	mov	r5, r3
 800d1e2:	4b51      	ldr	r3, [pc, #324]	; (800d328 <setvbuf+0x14c>)
 800d1e4:	681e      	ldr	r6, [r3, #0]
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	460f      	mov	r7, r1
 800d1ea:	4690      	mov	r8, r2
 800d1ec:	b126      	cbz	r6, 800d1f8 <setvbuf+0x1c>
 800d1ee:	69b3      	ldr	r3, [r6, #24]
 800d1f0:	b913      	cbnz	r3, 800d1f8 <setvbuf+0x1c>
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f001 f894 	bl	800e320 <__sinit>
 800d1f8:	4b4c      	ldr	r3, [pc, #304]	; (800d32c <setvbuf+0x150>)
 800d1fa:	429c      	cmp	r4, r3
 800d1fc:	d152      	bne.n	800d2a4 <setvbuf+0xc8>
 800d1fe:	6874      	ldr	r4, [r6, #4]
 800d200:	f1b8 0f02 	cmp.w	r8, #2
 800d204:	d006      	beq.n	800d214 <setvbuf+0x38>
 800d206:	f1b8 0f01 	cmp.w	r8, #1
 800d20a:	f200 8089 	bhi.w	800d320 <setvbuf+0x144>
 800d20e:	2d00      	cmp	r5, #0
 800d210:	f2c0 8086 	blt.w	800d320 <setvbuf+0x144>
 800d214:	4621      	mov	r1, r4
 800d216:	4630      	mov	r0, r6
 800d218:	f001 f818 	bl	800e24c <_fflush_r>
 800d21c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d21e:	b141      	cbz	r1, 800d232 <setvbuf+0x56>
 800d220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d224:	4299      	cmp	r1, r3
 800d226:	d002      	beq.n	800d22e <setvbuf+0x52>
 800d228:	4630      	mov	r0, r6
 800d22a:	f7ff fa47 	bl	800c6bc <_free_r>
 800d22e:	2300      	movs	r3, #0
 800d230:	6363      	str	r3, [r4, #52]	; 0x34
 800d232:	2300      	movs	r3, #0
 800d234:	61a3      	str	r3, [r4, #24]
 800d236:	6063      	str	r3, [r4, #4]
 800d238:	89a3      	ldrh	r3, [r4, #12]
 800d23a:	061b      	lsls	r3, r3, #24
 800d23c:	d503      	bpl.n	800d246 <setvbuf+0x6a>
 800d23e:	6921      	ldr	r1, [r4, #16]
 800d240:	4630      	mov	r0, r6
 800d242:	f7ff fa3b 	bl	800c6bc <_free_r>
 800d246:	89a3      	ldrh	r3, [r4, #12]
 800d248:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d24c:	f023 0303 	bic.w	r3, r3, #3
 800d250:	f1b8 0f02 	cmp.w	r8, #2
 800d254:	81a3      	strh	r3, [r4, #12]
 800d256:	d05d      	beq.n	800d314 <setvbuf+0x138>
 800d258:	ab01      	add	r3, sp, #4
 800d25a:	466a      	mov	r2, sp
 800d25c:	4621      	mov	r1, r4
 800d25e:	4630      	mov	r0, r6
 800d260:	f001 f8f6 	bl	800e450 <__swhatbuf_r>
 800d264:	89a3      	ldrh	r3, [r4, #12]
 800d266:	4318      	orrs	r0, r3
 800d268:	81a0      	strh	r0, [r4, #12]
 800d26a:	bb2d      	cbnz	r5, 800d2b8 <setvbuf+0xdc>
 800d26c:	9d00      	ldr	r5, [sp, #0]
 800d26e:	4628      	mov	r0, r5
 800d270:	f7ff fa00 	bl	800c674 <malloc>
 800d274:	4607      	mov	r7, r0
 800d276:	2800      	cmp	r0, #0
 800d278:	d14e      	bne.n	800d318 <setvbuf+0x13c>
 800d27a:	f8dd 9000 	ldr.w	r9, [sp]
 800d27e:	45a9      	cmp	r9, r5
 800d280:	d13c      	bne.n	800d2fc <setvbuf+0x120>
 800d282:	f04f 30ff 	mov.w	r0, #4294967295
 800d286:	89a3      	ldrh	r3, [r4, #12]
 800d288:	f043 0302 	orr.w	r3, r3, #2
 800d28c:	81a3      	strh	r3, [r4, #12]
 800d28e:	2300      	movs	r3, #0
 800d290:	60a3      	str	r3, [r4, #8]
 800d292:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d296:	6023      	str	r3, [r4, #0]
 800d298:	6123      	str	r3, [r4, #16]
 800d29a:	2301      	movs	r3, #1
 800d29c:	6163      	str	r3, [r4, #20]
 800d29e:	b003      	add	sp, #12
 800d2a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2a4:	4b22      	ldr	r3, [pc, #136]	; (800d330 <setvbuf+0x154>)
 800d2a6:	429c      	cmp	r4, r3
 800d2a8:	d101      	bne.n	800d2ae <setvbuf+0xd2>
 800d2aa:	68b4      	ldr	r4, [r6, #8]
 800d2ac:	e7a8      	b.n	800d200 <setvbuf+0x24>
 800d2ae:	4b21      	ldr	r3, [pc, #132]	; (800d334 <setvbuf+0x158>)
 800d2b0:	429c      	cmp	r4, r3
 800d2b2:	bf08      	it	eq
 800d2b4:	68f4      	ldreq	r4, [r6, #12]
 800d2b6:	e7a3      	b.n	800d200 <setvbuf+0x24>
 800d2b8:	2f00      	cmp	r7, #0
 800d2ba:	d0d8      	beq.n	800d26e <setvbuf+0x92>
 800d2bc:	69b3      	ldr	r3, [r6, #24]
 800d2be:	b913      	cbnz	r3, 800d2c6 <setvbuf+0xea>
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	f001 f82d 	bl	800e320 <__sinit>
 800d2c6:	f1b8 0f01 	cmp.w	r8, #1
 800d2ca:	bf08      	it	eq
 800d2cc:	89a3      	ldrheq	r3, [r4, #12]
 800d2ce:	6027      	str	r7, [r4, #0]
 800d2d0:	bf04      	itt	eq
 800d2d2:	f043 0301 	orreq.w	r3, r3, #1
 800d2d6:	81a3      	strheq	r3, [r4, #12]
 800d2d8:	89a3      	ldrh	r3, [r4, #12]
 800d2da:	f013 0008 	ands.w	r0, r3, #8
 800d2de:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800d2e2:	d01b      	beq.n	800d31c <setvbuf+0x140>
 800d2e4:	f013 0001 	ands.w	r0, r3, #1
 800d2e8:	bf18      	it	ne
 800d2ea:	426d      	negne	r5, r5
 800d2ec:	f04f 0300 	mov.w	r3, #0
 800d2f0:	bf1d      	ittte	ne
 800d2f2:	60a3      	strne	r3, [r4, #8]
 800d2f4:	61a5      	strne	r5, [r4, #24]
 800d2f6:	4618      	movne	r0, r3
 800d2f8:	60a5      	streq	r5, [r4, #8]
 800d2fa:	e7d0      	b.n	800d29e <setvbuf+0xc2>
 800d2fc:	4648      	mov	r0, r9
 800d2fe:	f7ff f9b9 	bl	800c674 <malloc>
 800d302:	4607      	mov	r7, r0
 800d304:	2800      	cmp	r0, #0
 800d306:	d0bc      	beq.n	800d282 <setvbuf+0xa6>
 800d308:	89a3      	ldrh	r3, [r4, #12]
 800d30a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d30e:	81a3      	strh	r3, [r4, #12]
 800d310:	464d      	mov	r5, r9
 800d312:	e7d3      	b.n	800d2bc <setvbuf+0xe0>
 800d314:	2000      	movs	r0, #0
 800d316:	e7b6      	b.n	800d286 <setvbuf+0xaa>
 800d318:	46a9      	mov	r9, r5
 800d31a:	e7f5      	b.n	800d308 <setvbuf+0x12c>
 800d31c:	60a0      	str	r0, [r4, #8]
 800d31e:	e7be      	b.n	800d29e <setvbuf+0xc2>
 800d320:	f04f 30ff 	mov.w	r0, #4294967295
 800d324:	e7bb      	b.n	800d29e <setvbuf+0xc2>
 800d326:	bf00      	nop
 800d328:	2000006c 	.word	0x2000006c
 800d32c:	0800f0a0 	.word	0x0800f0a0
 800d330:	0800f0c0 	.word	0x0800f0c0
 800d334:	0800f080 	.word	0x0800f080

0800d338 <__swbuf_r>:
 800d338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33a:	460e      	mov	r6, r1
 800d33c:	4614      	mov	r4, r2
 800d33e:	4605      	mov	r5, r0
 800d340:	b118      	cbz	r0, 800d34a <__swbuf_r+0x12>
 800d342:	6983      	ldr	r3, [r0, #24]
 800d344:	b90b      	cbnz	r3, 800d34a <__swbuf_r+0x12>
 800d346:	f000 ffeb 	bl	800e320 <__sinit>
 800d34a:	4b21      	ldr	r3, [pc, #132]	; (800d3d0 <__swbuf_r+0x98>)
 800d34c:	429c      	cmp	r4, r3
 800d34e:	d12a      	bne.n	800d3a6 <__swbuf_r+0x6e>
 800d350:	686c      	ldr	r4, [r5, #4]
 800d352:	69a3      	ldr	r3, [r4, #24]
 800d354:	60a3      	str	r3, [r4, #8]
 800d356:	89a3      	ldrh	r3, [r4, #12]
 800d358:	071a      	lsls	r2, r3, #28
 800d35a:	d52e      	bpl.n	800d3ba <__swbuf_r+0x82>
 800d35c:	6923      	ldr	r3, [r4, #16]
 800d35e:	b363      	cbz	r3, 800d3ba <__swbuf_r+0x82>
 800d360:	6923      	ldr	r3, [r4, #16]
 800d362:	6820      	ldr	r0, [r4, #0]
 800d364:	1ac0      	subs	r0, r0, r3
 800d366:	6963      	ldr	r3, [r4, #20]
 800d368:	b2f6      	uxtb	r6, r6
 800d36a:	4283      	cmp	r3, r0
 800d36c:	4637      	mov	r7, r6
 800d36e:	dc04      	bgt.n	800d37a <__swbuf_r+0x42>
 800d370:	4621      	mov	r1, r4
 800d372:	4628      	mov	r0, r5
 800d374:	f000 ff6a 	bl	800e24c <_fflush_r>
 800d378:	bb28      	cbnz	r0, 800d3c6 <__swbuf_r+0x8e>
 800d37a:	68a3      	ldr	r3, [r4, #8]
 800d37c:	3b01      	subs	r3, #1
 800d37e:	60a3      	str	r3, [r4, #8]
 800d380:	6823      	ldr	r3, [r4, #0]
 800d382:	1c5a      	adds	r2, r3, #1
 800d384:	6022      	str	r2, [r4, #0]
 800d386:	701e      	strb	r6, [r3, #0]
 800d388:	6963      	ldr	r3, [r4, #20]
 800d38a:	3001      	adds	r0, #1
 800d38c:	4283      	cmp	r3, r0
 800d38e:	d004      	beq.n	800d39a <__swbuf_r+0x62>
 800d390:	89a3      	ldrh	r3, [r4, #12]
 800d392:	07db      	lsls	r3, r3, #31
 800d394:	d519      	bpl.n	800d3ca <__swbuf_r+0x92>
 800d396:	2e0a      	cmp	r6, #10
 800d398:	d117      	bne.n	800d3ca <__swbuf_r+0x92>
 800d39a:	4621      	mov	r1, r4
 800d39c:	4628      	mov	r0, r5
 800d39e:	f000 ff55 	bl	800e24c <_fflush_r>
 800d3a2:	b190      	cbz	r0, 800d3ca <__swbuf_r+0x92>
 800d3a4:	e00f      	b.n	800d3c6 <__swbuf_r+0x8e>
 800d3a6:	4b0b      	ldr	r3, [pc, #44]	; (800d3d4 <__swbuf_r+0x9c>)
 800d3a8:	429c      	cmp	r4, r3
 800d3aa:	d101      	bne.n	800d3b0 <__swbuf_r+0x78>
 800d3ac:	68ac      	ldr	r4, [r5, #8]
 800d3ae:	e7d0      	b.n	800d352 <__swbuf_r+0x1a>
 800d3b0:	4b09      	ldr	r3, [pc, #36]	; (800d3d8 <__swbuf_r+0xa0>)
 800d3b2:	429c      	cmp	r4, r3
 800d3b4:	bf08      	it	eq
 800d3b6:	68ec      	ldreq	r4, [r5, #12]
 800d3b8:	e7cb      	b.n	800d352 <__swbuf_r+0x1a>
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4628      	mov	r0, r5
 800d3be:	f000 f80d 	bl	800d3dc <__swsetup_r>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d0cc      	beq.n	800d360 <__swbuf_r+0x28>
 800d3c6:	f04f 37ff 	mov.w	r7, #4294967295
 800d3ca:	4638      	mov	r0, r7
 800d3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	0800f0a0 	.word	0x0800f0a0
 800d3d4:	0800f0c0 	.word	0x0800f0c0
 800d3d8:	0800f080 	.word	0x0800f080

0800d3dc <__swsetup_r>:
 800d3dc:	4b32      	ldr	r3, [pc, #200]	; (800d4a8 <__swsetup_r+0xcc>)
 800d3de:	b570      	push	{r4, r5, r6, lr}
 800d3e0:	681d      	ldr	r5, [r3, #0]
 800d3e2:	4606      	mov	r6, r0
 800d3e4:	460c      	mov	r4, r1
 800d3e6:	b125      	cbz	r5, 800d3f2 <__swsetup_r+0x16>
 800d3e8:	69ab      	ldr	r3, [r5, #24]
 800d3ea:	b913      	cbnz	r3, 800d3f2 <__swsetup_r+0x16>
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	f000 ff97 	bl	800e320 <__sinit>
 800d3f2:	4b2e      	ldr	r3, [pc, #184]	; (800d4ac <__swsetup_r+0xd0>)
 800d3f4:	429c      	cmp	r4, r3
 800d3f6:	d10f      	bne.n	800d418 <__swsetup_r+0x3c>
 800d3f8:	686c      	ldr	r4, [r5, #4]
 800d3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3fe:	b29a      	uxth	r2, r3
 800d400:	0715      	lsls	r5, r2, #28
 800d402:	d42c      	bmi.n	800d45e <__swsetup_r+0x82>
 800d404:	06d0      	lsls	r0, r2, #27
 800d406:	d411      	bmi.n	800d42c <__swsetup_r+0x50>
 800d408:	2209      	movs	r2, #9
 800d40a:	6032      	str	r2, [r6, #0]
 800d40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d410:	81a3      	strh	r3, [r4, #12]
 800d412:	f04f 30ff 	mov.w	r0, #4294967295
 800d416:	e03e      	b.n	800d496 <__swsetup_r+0xba>
 800d418:	4b25      	ldr	r3, [pc, #148]	; (800d4b0 <__swsetup_r+0xd4>)
 800d41a:	429c      	cmp	r4, r3
 800d41c:	d101      	bne.n	800d422 <__swsetup_r+0x46>
 800d41e:	68ac      	ldr	r4, [r5, #8]
 800d420:	e7eb      	b.n	800d3fa <__swsetup_r+0x1e>
 800d422:	4b24      	ldr	r3, [pc, #144]	; (800d4b4 <__swsetup_r+0xd8>)
 800d424:	429c      	cmp	r4, r3
 800d426:	bf08      	it	eq
 800d428:	68ec      	ldreq	r4, [r5, #12]
 800d42a:	e7e6      	b.n	800d3fa <__swsetup_r+0x1e>
 800d42c:	0751      	lsls	r1, r2, #29
 800d42e:	d512      	bpl.n	800d456 <__swsetup_r+0x7a>
 800d430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d432:	b141      	cbz	r1, 800d446 <__swsetup_r+0x6a>
 800d434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d438:	4299      	cmp	r1, r3
 800d43a:	d002      	beq.n	800d442 <__swsetup_r+0x66>
 800d43c:	4630      	mov	r0, r6
 800d43e:	f7ff f93d 	bl	800c6bc <_free_r>
 800d442:	2300      	movs	r3, #0
 800d444:	6363      	str	r3, [r4, #52]	; 0x34
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d44c:	81a3      	strh	r3, [r4, #12]
 800d44e:	2300      	movs	r3, #0
 800d450:	6063      	str	r3, [r4, #4]
 800d452:	6923      	ldr	r3, [r4, #16]
 800d454:	6023      	str	r3, [r4, #0]
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	f043 0308 	orr.w	r3, r3, #8
 800d45c:	81a3      	strh	r3, [r4, #12]
 800d45e:	6923      	ldr	r3, [r4, #16]
 800d460:	b94b      	cbnz	r3, 800d476 <__swsetup_r+0x9a>
 800d462:	89a3      	ldrh	r3, [r4, #12]
 800d464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d46c:	d003      	beq.n	800d476 <__swsetup_r+0x9a>
 800d46e:	4621      	mov	r1, r4
 800d470:	4630      	mov	r0, r6
 800d472:	f001 f811 	bl	800e498 <__smakebuf_r>
 800d476:	89a2      	ldrh	r2, [r4, #12]
 800d478:	f012 0301 	ands.w	r3, r2, #1
 800d47c:	d00c      	beq.n	800d498 <__swsetup_r+0xbc>
 800d47e:	2300      	movs	r3, #0
 800d480:	60a3      	str	r3, [r4, #8]
 800d482:	6963      	ldr	r3, [r4, #20]
 800d484:	425b      	negs	r3, r3
 800d486:	61a3      	str	r3, [r4, #24]
 800d488:	6923      	ldr	r3, [r4, #16]
 800d48a:	b953      	cbnz	r3, 800d4a2 <__swsetup_r+0xc6>
 800d48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d490:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d494:	d1ba      	bne.n	800d40c <__swsetup_r+0x30>
 800d496:	bd70      	pop	{r4, r5, r6, pc}
 800d498:	0792      	lsls	r2, r2, #30
 800d49a:	bf58      	it	pl
 800d49c:	6963      	ldrpl	r3, [r4, #20]
 800d49e:	60a3      	str	r3, [r4, #8]
 800d4a0:	e7f2      	b.n	800d488 <__swsetup_r+0xac>
 800d4a2:	2000      	movs	r0, #0
 800d4a4:	e7f7      	b.n	800d496 <__swsetup_r+0xba>
 800d4a6:	bf00      	nop
 800d4a8:	2000006c 	.word	0x2000006c
 800d4ac:	0800f0a0 	.word	0x0800f0a0
 800d4b0:	0800f0c0 	.word	0x0800f0c0
 800d4b4:	0800f080 	.word	0x0800f080

0800d4b8 <quorem>:
 800d4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	6903      	ldr	r3, [r0, #16]
 800d4be:	690c      	ldr	r4, [r1, #16]
 800d4c0:	42a3      	cmp	r3, r4
 800d4c2:	4680      	mov	r8, r0
 800d4c4:	f2c0 8082 	blt.w	800d5cc <quorem+0x114>
 800d4c8:	3c01      	subs	r4, #1
 800d4ca:	f101 0714 	add.w	r7, r1, #20
 800d4ce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d4d2:	f100 0614 	add.w	r6, r0, #20
 800d4d6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d4da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d4de:	eb06 030c 	add.w	r3, r6, ip
 800d4e2:	3501      	adds	r5, #1
 800d4e4:	eb07 090c 	add.w	r9, r7, ip
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	fbb0 f5f5 	udiv	r5, r0, r5
 800d4ee:	b395      	cbz	r5, 800d556 <quorem+0x9e>
 800d4f0:	f04f 0a00 	mov.w	sl, #0
 800d4f4:	4638      	mov	r0, r7
 800d4f6:	46b6      	mov	lr, r6
 800d4f8:	46d3      	mov	fp, sl
 800d4fa:	f850 2b04 	ldr.w	r2, [r0], #4
 800d4fe:	b293      	uxth	r3, r2
 800d500:	fb05 a303 	mla	r3, r5, r3, sl
 800d504:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d508:	b29b      	uxth	r3, r3
 800d50a:	ebab 0303 	sub.w	r3, fp, r3
 800d50e:	0c12      	lsrs	r2, r2, #16
 800d510:	f8de b000 	ldr.w	fp, [lr]
 800d514:	fb05 a202 	mla	r2, r5, r2, sl
 800d518:	fa13 f38b 	uxtah	r3, r3, fp
 800d51c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d520:	fa1f fb82 	uxth.w	fp, r2
 800d524:	f8de 2000 	ldr.w	r2, [lr]
 800d528:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d52c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d530:	b29b      	uxth	r3, r3
 800d532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d536:	4581      	cmp	r9, r0
 800d538:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d53c:	f84e 3b04 	str.w	r3, [lr], #4
 800d540:	d2db      	bcs.n	800d4fa <quorem+0x42>
 800d542:	f856 300c 	ldr.w	r3, [r6, ip]
 800d546:	b933      	cbnz	r3, 800d556 <quorem+0x9e>
 800d548:	9b01      	ldr	r3, [sp, #4]
 800d54a:	3b04      	subs	r3, #4
 800d54c:	429e      	cmp	r6, r3
 800d54e:	461a      	mov	r2, r3
 800d550:	d330      	bcc.n	800d5b4 <quorem+0xfc>
 800d552:	f8c8 4010 	str.w	r4, [r8, #16]
 800d556:	4640      	mov	r0, r8
 800d558:	f001 f9f6 	bl	800e948 <__mcmp>
 800d55c:	2800      	cmp	r0, #0
 800d55e:	db25      	blt.n	800d5ac <quorem+0xf4>
 800d560:	3501      	adds	r5, #1
 800d562:	4630      	mov	r0, r6
 800d564:	f04f 0c00 	mov.w	ip, #0
 800d568:	f857 2b04 	ldr.w	r2, [r7], #4
 800d56c:	f8d0 e000 	ldr.w	lr, [r0]
 800d570:	b293      	uxth	r3, r2
 800d572:	ebac 0303 	sub.w	r3, ip, r3
 800d576:	0c12      	lsrs	r2, r2, #16
 800d578:	fa13 f38e 	uxtah	r3, r3, lr
 800d57c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d580:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d584:	b29b      	uxth	r3, r3
 800d586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d58a:	45b9      	cmp	r9, r7
 800d58c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d590:	f840 3b04 	str.w	r3, [r0], #4
 800d594:	d2e8      	bcs.n	800d568 <quorem+0xb0>
 800d596:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d59a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d59e:	b92a      	cbnz	r2, 800d5ac <quorem+0xf4>
 800d5a0:	3b04      	subs	r3, #4
 800d5a2:	429e      	cmp	r6, r3
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	d30b      	bcc.n	800d5c0 <quorem+0x108>
 800d5a8:	f8c8 4010 	str.w	r4, [r8, #16]
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	b003      	add	sp, #12
 800d5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b4:	6812      	ldr	r2, [r2, #0]
 800d5b6:	3b04      	subs	r3, #4
 800d5b8:	2a00      	cmp	r2, #0
 800d5ba:	d1ca      	bne.n	800d552 <quorem+0x9a>
 800d5bc:	3c01      	subs	r4, #1
 800d5be:	e7c5      	b.n	800d54c <quorem+0x94>
 800d5c0:	6812      	ldr	r2, [r2, #0]
 800d5c2:	3b04      	subs	r3, #4
 800d5c4:	2a00      	cmp	r2, #0
 800d5c6:	d1ef      	bne.n	800d5a8 <quorem+0xf0>
 800d5c8:	3c01      	subs	r4, #1
 800d5ca:	e7ea      	b.n	800d5a2 <quorem+0xea>
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	e7ee      	b.n	800d5ae <quorem+0xf6>

0800d5d0 <_dtoa_r>:
 800d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d4:	ec57 6b10 	vmov	r6, r7, d0
 800d5d8:	b097      	sub	sp, #92	; 0x5c
 800d5da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d5dc:	9106      	str	r1, [sp, #24]
 800d5de:	4604      	mov	r4, r0
 800d5e0:	920b      	str	r2, [sp, #44]	; 0x2c
 800d5e2:	9312      	str	r3, [sp, #72]	; 0x48
 800d5e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d5e8:	e9cd 6700 	strd	r6, r7, [sp]
 800d5ec:	b93d      	cbnz	r5, 800d5fe <_dtoa_r+0x2e>
 800d5ee:	2010      	movs	r0, #16
 800d5f0:	f7ff f840 	bl	800c674 <malloc>
 800d5f4:	6260      	str	r0, [r4, #36]	; 0x24
 800d5f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d5fa:	6005      	str	r5, [r0, #0]
 800d5fc:	60c5      	str	r5, [r0, #12]
 800d5fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d600:	6819      	ldr	r1, [r3, #0]
 800d602:	b151      	cbz	r1, 800d61a <_dtoa_r+0x4a>
 800d604:	685a      	ldr	r2, [r3, #4]
 800d606:	604a      	str	r2, [r1, #4]
 800d608:	2301      	movs	r3, #1
 800d60a:	4093      	lsls	r3, r2
 800d60c:	608b      	str	r3, [r1, #8]
 800d60e:	4620      	mov	r0, r4
 800d610:	f000 ffb8 	bl	800e584 <_Bfree>
 800d614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d616:	2200      	movs	r2, #0
 800d618:	601a      	str	r2, [r3, #0]
 800d61a:	1e3b      	subs	r3, r7, #0
 800d61c:	bfbb      	ittet	lt
 800d61e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d622:	9301      	strlt	r3, [sp, #4]
 800d624:	2300      	movge	r3, #0
 800d626:	2201      	movlt	r2, #1
 800d628:	bfac      	ite	ge
 800d62a:	f8c8 3000 	strge.w	r3, [r8]
 800d62e:	f8c8 2000 	strlt.w	r2, [r8]
 800d632:	4baf      	ldr	r3, [pc, #700]	; (800d8f0 <_dtoa_r+0x320>)
 800d634:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d638:	ea33 0308 	bics.w	r3, r3, r8
 800d63c:	d114      	bne.n	800d668 <_dtoa_r+0x98>
 800d63e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d640:	f242 730f 	movw	r3, #9999	; 0x270f
 800d644:	6013      	str	r3, [r2, #0]
 800d646:	9b00      	ldr	r3, [sp, #0]
 800d648:	b923      	cbnz	r3, 800d654 <_dtoa_r+0x84>
 800d64a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d64e:	2800      	cmp	r0, #0
 800d650:	f000 8542 	beq.w	800e0d8 <_dtoa_r+0xb08>
 800d654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d656:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d904 <_dtoa_r+0x334>
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f000 8544 	beq.w	800e0e8 <_dtoa_r+0xb18>
 800d660:	f10b 0303 	add.w	r3, fp, #3
 800d664:	f000 bd3e 	b.w	800e0e4 <_dtoa_r+0xb14>
 800d668:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d66c:	2200      	movs	r2, #0
 800d66e:	2300      	movs	r3, #0
 800d670:	4630      	mov	r0, r6
 800d672:	4639      	mov	r1, r7
 800d674:	f7f3 fa38 	bl	8000ae8 <__aeabi_dcmpeq>
 800d678:	4681      	mov	r9, r0
 800d67a:	b168      	cbz	r0, 800d698 <_dtoa_r+0xc8>
 800d67c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d67e:	2301      	movs	r3, #1
 800d680:	6013      	str	r3, [r2, #0]
 800d682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 8524 	beq.w	800e0d2 <_dtoa_r+0xb02>
 800d68a:	4b9a      	ldr	r3, [pc, #616]	; (800d8f4 <_dtoa_r+0x324>)
 800d68c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d68e:	f103 3bff 	add.w	fp, r3, #4294967295
 800d692:	6013      	str	r3, [r2, #0]
 800d694:	f000 bd28 	b.w	800e0e8 <_dtoa_r+0xb18>
 800d698:	aa14      	add	r2, sp, #80	; 0x50
 800d69a:	a915      	add	r1, sp, #84	; 0x54
 800d69c:	ec47 6b10 	vmov	d0, r6, r7
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f001 f9c8 	bl	800ea36 <__d2b>
 800d6a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d6aa:	9004      	str	r0, [sp, #16]
 800d6ac:	2d00      	cmp	r5, #0
 800d6ae:	d07c      	beq.n	800d7aa <_dtoa_r+0x1da>
 800d6b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d6b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d6b8:	46b2      	mov	sl, r6
 800d6ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d6be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d6c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	4b8b      	ldr	r3, [pc, #556]	; (800d8f8 <_dtoa_r+0x328>)
 800d6ca:	4650      	mov	r0, sl
 800d6cc:	4659      	mov	r1, fp
 800d6ce:	f7f2 fdeb 	bl	80002a8 <__aeabi_dsub>
 800d6d2:	a381      	add	r3, pc, #516	; (adr r3, 800d8d8 <_dtoa_r+0x308>)
 800d6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d8:	f7f2 ff9e 	bl	8000618 <__aeabi_dmul>
 800d6dc:	a380      	add	r3, pc, #512	; (adr r3, 800d8e0 <_dtoa_r+0x310>)
 800d6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e2:	f7f2 fde3 	bl	80002ac <__adddf3>
 800d6e6:	4606      	mov	r6, r0
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	460f      	mov	r7, r1
 800d6ec:	f7f2 ff2a 	bl	8000544 <__aeabi_i2d>
 800d6f0:	a37d      	add	r3, pc, #500	; (adr r3, 800d8e8 <_dtoa_r+0x318>)
 800d6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f6:	f7f2 ff8f 	bl	8000618 <__aeabi_dmul>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	4630      	mov	r0, r6
 800d700:	4639      	mov	r1, r7
 800d702:	f7f2 fdd3 	bl	80002ac <__adddf3>
 800d706:	4606      	mov	r6, r0
 800d708:	460f      	mov	r7, r1
 800d70a:	f7f3 fa35 	bl	8000b78 <__aeabi_d2iz>
 800d70e:	2200      	movs	r2, #0
 800d710:	4682      	mov	sl, r0
 800d712:	2300      	movs	r3, #0
 800d714:	4630      	mov	r0, r6
 800d716:	4639      	mov	r1, r7
 800d718:	f7f3 f9f0 	bl	8000afc <__aeabi_dcmplt>
 800d71c:	b148      	cbz	r0, 800d732 <_dtoa_r+0x162>
 800d71e:	4650      	mov	r0, sl
 800d720:	f7f2 ff10 	bl	8000544 <__aeabi_i2d>
 800d724:	4632      	mov	r2, r6
 800d726:	463b      	mov	r3, r7
 800d728:	f7f3 f9de 	bl	8000ae8 <__aeabi_dcmpeq>
 800d72c:	b908      	cbnz	r0, 800d732 <_dtoa_r+0x162>
 800d72e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d732:	f1ba 0f16 	cmp.w	sl, #22
 800d736:	d859      	bhi.n	800d7ec <_dtoa_r+0x21c>
 800d738:	4970      	ldr	r1, [pc, #448]	; (800d8fc <_dtoa_r+0x32c>)
 800d73a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d73e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d742:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d746:	f7f3 f9f7 	bl	8000b38 <__aeabi_dcmpgt>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d050      	beq.n	800d7f0 <_dtoa_r+0x220>
 800d74e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d752:	2300      	movs	r3, #0
 800d754:	930f      	str	r3, [sp, #60]	; 0x3c
 800d756:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d758:	1b5d      	subs	r5, r3, r5
 800d75a:	f1b5 0801 	subs.w	r8, r5, #1
 800d75e:	bf49      	itett	mi
 800d760:	f1c5 0301 	rsbmi	r3, r5, #1
 800d764:	2300      	movpl	r3, #0
 800d766:	9305      	strmi	r3, [sp, #20]
 800d768:	f04f 0800 	movmi.w	r8, #0
 800d76c:	bf58      	it	pl
 800d76e:	9305      	strpl	r3, [sp, #20]
 800d770:	f1ba 0f00 	cmp.w	sl, #0
 800d774:	db3e      	blt.n	800d7f4 <_dtoa_r+0x224>
 800d776:	2300      	movs	r3, #0
 800d778:	44d0      	add	r8, sl
 800d77a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d77e:	9307      	str	r3, [sp, #28]
 800d780:	9b06      	ldr	r3, [sp, #24]
 800d782:	2b09      	cmp	r3, #9
 800d784:	f200 8090 	bhi.w	800d8a8 <_dtoa_r+0x2d8>
 800d788:	2b05      	cmp	r3, #5
 800d78a:	bfc4      	itt	gt
 800d78c:	3b04      	subgt	r3, #4
 800d78e:	9306      	strgt	r3, [sp, #24]
 800d790:	9b06      	ldr	r3, [sp, #24]
 800d792:	f1a3 0302 	sub.w	r3, r3, #2
 800d796:	bfcc      	ite	gt
 800d798:	2500      	movgt	r5, #0
 800d79a:	2501      	movle	r5, #1
 800d79c:	2b03      	cmp	r3, #3
 800d79e:	f200 808f 	bhi.w	800d8c0 <_dtoa_r+0x2f0>
 800d7a2:	e8df f003 	tbb	[pc, r3]
 800d7a6:	7f7d      	.short	0x7f7d
 800d7a8:	7131      	.short	0x7131
 800d7aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d7ae:	441d      	add	r5, r3
 800d7b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d7b4:	2820      	cmp	r0, #32
 800d7b6:	dd13      	ble.n	800d7e0 <_dtoa_r+0x210>
 800d7b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d7bc:	9b00      	ldr	r3, [sp, #0]
 800d7be:	fa08 f800 	lsl.w	r8, r8, r0
 800d7c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d7c6:	fa23 f000 	lsr.w	r0, r3, r0
 800d7ca:	ea48 0000 	orr.w	r0, r8, r0
 800d7ce:	f7f2 fea9 	bl	8000524 <__aeabi_ui2d>
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	4682      	mov	sl, r0
 800d7d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d7da:	3d01      	subs	r5, #1
 800d7dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d7de:	e772      	b.n	800d6c6 <_dtoa_r+0xf6>
 800d7e0:	9b00      	ldr	r3, [sp, #0]
 800d7e2:	f1c0 0020 	rsb	r0, r0, #32
 800d7e6:	fa03 f000 	lsl.w	r0, r3, r0
 800d7ea:	e7f0      	b.n	800d7ce <_dtoa_r+0x1fe>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e7b1      	b.n	800d754 <_dtoa_r+0x184>
 800d7f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800d7f2:	e7b0      	b.n	800d756 <_dtoa_r+0x186>
 800d7f4:	9b05      	ldr	r3, [sp, #20]
 800d7f6:	eba3 030a 	sub.w	r3, r3, sl
 800d7fa:	9305      	str	r3, [sp, #20]
 800d7fc:	f1ca 0300 	rsb	r3, sl, #0
 800d800:	9307      	str	r3, [sp, #28]
 800d802:	2300      	movs	r3, #0
 800d804:	930e      	str	r3, [sp, #56]	; 0x38
 800d806:	e7bb      	b.n	800d780 <_dtoa_r+0x1b0>
 800d808:	2301      	movs	r3, #1
 800d80a:	930a      	str	r3, [sp, #40]	; 0x28
 800d80c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d80e:	2b00      	cmp	r3, #0
 800d810:	dd59      	ble.n	800d8c6 <_dtoa_r+0x2f6>
 800d812:	9302      	str	r3, [sp, #8]
 800d814:	4699      	mov	r9, r3
 800d816:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d818:	2200      	movs	r2, #0
 800d81a:	6072      	str	r2, [r6, #4]
 800d81c:	2204      	movs	r2, #4
 800d81e:	f102 0014 	add.w	r0, r2, #20
 800d822:	4298      	cmp	r0, r3
 800d824:	6871      	ldr	r1, [r6, #4]
 800d826:	d953      	bls.n	800d8d0 <_dtoa_r+0x300>
 800d828:	4620      	mov	r0, r4
 800d82a:	f000 fe77 	bl	800e51c <_Balloc>
 800d82e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d830:	6030      	str	r0, [r6, #0]
 800d832:	f1b9 0f0e 	cmp.w	r9, #14
 800d836:	f8d3 b000 	ldr.w	fp, [r3]
 800d83a:	f200 80e6 	bhi.w	800da0a <_dtoa_r+0x43a>
 800d83e:	2d00      	cmp	r5, #0
 800d840:	f000 80e3 	beq.w	800da0a <_dtoa_r+0x43a>
 800d844:	ed9d 7b00 	vldr	d7, [sp]
 800d848:	f1ba 0f00 	cmp.w	sl, #0
 800d84c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d850:	dd74      	ble.n	800d93c <_dtoa_r+0x36c>
 800d852:	4a2a      	ldr	r2, [pc, #168]	; (800d8fc <_dtoa_r+0x32c>)
 800d854:	f00a 030f 	and.w	r3, sl, #15
 800d858:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d85c:	ed93 7b00 	vldr	d7, [r3]
 800d860:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d864:	06f0      	lsls	r0, r6, #27
 800d866:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d86a:	d565      	bpl.n	800d938 <_dtoa_r+0x368>
 800d86c:	4b24      	ldr	r3, [pc, #144]	; (800d900 <_dtoa_r+0x330>)
 800d86e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d872:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d876:	f7f2 fff9 	bl	800086c <__aeabi_ddiv>
 800d87a:	e9cd 0100 	strd	r0, r1, [sp]
 800d87e:	f006 060f 	and.w	r6, r6, #15
 800d882:	2503      	movs	r5, #3
 800d884:	4f1e      	ldr	r7, [pc, #120]	; (800d900 <_dtoa_r+0x330>)
 800d886:	e04c      	b.n	800d922 <_dtoa_r+0x352>
 800d888:	2301      	movs	r3, #1
 800d88a:	930a      	str	r3, [sp, #40]	; 0x28
 800d88c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d88e:	4453      	add	r3, sl
 800d890:	f103 0901 	add.w	r9, r3, #1
 800d894:	9302      	str	r3, [sp, #8]
 800d896:	464b      	mov	r3, r9
 800d898:	2b01      	cmp	r3, #1
 800d89a:	bfb8      	it	lt
 800d89c:	2301      	movlt	r3, #1
 800d89e:	e7ba      	b.n	800d816 <_dtoa_r+0x246>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	e7b2      	b.n	800d80a <_dtoa_r+0x23a>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	e7f0      	b.n	800d88a <_dtoa_r+0x2ba>
 800d8a8:	2501      	movs	r5, #1
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	9306      	str	r3, [sp, #24]
 800d8ae:	950a      	str	r5, [sp, #40]	; 0x28
 800d8b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b4:	9302      	str	r3, [sp, #8]
 800d8b6:	4699      	mov	r9, r3
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	2312      	movs	r3, #18
 800d8bc:	920b      	str	r2, [sp, #44]	; 0x2c
 800d8be:	e7aa      	b.n	800d816 <_dtoa_r+0x246>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	930a      	str	r3, [sp, #40]	; 0x28
 800d8c4:	e7f4      	b.n	800d8b0 <_dtoa_r+0x2e0>
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	9302      	str	r3, [sp, #8]
 800d8ca:	4699      	mov	r9, r3
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	e7f5      	b.n	800d8bc <_dtoa_r+0x2ec>
 800d8d0:	3101      	adds	r1, #1
 800d8d2:	6071      	str	r1, [r6, #4]
 800d8d4:	0052      	lsls	r2, r2, #1
 800d8d6:	e7a2      	b.n	800d81e <_dtoa_r+0x24e>
 800d8d8:	636f4361 	.word	0x636f4361
 800d8dc:	3fd287a7 	.word	0x3fd287a7
 800d8e0:	8b60c8b3 	.word	0x8b60c8b3
 800d8e4:	3fc68a28 	.word	0x3fc68a28
 800d8e8:	509f79fb 	.word	0x509f79fb
 800d8ec:	3fd34413 	.word	0x3fd34413
 800d8f0:	7ff00000 	.word	0x7ff00000
 800d8f4:	0800f04d 	.word	0x0800f04d
 800d8f8:	3ff80000 	.word	0x3ff80000
 800d8fc:	0800f108 	.word	0x0800f108
 800d900:	0800f0e0 	.word	0x0800f0e0
 800d904:	0800f079 	.word	0x0800f079
 800d908:	07f1      	lsls	r1, r6, #31
 800d90a:	d508      	bpl.n	800d91e <_dtoa_r+0x34e>
 800d90c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d910:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d914:	f7f2 fe80 	bl	8000618 <__aeabi_dmul>
 800d918:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d91c:	3501      	adds	r5, #1
 800d91e:	1076      	asrs	r6, r6, #1
 800d920:	3708      	adds	r7, #8
 800d922:	2e00      	cmp	r6, #0
 800d924:	d1f0      	bne.n	800d908 <_dtoa_r+0x338>
 800d926:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d92a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d92e:	f7f2 ff9d 	bl	800086c <__aeabi_ddiv>
 800d932:	e9cd 0100 	strd	r0, r1, [sp]
 800d936:	e01a      	b.n	800d96e <_dtoa_r+0x39e>
 800d938:	2502      	movs	r5, #2
 800d93a:	e7a3      	b.n	800d884 <_dtoa_r+0x2b4>
 800d93c:	f000 80a0 	beq.w	800da80 <_dtoa_r+0x4b0>
 800d940:	f1ca 0600 	rsb	r6, sl, #0
 800d944:	4b9f      	ldr	r3, [pc, #636]	; (800dbc4 <_dtoa_r+0x5f4>)
 800d946:	4fa0      	ldr	r7, [pc, #640]	; (800dbc8 <_dtoa_r+0x5f8>)
 800d948:	f006 020f 	and.w	r2, r6, #15
 800d94c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d954:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d958:	f7f2 fe5e 	bl	8000618 <__aeabi_dmul>
 800d95c:	e9cd 0100 	strd	r0, r1, [sp]
 800d960:	1136      	asrs	r6, r6, #4
 800d962:	2300      	movs	r3, #0
 800d964:	2502      	movs	r5, #2
 800d966:	2e00      	cmp	r6, #0
 800d968:	d17f      	bne.n	800da6a <_dtoa_r+0x49a>
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1e1      	bne.n	800d932 <_dtoa_r+0x362>
 800d96e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d970:	2b00      	cmp	r3, #0
 800d972:	f000 8087 	beq.w	800da84 <_dtoa_r+0x4b4>
 800d976:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d97a:	2200      	movs	r2, #0
 800d97c:	4b93      	ldr	r3, [pc, #588]	; (800dbcc <_dtoa_r+0x5fc>)
 800d97e:	4630      	mov	r0, r6
 800d980:	4639      	mov	r1, r7
 800d982:	f7f3 f8bb 	bl	8000afc <__aeabi_dcmplt>
 800d986:	2800      	cmp	r0, #0
 800d988:	d07c      	beq.n	800da84 <_dtoa_r+0x4b4>
 800d98a:	f1b9 0f00 	cmp.w	r9, #0
 800d98e:	d079      	beq.n	800da84 <_dtoa_r+0x4b4>
 800d990:	9b02      	ldr	r3, [sp, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	dd35      	ble.n	800da02 <_dtoa_r+0x432>
 800d996:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d99a:	9308      	str	r3, [sp, #32]
 800d99c:	4639      	mov	r1, r7
 800d99e:	2200      	movs	r2, #0
 800d9a0:	4b8b      	ldr	r3, [pc, #556]	; (800dbd0 <_dtoa_r+0x600>)
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	f7f2 fe38 	bl	8000618 <__aeabi_dmul>
 800d9a8:	e9cd 0100 	strd	r0, r1, [sp]
 800d9ac:	9f02      	ldr	r7, [sp, #8]
 800d9ae:	3501      	adds	r5, #1
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	f7f2 fdc7 	bl	8000544 <__aeabi_i2d>
 800d9b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9ba:	f7f2 fe2d 	bl	8000618 <__aeabi_dmul>
 800d9be:	2200      	movs	r2, #0
 800d9c0:	4b84      	ldr	r3, [pc, #528]	; (800dbd4 <_dtoa_r+0x604>)
 800d9c2:	f7f2 fc73 	bl	80002ac <__adddf3>
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d9cc:	2f00      	cmp	r7, #0
 800d9ce:	d15d      	bne.n	800da8c <_dtoa_r+0x4bc>
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	4b81      	ldr	r3, [pc, #516]	; (800dbd8 <_dtoa_r+0x608>)
 800d9d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9d8:	f7f2 fc66 	bl	80002a8 <__aeabi_dsub>
 800d9dc:	462a      	mov	r2, r5
 800d9de:	4633      	mov	r3, r6
 800d9e0:	e9cd 0100 	strd	r0, r1, [sp]
 800d9e4:	f7f3 f8a8 	bl	8000b38 <__aeabi_dcmpgt>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	f040 8288 	bne.w	800defe <_dtoa_r+0x92e>
 800d9ee:	462a      	mov	r2, r5
 800d9f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d9f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9f8:	f7f3 f880 	bl	8000afc <__aeabi_dcmplt>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	f040 827c 	bne.w	800defa <_dtoa_r+0x92a>
 800da02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800da06:	e9cd 2300 	strd	r2, r3, [sp]
 800da0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f2c0 8150 	blt.w	800dcb2 <_dtoa_r+0x6e2>
 800da12:	f1ba 0f0e 	cmp.w	sl, #14
 800da16:	f300 814c 	bgt.w	800dcb2 <_dtoa_r+0x6e2>
 800da1a:	4b6a      	ldr	r3, [pc, #424]	; (800dbc4 <_dtoa_r+0x5f4>)
 800da1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800da20:	ed93 7b00 	vldr	d7, [r3]
 800da24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da26:	2b00      	cmp	r3, #0
 800da28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800da2c:	f280 80d8 	bge.w	800dbe0 <_dtoa_r+0x610>
 800da30:	f1b9 0f00 	cmp.w	r9, #0
 800da34:	f300 80d4 	bgt.w	800dbe0 <_dtoa_r+0x610>
 800da38:	f040 825e 	bne.w	800def8 <_dtoa_r+0x928>
 800da3c:	2200      	movs	r2, #0
 800da3e:	4b66      	ldr	r3, [pc, #408]	; (800dbd8 <_dtoa_r+0x608>)
 800da40:	ec51 0b17 	vmov	r0, r1, d7
 800da44:	f7f2 fde8 	bl	8000618 <__aeabi_dmul>
 800da48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da4c:	f7f3 f86a 	bl	8000b24 <__aeabi_dcmpge>
 800da50:	464f      	mov	r7, r9
 800da52:	464e      	mov	r6, r9
 800da54:	2800      	cmp	r0, #0
 800da56:	f040 8234 	bne.w	800dec2 <_dtoa_r+0x8f2>
 800da5a:	2331      	movs	r3, #49	; 0x31
 800da5c:	f10b 0501 	add.w	r5, fp, #1
 800da60:	f88b 3000 	strb.w	r3, [fp]
 800da64:	f10a 0a01 	add.w	sl, sl, #1
 800da68:	e22f      	b.n	800deca <_dtoa_r+0x8fa>
 800da6a:	07f2      	lsls	r2, r6, #31
 800da6c:	d505      	bpl.n	800da7a <_dtoa_r+0x4aa>
 800da6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da72:	f7f2 fdd1 	bl	8000618 <__aeabi_dmul>
 800da76:	3501      	adds	r5, #1
 800da78:	2301      	movs	r3, #1
 800da7a:	1076      	asrs	r6, r6, #1
 800da7c:	3708      	adds	r7, #8
 800da7e:	e772      	b.n	800d966 <_dtoa_r+0x396>
 800da80:	2502      	movs	r5, #2
 800da82:	e774      	b.n	800d96e <_dtoa_r+0x39e>
 800da84:	f8cd a020 	str.w	sl, [sp, #32]
 800da88:	464f      	mov	r7, r9
 800da8a:	e791      	b.n	800d9b0 <_dtoa_r+0x3e0>
 800da8c:	4b4d      	ldr	r3, [pc, #308]	; (800dbc4 <_dtoa_r+0x5f4>)
 800da8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800da92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800da96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d047      	beq.n	800db2c <_dtoa_r+0x55c>
 800da9c:	4602      	mov	r2, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	2000      	movs	r0, #0
 800daa2:	494e      	ldr	r1, [pc, #312]	; (800dbdc <_dtoa_r+0x60c>)
 800daa4:	f7f2 fee2 	bl	800086c <__aeabi_ddiv>
 800daa8:	462a      	mov	r2, r5
 800daaa:	4633      	mov	r3, r6
 800daac:	f7f2 fbfc 	bl	80002a8 <__aeabi_dsub>
 800dab0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dab4:	465d      	mov	r5, fp
 800dab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daba:	f7f3 f85d 	bl	8000b78 <__aeabi_d2iz>
 800dabe:	4606      	mov	r6, r0
 800dac0:	f7f2 fd40 	bl	8000544 <__aeabi_i2d>
 800dac4:	4602      	mov	r2, r0
 800dac6:	460b      	mov	r3, r1
 800dac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dacc:	f7f2 fbec 	bl	80002a8 <__aeabi_dsub>
 800dad0:	3630      	adds	r6, #48	; 0x30
 800dad2:	f805 6b01 	strb.w	r6, [r5], #1
 800dad6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dada:	e9cd 0100 	strd	r0, r1, [sp]
 800dade:	f7f3 f80d 	bl	8000afc <__aeabi_dcmplt>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	d163      	bne.n	800dbae <_dtoa_r+0x5de>
 800dae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800daea:	2000      	movs	r0, #0
 800daec:	4937      	ldr	r1, [pc, #220]	; (800dbcc <_dtoa_r+0x5fc>)
 800daee:	f7f2 fbdb 	bl	80002a8 <__aeabi_dsub>
 800daf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800daf6:	f7f3 f801 	bl	8000afc <__aeabi_dcmplt>
 800dafa:	2800      	cmp	r0, #0
 800dafc:	f040 80b7 	bne.w	800dc6e <_dtoa_r+0x69e>
 800db00:	eba5 030b 	sub.w	r3, r5, fp
 800db04:	429f      	cmp	r7, r3
 800db06:	f77f af7c 	ble.w	800da02 <_dtoa_r+0x432>
 800db0a:	2200      	movs	r2, #0
 800db0c:	4b30      	ldr	r3, [pc, #192]	; (800dbd0 <_dtoa_r+0x600>)
 800db0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db12:	f7f2 fd81 	bl	8000618 <__aeabi_dmul>
 800db16:	2200      	movs	r2, #0
 800db18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800db1c:	4b2c      	ldr	r3, [pc, #176]	; (800dbd0 <_dtoa_r+0x600>)
 800db1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db22:	f7f2 fd79 	bl	8000618 <__aeabi_dmul>
 800db26:	e9cd 0100 	strd	r0, r1, [sp]
 800db2a:	e7c4      	b.n	800dab6 <_dtoa_r+0x4e6>
 800db2c:	462a      	mov	r2, r5
 800db2e:	4633      	mov	r3, r6
 800db30:	f7f2 fd72 	bl	8000618 <__aeabi_dmul>
 800db34:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800db38:	eb0b 0507 	add.w	r5, fp, r7
 800db3c:	465e      	mov	r6, fp
 800db3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db42:	f7f3 f819 	bl	8000b78 <__aeabi_d2iz>
 800db46:	4607      	mov	r7, r0
 800db48:	f7f2 fcfc 	bl	8000544 <__aeabi_i2d>
 800db4c:	3730      	adds	r7, #48	; 0x30
 800db4e:	4602      	mov	r2, r0
 800db50:	460b      	mov	r3, r1
 800db52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db56:	f7f2 fba7 	bl	80002a8 <__aeabi_dsub>
 800db5a:	f806 7b01 	strb.w	r7, [r6], #1
 800db5e:	42ae      	cmp	r6, r5
 800db60:	e9cd 0100 	strd	r0, r1, [sp]
 800db64:	f04f 0200 	mov.w	r2, #0
 800db68:	d126      	bne.n	800dbb8 <_dtoa_r+0x5e8>
 800db6a:	4b1c      	ldr	r3, [pc, #112]	; (800dbdc <_dtoa_r+0x60c>)
 800db6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db70:	f7f2 fb9c 	bl	80002ac <__adddf3>
 800db74:	4602      	mov	r2, r0
 800db76:	460b      	mov	r3, r1
 800db78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db7c:	f7f2 ffdc 	bl	8000b38 <__aeabi_dcmpgt>
 800db80:	2800      	cmp	r0, #0
 800db82:	d174      	bne.n	800dc6e <_dtoa_r+0x69e>
 800db84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800db88:	2000      	movs	r0, #0
 800db8a:	4914      	ldr	r1, [pc, #80]	; (800dbdc <_dtoa_r+0x60c>)
 800db8c:	f7f2 fb8c 	bl	80002a8 <__aeabi_dsub>
 800db90:	4602      	mov	r2, r0
 800db92:	460b      	mov	r3, r1
 800db94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db98:	f7f2 ffb0 	bl	8000afc <__aeabi_dcmplt>
 800db9c:	2800      	cmp	r0, #0
 800db9e:	f43f af30 	beq.w	800da02 <_dtoa_r+0x432>
 800dba2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dba6:	2b30      	cmp	r3, #48	; 0x30
 800dba8:	f105 32ff 	add.w	r2, r5, #4294967295
 800dbac:	d002      	beq.n	800dbb4 <_dtoa_r+0x5e4>
 800dbae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dbb2:	e04a      	b.n	800dc4a <_dtoa_r+0x67a>
 800dbb4:	4615      	mov	r5, r2
 800dbb6:	e7f4      	b.n	800dba2 <_dtoa_r+0x5d2>
 800dbb8:	4b05      	ldr	r3, [pc, #20]	; (800dbd0 <_dtoa_r+0x600>)
 800dbba:	f7f2 fd2d 	bl	8000618 <__aeabi_dmul>
 800dbbe:	e9cd 0100 	strd	r0, r1, [sp]
 800dbc2:	e7bc      	b.n	800db3e <_dtoa_r+0x56e>
 800dbc4:	0800f108 	.word	0x0800f108
 800dbc8:	0800f0e0 	.word	0x0800f0e0
 800dbcc:	3ff00000 	.word	0x3ff00000
 800dbd0:	40240000 	.word	0x40240000
 800dbd4:	401c0000 	.word	0x401c0000
 800dbd8:	40140000 	.word	0x40140000
 800dbdc:	3fe00000 	.word	0x3fe00000
 800dbe0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dbe4:	465d      	mov	r5, fp
 800dbe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dbea:	4630      	mov	r0, r6
 800dbec:	4639      	mov	r1, r7
 800dbee:	f7f2 fe3d 	bl	800086c <__aeabi_ddiv>
 800dbf2:	f7f2 ffc1 	bl	8000b78 <__aeabi_d2iz>
 800dbf6:	4680      	mov	r8, r0
 800dbf8:	f7f2 fca4 	bl	8000544 <__aeabi_i2d>
 800dbfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc00:	f7f2 fd0a 	bl	8000618 <__aeabi_dmul>
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	4630      	mov	r0, r6
 800dc0a:	4639      	mov	r1, r7
 800dc0c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800dc10:	f7f2 fb4a 	bl	80002a8 <__aeabi_dsub>
 800dc14:	f805 6b01 	strb.w	r6, [r5], #1
 800dc18:	eba5 060b 	sub.w	r6, r5, fp
 800dc1c:	45b1      	cmp	r9, r6
 800dc1e:	4602      	mov	r2, r0
 800dc20:	460b      	mov	r3, r1
 800dc22:	d139      	bne.n	800dc98 <_dtoa_r+0x6c8>
 800dc24:	f7f2 fb42 	bl	80002ac <__adddf3>
 800dc28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	460f      	mov	r7, r1
 800dc30:	f7f2 ff82 	bl	8000b38 <__aeabi_dcmpgt>
 800dc34:	b9c8      	cbnz	r0, 800dc6a <_dtoa_r+0x69a>
 800dc36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	4639      	mov	r1, r7
 800dc3e:	f7f2 ff53 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc42:	b110      	cbz	r0, 800dc4a <_dtoa_r+0x67a>
 800dc44:	f018 0f01 	tst.w	r8, #1
 800dc48:	d10f      	bne.n	800dc6a <_dtoa_r+0x69a>
 800dc4a:	9904      	ldr	r1, [sp, #16]
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f000 fc99 	bl	800e584 <_Bfree>
 800dc52:	2300      	movs	r3, #0
 800dc54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc56:	702b      	strb	r3, [r5, #0]
 800dc58:	f10a 0301 	add.w	r3, sl, #1
 800dc5c:	6013      	str	r3, [r2, #0]
 800dc5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f000 8241 	beq.w	800e0e8 <_dtoa_r+0xb18>
 800dc66:	601d      	str	r5, [r3, #0]
 800dc68:	e23e      	b.n	800e0e8 <_dtoa_r+0xb18>
 800dc6a:	f8cd a020 	str.w	sl, [sp, #32]
 800dc6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dc72:	2a39      	cmp	r2, #57	; 0x39
 800dc74:	f105 33ff 	add.w	r3, r5, #4294967295
 800dc78:	d108      	bne.n	800dc8c <_dtoa_r+0x6bc>
 800dc7a:	459b      	cmp	fp, r3
 800dc7c:	d10a      	bne.n	800dc94 <_dtoa_r+0x6c4>
 800dc7e:	9b08      	ldr	r3, [sp, #32]
 800dc80:	3301      	adds	r3, #1
 800dc82:	9308      	str	r3, [sp, #32]
 800dc84:	2330      	movs	r3, #48	; 0x30
 800dc86:	f88b 3000 	strb.w	r3, [fp]
 800dc8a:	465b      	mov	r3, fp
 800dc8c:	781a      	ldrb	r2, [r3, #0]
 800dc8e:	3201      	adds	r2, #1
 800dc90:	701a      	strb	r2, [r3, #0]
 800dc92:	e78c      	b.n	800dbae <_dtoa_r+0x5de>
 800dc94:	461d      	mov	r5, r3
 800dc96:	e7ea      	b.n	800dc6e <_dtoa_r+0x69e>
 800dc98:	2200      	movs	r2, #0
 800dc9a:	4b9b      	ldr	r3, [pc, #620]	; (800df08 <_dtoa_r+0x938>)
 800dc9c:	f7f2 fcbc 	bl	8000618 <__aeabi_dmul>
 800dca0:	2200      	movs	r2, #0
 800dca2:	2300      	movs	r3, #0
 800dca4:	4606      	mov	r6, r0
 800dca6:	460f      	mov	r7, r1
 800dca8:	f7f2 ff1e 	bl	8000ae8 <__aeabi_dcmpeq>
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d09a      	beq.n	800dbe6 <_dtoa_r+0x616>
 800dcb0:	e7cb      	b.n	800dc4a <_dtoa_r+0x67a>
 800dcb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcb4:	2a00      	cmp	r2, #0
 800dcb6:	f000 808b 	beq.w	800ddd0 <_dtoa_r+0x800>
 800dcba:	9a06      	ldr	r2, [sp, #24]
 800dcbc:	2a01      	cmp	r2, #1
 800dcbe:	dc6e      	bgt.n	800dd9e <_dtoa_r+0x7ce>
 800dcc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dcc2:	2a00      	cmp	r2, #0
 800dcc4:	d067      	beq.n	800dd96 <_dtoa_r+0x7c6>
 800dcc6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dcca:	9f07      	ldr	r7, [sp, #28]
 800dccc:	9d05      	ldr	r5, [sp, #20]
 800dcce:	9a05      	ldr	r2, [sp, #20]
 800dcd0:	2101      	movs	r1, #1
 800dcd2:	441a      	add	r2, r3
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	9205      	str	r2, [sp, #20]
 800dcd8:	4498      	add	r8, r3
 800dcda:	f000 fcf3 	bl	800e6c4 <__i2b>
 800dcde:	4606      	mov	r6, r0
 800dce0:	2d00      	cmp	r5, #0
 800dce2:	dd0c      	ble.n	800dcfe <_dtoa_r+0x72e>
 800dce4:	f1b8 0f00 	cmp.w	r8, #0
 800dce8:	dd09      	ble.n	800dcfe <_dtoa_r+0x72e>
 800dcea:	4545      	cmp	r5, r8
 800dcec:	9a05      	ldr	r2, [sp, #20]
 800dcee:	462b      	mov	r3, r5
 800dcf0:	bfa8      	it	ge
 800dcf2:	4643      	movge	r3, r8
 800dcf4:	1ad2      	subs	r2, r2, r3
 800dcf6:	9205      	str	r2, [sp, #20]
 800dcf8:	1aed      	subs	r5, r5, r3
 800dcfa:	eba8 0803 	sub.w	r8, r8, r3
 800dcfe:	9b07      	ldr	r3, [sp, #28]
 800dd00:	b1eb      	cbz	r3, 800dd3e <_dtoa_r+0x76e>
 800dd02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d067      	beq.n	800ddd8 <_dtoa_r+0x808>
 800dd08:	b18f      	cbz	r7, 800dd2e <_dtoa_r+0x75e>
 800dd0a:	4631      	mov	r1, r6
 800dd0c:	463a      	mov	r2, r7
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f000 fd78 	bl	800e804 <__pow5mult>
 800dd14:	9a04      	ldr	r2, [sp, #16]
 800dd16:	4601      	mov	r1, r0
 800dd18:	4606      	mov	r6, r0
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f000 fcdb 	bl	800e6d6 <__multiply>
 800dd20:	9904      	ldr	r1, [sp, #16]
 800dd22:	9008      	str	r0, [sp, #32]
 800dd24:	4620      	mov	r0, r4
 800dd26:	f000 fc2d 	bl	800e584 <_Bfree>
 800dd2a:	9b08      	ldr	r3, [sp, #32]
 800dd2c:	9304      	str	r3, [sp, #16]
 800dd2e:	9b07      	ldr	r3, [sp, #28]
 800dd30:	1bda      	subs	r2, r3, r7
 800dd32:	d004      	beq.n	800dd3e <_dtoa_r+0x76e>
 800dd34:	9904      	ldr	r1, [sp, #16]
 800dd36:	4620      	mov	r0, r4
 800dd38:	f000 fd64 	bl	800e804 <__pow5mult>
 800dd3c:	9004      	str	r0, [sp, #16]
 800dd3e:	2101      	movs	r1, #1
 800dd40:	4620      	mov	r0, r4
 800dd42:	f000 fcbf 	bl	800e6c4 <__i2b>
 800dd46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd48:	4607      	mov	r7, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f000 81d0 	beq.w	800e0f0 <_dtoa_r+0xb20>
 800dd50:	461a      	mov	r2, r3
 800dd52:	4601      	mov	r1, r0
 800dd54:	4620      	mov	r0, r4
 800dd56:	f000 fd55 	bl	800e804 <__pow5mult>
 800dd5a:	9b06      	ldr	r3, [sp, #24]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	4607      	mov	r7, r0
 800dd60:	dc40      	bgt.n	800dde4 <_dtoa_r+0x814>
 800dd62:	9b00      	ldr	r3, [sp, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d139      	bne.n	800dddc <_dtoa_r+0x80c>
 800dd68:	9b01      	ldr	r3, [sp, #4]
 800dd6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d136      	bne.n	800dde0 <_dtoa_r+0x810>
 800dd72:	9b01      	ldr	r3, [sp, #4]
 800dd74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd78:	0d1b      	lsrs	r3, r3, #20
 800dd7a:	051b      	lsls	r3, r3, #20
 800dd7c:	b12b      	cbz	r3, 800dd8a <_dtoa_r+0x7ba>
 800dd7e:	9b05      	ldr	r3, [sp, #20]
 800dd80:	3301      	adds	r3, #1
 800dd82:	9305      	str	r3, [sp, #20]
 800dd84:	f108 0801 	add.w	r8, r8, #1
 800dd88:	2301      	movs	r3, #1
 800dd8a:	9307      	str	r3, [sp, #28]
 800dd8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d12a      	bne.n	800dde8 <_dtoa_r+0x818>
 800dd92:	2001      	movs	r0, #1
 800dd94:	e030      	b.n	800ddf8 <_dtoa_r+0x828>
 800dd96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd9c:	e795      	b.n	800dcca <_dtoa_r+0x6fa>
 800dd9e:	9b07      	ldr	r3, [sp, #28]
 800dda0:	f109 37ff 	add.w	r7, r9, #4294967295
 800dda4:	42bb      	cmp	r3, r7
 800dda6:	bfbf      	itttt	lt
 800dda8:	9b07      	ldrlt	r3, [sp, #28]
 800ddaa:	9707      	strlt	r7, [sp, #28]
 800ddac:	1afa      	sublt	r2, r7, r3
 800ddae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ddb0:	bfbb      	ittet	lt
 800ddb2:	189b      	addlt	r3, r3, r2
 800ddb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ddb6:	1bdf      	subge	r7, r3, r7
 800ddb8:	2700      	movlt	r7, #0
 800ddba:	f1b9 0f00 	cmp.w	r9, #0
 800ddbe:	bfb5      	itete	lt
 800ddc0:	9b05      	ldrlt	r3, [sp, #20]
 800ddc2:	9d05      	ldrge	r5, [sp, #20]
 800ddc4:	eba3 0509 	sublt.w	r5, r3, r9
 800ddc8:	464b      	movge	r3, r9
 800ddca:	bfb8      	it	lt
 800ddcc:	2300      	movlt	r3, #0
 800ddce:	e77e      	b.n	800dcce <_dtoa_r+0x6fe>
 800ddd0:	9f07      	ldr	r7, [sp, #28]
 800ddd2:	9d05      	ldr	r5, [sp, #20]
 800ddd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ddd6:	e783      	b.n	800dce0 <_dtoa_r+0x710>
 800ddd8:	9a07      	ldr	r2, [sp, #28]
 800ddda:	e7ab      	b.n	800dd34 <_dtoa_r+0x764>
 800dddc:	2300      	movs	r3, #0
 800ddde:	e7d4      	b.n	800dd8a <_dtoa_r+0x7ba>
 800dde0:	9b00      	ldr	r3, [sp, #0]
 800dde2:	e7d2      	b.n	800dd8a <_dtoa_r+0x7ba>
 800dde4:	2300      	movs	r3, #0
 800dde6:	9307      	str	r3, [sp, #28]
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ddee:	6918      	ldr	r0, [r3, #16]
 800ddf0:	f000 fc1a 	bl	800e628 <__hi0bits>
 800ddf4:	f1c0 0020 	rsb	r0, r0, #32
 800ddf8:	4440      	add	r0, r8
 800ddfa:	f010 001f 	ands.w	r0, r0, #31
 800ddfe:	d047      	beq.n	800de90 <_dtoa_r+0x8c0>
 800de00:	f1c0 0320 	rsb	r3, r0, #32
 800de04:	2b04      	cmp	r3, #4
 800de06:	dd3b      	ble.n	800de80 <_dtoa_r+0x8b0>
 800de08:	9b05      	ldr	r3, [sp, #20]
 800de0a:	f1c0 001c 	rsb	r0, r0, #28
 800de0e:	4403      	add	r3, r0
 800de10:	9305      	str	r3, [sp, #20]
 800de12:	4405      	add	r5, r0
 800de14:	4480      	add	r8, r0
 800de16:	9b05      	ldr	r3, [sp, #20]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	dd05      	ble.n	800de28 <_dtoa_r+0x858>
 800de1c:	461a      	mov	r2, r3
 800de1e:	9904      	ldr	r1, [sp, #16]
 800de20:	4620      	mov	r0, r4
 800de22:	f000 fd3d 	bl	800e8a0 <__lshift>
 800de26:	9004      	str	r0, [sp, #16]
 800de28:	f1b8 0f00 	cmp.w	r8, #0
 800de2c:	dd05      	ble.n	800de3a <_dtoa_r+0x86a>
 800de2e:	4639      	mov	r1, r7
 800de30:	4642      	mov	r2, r8
 800de32:	4620      	mov	r0, r4
 800de34:	f000 fd34 	bl	800e8a0 <__lshift>
 800de38:	4607      	mov	r7, r0
 800de3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de3c:	b353      	cbz	r3, 800de94 <_dtoa_r+0x8c4>
 800de3e:	4639      	mov	r1, r7
 800de40:	9804      	ldr	r0, [sp, #16]
 800de42:	f000 fd81 	bl	800e948 <__mcmp>
 800de46:	2800      	cmp	r0, #0
 800de48:	da24      	bge.n	800de94 <_dtoa_r+0x8c4>
 800de4a:	2300      	movs	r3, #0
 800de4c:	220a      	movs	r2, #10
 800de4e:	9904      	ldr	r1, [sp, #16]
 800de50:	4620      	mov	r0, r4
 800de52:	f000 fbae 	bl	800e5b2 <__multadd>
 800de56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de58:	9004      	str	r0, [sp, #16]
 800de5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de5e:	2b00      	cmp	r3, #0
 800de60:	f000 814d 	beq.w	800e0fe <_dtoa_r+0xb2e>
 800de64:	2300      	movs	r3, #0
 800de66:	4631      	mov	r1, r6
 800de68:	220a      	movs	r2, #10
 800de6a:	4620      	mov	r0, r4
 800de6c:	f000 fba1 	bl	800e5b2 <__multadd>
 800de70:	9b02      	ldr	r3, [sp, #8]
 800de72:	2b00      	cmp	r3, #0
 800de74:	4606      	mov	r6, r0
 800de76:	dc4f      	bgt.n	800df18 <_dtoa_r+0x948>
 800de78:	9b06      	ldr	r3, [sp, #24]
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	dd4c      	ble.n	800df18 <_dtoa_r+0x948>
 800de7e:	e011      	b.n	800dea4 <_dtoa_r+0x8d4>
 800de80:	d0c9      	beq.n	800de16 <_dtoa_r+0x846>
 800de82:	9a05      	ldr	r2, [sp, #20]
 800de84:	331c      	adds	r3, #28
 800de86:	441a      	add	r2, r3
 800de88:	9205      	str	r2, [sp, #20]
 800de8a:	441d      	add	r5, r3
 800de8c:	4498      	add	r8, r3
 800de8e:	e7c2      	b.n	800de16 <_dtoa_r+0x846>
 800de90:	4603      	mov	r3, r0
 800de92:	e7f6      	b.n	800de82 <_dtoa_r+0x8b2>
 800de94:	f1b9 0f00 	cmp.w	r9, #0
 800de98:	dc38      	bgt.n	800df0c <_dtoa_r+0x93c>
 800de9a:	9b06      	ldr	r3, [sp, #24]
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	dd35      	ble.n	800df0c <_dtoa_r+0x93c>
 800dea0:	f8cd 9008 	str.w	r9, [sp, #8]
 800dea4:	9b02      	ldr	r3, [sp, #8]
 800dea6:	b963      	cbnz	r3, 800dec2 <_dtoa_r+0x8f2>
 800dea8:	4639      	mov	r1, r7
 800deaa:	2205      	movs	r2, #5
 800deac:	4620      	mov	r0, r4
 800deae:	f000 fb80 	bl	800e5b2 <__multadd>
 800deb2:	4601      	mov	r1, r0
 800deb4:	4607      	mov	r7, r0
 800deb6:	9804      	ldr	r0, [sp, #16]
 800deb8:	f000 fd46 	bl	800e948 <__mcmp>
 800debc:	2800      	cmp	r0, #0
 800debe:	f73f adcc 	bgt.w	800da5a <_dtoa_r+0x48a>
 800dec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dec4:	465d      	mov	r5, fp
 800dec6:	ea6f 0a03 	mvn.w	sl, r3
 800deca:	f04f 0900 	mov.w	r9, #0
 800dece:	4639      	mov	r1, r7
 800ded0:	4620      	mov	r0, r4
 800ded2:	f000 fb57 	bl	800e584 <_Bfree>
 800ded6:	2e00      	cmp	r6, #0
 800ded8:	f43f aeb7 	beq.w	800dc4a <_dtoa_r+0x67a>
 800dedc:	f1b9 0f00 	cmp.w	r9, #0
 800dee0:	d005      	beq.n	800deee <_dtoa_r+0x91e>
 800dee2:	45b1      	cmp	r9, r6
 800dee4:	d003      	beq.n	800deee <_dtoa_r+0x91e>
 800dee6:	4649      	mov	r1, r9
 800dee8:	4620      	mov	r0, r4
 800deea:	f000 fb4b 	bl	800e584 <_Bfree>
 800deee:	4631      	mov	r1, r6
 800def0:	4620      	mov	r0, r4
 800def2:	f000 fb47 	bl	800e584 <_Bfree>
 800def6:	e6a8      	b.n	800dc4a <_dtoa_r+0x67a>
 800def8:	2700      	movs	r7, #0
 800defa:	463e      	mov	r6, r7
 800defc:	e7e1      	b.n	800dec2 <_dtoa_r+0x8f2>
 800defe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800df02:	463e      	mov	r6, r7
 800df04:	e5a9      	b.n	800da5a <_dtoa_r+0x48a>
 800df06:	bf00      	nop
 800df08:	40240000 	.word	0x40240000
 800df0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df0e:	f8cd 9008 	str.w	r9, [sp, #8]
 800df12:	2b00      	cmp	r3, #0
 800df14:	f000 80fa 	beq.w	800e10c <_dtoa_r+0xb3c>
 800df18:	2d00      	cmp	r5, #0
 800df1a:	dd05      	ble.n	800df28 <_dtoa_r+0x958>
 800df1c:	4631      	mov	r1, r6
 800df1e:	462a      	mov	r2, r5
 800df20:	4620      	mov	r0, r4
 800df22:	f000 fcbd 	bl	800e8a0 <__lshift>
 800df26:	4606      	mov	r6, r0
 800df28:	9b07      	ldr	r3, [sp, #28]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d04c      	beq.n	800dfc8 <_dtoa_r+0x9f8>
 800df2e:	6871      	ldr	r1, [r6, #4]
 800df30:	4620      	mov	r0, r4
 800df32:	f000 faf3 	bl	800e51c <_Balloc>
 800df36:	6932      	ldr	r2, [r6, #16]
 800df38:	3202      	adds	r2, #2
 800df3a:	4605      	mov	r5, r0
 800df3c:	0092      	lsls	r2, r2, #2
 800df3e:	f106 010c 	add.w	r1, r6, #12
 800df42:	300c      	adds	r0, #12
 800df44:	f7fe fba6 	bl	800c694 <memcpy>
 800df48:	2201      	movs	r2, #1
 800df4a:	4629      	mov	r1, r5
 800df4c:	4620      	mov	r0, r4
 800df4e:	f000 fca7 	bl	800e8a0 <__lshift>
 800df52:	9b00      	ldr	r3, [sp, #0]
 800df54:	f8cd b014 	str.w	fp, [sp, #20]
 800df58:	f003 0301 	and.w	r3, r3, #1
 800df5c:	46b1      	mov	r9, r6
 800df5e:	9307      	str	r3, [sp, #28]
 800df60:	4606      	mov	r6, r0
 800df62:	4639      	mov	r1, r7
 800df64:	9804      	ldr	r0, [sp, #16]
 800df66:	f7ff faa7 	bl	800d4b8 <quorem>
 800df6a:	4649      	mov	r1, r9
 800df6c:	4605      	mov	r5, r0
 800df6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800df72:	9804      	ldr	r0, [sp, #16]
 800df74:	f000 fce8 	bl	800e948 <__mcmp>
 800df78:	4632      	mov	r2, r6
 800df7a:	9000      	str	r0, [sp, #0]
 800df7c:	4639      	mov	r1, r7
 800df7e:	4620      	mov	r0, r4
 800df80:	f000 fcfc 	bl	800e97c <__mdiff>
 800df84:	68c3      	ldr	r3, [r0, #12]
 800df86:	4602      	mov	r2, r0
 800df88:	bb03      	cbnz	r3, 800dfcc <_dtoa_r+0x9fc>
 800df8a:	4601      	mov	r1, r0
 800df8c:	9008      	str	r0, [sp, #32]
 800df8e:	9804      	ldr	r0, [sp, #16]
 800df90:	f000 fcda 	bl	800e948 <__mcmp>
 800df94:	9a08      	ldr	r2, [sp, #32]
 800df96:	4603      	mov	r3, r0
 800df98:	4611      	mov	r1, r2
 800df9a:	4620      	mov	r0, r4
 800df9c:	9308      	str	r3, [sp, #32]
 800df9e:	f000 faf1 	bl	800e584 <_Bfree>
 800dfa2:	9b08      	ldr	r3, [sp, #32]
 800dfa4:	b9a3      	cbnz	r3, 800dfd0 <_dtoa_r+0xa00>
 800dfa6:	9a06      	ldr	r2, [sp, #24]
 800dfa8:	b992      	cbnz	r2, 800dfd0 <_dtoa_r+0xa00>
 800dfaa:	9a07      	ldr	r2, [sp, #28]
 800dfac:	b982      	cbnz	r2, 800dfd0 <_dtoa_r+0xa00>
 800dfae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dfb2:	d029      	beq.n	800e008 <_dtoa_r+0xa38>
 800dfb4:	9b00      	ldr	r3, [sp, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	dd01      	ble.n	800dfbe <_dtoa_r+0x9ee>
 800dfba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800dfbe:	9b05      	ldr	r3, [sp, #20]
 800dfc0:	1c5d      	adds	r5, r3, #1
 800dfc2:	f883 8000 	strb.w	r8, [r3]
 800dfc6:	e782      	b.n	800dece <_dtoa_r+0x8fe>
 800dfc8:	4630      	mov	r0, r6
 800dfca:	e7c2      	b.n	800df52 <_dtoa_r+0x982>
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e7e3      	b.n	800df98 <_dtoa_r+0x9c8>
 800dfd0:	9a00      	ldr	r2, [sp, #0]
 800dfd2:	2a00      	cmp	r2, #0
 800dfd4:	db04      	blt.n	800dfe0 <_dtoa_r+0xa10>
 800dfd6:	d125      	bne.n	800e024 <_dtoa_r+0xa54>
 800dfd8:	9a06      	ldr	r2, [sp, #24]
 800dfda:	bb1a      	cbnz	r2, 800e024 <_dtoa_r+0xa54>
 800dfdc:	9a07      	ldr	r2, [sp, #28]
 800dfde:	bb0a      	cbnz	r2, 800e024 <_dtoa_r+0xa54>
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	ddec      	ble.n	800dfbe <_dtoa_r+0x9ee>
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	9904      	ldr	r1, [sp, #16]
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f000 fc59 	bl	800e8a0 <__lshift>
 800dfee:	4639      	mov	r1, r7
 800dff0:	9004      	str	r0, [sp, #16]
 800dff2:	f000 fca9 	bl	800e948 <__mcmp>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	dc03      	bgt.n	800e002 <_dtoa_r+0xa32>
 800dffa:	d1e0      	bne.n	800dfbe <_dtoa_r+0x9ee>
 800dffc:	f018 0f01 	tst.w	r8, #1
 800e000:	d0dd      	beq.n	800dfbe <_dtoa_r+0x9ee>
 800e002:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e006:	d1d8      	bne.n	800dfba <_dtoa_r+0x9ea>
 800e008:	9b05      	ldr	r3, [sp, #20]
 800e00a:	9a05      	ldr	r2, [sp, #20]
 800e00c:	1c5d      	adds	r5, r3, #1
 800e00e:	2339      	movs	r3, #57	; 0x39
 800e010:	7013      	strb	r3, [r2, #0]
 800e012:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e016:	2b39      	cmp	r3, #57	; 0x39
 800e018:	f105 32ff 	add.w	r2, r5, #4294967295
 800e01c:	d04f      	beq.n	800e0be <_dtoa_r+0xaee>
 800e01e:	3301      	adds	r3, #1
 800e020:	7013      	strb	r3, [r2, #0]
 800e022:	e754      	b.n	800dece <_dtoa_r+0x8fe>
 800e024:	9a05      	ldr	r2, [sp, #20]
 800e026:	2b00      	cmp	r3, #0
 800e028:	f102 0501 	add.w	r5, r2, #1
 800e02c:	dd06      	ble.n	800e03c <_dtoa_r+0xa6c>
 800e02e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e032:	d0e9      	beq.n	800e008 <_dtoa_r+0xa38>
 800e034:	f108 0801 	add.w	r8, r8, #1
 800e038:	9b05      	ldr	r3, [sp, #20]
 800e03a:	e7c2      	b.n	800dfc2 <_dtoa_r+0x9f2>
 800e03c:	9a02      	ldr	r2, [sp, #8]
 800e03e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e042:	eba5 030b 	sub.w	r3, r5, fp
 800e046:	4293      	cmp	r3, r2
 800e048:	d021      	beq.n	800e08e <_dtoa_r+0xabe>
 800e04a:	2300      	movs	r3, #0
 800e04c:	220a      	movs	r2, #10
 800e04e:	9904      	ldr	r1, [sp, #16]
 800e050:	4620      	mov	r0, r4
 800e052:	f000 faae 	bl	800e5b2 <__multadd>
 800e056:	45b1      	cmp	r9, r6
 800e058:	9004      	str	r0, [sp, #16]
 800e05a:	f04f 0300 	mov.w	r3, #0
 800e05e:	f04f 020a 	mov.w	r2, #10
 800e062:	4649      	mov	r1, r9
 800e064:	4620      	mov	r0, r4
 800e066:	d105      	bne.n	800e074 <_dtoa_r+0xaa4>
 800e068:	f000 faa3 	bl	800e5b2 <__multadd>
 800e06c:	4681      	mov	r9, r0
 800e06e:	4606      	mov	r6, r0
 800e070:	9505      	str	r5, [sp, #20]
 800e072:	e776      	b.n	800df62 <_dtoa_r+0x992>
 800e074:	f000 fa9d 	bl	800e5b2 <__multadd>
 800e078:	4631      	mov	r1, r6
 800e07a:	4681      	mov	r9, r0
 800e07c:	2300      	movs	r3, #0
 800e07e:	220a      	movs	r2, #10
 800e080:	4620      	mov	r0, r4
 800e082:	f000 fa96 	bl	800e5b2 <__multadd>
 800e086:	4606      	mov	r6, r0
 800e088:	e7f2      	b.n	800e070 <_dtoa_r+0xaa0>
 800e08a:	f04f 0900 	mov.w	r9, #0
 800e08e:	2201      	movs	r2, #1
 800e090:	9904      	ldr	r1, [sp, #16]
 800e092:	4620      	mov	r0, r4
 800e094:	f000 fc04 	bl	800e8a0 <__lshift>
 800e098:	4639      	mov	r1, r7
 800e09a:	9004      	str	r0, [sp, #16]
 800e09c:	f000 fc54 	bl	800e948 <__mcmp>
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	dcb6      	bgt.n	800e012 <_dtoa_r+0xa42>
 800e0a4:	d102      	bne.n	800e0ac <_dtoa_r+0xadc>
 800e0a6:	f018 0f01 	tst.w	r8, #1
 800e0aa:	d1b2      	bne.n	800e012 <_dtoa_r+0xa42>
 800e0ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e0b0:	2b30      	cmp	r3, #48	; 0x30
 800e0b2:	f105 32ff 	add.w	r2, r5, #4294967295
 800e0b6:	f47f af0a 	bne.w	800dece <_dtoa_r+0x8fe>
 800e0ba:	4615      	mov	r5, r2
 800e0bc:	e7f6      	b.n	800e0ac <_dtoa_r+0xadc>
 800e0be:	4593      	cmp	fp, r2
 800e0c0:	d105      	bne.n	800e0ce <_dtoa_r+0xafe>
 800e0c2:	2331      	movs	r3, #49	; 0x31
 800e0c4:	f10a 0a01 	add.w	sl, sl, #1
 800e0c8:	f88b 3000 	strb.w	r3, [fp]
 800e0cc:	e6ff      	b.n	800dece <_dtoa_r+0x8fe>
 800e0ce:	4615      	mov	r5, r2
 800e0d0:	e79f      	b.n	800e012 <_dtoa_r+0xa42>
 800e0d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e138 <_dtoa_r+0xb68>
 800e0d6:	e007      	b.n	800e0e8 <_dtoa_r+0xb18>
 800e0d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0da:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e13c <_dtoa_r+0xb6c>
 800e0de:	b11b      	cbz	r3, 800e0e8 <_dtoa_r+0xb18>
 800e0e0:	f10b 0308 	add.w	r3, fp, #8
 800e0e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e0e6:	6013      	str	r3, [r2, #0]
 800e0e8:	4658      	mov	r0, fp
 800e0ea:	b017      	add	sp, #92	; 0x5c
 800e0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0f0:	9b06      	ldr	r3, [sp, #24]
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	f77f ae35 	ble.w	800dd62 <_dtoa_r+0x792>
 800e0f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0fa:	9307      	str	r3, [sp, #28]
 800e0fc:	e649      	b.n	800dd92 <_dtoa_r+0x7c2>
 800e0fe:	9b02      	ldr	r3, [sp, #8]
 800e100:	2b00      	cmp	r3, #0
 800e102:	dc03      	bgt.n	800e10c <_dtoa_r+0xb3c>
 800e104:	9b06      	ldr	r3, [sp, #24]
 800e106:	2b02      	cmp	r3, #2
 800e108:	f73f aecc 	bgt.w	800dea4 <_dtoa_r+0x8d4>
 800e10c:	465d      	mov	r5, fp
 800e10e:	4639      	mov	r1, r7
 800e110:	9804      	ldr	r0, [sp, #16]
 800e112:	f7ff f9d1 	bl	800d4b8 <quorem>
 800e116:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e11a:	f805 8b01 	strb.w	r8, [r5], #1
 800e11e:	9a02      	ldr	r2, [sp, #8]
 800e120:	eba5 030b 	sub.w	r3, r5, fp
 800e124:	429a      	cmp	r2, r3
 800e126:	ddb0      	ble.n	800e08a <_dtoa_r+0xaba>
 800e128:	2300      	movs	r3, #0
 800e12a:	220a      	movs	r2, #10
 800e12c:	9904      	ldr	r1, [sp, #16]
 800e12e:	4620      	mov	r0, r4
 800e130:	f000 fa3f 	bl	800e5b2 <__multadd>
 800e134:	9004      	str	r0, [sp, #16]
 800e136:	e7ea      	b.n	800e10e <_dtoa_r+0xb3e>
 800e138:	0800f04c 	.word	0x0800f04c
 800e13c:	0800f070 	.word	0x0800f070

0800e140 <__sflush_r>:
 800e140:	898a      	ldrh	r2, [r1, #12]
 800e142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e146:	4605      	mov	r5, r0
 800e148:	0710      	lsls	r0, r2, #28
 800e14a:	460c      	mov	r4, r1
 800e14c:	d458      	bmi.n	800e200 <__sflush_r+0xc0>
 800e14e:	684b      	ldr	r3, [r1, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	dc05      	bgt.n	800e160 <__sflush_r+0x20>
 800e154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e156:	2b00      	cmp	r3, #0
 800e158:	dc02      	bgt.n	800e160 <__sflush_r+0x20>
 800e15a:	2000      	movs	r0, #0
 800e15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e162:	2e00      	cmp	r6, #0
 800e164:	d0f9      	beq.n	800e15a <__sflush_r+0x1a>
 800e166:	2300      	movs	r3, #0
 800e168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e16c:	682f      	ldr	r7, [r5, #0]
 800e16e:	6a21      	ldr	r1, [r4, #32]
 800e170:	602b      	str	r3, [r5, #0]
 800e172:	d032      	beq.n	800e1da <__sflush_r+0x9a>
 800e174:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e176:	89a3      	ldrh	r3, [r4, #12]
 800e178:	075a      	lsls	r2, r3, #29
 800e17a:	d505      	bpl.n	800e188 <__sflush_r+0x48>
 800e17c:	6863      	ldr	r3, [r4, #4]
 800e17e:	1ac0      	subs	r0, r0, r3
 800e180:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e182:	b10b      	cbz	r3, 800e188 <__sflush_r+0x48>
 800e184:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e186:	1ac0      	subs	r0, r0, r3
 800e188:	2300      	movs	r3, #0
 800e18a:	4602      	mov	r2, r0
 800e18c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e18e:	6a21      	ldr	r1, [r4, #32]
 800e190:	4628      	mov	r0, r5
 800e192:	47b0      	blx	r6
 800e194:	1c43      	adds	r3, r0, #1
 800e196:	89a3      	ldrh	r3, [r4, #12]
 800e198:	d106      	bne.n	800e1a8 <__sflush_r+0x68>
 800e19a:	6829      	ldr	r1, [r5, #0]
 800e19c:	291d      	cmp	r1, #29
 800e19e:	d848      	bhi.n	800e232 <__sflush_r+0xf2>
 800e1a0:	4a29      	ldr	r2, [pc, #164]	; (800e248 <__sflush_r+0x108>)
 800e1a2:	40ca      	lsrs	r2, r1
 800e1a4:	07d6      	lsls	r6, r2, #31
 800e1a6:	d544      	bpl.n	800e232 <__sflush_r+0xf2>
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	6062      	str	r2, [r4, #4]
 800e1ac:	04d9      	lsls	r1, r3, #19
 800e1ae:	6922      	ldr	r2, [r4, #16]
 800e1b0:	6022      	str	r2, [r4, #0]
 800e1b2:	d504      	bpl.n	800e1be <__sflush_r+0x7e>
 800e1b4:	1c42      	adds	r2, r0, #1
 800e1b6:	d101      	bne.n	800e1bc <__sflush_r+0x7c>
 800e1b8:	682b      	ldr	r3, [r5, #0]
 800e1ba:	b903      	cbnz	r3, 800e1be <__sflush_r+0x7e>
 800e1bc:	6560      	str	r0, [r4, #84]	; 0x54
 800e1be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1c0:	602f      	str	r7, [r5, #0]
 800e1c2:	2900      	cmp	r1, #0
 800e1c4:	d0c9      	beq.n	800e15a <__sflush_r+0x1a>
 800e1c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1ca:	4299      	cmp	r1, r3
 800e1cc:	d002      	beq.n	800e1d4 <__sflush_r+0x94>
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	f7fe fa74 	bl	800c6bc <_free_r>
 800e1d4:	2000      	movs	r0, #0
 800e1d6:	6360      	str	r0, [r4, #52]	; 0x34
 800e1d8:	e7c0      	b.n	800e15c <__sflush_r+0x1c>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	4628      	mov	r0, r5
 800e1de:	47b0      	blx	r6
 800e1e0:	1c41      	adds	r1, r0, #1
 800e1e2:	d1c8      	bne.n	800e176 <__sflush_r+0x36>
 800e1e4:	682b      	ldr	r3, [r5, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d0c5      	beq.n	800e176 <__sflush_r+0x36>
 800e1ea:	2b1d      	cmp	r3, #29
 800e1ec:	d001      	beq.n	800e1f2 <__sflush_r+0xb2>
 800e1ee:	2b16      	cmp	r3, #22
 800e1f0:	d101      	bne.n	800e1f6 <__sflush_r+0xb6>
 800e1f2:	602f      	str	r7, [r5, #0]
 800e1f4:	e7b1      	b.n	800e15a <__sflush_r+0x1a>
 800e1f6:	89a3      	ldrh	r3, [r4, #12]
 800e1f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1fc:	81a3      	strh	r3, [r4, #12]
 800e1fe:	e7ad      	b.n	800e15c <__sflush_r+0x1c>
 800e200:	690f      	ldr	r7, [r1, #16]
 800e202:	2f00      	cmp	r7, #0
 800e204:	d0a9      	beq.n	800e15a <__sflush_r+0x1a>
 800e206:	0793      	lsls	r3, r2, #30
 800e208:	680e      	ldr	r6, [r1, #0]
 800e20a:	bf08      	it	eq
 800e20c:	694b      	ldreq	r3, [r1, #20]
 800e20e:	600f      	str	r7, [r1, #0]
 800e210:	bf18      	it	ne
 800e212:	2300      	movne	r3, #0
 800e214:	eba6 0807 	sub.w	r8, r6, r7
 800e218:	608b      	str	r3, [r1, #8]
 800e21a:	f1b8 0f00 	cmp.w	r8, #0
 800e21e:	dd9c      	ble.n	800e15a <__sflush_r+0x1a>
 800e220:	4643      	mov	r3, r8
 800e222:	463a      	mov	r2, r7
 800e224:	6a21      	ldr	r1, [r4, #32]
 800e226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e228:	4628      	mov	r0, r5
 800e22a:	47b0      	blx	r6
 800e22c:	2800      	cmp	r0, #0
 800e22e:	dc06      	bgt.n	800e23e <__sflush_r+0xfe>
 800e230:	89a3      	ldrh	r3, [r4, #12]
 800e232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e236:	81a3      	strh	r3, [r4, #12]
 800e238:	f04f 30ff 	mov.w	r0, #4294967295
 800e23c:	e78e      	b.n	800e15c <__sflush_r+0x1c>
 800e23e:	4407      	add	r7, r0
 800e240:	eba8 0800 	sub.w	r8, r8, r0
 800e244:	e7e9      	b.n	800e21a <__sflush_r+0xda>
 800e246:	bf00      	nop
 800e248:	20400001 	.word	0x20400001

0800e24c <_fflush_r>:
 800e24c:	b538      	push	{r3, r4, r5, lr}
 800e24e:	690b      	ldr	r3, [r1, #16]
 800e250:	4605      	mov	r5, r0
 800e252:	460c      	mov	r4, r1
 800e254:	b1db      	cbz	r3, 800e28e <_fflush_r+0x42>
 800e256:	b118      	cbz	r0, 800e260 <_fflush_r+0x14>
 800e258:	6983      	ldr	r3, [r0, #24]
 800e25a:	b90b      	cbnz	r3, 800e260 <_fflush_r+0x14>
 800e25c:	f000 f860 	bl	800e320 <__sinit>
 800e260:	4b0c      	ldr	r3, [pc, #48]	; (800e294 <_fflush_r+0x48>)
 800e262:	429c      	cmp	r4, r3
 800e264:	d109      	bne.n	800e27a <_fflush_r+0x2e>
 800e266:	686c      	ldr	r4, [r5, #4]
 800e268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e26c:	b17b      	cbz	r3, 800e28e <_fflush_r+0x42>
 800e26e:	4621      	mov	r1, r4
 800e270:	4628      	mov	r0, r5
 800e272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e276:	f7ff bf63 	b.w	800e140 <__sflush_r>
 800e27a:	4b07      	ldr	r3, [pc, #28]	; (800e298 <_fflush_r+0x4c>)
 800e27c:	429c      	cmp	r4, r3
 800e27e:	d101      	bne.n	800e284 <_fflush_r+0x38>
 800e280:	68ac      	ldr	r4, [r5, #8]
 800e282:	e7f1      	b.n	800e268 <_fflush_r+0x1c>
 800e284:	4b05      	ldr	r3, [pc, #20]	; (800e29c <_fflush_r+0x50>)
 800e286:	429c      	cmp	r4, r3
 800e288:	bf08      	it	eq
 800e28a:	68ec      	ldreq	r4, [r5, #12]
 800e28c:	e7ec      	b.n	800e268 <_fflush_r+0x1c>
 800e28e:	2000      	movs	r0, #0
 800e290:	bd38      	pop	{r3, r4, r5, pc}
 800e292:	bf00      	nop
 800e294:	0800f0a0 	.word	0x0800f0a0
 800e298:	0800f0c0 	.word	0x0800f0c0
 800e29c:	0800f080 	.word	0x0800f080

0800e2a0 <std>:
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	b510      	push	{r4, lr}
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	e9c0 3300 	strd	r3, r3, [r0]
 800e2aa:	6083      	str	r3, [r0, #8]
 800e2ac:	8181      	strh	r1, [r0, #12]
 800e2ae:	6643      	str	r3, [r0, #100]	; 0x64
 800e2b0:	81c2      	strh	r2, [r0, #14]
 800e2b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2b6:	6183      	str	r3, [r0, #24]
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	2208      	movs	r2, #8
 800e2bc:	305c      	adds	r0, #92	; 0x5c
 800e2be:	f7fe f9f4 	bl	800c6aa <memset>
 800e2c2:	4b05      	ldr	r3, [pc, #20]	; (800e2d8 <std+0x38>)
 800e2c4:	6263      	str	r3, [r4, #36]	; 0x24
 800e2c6:	4b05      	ldr	r3, [pc, #20]	; (800e2dc <std+0x3c>)
 800e2c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2ca:	4b05      	ldr	r3, [pc, #20]	; (800e2e0 <std+0x40>)
 800e2cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2ce:	4b05      	ldr	r3, [pc, #20]	; (800e2e4 <std+0x44>)
 800e2d0:	6224      	str	r4, [r4, #32]
 800e2d2:	6323      	str	r3, [r4, #48]	; 0x30
 800e2d4:	bd10      	pop	{r4, pc}
 800e2d6:	bf00      	nop
 800e2d8:	0800ed71 	.word	0x0800ed71
 800e2dc:	0800ed93 	.word	0x0800ed93
 800e2e0:	0800edcb 	.word	0x0800edcb
 800e2e4:	0800edef 	.word	0x0800edef

0800e2e8 <_cleanup_r>:
 800e2e8:	4901      	ldr	r1, [pc, #4]	; (800e2f0 <_cleanup_r+0x8>)
 800e2ea:	f000 b885 	b.w	800e3f8 <_fwalk_reent>
 800e2ee:	bf00      	nop
 800e2f0:	0800e24d 	.word	0x0800e24d

0800e2f4 <__sfmoreglue>:
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	1e4a      	subs	r2, r1, #1
 800e2f8:	2568      	movs	r5, #104	; 0x68
 800e2fa:	4355      	muls	r5, r2
 800e2fc:	460e      	mov	r6, r1
 800e2fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e302:	f7fe fa29 	bl	800c758 <_malloc_r>
 800e306:	4604      	mov	r4, r0
 800e308:	b140      	cbz	r0, 800e31c <__sfmoreglue+0x28>
 800e30a:	2100      	movs	r1, #0
 800e30c:	e9c0 1600 	strd	r1, r6, [r0]
 800e310:	300c      	adds	r0, #12
 800e312:	60a0      	str	r0, [r4, #8]
 800e314:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e318:	f7fe f9c7 	bl	800c6aa <memset>
 800e31c:	4620      	mov	r0, r4
 800e31e:	bd70      	pop	{r4, r5, r6, pc}

0800e320 <__sinit>:
 800e320:	6983      	ldr	r3, [r0, #24]
 800e322:	b510      	push	{r4, lr}
 800e324:	4604      	mov	r4, r0
 800e326:	bb33      	cbnz	r3, 800e376 <__sinit+0x56>
 800e328:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e32c:	6503      	str	r3, [r0, #80]	; 0x50
 800e32e:	4b12      	ldr	r3, [pc, #72]	; (800e378 <__sinit+0x58>)
 800e330:	4a12      	ldr	r2, [pc, #72]	; (800e37c <__sinit+0x5c>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	6282      	str	r2, [r0, #40]	; 0x28
 800e336:	4298      	cmp	r0, r3
 800e338:	bf04      	itt	eq
 800e33a:	2301      	moveq	r3, #1
 800e33c:	6183      	streq	r3, [r0, #24]
 800e33e:	f000 f81f 	bl	800e380 <__sfp>
 800e342:	6060      	str	r0, [r4, #4]
 800e344:	4620      	mov	r0, r4
 800e346:	f000 f81b 	bl	800e380 <__sfp>
 800e34a:	60a0      	str	r0, [r4, #8]
 800e34c:	4620      	mov	r0, r4
 800e34e:	f000 f817 	bl	800e380 <__sfp>
 800e352:	2200      	movs	r2, #0
 800e354:	60e0      	str	r0, [r4, #12]
 800e356:	2104      	movs	r1, #4
 800e358:	6860      	ldr	r0, [r4, #4]
 800e35a:	f7ff ffa1 	bl	800e2a0 <std>
 800e35e:	2201      	movs	r2, #1
 800e360:	2109      	movs	r1, #9
 800e362:	68a0      	ldr	r0, [r4, #8]
 800e364:	f7ff ff9c 	bl	800e2a0 <std>
 800e368:	2202      	movs	r2, #2
 800e36a:	2112      	movs	r1, #18
 800e36c:	68e0      	ldr	r0, [r4, #12]
 800e36e:	f7ff ff97 	bl	800e2a0 <std>
 800e372:	2301      	movs	r3, #1
 800e374:	61a3      	str	r3, [r4, #24]
 800e376:	bd10      	pop	{r4, pc}
 800e378:	0800f038 	.word	0x0800f038
 800e37c:	0800e2e9 	.word	0x0800e2e9

0800e380 <__sfp>:
 800e380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e382:	4b1b      	ldr	r3, [pc, #108]	; (800e3f0 <__sfp+0x70>)
 800e384:	681e      	ldr	r6, [r3, #0]
 800e386:	69b3      	ldr	r3, [r6, #24]
 800e388:	4607      	mov	r7, r0
 800e38a:	b913      	cbnz	r3, 800e392 <__sfp+0x12>
 800e38c:	4630      	mov	r0, r6
 800e38e:	f7ff ffc7 	bl	800e320 <__sinit>
 800e392:	3648      	adds	r6, #72	; 0x48
 800e394:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e398:	3b01      	subs	r3, #1
 800e39a:	d503      	bpl.n	800e3a4 <__sfp+0x24>
 800e39c:	6833      	ldr	r3, [r6, #0]
 800e39e:	b133      	cbz	r3, 800e3ae <__sfp+0x2e>
 800e3a0:	6836      	ldr	r6, [r6, #0]
 800e3a2:	e7f7      	b.n	800e394 <__sfp+0x14>
 800e3a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e3a8:	b16d      	cbz	r5, 800e3c6 <__sfp+0x46>
 800e3aa:	3468      	adds	r4, #104	; 0x68
 800e3ac:	e7f4      	b.n	800e398 <__sfp+0x18>
 800e3ae:	2104      	movs	r1, #4
 800e3b0:	4638      	mov	r0, r7
 800e3b2:	f7ff ff9f 	bl	800e2f4 <__sfmoreglue>
 800e3b6:	6030      	str	r0, [r6, #0]
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	d1f1      	bne.n	800e3a0 <__sfp+0x20>
 800e3bc:	230c      	movs	r3, #12
 800e3be:	603b      	str	r3, [r7, #0]
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3c6:	4b0b      	ldr	r3, [pc, #44]	; (800e3f4 <__sfp+0x74>)
 800e3c8:	6665      	str	r5, [r4, #100]	; 0x64
 800e3ca:	e9c4 5500 	strd	r5, r5, [r4]
 800e3ce:	60a5      	str	r5, [r4, #8]
 800e3d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e3d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e3d8:	2208      	movs	r2, #8
 800e3da:	4629      	mov	r1, r5
 800e3dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e3e0:	f7fe f963 	bl	800c6aa <memset>
 800e3e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e3e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e3ec:	e7e9      	b.n	800e3c2 <__sfp+0x42>
 800e3ee:	bf00      	nop
 800e3f0:	0800f038 	.word	0x0800f038
 800e3f4:	ffff0001 	.word	0xffff0001

0800e3f8 <_fwalk_reent>:
 800e3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3fc:	4680      	mov	r8, r0
 800e3fe:	4689      	mov	r9, r1
 800e400:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e404:	2600      	movs	r6, #0
 800e406:	b914      	cbnz	r4, 800e40e <_fwalk_reent+0x16>
 800e408:	4630      	mov	r0, r6
 800e40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e40e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e412:	3f01      	subs	r7, #1
 800e414:	d501      	bpl.n	800e41a <_fwalk_reent+0x22>
 800e416:	6824      	ldr	r4, [r4, #0]
 800e418:	e7f5      	b.n	800e406 <_fwalk_reent+0xe>
 800e41a:	89ab      	ldrh	r3, [r5, #12]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d907      	bls.n	800e430 <_fwalk_reent+0x38>
 800e420:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e424:	3301      	adds	r3, #1
 800e426:	d003      	beq.n	800e430 <_fwalk_reent+0x38>
 800e428:	4629      	mov	r1, r5
 800e42a:	4640      	mov	r0, r8
 800e42c:	47c8      	blx	r9
 800e42e:	4306      	orrs	r6, r0
 800e430:	3568      	adds	r5, #104	; 0x68
 800e432:	e7ee      	b.n	800e412 <_fwalk_reent+0x1a>

0800e434 <_localeconv_r>:
 800e434:	4b04      	ldr	r3, [pc, #16]	; (800e448 <_localeconv_r+0x14>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	6a18      	ldr	r0, [r3, #32]
 800e43a:	4b04      	ldr	r3, [pc, #16]	; (800e44c <_localeconv_r+0x18>)
 800e43c:	2800      	cmp	r0, #0
 800e43e:	bf08      	it	eq
 800e440:	4618      	moveq	r0, r3
 800e442:	30f0      	adds	r0, #240	; 0xf0
 800e444:	4770      	bx	lr
 800e446:	bf00      	nop
 800e448:	2000006c 	.word	0x2000006c
 800e44c:	200000d0 	.word	0x200000d0

0800e450 <__swhatbuf_r>:
 800e450:	b570      	push	{r4, r5, r6, lr}
 800e452:	460e      	mov	r6, r1
 800e454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e458:	2900      	cmp	r1, #0
 800e45a:	b096      	sub	sp, #88	; 0x58
 800e45c:	4614      	mov	r4, r2
 800e45e:	461d      	mov	r5, r3
 800e460:	da07      	bge.n	800e472 <__swhatbuf_r+0x22>
 800e462:	2300      	movs	r3, #0
 800e464:	602b      	str	r3, [r5, #0]
 800e466:	89b3      	ldrh	r3, [r6, #12]
 800e468:	061a      	lsls	r2, r3, #24
 800e46a:	d410      	bmi.n	800e48e <__swhatbuf_r+0x3e>
 800e46c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e470:	e00e      	b.n	800e490 <__swhatbuf_r+0x40>
 800e472:	466a      	mov	r2, sp
 800e474:	f000 fce2 	bl	800ee3c <_fstat_r>
 800e478:	2800      	cmp	r0, #0
 800e47a:	dbf2      	blt.n	800e462 <__swhatbuf_r+0x12>
 800e47c:	9a01      	ldr	r2, [sp, #4]
 800e47e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e482:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e486:	425a      	negs	r2, r3
 800e488:	415a      	adcs	r2, r3
 800e48a:	602a      	str	r2, [r5, #0]
 800e48c:	e7ee      	b.n	800e46c <__swhatbuf_r+0x1c>
 800e48e:	2340      	movs	r3, #64	; 0x40
 800e490:	2000      	movs	r0, #0
 800e492:	6023      	str	r3, [r4, #0]
 800e494:	b016      	add	sp, #88	; 0x58
 800e496:	bd70      	pop	{r4, r5, r6, pc}

0800e498 <__smakebuf_r>:
 800e498:	898b      	ldrh	r3, [r1, #12]
 800e49a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e49c:	079d      	lsls	r5, r3, #30
 800e49e:	4606      	mov	r6, r0
 800e4a0:	460c      	mov	r4, r1
 800e4a2:	d507      	bpl.n	800e4b4 <__smakebuf_r+0x1c>
 800e4a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e4a8:	6023      	str	r3, [r4, #0]
 800e4aa:	6123      	str	r3, [r4, #16]
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	6163      	str	r3, [r4, #20]
 800e4b0:	b002      	add	sp, #8
 800e4b2:	bd70      	pop	{r4, r5, r6, pc}
 800e4b4:	ab01      	add	r3, sp, #4
 800e4b6:	466a      	mov	r2, sp
 800e4b8:	f7ff ffca 	bl	800e450 <__swhatbuf_r>
 800e4bc:	9900      	ldr	r1, [sp, #0]
 800e4be:	4605      	mov	r5, r0
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	f7fe f949 	bl	800c758 <_malloc_r>
 800e4c6:	b948      	cbnz	r0, 800e4dc <__smakebuf_r+0x44>
 800e4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4cc:	059a      	lsls	r2, r3, #22
 800e4ce:	d4ef      	bmi.n	800e4b0 <__smakebuf_r+0x18>
 800e4d0:	f023 0303 	bic.w	r3, r3, #3
 800e4d4:	f043 0302 	orr.w	r3, r3, #2
 800e4d8:	81a3      	strh	r3, [r4, #12]
 800e4da:	e7e3      	b.n	800e4a4 <__smakebuf_r+0xc>
 800e4dc:	4b0d      	ldr	r3, [pc, #52]	; (800e514 <__smakebuf_r+0x7c>)
 800e4de:	62b3      	str	r3, [r6, #40]	; 0x28
 800e4e0:	89a3      	ldrh	r3, [r4, #12]
 800e4e2:	6020      	str	r0, [r4, #0]
 800e4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4e8:	81a3      	strh	r3, [r4, #12]
 800e4ea:	9b00      	ldr	r3, [sp, #0]
 800e4ec:	6163      	str	r3, [r4, #20]
 800e4ee:	9b01      	ldr	r3, [sp, #4]
 800e4f0:	6120      	str	r0, [r4, #16]
 800e4f2:	b15b      	cbz	r3, 800e50c <__smakebuf_r+0x74>
 800e4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	f000 fcb1 	bl	800ee60 <_isatty_r>
 800e4fe:	b128      	cbz	r0, 800e50c <__smakebuf_r+0x74>
 800e500:	89a3      	ldrh	r3, [r4, #12]
 800e502:	f023 0303 	bic.w	r3, r3, #3
 800e506:	f043 0301 	orr.w	r3, r3, #1
 800e50a:	81a3      	strh	r3, [r4, #12]
 800e50c:	89a3      	ldrh	r3, [r4, #12]
 800e50e:	431d      	orrs	r5, r3
 800e510:	81a5      	strh	r5, [r4, #12]
 800e512:	e7cd      	b.n	800e4b0 <__smakebuf_r+0x18>
 800e514:	0800e2e9 	.word	0x0800e2e9

0800e518 <__malloc_lock>:
 800e518:	4770      	bx	lr

0800e51a <__malloc_unlock>:
 800e51a:	4770      	bx	lr

0800e51c <_Balloc>:
 800e51c:	b570      	push	{r4, r5, r6, lr}
 800e51e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e520:	4604      	mov	r4, r0
 800e522:	460e      	mov	r6, r1
 800e524:	b93d      	cbnz	r5, 800e536 <_Balloc+0x1a>
 800e526:	2010      	movs	r0, #16
 800e528:	f7fe f8a4 	bl	800c674 <malloc>
 800e52c:	6260      	str	r0, [r4, #36]	; 0x24
 800e52e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e532:	6005      	str	r5, [r0, #0]
 800e534:	60c5      	str	r5, [r0, #12]
 800e536:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e538:	68eb      	ldr	r3, [r5, #12]
 800e53a:	b183      	cbz	r3, 800e55e <_Balloc+0x42>
 800e53c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e544:	b9b8      	cbnz	r0, 800e576 <_Balloc+0x5a>
 800e546:	2101      	movs	r1, #1
 800e548:	fa01 f506 	lsl.w	r5, r1, r6
 800e54c:	1d6a      	adds	r2, r5, #5
 800e54e:	0092      	lsls	r2, r2, #2
 800e550:	4620      	mov	r0, r4
 800e552:	f000 fabf 	bl	800ead4 <_calloc_r>
 800e556:	b160      	cbz	r0, 800e572 <_Balloc+0x56>
 800e558:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e55c:	e00e      	b.n	800e57c <_Balloc+0x60>
 800e55e:	2221      	movs	r2, #33	; 0x21
 800e560:	2104      	movs	r1, #4
 800e562:	4620      	mov	r0, r4
 800e564:	f000 fab6 	bl	800ead4 <_calloc_r>
 800e568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e56a:	60e8      	str	r0, [r5, #12]
 800e56c:	68db      	ldr	r3, [r3, #12]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1e4      	bne.n	800e53c <_Balloc+0x20>
 800e572:	2000      	movs	r0, #0
 800e574:	bd70      	pop	{r4, r5, r6, pc}
 800e576:	6802      	ldr	r2, [r0, #0]
 800e578:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e57c:	2300      	movs	r3, #0
 800e57e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e582:	e7f7      	b.n	800e574 <_Balloc+0x58>

0800e584 <_Bfree>:
 800e584:	b570      	push	{r4, r5, r6, lr}
 800e586:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e588:	4606      	mov	r6, r0
 800e58a:	460d      	mov	r5, r1
 800e58c:	b93c      	cbnz	r4, 800e59e <_Bfree+0x1a>
 800e58e:	2010      	movs	r0, #16
 800e590:	f7fe f870 	bl	800c674 <malloc>
 800e594:	6270      	str	r0, [r6, #36]	; 0x24
 800e596:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e59a:	6004      	str	r4, [r0, #0]
 800e59c:	60c4      	str	r4, [r0, #12]
 800e59e:	b13d      	cbz	r5, 800e5b0 <_Bfree+0x2c>
 800e5a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e5a2:	686a      	ldr	r2, [r5, #4]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5aa:	6029      	str	r1, [r5, #0]
 800e5ac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e5b0:	bd70      	pop	{r4, r5, r6, pc}

0800e5b2 <__multadd>:
 800e5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b6:	690d      	ldr	r5, [r1, #16]
 800e5b8:	461f      	mov	r7, r3
 800e5ba:	4606      	mov	r6, r0
 800e5bc:	460c      	mov	r4, r1
 800e5be:	f101 0c14 	add.w	ip, r1, #20
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	f8dc 0000 	ldr.w	r0, [ip]
 800e5c8:	b281      	uxth	r1, r0
 800e5ca:	fb02 7101 	mla	r1, r2, r1, r7
 800e5ce:	0c0f      	lsrs	r7, r1, #16
 800e5d0:	0c00      	lsrs	r0, r0, #16
 800e5d2:	fb02 7000 	mla	r0, r2, r0, r7
 800e5d6:	b289      	uxth	r1, r1
 800e5d8:	3301      	adds	r3, #1
 800e5da:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e5de:	429d      	cmp	r5, r3
 800e5e0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e5e4:	f84c 1b04 	str.w	r1, [ip], #4
 800e5e8:	dcec      	bgt.n	800e5c4 <__multadd+0x12>
 800e5ea:	b1d7      	cbz	r7, 800e622 <__multadd+0x70>
 800e5ec:	68a3      	ldr	r3, [r4, #8]
 800e5ee:	42ab      	cmp	r3, r5
 800e5f0:	dc12      	bgt.n	800e618 <__multadd+0x66>
 800e5f2:	6861      	ldr	r1, [r4, #4]
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	3101      	adds	r1, #1
 800e5f8:	f7ff ff90 	bl	800e51c <_Balloc>
 800e5fc:	6922      	ldr	r2, [r4, #16]
 800e5fe:	3202      	adds	r2, #2
 800e600:	f104 010c 	add.w	r1, r4, #12
 800e604:	4680      	mov	r8, r0
 800e606:	0092      	lsls	r2, r2, #2
 800e608:	300c      	adds	r0, #12
 800e60a:	f7fe f843 	bl	800c694 <memcpy>
 800e60e:	4621      	mov	r1, r4
 800e610:	4630      	mov	r0, r6
 800e612:	f7ff ffb7 	bl	800e584 <_Bfree>
 800e616:	4644      	mov	r4, r8
 800e618:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e61c:	3501      	adds	r5, #1
 800e61e:	615f      	str	r7, [r3, #20]
 800e620:	6125      	str	r5, [r4, #16]
 800e622:	4620      	mov	r0, r4
 800e624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e628 <__hi0bits>:
 800e628:	0c02      	lsrs	r2, r0, #16
 800e62a:	0412      	lsls	r2, r2, #16
 800e62c:	4603      	mov	r3, r0
 800e62e:	b9b2      	cbnz	r2, 800e65e <__hi0bits+0x36>
 800e630:	0403      	lsls	r3, r0, #16
 800e632:	2010      	movs	r0, #16
 800e634:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e638:	bf04      	itt	eq
 800e63a:	021b      	lsleq	r3, r3, #8
 800e63c:	3008      	addeq	r0, #8
 800e63e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e642:	bf04      	itt	eq
 800e644:	011b      	lsleq	r3, r3, #4
 800e646:	3004      	addeq	r0, #4
 800e648:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e64c:	bf04      	itt	eq
 800e64e:	009b      	lsleq	r3, r3, #2
 800e650:	3002      	addeq	r0, #2
 800e652:	2b00      	cmp	r3, #0
 800e654:	db06      	blt.n	800e664 <__hi0bits+0x3c>
 800e656:	005b      	lsls	r3, r3, #1
 800e658:	d503      	bpl.n	800e662 <__hi0bits+0x3a>
 800e65a:	3001      	adds	r0, #1
 800e65c:	4770      	bx	lr
 800e65e:	2000      	movs	r0, #0
 800e660:	e7e8      	b.n	800e634 <__hi0bits+0xc>
 800e662:	2020      	movs	r0, #32
 800e664:	4770      	bx	lr

0800e666 <__lo0bits>:
 800e666:	6803      	ldr	r3, [r0, #0]
 800e668:	f013 0207 	ands.w	r2, r3, #7
 800e66c:	4601      	mov	r1, r0
 800e66e:	d00b      	beq.n	800e688 <__lo0bits+0x22>
 800e670:	07da      	lsls	r2, r3, #31
 800e672:	d423      	bmi.n	800e6bc <__lo0bits+0x56>
 800e674:	0798      	lsls	r0, r3, #30
 800e676:	bf49      	itett	mi
 800e678:	085b      	lsrmi	r3, r3, #1
 800e67a:	089b      	lsrpl	r3, r3, #2
 800e67c:	2001      	movmi	r0, #1
 800e67e:	600b      	strmi	r3, [r1, #0]
 800e680:	bf5c      	itt	pl
 800e682:	600b      	strpl	r3, [r1, #0]
 800e684:	2002      	movpl	r0, #2
 800e686:	4770      	bx	lr
 800e688:	b298      	uxth	r0, r3
 800e68a:	b9a8      	cbnz	r0, 800e6b8 <__lo0bits+0x52>
 800e68c:	0c1b      	lsrs	r3, r3, #16
 800e68e:	2010      	movs	r0, #16
 800e690:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e694:	bf04      	itt	eq
 800e696:	0a1b      	lsreq	r3, r3, #8
 800e698:	3008      	addeq	r0, #8
 800e69a:	071a      	lsls	r2, r3, #28
 800e69c:	bf04      	itt	eq
 800e69e:	091b      	lsreq	r3, r3, #4
 800e6a0:	3004      	addeq	r0, #4
 800e6a2:	079a      	lsls	r2, r3, #30
 800e6a4:	bf04      	itt	eq
 800e6a6:	089b      	lsreq	r3, r3, #2
 800e6a8:	3002      	addeq	r0, #2
 800e6aa:	07da      	lsls	r2, r3, #31
 800e6ac:	d402      	bmi.n	800e6b4 <__lo0bits+0x4e>
 800e6ae:	085b      	lsrs	r3, r3, #1
 800e6b0:	d006      	beq.n	800e6c0 <__lo0bits+0x5a>
 800e6b2:	3001      	adds	r0, #1
 800e6b4:	600b      	str	r3, [r1, #0]
 800e6b6:	4770      	bx	lr
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	e7e9      	b.n	800e690 <__lo0bits+0x2a>
 800e6bc:	2000      	movs	r0, #0
 800e6be:	4770      	bx	lr
 800e6c0:	2020      	movs	r0, #32
 800e6c2:	4770      	bx	lr

0800e6c4 <__i2b>:
 800e6c4:	b510      	push	{r4, lr}
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	2101      	movs	r1, #1
 800e6ca:	f7ff ff27 	bl	800e51c <_Balloc>
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	6144      	str	r4, [r0, #20]
 800e6d2:	6102      	str	r2, [r0, #16]
 800e6d4:	bd10      	pop	{r4, pc}

0800e6d6 <__multiply>:
 800e6d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6da:	4614      	mov	r4, r2
 800e6dc:	690a      	ldr	r2, [r1, #16]
 800e6de:	6923      	ldr	r3, [r4, #16]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	bfb8      	it	lt
 800e6e4:	460b      	movlt	r3, r1
 800e6e6:	4688      	mov	r8, r1
 800e6e8:	bfbc      	itt	lt
 800e6ea:	46a0      	movlt	r8, r4
 800e6ec:	461c      	movlt	r4, r3
 800e6ee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e6f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e6f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e6fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e6fe:	eb07 0609 	add.w	r6, r7, r9
 800e702:	42b3      	cmp	r3, r6
 800e704:	bfb8      	it	lt
 800e706:	3101      	addlt	r1, #1
 800e708:	f7ff ff08 	bl	800e51c <_Balloc>
 800e70c:	f100 0514 	add.w	r5, r0, #20
 800e710:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e714:	462b      	mov	r3, r5
 800e716:	2200      	movs	r2, #0
 800e718:	4573      	cmp	r3, lr
 800e71a:	d316      	bcc.n	800e74a <__multiply+0x74>
 800e71c:	f104 0214 	add.w	r2, r4, #20
 800e720:	f108 0114 	add.w	r1, r8, #20
 800e724:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e728:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e72c:	9300      	str	r3, [sp, #0]
 800e72e:	9b00      	ldr	r3, [sp, #0]
 800e730:	9201      	str	r2, [sp, #4]
 800e732:	4293      	cmp	r3, r2
 800e734:	d80c      	bhi.n	800e750 <__multiply+0x7a>
 800e736:	2e00      	cmp	r6, #0
 800e738:	dd03      	ble.n	800e742 <__multiply+0x6c>
 800e73a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d05d      	beq.n	800e7fe <__multiply+0x128>
 800e742:	6106      	str	r6, [r0, #16]
 800e744:	b003      	add	sp, #12
 800e746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e74a:	f843 2b04 	str.w	r2, [r3], #4
 800e74e:	e7e3      	b.n	800e718 <__multiply+0x42>
 800e750:	f8b2 b000 	ldrh.w	fp, [r2]
 800e754:	f1bb 0f00 	cmp.w	fp, #0
 800e758:	d023      	beq.n	800e7a2 <__multiply+0xcc>
 800e75a:	4689      	mov	r9, r1
 800e75c:	46ac      	mov	ip, r5
 800e75e:	f04f 0800 	mov.w	r8, #0
 800e762:	f859 4b04 	ldr.w	r4, [r9], #4
 800e766:	f8dc a000 	ldr.w	sl, [ip]
 800e76a:	b2a3      	uxth	r3, r4
 800e76c:	fa1f fa8a 	uxth.w	sl, sl
 800e770:	fb0b a303 	mla	r3, fp, r3, sl
 800e774:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e778:	f8dc 4000 	ldr.w	r4, [ip]
 800e77c:	4443      	add	r3, r8
 800e77e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e782:	fb0b 840a 	mla	r4, fp, sl, r8
 800e786:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e78a:	46e2      	mov	sl, ip
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e792:	454f      	cmp	r7, r9
 800e794:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e798:	f84a 3b04 	str.w	r3, [sl], #4
 800e79c:	d82b      	bhi.n	800e7f6 <__multiply+0x120>
 800e79e:	f8cc 8004 	str.w	r8, [ip, #4]
 800e7a2:	9b01      	ldr	r3, [sp, #4]
 800e7a4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e7a8:	3204      	adds	r2, #4
 800e7aa:	f1ba 0f00 	cmp.w	sl, #0
 800e7ae:	d020      	beq.n	800e7f2 <__multiply+0x11c>
 800e7b0:	682b      	ldr	r3, [r5, #0]
 800e7b2:	4689      	mov	r9, r1
 800e7b4:	46a8      	mov	r8, r5
 800e7b6:	f04f 0b00 	mov.w	fp, #0
 800e7ba:	f8b9 c000 	ldrh.w	ip, [r9]
 800e7be:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e7c2:	fb0a 440c 	mla	r4, sl, ip, r4
 800e7c6:	445c      	add	r4, fp
 800e7c8:	46c4      	mov	ip, r8
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e7d0:	f84c 3b04 	str.w	r3, [ip], #4
 800e7d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e7d8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e7dc:	0c1b      	lsrs	r3, r3, #16
 800e7de:	fb0a b303 	mla	r3, sl, r3, fp
 800e7e2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e7e6:	454f      	cmp	r7, r9
 800e7e8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e7ec:	d805      	bhi.n	800e7fa <__multiply+0x124>
 800e7ee:	f8c8 3004 	str.w	r3, [r8, #4]
 800e7f2:	3504      	adds	r5, #4
 800e7f4:	e79b      	b.n	800e72e <__multiply+0x58>
 800e7f6:	46d4      	mov	ip, sl
 800e7f8:	e7b3      	b.n	800e762 <__multiply+0x8c>
 800e7fa:	46e0      	mov	r8, ip
 800e7fc:	e7dd      	b.n	800e7ba <__multiply+0xe4>
 800e7fe:	3e01      	subs	r6, #1
 800e800:	e799      	b.n	800e736 <__multiply+0x60>
	...

0800e804 <__pow5mult>:
 800e804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e808:	4615      	mov	r5, r2
 800e80a:	f012 0203 	ands.w	r2, r2, #3
 800e80e:	4606      	mov	r6, r0
 800e810:	460f      	mov	r7, r1
 800e812:	d007      	beq.n	800e824 <__pow5mult+0x20>
 800e814:	3a01      	subs	r2, #1
 800e816:	4c21      	ldr	r4, [pc, #132]	; (800e89c <__pow5mult+0x98>)
 800e818:	2300      	movs	r3, #0
 800e81a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e81e:	f7ff fec8 	bl	800e5b2 <__multadd>
 800e822:	4607      	mov	r7, r0
 800e824:	10ad      	asrs	r5, r5, #2
 800e826:	d035      	beq.n	800e894 <__pow5mult+0x90>
 800e828:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e82a:	b93c      	cbnz	r4, 800e83c <__pow5mult+0x38>
 800e82c:	2010      	movs	r0, #16
 800e82e:	f7fd ff21 	bl	800c674 <malloc>
 800e832:	6270      	str	r0, [r6, #36]	; 0x24
 800e834:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e838:	6004      	str	r4, [r0, #0]
 800e83a:	60c4      	str	r4, [r0, #12]
 800e83c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e840:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e844:	b94c      	cbnz	r4, 800e85a <__pow5mult+0x56>
 800e846:	f240 2171 	movw	r1, #625	; 0x271
 800e84a:	4630      	mov	r0, r6
 800e84c:	f7ff ff3a 	bl	800e6c4 <__i2b>
 800e850:	2300      	movs	r3, #0
 800e852:	f8c8 0008 	str.w	r0, [r8, #8]
 800e856:	4604      	mov	r4, r0
 800e858:	6003      	str	r3, [r0, #0]
 800e85a:	f04f 0800 	mov.w	r8, #0
 800e85e:	07eb      	lsls	r3, r5, #31
 800e860:	d50a      	bpl.n	800e878 <__pow5mult+0x74>
 800e862:	4639      	mov	r1, r7
 800e864:	4622      	mov	r2, r4
 800e866:	4630      	mov	r0, r6
 800e868:	f7ff ff35 	bl	800e6d6 <__multiply>
 800e86c:	4639      	mov	r1, r7
 800e86e:	4681      	mov	r9, r0
 800e870:	4630      	mov	r0, r6
 800e872:	f7ff fe87 	bl	800e584 <_Bfree>
 800e876:	464f      	mov	r7, r9
 800e878:	106d      	asrs	r5, r5, #1
 800e87a:	d00b      	beq.n	800e894 <__pow5mult+0x90>
 800e87c:	6820      	ldr	r0, [r4, #0]
 800e87e:	b938      	cbnz	r0, 800e890 <__pow5mult+0x8c>
 800e880:	4622      	mov	r2, r4
 800e882:	4621      	mov	r1, r4
 800e884:	4630      	mov	r0, r6
 800e886:	f7ff ff26 	bl	800e6d6 <__multiply>
 800e88a:	6020      	str	r0, [r4, #0]
 800e88c:	f8c0 8000 	str.w	r8, [r0]
 800e890:	4604      	mov	r4, r0
 800e892:	e7e4      	b.n	800e85e <__pow5mult+0x5a>
 800e894:	4638      	mov	r0, r7
 800e896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e89a:	bf00      	nop
 800e89c:	0800f1d0 	.word	0x0800f1d0

0800e8a0 <__lshift>:
 800e8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8a4:	460c      	mov	r4, r1
 800e8a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e8aa:	6923      	ldr	r3, [r4, #16]
 800e8ac:	6849      	ldr	r1, [r1, #4]
 800e8ae:	eb0a 0903 	add.w	r9, sl, r3
 800e8b2:	68a3      	ldr	r3, [r4, #8]
 800e8b4:	4607      	mov	r7, r0
 800e8b6:	4616      	mov	r6, r2
 800e8b8:	f109 0501 	add.w	r5, r9, #1
 800e8bc:	42ab      	cmp	r3, r5
 800e8be:	db32      	blt.n	800e926 <__lshift+0x86>
 800e8c0:	4638      	mov	r0, r7
 800e8c2:	f7ff fe2b 	bl	800e51c <_Balloc>
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	4680      	mov	r8, r0
 800e8ca:	f100 0114 	add.w	r1, r0, #20
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	4553      	cmp	r3, sl
 800e8d2:	db2b      	blt.n	800e92c <__lshift+0x8c>
 800e8d4:	6920      	ldr	r0, [r4, #16]
 800e8d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8da:	f104 0314 	add.w	r3, r4, #20
 800e8de:	f016 021f 	ands.w	r2, r6, #31
 800e8e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e8ea:	d025      	beq.n	800e938 <__lshift+0x98>
 800e8ec:	f1c2 0e20 	rsb	lr, r2, #32
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	681e      	ldr	r6, [r3, #0]
 800e8f4:	468a      	mov	sl, r1
 800e8f6:	4096      	lsls	r6, r2
 800e8f8:	4330      	orrs	r0, r6
 800e8fa:	f84a 0b04 	str.w	r0, [sl], #4
 800e8fe:	f853 0b04 	ldr.w	r0, [r3], #4
 800e902:	459c      	cmp	ip, r3
 800e904:	fa20 f00e 	lsr.w	r0, r0, lr
 800e908:	d814      	bhi.n	800e934 <__lshift+0x94>
 800e90a:	6048      	str	r0, [r1, #4]
 800e90c:	b108      	cbz	r0, 800e912 <__lshift+0x72>
 800e90e:	f109 0502 	add.w	r5, r9, #2
 800e912:	3d01      	subs	r5, #1
 800e914:	4638      	mov	r0, r7
 800e916:	f8c8 5010 	str.w	r5, [r8, #16]
 800e91a:	4621      	mov	r1, r4
 800e91c:	f7ff fe32 	bl	800e584 <_Bfree>
 800e920:	4640      	mov	r0, r8
 800e922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e926:	3101      	adds	r1, #1
 800e928:	005b      	lsls	r3, r3, #1
 800e92a:	e7c7      	b.n	800e8bc <__lshift+0x1c>
 800e92c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e930:	3301      	adds	r3, #1
 800e932:	e7cd      	b.n	800e8d0 <__lshift+0x30>
 800e934:	4651      	mov	r1, sl
 800e936:	e7dc      	b.n	800e8f2 <__lshift+0x52>
 800e938:	3904      	subs	r1, #4
 800e93a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e93e:	f841 2f04 	str.w	r2, [r1, #4]!
 800e942:	459c      	cmp	ip, r3
 800e944:	d8f9      	bhi.n	800e93a <__lshift+0x9a>
 800e946:	e7e4      	b.n	800e912 <__lshift+0x72>

0800e948 <__mcmp>:
 800e948:	6903      	ldr	r3, [r0, #16]
 800e94a:	690a      	ldr	r2, [r1, #16]
 800e94c:	1a9b      	subs	r3, r3, r2
 800e94e:	b530      	push	{r4, r5, lr}
 800e950:	d10c      	bne.n	800e96c <__mcmp+0x24>
 800e952:	0092      	lsls	r2, r2, #2
 800e954:	3014      	adds	r0, #20
 800e956:	3114      	adds	r1, #20
 800e958:	1884      	adds	r4, r0, r2
 800e95a:	4411      	add	r1, r2
 800e95c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e960:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e964:	4295      	cmp	r5, r2
 800e966:	d003      	beq.n	800e970 <__mcmp+0x28>
 800e968:	d305      	bcc.n	800e976 <__mcmp+0x2e>
 800e96a:	2301      	movs	r3, #1
 800e96c:	4618      	mov	r0, r3
 800e96e:	bd30      	pop	{r4, r5, pc}
 800e970:	42a0      	cmp	r0, r4
 800e972:	d3f3      	bcc.n	800e95c <__mcmp+0x14>
 800e974:	e7fa      	b.n	800e96c <__mcmp+0x24>
 800e976:	f04f 33ff 	mov.w	r3, #4294967295
 800e97a:	e7f7      	b.n	800e96c <__mcmp+0x24>

0800e97c <__mdiff>:
 800e97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e980:	460d      	mov	r5, r1
 800e982:	4607      	mov	r7, r0
 800e984:	4611      	mov	r1, r2
 800e986:	4628      	mov	r0, r5
 800e988:	4614      	mov	r4, r2
 800e98a:	f7ff ffdd 	bl	800e948 <__mcmp>
 800e98e:	1e06      	subs	r6, r0, #0
 800e990:	d108      	bne.n	800e9a4 <__mdiff+0x28>
 800e992:	4631      	mov	r1, r6
 800e994:	4638      	mov	r0, r7
 800e996:	f7ff fdc1 	bl	800e51c <_Balloc>
 800e99a:	2301      	movs	r3, #1
 800e99c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a4:	bfa4      	itt	ge
 800e9a6:	4623      	movge	r3, r4
 800e9a8:	462c      	movge	r4, r5
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	6861      	ldr	r1, [r4, #4]
 800e9ae:	bfa6      	itte	ge
 800e9b0:	461d      	movge	r5, r3
 800e9b2:	2600      	movge	r6, #0
 800e9b4:	2601      	movlt	r6, #1
 800e9b6:	f7ff fdb1 	bl	800e51c <_Balloc>
 800e9ba:	692b      	ldr	r3, [r5, #16]
 800e9bc:	60c6      	str	r6, [r0, #12]
 800e9be:	6926      	ldr	r6, [r4, #16]
 800e9c0:	f105 0914 	add.w	r9, r5, #20
 800e9c4:	f104 0214 	add.w	r2, r4, #20
 800e9c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e9cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e9d0:	f100 0514 	add.w	r5, r0, #20
 800e9d4:	f04f 0e00 	mov.w	lr, #0
 800e9d8:	f852 ab04 	ldr.w	sl, [r2], #4
 800e9dc:	f859 4b04 	ldr.w	r4, [r9], #4
 800e9e0:	fa1e f18a 	uxtah	r1, lr, sl
 800e9e4:	b2a3      	uxth	r3, r4
 800e9e6:	1ac9      	subs	r1, r1, r3
 800e9e8:	0c23      	lsrs	r3, r4, #16
 800e9ea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e9ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e9f2:	b289      	uxth	r1, r1
 800e9f4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e9f8:	45c8      	cmp	r8, r9
 800e9fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e9fe:	4694      	mov	ip, r2
 800ea00:	f845 3b04 	str.w	r3, [r5], #4
 800ea04:	d8e8      	bhi.n	800e9d8 <__mdiff+0x5c>
 800ea06:	45bc      	cmp	ip, r7
 800ea08:	d304      	bcc.n	800ea14 <__mdiff+0x98>
 800ea0a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ea0e:	b183      	cbz	r3, 800ea32 <__mdiff+0xb6>
 800ea10:	6106      	str	r6, [r0, #16]
 800ea12:	e7c5      	b.n	800e9a0 <__mdiff+0x24>
 800ea14:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ea18:	fa1e f381 	uxtah	r3, lr, r1
 800ea1c:	141a      	asrs	r2, r3, #16
 800ea1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea28:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ea2c:	f845 3b04 	str.w	r3, [r5], #4
 800ea30:	e7e9      	b.n	800ea06 <__mdiff+0x8a>
 800ea32:	3e01      	subs	r6, #1
 800ea34:	e7e9      	b.n	800ea0a <__mdiff+0x8e>

0800ea36 <__d2b>:
 800ea36:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea3a:	460e      	mov	r6, r1
 800ea3c:	2101      	movs	r1, #1
 800ea3e:	ec59 8b10 	vmov	r8, r9, d0
 800ea42:	4615      	mov	r5, r2
 800ea44:	f7ff fd6a 	bl	800e51c <_Balloc>
 800ea48:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ea4c:	4607      	mov	r7, r0
 800ea4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea52:	bb34      	cbnz	r4, 800eaa2 <__d2b+0x6c>
 800ea54:	9301      	str	r3, [sp, #4]
 800ea56:	f1b8 0300 	subs.w	r3, r8, #0
 800ea5a:	d027      	beq.n	800eaac <__d2b+0x76>
 800ea5c:	a802      	add	r0, sp, #8
 800ea5e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ea62:	f7ff fe00 	bl	800e666 <__lo0bits>
 800ea66:	9900      	ldr	r1, [sp, #0]
 800ea68:	b1f0      	cbz	r0, 800eaa8 <__d2b+0x72>
 800ea6a:	9a01      	ldr	r2, [sp, #4]
 800ea6c:	f1c0 0320 	rsb	r3, r0, #32
 800ea70:	fa02 f303 	lsl.w	r3, r2, r3
 800ea74:	430b      	orrs	r3, r1
 800ea76:	40c2      	lsrs	r2, r0
 800ea78:	617b      	str	r3, [r7, #20]
 800ea7a:	9201      	str	r2, [sp, #4]
 800ea7c:	9b01      	ldr	r3, [sp, #4]
 800ea7e:	61bb      	str	r3, [r7, #24]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	bf14      	ite	ne
 800ea84:	2102      	movne	r1, #2
 800ea86:	2101      	moveq	r1, #1
 800ea88:	6139      	str	r1, [r7, #16]
 800ea8a:	b1c4      	cbz	r4, 800eabe <__d2b+0x88>
 800ea8c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ea90:	4404      	add	r4, r0
 800ea92:	6034      	str	r4, [r6, #0]
 800ea94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea98:	6028      	str	r0, [r5, #0]
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	b003      	add	sp, #12
 800ea9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eaa6:	e7d5      	b.n	800ea54 <__d2b+0x1e>
 800eaa8:	6179      	str	r1, [r7, #20]
 800eaaa:	e7e7      	b.n	800ea7c <__d2b+0x46>
 800eaac:	a801      	add	r0, sp, #4
 800eaae:	f7ff fdda 	bl	800e666 <__lo0bits>
 800eab2:	9b01      	ldr	r3, [sp, #4]
 800eab4:	617b      	str	r3, [r7, #20]
 800eab6:	2101      	movs	r1, #1
 800eab8:	6139      	str	r1, [r7, #16]
 800eaba:	3020      	adds	r0, #32
 800eabc:	e7e5      	b.n	800ea8a <__d2b+0x54>
 800eabe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800eac2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eac6:	6030      	str	r0, [r6, #0]
 800eac8:	6918      	ldr	r0, [r3, #16]
 800eaca:	f7ff fdad 	bl	800e628 <__hi0bits>
 800eace:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ead2:	e7e1      	b.n	800ea98 <__d2b+0x62>

0800ead4 <_calloc_r>:
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	fb02 f401 	mul.w	r4, r2, r1
 800eada:	4621      	mov	r1, r4
 800eadc:	f7fd fe3c 	bl	800c758 <_malloc_r>
 800eae0:	4605      	mov	r5, r0
 800eae2:	b118      	cbz	r0, 800eaec <_calloc_r+0x18>
 800eae4:	4622      	mov	r2, r4
 800eae6:	2100      	movs	r1, #0
 800eae8:	f7fd fddf 	bl	800c6aa <memset>
 800eaec:	4628      	mov	r0, r5
 800eaee:	bd38      	pop	{r3, r4, r5, pc}

0800eaf0 <__sfputc_r>:
 800eaf0:	6893      	ldr	r3, [r2, #8]
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	b410      	push	{r4}
 800eaf8:	6093      	str	r3, [r2, #8]
 800eafa:	da08      	bge.n	800eb0e <__sfputc_r+0x1e>
 800eafc:	6994      	ldr	r4, [r2, #24]
 800eafe:	42a3      	cmp	r3, r4
 800eb00:	db01      	blt.n	800eb06 <__sfputc_r+0x16>
 800eb02:	290a      	cmp	r1, #10
 800eb04:	d103      	bne.n	800eb0e <__sfputc_r+0x1e>
 800eb06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb0a:	f7fe bc15 	b.w	800d338 <__swbuf_r>
 800eb0e:	6813      	ldr	r3, [r2, #0]
 800eb10:	1c58      	adds	r0, r3, #1
 800eb12:	6010      	str	r0, [r2, #0]
 800eb14:	7019      	strb	r1, [r3, #0]
 800eb16:	4608      	mov	r0, r1
 800eb18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb1c:	4770      	bx	lr

0800eb1e <__sfputs_r>:
 800eb1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb20:	4606      	mov	r6, r0
 800eb22:	460f      	mov	r7, r1
 800eb24:	4614      	mov	r4, r2
 800eb26:	18d5      	adds	r5, r2, r3
 800eb28:	42ac      	cmp	r4, r5
 800eb2a:	d101      	bne.n	800eb30 <__sfputs_r+0x12>
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	e007      	b.n	800eb40 <__sfputs_r+0x22>
 800eb30:	463a      	mov	r2, r7
 800eb32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb36:	4630      	mov	r0, r6
 800eb38:	f7ff ffda 	bl	800eaf0 <__sfputc_r>
 800eb3c:	1c43      	adds	r3, r0, #1
 800eb3e:	d1f3      	bne.n	800eb28 <__sfputs_r+0xa>
 800eb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb44 <_vfiprintf_r>:
 800eb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb48:	460c      	mov	r4, r1
 800eb4a:	b09d      	sub	sp, #116	; 0x74
 800eb4c:	4617      	mov	r7, r2
 800eb4e:	461d      	mov	r5, r3
 800eb50:	4606      	mov	r6, r0
 800eb52:	b118      	cbz	r0, 800eb5c <_vfiprintf_r+0x18>
 800eb54:	6983      	ldr	r3, [r0, #24]
 800eb56:	b90b      	cbnz	r3, 800eb5c <_vfiprintf_r+0x18>
 800eb58:	f7ff fbe2 	bl	800e320 <__sinit>
 800eb5c:	4b7c      	ldr	r3, [pc, #496]	; (800ed50 <_vfiprintf_r+0x20c>)
 800eb5e:	429c      	cmp	r4, r3
 800eb60:	d158      	bne.n	800ec14 <_vfiprintf_r+0xd0>
 800eb62:	6874      	ldr	r4, [r6, #4]
 800eb64:	89a3      	ldrh	r3, [r4, #12]
 800eb66:	0718      	lsls	r0, r3, #28
 800eb68:	d55e      	bpl.n	800ec28 <_vfiprintf_r+0xe4>
 800eb6a:	6923      	ldr	r3, [r4, #16]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d05b      	beq.n	800ec28 <_vfiprintf_r+0xe4>
 800eb70:	2300      	movs	r3, #0
 800eb72:	9309      	str	r3, [sp, #36]	; 0x24
 800eb74:	2320      	movs	r3, #32
 800eb76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb7a:	2330      	movs	r3, #48	; 0x30
 800eb7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb80:	9503      	str	r5, [sp, #12]
 800eb82:	f04f 0b01 	mov.w	fp, #1
 800eb86:	46b8      	mov	r8, r7
 800eb88:	4645      	mov	r5, r8
 800eb8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eb8e:	b10b      	cbz	r3, 800eb94 <_vfiprintf_r+0x50>
 800eb90:	2b25      	cmp	r3, #37	; 0x25
 800eb92:	d154      	bne.n	800ec3e <_vfiprintf_r+0xfa>
 800eb94:	ebb8 0a07 	subs.w	sl, r8, r7
 800eb98:	d00b      	beq.n	800ebb2 <_vfiprintf_r+0x6e>
 800eb9a:	4653      	mov	r3, sl
 800eb9c:	463a      	mov	r2, r7
 800eb9e:	4621      	mov	r1, r4
 800eba0:	4630      	mov	r0, r6
 800eba2:	f7ff ffbc 	bl	800eb1e <__sfputs_r>
 800eba6:	3001      	adds	r0, #1
 800eba8:	f000 80c2 	beq.w	800ed30 <_vfiprintf_r+0x1ec>
 800ebac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebae:	4453      	add	r3, sl
 800ebb0:	9309      	str	r3, [sp, #36]	; 0x24
 800ebb2:	f898 3000 	ldrb.w	r3, [r8]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	f000 80ba 	beq.w	800ed30 <_vfiprintf_r+0x1ec>
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ebc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebc6:	9304      	str	r3, [sp, #16]
 800ebc8:	9307      	str	r3, [sp, #28]
 800ebca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebce:	931a      	str	r3, [sp, #104]	; 0x68
 800ebd0:	46a8      	mov	r8, r5
 800ebd2:	2205      	movs	r2, #5
 800ebd4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ebd8:	485e      	ldr	r0, [pc, #376]	; (800ed54 <_vfiprintf_r+0x210>)
 800ebda:	f7f1 fb11 	bl	8000200 <memchr>
 800ebde:	9b04      	ldr	r3, [sp, #16]
 800ebe0:	bb78      	cbnz	r0, 800ec42 <_vfiprintf_r+0xfe>
 800ebe2:	06d9      	lsls	r1, r3, #27
 800ebe4:	bf44      	itt	mi
 800ebe6:	2220      	movmi	r2, #32
 800ebe8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ebec:	071a      	lsls	r2, r3, #28
 800ebee:	bf44      	itt	mi
 800ebf0:	222b      	movmi	r2, #43	; 0x2b
 800ebf2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ebf6:	782a      	ldrb	r2, [r5, #0]
 800ebf8:	2a2a      	cmp	r2, #42	; 0x2a
 800ebfa:	d02a      	beq.n	800ec52 <_vfiprintf_r+0x10e>
 800ebfc:	9a07      	ldr	r2, [sp, #28]
 800ebfe:	46a8      	mov	r8, r5
 800ec00:	2000      	movs	r0, #0
 800ec02:	250a      	movs	r5, #10
 800ec04:	4641      	mov	r1, r8
 800ec06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec0a:	3b30      	subs	r3, #48	; 0x30
 800ec0c:	2b09      	cmp	r3, #9
 800ec0e:	d969      	bls.n	800ece4 <_vfiprintf_r+0x1a0>
 800ec10:	b360      	cbz	r0, 800ec6c <_vfiprintf_r+0x128>
 800ec12:	e024      	b.n	800ec5e <_vfiprintf_r+0x11a>
 800ec14:	4b50      	ldr	r3, [pc, #320]	; (800ed58 <_vfiprintf_r+0x214>)
 800ec16:	429c      	cmp	r4, r3
 800ec18:	d101      	bne.n	800ec1e <_vfiprintf_r+0xda>
 800ec1a:	68b4      	ldr	r4, [r6, #8]
 800ec1c:	e7a2      	b.n	800eb64 <_vfiprintf_r+0x20>
 800ec1e:	4b4f      	ldr	r3, [pc, #316]	; (800ed5c <_vfiprintf_r+0x218>)
 800ec20:	429c      	cmp	r4, r3
 800ec22:	bf08      	it	eq
 800ec24:	68f4      	ldreq	r4, [r6, #12]
 800ec26:	e79d      	b.n	800eb64 <_vfiprintf_r+0x20>
 800ec28:	4621      	mov	r1, r4
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	f7fe fbd6 	bl	800d3dc <__swsetup_r>
 800ec30:	2800      	cmp	r0, #0
 800ec32:	d09d      	beq.n	800eb70 <_vfiprintf_r+0x2c>
 800ec34:	f04f 30ff 	mov.w	r0, #4294967295
 800ec38:	b01d      	add	sp, #116	; 0x74
 800ec3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec3e:	46a8      	mov	r8, r5
 800ec40:	e7a2      	b.n	800eb88 <_vfiprintf_r+0x44>
 800ec42:	4a44      	ldr	r2, [pc, #272]	; (800ed54 <_vfiprintf_r+0x210>)
 800ec44:	1a80      	subs	r0, r0, r2
 800ec46:	fa0b f000 	lsl.w	r0, fp, r0
 800ec4a:	4318      	orrs	r0, r3
 800ec4c:	9004      	str	r0, [sp, #16]
 800ec4e:	4645      	mov	r5, r8
 800ec50:	e7be      	b.n	800ebd0 <_vfiprintf_r+0x8c>
 800ec52:	9a03      	ldr	r2, [sp, #12]
 800ec54:	1d11      	adds	r1, r2, #4
 800ec56:	6812      	ldr	r2, [r2, #0]
 800ec58:	9103      	str	r1, [sp, #12]
 800ec5a:	2a00      	cmp	r2, #0
 800ec5c:	db01      	blt.n	800ec62 <_vfiprintf_r+0x11e>
 800ec5e:	9207      	str	r2, [sp, #28]
 800ec60:	e004      	b.n	800ec6c <_vfiprintf_r+0x128>
 800ec62:	4252      	negs	r2, r2
 800ec64:	f043 0302 	orr.w	r3, r3, #2
 800ec68:	9207      	str	r2, [sp, #28]
 800ec6a:	9304      	str	r3, [sp, #16]
 800ec6c:	f898 3000 	ldrb.w	r3, [r8]
 800ec70:	2b2e      	cmp	r3, #46	; 0x2e
 800ec72:	d10e      	bne.n	800ec92 <_vfiprintf_r+0x14e>
 800ec74:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ec78:	2b2a      	cmp	r3, #42	; 0x2a
 800ec7a:	d138      	bne.n	800ecee <_vfiprintf_r+0x1aa>
 800ec7c:	9b03      	ldr	r3, [sp, #12]
 800ec7e:	1d1a      	adds	r2, r3, #4
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	9203      	str	r2, [sp, #12]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	bfb8      	it	lt
 800ec88:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec8c:	f108 0802 	add.w	r8, r8, #2
 800ec90:	9305      	str	r3, [sp, #20]
 800ec92:	4d33      	ldr	r5, [pc, #204]	; (800ed60 <_vfiprintf_r+0x21c>)
 800ec94:	f898 1000 	ldrb.w	r1, [r8]
 800ec98:	2203      	movs	r2, #3
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	f7f1 fab0 	bl	8000200 <memchr>
 800eca0:	b140      	cbz	r0, 800ecb4 <_vfiprintf_r+0x170>
 800eca2:	2340      	movs	r3, #64	; 0x40
 800eca4:	1b40      	subs	r0, r0, r5
 800eca6:	fa03 f000 	lsl.w	r0, r3, r0
 800ecaa:	9b04      	ldr	r3, [sp, #16]
 800ecac:	4303      	orrs	r3, r0
 800ecae:	f108 0801 	add.w	r8, r8, #1
 800ecb2:	9304      	str	r3, [sp, #16]
 800ecb4:	f898 1000 	ldrb.w	r1, [r8]
 800ecb8:	482a      	ldr	r0, [pc, #168]	; (800ed64 <_vfiprintf_r+0x220>)
 800ecba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecbe:	2206      	movs	r2, #6
 800ecc0:	f108 0701 	add.w	r7, r8, #1
 800ecc4:	f7f1 fa9c 	bl	8000200 <memchr>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	d037      	beq.n	800ed3c <_vfiprintf_r+0x1f8>
 800eccc:	4b26      	ldr	r3, [pc, #152]	; (800ed68 <_vfiprintf_r+0x224>)
 800ecce:	bb1b      	cbnz	r3, 800ed18 <_vfiprintf_r+0x1d4>
 800ecd0:	9b03      	ldr	r3, [sp, #12]
 800ecd2:	3307      	adds	r3, #7
 800ecd4:	f023 0307 	bic.w	r3, r3, #7
 800ecd8:	3308      	adds	r3, #8
 800ecda:	9303      	str	r3, [sp, #12]
 800ecdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecde:	444b      	add	r3, r9
 800ece0:	9309      	str	r3, [sp, #36]	; 0x24
 800ece2:	e750      	b.n	800eb86 <_vfiprintf_r+0x42>
 800ece4:	fb05 3202 	mla	r2, r5, r2, r3
 800ece8:	2001      	movs	r0, #1
 800ecea:	4688      	mov	r8, r1
 800ecec:	e78a      	b.n	800ec04 <_vfiprintf_r+0xc0>
 800ecee:	2300      	movs	r3, #0
 800ecf0:	f108 0801 	add.w	r8, r8, #1
 800ecf4:	9305      	str	r3, [sp, #20]
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	250a      	movs	r5, #10
 800ecfa:	4640      	mov	r0, r8
 800ecfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed00:	3a30      	subs	r2, #48	; 0x30
 800ed02:	2a09      	cmp	r2, #9
 800ed04:	d903      	bls.n	800ed0e <_vfiprintf_r+0x1ca>
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d0c3      	beq.n	800ec92 <_vfiprintf_r+0x14e>
 800ed0a:	9105      	str	r1, [sp, #20]
 800ed0c:	e7c1      	b.n	800ec92 <_vfiprintf_r+0x14e>
 800ed0e:	fb05 2101 	mla	r1, r5, r1, r2
 800ed12:	2301      	movs	r3, #1
 800ed14:	4680      	mov	r8, r0
 800ed16:	e7f0      	b.n	800ecfa <_vfiprintf_r+0x1b6>
 800ed18:	ab03      	add	r3, sp, #12
 800ed1a:	9300      	str	r3, [sp, #0]
 800ed1c:	4622      	mov	r2, r4
 800ed1e:	4b13      	ldr	r3, [pc, #76]	; (800ed6c <_vfiprintf_r+0x228>)
 800ed20:	a904      	add	r1, sp, #16
 800ed22:	4630      	mov	r0, r6
 800ed24:	f7fd fe06 	bl	800c934 <_printf_float>
 800ed28:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ed2c:	4681      	mov	r9, r0
 800ed2e:	d1d5      	bne.n	800ecdc <_vfiprintf_r+0x198>
 800ed30:	89a3      	ldrh	r3, [r4, #12]
 800ed32:	065b      	lsls	r3, r3, #25
 800ed34:	f53f af7e 	bmi.w	800ec34 <_vfiprintf_r+0xf0>
 800ed38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed3a:	e77d      	b.n	800ec38 <_vfiprintf_r+0xf4>
 800ed3c:	ab03      	add	r3, sp, #12
 800ed3e:	9300      	str	r3, [sp, #0]
 800ed40:	4622      	mov	r2, r4
 800ed42:	4b0a      	ldr	r3, [pc, #40]	; (800ed6c <_vfiprintf_r+0x228>)
 800ed44:	a904      	add	r1, sp, #16
 800ed46:	4630      	mov	r0, r6
 800ed48:	f7fe f8aa 	bl	800cea0 <_printf_i>
 800ed4c:	e7ec      	b.n	800ed28 <_vfiprintf_r+0x1e4>
 800ed4e:	bf00      	nop
 800ed50:	0800f0a0 	.word	0x0800f0a0
 800ed54:	0800f1dc 	.word	0x0800f1dc
 800ed58:	0800f0c0 	.word	0x0800f0c0
 800ed5c:	0800f080 	.word	0x0800f080
 800ed60:	0800f1e2 	.word	0x0800f1e2
 800ed64:	0800f1e6 	.word	0x0800f1e6
 800ed68:	0800c935 	.word	0x0800c935
 800ed6c:	0800eb1f 	.word	0x0800eb1f

0800ed70 <__sread>:
 800ed70:	b510      	push	{r4, lr}
 800ed72:	460c      	mov	r4, r1
 800ed74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed78:	f000 f8a6 	bl	800eec8 <_read_r>
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	bfab      	itete	ge
 800ed80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ed82:	89a3      	ldrhlt	r3, [r4, #12]
 800ed84:	181b      	addge	r3, r3, r0
 800ed86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ed8a:	bfac      	ite	ge
 800ed8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ed8e:	81a3      	strhlt	r3, [r4, #12]
 800ed90:	bd10      	pop	{r4, pc}

0800ed92 <__swrite>:
 800ed92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed96:	461f      	mov	r7, r3
 800ed98:	898b      	ldrh	r3, [r1, #12]
 800ed9a:	05db      	lsls	r3, r3, #23
 800ed9c:	4605      	mov	r5, r0
 800ed9e:	460c      	mov	r4, r1
 800eda0:	4616      	mov	r6, r2
 800eda2:	d505      	bpl.n	800edb0 <__swrite+0x1e>
 800eda4:	2302      	movs	r3, #2
 800eda6:	2200      	movs	r2, #0
 800eda8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edac:	f000 f868 	bl	800ee80 <_lseek_r>
 800edb0:	89a3      	ldrh	r3, [r4, #12]
 800edb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800edba:	81a3      	strh	r3, [r4, #12]
 800edbc:	4632      	mov	r2, r6
 800edbe:	463b      	mov	r3, r7
 800edc0:	4628      	mov	r0, r5
 800edc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edc6:	f000 b817 	b.w	800edf8 <_write_r>

0800edca <__sseek>:
 800edca:	b510      	push	{r4, lr}
 800edcc:	460c      	mov	r4, r1
 800edce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edd2:	f000 f855 	bl	800ee80 <_lseek_r>
 800edd6:	1c43      	adds	r3, r0, #1
 800edd8:	89a3      	ldrh	r3, [r4, #12]
 800edda:	bf15      	itete	ne
 800eddc:	6560      	strne	r0, [r4, #84]	; 0x54
 800edde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ede2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ede6:	81a3      	strheq	r3, [r4, #12]
 800ede8:	bf18      	it	ne
 800edea:	81a3      	strhne	r3, [r4, #12]
 800edec:	bd10      	pop	{r4, pc}

0800edee <__sclose>:
 800edee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edf2:	f000 b813 	b.w	800ee1c <_close_r>
	...

0800edf8 <_write_r>:
 800edf8:	b538      	push	{r3, r4, r5, lr}
 800edfa:	4c07      	ldr	r4, [pc, #28]	; (800ee18 <_write_r+0x20>)
 800edfc:	4605      	mov	r5, r0
 800edfe:	4608      	mov	r0, r1
 800ee00:	4611      	mov	r1, r2
 800ee02:	2200      	movs	r2, #0
 800ee04:	6022      	str	r2, [r4, #0]
 800ee06:	461a      	mov	r2, r3
 800ee08:	f7fb fcb0 	bl	800a76c <_write>
 800ee0c:	1c43      	adds	r3, r0, #1
 800ee0e:	d102      	bne.n	800ee16 <_write_r+0x1e>
 800ee10:	6823      	ldr	r3, [r4, #0]
 800ee12:	b103      	cbz	r3, 800ee16 <_write_r+0x1e>
 800ee14:	602b      	str	r3, [r5, #0]
 800ee16:	bd38      	pop	{r3, r4, r5, pc}
 800ee18:	20000bf0 	.word	0x20000bf0

0800ee1c <_close_r>:
 800ee1c:	b538      	push	{r3, r4, r5, lr}
 800ee1e:	4c06      	ldr	r4, [pc, #24]	; (800ee38 <_close_r+0x1c>)
 800ee20:	2300      	movs	r3, #0
 800ee22:	4605      	mov	r5, r0
 800ee24:	4608      	mov	r0, r1
 800ee26:	6023      	str	r3, [r4, #0]
 800ee28:	f7f2 fdbb 	bl	80019a2 <_close>
 800ee2c:	1c43      	adds	r3, r0, #1
 800ee2e:	d102      	bne.n	800ee36 <_close_r+0x1a>
 800ee30:	6823      	ldr	r3, [r4, #0]
 800ee32:	b103      	cbz	r3, 800ee36 <_close_r+0x1a>
 800ee34:	602b      	str	r3, [r5, #0]
 800ee36:	bd38      	pop	{r3, r4, r5, pc}
 800ee38:	20000bf0 	.word	0x20000bf0

0800ee3c <_fstat_r>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4c07      	ldr	r4, [pc, #28]	; (800ee5c <_fstat_r+0x20>)
 800ee40:	2300      	movs	r3, #0
 800ee42:	4605      	mov	r5, r0
 800ee44:	4608      	mov	r0, r1
 800ee46:	4611      	mov	r1, r2
 800ee48:	6023      	str	r3, [r4, #0]
 800ee4a:	f7f2 fdb6 	bl	80019ba <_fstat>
 800ee4e:	1c43      	adds	r3, r0, #1
 800ee50:	d102      	bne.n	800ee58 <_fstat_r+0x1c>
 800ee52:	6823      	ldr	r3, [r4, #0]
 800ee54:	b103      	cbz	r3, 800ee58 <_fstat_r+0x1c>
 800ee56:	602b      	str	r3, [r5, #0]
 800ee58:	bd38      	pop	{r3, r4, r5, pc}
 800ee5a:	bf00      	nop
 800ee5c:	20000bf0 	.word	0x20000bf0

0800ee60 <_isatty_r>:
 800ee60:	b538      	push	{r3, r4, r5, lr}
 800ee62:	4c06      	ldr	r4, [pc, #24]	; (800ee7c <_isatty_r+0x1c>)
 800ee64:	2300      	movs	r3, #0
 800ee66:	4605      	mov	r5, r0
 800ee68:	4608      	mov	r0, r1
 800ee6a:	6023      	str	r3, [r4, #0]
 800ee6c:	f7f2 fdb5 	bl	80019da <_isatty>
 800ee70:	1c43      	adds	r3, r0, #1
 800ee72:	d102      	bne.n	800ee7a <_isatty_r+0x1a>
 800ee74:	6823      	ldr	r3, [r4, #0]
 800ee76:	b103      	cbz	r3, 800ee7a <_isatty_r+0x1a>
 800ee78:	602b      	str	r3, [r5, #0]
 800ee7a:	bd38      	pop	{r3, r4, r5, pc}
 800ee7c:	20000bf0 	.word	0x20000bf0

0800ee80 <_lseek_r>:
 800ee80:	b538      	push	{r3, r4, r5, lr}
 800ee82:	4c07      	ldr	r4, [pc, #28]	; (800eea0 <_lseek_r+0x20>)
 800ee84:	4605      	mov	r5, r0
 800ee86:	4608      	mov	r0, r1
 800ee88:	4611      	mov	r1, r2
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	6022      	str	r2, [r4, #0]
 800ee8e:	461a      	mov	r2, r3
 800ee90:	f7f2 fdae 	bl	80019f0 <_lseek>
 800ee94:	1c43      	adds	r3, r0, #1
 800ee96:	d102      	bne.n	800ee9e <_lseek_r+0x1e>
 800ee98:	6823      	ldr	r3, [r4, #0]
 800ee9a:	b103      	cbz	r3, 800ee9e <_lseek_r+0x1e>
 800ee9c:	602b      	str	r3, [r5, #0]
 800ee9e:	bd38      	pop	{r3, r4, r5, pc}
 800eea0:	20000bf0 	.word	0x20000bf0

0800eea4 <__ascii_mbtowc>:
 800eea4:	b082      	sub	sp, #8
 800eea6:	b901      	cbnz	r1, 800eeaa <__ascii_mbtowc+0x6>
 800eea8:	a901      	add	r1, sp, #4
 800eeaa:	b142      	cbz	r2, 800eebe <__ascii_mbtowc+0x1a>
 800eeac:	b14b      	cbz	r3, 800eec2 <__ascii_mbtowc+0x1e>
 800eeae:	7813      	ldrb	r3, [r2, #0]
 800eeb0:	600b      	str	r3, [r1, #0]
 800eeb2:	7812      	ldrb	r2, [r2, #0]
 800eeb4:	1c10      	adds	r0, r2, #0
 800eeb6:	bf18      	it	ne
 800eeb8:	2001      	movne	r0, #1
 800eeba:	b002      	add	sp, #8
 800eebc:	4770      	bx	lr
 800eebe:	4610      	mov	r0, r2
 800eec0:	e7fb      	b.n	800eeba <__ascii_mbtowc+0x16>
 800eec2:	f06f 0001 	mvn.w	r0, #1
 800eec6:	e7f8      	b.n	800eeba <__ascii_mbtowc+0x16>

0800eec8 <_read_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4c07      	ldr	r4, [pc, #28]	; (800eee8 <_read_r+0x20>)
 800eecc:	4605      	mov	r5, r0
 800eece:	4608      	mov	r0, r1
 800eed0:	4611      	mov	r1, r2
 800eed2:	2200      	movs	r2, #0
 800eed4:	6022      	str	r2, [r4, #0]
 800eed6:	461a      	mov	r2, r3
 800eed8:	f7f2 fd46 	bl	8001968 <_read>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d102      	bne.n	800eee6 <_read_r+0x1e>
 800eee0:	6823      	ldr	r3, [r4, #0]
 800eee2:	b103      	cbz	r3, 800eee6 <_read_r+0x1e>
 800eee4:	602b      	str	r3, [r5, #0]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}
 800eee8:	20000bf0 	.word	0x20000bf0

0800eeec <__ascii_wctomb>:
 800eeec:	b149      	cbz	r1, 800ef02 <__ascii_wctomb+0x16>
 800eeee:	2aff      	cmp	r2, #255	; 0xff
 800eef0:	bf85      	ittet	hi
 800eef2:	238a      	movhi	r3, #138	; 0x8a
 800eef4:	6003      	strhi	r3, [r0, #0]
 800eef6:	700a      	strbls	r2, [r1, #0]
 800eef8:	f04f 30ff 	movhi.w	r0, #4294967295
 800eefc:	bf98      	it	ls
 800eefe:	2001      	movls	r0, #1
 800ef00:	4770      	bx	lr
 800ef02:	4608      	mov	r0, r1
 800ef04:	4770      	bx	lr
	...

0800ef08 <_init>:
 800ef08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef0a:	bf00      	nop
 800ef0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef0e:	bc08      	pop	{r3}
 800ef10:	469e      	mov	lr, r3
 800ef12:	4770      	bx	lr

0800ef14 <_fini>:
 800ef14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef16:	bf00      	nop
 800ef18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef1a:	bc08      	pop	{r3}
 800ef1c:	469e      	mov	lr, r3
 800ef1e:	4770      	bx	lr
