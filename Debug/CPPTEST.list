
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001472c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  080148e0  080148e0  000248e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e60  08014e60  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08014e60  08014e60  00024e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e68  08014e68  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e68  08014e68  00024e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014e6c  08014e6c  00024e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08014e70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037a4  200001e0  08015050  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003984  08015050  00033984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d62f  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005a25  00000000  00000000  0005d83f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022b0  00000000  00000000  00063268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ff8  00000000  00000000  00065518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000900d  00000000  00000000  00067510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020c83  00000000  00000000  0007051d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1f13  00000000  00000000  000911a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001830b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2f4  00000000  00000000  00183130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080148c4 	.word	0x080148c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	080148c4 	.word	0x080148c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <MX_DMA_Init+0x4c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <MX_DMA_Init+0x4c>)
 8000fb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_DMA_Init+0x4c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_DMA_Init+0x4c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <MX_DMA_Init+0x4c>)
 8000fd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_DMA_Init+0x4c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <MX_FREERTOS_Init+0x18>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_FREERTOS_Init+0x1c>)
 8001002:	f00b fef1 	bl	800cde8 <osThreadNew>
 8001006:	4602      	mov	r2, r0
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <MX_FREERTOS_Init+0x20>)
 800100a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	08014a64 	.word	0x08014a64
 8001014:	0800101d 	.word	0x0800101d
 8001018:	20000f30 	.word	0x20000f30

0800101c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f00b ff85 	bl	800cf34 <osDelay>
 800102a:	e7fb      	b.n	8001024 <StartDefaultTask+0x8>

0800102c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
 8001046:	4b80      	ldr	r3, [pc, #512]	; (8001248 <MX_GPIO_Init+0x21c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a7f      	ldr	r2, [pc, #508]	; (8001248 <MX_GPIO_Init+0x21c>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b7d      	ldr	r3, [pc, #500]	; (8001248 <MX_GPIO_Init+0x21c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	4b79      	ldr	r3, [pc, #484]	; (8001248 <MX_GPIO_Init+0x21c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a78      	ldr	r2, [pc, #480]	; (8001248 <MX_GPIO_Init+0x21c>)
 8001068:	f043 0320 	orr.w	r3, r3, #32
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b76      	ldr	r3, [pc, #472]	; (8001248 <MX_GPIO_Init+0x21c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0320 	and.w	r3, r3, #32
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	4b72      	ldr	r3, [pc, #456]	; (8001248 <MX_GPIO_Init+0x21c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a71      	ldr	r2, [pc, #452]	; (8001248 <MX_GPIO_Init+0x21c>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b6f      	ldr	r3, [pc, #444]	; (8001248 <MX_GPIO_Init+0x21c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	4b6b      	ldr	r3, [pc, #428]	; (8001248 <MX_GPIO_Init+0x21c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a6a      	ldr	r2, [pc, #424]	; (8001248 <MX_GPIO_Init+0x21c>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b68      	ldr	r3, [pc, #416]	; (8001248 <MX_GPIO_Init+0x21c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b64      	ldr	r3, [pc, #400]	; (8001248 <MX_GPIO_Init+0x21c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a63      	ldr	r2, [pc, #396]	; (8001248 <MX_GPIO_Init+0x21c>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b61      	ldr	r3, [pc, #388]	; (8001248 <MX_GPIO_Init+0x21c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b5d      	ldr	r3, [pc, #372]	; (8001248 <MX_GPIO_Init+0x21c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a5c      	ldr	r2, [pc, #368]	; (8001248 <MX_GPIO_Init+0x21c>)
 80010d8:	f043 0310 	orr.w	r3, r3, #16
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <MX_GPIO_Init+0x21c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b56      	ldr	r3, [pc, #344]	; (8001248 <MX_GPIO_Init+0x21c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a55      	ldr	r2, [pc, #340]	; (8001248 <MX_GPIO_Init+0x21c>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b53      	ldr	r3, [pc, #332]	; (8001248 <MX_GPIO_Init+0x21c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b4f      	ldr	r3, [pc, #316]	; (8001248 <MX_GPIO_Init+0x21c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <MX_GPIO_Init+0x21c>)
 8001110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <MX_GPIO_Init+0x21c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f244 0181 	movw	r1, #16513	; 0x4081
 8001128:	4848      	ldr	r0, [pc, #288]	; (800124c <MX_GPIO_Init+0x220>)
 800112a:	f002 fa73 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	4847      	ldr	r0, [pc, #284]	; (8001250 <MX_GPIO_Init+0x224>)
 8001134:	f002 fa6e 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113e:	4b45      	ldr	r3, [pc, #276]	; (8001254 <MX_GPIO_Init+0x228>)
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	4842      	ldr	r0, [pc, #264]	; (8001258 <MX_GPIO_Init+0x22c>)
 800114e:	f002 f89f 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001152:	2332      	movs	r3, #50	; 0x32
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001162:	230b      	movs	r3, #11
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	483a      	ldr	r0, [pc, #232]	; (8001258 <MX_GPIO_Init+0x22c>)
 800116e:	f002 f88f 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001172:	2386      	movs	r3, #134	; 0x86
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001182:	230b      	movs	r3, #11
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	4833      	ldr	r0, [pc, #204]	; (800125c <MX_GPIO_Init+0x230>)
 800118e:	f002 f87f 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001192:	f244 0381 	movw	r3, #16513	; 0x4081
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a8:	4619      	mov	r1, r3
 80011aa:	4828      	ldr	r0, [pc, #160]	; (800124c <MX_GPIO_Init+0x220>)
 80011ac:	f002 f870 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011c2:	230b      	movs	r3, #11
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	4619      	mov	r1, r3
 80011cc:	481f      	ldr	r0, [pc, #124]	; (800124c <MX_GPIO_Init+0x220>)
 80011ce:	f002 f85f 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011d2:	2340      	movs	r3, #64	; 0x40
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	4619      	mov	r1, r3
 80011e8:	4819      	ldr	r0, [pc, #100]	; (8001250 <MX_GPIO_Init+0x224>)
 80011ea:	f002 f851 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_GPIO_Init+0x224>)
 8001202:	f002 f845 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_GPIO_Init+0x228>)
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	4811      	ldr	r0, [pc, #68]	; (8001260 <MX_GPIO_Init+0x234>)
 800121a:	f002 f839 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800121e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001230:	230b      	movs	r3, #11
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001238:	4619      	mov	r1, r3
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_GPIO_Init+0x224>)
 800123c:	f002 f828 	bl	8003290 <HAL_GPIO_Init>

}
 8001240:	bf00      	nop
 8001242:	3738      	adds	r7, #56	; 0x38
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40020400 	.word	0x40020400
 8001250:	40021800 	.word	0x40021800
 8001254:	10110000 	.word	0x10110000
 8001258:	40020800 	.word	0x40020800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020c00 	.word	0x40020c00

08001264 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_I2C1_Init+0x74>)
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <MX_I2C1_Init+0x78>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <MX_I2C1_Init+0x7c>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_I2C1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_I2C1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_I2C1_Init+0x74>)
 80012a2:	f002 f9d1 	bl	8003648 <HAL_I2C_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ac:	f000 fa28 	bl	8001700 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b0:	2100      	movs	r1, #0
 80012b2:	4809      	ldr	r0, [pc, #36]	; (80012d8 <MX_I2C1_Init+0x74>)
 80012b4:	f003 ff06 	bl	80050c4 <HAL_I2CEx_ConfigAnalogFilter>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012be:	f000 fa1f 	bl	8001700 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c2:	2100      	movs	r1, #0
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_I2C1_Init+0x74>)
 80012c6:	f003 ff39 	bl	800513c <HAL_I2CEx_ConfigDigitalFilter>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012d0:	f000 fa16 	bl	8001700 <Error_Handler>
  }

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000f34 	.word	0x20000f34
 80012dc:	40005400 	.word	0x40005400
 80012e0:	00061a80 	.word	0x00061a80

080012e4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_I2C2_Init+0x74>)
 80012ea:	4a1c      	ldr	r2, [pc, #112]	; (800135c <MX_I2C2_Init+0x78>)
 80012ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_I2C2_Init+0x74>)
 80012f0:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <MX_I2C2_Init+0x7c>)
 80012f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <MX_I2C2_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_I2C2_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <MX_I2C2_Init+0x74>)
 8001302:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001306:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_I2C2_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_I2C2_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_I2C2_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_I2C2_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_I2C2_Init+0x74>)
 8001322:	f002 f991 	bl	8003648 <HAL_I2C_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800132c:	f000 f9e8 	bl	8001700 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	4809      	ldr	r0, [pc, #36]	; (8001358 <MX_I2C2_Init+0x74>)
 8001334:	f003 fec6 	bl	80050c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800133e:	f000 f9df 	bl	8001700 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_I2C2_Init+0x74>)
 8001346:	f003 fef9 	bl	800513c <HAL_I2CEx_ConfigDigitalFilter>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001350:	f000 f9d6 	bl	8001700 <Error_Handler>
  }

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000f88 	.word	0x20000f88
 800135c:	40005800 	.word	0x40005800
 8001360:	00061a80 	.word	0x00061a80

08001364 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	; 0x30
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a49      	ldr	r2, [pc, #292]	; (80014a8 <HAL_I2C_MspInit+0x144>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d15b      	bne.n	800143e <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	4b48      	ldr	r3, [pc, #288]	; (80014ac <HAL_I2C_MspInit+0x148>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a47      	ldr	r2, [pc, #284]	; (80014ac <HAL_I2C_MspInit+0x148>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b45      	ldr	r3, [pc, #276]	; (80014ac <HAL_I2C_MspInit+0x148>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80013a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a8:	2312      	movs	r3, #18
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b4:	2304      	movs	r3, #4
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	483c      	ldr	r0, [pc, #240]	; (80014b0 <HAL_I2C_MspInit+0x14c>)
 80013c0:	f001 ff66 	bl	8003290 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <HAL_I2C_MspInit+0x148>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	4a37      	ldr	r2, [pc, #220]	; (80014ac <HAL_I2C_MspInit+0x148>)
 80013ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d2:	6413      	str	r3, [r2, #64]	; 0x40
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <HAL_I2C_MspInit+0x148>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80013e0:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 80013e2:	4a35      	ldr	r2, [pc, #212]	; (80014b8 <HAL_I2C_MspInit+0x154>)
 80013e4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80013e6:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 80013e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013ec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ee:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 80013fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001400:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001402:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800140e:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001420:	4824      	ldr	r0, [pc, #144]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 8001422:	f001 fb8b 	bl	8002b3c <HAL_DMA_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800142c:	f000 f968 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a20      	ldr	r2, [pc, #128]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
 8001436:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <HAL_I2C_MspInit+0x150>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800143c:	e030      	b.n	80014a0 <HAL_I2C_MspInit+0x13c>
  else if(i2cHandle->Instance==I2C2)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <HAL_I2C_MspInit+0x158>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d12b      	bne.n	80014a0 <HAL_I2C_MspInit+0x13c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <HAL_I2C_MspInit+0x148>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a16      	ldr	r2, [pc, #88]	; (80014ac <HAL_I2C_MspInit+0x148>)
 8001452:	f043 0320 	orr.w	r3, r3, #32
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <HAL_I2C_MspInit+0x148>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f003 0320 	and.w	r3, r3, #32
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001464:	2303      	movs	r3, #3
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001468:	2312      	movs	r3, #18
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146c:	2301      	movs	r3, #1
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001474:	2304      	movs	r3, #4
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <HAL_I2C_MspInit+0x15c>)
 8001480:	f001 ff06 	bl	8003290 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_I2C_MspInit+0x148>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_I2C_MspInit+0x148>)
 800148e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_I2C_MspInit+0x148>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3730      	adds	r7, #48	; 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40005400 	.word	0x40005400
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020400 	.word	0x40020400
 80014b4:	20000fdc 	.word	0x20000fdc
 80014b8:	40026088 	.word	0x40026088
 80014bc:	40005800 	.word	0x40005800
 80014c0:	40021400 	.word	0x40021400

080014c4 <fcMsOverFlow>:
uint32_t _fcOverflowCnt;
static __inline uint32_t fcMicroSecond(){
	return ((uint64_t)_fcOverflowCnt<<32) | (__HAL_TIM_GetCounter(FC_USEC_TIMER));
}

static __inline void fcMsOverFlow(){
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	_fcOverflowCnt++;
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <fcMsOverFlow+0x18>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	4a03      	ldr	r2, [pc, #12]	; (80014dc <fcMsOverFlow+0x18>)
 80014d0:	6013      	str	r3, [r2, #0]
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	2000103c 	.word	0x2000103c

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e4:	f001 f9e4 	bl	80028b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e8:	f000 f82c 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ec:	f7ff fd9e 	bl	800102c <MX_GPIO_Init>
  MX_DMA_Init();
 80014f0:	f7ff fd5a 	bl	8000fa8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80014f4:	f000 ff80 	bl	80023f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80014f8:	f001 f928 	bl	800274c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80014fc:	f7ff feb2 	bl	8001264 <MX_I2C1_Init>
  MX_TIM11_Init();
 8001500:	f000 fda4 	bl	800204c <MX_TIM11_Init>
  MX_TIM3_Init();
 8001504:	f000 fc3c 	bl	8001d80 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001508:	f000 fcbc 	bl	8001e84 <MX_TIM4_Init>
  MX_UART7_Init();
 800150c:	f000 fef2 	bl	80022f4 <MX_UART7_Init>
  MX_USART2_UART_Init();
 8001510:	f000 ff48 	bl	80023a4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001514:	f7ff fee6 	bl	80012e4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001518:	f000 fbe6 	bl	8001ce8 <MX_TIM2_Init>
  MX_TIM10_Init();
 800151c:	f000 fd4a 	bl	8001fb4 <MX_TIM10_Init>
  MX_UART8_Init();
 8001520:	f000 ff16 	bl	8002350 <MX_UART8_Init>
  MX_SDIO_SD_Init();
 8001524:	f000 f8f4 	bl	8001710 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001528:	f008 fc96 	bl	8009e58 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800152c:	f000 f874 	bl	8001618 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  userMain();
 8001530:	f008 ffd4 	bl	800a4dc <userMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001534:	f00b fba4 	bl	800cc80 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8001538:	f7ff fd5e 	bl	8000ff8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800153c:	f00b fbf6 	bl	800cd2c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001540:	e7fe      	b.n	8001540 <main+0x60>
	...

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b094      	sub	sp, #80	; 0x50
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	2230      	movs	r2, #48	; 0x30
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f00e fed5 	bl	8010302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <SystemClock_Config+0xcc>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	4a27      	ldr	r2, [pc, #156]	; (8001610 <SystemClock_Config+0xcc>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	; 0x40
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <SystemClock_Config+0xcc>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <SystemClock_Config+0xd0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a21      	ldr	r2, [pc, #132]	; (8001614 <SystemClock_Config+0xd0>)
 800158e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <SystemClock_Config+0xd0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a0:	2301      	movs	r3, #1
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015aa:	2302      	movs	r3, #2
 80015ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015b4:	2308      	movs	r3, #8
 80015b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015be:	2302      	movs	r3, #2
 80015c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015c2:	2307      	movs	r3, #7
 80015c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 ff12 	bl	80053f4 <HAL_RCC_OscConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015d6:	f000 f893 	bl	8001700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2302      	movs	r3, #2
 80015e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2105      	movs	r1, #5
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 f96b 	bl	80058d4 <HAL_RCC_ClockConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001604:	f000 f87c 	bl	8001700 <Error_Handler>
  }
}
 8001608:	bf00      	nop
 800160a:	3750      	adds	r7, #80	; 0x50
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	40007000 	.word	0x40007000

08001618 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2105      	movs	r1, #5
 8001620:	201f      	movs	r0, #31
 8001622:	f001 fa61 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001626:	201f      	movs	r0, #31
 8001628:	f001 fa7a 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2105      	movs	r1, #5
 8001630:	2020      	movs	r0, #32
 8001632:	f001 fa59 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001636:	2020      	movs	r0, #32
 8001638:	f001 fa72 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  /* UART7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2105      	movs	r1, #5
 8001640:	2052      	movs	r0, #82	; 0x52
 8001642:	f001 fa51 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001646:	2052      	movs	r0, #82	; 0x52
 8001648:	f001 fa6a 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2105      	movs	r1, #5
 8001650:	2021      	movs	r0, #33	; 0x21
 8001652:	f001 fa49 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001656:	2021      	movs	r0, #33	; 0x21
 8001658:	f001 fa62 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  /* I2C2_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2105      	movs	r1, #5
 8001660:	2022      	movs	r0, #34	; 0x22
 8001662:	f001 fa41 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001666:	2022      	movs	r0, #34	; 0x22
 8001668:	f001 fa5a 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  /* SDIO_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2105      	movs	r1, #5
 8001670:	2031      	movs	r0, #49	; 0x31
 8001672:	f001 fa39 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001676:	2031      	movs	r0, #49	; 0x31
 8001678:	f001 fa52 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2105      	movs	r1, #5
 8001680:	200e      	movs	r0, #14
 8001682:	f001 fa31 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001686:	200e      	movs	r0, #14
 8001688:	f001 fa4a 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2105      	movs	r1, #5
 8001690:	2011      	movs	r0, #17
 8001692:	f001 fa29 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001696:	2011      	movs	r0, #17
 8001698:	f001 fa42 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800169c:	2200      	movs	r2, #0
 800169e:	2105      	movs	r1, #5
 80016a0:	2010      	movs	r0, #16
 80016a2:	f001 fa21 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016a6:	2010      	movs	r0, #16
 80016a8:	f001 fa3a 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2105      	movs	r1, #5
 80016b0:	203b      	movs	r0, #59	; 0x3b
 80016b2:	f001 fa19 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80016b6:	203b      	movs	r0, #59	; 0x3b
 80016b8:	f001 fa32 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2105      	movs	r1, #5
 80016c0:	2045      	movs	r0, #69	; 0x45
 80016c2:	f001 fa11 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80016c6:	2045      	movs	r0, #69	; 0x45
 80016c8:	f001 fa2a 	bl	8002b20 <HAL_NVIC_EnableIRQ>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	/* microseond timer */
  if(htim->Instance == TIM2){
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e0:	d101      	bne.n	80016e6 <HAL_TIM_PeriodElapsedCallback+0x16>
	  fcMsOverFlow();
 80016e2:	f7ff feef 	bl	80014c4 <fcMsOverFlow>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 80016f0:	f001 f900 	bl	80028f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40001000 	.word	0x40001000

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_SDIO_SD_Init+0x38>)
 8001716:	4a0d      	ldr	r2, [pc, #52]	; (800174c <MX_SDIO_SD_Init+0x3c>)
 8001718:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_SDIO_SD_Init+0x38>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_SDIO_SD_Init+0x38>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_SDIO_SD_Init+0x38>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SDIO_SD_Init+0x38>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <MX_SDIO_SD_Init+0x38>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <MX_SDIO_SD_Init+0x38>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]

}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	20001100 	.word	0x20001100
 800174c:	40012c00 	.word	0x40012c00

08001750 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a6c      	ldr	r2, [pc, #432]	; (8001920 <HAL_SD_MspInit+0x1d0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f040 80d2 	bne.w	8001918 <HAL_SD_MspInit+0x1c8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	4b6a      	ldr	r3, [pc, #424]	; (8001924 <HAL_SD_MspInit+0x1d4>)
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	4a69      	ldr	r2, [pc, #420]	; (8001924 <HAL_SD_MspInit+0x1d4>)
 800177e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001782:	6453      	str	r3, [r2, #68]	; 0x44
 8001784:	4b67      	ldr	r3, [pc, #412]	; (8001924 <HAL_SD_MspInit+0x1d4>)
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	4b63      	ldr	r3, [pc, #396]	; (8001924 <HAL_SD_MspInit+0x1d4>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	4a62      	ldr	r2, [pc, #392]	; (8001924 <HAL_SD_MspInit+0x1d4>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6313      	str	r3, [r2, #48]	; 0x30
 80017a0:	4b60      	ldr	r3, [pc, #384]	; (8001924 <HAL_SD_MspInit+0x1d4>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <HAL_SD_MspInit+0x1d4>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	4a5b      	ldr	r2, [pc, #364]	; (8001924 <HAL_SD_MspInit+0x1d4>)
 80017b6:	f043 0308 	orr.w	r3, r3, #8
 80017ba:	6313      	str	r3, [r2, #48]	; 0x30
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_SD_MspInit+0x1d4>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80017c8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80017da:	230c      	movs	r3, #12
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4850      	ldr	r0, [pc, #320]	; (8001928 <HAL_SD_MspInit+0x1d8>)
 80017e6:	f001 fd53 	bl	8003290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80017fc:	230c      	movs	r3, #12
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4848      	ldr	r0, [pc, #288]	; (8001928 <HAL_SD_MspInit+0x1d8>)
 8001808:	f001 fd42 	bl	8003290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800180c:	2304      	movs	r3, #4
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001814:	2301      	movs	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800181c:	230c      	movs	r3, #12
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	4841      	ldr	r0, [pc, #260]	; (800192c <HAL_SD_MspInit+0x1dc>)
 8001828:	f001 fd32 	bl	8003290 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800182c:	4b40      	ldr	r3, [pc, #256]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 800182e:	4a41      	ldr	r2, [pc, #260]	; (8001934 <HAL_SD_MspInit+0x1e4>)
 8001830:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 8001834:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001838:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001840:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001846:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 8001848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800184e:	4b38      	ldr	r3, [pc, #224]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 8001850:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001854:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001856:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 8001858:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800185c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 8001860:	2220      	movs	r2, #32
 8001862:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800186a:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 800186c:	2204      	movs	r2, #4
 800186e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 8001872:	2203      	movs	r2, #3
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001876:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 8001878:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800187c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800187e:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 8001880:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001884:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001886:	482a      	ldr	r0, [pc, #168]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 8001888:	f001 f958 	bl	8002b3c <HAL_DMA_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001892:	f7ff ff35 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a25      	ldr	r2, [pc, #148]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
 800189c:	4a24      	ldr	r2, [pc, #144]	; (8001930 <HAL_SD_MspInit+0x1e0>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018a4:	4a25      	ldr	r2, [pc, #148]	; (800193c <HAL_SD_MspInit+0x1ec>)
 80018a6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ae:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018b2:	2240      	movs	r2, #64	; 0x40
 80018b4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ca:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018d6:	2220      	movs	r2, #32
 80018d8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018e2:	2204      	movs	r2, #4
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018e8:	2203      	movs	r2, #3
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80018fc:	480e      	ldr	r0, [pc, #56]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 80018fe:	f001 f91d 	bl	8002b3c <HAL_DMA_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001908:	f7ff fefa 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 8001910:	63da      	str	r2, [r3, #60]	; 0x3c
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_SD_MspInit+0x1e8>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	; 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40012c00 	.word	0x40012c00
 8001924:	40023800 	.word	0x40023800
 8001928:	40020800 	.word	0x40020800
 800192c:	40020c00 	.word	0x40020c00
 8001930:	20001040 	.word	0x20001040
 8001934:	40026458 	.word	0x40026458
 8001938:	200010a0 	.word	0x200010a0
 800193c:	400264a0 	.word	0x400264a0

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_MspInit+0x54>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a11      	ldr	r2, [pc, #68]	; (8001994 <HAL_MspInit+0x54>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_MspInit+0x54>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_MspInit+0x54>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_MspInit+0x54>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_MspInit+0x54>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	210f      	movs	r1, #15
 8001982:	f06f 0001 	mvn.w	r0, #1
 8001986:	f001 f8af 	bl	8002ae8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80019a8:	2200      	movs	r2, #0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	2036      	movs	r0, #54	; 0x36
 80019ae:	f001 f89b 	bl	8002ae8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80019b2:	2036      	movs	r0, #54	; 0x36
 80019b4:	f001 f8b4 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_InitTick+0xa4>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_InitTick+0xa4>)
 80019c2:	f043 0310 	orr.w	r3, r3, #16
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_InitTick+0xa4>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d4:	f107 0210 	add.w	r2, r7, #16
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f004 f96a 	bl	8005cb8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80019e4:	f004 f940 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 80019e8:	4603      	mov	r3, r0
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80019ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f0:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <HAL_InitTick+0xa8>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	0c9b      	lsrs	r3, r3, #18
 80019f8:	3b01      	subs	r3, #1
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_InitTick+0xac>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_InitTick+0xb0>)
 8001a00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_InitTick+0xac>)
 8001a04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a08:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_InitTick+0xac>)
 8001a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_InitTick+0xac>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_InitTick+0xac>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a1c:	4809      	ldr	r0, [pc, #36]	; (8001a44 <HAL_InitTick+0xac>)
 8001a1e:	f005 fc7b 	bl	8007318 <HAL_TIM_Base_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d104      	bne.n	8001a32 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a28:	4806      	ldr	r0, [pc, #24]	; (8001a44 <HAL_InitTick+0xac>)
 8001a2a:	f005 fca0 	bl	800736e <HAL_TIM_Base_Start_IT>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	e000      	b.n	8001a34 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3730      	adds	r7, #48	; 0x30
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	431bde83 	.word	0x431bde83
 8001a44:	20001184 	.word	0x20001184
 8001a48:	40001000 	.word	0x40001000

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <DMA1_Stream3_IRQHandler+0x10>)
 8001a86:	f001 f981 	bl	8002d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20001384 	.word	0x20001384

08001a94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <DMA1_Stream5_IRQHandler+0x10>)
 8001a9a:	f001 f977 	bl	8002d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000fdc 	.word	0x20000fdc

08001aa8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <DMA1_Stream6_IRQHandler+0x10>)
 8001aae:	f001 f96d 	bl	8002d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200013e4 	.word	0x200013e4

08001abc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001ac2:	f005 fcad 	bl	8007420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20001284 	.word	0x20001284

08001ad0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <TIM2_IRQHandler+0x10>)
 8001ad6:	f005 fca3 	bl	8007420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200012c4 	.word	0x200012c4

08001ae4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <I2C1_EV_IRQHandler+0x10>)
 8001aea:	f001 fee5 	bl	80038b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000f34 	.word	0x20000f34

08001af8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <I2C1_ER_IRQHandler+0x10>)
 8001afe:	f002 f841 	bl	8003b84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000f34 	.word	0x20000f34

08001b0c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <I2C2_EV_IRQHandler+0x10>)
 8001b12:	f001 fed1 	bl	80038b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000f88 	.word	0x20000f88

08001b20 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <I2C2_ER_IRQHandler+0x10>)
 8001b26:	f002 f82d 	bl	8003b84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000f88 	.word	0x20000f88

08001b34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <USART3_IRQHandler+0x10>)
 8001b3a:	f006 fb7f 	bl	800823c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20001344 	.word	0x20001344

08001b48 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <SDIO_IRQHandler+0x10>)
 8001b4e:	f004 fb4f 	bl	80061f0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20001100 	.word	0x20001100

08001b5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <TIM6_DAC_IRQHandler+0x10>)
 8001b62:	f005 fc5d 	bl	8007420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20001184 	.word	0x20001184

08001b70 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <DMA2_Stream3_IRQHandler+0x10>)
 8001b76:	f001 f909 	bl	8002d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20001040 	.word	0x20001040

08001b84 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <DMA2_Stream6_IRQHandler+0x10>)
 8001b8a:	f001 f8ff 	bl	8002d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200010a0 	.word	0x200010a0

08001b98 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <UART7_IRQHandler+0x10>)
 8001b9e:	f006 fb4d 	bl	800823c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20001304 	.word	0x20001304

08001bac <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <UART8_IRQHandler+0x10>)
 8001bb2:	f006 fb43 	bl	800823c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20001444 	.word	0x20001444

08001bc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	e00a      	b.n	8001be8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bd2:	f3af 8000 	nop.w
 8001bd6:	4601      	mov	r1, r0
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60ba      	str	r2, [r7, #8]
 8001bde:	b2ca      	uxtb	r2, r1
 8001be0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	dbf0      	blt.n	8001bd2 <_read+0x12>
	}

return len;
 8001bf0:	687b      	ldr	r3, [r7, #4]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
	return -1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c22:	605a      	str	r2, [r3, #4]
	return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <_isatty>:

int _isatty(int file)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
	return 1;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
	return 0;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <_sbrk+0x50>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x16>
		heap_end = &end;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <_sbrk+0x50>)
 8001c76:	4a10      	ldr	r2, [pc, #64]	; (8001cb8 <_sbrk+0x54>)
 8001c78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <_sbrk+0x50>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <_sbrk+0x50>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	466a      	mov	r2, sp
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d907      	bls.n	8001c9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c8e:	f00e faf3 	bl	8010278 <__errno>
 8001c92:	4602      	mov	r2, r0
 8001c94:	230c      	movs	r3, #12
 8001c96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	e006      	b.n	8001cac <_sbrk+0x48>
	}

	heap_end += incr;
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <_sbrk+0x50>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a03      	ldr	r2, [pc, #12]	; (8001cb4 <_sbrk+0x50>)
 8001ca8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200001fc 	.word	0x200001fc
 8001cb8:	20003988 	.word	0x20003988

08001cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <SystemInit+0x28>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc6:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <SystemInit+0x28>)
 8001cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <SystemInit+0x28>)
 8001cd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cd6:	609a      	str	r2, [r3, #8]
#endif
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d0e:	2253      	movs	r2, #83	; 0x53
 8001d10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d2c:	4813      	ldr	r0, [pc, #76]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d2e:	f005 faf3 	bl	8007318 <HAL_TIM_Base_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d38:	f7ff fce2 	bl	8001700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	4619      	mov	r1, r3
 8001d48:	480c      	ldr	r0, [pc, #48]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d4a:	f005 fd37 	bl	80077bc <HAL_TIM_ConfigClockSource>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d54:	f7ff fcd4 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d60:	463b      	mov	r3, r7
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d66:	f006 f8f3 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d70:	f7ff fcc6 	bl	8001700 <Error_Handler>
  }

}
 8001d74:	bf00      	nop
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200012c4 	.word	0x200012c4

08001d80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08e      	sub	sp, #56	; 0x38
 8001d84:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	f107 0320 	add.w	r3, r7, #32
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
 8001dac:	615a      	str	r2, [r3, #20]
 8001dae:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001db2:	4a33      	ldr	r2, [pc, #204]	; (8001e80 <MX_TIM3_Init+0x100>)
 8001db4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8001db6:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001db8:	2229      	movs	r2, #41	; 0x29
 8001dba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbc:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8001dc2:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001dc4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001dc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dd6:	4829      	ldr	r0, [pc, #164]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001dd8:	f005 fa9e 	bl	8007318 <HAL_TIM_Base_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001de2:	f7ff fc8d 	bl	8001700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df0:	4619      	mov	r1, r3
 8001df2:	4822      	ldr	r0, [pc, #136]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001df4:	f005 fce2 	bl	80077bc <HAL_TIM_ConfigClockSource>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001dfe:	f7ff fc7f 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e02:	481e      	ldr	r0, [pc, #120]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001e04:	f005 fad7 	bl	80073b6 <HAL_TIM_PWM_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e0e:	f7ff fc77 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e1a:	f107 0320 	add.w	r3, r7, #32
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4816      	ldr	r0, [pc, #88]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001e22:	f006 f895 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e2c:	f7ff fc68 	bl	8001700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e30:	2360      	movs	r3, #96	; 0x60
 8001e32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2200      	movs	r2, #0
 8001e44:	4619      	mov	r1, r3
 8001e46:	480d      	ldr	r0, [pc, #52]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001e48:	f005 fbf2 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e52:	f7ff fc55 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2204      	movs	r2, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4807      	ldr	r0, [pc, #28]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001e5e:	f005 fbe7 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001e68:	f7ff fc4a 	bl	8001700 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <MX_TIM3_Init+0xfc>)
 8001e6e:	f000 f997 	bl	80021a0 <HAL_TIM_MspPostInit>

}
 8001e72:	bf00      	nop
 8001e74:	3738      	adds	r7, #56	; 0x38
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20001244 	.word	0x20001244
 8001e80:	40000400 	.word	0x40000400

08001e84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08e      	sub	sp, #56	; 0x38
 8001e88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e98:	f107 0320 	add.w	r3, r7, #32
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
 8001eb0:	615a      	str	r2, [r3, #20]
 8001eb2:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001eb4:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <MX_TIM4_Init+0x128>)
 8001eb6:	4a3e      	ldr	r2, [pc, #248]	; (8001fb0 <MX_TIM4_Init+0x12c>)
 8001eb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8001eba:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <MX_TIM4_Init+0x128>)
 8001ebc:	2229      	movs	r2, #41	; 0x29
 8001ebe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec0:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <MX_TIM4_Init+0x128>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 8001ec6:	4b39      	ldr	r3, [pc, #228]	; (8001fac <MX_TIM4_Init+0x128>)
 8001ec8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001ecc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ece:	4b37      	ldr	r3, [pc, #220]	; (8001fac <MX_TIM4_Init+0x128>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed4:	4b35      	ldr	r3, [pc, #212]	; (8001fac <MX_TIM4_Init+0x128>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eda:	4834      	ldr	r0, [pc, #208]	; (8001fac <MX_TIM4_Init+0x128>)
 8001edc:	f005 fa1c 	bl	8007318 <HAL_TIM_Base_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ee6:	f7ff fc0b 	bl	8001700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	482d      	ldr	r0, [pc, #180]	; (8001fac <MX_TIM4_Init+0x128>)
 8001ef8:	f005 fc60 	bl	80077bc <HAL_TIM_ConfigClockSource>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f02:	f7ff fbfd 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f06:	4829      	ldr	r0, [pc, #164]	; (8001fac <MX_TIM4_Init+0x128>)
 8001f08:	f005 fa55 	bl	80073b6 <HAL_TIM_PWM_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f12:	f7ff fbf5 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f1e:	f107 0320 	add.w	r3, r7, #32
 8001f22:	4619      	mov	r1, r3
 8001f24:	4821      	ldr	r0, [pc, #132]	; (8001fac <MX_TIM4_Init+0x128>)
 8001f26:	f006 f813 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f30:	f7ff fbe6 	bl	8001700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f34:	2360      	movs	r3, #96	; 0x60
 8001f36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4818      	ldr	r0, [pc, #96]	; (8001fac <MX_TIM4_Init+0x128>)
 8001f4c:	f005 fb70 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f56:	f7ff fbd3 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4812      	ldr	r0, [pc, #72]	; (8001fac <MX_TIM4_Init+0x128>)
 8001f62:	f005 fb65 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001f6c:	f7ff fbc8 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	2208      	movs	r2, #8
 8001f74:	4619      	mov	r1, r3
 8001f76:	480d      	ldr	r0, [pc, #52]	; (8001fac <MX_TIM4_Init+0x128>)
 8001f78:	f005 fb5a 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001f82:	f7ff fbbd 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	220c      	movs	r2, #12
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4807      	ldr	r0, [pc, #28]	; (8001fac <MX_TIM4_Init+0x128>)
 8001f8e:	f005 fb4f 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001f98:	f7ff fbb2 	bl	8001700 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <MX_TIM4_Init+0x128>)
 8001f9e:	f000 f8ff 	bl	80021a0 <HAL_TIM_MspPostInit>

}
 8001fa2:	bf00      	nop
 8001fa4:	3738      	adds	r7, #56	; 0x38
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200011c4 	.word	0x200011c4
 8001fb0:	40000800 	.word	0x40000800

08001fb4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
 8001fc8:	615a      	str	r2, [r3, #20]
 8001fca:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <MX_TIM10_Init+0x90>)
 8001fce:	4a1e      	ldr	r2, [pc, #120]	; (8002048 <MX_TIM10_Init+0x94>)
 8001fd0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <MX_TIM10_Init+0x90>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <MX_TIM10_Init+0x90>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <MX_TIM10_Init+0x90>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <MX_TIM10_Init+0x90>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <MX_TIM10_Init+0x90>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ff0:	4814      	ldr	r0, [pc, #80]	; (8002044 <MX_TIM10_Init+0x90>)
 8001ff2:	f005 f991 	bl	8007318 <HAL_TIM_Base_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001ffc:	f7ff fb80 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002000:	4810      	ldr	r0, [pc, #64]	; (8002044 <MX_TIM10_Init+0x90>)
 8002002:	f005 f9d8 	bl	80073b6 <HAL_TIM_PWM_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 800200c:	f7ff fb78 	bl	8001700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002010:	2360      	movs	r3, #96	; 0x60
 8002012:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	4619      	mov	r1, r3
 8002026:	4807      	ldr	r0, [pc, #28]	; (8002044 <MX_TIM10_Init+0x90>)
 8002028:	f005 fb02 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8002032:	f7ff fb65 	bl	8001700 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 8002036:	4803      	ldr	r0, [pc, #12]	; (8002044 <MX_TIM10_Init+0x90>)
 8002038:	f000 f8b2 	bl	80021a0 <HAL_TIM_MspPostInit>

}
 800203c:	bf00      	nop
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20001204 	.word	0x20001204
 8002048:	40014400 	.word	0x40014400

0800204c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_TIM11_Init+0x40>)
 8002052:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <MX_TIM11_Init+0x44>)
 8002054:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1680-1;
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <MX_TIM11_Init+0x40>)
 8002058:	f240 628f 	movw	r2, #1679	; 0x68f
 800205c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MX_TIM11_Init+0x40>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_TIM11_Init+0x40>)
 8002066:	f240 32e7 	movw	r2, #999	; 0x3e7
 800206a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206c:	4b07      	ldr	r3, [pc, #28]	; (800208c <MX_TIM11_Init+0x40>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_TIM11_Init+0x40>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002078:	4804      	ldr	r0, [pc, #16]	; (800208c <MX_TIM11_Init+0x40>)
 800207a:	f005 f94d 	bl	8007318 <HAL_TIM_Base_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002084:	f7ff fb3c 	bl	8001700 <Error_Handler>
  }

}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20001284 	.word	0x20001284
 8002090:	40014800 	.word	0x40014800

08002094 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d116      	bne.n	80020d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	4b38      	ldr	r3, [pc, #224]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a37      	ldr	r2, [pc, #220]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b35      	ldr	r3, [pc, #212]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2105      	movs	r1, #5
 80020c6:	201c      	movs	r0, #28
 80020c8:	f000 fd0e 	bl	8002ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020cc:	201c      	movs	r0, #28
 80020ce:	f000 fd27 	bl	8002b20 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80020d2:	e056      	b.n	8002182 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2d      	ldr	r2, [pc, #180]	; (8002190 <HAL_TIM_Base_MspInit+0xfc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d10e      	bne.n	80020fc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	4b2a      	ldr	r3, [pc, #168]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a29      	ldr	r2, [pc, #164]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b27      	ldr	r3, [pc, #156]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	69bb      	ldr	r3, [r7, #24]
}
 80020fa:	e042      	b.n	8002182 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a24      	ldr	r2, [pc, #144]	; (8002194 <HAL_TIM_Base_MspInit+0x100>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a1f      	ldr	r2, [pc, #124]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
}
 8002122:	e02e      	b.n	8002182 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM10)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <HAL_TIM_Base_MspInit+0x104>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d10e      	bne.n	800214c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a15      	ldr	r2, [pc, #84]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 8002138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
}
 800214a:	e01a      	b.n	8002182 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM11)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a12      	ldr	r2, [pc, #72]	; (800219c <HAL_TIM_Base_MspInit+0x108>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d115      	bne.n	8002182 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_TIM_Base_MspInit+0xf8>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2105      	movs	r1, #5
 8002176:	201a      	movs	r0, #26
 8002178:	f000 fcb6 	bl	8002ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800217c:	201a      	movs	r0, #26
 800217e:	f000 fccf 	bl	8002b20 <HAL_NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40000400 	.word	0x40000400
 8002194:	40000800 	.word	0x40000800
 8002198:	40014400 	.word	0x40014400
 800219c:	40014800 	.word	0x40014800

080021a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08c      	sub	sp, #48	; 0x30
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 031c 	add.w	r3, r7, #28
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a45      	ldr	r2, [pc, #276]	; (80022d4 <HAL_TIM_MspPostInit+0x134>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d13c      	bne.n	800223c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	4b44      	ldr	r3, [pc, #272]	; (80022d8 <HAL_TIM_MspPostInit+0x138>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a43      	ldr	r2, [pc, #268]	; (80022d8 <HAL_TIM_MspPostInit+0x138>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_TIM_MspPostInit+0x138>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_TIM_MspPostInit+0x138>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a3c      	ldr	r2, [pc, #240]	; (80022d8 <HAL_TIM_MspPostInit+0x138>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <HAL_TIM_MspPostInit+0x138>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021fa:	2340      	movs	r3, #64	; 0x40
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800220a:	2302      	movs	r3, #2
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 031c 	add.w	r3, r7, #28
 8002212:	4619      	mov	r1, r3
 8002214:	4831      	ldr	r0, [pc, #196]	; (80022dc <HAL_TIM_MspPostInit+0x13c>)
 8002216:	f001 f83b 	bl	8003290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800222a:	2302      	movs	r3, #2
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	4619      	mov	r1, r3
 8002234:	482a      	ldr	r0, [pc, #168]	; (80022e0 <HAL_TIM_MspPostInit+0x140>)
 8002236:	f001 f82b 	bl	8003290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800223a:	e047      	b.n	80022cc <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <HAL_TIM_MspPostInit+0x144>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d11f      	bne.n	8002286 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_TIM_MspPostInit+0x138>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <HAL_TIM_MspPostInit+0x138>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_TIM_MspPostInit+0x138>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002262:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002274:	2302      	movs	r3, #2
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	4619      	mov	r1, r3
 800227e:	481a      	ldr	r0, [pc, #104]	; (80022e8 <HAL_TIM_MspPostInit+0x148>)
 8002280:	f001 f806 	bl	8003290 <HAL_GPIO_Init>
}
 8002284:	e022      	b.n	80022cc <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM10)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a18      	ldr	r2, [pc, #96]	; (80022ec <HAL_TIM_MspPostInit+0x14c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d11d      	bne.n	80022cc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <HAL_TIM_MspPostInit+0x138>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <HAL_TIM_MspPostInit+0x138>)
 800229a:	f043 0320 	orr.w	r3, r3, #32
 800229e:	6313      	str	r3, [r2, #48]	; 0x30
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_TIM_MspPostInit+0x138>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022ac:	2340      	movs	r3, #64	; 0x40
 80022ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80022bc:	2303      	movs	r3, #3
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022c0:	f107 031c 	add.w	r3, r7, #28
 80022c4:	4619      	mov	r1, r3
 80022c6:	480a      	ldr	r0, [pc, #40]	; (80022f0 <HAL_TIM_MspPostInit+0x150>)
 80022c8:	f000 ffe2 	bl	8003290 <HAL_GPIO_Init>
}
 80022cc:	bf00      	nop
 80022ce:	3730      	adds	r7, #48	; 0x30
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020800 	.word	0x40020800
 80022e4:	40000800 	.word	0x40000800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	40014400 	.word	0x40014400
 80022f0:	40021400 	.word	0x40021400

080022f4 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_UART7_Init+0x50>)
 80022fa:	4a13      	ldr	r2, [pc, #76]	; (8002348 <MX_UART7_Init+0x54>)
 80022fc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_UART7_Init+0x50>)
 8002300:	4a12      	ldr	r2, [pc, #72]	; (800234c <MX_UART7_Init+0x58>)
 8002302:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_UART7_Init+0x50>)
 8002306:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800230a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <MX_UART7_Init+0x50>)
 800230e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002312:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <MX_UART7_Init+0x50>)
 8002316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800231a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_UART7_Init+0x50>)
 800231e:	220c      	movs	r2, #12
 8002320:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <MX_UART7_Init+0x50>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_UART7_Init+0x50>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <MX_UART7_Init+0x50>)
 8002330:	f005 fe9e 	bl	8008070 <HAL_UART_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 800233a:	f7ff f9e1 	bl	8001700 <Error_Handler>
  }

}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20001304 	.word	0x20001304
 8002348:	40007800 	.word	0x40007800
 800234c:	000186a0 	.word	0x000186a0

08002350 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_UART8_Init+0x4c>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <MX_UART8_Init+0x50>)
 8002358:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <MX_UART8_Init+0x4c>)
 800235c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002360:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_UART8_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_UART8_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_UART8_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_UART8_Init+0x4c>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_UART8_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_UART8_Init+0x4c>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_UART8_Init+0x4c>)
 8002388:	f005 fe72 	bl	8008070 <HAL_UART_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002392:	f7ff f9b5 	bl	8001700 <Error_Handler>
  }

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20001444 	.word	0x20001444
 80023a0:	40007c00 	.word	0x40007c00

080023a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <MX_USART2_UART_Init+0x50>)
 80023ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023ca:	220c      	movs	r2, #12
 80023cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023d0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80023d4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023dc:	4804      	ldr	r0, [pc, #16]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023de:	f005 fe47 	bl	8008070 <HAL_UART_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80023e8:	f7ff f98a 	bl	8001700 <Error_Handler>
  }

}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20001484 	.word	0x20001484
 80023f4:	40004400 	.word	0x40004400

080023f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <MX_USART3_UART_Init+0x50>)
 8002400:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 8002404:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002408:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 800241e:	220c      	movs	r2, #12
 8002420:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 8002430:	f005 fe1e 	bl	8008070 <HAL_UART_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800243a:	f7ff f961 	bl	8001700 <Error_Handler>
  }

}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20001344 	.word	0x20001344
 8002448:	40004800 	.word	0x40004800

0800244c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b090      	sub	sp, #64	; 0x40
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a8b      	ldr	r2, [pc, #556]	; (8002698 <HAL_UART_MspInit+0x24c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d15c      	bne.n	8002528 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
 8002472:	4b8a      	ldr	r3, [pc, #552]	; (800269c <HAL_UART_MspInit+0x250>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a89      	ldr	r2, [pc, #548]	; (800269c <HAL_UART_MspInit+0x250>)
 8002478:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
 800247e:	4b87      	ldr	r3, [pc, #540]	; (800269c <HAL_UART_MspInit+0x250>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
 8002488:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
 800248e:	4b83      	ldr	r3, [pc, #524]	; (800269c <HAL_UART_MspInit+0x250>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a82      	ldr	r2, [pc, #520]	; (800269c <HAL_UART_MspInit+0x250>)
 8002494:	f043 0310 	orr.w	r3, r3, #16
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b80      	ldr	r3, [pc, #512]	; (800269c <HAL_UART_MspInit+0x250>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80024a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b0:	2301      	movs	r3, #1
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b4:	2303      	movs	r3, #3
 80024b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80024b8:	2308      	movs	r3, #8
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c0:	4619      	mov	r1, r3
 80024c2:	4877      	ldr	r0, [pc, #476]	; (80026a0 <HAL_UART_MspInit+0x254>)
 80024c4:	f000 fee4 	bl	8003290 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80024c8:	4b76      	ldr	r3, [pc, #472]	; (80026a4 <HAL_UART_MspInit+0x258>)
 80024ca:	4a77      	ldr	r2, [pc, #476]	; (80026a8 <HAL_UART_MspInit+0x25c>)
 80024cc:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80024ce:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <HAL_UART_MspInit+0x258>)
 80024d0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80024d4:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024d6:	4b73      	ldr	r3, [pc, #460]	; (80026a4 <HAL_UART_MspInit+0x258>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024dc:	4b71      	ldr	r3, [pc, #452]	; (80026a4 <HAL_UART_MspInit+0x258>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024e2:	4b70      	ldr	r3, [pc, #448]	; (80026a4 <HAL_UART_MspInit+0x258>)
 80024e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e8:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ea:	4b6e      	ldr	r3, [pc, #440]	; (80026a4 <HAL_UART_MspInit+0x258>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f0:	4b6c      	ldr	r3, [pc, #432]	; (80026a4 <HAL_UART_MspInit+0x258>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80024f6:	4b6b      	ldr	r3, [pc, #428]	; (80026a4 <HAL_UART_MspInit+0x258>)
 80024f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fc:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024fe:	4b69      	ldr	r3, [pc, #420]	; (80026a4 <HAL_UART_MspInit+0x258>)
 8002500:	2200      	movs	r2, #0
 8002502:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002504:	4b67      	ldr	r3, [pc, #412]	; (80026a4 <HAL_UART_MspInit+0x258>)
 8002506:	2200      	movs	r2, #0
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800250a:	4866      	ldr	r0, [pc, #408]	; (80026a4 <HAL_UART_MspInit+0x258>)
 800250c:	f000 fb16 	bl	8002b3c <HAL_DMA_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002516:	f7ff f8f3 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a61      	ldr	r2, [pc, #388]	; (80026a4 <HAL_UART_MspInit+0x258>)
 800251e:	635a      	str	r2, [r3, #52]	; 0x34
 8002520:	4a60      	ldr	r2, [pc, #384]	; (80026a4 <HAL_UART_MspInit+0x258>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002526:	e107      	b.n	8002738 <HAL_UART_MspInit+0x2ec>
  else if(uartHandle->Instance==UART8)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a5f      	ldr	r2, [pc, #380]	; (80026ac <HAL_UART_MspInit+0x260>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d162      	bne.n	80025f8 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]
 8002536:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_UART_MspInit+0x250>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a58      	ldr	r2, [pc, #352]	; (800269c <HAL_UART_MspInit+0x250>)
 800253c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b56      	ldr	r3, [pc, #344]	; (800269c <HAL_UART_MspInit+0x250>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800254a:	623b      	str	r3, [r7, #32]
 800254c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	4b52      	ldr	r3, [pc, #328]	; (800269c <HAL_UART_MspInit+0x250>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a51      	ldr	r2, [pc, #324]	; (800269c <HAL_UART_MspInit+0x250>)
 8002558:	f043 0310 	orr.w	r3, r3, #16
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b4f      	ldr	r3, [pc, #316]	; (800269c <HAL_UART_MspInit+0x250>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800256a:	2303      	movs	r3, #3
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002572:	2301      	movs	r3, #1
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800257a:	2308      	movs	r3, #8
 800257c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800257e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002582:	4619      	mov	r1, r3
 8002584:	4846      	ldr	r0, [pc, #280]	; (80026a0 <HAL_UART_MspInit+0x254>)
 8002586:	f000 fe83 	bl	8003290 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 800258a:	4b49      	ldr	r3, [pc, #292]	; (80026b0 <HAL_UART_MspInit+0x264>)
 800258c:	4a49      	ldr	r2, [pc, #292]	; (80026b4 <HAL_UART_MspInit+0x268>)
 800258e:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8002590:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <HAL_UART_MspInit+0x264>)
 8002592:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002596:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002598:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <HAL_UART_MspInit+0x264>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800259e:	4b44      	ldr	r3, [pc, #272]	; (80026b0 <HAL_UART_MspInit+0x264>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025a4:	4b42      	ldr	r3, [pc, #264]	; (80026b0 <HAL_UART_MspInit+0x264>)
 80025a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025aa:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025ac:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <HAL_UART_MspInit+0x264>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025b2:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_UART_MspInit+0x264>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 80025b8:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <HAL_UART_MspInit+0x264>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025be:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <HAL_UART_MspInit+0x264>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025c4:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <HAL_UART_MspInit+0x264>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80025ca:	4839      	ldr	r0, [pc, #228]	; (80026b0 <HAL_UART_MspInit+0x264>)
 80025cc:	f000 fab6 	bl	8002b3c <HAL_DMA_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_UART_MspInit+0x18e>
      Error_Handler();
 80025d6:	f7ff f893 	bl	8001700 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a34      	ldr	r2, [pc, #208]	; (80026b0 <HAL_UART_MspInit+0x264>)
 80025de:	635a      	str	r2, [r3, #52]	; 0x34
 80025e0:	4a33      	ldr	r2, [pc, #204]	; (80026b0 <HAL_UART_MspInit+0x264>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2105      	movs	r1, #5
 80025ea:	2053      	movs	r0, #83	; 0x53
 80025ec:	f000 fa7c 	bl	8002ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80025f0:	2053      	movs	r0, #83	; 0x53
 80025f2:	f000 fa95 	bl	8002b20 <HAL_NVIC_EnableIRQ>
}
 80025f6:	e09f      	b.n	8002738 <HAL_UART_MspInit+0x2ec>
  else if(uartHandle->Instance==USART2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2e      	ldr	r2, [pc, #184]	; (80026b8 <HAL_UART_MspInit+0x26c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d160      	bne.n	80026c4 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	4b25      	ldr	r3, [pc, #148]	; (800269c <HAL_UART_MspInit+0x250>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a24      	ldr	r2, [pc, #144]	; (800269c <HAL_UART_MspInit+0x250>)
 800260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
 8002612:	4b22      	ldr	r3, [pc, #136]	; (800269c <HAL_UART_MspInit+0x250>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_UART_MspInit+0x250>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a1d      	ldr	r2, [pc, #116]	; (800269c <HAL_UART_MspInit+0x250>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_UART_MspInit+0x250>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <HAL_UART_MspInit+0x250>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a16      	ldr	r2, [pc, #88]	; (800269c <HAL_UART_MspInit+0x250>)
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_UART_MspInit+0x250>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002656:	2301      	movs	r3, #1
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002666:	2307      	movs	r3, #7
 8002668:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800266e:	4619      	mov	r1, r3
 8002670:	4812      	ldr	r0, [pc, #72]	; (80026bc <HAL_UART_MspInit+0x270>)
 8002672:	f000 fe0d 	bl	8003290 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002676:	2370      	movs	r3, #112	; 0x70
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002686:	2307      	movs	r3, #7
 8002688:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800268a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800268e:	4619      	mov	r1, r3
 8002690:	480b      	ldr	r0, [pc, #44]	; (80026c0 <HAL_UART_MspInit+0x274>)
 8002692:	f000 fdfd 	bl	8003290 <HAL_GPIO_Init>
}
 8002696:	e04f      	b.n	8002738 <HAL_UART_MspInit+0x2ec>
 8002698:	40007800 	.word	0x40007800
 800269c:	40023800 	.word	0x40023800
 80026a0:	40021000 	.word	0x40021000
 80026a4:	20001384 	.word	0x20001384
 80026a8:	40026058 	.word	0x40026058
 80026ac:	40007c00 	.word	0x40007c00
 80026b0:	200013e4 	.word	0x200013e4
 80026b4:	400260a0 	.word	0x400260a0
 80026b8:	40004400 	.word	0x40004400
 80026bc:	40020000 	.word	0x40020000
 80026c0:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART3)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_UART_MspInit+0x2f4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d134      	bne.n	8002738 <HAL_UART_MspInit+0x2ec>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_UART_MspInit+0x2f8>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_UART_MspInit+0x2f8>)
 80026d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_UART_MspInit+0x2f8>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_UART_MspInit+0x2f8>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_UART_MspInit+0x2f8>)
 80026f4:	f043 0308 	orr.w	r3, r3, #8
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_UART_MspInit+0x2f8>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002714:	2303      	movs	r3, #3
 8002716:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002718:	2307      	movs	r3, #7
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800271c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002720:	4619      	mov	r1, r3
 8002722:	4809      	ldr	r0, [pc, #36]	; (8002748 <HAL_UART_MspInit+0x2fc>)
 8002724:	f000 fdb4 	bl	8003290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002728:	2200      	movs	r2, #0
 800272a:	2105      	movs	r1, #5
 800272c:	2027      	movs	r0, #39	; 0x27
 800272e:	f000 f9db 	bl	8002ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002732:	2027      	movs	r0, #39	; 0x27
 8002734:	f000 f9f4 	bl	8002b20 <HAL_NVIC_EnableIRQ>
}
 8002738:	bf00      	nop
 800273a:	3740      	adds	r7, #64	; 0x40
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40004800 	.word	0x40004800
 8002744:	40023800 	.word	0x40023800
 8002748:	40020c00 	.word	0x40020c00

0800274c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002752:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002756:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800275a:	2204      	movs	r2, #4
 800275c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002760:	2202      	movs	r2, #2
 8002762:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002766:	2200      	movs	r2, #0
 8002768:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800276c:	2202      	movs	r2, #2
 800276e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002772:	2201      	movs	r2, #1
 8002774:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002778:	2200      	movs	r2, #0
 800277a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800277e:	2200      	movs	r2, #0
 8002780:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002784:	2201      	movs	r2, #1
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800278e:	4805      	ldr	r0, [pc, #20]	; (80027a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002790:	f002 fd13 	bl	80051ba <HAL_PCD_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800279a:	f7fe ffb1 	bl	8001700 <Error_Handler>
  }

}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200014c4 	.word	0x200014c4

080027a8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c8:	d13f      	bne.n	800284a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_PCD_MspInit+0xac>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a20      	ldr	r2, [pc, #128]	; (8002854 <HAL_PCD_MspInit+0xac>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_PCD_MspInit+0xac>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80027e6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80027ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f4:	2303      	movs	r3, #3
 80027f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027f8:	230a      	movs	r3, #10
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	4619      	mov	r1, r3
 8002802:	4815      	ldr	r0, [pc, #84]	; (8002858 <HAL_PCD_MspInit+0xb0>)
 8002804:	f000 fd44 	bl	8003290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800280c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	4619      	mov	r1, r3
 800281c:	480e      	ldr	r0, [pc, #56]	; (8002858 <HAL_PCD_MspInit+0xb0>)
 800281e:	f000 fd37 	bl	8003290 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_PCD_MspInit+0xac>)
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_PCD_MspInit+0xac>)
 8002828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282c:	6353      	str	r3, [r2, #52]	; 0x34
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_PCD_MspInit+0xac>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a07      	ldr	r2, [pc, #28]	; (8002854 <HAL_PCD_MspInit+0xac>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_PCD_MspInit+0xac>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800284a:	bf00      	nop
 800284c:	3728      	adds	r7, #40	; 0x28
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	40020000 	.word	0x40020000

0800285c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800285c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002894 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002860:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002862:	e003      	b.n	800286c <LoopCopyDataInit>

08002864 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002866:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002868:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800286a:	3104      	adds	r1, #4

0800286c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800286c:	480b      	ldr	r0, [pc, #44]	; (800289c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002870:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002872:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002874:	d3f6      	bcc.n	8002864 <CopyDataInit>
  ldr  r2, =_sbss
 8002876:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002878:	e002      	b.n	8002880 <LoopFillZerobss>

0800287a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800287a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800287c:	f842 3b04 	str.w	r3, [r2], #4

08002880 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002882:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002884:	d3f9      	bcc.n	800287a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002886:	f7ff fa19 	bl	8001cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288a:	f00d fcfb 	bl	8010284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800288e:	f7fe fe27 	bl	80014e0 <main>
  bx  lr    
 8002892:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002894:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002898:	08014e70 	.word	0x08014e70
  ldr  r0, =_sdata
 800289c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028a0:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80028a4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80028a8:	20003984 	.word	0x20003984

080028ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC_IRQHandler>
	...

080028b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_Init+0x40>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_Init+0x40>)
 80028ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_Init+0x40>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_Init+0x40>)
 80028c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <HAL_Init+0x40>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d8:	2003      	movs	r0, #3
 80028da:	f000 f8fa 	bl	8002ad2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7ff f85a 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e4:	f7ff f82c 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023c00 	.word	0x40023c00

080028f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_IncTick+0x20>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x24>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4413      	add	r3, r2
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <HAL_IncTick+0x24>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000008 	.word	0x20000008
 8002918:	200018cc 	.word	0x200018cc

0800291c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return uwTick;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_GetTick+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	200018cc 	.word	0x200018cc

08002934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800293c:	f7ff ffee 	bl	800291c <HAL_GetTick>
 8002940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d005      	beq.n	800295a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_Delay+0x40>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4413      	add	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800295a:	bf00      	nop
 800295c:	f7ff ffde 	bl	800291c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	429a      	cmp	r2, r3
 800296a:	d8f7      	bhi.n	800295c <HAL_Delay+0x28>
  {
  }
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000008 	.word	0x20000008

08002978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	60d3      	str	r3, [r2, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <__NVIC_GetPriorityGrouping+0x18>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	f003 0307 	and.w	r3, r3, #7
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db0b      	blt.n	8002a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4907      	ldr	r1, [pc, #28]	; (8002a14 <__NVIC_EnableIRQ+0x38>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2001      	movs	r0, #1
 80029fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db0a      	blt.n	8002a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	490c      	ldr	r1, [pc, #48]	; (8002a64 <__NVIC_SetPriority+0x4c>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a40:	e00a      	b.n	8002a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <__NVIC_SetPriority+0x50>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3b04      	subs	r3, #4
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	761a      	strb	r2, [r3, #24]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf28      	it	cs
 8002a8a:	2304      	movcs	r3, #4
 8002a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d902      	bls.n	8002a9c <NVIC_EncodePriority+0x30>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3b03      	subs	r3, #3
 8002a9a:	e000      	b.n	8002a9e <NVIC_EncodePriority+0x32>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	4313      	orrs	r3, r2
         );
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ff4c 	bl	8002978 <__NVIC_SetPriorityGrouping>
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002afa:	f7ff ff61 	bl	80029c0 <__NVIC_GetPriorityGrouping>
 8002afe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	6978      	ldr	r0, [r7, #20]
 8002b06:	f7ff ffb1 	bl	8002a6c <NVIC_EncodePriority>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff80 	bl	8002a18 <__NVIC_SetPriority>
}
 8002b18:	bf00      	nop
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ff54 	bl	80029dc <__NVIC_EnableIRQ>
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b48:	f7ff fee8 	bl	800291c <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e099      	b.n	8002c8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b78:	e00f      	b.n	8002b9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b7a:	f7ff fecf 	bl	800291c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d908      	bls.n	8002b9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2203      	movs	r2, #3
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e078      	b.n	8002c8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e8      	bne.n	8002b7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <HAL_DMA_Init+0x158>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d107      	bne.n	8002c04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f023 0307 	bic.w	r3, r3, #7
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d117      	bne.n	8002c5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00e      	beq.n	8002c5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 faab 	bl	800319c <DMA_CheckFifoParam>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e016      	b.n	8002c8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa62 	bl	8003130 <DMA_CalcBaseAndBitshift>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	223f      	movs	r2, #63	; 0x3f
 8002c76:	409a      	lsls	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	f010803f 	.word	0xf010803f

08002c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_DMA_Start_IT+0x26>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e040      	b.n	8002d40 <HAL_DMA_Start_IT+0xa8>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d12f      	bne.n	8002d32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f9f4 	bl	80030d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	223f      	movs	r2, #63	; 0x3f
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0216 	orr.w	r2, r2, #22
 8002d06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0208 	orr.w	r2, r2, #8
 8002d1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	e005      	b.n	8002d3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d004      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2280      	movs	r2, #128	; 0x80
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e00c      	b.n	8002d80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2205      	movs	r2, #5
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d98:	4b92      	ldr	r3, [pc, #584]	; (8002fe4 <HAL_DMA_IRQHandler+0x258>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a92      	ldr	r2, [pc, #584]	; (8002fe8 <HAL_DMA_IRQHandler+0x25c>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	0a9b      	lsrs	r3, r3, #10
 8002da4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	2208      	movs	r2, #8
 8002db8:	409a      	lsls	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01a      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d013      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0204 	bic.w	r2, r2, #4
 8002dde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	2208      	movs	r2, #8
 8002de6:	409a      	lsls	r2, r3
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d012      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	f043 0202 	orr.w	r2, r3, #2
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	2204      	movs	r2, #4
 8002e34:	409a      	lsls	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d012      	beq.n	8002e64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e50:	2204      	movs	r2, #4
 8002e52:	409a      	lsls	r2, r3
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	f043 0204 	orr.w	r2, r3, #4
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	2210      	movs	r2, #16
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d043      	beq.n	8002efc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d03c      	beq.n	8002efc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e86:	2210      	movs	r2, #16
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d018      	beq.n	8002ece <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d108      	bne.n	8002ebc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d024      	beq.n	8002efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4798      	blx	r3
 8002eba:	e01f      	b.n	8002efc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01b      	beq.n	8002efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
 8002ecc:	e016      	b.n	8002efc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d107      	bne.n	8002eec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0208 	bic.w	r2, r2, #8
 8002eea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	2220      	movs	r2, #32
 8002f02:	409a      	lsls	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 808e 	beq.w	800302a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8086 	beq.w	800302a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	2220      	movs	r2, #32
 8002f24:	409a      	lsls	r2, r3
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b05      	cmp	r3, #5
 8002f34:	d136      	bne.n	8002fa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0216 	bic.w	r2, r2, #22
 8002f44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <HAL_DMA_IRQHandler+0x1da>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0208 	bic.w	r2, r2, #8
 8002f74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	223f      	movs	r2, #63	; 0x3f
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d07d      	beq.n	8003096 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4798      	blx	r3
        }
        return;
 8002fa2:	e078      	b.n	8003096 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01c      	beq.n	8002fec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d108      	bne.n	8002fd2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d030      	beq.n	800302a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4798      	blx	r3
 8002fd0:	e02b      	b.n	800302a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d027      	beq.n	800302a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
 8002fe2:	e022      	b.n	800302a <HAL_DMA_IRQHandler+0x29e>
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0210 	bic.w	r2, r2, #16
 8003008:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	2b00      	cmp	r3, #0
 8003030:	d032      	beq.n	8003098 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d022      	beq.n	8003084 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2205      	movs	r2, #5
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3301      	adds	r3, #1
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	429a      	cmp	r2, r3
 8003060:	d307      	bcc.n	8003072 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f2      	bne.n	8003056 <HAL_DMA_IRQHandler+0x2ca>
 8003070:	e000      	b.n	8003074 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003072:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
 8003094:	e000      	b.n	8003098 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003096:	bf00      	nop
    }
  }
}
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop

080030a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ae:	b2db      	uxtb	r3, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d108      	bne.n	8003114 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003112:	e007      	b.n	8003124 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	3b10      	subs	r3, #16
 8003140:	4a14      	ldr	r2, [pc, #80]	; (8003194 <DMA_CalcBaseAndBitshift+0x64>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800314a:	4a13      	ldr	r2, [pc, #76]	; (8003198 <DMA_CalcBaseAndBitshift+0x68>)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d909      	bls.n	8003172 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	1d1a      	adds	r2, r3, #4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	659a      	str	r2, [r3, #88]	; 0x58
 8003170:	e007      	b.n	8003182 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	aaaaaaab 	.word	0xaaaaaaab
 8003198:	08014aa0 	.word	0x08014aa0

0800319c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11f      	bne.n	80031f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d855      	bhi.n	8003268 <DMA_CheckFifoParam+0xcc>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <DMA_CheckFifoParam+0x28>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	080031e7 	.word	0x080031e7
 80031cc:	080031d5 	.word	0x080031d5
 80031d0:	08003269 	.word	0x08003269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d045      	beq.n	800326c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e4:	e042      	b.n	800326c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ee:	d13f      	bne.n	8003270 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f4:	e03c      	b.n	8003270 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fe:	d121      	bne.n	8003244 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d836      	bhi.n	8003274 <DMA_CheckFifoParam+0xd8>
 8003206:	a201      	add	r2, pc, #4	; (adr r2, 800320c <DMA_CheckFifoParam+0x70>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	0800321d 	.word	0x0800321d
 8003210:	08003223 	.word	0x08003223
 8003214:	0800321d 	.word	0x0800321d
 8003218:	08003235 	.word	0x08003235
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      break;
 8003220:	e02f      	b.n	8003282 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d024      	beq.n	8003278 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003232:	e021      	b.n	8003278 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800323c:	d11e      	bne.n	800327c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003242:	e01b      	b.n	800327c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d902      	bls.n	8003250 <DMA_CheckFifoParam+0xb4>
 800324a:	2b03      	cmp	r3, #3
 800324c:	d003      	beq.n	8003256 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800324e:	e018      	b.n	8003282 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      break;
 8003254:	e015      	b.n	8003282 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00e      	beq.n	8003280 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
      break;
 8003266:	e00b      	b.n	8003280 <DMA_CheckFifoParam+0xe4>
      break;
 8003268:	bf00      	nop
 800326a:	e00a      	b.n	8003282 <DMA_CheckFifoParam+0xe6>
      break;
 800326c:	bf00      	nop
 800326e:	e008      	b.n	8003282 <DMA_CheckFifoParam+0xe6>
      break;
 8003270:	bf00      	nop
 8003272:	e006      	b.n	8003282 <DMA_CheckFifoParam+0xe6>
      break;
 8003274:	bf00      	nop
 8003276:	e004      	b.n	8003282 <DMA_CheckFifoParam+0xe6>
      break;
 8003278:	bf00      	nop
 800327a:	e002      	b.n	8003282 <DMA_CheckFifoParam+0xe6>
      break;   
 800327c:	bf00      	nop
 800327e:	e000      	b.n	8003282 <DMA_CheckFifoParam+0xe6>
      break;
 8003280:	bf00      	nop
    }
  } 
  
  return status; 
 8003282:	7bfb      	ldrb	r3, [r7, #15]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003290:	b480      	push	{r7}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	e177      	b.n	800359c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032ac:	2201      	movs	r2, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	f040 8166 	bne.w	8003596 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d00b      	beq.n	80032ea <HAL_GPIO_Init+0x5a>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d007      	beq.n	80032ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032de:	2b11      	cmp	r3, #17
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b12      	cmp	r3, #18
 80032e8:	d130      	bne.n	800334c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	2203      	movs	r2, #3
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003320:	2201      	movs	r2, #1
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 0201 	and.w	r2, r3, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	2203      	movs	r2, #3
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0xfc>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b12      	cmp	r3, #18
 800338a:	d123      	bne.n	80033d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	08da      	lsrs	r2, r3, #3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3208      	adds	r2, #8
 8003394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	220f      	movs	r2, #15
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	08da      	lsrs	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3208      	adds	r2, #8
 80033ce:	69b9      	ldr	r1, [r7, #24]
 80033d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	2203      	movs	r2, #3
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 0203 	and.w	r2, r3, #3
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80c0 	beq.w	8003596 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	4b65      	ldr	r3, [pc, #404]	; (80035b0 <HAL_GPIO_Init+0x320>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	4a64      	ldr	r2, [pc, #400]	; (80035b0 <HAL_GPIO_Init+0x320>)
 8003420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003424:	6453      	str	r3, [r2, #68]	; 0x44
 8003426:	4b62      	ldr	r3, [pc, #392]	; (80035b0 <HAL_GPIO_Init+0x320>)
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003432:	4a60      	ldr	r2, [pc, #384]	; (80035b4 <HAL_GPIO_Init+0x324>)
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	089b      	lsrs	r3, r3, #2
 8003438:	3302      	adds	r3, #2
 800343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	220f      	movs	r2, #15
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a57      	ldr	r2, [pc, #348]	; (80035b8 <HAL_GPIO_Init+0x328>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d037      	beq.n	80034ce <HAL_GPIO_Init+0x23e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a56      	ldr	r2, [pc, #344]	; (80035bc <HAL_GPIO_Init+0x32c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d031      	beq.n	80034ca <HAL_GPIO_Init+0x23a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a55      	ldr	r2, [pc, #340]	; (80035c0 <HAL_GPIO_Init+0x330>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d02b      	beq.n	80034c6 <HAL_GPIO_Init+0x236>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a54      	ldr	r2, [pc, #336]	; (80035c4 <HAL_GPIO_Init+0x334>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d025      	beq.n	80034c2 <HAL_GPIO_Init+0x232>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a53      	ldr	r2, [pc, #332]	; (80035c8 <HAL_GPIO_Init+0x338>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01f      	beq.n	80034be <HAL_GPIO_Init+0x22e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a52      	ldr	r2, [pc, #328]	; (80035cc <HAL_GPIO_Init+0x33c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d019      	beq.n	80034ba <HAL_GPIO_Init+0x22a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a51      	ldr	r2, [pc, #324]	; (80035d0 <HAL_GPIO_Init+0x340>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_GPIO_Init+0x226>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a50      	ldr	r2, [pc, #320]	; (80035d4 <HAL_GPIO_Init+0x344>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00d      	beq.n	80034b2 <HAL_GPIO_Init+0x222>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4f      	ldr	r2, [pc, #316]	; (80035d8 <HAL_GPIO_Init+0x348>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d007      	beq.n	80034ae <HAL_GPIO_Init+0x21e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4e      	ldr	r2, [pc, #312]	; (80035dc <HAL_GPIO_Init+0x34c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_GPIO_Init+0x21a>
 80034a6:	2309      	movs	r3, #9
 80034a8:	e012      	b.n	80034d0 <HAL_GPIO_Init+0x240>
 80034aa:	230a      	movs	r3, #10
 80034ac:	e010      	b.n	80034d0 <HAL_GPIO_Init+0x240>
 80034ae:	2308      	movs	r3, #8
 80034b0:	e00e      	b.n	80034d0 <HAL_GPIO_Init+0x240>
 80034b2:	2307      	movs	r3, #7
 80034b4:	e00c      	b.n	80034d0 <HAL_GPIO_Init+0x240>
 80034b6:	2306      	movs	r3, #6
 80034b8:	e00a      	b.n	80034d0 <HAL_GPIO_Init+0x240>
 80034ba:	2305      	movs	r3, #5
 80034bc:	e008      	b.n	80034d0 <HAL_GPIO_Init+0x240>
 80034be:	2304      	movs	r3, #4
 80034c0:	e006      	b.n	80034d0 <HAL_GPIO_Init+0x240>
 80034c2:	2303      	movs	r3, #3
 80034c4:	e004      	b.n	80034d0 <HAL_GPIO_Init+0x240>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e002      	b.n	80034d0 <HAL_GPIO_Init+0x240>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <HAL_GPIO_Init+0x240>
 80034ce:	2300      	movs	r3, #0
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	f002 0203 	and.w	r2, r2, #3
 80034d6:	0092      	lsls	r2, r2, #2
 80034d8:	4093      	lsls	r3, r2
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034e0:	4934      	ldr	r1, [pc, #208]	; (80035b4 <HAL_GPIO_Init+0x324>)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	3302      	adds	r3, #2
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034ee:	4b3c      	ldr	r3, [pc, #240]	; (80035e0 <HAL_GPIO_Init+0x350>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003512:	4a33      	ldr	r2, [pc, #204]	; (80035e0 <HAL_GPIO_Init+0x350>)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003518:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <HAL_GPIO_Init+0x350>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800353c:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <HAL_GPIO_Init+0x350>)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003542:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <HAL_GPIO_Init+0x350>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003566:	4a1e      	ldr	r2, [pc, #120]	; (80035e0 <HAL_GPIO_Init+0x350>)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800356c:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <HAL_GPIO_Init+0x350>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003590:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <HAL_GPIO_Init+0x350>)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3301      	adds	r3, #1
 800359a:	61fb      	str	r3, [r7, #28]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	2b0f      	cmp	r3, #15
 80035a0:	f67f ae84 	bls.w	80032ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035a4:	bf00      	nop
 80035a6:	3724      	adds	r7, #36	; 0x24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40013800 	.word	0x40013800
 80035b8:	40020000 	.word	0x40020000
 80035bc:	40020400 	.word	0x40020400
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40021400 	.word	0x40021400
 80035d0:	40021800 	.word	0x40021800
 80035d4:	40021c00 	.word	0x40021c00
 80035d8:	40022000 	.word	0x40022000
 80035dc:	40022400 	.word	0x40022400
 80035e0:	40013c00 	.word	0x40013c00

080035e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	887b      	ldrh	r3, [r7, #2]
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	e001      	b.n	8003606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	807b      	strh	r3, [r7, #2]
 8003620:	4613      	mov	r3, r2
 8003622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003624:	787b      	ldrb	r3, [r7, #1]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003630:	e003      	b.n	800363a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003632:	887b      	ldrh	r3, [r7, #2]
 8003634:	041a      	lsls	r2, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	619a      	str	r2, [r3, #24]
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e11f      	b.n	800389a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd fe78 	bl	8001364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2224      	movs	r2, #36	; 0x24
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800369a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036ac:	f002 fadc 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 80036b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4a7b      	ldr	r2, [pc, #492]	; (80038a4 <HAL_I2C_Init+0x25c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d807      	bhi.n	80036cc <HAL_I2C_Init+0x84>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a7a      	ldr	r2, [pc, #488]	; (80038a8 <HAL_I2C_Init+0x260>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	bf94      	ite	ls
 80036c4:	2301      	movls	r3, #1
 80036c6:	2300      	movhi	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e006      	b.n	80036da <HAL_I2C_Init+0x92>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a77      	ldr	r2, [pc, #476]	; (80038ac <HAL_I2C_Init+0x264>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	bf94      	ite	ls
 80036d4:	2301      	movls	r3, #1
 80036d6:	2300      	movhi	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0db      	b.n	800389a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4a72      	ldr	r2, [pc, #456]	; (80038b0 <HAL_I2C_Init+0x268>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0c9b      	lsrs	r3, r3, #18
 80036ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a64      	ldr	r2, [pc, #400]	; (80038a4 <HAL_I2C_Init+0x25c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d802      	bhi.n	800371c <HAL_I2C_Init+0xd4>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	3301      	adds	r3, #1
 800371a:	e009      	b.n	8003730 <HAL_I2C_Init+0xe8>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	4a63      	ldr	r2, [pc, #396]	; (80038b4 <HAL_I2C_Init+0x26c>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	3301      	adds	r3, #1
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	430b      	orrs	r3, r1
 8003736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003742:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4956      	ldr	r1, [pc, #344]	; (80038a4 <HAL_I2C_Init+0x25c>)
 800374c:	428b      	cmp	r3, r1
 800374e:	d80d      	bhi.n	800376c <HAL_I2C_Init+0x124>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1e59      	subs	r1, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fbb1 f3f3 	udiv	r3, r1, r3
 800375e:	3301      	adds	r3, #1
 8003760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003764:	2b04      	cmp	r3, #4
 8003766:	bf38      	it	cc
 8003768:	2304      	movcc	r3, #4
 800376a:	e04f      	b.n	800380c <HAL_I2C_Init+0x1c4>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d111      	bne.n	8003798 <HAL_I2C_Init+0x150>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e58      	subs	r0, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e012      	b.n	80037be <HAL_I2C_Init+0x176>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e58      	subs	r0, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	0099      	lsls	r1, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Init+0x17e>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e022      	b.n	800380c <HAL_I2C_Init+0x1c4>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <HAL_I2C_Init+0x1a4>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1e58      	subs	r0, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	440b      	add	r3, r1
 80037dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e0:	3301      	adds	r3, #1
 80037e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ea:	e00f      	b.n	800380c <HAL_I2C_Init+0x1c4>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e58      	subs	r0, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	0099      	lsls	r1, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	6809      	ldr	r1, [r1, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800383a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6911      	ldr	r1, [r2, #16]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68d2      	ldr	r2, [r2, #12]
 8003846:	4311      	orrs	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	430b      	orrs	r3, r1
 800384e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	000186a0 	.word	0x000186a0
 80038a8:	001e847f 	.word	0x001e847f
 80038ac:	003d08ff 	.word	0x003d08ff
 80038b0:	431bde83 	.word	0x431bde83
 80038b4:	10624dd3 	.word	0x10624dd3

080038b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d003      	beq.n	80038f0 <HAL_I2C_EV_IRQHandler+0x38>
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	f040 80b6 	bne.w	8003a5c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10d      	bne.n	8003926 <HAL_I2C_EV_IRQHandler+0x6e>
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003910:	d003      	beq.n	800391a <HAL_I2C_EV_IRQHandler+0x62>
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003918:	d101      	bne.n	800391e <HAL_I2C_EV_IRQHandler+0x66>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <HAL_I2C_EV_IRQHandler+0x68>
 800391e:	2300      	movs	r3, #0
 8003920:	2b01      	cmp	r3, #1
 8003922:	f000 8127 	beq.w	8003b74 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00c      	beq.n	800394a <HAL_I2C_EV_IRQHandler+0x92>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	0a5b      	lsrs	r3, r3, #9
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d006      	beq.n	800394a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f001 fba6 	bl	800508e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fd12 	bl	800436c <I2C_Master_SB>
 8003948:	e087      	b.n	8003a5a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	08db      	lsrs	r3, r3, #3
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_I2C_EV_IRQHandler+0xb2>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	0a5b      	lsrs	r3, r3, #9
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fd88 	bl	8004478 <I2C_Master_ADD10>
 8003968:	e077      	b.n	8003a5a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_I2C_EV_IRQHandler+0xd2>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	0a5b      	lsrs	r3, r3, #9
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fda2 	bl	80044cc <I2C_Master_ADDR>
 8003988:	e067      	b.n	8003a5a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	089b      	lsrs	r3, r3, #2
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d030      	beq.n	80039f8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a4:	f000 80e8 	beq.w	8003b78 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	09db      	lsrs	r3, r3, #7
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00f      	beq.n	80039d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f9de 	bl	8003d8e <I2C_MasterTransmit_TXE>
 80039d2:	e042      	b.n	8003a5a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80cb 	beq.w	8003b78 <HAL_I2C_EV_IRQHandler+0x2c0>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	0a5b      	lsrs	r3, r3, #9
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80c4 	beq.w	8003b78 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fa68 	bl	8003ec6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039f6:	e0bf      	b.n	8003b78 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a06:	f000 80b7 	beq.w	8003b78 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00f      	beq.n	8003a36 <HAL_I2C_EV_IRQHandler+0x17e>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	0a9b      	lsrs	r3, r3, #10
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <HAL_I2C_EV_IRQHandler+0x17e>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fb30 	bl	8004094 <I2C_MasterReceive_RXNE>
 8003a34:	e011      	b.n	8003a5a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 809a 	beq.w	8003b78 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	0a5b      	lsrs	r3, r3, #9
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8093 	beq.w	8003b78 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fba0 	bl	8004198 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a58:	e08e      	b.n	8003b78 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003a5a:	e08d      	b.n	8003b78 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	61fb      	str	r3, [r7, #28]
 8003a6c:	e007      	b.n	8003a7e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d012      	beq.n	8003ab0 <HAL_I2C_EV_IRQHandler+0x1f8>
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	0a5b      	lsrs	r3, r3, #9
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00c      	beq.n	8003ab0 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003aa6:	69b9      	ldr	r1, [r7, #24]
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 ff5e 	bl	800496a <I2C_Slave_ADDR>
 8003aae:	e066      	b.n	8003b7e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	091b      	lsrs	r3, r3, #4
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <HAL_I2C_EV_IRQHandler+0x218>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	0a5b      	lsrs	r3, r3, #9
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 ff93 	bl	80049f4 <I2C_Slave_STOPF>
 8003ace:	e056      	b.n	8003b7e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ad0:	7bbb      	ldrb	r3, [r7, #14]
 8003ad2:	2b21      	cmp	r3, #33	; 0x21
 8003ad4:	d002      	beq.n	8003adc <HAL_I2C_EV_IRQHandler+0x224>
 8003ad6:	7bbb      	ldrb	r3, [r7, #14]
 8003ad8:	2b29      	cmp	r3, #41	; 0x29
 8003ada:	d125      	bne.n	8003b28 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	09db      	lsrs	r3, r3, #7
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00f      	beq.n	8003b08 <HAL_I2C_EV_IRQHandler+0x250>
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	0a9b      	lsrs	r3, r3, #10
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <HAL_I2C_EV_IRQHandler+0x250>
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d103      	bne.n	8003b08 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fe74 	bl	80047ee <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b06:	e039      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	089b      	lsrs	r3, r3, #2
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d033      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x2c4>
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	0a5b      	lsrs	r3, r3, #9
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02d      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fea1 	bl	8004868 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b26:	e029      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	099b      	lsrs	r3, r3, #6
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00f      	beq.n	8003b54 <HAL_I2C_EV_IRQHandler+0x29c>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	0a9b      	lsrs	r3, r3, #10
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d009      	beq.n	8003b54 <HAL_I2C_EV_IRQHandler+0x29c>
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	089b      	lsrs	r3, r3, #2
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d103      	bne.n	8003b54 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 feac 	bl	80048aa <I2C_SlaveReceive_RXNE>
 8003b52:	e014      	b.n	8003b7e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	089b      	lsrs	r3, r3, #2
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00e      	beq.n	8003b7e <HAL_I2C_EV_IRQHandler+0x2c6>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 feda 	bl	8004926 <I2C_SlaveReceive_BTF>
 8003b72:	e004      	b.n	8003b7e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003b74:	bf00      	nop
 8003b76:	e002      	b.n	8003b7e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b78:	bf00      	nop
 8003b7a:	e000      	b.n	8003b7e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b7c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	0a1b      	lsrs	r3, r3, #8
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_I2C_ER_IRQHandler+0x4e>
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bd0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	0a5b      	lsrs	r3, r3, #9
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00e      	beq.n	8003bfc <HAL_I2C_ER_IRQHandler+0x78>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	0a1b      	lsrs	r3, r3, #8
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003bfa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	0a9b      	lsrs	r3, r3, #10
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d03f      	beq.n	8003c88 <HAL_I2C_ER_IRQHandler+0x104>
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d039      	beq.n	8003c88 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003c14:	7efb      	ldrb	r3, [r7, #27]
 8003c16:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c26:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003c2e:	7ebb      	ldrb	r3, [r7, #26]
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d112      	bne.n	8003c5a <HAL_I2C_ER_IRQHandler+0xd6>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10f      	bne.n	8003c5a <HAL_I2C_ER_IRQHandler+0xd6>
 8003c3a:	7cfb      	ldrb	r3, [r7, #19]
 8003c3c:	2b21      	cmp	r3, #33	; 0x21
 8003c3e:	d008      	beq.n	8003c52 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	2b29      	cmp	r3, #41	; 0x29
 8003c44:	d005      	beq.n	8003c52 <HAL_I2C_ER_IRQHandler+0xce>
 8003c46:	7cfb      	ldrb	r3, [r7, #19]
 8003c48:	2b28      	cmp	r3, #40	; 0x28
 8003c4a:	d106      	bne.n	8003c5a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b21      	cmp	r3, #33	; 0x21
 8003c50:	d103      	bne.n	8003c5a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fffe 	bl	8004c54 <I2C_Slave_AF>
 8003c58:	e016      	b.n	8003c88 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c62:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	f043 0304 	orr.w	r3, r3, #4
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c6c:	7efb      	ldrb	r3, [r7, #27]
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d002      	beq.n	8003c78 <HAL_I2C_ER_IRQHandler+0xf4>
 8003c72:	7efb      	ldrb	r3, [r7, #27]
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d107      	bne.n	8003c88 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c86:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	0adb      	lsrs	r3, r3, #11
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00e      	beq.n	8003cb2 <HAL_I2C_ER_IRQHandler+0x12e>
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	f043 0308 	orr.w	r3, r3, #8
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003cb0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f001 f835 	bl	8004d34 <I2C_ITError>
  }
}
 8003cca:	bf00      	nop
 8003ccc:	3728      	adds	r7, #40	; 0x28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	70fb      	strb	r3, [r7, #3]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003da4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d150      	bne.n	8003e56 <I2C_MasterTransmit_TXE+0xc8>
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	2b21      	cmp	r3, #33	; 0x21
 8003db8:	d14d      	bne.n	8003e56 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d01d      	beq.n	8003dfc <I2C_MasterTransmit_TXE+0x6e>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d01a      	beq.n	8003dfc <I2C_MasterTransmit_TXE+0x6e>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dcc:	d016      	beq.n	8003dfc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ddc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2211      	movs	r2, #17
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff6c 	bl	8003cd2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dfa:	e060      	b.n	8003ebe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e0a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d107      	bne.n	8003e46 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ff87 	bl	8003d52 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e44:	e03b      	b.n	8003ebe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff3f 	bl	8003cd2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e54:	e033      	b.n	8003ebe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b21      	cmp	r3, #33	; 0x21
 8003e5a:	d005      	beq.n	8003e68 <I2C_MasterTransmit_TXE+0xda>
 8003e5c:	7bbb      	ldrb	r3, [r7, #14]
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d12d      	bne.n	8003ebe <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	2b22      	cmp	r3, #34	; 0x22
 8003e66:	d12a      	bne.n	8003ebe <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d108      	bne.n	8003e84 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e80:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e82:	e01c      	b.n	8003ebe <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d103      	bne.n	8003e98 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f898 	bl	8003fc6 <I2C_MemoryTransmit_TXE_BTF>
}
 8003e96:	e012      	b.n	8003ebe <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ebc:	e7ff      	b.n	8003ebe <I2C_MasterTransmit_TXE+0x130>
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b21      	cmp	r3, #33	; 0x21
 8003ede:	d165      	bne.n	8003fac <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d012      	beq.n	8003f10 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f0e:	e056      	b.n	8003fbe <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d01d      	beq.n	8003f52 <I2C_MasterTransmit_BTF+0x8c>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d01a      	beq.n	8003f52 <I2C_MasterTransmit_BTF+0x8c>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f22:	d016      	beq.n	8003f52 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f32:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2211      	movs	r2, #17
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fec1 	bl	8003cd2 <HAL_I2C_MasterTxCpltCallback>
}
 8003f50:	e035      	b.n	8003fbe <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f60:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f70:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d107      	bne.n	8003f9c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff fedc 	bl	8003d52 <HAL_I2C_MemTxCpltCallback>
}
 8003f9a:	e010      	b.n	8003fbe <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff fe94 	bl	8003cd2 <HAL_I2C_MasterTxCpltCallback>
}
 8003faa:	e008      	b.n	8003fbe <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	d102      	bne.n	8003fbe <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f804 	bl	8003fc6 <I2C_MemoryTransmit_TXE_BTF>
}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d11d      	bne.n	8004012 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d10b      	bne.n	8003ff6 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fee:	1c9a      	adds	r2, r3, #2
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003ff4:	e048      	b.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	121b      	asrs	r3, r3, #8
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004010:	e03a      	b.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004016:	2b01      	cmp	r3, #1
 8004018:	d10b      	bne.n	8004032 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401e:	b2da      	uxtb	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004030:	e02a      	b.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004036:	2b02      	cmp	r3, #2
 8004038:	d126      	bne.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b22      	cmp	r3, #34	; 0x22
 8004044:	d108      	bne.n	8004058 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	e017      	b.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b21      	cmp	r3, #33	; 0x21
 8004062:	d111      	bne.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	781a      	ldrb	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b22      	cmp	r3, #34	; 0x22
 80040a6:	d173      	bne.n	8004190 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d920      	bls.n	80040f8 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d154      	bne.n	8004190 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80040f6:	e04b      	b.n	8004190 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d047      	beq.n	8004190 <I2C_MasterReceive_RXNE+0xfc>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d002      	beq.n	800410c <I2C_MasterReceive_RXNE+0x78>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d141      	bne.n	8004190 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800412a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b40      	cmp	r3, #64	; 0x40
 8004164:	d10a      	bne.n	800417c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f006 f9d9 	bl	800a52c <HAL_I2C_MemRxCpltCallback>
}
 800417a:	e009      	b.n	8004190 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2212      	movs	r2, #18
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff fdab 	bl	8003ce6 <HAL_I2C_MasterRxCpltCallback>
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d11b      	bne.n	80041e8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041be:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041e6:	e0bd      	b.n	8004364 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d129      	bne.n	8004246 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004200:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d00a      	beq.n	800421e <I2C_MasterReceive_BTF+0x86>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d007      	beq.n	800421e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004244:	e08e      	b.n	8004364 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d176      	bne.n	800433e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d002      	beq.n	800425c <I2C_MasterReceive_BTF+0xc4>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b10      	cmp	r3, #16
 800425a:	d108      	bne.n	800426e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e019      	b.n	80042a2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d002      	beq.n	800427a <I2C_MasterReceive_BTF+0xe2>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d108      	bne.n	800428c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e00a      	b.n	80042a2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b10      	cmp	r3, #16
 8004290:	d007      	beq.n	80042a2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042fc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b40      	cmp	r3, #64	; 0x40
 8004310:	d10a      	bne.n	8004328 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f006 f903 	bl	800a52c <HAL_I2C_MemRxCpltCallback>
}
 8004326:	e01d      	b.n	8004364 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2212      	movs	r2, #18
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fcd5 	bl	8003ce6 <HAL_I2C_MasterRxCpltCallback>
}
 800433c:	e012      	b.n	8004364 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d117      	bne.n	80043b0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004398:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800439a:	e067      	b.n	800446c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	611a      	str	r2, [r3, #16]
}
 80043ae:	e05d      	b.n	800446c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b8:	d133      	bne.n	8004422 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b21      	cmp	r3, #33	; 0x21
 80043c4:	d109      	bne.n	80043da <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043d6:	611a      	str	r2, [r3, #16]
 80043d8:	e008      	b.n	80043ec <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <I2C_Master_SB+0x92>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d108      	bne.n	8004410 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	2b00      	cmp	r3, #0
 8004404:	d032      	beq.n	800446c <I2C_Master_SB+0x100>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d02d      	beq.n	800446c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441e:	605a      	str	r2, [r3, #4]
}
 8004420:	e024      	b.n	800446c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10e      	bne.n	8004448 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442e:	b29b      	uxth	r3, r3
 8004430:	11db      	asrs	r3, r3, #7
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f003 0306 	and.w	r3, r3, #6
 8004438:	b2db      	uxtb	r3, r3
 800443a:	f063 030f 	orn	r3, r3, #15
 800443e:	b2da      	uxtb	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	611a      	str	r2, [r3, #16]
}
 8004446:	e011      	b.n	800446c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	2b01      	cmp	r3, #1
 800444e:	d10d      	bne.n	800446c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004454:	b29b      	uxth	r3, r3
 8004456:	11db      	asrs	r3, r3, #7
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f003 0306 	and.w	r3, r3, #6
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f063 030e 	orn	r3, r3, #14
 8004464:	b2da      	uxtb	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	611a      	str	r2, [r3, #16]
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	b2da      	uxtb	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <I2C_Master_ADD10+0x24>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d011      	beq.n	80044c0 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <I2C_Master_ADD10+0x38>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044be:	605a      	str	r2, [r3, #4]
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b091      	sub	sp, #68	; 0x44
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b22      	cmp	r3, #34	; 0x22
 80044f4:	f040 8169 	bne.w	80047ca <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10f      	bne.n	8004520 <I2C_Master_ADDR+0x54>
 8004500:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	d10b      	bne.n	8004520 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004508:	2300      	movs	r3, #0
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	633b      	str	r3, [r7, #48]	; 0x30
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	e160      	b.n	80047e2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	2b00      	cmp	r3, #0
 8004526:	d11d      	bne.n	8004564 <I2C_Master_ADDR+0x98>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004530:	d118      	bne.n	8004564 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004532:	2300      	movs	r3, #0
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004556:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	651a      	str	r2, [r3, #80]	; 0x50
 8004562:	e13e      	b.n	80047e2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d113      	bne.n	8004596 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456e:	2300      	movs	r3, #0
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e115      	b.n	80047c2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	f040 808a 	bne.w	80046b6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045a8:	d137      	bne.n	800461a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c8:	d113      	bne.n	80045f2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045da:	2300      	movs	r3, #0
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	e0e7      	b.n	80047c2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f2:	2300      	movs	r3, #0
 80045f4:	623b      	str	r3, [r7, #32]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	623b      	str	r3, [r7, #32]
 8004606:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	e0d3      	b.n	80047c2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	2b08      	cmp	r3, #8
 800461e:	d02e      	beq.n	800467e <I2C_Master_ADDR+0x1b2>
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	2b20      	cmp	r3, #32
 8004624:	d02b      	beq.n	800467e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004628:	2b12      	cmp	r3, #18
 800462a:	d102      	bne.n	8004632 <I2C_Master_ADDR+0x166>
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	2b01      	cmp	r3, #1
 8004630:	d125      	bne.n	800467e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	2b04      	cmp	r3, #4
 8004636:	d00e      	beq.n	8004656 <I2C_Master_ADDR+0x18a>
 8004638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463a:	2b02      	cmp	r3, #2
 800463c:	d00b      	beq.n	8004656 <I2C_Master_ADDR+0x18a>
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	2b10      	cmp	r3, #16
 8004642:	d008      	beq.n	8004656 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e007      	b.n	8004666 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004664:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	e0a1      	b.n	80047c2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e085      	b.n	80047c2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d14d      	bne.n	800475c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d016      	beq.n	80046f4 <I2C_Master_ADDR+0x228>
 80046c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d013      	beq.n	80046f4 <I2C_Master_ADDR+0x228>
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	2b10      	cmp	r3, #16
 80046d0:	d010      	beq.n	80046f4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	e007      	b.n	8004704 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004702:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800470e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004712:	d117      	bne.n	8004744 <I2C_Master_ADDR+0x278>
 8004714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004716:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800471a:	d00b      	beq.n	8004734 <I2C_Master_ADDR+0x268>
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	2b01      	cmp	r3, #1
 8004720:	d008      	beq.n	8004734 <I2C_Master_ADDR+0x268>
 8004722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004724:	2b08      	cmp	r3, #8
 8004726:	d005      	beq.n	8004734 <I2C_Master_ADDR+0x268>
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	2b10      	cmp	r3, #16
 800472c:	d002      	beq.n	8004734 <I2C_Master_ADDR+0x268>
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	2b20      	cmp	r3, #32
 8004732:	d107      	bne.n	8004744 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004742:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	e032      	b.n	80047c2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800476a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477a:	d117      	bne.n	80047ac <I2C_Master_ADDR+0x2e0>
 800477c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004782:	d00b      	beq.n	800479c <I2C_Master_ADDR+0x2d0>
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	2b01      	cmp	r3, #1
 8004788:	d008      	beq.n	800479c <I2C_Master_ADDR+0x2d0>
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	2b08      	cmp	r3, #8
 800478e:	d005      	beq.n	800479c <I2C_Master_ADDR+0x2d0>
 8004790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004792:	2b10      	cmp	r3, #16
 8004794:	d002      	beq.n	800479c <I2C_Master_ADDR+0x2d0>
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	2b20      	cmp	r3, #32
 800479a:	d107      	bne.n	80047ac <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047aa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80047c8:	e00b      	b.n	80047e2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
}
 80047e0:	e7ff      	b.n	80047e2 <I2C_Master_ADDR+0x316>
 80047e2:	bf00      	nop
 80047e4:	3744      	adds	r7, #68	; 0x44
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d02b      	beq.n	8004860 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	781a      	ldrb	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d114      	bne.n	8004860 <I2C_SlaveTransmit_TXE+0x72>
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	2b29      	cmp	r3, #41	; 0x29
 800483a:	d111      	bne.n	8004860 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2221      	movs	r2, #33	; 0x21
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2228      	movs	r2, #40	; 0x28
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff fa4d 	bl	8003cfa <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d011      	beq.n	800489e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	781a      	ldrb	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02c      	beq.n	800491e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d114      	bne.n	800491e <I2C_SlaveReceive_RXNE+0x74>
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b2a      	cmp	r3, #42	; 0x2a
 80048f8:	d111      	bne.n	800491e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004908:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2222      	movs	r2, #34	; 0x22
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2228      	movs	r2, #40	; 0x28
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff f9f8 	bl	8003d0e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d012      	beq.n	800495e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004974:	2300      	movs	r3, #0
 8004976:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004984:	2b28      	cmp	r3, #40	; 0x28
 8004986:	d127      	bne.n	80049d8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004996:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	09db      	lsrs	r3, r3, #7
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d103      	bne.n	80049bc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	81bb      	strh	r3, [r7, #12]
 80049ba:	e002      	b.n	80049c2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80049ca:	89ba      	ldrh	r2, [r7, #12]
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	4619      	mov	r1, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff f9a6 	bl	8003d22 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049d6:	e008      	b.n	80049ea <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0202 	mvn.w	r2, #2
 80049e0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a02:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a12:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a14:	2300      	movs	r3, #0
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a40:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a50:	d172      	bne.n	8004b38 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	2b22      	cmp	r3, #34	; 0x22
 8004a56:	d002      	beq.n	8004a5e <I2C_Slave_STOPF+0x6a>
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a5c:	d135      	bne.n	8004aca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f043 0204 	orr.w	r2, r3, #4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe fb02 	bl	80030a0 <HAL_DMA_GetState>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d049      	beq.n	8004b36 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	4a69      	ldr	r2, [pc, #420]	; (8004c4c <I2C_Slave_STOPF+0x258>)
 8004aa8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe f94a 	bl	8002d48 <HAL_DMA_Abort_IT>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d03d      	beq.n	8004b36 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ac8:	e035      	b.n	8004b36 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f043 0204 	orr.w	r2, r3, #4
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004afc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe facc 	bl	80030a0 <HAL_DMA_GetState>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d014      	beq.n	8004b38 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b12:	4a4e      	ldr	r2, [pc, #312]	; (8004c4c <I2C_Slave_STOPF+0x258>)
 8004b14:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe f914 	bl	8002d48 <HAL_DMA_Abort_IT>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b30:	4610      	mov	r0, r2
 8004b32:	4798      	blx	r3
 8004b34:	e000      	b.n	8004b38 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b36:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d03e      	beq.n	8004bc0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d112      	bne.n	8004b76 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	d112      	bne.n	8004baa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f043 0204 	orr.w	r2, r3, #4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f8b3 	bl	8004d34 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004bce:	e039      	b.n	8004c44 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd4:	d109      	bne.n	8004bea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2228      	movs	r2, #40	; 0x28
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff f892 	bl	8003d0e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b28      	cmp	r3, #40	; 0x28
 8004bf4:	d111      	bne.n	8004c1a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <I2C_Slave_STOPF+0x25c>)
 8004bfa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff f893 	bl	8003d3e <HAL_I2C_ListenCpltCallback>
}
 8004c18:	e014      	b.n	8004c44 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	2b22      	cmp	r3, #34	; 0x22
 8004c20:	d002      	beq.n	8004c28 <I2C_Slave_STOPF+0x234>
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	2b22      	cmp	r3, #34	; 0x22
 8004c26:	d10d      	bne.n	8004c44 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff f865 	bl	8003d0e <HAL_I2C_SlaveRxCpltCallback>
}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	08004f91 	.word	0x08004f91
 8004c50:	ffff0000 	.word	0xffff0000

08004c54 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c62:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d002      	beq.n	8004c76 <I2C_Slave_AF+0x22>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d129      	bne.n	8004cca <I2C_Slave_AF+0x76>
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	2b28      	cmp	r3, #40	; 0x28
 8004c7a:	d126      	bne.n	8004cca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a2c      	ldr	r2, [pc, #176]	; (8004d30 <I2C_Slave_AF+0xdc>)
 8004c80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c90:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c9a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004caa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff f83b 	bl	8003d3e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004cc8:	e02e      	b.n	8004d28 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b21      	cmp	r3, #33	; 0x21
 8004cce:	d126      	bne.n	8004d1e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <I2C_Slave_AF+0xdc>)
 8004cd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2221      	movs	r2, #33	; 0x21
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cfa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d04:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d14:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fe ffef 	bl	8003cfa <HAL_I2C_SlaveTxCpltCallback>
}
 8004d1c:	e004      	b.n	8004d28 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d26:	615a      	str	r2, [r3, #20]
}
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	ffff0000 	.word	0xffff0000

08004d34 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d42:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d10a      	bne.n	8004d66 <I2C_ITError+0x32>
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b22      	cmp	r3, #34	; 0x22
 8004d54:	d107      	bne.n	8004d66 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d6c:	2b28      	cmp	r3, #40	; 0x28
 8004d6e:	d107      	bne.n	8004d80 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2228      	movs	r2, #40	; 0x28
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d7e:	e015      	b.n	8004dac <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8e:	d006      	beq.n	8004d9e <I2C_ITError+0x6a>
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b60      	cmp	r3, #96	; 0x60
 8004d94:	d003      	beq.n	8004d9e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dba:	d162      	bne.n	8004e82 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d020      	beq.n	8004e1c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	4a6a      	ldr	r2, [pc, #424]	; (8004f88 <I2C_ITError+0x254>)
 8004de0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fd ffae 	bl	8002d48 <HAL_DMA_Abort_IT>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8089 	beq.w	8004f06 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e16:	4610      	mov	r0, r2
 8004e18:	4798      	blx	r3
 8004e1a:	e074      	b.n	8004f06 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	4a59      	ldr	r2, [pc, #356]	; (8004f88 <I2C_ITError+0x254>)
 8004e22:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fd ff8d 	bl	8002d48 <HAL_DMA_Abort_IT>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d068      	beq.n	8004f06 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d10b      	bne.n	8004e5a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0201 	bic.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4798      	blx	r3
 8004e80:	e041      	b.n	8004f06 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b60      	cmp	r3, #96	; 0x60
 8004e8c:	d125      	bne.n	8004eda <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea6:	2b40      	cmp	r3, #64	; 0x40
 8004ea8:	d10b      	bne.n	8004ec2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fe ff51 	bl	8003d7a <HAL_I2C_AbortCpltCallback>
 8004ed8:	e015      	b.n	8004f06 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d10b      	bne.n	8004f00 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7fe ff30 	bl	8003d66 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10e      	bne.n	8004f34 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d109      	bne.n	8004f34 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f42:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d113      	bne.n	8004f80 <I2C_ITError+0x24c>
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b28      	cmp	r3, #40	; 0x28
 8004f5c:	d110      	bne.n	8004f80 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <I2C_ITError+0x258>)
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fe fedf 	bl	8003d3e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	08004f91 	.word	0x08004f91
 8004f8c:	ffff0000 	.word	0xffff0000

08004f90 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe8:	2200      	movs	r2, #0
 8004fea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0201 	bic.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b60      	cmp	r3, #96	; 0x60
 8005016:	d10e      	bne.n	8005036 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7fe fea3 	bl	8003d7a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005034:	e027      	b.n	8005086 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005036:	7afb      	ldrb	r3, [r7, #11]
 8005038:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800503c:	2b28      	cmp	r3, #40	; 0x28
 800503e:	d117      	bne.n	8005070 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800505e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2228      	movs	r2, #40	; 0x28
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800506e:	e007      	b.n	8005080 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7fe fe70 	bl	8003d66 <HAL_I2C_ErrorCallback>
}
 8005086:	bf00      	nop
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800509e:	d103      	bne.n	80050a8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80050a6:	e007      	b.n	80050b8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80050b0:	d102      	bne.n	80050b8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2208      	movs	r2, #8
 80050b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d129      	bne.n	800512e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2224      	movs	r2, #36	; 0x24
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0210 	bic.w	r2, r2, #16
 8005100:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0201 	orr.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e000      	b.n	8005130 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800512e:	2302      	movs	r3, #2
  }
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b20      	cmp	r3, #32
 8005154:	d12a      	bne.n	80051ac <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2224      	movs	r2, #36	; 0x24
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005176:	89fb      	ldrh	r3, [r7, #14]
 8005178:	f023 030f 	bic.w	r3, r3, #15
 800517c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	b29a      	uxth	r2, r3
 8005182:	89fb      	ldrh	r3, [r7, #14]
 8005184:	4313      	orrs	r3, r2
 8005186:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	89fa      	ldrh	r2, [r7, #14]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	e000      	b.n	80051ae <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80051ac:	2302      	movs	r3, #2
  }
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051bc:	b08f      	sub	sp, #60	; 0x3c
 80051be:	af0a      	add	r7, sp, #40	; 0x28
 80051c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e10f      	b.n	80053ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fd fade 	bl	80027a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2203      	movs	r2, #3
 80051f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f004 fbd7 	bl	80099be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	687e      	ldr	r6, [r7, #4]
 8005218:	466d      	mov	r5, sp
 800521a:	f106 0410 	add.w	r4, r6, #16
 800521e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005226:	e894 0003 	ldmia.w	r4, {r0, r1}
 800522a:	e885 0003 	stmia.w	r5, {r0, r1}
 800522e:	1d33      	adds	r3, r6, #4
 8005230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005232:	6838      	ldr	r0, [r7, #0]
 8005234:	f004 fb62 	bl	80098fc <USB_CoreInit>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e0d0      	b.n	80053ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f004 fbc5 	bl	80099e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]
 800525a:	e04a      	b.n	80052f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800525c:	7bfa      	ldrb	r2, [r7, #15]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	333d      	adds	r3, #61	; 0x3d
 800526c:	2201      	movs	r2, #1
 800526e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4613      	mov	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	1a9b      	subs	r3, r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	333c      	adds	r3, #60	; 0x3c
 8005280:	7bfa      	ldrb	r2, [r7, #15]
 8005282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005284:	7bfa      	ldrb	r2, [r7, #15]
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	b298      	uxth	r0, r3
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	3342      	adds	r3, #66	; 0x42
 8005298:	4602      	mov	r2, r0
 800529a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800529c:	7bfa      	ldrb	r2, [r7, #15]
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	333f      	adds	r3, #63	; 0x3f
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052b0:	7bfa      	ldrb	r2, [r7, #15]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	3344      	adds	r3, #68	; 0x44
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052c4:	7bfa      	ldrb	r2, [r7, #15]
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	3348      	adds	r3, #72	; 0x48
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052d8:	7bfa      	ldrb	r2, [r7, #15]
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	4613      	mov	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	1a9b      	subs	r3, r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	440b      	add	r3, r1
 80052e6:	3350      	adds	r3, #80	; 0x50
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	3301      	adds	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
 80052f2:	7bfa      	ldrb	r2, [r7, #15]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d3af      	bcc.n	800525c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
 8005300:	e044      	b.n	800538c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005302:	7bfa      	ldrb	r2, [r7, #15]
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	1a9b      	subs	r3, r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	440b      	add	r3, r1
 8005310:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005318:	7bfa      	ldrb	r2, [r7, #15]
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	1a9b      	subs	r3, r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800532a:	7bfa      	ldrb	r2, [r7, #15]
 800532c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800532e:	7bfa      	ldrb	r2, [r7, #15]
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005344:	7bfa      	ldrb	r2, [r7, #15]
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4613      	mov	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	440b      	add	r3, r1
 8005352:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800535a:	7bfa      	ldrb	r2, [r7, #15]
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005370:	7bfa      	ldrb	r2, [r7, #15]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	3301      	adds	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	429a      	cmp	r2, r3
 8005394:	d3b5      	bcc.n	8005302 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	687e      	ldr	r6, [r7, #4]
 800539e:	466d      	mov	r5, sp
 80053a0:	f106 0410 	add.w	r4, r6, #16
 80053a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80053b4:	1d33      	adds	r3, r6, #4
 80053b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053b8:	6838      	ldr	r0, [r7, #0]
 80053ba:	f004 fb3b 	bl	8009a34 <USB_DevInit>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e00d      	b.n	80053ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f004 fcea 	bl	8009dbe <USB_DevDisconnect>

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e25b      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d075      	beq.n	80054fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005412:	4ba3      	ldr	r3, [pc, #652]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b04      	cmp	r3, #4
 800541c:	d00c      	beq.n	8005438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800541e:	4ba0      	ldr	r3, [pc, #640]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005426:	2b08      	cmp	r3, #8
 8005428:	d112      	bne.n	8005450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800542a:	4b9d      	ldr	r3, [pc, #628]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005436:	d10b      	bne.n	8005450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005438:	4b99      	ldr	r3, [pc, #612]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d05b      	beq.n	80054fc <HAL_RCC_OscConfig+0x108>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d157      	bne.n	80054fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e236      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005458:	d106      	bne.n	8005468 <HAL_RCC_OscConfig+0x74>
 800545a:	4b91      	ldr	r3, [pc, #580]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a90      	ldr	r2, [pc, #576]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	e01d      	b.n	80054a4 <HAL_RCC_OscConfig+0xb0>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005470:	d10c      	bne.n	800548c <HAL_RCC_OscConfig+0x98>
 8005472:	4b8b      	ldr	r3, [pc, #556]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a8a      	ldr	r2, [pc, #552]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	4b88      	ldr	r3, [pc, #544]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a87      	ldr	r2, [pc, #540]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e00b      	b.n	80054a4 <HAL_RCC_OscConfig+0xb0>
 800548c:	4b84      	ldr	r3, [pc, #528]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a83      	ldr	r2, [pc, #524]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	4b81      	ldr	r3, [pc, #516]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a80      	ldr	r2, [pc, #512]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 800549e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d013      	beq.n	80054d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7fd fa36 	bl	800291c <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054b4:	f7fd fa32 	bl	800291c <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e1fb      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c6:	4b76      	ldr	r3, [pc, #472]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0xc0>
 80054d2:	e014      	b.n	80054fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d4:	f7fd fa22 	bl	800291c <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054dc:	f7fd fa1e 	bl	800291c <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b64      	cmp	r3, #100	; 0x64
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e1e7      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ee:	4b6c      	ldr	r3, [pc, #432]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0xe8>
 80054fa:	e000      	b.n	80054fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d063      	beq.n	80055d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800550a:	4b65      	ldr	r3, [pc, #404]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 030c 	and.w	r3, r3, #12
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005516:	4b62      	ldr	r3, [pc, #392]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800551e:	2b08      	cmp	r3, #8
 8005520:	d11c      	bne.n	800555c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005522:	4b5f      	ldr	r3, [pc, #380]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d116      	bne.n	800555c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552e:	4b5c      	ldr	r3, [pc, #368]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_RCC_OscConfig+0x152>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d001      	beq.n	8005546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e1bb      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005546:	4b56      	ldr	r3, [pc, #344]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	4952      	ldr	r1, [pc, #328]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005556:	4313      	orrs	r3, r2
 8005558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800555a:	e03a      	b.n	80055d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d020      	beq.n	80055a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005564:	4b4f      	ldr	r3, [pc, #316]	; (80056a4 <HAL_RCC_OscConfig+0x2b0>)
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556a:	f7fd f9d7 	bl	800291c <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005572:	f7fd f9d3 	bl	800291c <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e19c      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005584:	4b46      	ldr	r3, [pc, #280]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005590:	4b43      	ldr	r3, [pc, #268]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4940      	ldr	r1, [pc, #256]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	600b      	str	r3, [r1, #0]
 80055a4:	e015      	b.n	80055d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a6:	4b3f      	ldr	r3, [pc, #252]	; (80056a4 <HAL_RCC_OscConfig+0x2b0>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fd f9b6 	bl	800291c <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055b4:	f7fd f9b2 	bl	800291c <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e17b      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c6:	4b36      	ldr	r3, [pc, #216]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1f0      	bne.n	80055b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d030      	beq.n	8005640 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e6:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <HAL_RCC_OscConfig+0x2b4>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ec:	f7fd f996 	bl	800291c <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055f4:	f7fd f992 	bl	800291c <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e15b      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005606:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f0      	beq.n	80055f4 <HAL_RCC_OscConfig+0x200>
 8005612:	e015      	b.n	8005640 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005614:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <HAL_RCC_OscConfig+0x2b4>)
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800561a:	f7fd f97f 	bl	800291c <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005622:	f7fd f97b 	bl	800291c <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e144      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005634:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f0      	bne.n	8005622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80a0 	beq.w	800578e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800564e:	2300      	movs	r3, #0
 8005650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005652:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10f      	bne.n	800567e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	4a0e      	ldr	r2, [pc, #56]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566c:	6413      	str	r3, [r2, #64]	; 0x40
 800566e:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <HAL_RCC_OscConfig+0x2ac>)
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800567a:	2301      	movs	r3, #1
 800567c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567e:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <HAL_RCC_OscConfig+0x2b8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d121      	bne.n	80056ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800568a:	4b08      	ldr	r3, [pc, #32]	; (80056ac <HAL_RCC_OscConfig+0x2b8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a07      	ldr	r2, [pc, #28]	; (80056ac <HAL_RCC_OscConfig+0x2b8>)
 8005690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005696:	f7fd f941 	bl	800291c <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569c:	e011      	b.n	80056c2 <HAL_RCC_OscConfig+0x2ce>
 800569e:	bf00      	nop
 80056a0:	40023800 	.word	0x40023800
 80056a4:	42470000 	.word	0x42470000
 80056a8:	42470e80 	.word	0x42470e80
 80056ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b0:	f7fd f934 	bl	800291c <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e0fd      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c2:	4b81      	ldr	r3, [pc, #516]	; (80058c8 <HAL_RCC_OscConfig+0x4d4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d106      	bne.n	80056e4 <HAL_RCC_OscConfig+0x2f0>
 80056d6:	4b7d      	ldr	r3, [pc, #500]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 80056d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056da:	4a7c      	ldr	r2, [pc, #496]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 80056dc:	f043 0301 	orr.w	r3, r3, #1
 80056e0:	6713      	str	r3, [r2, #112]	; 0x70
 80056e2:	e01c      	b.n	800571e <HAL_RCC_OscConfig+0x32a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2b05      	cmp	r3, #5
 80056ea:	d10c      	bne.n	8005706 <HAL_RCC_OscConfig+0x312>
 80056ec:	4b77      	ldr	r3, [pc, #476]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f0:	4a76      	ldr	r2, [pc, #472]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 80056f2:	f043 0304 	orr.w	r3, r3, #4
 80056f6:	6713      	str	r3, [r2, #112]	; 0x70
 80056f8:	4b74      	ldr	r3, [pc, #464]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fc:	4a73      	ldr	r2, [pc, #460]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	6713      	str	r3, [r2, #112]	; 0x70
 8005704:	e00b      	b.n	800571e <HAL_RCC_OscConfig+0x32a>
 8005706:	4b71      	ldr	r3, [pc, #452]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	4a70      	ldr	r2, [pc, #448]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	6713      	str	r3, [r2, #112]	; 0x70
 8005712:	4b6e      	ldr	r3, [pc, #440]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 8005714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005716:	4a6d      	ldr	r2, [pc, #436]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 8005718:	f023 0304 	bic.w	r3, r3, #4
 800571c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d015      	beq.n	8005752 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005726:	f7fd f8f9 	bl	800291c <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572c:	e00a      	b.n	8005744 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800572e:	f7fd f8f5 	bl	800291c <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	f241 3288 	movw	r2, #5000	; 0x1388
 800573c:	4293      	cmp	r3, r2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e0bc      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005744:	4b61      	ldr	r3, [pc, #388]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 8005746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0ee      	beq.n	800572e <HAL_RCC_OscConfig+0x33a>
 8005750:	e014      	b.n	800577c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005752:	f7fd f8e3 	bl	800291c <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005758:	e00a      	b.n	8005770 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800575a:	f7fd f8df 	bl	800291c <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	f241 3288 	movw	r2, #5000	; 0x1388
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e0a6      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005770:	4b56      	ldr	r3, [pc, #344]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1ee      	bne.n	800575a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d105      	bne.n	800578e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005782:	4b52      	ldr	r3, [pc, #328]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	4a51      	ldr	r2, [pc, #324]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 8005788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800578c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8092 	beq.w	80058bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005798:	4b4c      	ldr	r3, [pc, #304]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 030c 	and.w	r3, r3, #12
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d05c      	beq.n	800585e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d141      	bne.n	8005830 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ac:	4b48      	ldr	r3, [pc, #288]	; (80058d0 <HAL_RCC_OscConfig+0x4dc>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b2:	f7fd f8b3 	bl	800291c <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ba:	f7fd f8af 	bl	800291c <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e078      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057cc:	4b3f      	ldr	r3, [pc, #252]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1f0      	bne.n	80057ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	019b      	lsls	r3, r3, #6
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ee:	085b      	lsrs	r3, r3, #1
 80057f0:	3b01      	subs	r3, #1
 80057f2:	041b      	lsls	r3, r3, #16
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	061b      	lsls	r3, r3, #24
 80057fc:	4933      	ldr	r1, [pc, #204]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005802:	4b33      	ldr	r3, [pc, #204]	; (80058d0 <HAL_RCC_OscConfig+0x4dc>)
 8005804:	2201      	movs	r2, #1
 8005806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005808:	f7fd f888 	bl	800291c <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005810:	f7fd f884 	bl	800291c <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e04d      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005822:	4b2a      	ldr	r3, [pc, #168]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f0      	beq.n	8005810 <HAL_RCC_OscConfig+0x41c>
 800582e:	e045      	b.n	80058bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005830:	4b27      	ldr	r3, [pc, #156]	; (80058d0 <HAL_RCC_OscConfig+0x4dc>)
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005836:	f7fd f871 	bl	800291c <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800583e:	f7fd f86d 	bl	800291c <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e036      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005850:	4b1e      	ldr	r3, [pc, #120]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f0      	bne.n	800583e <HAL_RCC_OscConfig+0x44a>
 800585c:	e02e      	b.n	80058bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e029      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800586a:	4b18      	ldr	r3, [pc, #96]	; (80058cc <HAL_RCC_OscConfig+0x4d8>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	429a      	cmp	r2, r3
 800587c:	d11c      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005888:	429a      	cmp	r2, r3
 800588a:	d115      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005892:	4013      	ands	r3, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005898:	4293      	cmp	r3, r2
 800589a:	d10d      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d106      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40007000 	.word	0x40007000
 80058cc:	40023800 	.word	0x40023800
 80058d0:	42470060 	.word	0x42470060

080058d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0cc      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058e8:	4b68      	ldr	r3, [pc, #416]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d90c      	bls.n	8005910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f6:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fe:	4b63      	ldr	r3, [pc, #396]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d001      	beq.n	8005910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0b8      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d020      	beq.n	800595e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005928:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4a58      	ldr	r2, [pc, #352]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005940:	4b53      	ldr	r3, [pc, #332]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4a52      	ldr	r2, [pc, #328]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800594a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800594c:	4b50      	ldr	r3, [pc, #320]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	494d      	ldr	r1, [pc, #308]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	4313      	orrs	r3, r2
 800595c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d044      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d107      	bne.n	8005982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005972:	4b47      	ldr	r3, [pc, #284]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d119      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e07f      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d003      	beq.n	8005992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800598e:	2b03      	cmp	r3, #3
 8005990:	d107      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005992:	4b3f      	ldr	r3, [pc, #252]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d109      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e06f      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a2:	4b3b      	ldr	r3, [pc, #236]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e067      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059b2:	4b37      	ldr	r3, [pc, #220]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f023 0203 	bic.w	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	4934      	ldr	r1, [pc, #208]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c4:	f7fc ffaa 	bl	800291c <HAL_GetTick>
 80059c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ca:	e00a      	b.n	80059e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059cc:	f7fc ffa6 	bl	800291c <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059da:	4293      	cmp	r3, r2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e04f      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e2:	4b2b      	ldr	r3, [pc, #172]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 020c 	and.w	r2, r3, #12
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d1eb      	bne.n	80059cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059f4:	4b25      	ldr	r3, [pc, #148]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d20c      	bcs.n	8005a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a02:	4b22      	ldr	r3, [pc, #136]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0a:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <HAL_RCC_ClockConfig+0x1b8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d001      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e032      	b.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a28:	4b19      	ldr	r3, [pc, #100]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4916      	ldr	r1, [pc, #88]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a46:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	490e      	ldr	r1, [pc, #56]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a5a:	f000 f821 	bl	8005aa0 <HAL_RCC_GetSysClockFreq>
 8005a5e:	4601      	mov	r1, r0
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	4a0a      	ldr	r2, [pc, #40]	; (8005a94 <HAL_RCC_ClockConfig+0x1c0>)
 8005a6c:	5cd3      	ldrb	r3, [r2, r3]
 8005a6e:	fa21 f303 	lsr.w	r3, r1, r3
 8005a72:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fb ff8c 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40023c00 	.word	0x40023c00
 8005a90:	40023800 	.word	0x40023800
 8005a94:	08014a88 	.word	0x08014a88
 8005a98:	20000000 	.word	0x20000000
 8005a9c:	20000004 	.word	0x20000004

08005aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ab6:	4b63      	ldr	r3, [pc, #396]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 030c 	and.w	r3, r3, #12
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d007      	beq.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x32>
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d008      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x38>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f040 80b4 	bne.w	8005c34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005acc:	4b5e      	ldr	r3, [pc, #376]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005ace:	60bb      	str	r3, [r7, #8]
       break;
 8005ad0:	e0b3      	b.n	8005c3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ad2:	4b5e      	ldr	r3, [pc, #376]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005ad4:	60bb      	str	r3, [r7, #8]
      break;
 8005ad6:	e0b0      	b.n	8005c3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ad8:	4b5a      	ldr	r3, [pc, #360]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ae2:	4b58      	ldr	r3, [pc, #352]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d04a      	beq.n	8005b84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aee:	4b55      	ldr	r3, [pc, #340]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	099b      	lsrs	r3, r3, #6
 8005af4:	f04f 0400 	mov.w	r4, #0
 8005af8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	ea03 0501 	and.w	r5, r3, r1
 8005b04:	ea04 0602 	and.w	r6, r4, r2
 8005b08:	4629      	mov	r1, r5
 8005b0a:	4632      	mov	r2, r6
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	f04f 0400 	mov.w	r4, #0
 8005b14:	0154      	lsls	r4, r2, #5
 8005b16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b1a:	014b      	lsls	r3, r1, #5
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4622      	mov	r2, r4
 8005b20:	1b49      	subs	r1, r1, r5
 8005b22:	eb62 0206 	sbc.w	r2, r2, r6
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	f04f 0400 	mov.w	r4, #0
 8005b2e:	0194      	lsls	r4, r2, #6
 8005b30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b34:	018b      	lsls	r3, r1, #6
 8005b36:	1a5b      	subs	r3, r3, r1
 8005b38:	eb64 0402 	sbc.w	r4, r4, r2
 8005b3c:	f04f 0100 	mov.w	r1, #0
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	00e2      	lsls	r2, r4, #3
 8005b46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b4a:	00d9      	lsls	r1, r3, #3
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4614      	mov	r4, r2
 8005b50:	195b      	adds	r3, r3, r5
 8005b52:	eb44 0406 	adc.w	r4, r4, r6
 8005b56:	f04f 0100 	mov.w	r1, #0
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	0262      	lsls	r2, r4, #9
 8005b60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005b64:	0259      	lsls	r1, r3, #9
 8005b66:	460b      	mov	r3, r1
 8005b68:	4614      	mov	r4, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f04f 0400 	mov.w	r4, #0
 8005b74:	461a      	mov	r2, r3
 8005b76:	4623      	mov	r3, r4
 8005b78:	f7fb f896 	bl	8000ca8 <__aeabi_uldivmod>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	e049      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b84:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	099b      	lsrs	r3, r3, #6
 8005b8a:	f04f 0400 	mov.w	r4, #0
 8005b8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	ea03 0501 	and.w	r5, r3, r1
 8005b9a:	ea04 0602 	and.w	r6, r4, r2
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	4632      	mov	r2, r6
 8005ba2:	f04f 0300 	mov.w	r3, #0
 8005ba6:	f04f 0400 	mov.w	r4, #0
 8005baa:	0154      	lsls	r4, r2, #5
 8005bac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005bb0:	014b      	lsls	r3, r1, #5
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	1b49      	subs	r1, r1, r5
 8005bb8:	eb62 0206 	sbc.w	r2, r2, r6
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	f04f 0400 	mov.w	r4, #0
 8005bc4:	0194      	lsls	r4, r2, #6
 8005bc6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005bca:	018b      	lsls	r3, r1, #6
 8005bcc:	1a5b      	subs	r3, r3, r1
 8005bce:	eb64 0402 	sbc.w	r4, r4, r2
 8005bd2:	f04f 0100 	mov.w	r1, #0
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	00e2      	lsls	r2, r4, #3
 8005bdc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005be0:	00d9      	lsls	r1, r3, #3
 8005be2:	460b      	mov	r3, r1
 8005be4:	4614      	mov	r4, r2
 8005be6:	195b      	adds	r3, r3, r5
 8005be8:	eb44 0406 	adc.w	r4, r4, r6
 8005bec:	f04f 0100 	mov.w	r1, #0
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	02a2      	lsls	r2, r4, #10
 8005bf6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005bfa:	0299      	lsls	r1, r3, #10
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4614      	mov	r4, r2
 8005c00:	4618      	mov	r0, r3
 8005c02:	4621      	mov	r1, r4
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f04f 0400 	mov.w	r4, #0
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4623      	mov	r3, r4
 8005c0e:	f7fb f84b 	bl	8000ca8 <__aeabi_uldivmod>
 8005c12:	4603      	mov	r3, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	0c1b      	lsrs	r3, r3, #16
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	3301      	adds	r3, #1
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c30:	60bb      	str	r3, [r7, #8]
      break;
 8005c32:	e002      	b.n	8005c3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005c36:	60bb      	str	r3, [r7, #8]
      break;
 8005c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c44:	40023800 	.word	0x40023800
 8005c48:	00f42400 	.word	0x00f42400
 8005c4c:	007a1200 	.word	0x007a1200

08005c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c54:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c56:	681b      	ldr	r3, [r3, #0]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	20000000 	.word	0x20000000

08005c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c6c:	f7ff fff0 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c70:	4601      	mov	r1, r0
 8005c72:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	0a9b      	lsrs	r3, r3, #10
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	4a03      	ldr	r2, [pc, #12]	; (8005c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c7e:	5cd3      	ldrb	r3, [r2, r3]
 8005c80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	08014a98 	.word	0x08014a98

08005c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c94:	f7ff ffdc 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c98:	4601      	mov	r1, r0
 8005c9a:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	0b5b      	lsrs	r3, r3, #13
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	4a03      	ldr	r2, [pc, #12]	; (8005cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ca6:	5cd3      	ldrb	r3, [r2, r3]
 8005ca8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	08014a98 	.word	0x08014a98

08005cb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	220f      	movs	r2, #15
 8005cc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005cc8:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <HAL_RCC_GetClockConfig+0x5c>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 0203 	and.w	r2, r3, #3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005cd4:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <HAL_RCC_GetClockConfig+0x5c>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <HAL_RCC_GetClockConfig+0x5c>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <HAL_RCC_GetClockConfig+0x5c>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	08db      	lsrs	r3, r3, #3
 8005cf2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cfa:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <HAL_RCC_GetClockConfig+0x60>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 020f 	and.w	r2, r3, #15
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	601a      	str	r2, [r3, #0]
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40023800 	.word	0x40023800
 8005d18:	40023c00 	.word	0x40023c00

08005d1c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e022      	b.n	8005d74 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d105      	bne.n	8005d46 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7fb fd05 	bl	8001750 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2203      	movs	r2, #3
 8005d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f814 	bl	8005d7c <HAL_SD_InitCard>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e00a      	b.n	8005d74 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005d7c:	b5b0      	push	{r4, r5, r7, lr}
 8005d7e:	b08e      	sub	sp, #56	; 0x38
 8005d80:	af04      	add	r7, sp, #16
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005d98:	2376      	movs	r3, #118	; 0x76
 8005d9a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681d      	ldr	r5, [r3, #0]
 8005da0:	466c      	mov	r4, sp
 8005da2:	f107 0314 	add.w	r3, r7, #20
 8005da6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005daa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005dae:	f107 0308 	add.w	r3, r7, #8
 8005db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005db4:	4628      	mov	r0, r5
 8005db6:	f003 f83d 	bl	8008e34 <SDIO_Init>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e031      	b.n	8005e30 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005dcc:	4b1a      	ldr	r3, [pc, #104]	; (8005e38 <HAL_SD_InitCard+0xbc>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f003 f875 	bl	8008ec6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005ddc:	4b16      	ldr	r3, [pc, #88]	; (8005e38 <HAL_SD_InitCard+0xbc>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 ffdc 	bl	8006da0 <SD_PowerON>
 8005de8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00b      	beq.n	8005e08 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e013      	b.n	8005e30 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fefb 	bl	8006c04 <SD_InitCard>
 8005e0e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00b      	beq.n	8005e2e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3728      	adds	r7, #40	; 0x28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bdb0      	pop	{r4, r5, r7, pc}
 8005e38:	422580a0 	.word	0x422580a0

08005e3c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08c      	sub	sp, #48	; 0x30
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d107      	bne.n	8005e64 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0c9      	b.n	8005ff8 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	f040 80c2 	bne.w	8005ff6 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	441a      	add	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d907      	bls.n	8005e96 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e0b0      	b.n	8005ff8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2203      	movs	r2, #3
 8005e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8005eb4:	f043 0302 	orr.w	r3, r3, #2
 8005eb8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	4a50      	ldr	r2, [pc, #320]	; (8006000 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8005ec0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	4a4f      	ldr	r2, [pc, #316]	; (8006004 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8005ec8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	2200      	movs	r2, #0
 8005ed0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3380      	adds	r3, #128	; 0x80
 8005edc:	4619      	mov	r1, r3
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	025b      	lsls	r3, r3, #9
 8005ee4:	089b      	lsrs	r3, r3, #2
 8005ee6:	f7fc fed7 	bl	8002c98 <HAL_DMA_Start_IT>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d017      	beq.n	8005f20 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005efe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a40      	ldr	r2, [pc, #256]	; (8006008 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e06b      	b.n	8005ff8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005f20:	4b3a      	ldr	r3, [pc, #232]	; (800600c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d002      	beq.n	8005f34 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	025b      	lsls	r3, r3, #9
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f003 f855 	bl	8008fec <SDMMC_CmdBlockLength>
 8005f42:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00f      	beq.n	8005f6a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a2e      	ldr	r2, [pc, #184]	; (8006008 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e046      	b.n	8005ff8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	025b      	lsls	r3, r3, #9
 8005f74:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005f76:	2390      	movs	r3, #144	; 0x90
 8005f78:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005f82:	2301      	movs	r3, #1
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f107 0210 	add.w	r2, r7, #16
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f002 ffff 	bl	8008f94 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d90a      	bls.n	8005fb2 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2282      	movs	r2, #130	; 0x82
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f003 f863 	bl	8009074 <SDMMC_CmdReadMultiBlock>
 8005fae:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005fb0:	e009      	b.n	8005fc6 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2281      	movs	r2, #129	; 0x81
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f003 f836 	bl	8009030 <SDMMC_CmdReadSingleBlock>
 8005fc4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0d      	ldr	r2, [pc, #52]	; (8006008 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e002      	b.n	8005ff8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e000      	b.n	8005ff8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8005ff6:	2302      	movs	r3, #2
  }
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3730      	adds	r7, #48	; 0x30
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	08006a13 	.word	0x08006a13
 8006004:	08006a85 	.word	0x08006a85
 8006008:	004005ff 	.word	0x004005ff
 800600c:	4225858c 	.word	0x4225858c

08006010 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08c      	sub	sp, #48	; 0x30
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d107      	bne.n	8006038 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0ce      	b.n	80061d6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	f040 80c7 	bne.w	80061d4 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800604c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	441a      	add	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006056:	429a      	cmp	r2, r3
 8006058:	d907      	bls.n	800606a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e0b5      	b.n	80061d6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2203      	movs	r2, #3
 800606e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006088:	f043 0302 	orr.w	r3, r3, #2
 800608c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	4a53      	ldr	r2, [pc, #332]	; (80061e0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006094:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609a:	4a52      	ldr	r2, [pc, #328]	; (80061e4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800609c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a2:	2200      	movs	r2, #0
 80060a4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d002      	beq.n	80060b4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80060ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b0:	025b      	lsls	r3, r3, #9
 80060b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060bc:	4618      	mov	r0, r3
 80060be:	f002 ff95 	bl	8008fec <SDMMC_CmdBlockLength>
 80060c2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00f      	beq.n	80060ea <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a46      	ldr	r2, [pc, #280]	; (80061e8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	431a      	orrs	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e075      	b.n	80061d6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d90a      	bls.n	8006106 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	22a0      	movs	r2, #160	; 0xa0
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060fc:	4618      	mov	r0, r3
 80060fe:	f002 fffd 	bl	80090fc <SDMMC_CmdWriteMultiBlock>
 8006102:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006104:	e009      	b.n	800611a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2290      	movs	r2, #144	; 0x90
 800610a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006112:	4618      	mov	r0, r3
 8006114:	f002 ffd0 	bl	80090b8 <SDMMC_CmdWriteSingleBlock>
 8006118:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d012      	beq.n	8006146 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a30      	ldr	r2, [pc, #192]	; (80061e8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006126:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	431a      	orrs	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e047      	b.n	80061d6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006146:	4b29      	ldr	r3, [pc, #164]	; (80061ec <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3380      	adds	r3, #128	; 0x80
 8006158:	461a      	mov	r2, r3
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	025b      	lsls	r3, r3, #9
 800615e:	089b      	lsrs	r3, r3, #2
 8006160:	f7fc fd9a 	bl	8002c98 <HAL_DMA_Start_IT>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d01c      	beq.n	80061a4 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	6812      	ldr	r2, [r2, #0]
 8006174:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006178:	f023 0302 	bic.w	r3, r3, #2
 800617c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a19      	ldr	r2, [pc, #100]	; (80061e8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e018      	b.n	80061d6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061a4:	f04f 33ff 	mov.w	r3, #4294967295
 80061a8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	025b      	lsls	r3, r3, #9
 80061ae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80061b0:	2390      	movs	r3, #144	; 0x90
 80061b2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80061bc:	2301      	movs	r3, #1
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f107 0210 	add.w	r2, r7, #16
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f002 fee2 	bl	8008f94 <SDIO_ConfigData>

      return HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	e000      	b.n	80061d6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80061d4:	2302      	movs	r3, #2
  }
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3730      	adds	r7, #48	; 0x30
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	080069e9 	.word	0x080069e9
 80061e4:	08006a85 	.word	0x08006a85
 80061e8:	004005ff 	.word	0x004005ff
 80061ec:	4225858c 	.word	0x4225858c

080061f0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <HAL_SD_IRQHandler+0x2e>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 ffd8 	bl	80071cc <SD_Read_IT>
 800621c:	e165      	b.n	80064ea <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 808f 	beq.w	800634c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006236:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6812      	ldr	r2, [r2, #0]
 8006242:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8006246:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800624a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0201 	bic.w	r2, r2, #1
 800625a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d039      	beq.n	80062da <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d104      	bne.n	800627a <HAL_SD_IRQHandler+0x8a>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d011      	beq.n	800629e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f002 ff5e 	bl	8009140 <SDMMC_CmdStopTransfer>
 8006284:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f92f 	bl	80064fc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80062a6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d104      	bne.n	80062ca <HAL_SD_IRQHandler+0xda>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f003 fe6a 	bl	8009fa4 <HAL_SD_RxCpltCallback>
 80062d0:	e10b      	b.n	80064ea <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f003 fe5c 	bl	8009f90 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80062d8:	e107      	b.n	80064ea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8102 	beq.w	80064ea <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d011      	beq.n	8006314 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f002 ff23 	bl	8009140 <SDMMC_CmdStopTransfer>
 80062fa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d008      	beq.n	8006314 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f8f4 	bl	80064fc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 80e5 	bne.w	80064ea <HAL_SD_IRQHandler+0x2fa>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	f040 80df 	bne.w	80064ea <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0208 	bic.w	r2, r2, #8
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f003 fe23 	bl	8009f90 <HAL_SD_TxCpltCallback>
}
 800634a:	e0ce      	b.n	80064ea <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <HAL_SD_IRQHandler+0x17c>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 ff82 	bl	800726e <SD_Write_IT>
 800636a:	e0be      	b.n	80064ea <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006372:	f240 233a 	movw	r3, #570	; 0x23a
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 80b6 	beq.w	80064ea <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	f043 0202 	orr.w	r2, r3, #2
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d005      	beq.n	80063b2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	f043 0208 	orr.w	r2, r3, #8
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	f043 0220 	orr.w	r2, r3, #32
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	f043 0210 	orr.w	r2, r3, #16
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	f043 0208 	orr.w	r2, r3, #8
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f240 723a 	movw	r2, #1850	; 0x73a
 8006408:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006418:	f023 0302 	bic.w	r3, r3, #2
 800641c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f002 fe8c 	bl	8009140 <SDMMC_CmdStopTransfer>
 8006428:	4602      	mov	r2, r0
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f855 	bl	80064fc <HAL_SD_ErrorCallback>
}
 8006452:	e04a      	b.n	80064ea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645a:	2b00      	cmp	r3, #0
 800645c:	d045      	beq.n	80064ea <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d104      	bne.n	8006472 <HAL_SD_IRQHandler+0x282>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	d011      	beq.n	8006496 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006476:	4a1f      	ldr	r2, [pc, #124]	; (80064f4 <HAL_SD_IRQHandler+0x304>)
 8006478:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	4618      	mov	r0, r3
 8006480:	f7fc fc62 	bl	8002d48 <HAL_DMA_Abort_IT>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d02f      	beq.n	80064ea <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fb4a 	bl	8006b28 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006494:	e029      	b.n	80064ea <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <HAL_SD_IRQHandler+0x2ba>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d011      	beq.n	80064ce <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	4a12      	ldr	r2, [pc, #72]	; (80064f8 <HAL_SD_IRQHandler+0x308>)
 80064b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fc fc46 	bl	8002d48 <HAL_DMA_Abort_IT>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d013      	beq.n	80064ea <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fb65 	bl	8006b96 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80064cc:	e00d      	b.n	80064ea <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f003 fd4a 	bl	8009f7c <HAL_SD_AbortCallback>
}
 80064e8:	e7ff      	b.n	80064ea <HAL_SD_IRQHandler+0x2fa>
 80064ea:	bf00      	nop
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	08006b29 	.word	0x08006b29
 80064f8:	08006b97 	.word	0x08006b97

080064fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800651e:	0f9b      	lsrs	r3, r3, #30
 8006520:	b2da      	uxtb	r2, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800652a:	0e9b      	lsrs	r3, r3, #26
 800652c:	b2db      	uxtb	r3, r3
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	b2da      	uxtb	r2, r3
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800653c:	0e1b      	lsrs	r3, r3, #24
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f003 0303 	and.w	r3, r3, #3
 8006544:	b2da      	uxtb	r2, r3
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800654e:	0c1b      	lsrs	r3, r3, #16
 8006550:	b2da      	uxtb	r2, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800655a:	0a1b      	lsrs	r3, r3, #8
 800655c:	b2da      	uxtb	r2, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006566:	b2da      	uxtb	r2, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006570:	0d1b      	lsrs	r3, r3, #20
 8006572:	b29a      	uxth	r2, r3
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	b2db      	uxtb	r3, r3
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	b2da      	uxtb	r2, r3
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800658e:	0bdb      	lsrs	r3, r3, #15
 8006590:	b2db      	uxtb	r3, r3
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	b2da      	uxtb	r2, r3
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065a0:	0b9b      	lsrs	r3, r3, #14
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b2:	0b5b      	lsrs	r3, r3, #13
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065c4:	0b1b      	lsrs	r3, r3, #12
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2200      	movs	r2, #0
 80065d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d163      	bne.n	80066a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065e4:	009a      	lsls	r2, r3, #2
 80065e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065ea:	4013      	ands	r3, r2
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80065f0:	0f92      	lsrs	r2, r2, #30
 80065f2:	431a      	orrs	r2, r3
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fc:	0edb      	lsrs	r3, r3, #27
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	b2da      	uxtb	r2, r3
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660e:	0e1b      	lsrs	r3, r3, #24
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	b2da      	uxtb	r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006620:	0d5b      	lsrs	r3, r3, #21
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	b2da      	uxtb	r2, r3
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006632:	0c9b      	lsrs	r3, r3, #18
 8006634:	b2db      	uxtb	r3, r3
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	b2da      	uxtb	r2, r3
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006644:	0bdb      	lsrs	r3, r3, #15
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	b2da      	uxtb	r2, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	7e1b      	ldrb	r3, [r3, #24]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	3302      	adds	r3, #2
 8006668:	2201      	movs	r2, #1
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006672:	fb02 f203 	mul.w	r2, r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	7a1b      	ldrb	r3, [r3, #8]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	f003 030f 	and.w	r3, r3, #15
 8006684:	2201      	movs	r2, #1
 8006686:	409a      	lsls	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006694:	0a52      	lsrs	r2, r2, #9
 8006696:	fb02 f203 	mul.w	r2, r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a4:	661a      	str	r2, [r3, #96]	; 0x60
 80066a6:	e031      	b.n	800670c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d11d      	bne.n	80066ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b4:	041b      	lsls	r3, r3, #16
 80066b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066be:	0c1b      	lsrs	r3, r3, #16
 80066c0:	431a      	orrs	r2, r3
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	3301      	adds	r3, #1
 80066cc:	029a      	lsls	r2, r3, #10
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	661a      	str	r2, [r3, #96]	; 0x60
 80066ea:	e00f      	b.n	800670c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a58      	ldr	r2, [pc, #352]	; (8006854 <HAL_SD_GetCardCSD+0x344>)
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e09d      	b.n	8006848 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006710:	0b9b      	lsrs	r3, r3, #14
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	b2da      	uxtb	r2, r3
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006722:	09db      	lsrs	r3, r3, #7
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800672a:	b2da      	uxtb	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006734:	b2db      	uxtb	r3, r3
 8006736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800673a:	b2da      	uxtb	r2, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006744:	0fdb      	lsrs	r3, r3, #31
 8006746:	b2da      	uxtb	r2, r3
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006750:	0f5b      	lsrs	r3, r3, #29
 8006752:	b2db      	uxtb	r3, r3
 8006754:	f003 0303 	and.w	r3, r3, #3
 8006758:	b2da      	uxtb	r2, r3
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	0e9b      	lsrs	r3, r3, #26
 8006764:	b2db      	uxtb	r3, r3
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	b2da      	uxtb	r2, r3
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006774:	0d9b      	lsrs	r3, r3, #22
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	b2da      	uxtb	r2, r3
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006786:	0d5b      	lsrs	r3, r3, #21
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	b2da      	uxtb	r2, r3
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a2:	0c1b      	lsrs	r3, r3, #16
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b6:	0bdb      	lsrs	r3, r3, #15
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ca:	0b9b      	lsrs	r3, r3, #14
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067de:	0b5b      	lsrs	r3, r3, #13
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f2:	0b1b      	lsrs	r3, r3, #12
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006806:	0a9b      	lsrs	r3, r3, #10
 8006808:	b2db      	uxtb	r3, r3
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	b2da      	uxtb	r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681a:	0a1b      	lsrs	r3, r3, #8
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	b2da      	uxtb	r2, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	085b      	lsrs	r3, r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006836:	b2da      	uxtb	r2, r3
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	004005ff 	.word	0x004005ff

08006858 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80068b0:	b5b0      	push	{r4, r5, r7, lr}
 80068b2:	b08e      	sub	sp, #56	; 0x38
 80068b4:	af04      	add	r7, sp, #16
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2203      	movs	r2, #3
 80068be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d02e      	beq.n	8006928 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d0:	d106      	bne.n	80068e0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
 80068de:	e029      	b.n	8006934 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e6:	d10a      	bne.n	80068fe <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fb0f 	bl	8006f0c <SD_WideBus_Enable>
 80068ee:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	639a      	str	r2, [r3, #56]	; 0x38
 80068fc:	e01a      	b.n	8006934 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fb4c 	bl	8006fa2 <SD_WideBus_Disable>
 800690a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	639a      	str	r2, [r3, #56]	; 0x38
 8006918:	e00c      	b.n	8006934 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	639a      	str	r2, [r3, #56]	; 0x38
 8006926:	e005      	b.n	8006934 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	2b00      	cmp	r3, #0
 800693a:	d009      	beq.n	8006950 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a18      	ldr	r2, [pc, #96]	; (80069a4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006942:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e024      	b.n	800699a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681d      	ldr	r5, [r3, #0]
 8006976:	466c      	mov	r4, sp
 8006978:	f107 0318 	add.w	r3, r7, #24
 800697c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006980:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006984:	f107 030c 	add.w	r3, r7, #12
 8006988:	cb0e      	ldmia	r3, {r1, r2, r3}
 800698a:	4628      	mov	r0, r5
 800698c:	f002 fa52 	bl	8008e34 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3728      	adds	r7, #40	; 0x28
 800699e:	46bd      	mov	sp, r7
 80069a0:	bdb0      	pop	{r4, r5, r7, pc}
 80069a2:	bf00      	nop
 80069a4:	004005ff 	.word	0x004005ff

080069a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80069b4:	f107 030c 	add.w	r3, r7, #12
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa7e 	bl	8006ebc <SD_SendStatus>
 80069c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	0a5b      	lsrs	r3, r3, #9
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80069de:	693b      	ldr	r3, [r7, #16]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a04:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	2b82      	cmp	r3, #130	; 0x82
 8006a26:	d111      	bne.n	8006a4c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f002 fb87 	bl	8009140 <SDMMC_CmdStopTransfer>
 8006a32:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d008      	beq.n	8006a4c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	431a      	orrs	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7ff fd58 	bl	80064fc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0208 	bic.w	r2, r2, #8
 8006a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a64:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f003 fa95 	bl	8009fa4 <HAL_SD_RxCpltCallback>
#endif
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fc fb12 	bl	80030bc <HAL_DMA_GetError>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d03e      	beq.n	8006b1c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aac:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d002      	beq.n	8006aba <SD_DMAError+0x36>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d12d      	bne.n	8006b16 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a19      	ldr	r2, [pc, #100]	; (8006b24 <SD_DMAError+0xa0>)
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006ad0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006ade:	6978      	ldr	r0, [r7, #20]
 8006ae0:	f7ff ff62 	bl	80069a8 <HAL_SD_GetCardState>
 8006ae4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b06      	cmp	r3, #6
 8006aea:	d002      	beq.n	8006af2 <SD_DMAError+0x6e>
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b05      	cmp	r3, #5
 8006af0:	d10a      	bne.n	8006b08 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f002 fb22 	bl	8009140 <SDMMC_CmdStopTransfer>
 8006afc:	4602      	mov	r2, r0
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b02:	431a      	orrs	r2, r3
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2200      	movs	r2, #0
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006b16:	6978      	ldr	r0, [r7, #20]
 8006b18:	f7ff fcf0 	bl	80064fc <HAL_SD_ErrorCallback>
#endif
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	004005ff 	.word	0x004005ff

08006b28 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b3e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7ff ff31 	bl	80069a8 <HAL_SD_GetCardState>
 8006b46:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b06      	cmp	r3, #6
 8006b5a:	d002      	beq.n	8006b62 <SD_DMATxAbort+0x3a>
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b05      	cmp	r3, #5
 8006b60:	d10a      	bne.n	8006b78 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f002 faea 	bl	8009140 <SDMMC_CmdStopTransfer>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b72:	431a      	orrs	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d103      	bne.n	8006b88 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f003 f9fb 	bl	8009f7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006b86:	e002      	b.n	8006b8e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f7ff fcb7 	bl	80064fc <HAL_SD_ErrorCallback>
}
 8006b8e:	bf00      	nop
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f240 523a 	movw	r2, #1338	; 0x53a
 8006bac:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f7ff fefa 	bl	80069a8 <HAL_SD_GetCardState>
 8006bb4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b06      	cmp	r3, #6
 8006bc8:	d002      	beq.n	8006bd0 <SD_DMARxAbort+0x3a>
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b05      	cmp	r3, #5
 8006bce:	d10a      	bne.n	8006be6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f002 fab3 	bl	8009140 <SDMMC_CmdStopTransfer>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	431a      	orrs	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d103      	bne.n	8006bf6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f003 f9c4 	bl	8009f7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006bf4:	e002      	b.n	8006bfc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7ff fc80 	bl	80064fc <HAL_SD_ErrorCallback>
}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c04:	b5b0      	push	{r4, r5, r7, lr}
 8006c06:	b094      	sub	sp, #80	; 0x50
 8006c08:	af04      	add	r7, sp, #16
 8006c0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f002 f965 	bl	8008ee4 <SDIO_GetPowerState>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006c24:	e0b7      	b.n	8006d96 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d02f      	beq.n	8006c8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f002 fb8e 	bl	8009354 <SDMMC_CmdSendCID>
 8006c38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <SD_InitCard+0x40>
    {
      return errorstate;
 8006c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c42:	e0a8      	b.n	8006d96 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f002 f98f 	bl	8008f6e <SDIO_GetResponse>
 8006c50:	4602      	mov	r2, r0
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2104      	movs	r1, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f002 f986 	bl	8008f6e <SDIO_GetResponse>
 8006c62:	4602      	mov	r2, r0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2108      	movs	r1, #8
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f002 f97d 	bl	8008f6e <SDIO_GetResponse>
 8006c74:	4602      	mov	r2, r0
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	210c      	movs	r1, #12
 8006c80:	4618      	mov	r0, r3
 8006c82:	f002 f974 	bl	8008f6e <SDIO_GetResponse>
 8006c86:	4602      	mov	r2, r0
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d00d      	beq.n	8006cb2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f107 020e 	add.w	r2, r7, #14
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f002 fb94 	bl	80093ce <SDMMC_CmdSetRelAdd>
 8006ca6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <SD_InitCard+0xae>
    {
      return errorstate;
 8006cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb0:	e071      	b.n	8006d96 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d036      	beq.n	8006d28 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006cba:	89fb      	ldrh	r3, [r7, #14]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cca:	041b      	lsls	r3, r3, #16
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4610      	mov	r0, r2
 8006cd0:	f002 fb5e 	bl	8009390 <SDMMC_CmdSendCSD>
 8006cd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cde:	e05a      	b.n	8006d96 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f002 f941 	bl	8008f6e <SDIO_GetResponse>
 8006cec:	4602      	mov	r2, r0
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2104      	movs	r1, #4
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f002 f938 	bl	8008f6e <SDIO_GetResponse>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2108      	movs	r1, #8
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f002 f92f 	bl	8008f6e <SDIO_GetResponse>
 8006d10:	4602      	mov	r2, r0
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	210c      	movs	r1, #12
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f002 f926 	bl	8008f6e <SDIO_GetResponse>
 8006d22:	4602      	mov	r2, r0
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2104      	movs	r1, #4
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f002 f91d 	bl	8008f6e <SDIO_GetResponse>
 8006d34:	4603      	mov	r3, r0
 8006d36:	0d1a      	lsrs	r2, r3, #20
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006d3c:	f107 0310 	add.w	r3, r7, #16
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff fbe4 	bl	8006510 <HAL_SD_GetCardCSD>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d52:	e020      	b.n	8006d96 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6819      	ldr	r1, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	f04f 0400 	mov.w	r4, #0
 8006d62:	461a      	mov	r2, r3
 8006d64:	4623      	mov	r3, r4
 8006d66:	4608      	mov	r0, r1
 8006d68:	f002 fa0c 	bl	8009184 <SDMMC_CmdSelDesel>
 8006d6c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <SD_InitCard+0x174>
  {
    return errorstate;
 8006d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d76:	e00e      	b.n	8006d96 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681d      	ldr	r5, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	466c      	mov	r4, sp
 8006d80:	f103 0210 	add.w	r2, r3, #16
 8006d84:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f002 f850 	bl	8008e34 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3740      	adds	r7, #64	; 0x40
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006da0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	2300      	movs	r3, #0
 8006db2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f002 fa06 	bl	80091ca <SDMMC_CmdGoIdleState>
 8006dbe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <SD_PowerON+0x2a>
  {
    return errorstate;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	e072      	b.n	8006eb0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f002 fa19 	bl	8009206 <SDMMC_CmdOperCond>
 8006dd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00d      	beq.n	8006df8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f002 f9ef 	bl	80091ca <SDMMC_CmdGoIdleState>
 8006dec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <SD_PowerON+0x5e>
    {
      return errorstate;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	e05b      	b.n	8006eb0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d137      	bne.n	8006e76 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f002 fa19 	bl	8009244 <SDMMC_CmdAppCommand>
 8006e12:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d02d      	beq.n	8006e76 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e1e:	e047      	b.n	8006eb0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2100      	movs	r1, #0
 8006e26:	4618      	mov	r0, r3
 8006e28:	f002 fa0c 	bl	8009244 <SDMMC_CmdAppCommand>
 8006e2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <SD_PowerON+0x98>
    {
      return errorstate;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	e03b      	b.n	8006eb0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	491e      	ldr	r1, [pc, #120]	; (8006eb8 <SD_PowerON+0x118>)
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f002 fa22 	bl	8009288 <SDMMC_CmdAppOperCommand>
 8006e44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e50:	e02e      	b.n	8006eb0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2100      	movs	r1, #0
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f002 f888 	bl	8008f6e <SDIO_GetResponse>
 8006e5e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	0fdb      	lsrs	r3, r3, #31
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <SD_PowerON+0xcc>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <SD_PowerON+0xce>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	613b      	str	r3, [r7, #16]

    count++;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	3301      	adds	r3, #1
 8006e74:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d802      	bhi.n	8006e86 <SD_PowerON+0xe6>
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0cc      	beq.n	8006e20 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d902      	bls.n	8006e96 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e94:	e00c      	b.n	8006eb0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	645a      	str	r2, [r3, #68]	; 0x44
 8006ea6:	e002      	b.n	8006eae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	c1100000 	.word	0xc1100000

08006ebc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006ecc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ed0:	e018      	b.n	8006f04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eda:	041b      	lsls	r3, r3, #16
 8006edc:	4619      	mov	r1, r3
 8006ede:	4610      	mov	r0, r2
 8006ee0:	f002 fa96 	bl	8009410 <SDMMC_CmdSendStatus>
 8006ee4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	e009      	b.n	8006f04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f002 f839 	bl	8008f6e <SDIO_GetResponse>
 8006efc:	4602      	mov	r2, r0
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2100      	movs	r1, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f002 f823 	bl	8008f6e <SDIO_GetResponse>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f32:	d102      	bne.n	8006f3a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f38:	e02f      	b.n	8006f9a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f3a:	f107 030c 	add.w	r3, r7, #12
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f879 	bl	8007038 <SD_FindSCR>
 8006f46:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	e023      	b.n	8006f9a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01c      	beq.n	8006f96 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f64:	041b      	lsls	r3, r3, #16
 8006f66:	4619      	mov	r1, r3
 8006f68:	4610      	mov	r0, r2
 8006f6a:	f002 f96b 	bl	8009244 <SDMMC_CmdAppCommand>
 8006f6e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	e00f      	b.n	8006f9a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2102      	movs	r1, #2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f002 f9a4 	bl	80092ce <SDMMC_CmdBusWidth>
 8006f86:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	e003      	b.n	8006f9a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e001      	b.n	8006f9a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b086      	sub	sp, #24
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 ffd8 	bl	8008f6e <SDIO_GetResponse>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fc8:	d102      	bne.n	8006fd0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fce:	e02f      	b.n	8007030 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006fd0:	f107 030c 	add.w	r3, r7, #12
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f82e 	bl	8007038 <SD_FindSCR>
 8006fdc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	e023      	b.n	8007030 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01c      	beq.n	800702c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffa:	041b      	lsls	r3, r3, #16
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f002 f920 	bl	8009244 <SDMMC_CmdAppCommand>
 8007004:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	e00f      	b.n	8007030 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f002 f959 	bl	80092ce <SDMMC_CmdBusWidth>
 800701c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	e003      	b.n	8007030 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007028:	2300      	movs	r3, #0
 800702a:	e001      	b.n	8007030 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800702c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007038:	b590      	push	{r4, r7, lr}
 800703a:	b08f      	sub	sp, #60	; 0x3c
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007042:	f7fb fc6b 	bl	800291c <HAL_GetTick>
 8007046:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800704c:	2300      	movs	r3, #0
 800704e:	60bb      	str	r3, [r7, #8]
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2108      	movs	r1, #8
 800705e:	4618      	mov	r0, r3
 8007060:	f001 ffc4 	bl	8008fec <SDMMC_CmdBlockLength>
 8007064:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <SD_FindSCR+0x38>
  {
    return errorstate;
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	e0a9      	b.n	80071c4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f002 f8e1 	bl	8009244 <SDMMC_CmdAppCommand>
 8007082:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <SD_FindSCR+0x56>
  {
    return errorstate;
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	e09a      	b.n	80071c4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800708e:	f04f 33ff 	mov.w	r3, #4294967295
 8007092:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007094:	2308      	movs	r3, #8
 8007096:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007098:	2330      	movs	r3, #48	; 0x30
 800709a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800709c:	2302      	movs	r3, #2
 800709e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f107 0210 	add.w	r2, r7, #16
 80070b0:	4611      	mov	r1, r2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 ff6e 	bl	8008f94 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f002 f928 	bl	8009312 <SDMMC_CmdSendSCR>
 80070c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d022      	beq.n	8007110 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	e07a      	b.n	80071c4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00e      	beq.n	80070fa <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6819      	ldr	r1, [r3, #0]
 80070e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	f107 0208 	add.w	r2, r7, #8
 80070e8:	18d4      	adds	r4, r2, r3
 80070ea:	4608      	mov	r0, r1
 80070ec:	f001 fecd 	bl	8008e8a <SDIO_ReadFIFO>
 80070f0:	4603      	mov	r3, r0
 80070f2:	6023      	str	r3, [r4, #0]
      index++;
 80070f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f6:	3301      	adds	r3, #1
 80070f8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80070fa:	f7fb fc0f 	bl	800291c <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007108:	d102      	bne.n	8007110 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800710a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800710e:	e059      	b.n	80071c4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007116:	f240 432a 	movw	r3, #1066	; 0x42a
 800711a:	4013      	ands	r3, r2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0d6      	beq.n	80070ce <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2208      	movs	r2, #8
 8007134:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007136:	2308      	movs	r3, #8
 8007138:	e044      	b.n	80071c4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d005      	beq.n	8007154 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2202      	movs	r2, #2
 800714e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007150:	2302      	movs	r3, #2
 8007152:	e037      	b.n	80071c4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2220      	movs	r2, #32
 8007168:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800716a:	2320      	movs	r3, #32
 800716c:	e02a      	b.n	80071c4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f240 523a 	movw	r2, #1338	; 0x53a
 8007176:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	061a      	lsls	r2, r3, #24
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	021b      	lsls	r3, r3, #8
 8007180:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007184:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	0a1b      	lsrs	r3, r3, #8
 800718a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800718e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	0e1b      	lsrs	r3, r3, #24
 8007194:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	601a      	str	r2, [r3, #0]
    scr++;
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	3304      	adds	r3, #4
 800719e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	061a      	lsls	r2, r3, #24
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071ac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	0a1b      	lsrs	r3, r3, #8
 80071b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071b6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	0e1b      	lsrs	r3, r3, #24
 80071bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	373c      	adds	r7, #60	; 0x3c
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd90      	pop	{r4, r7, pc}

080071cc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071de:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d03f      	beq.n	8007266 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80071e6:	2300      	movs	r3, #0
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	e033      	b.n	8007254 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f001 fe4a 	bl	8008e8a <SDIO_ReadFIFO>
 80071f6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3301      	adds	r3, #1
 8007204:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	3b01      	subs	r3, #1
 800720a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	0a1b      	lsrs	r3, r3, #8
 8007210:	b2da      	uxtb	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3301      	adds	r3, #1
 800721a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	3b01      	subs	r3, #1
 8007220:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	0c1b      	lsrs	r3, r3, #16
 8007226:	b2da      	uxtb	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3301      	adds	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	3b01      	subs	r3, #1
 8007236:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	0e1b      	lsrs	r3, r3, #24
 800723c:	b2da      	uxtb	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3301      	adds	r3, #1
 8007246:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	3b01      	subs	r3, #1
 800724c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	3301      	adds	r3, #1
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2b07      	cmp	r3, #7
 8007258:	d9c8      	bls.n	80071ec <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007266:	bf00      	nop
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b086      	sub	sp, #24
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d043      	beq.n	8007310 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007288:	2300      	movs	r3, #0
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	e037      	b.n	80072fe <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3301      	adds	r3, #1
 8007298:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	3b01      	subs	r3, #1
 800729e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	021a      	lsls	r2, r3, #8
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3301      	adds	r3, #1
 80072b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	041a      	lsls	r2, r3, #16
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3301      	adds	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	061a      	lsls	r2, r3, #24
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4313      	orrs	r3, r2
 80072da:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3301      	adds	r3, #1
 80072e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f107 0208 	add.w	r2, r7, #8
 80072f0:	4611      	mov	r1, r2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f001 fdd6 	bl	8008ea4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	3301      	adds	r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b07      	cmp	r3, #7
 8007302:	d9c4      	bls.n	800728e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007310:	bf00      	nop
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e01d      	b.n	8007366 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d106      	bne.n	8007344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fa fea8 	bl	8002094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3304      	adds	r3, #4
 8007354:	4619      	mov	r1, r3
 8007356:	4610      	mov	r0, r2
 8007358:	f000 fb10 	bl	800797c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0201 	orr.w	r2, r2, #1
 8007384:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b06      	cmp	r3, #6
 8007396:	d007      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0201 	orr.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e01d      	b.n	8007404 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d106      	bne.n	80073e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f815 	bl	800740c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2202      	movs	r2, #2
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3304      	adds	r3, #4
 80073f2:	4619      	mov	r1, r3
 80073f4:	4610      	mov	r0, r2
 80073f6:	f000 fac1 	bl	800797c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b02      	cmp	r3, #2
 8007434:	d122      	bne.n	800747c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b02      	cmp	r3, #2
 8007442:	d11b      	bne.n	800747c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0202 	mvn.w	r2, #2
 800744c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fa6b 	bl	800793e <HAL_TIM_IC_CaptureCallback>
 8007468:	e005      	b.n	8007476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa5d 	bl	800792a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fa6e 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f003 0304 	and.w	r3, r3, #4
 8007486:	2b04      	cmp	r3, #4
 8007488:	d122      	bne.n	80074d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b04      	cmp	r3, #4
 8007496:	d11b      	bne.n	80074d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0204 	mvn.w	r2, #4
 80074a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2202      	movs	r2, #2
 80074a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fa41 	bl	800793e <HAL_TIM_IC_CaptureCallback>
 80074bc:	e005      	b.n	80074ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa33 	bl	800792a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fa44 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b08      	cmp	r3, #8
 80074dc:	d122      	bne.n	8007524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d11b      	bne.n	8007524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0208 	mvn.w	r2, #8
 80074f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2204      	movs	r2, #4
 80074fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa17 	bl	800793e <HAL_TIM_IC_CaptureCallback>
 8007510:	e005      	b.n	800751e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa09 	bl	800792a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fa1a 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0310 	and.w	r3, r3, #16
 800752e:	2b10      	cmp	r3, #16
 8007530:	d122      	bne.n	8007578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b10      	cmp	r3, #16
 800753e:	d11b      	bne.n	8007578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0210 	mvn.w	r2, #16
 8007548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2208      	movs	r2, #8
 800754e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f9ed 	bl	800793e <HAL_TIM_IC_CaptureCallback>
 8007564:	e005      	b.n	8007572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f9df 	bl	800792a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f9f0 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b01      	cmp	r3, #1
 8007584:	d10e      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b01      	cmp	r3, #1
 8007592:	d107      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0201 	mvn.w	r2, #1
 800759c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7fa f896 	bl	80016d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ae:	2b80      	cmp	r3, #128	; 0x80
 80075b0:	d10e      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075bc:	2b80      	cmp	r3, #128	; 0x80
 80075be:	d107      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fd46 	bl	800805c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d10e      	bne.n	80075fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e8:	2b40      	cmp	r3, #64	; 0x40
 80075ea:	d107      	bne.n	80075fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f9b5 	bl	8007966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b20      	cmp	r3, #32
 8007608:	d10e      	bne.n	8007628 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b20      	cmp	r3, #32
 8007616:	d107      	bne.n	8007628 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f06f 0220 	mvn.w	r2, #32
 8007620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fd10 	bl	8008048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007646:	2302      	movs	r3, #2
 8007648:	e0b4      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2202      	movs	r2, #2
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b0c      	cmp	r3, #12
 800765e:	f200 809f 	bhi.w	80077a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007662:	a201      	add	r2, pc, #4	; (adr r2, 8007668 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007668:	0800769d 	.word	0x0800769d
 800766c:	080077a1 	.word	0x080077a1
 8007670:	080077a1 	.word	0x080077a1
 8007674:	080077a1 	.word	0x080077a1
 8007678:	080076dd 	.word	0x080076dd
 800767c:	080077a1 	.word	0x080077a1
 8007680:	080077a1 	.word	0x080077a1
 8007684:	080077a1 	.word	0x080077a1
 8007688:	0800771f 	.word	0x0800771f
 800768c:	080077a1 	.word	0x080077a1
 8007690:	080077a1 	.word	0x080077a1
 8007694:	080077a1 	.word	0x080077a1
 8007698:	0800775f 	.word	0x0800775f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fa0a 	bl	8007abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0208 	orr.w	r2, r2, #8
 80076b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0204 	bic.w	r2, r2, #4
 80076c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6999      	ldr	r1, [r3, #24]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	619a      	str	r2, [r3, #24]
      break;
 80076da:	e062      	b.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fa5a 	bl	8007b9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699a      	ldr	r2, [r3, #24]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6999      	ldr	r1, [r3, #24]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	021a      	lsls	r2, r3, #8
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	619a      	str	r2, [r3, #24]
      break;
 800771c:	e041      	b.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68b9      	ldr	r1, [r7, #8]
 8007724:	4618      	mov	r0, r3
 8007726:	f000 faaf 	bl	8007c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69da      	ldr	r2, [r3, #28]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f042 0208 	orr.w	r2, r2, #8
 8007738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69da      	ldr	r2, [r3, #28]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0204 	bic.w	r2, r2, #4
 8007748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69d9      	ldr	r1, [r3, #28]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	430a      	orrs	r2, r1
 800775a:	61da      	str	r2, [r3, #28]
      break;
 800775c:	e021      	b.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	4618      	mov	r0, r3
 8007766:	f000 fb03 	bl	8007d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69da      	ldr	r2, [r3, #28]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69d9      	ldr	r1, [r3, #28]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	021a      	lsls	r2, r3, #8
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	61da      	str	r2, [r3, #28]
      break;
 800779e:	e000      	b.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80077a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_TIM_ConfigClockSource+0x18>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e0a6      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x166>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	d067      	beq.n	80078dc <HAL_TIM_ConfigClockSource+0x120>
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	d80b      	bhi.n	8007828 <HAL_TIM_ConfigClockSource+0x6c>
 8007810:	2b10      	cmp	r3, #16
 8007812:	d073      	beq.n	80078fc <HAL_TIM_ConfigClockSource+0x140>
 8007814:	2b10      	cmp	r3, #16
 8007816:	d802      	bhi.n	800781e <HAL_TIM_ConfigClockSource+0x62>
 8007818:	2b00      	cmp	r3, #0
 800781a:	d06f      	beq.n	80078fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800781c:	e078      	b.n	8007910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800781e:	2b20      	cmp	r3, #32
 8007820:	d06c      	beq.n	80078fc <HAL_TIM_ConfigClockSource+0x140>
 8007822:	2b30      	cmp	r3, #48	; 0x30
 8007824:	d06a      	beq.n	80078fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007826:	e073      	b.n	8007910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007828:	2b70      	cmp	r3, #112	; 0x70
 800782a:	d00d      	beq.n	8007848 <HAL_TIM_ConfigClockSource+0x8c>
 800782c:	2b70      	cmp	r3, #112	; 0x70
 800782e:	d804      	bhi.n	800783a <HAL_TIM_ConfigClockSource+0x7e>
 8007830:	2b50      	cmp	r3, #80	; 0x50
 8007832:	d033      	beq.n	800789c <HAL_TIM_ConfigClockSource+0xe0>
 8007834:	2b60      	cmp	r3, #96	; 0x60
 8007836:	d041      	beq.n	80078bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007838:	e06a      	b.n	8007910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800783a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800783e:	d066      	beq.n	800790e <HAL_TIM_ConfigClockSource+0x152>
 8007840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007844:	d017      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007846:	e063      	b.n	8007910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6818      	ldr	r0, [r3, #0]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	6899      	ldr	r1, [r3, #8]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f000 fb5a 	bl	8007f10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800786a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	609a      	str	r2, [r3, #8]
      break;
 8007874:	e04c      	b.n	8007910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	6899      	ldr	r1, [r3, #8]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f000 fb43 	bl	8007f10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007898:	609a      	str	r2, [r3, #8]
      break;
 800789a:	e039      	b.n	8007910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6818      	ldr	r0, [r3, #0]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	6859      	ldr	r1, [r3, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	461a      	mov	r2, r3
 80078aa:	f000 fab7 	bl	8007e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2150      	movs	r1, #80	; 0x50
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fb10 	bl	8007eda <TIM_ITRx_SetConfig>
      break;
 80078ba:	e029      	b.n	8007910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	6859      	ldr	r1, [r3, #4]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	461a      	mov	r2, r3
 80078ca:	f000 fad6 	bl	8007e7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2160      	movs	r1, #96	; 0x60
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fb00 	bl	8007eda <TIM_ITRx_SetConfig>
      break;
 80078da:	e019      	b.n	8007910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	6859      	ldr	r1, [r3, #4]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	461a      	mov	r2, r3
 80078ea:	f000 fa97 	bl	8007e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2140      	movs	r1, #64	; 0x40
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 faf0 	bl	8007eda <TIM_ITRx_SetConfig>
      break;
 80078fa:	e009      	b.n	8007910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4619      	mov	r1, r3
 8007906:	4610      	mov	r0, r2
 8007908:	f000 fae7 	bl	8007eda <TIM_ITRx_SetConfig>
      break;
 800790c:	e000      	b.n	8007910 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800790e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a40      	ldr	r2, [pc, #256]	; (8007a90 <TIM_Base_SetConfig+0x114>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799a:	d00f      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a3d      	ldr	r2, [pc, #244]	; (8007a94 <TIM_Base_SetConfig+0x118>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00b      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a3c      	ldr	r2, [pc, #240]	; (8007a98 <TIM_Base_SetConfig+0x11c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d007      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a3b      	ldr	r2, [pc, #236]	; (8007a9c <TIM_Base_SetConfig+0x120>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a3a      	ldr	r2, [pc, #232]	; (8007aa0 <TIM_Base_SetConfig+0x124>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d108      	bne.n	80079ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a2f      	ldr	r2, [pc, #188]	; (8007a90 <TIM_Base_SetConfig+0x114>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d02b      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079dc:	d027      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a2c      	ldr	r2, [pc, #176]	; (8007a94 <TIM_Base_SetConfig+0x118>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d023      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2b      	ldr	r2, [pc, #172]	; (8007a98 <TIM_Base_SetConfig+0x11c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d01f      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a2a      	ldr	r2, [pc, #168]	; (8007a9c <TIM_Base_SetConfig+0x120>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d01b      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a29      	ldr	r2, [pc, #164]	; (8007aa0 <TIM_Base_SetConfig+0x124>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d017      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a28      	ldr	r2, [pc, #160]	; (8007aa4 <TIM_Base_SetConfig+0x128>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d013      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a27      	ldr	r2, [pc, #156]	; (8007aa8 <TIM_Base_SetConfig+0x12c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00f      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a26      	ldr	r2, [pc, #152]	; (8007aac <TIM_Base_SetConfig+0x130>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00b      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a25      	ldr	r2, [pc, #148]	; (8007ab0 <TIM_Base_SetConfig+0x134>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a24      	ldr	r2, [pc, #144]	; (8007ab4 <TIM_Base_SetConfig+0x138>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a23      	ldr	r2, [pc, #140]	; (8007ab8 <TIM_Base_SetConfig+0x13c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d108      	bne.n	8007a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a0a      	ldr	r2, [pc, #40]	; (8007a90 <TIM_Base_SetConfig+0x114>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_Base_SetConfig+0xf8>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a0c      	ldr	r2, [pc, #48]	; (8007aa0 <TIM_Base_SetConfig+0x124>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d103      	bne.n	8007a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	615a      	str	r2, [r3, #20]
}
 8007a82:	bf00      	nop
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40010000 	.word	0x40010000
 8007a94:	40000400 	.word	0x40000400
 8007a98:	40000800 	.word	0x40000800
 8007a9c:	40000c00 	.word	0x40000c00
 8007aa0:	40010400 	.word	0x40010400
 8007aa4:	40014000 	.word	0x40014000
 8007aa8:	40014400 	.word	0x40014400
 8007aac:	40014800 	.word	0x40014800
 8007ab0:	40001800 	.word	0x40001800
 8007ab4:	40001c00 	.word	0x40001c00
 8007ab8:	40002000 	.word	0x40002000

08007abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b087      	sub	sp, #28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f023 0201 	bic.w	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0303 	bic.w	r3, r3, #3
 8007af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f023 0302 	bic.w	r3, r3, #2
 8007b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a20      	ldr	r2, [pc, #128]	; (8007b94 <TIM_OC1_SetConfig+0xd8>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <TIM_OC1_SetConfig+0x64>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a1f      	ldr	r2, [pc, #124]	; (8007b98 <TIM_OC1_SetConfig+0xdc>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d10c      	bne.n	8007b3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f023 0308 	bic.w	r3, r3, #8
 8007b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f023 0304 	bic.w	r3, r3, #4
 8007b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a15      	ldr	r2, [pc, #84]	; (8007b94 <TIM_OC1_SetConfig+0xd8>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d003      	beq.n	8007b4a <TIM_OC1_SetConfig+0x8e>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a14      	ldr	r2, [pc, #80]	; (8007b98 <TIM_OC1_SetConfig+0xdc>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d111      	bne.n	8007b6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	621a      	str	r2, [r3, #32]
}
 8007b88:	bf00      	nop
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	40010000 	.word	0x40010000
 8007b98:	40010400 	.word	0x40010400

08007b9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	f023 0210 	bic.w	r2, r3, #16
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f023 0320 	bic.w	r3, r3, #32
 8007be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	011b      	lsls	r3, r3, #4
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a22      	ldr	r2, [pc, #136]	; (8007c80 <TIM_OC2_SetConfig+0xe4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <TIM_OC2_SetConfig+0x68>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a21      	ldr	r2, [pc, #132]	; (8007c84 <TIM_OC2_SetConfig+0xe8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d10d      	bne.n	8007c20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a17      	ldr	r2, [pc, #92]	; (8007c80 <TIM_OC2_SetConfig+0xe4>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d003      	beq.n	8007c30 <TIM_OC2_SetConfig+0x94>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a16      	ldr	r2, [pc, #88]	; (8007c84 <TIM_OC2_SetConfig+0xe8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d113      	bne.n	8007c58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	621a      	str	r2, [r3, #32]
}
 8007c72:	bf00      	nop
 8007c74:	371c      	adds	r7, #28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	40010000 	.word	0x40010000
 8007c84:	40010400 	.word	0x40010400

08007c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0303 	bic.w	r3, r3, #3
 8007cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	021b      	lsls	r3, r3, #8
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a21      	ldr	r2, [pc, #132]	; (8007d68 <TIM_OC3_SetConfig+0xe0>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d003      	beq.n	8007cee <TIM_OC3_SetConfig+0x66>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a20      	ldr	r2, [pc, #128]	; (8007d6c <TIM_OC3_SetConfig+0xe4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d10d      	bne.n	8007d0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a16      	ldr	r2, [pc, #88]	; (8007d68 <TIM_OC3_SetConfig+0xe0>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d003      	beq.n	8007d1a <TIM_OC3_SetConfig+0x92>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a15      	ldr	r2, [pc, #84]	; (8007d6c <TIM_OC3_SetConfig+0xe4>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d113      	bne.n	8007d42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	621a      	str	r2, [r3, #32]
}
 8007d5c:	bf00      	nop
 8007d5e:	371c      	adds	r7, #28
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	40010000 	.word	0x40010000
 8007d6c:	40010400 	.word	0x40010400

08007d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	031b      	lsls	r3, r3, #12
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a12      	ldr	r2, [pc, #72]	; (8007e14 <TIM_OC4_SetConfig+0xa4>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d003      	beq.n	8007dd8 <TIM_OC4_SetConfig+0x68>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a11      	ldr	r2, [pc, #68]	; (8007e18 <TIM_OC4_SetConfig+0xa8>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d109      	bne.n	8007dec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	019b      	lsls	r3, r3, #6
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	621a      	str	r2, [r3, #32]
}
 8007e06:	bf00      	nop
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	40010000 	.word	0x40010000
 8007e18:	40010400 	.word	0x40010400

08007e1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
 8007e2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	f023 0201 	bic.w	r2, r3, #1
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f023 030a 	bic.w	r3, r3, #10
 8007e58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	621a      	str	r2, [r3, #32]
}
 8007e6e:	bf00      	nop
 8007e70:	371c      	adds	r7, #28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b087      	sub	sp, #28
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	60f8      	str	r0, [r7, #12]
 8007e82:	60b9      	str	r1, [r7, #8]
 8007e84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	f023 0210 	bic.w	r2, r3, #16
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ea4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	031b      	lsls	r3, r3, #12
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	011b      	lsls	r3, r3, #4
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	621a      	str	r2, [r3, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b085      	sub	sp, #20
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	f043 0307 	orr.w	r3, r3, #7
 8007efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	609a      	str	r2, [r3, #8]
}
 8007f04:	bf00      	nop
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	021a      	lsls	r2, r3, #8
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	431a      	orrs	r2, r3
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	609a      	str	r2, [r3, #8]
}
 8007f44:	bf00      	nop
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e05a      	b.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a21      	ldr	r2, [pc, #132]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d022      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb4:	d01d      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a1d      	ldr	r2, [pc, #116]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d018      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1b      	ldr	r2, [pc, #108]	; (8008034 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1a      	ldr	r2, [pc, #104]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a18      	ldr	r2, [pc, #96]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d009      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a17      	ldr	r2, [pc, #92]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d004      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a15      	ldr	r2, [pc, #84]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d10c      	bne.n	800800c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4313      	orrs	r3, r2
 8008002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40010000 	.word	0x40010000
 8008030:	40000400 	.word	0x40000400
 8008034:	40000800 	.word	0x40000800
 8008038:	40000c00 	.word	0x40000c00
 800803c:	40010400 	.word	0x40010400
 8008040:	40014000 	.word	0x40014000
 8008044:	40001800 	.word	0x40001800

08008048 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e03f      	b.n	8008102 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d106      	bne.n	800809c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7fa f9d8 	bl	800244c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2224      	movs	r2, #36	; 0x24
 80080a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68da      	ldr	r2, [r3, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fb41 	bl	800873c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	691a      	ldr	r2, [r3, #16]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	695a      	ldr	r2, [r3, #20]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b088      	sub	sp, #32
 800810e:	af02      	add	r7, sp, #8
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	603b      	str	r3, [r7, #0]
 8008116:	4613      	mov	r3, r2
 8008118:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b20      	cmp	r3, #32
 8008128:	f040 8083 	bne.w	8008232 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <HAL_UART_Transmit+0x2e>
 8008132:	88fb      	ldrh	r3, [r7, #6]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e07b      	b.n	8008234 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008142:	2b01      	cmp	r3, #1
 8008144:	d101      	bne.n	800814a <HAL_UART_Transmit+0x40>
 8008146:	2302      	movs	r3, #2
 8008148:	e074      	b.n	8008234 <HAL_UART_Transmit+0x12a>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2221      	movs	r2, #33	; 0x21
 800815c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008160:	f7fa fbdc 	bl	800291c <HAL_GetTick>
 8008164:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	88fa      	ldrh	r2, [r7, #6]
 800816a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	88fa      	ldrh	r2, [r7, #6]
 8008170:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800817a:	e042      	b.n	8008202 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008180:	b29b      	uxth	r3, r3
 8008182:	3b01      	subs	r3, #1
 8008184:	b29a      	uxth	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008192:	d122      	bne.n	80081da <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2200      	movs	r2, #0
 800819c:	2180      	movs	r1, #128	; 0x80
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 f960 	bl	8008464 <UART_WaitOnFlagUntilTimeout>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e042      	b.n	8008234 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d103      	bne.n	80081d2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	3302      	adds	r3, #2
 80081ce:	60bb      	str	r3, [r7, #8]
 80081d0:	e017      	b.n	8008202 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	3301      	adds	r3, #1
 80081d6:	60bb      	str	r3, [r7, #8]
 80081d8:	e013      	b.n	8008202 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2200      	movs	r2, #0
 80081e2:	2180      	movs	r1, #128	; 0x80
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 f93d 	bl	8008464 <UART_WaitOnFlagUntilTimeout>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e01f      	b.n	8008234 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	60ba      	str	r2, [r7, #8]
 80081fa:	781a      	ldrb	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008206:	b29b      	uxth	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1b7      	bne.n	800817c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2200      	movs	r2, #0
 8008214:	2140      	movs	r1, #64	; 0x40
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 f924 	bl	8008464 <UART_WaitOnFlagUntilTimeout>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e006      	b.n	8008234 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2220      	movs	r2, #32
 800822a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	e000      	b.n	8008234 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008232:	2302      	movs	r3, #2
  }
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b088      	sub	sp, #32
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800825c:	2300      	movs	r3, #0
 800825e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10d      	bne.n	800828e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	f003 0320 	and.w	r3, r3, #32
 8008278:	2b00      	cmp	r3, #0
 800827a:	d008      	beq.n	800828e <HAL_UART_IRQHandler+0x52>
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	f003 0320 	and.w	r3, r3, #32
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f9d6 	bl	8008638 <UART_Receive_IT>
      return;
 800828c:	e0d1      	b.n	8008432 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 80b0 	beq.w	80083f6 <HAL_UART_IRQHandler+0x1ba>
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d105      	bne.n	80082ac <HAL_UART_IRQHandler+0x70>
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 80a5 	beq.w	80083f6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <HAL_UART_IRQHandler+0x90>
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d005      	beq.n	80082cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c4:	f043 0201 	orr.w	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <HAL_UART_IRQHandler+0xb0>
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e4:	f043 0202 	orr.w	r2, r3, #2
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <HAL_UART_IRQHandler+0xd0>
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008304:	f043 0204 	orr.w	r2, r3, #4
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	f003 0308 	and.w	r3, r3, #8
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00f      	beq.n	8008336 <HAL_UART_IRQHandler+0xfa>
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f003 0320 	and.w	r3, r3, #32
 800831c:	2b00      	cmp	r3, #0
 800831e:	d104      	bne.n	800832a <HAL_UART_IRQHandler+0xee>
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d005      	beq.n	8008336 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832e:	f043 0208 	orr.w	r2, r3, #8
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d078      	beq.n	8008430 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	f003 0320 	and.w	r3, r3, #32
 8008344:	2b00      	cmp	r3, #0
 8008346:	d007      	beq.n	8008358 <HAL_UART_IRQHandler+0x11c>
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	f003 0320 	and.w	r3, r3, #32
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f970 	bl	8008638 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008362:	2b40      	cmp	r3, #64	; 0x40
 8008364:	bf0c      	ite	eq
 8008366:	2301      	moveq	r3, #1
 8008368:	2300      	movne	r3, #0
 800836a:	b2db      	uxtb	r3, r3
 800836c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d102      	bne.n	8008380 <HAL_UART_IRQHandler+0x144>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d031      	beq.n	80083e4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f8b9 	bl	80084f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008390:	2b40      	cmp	r3, #64	; 0x40
 8008392:	d123      	bne.n	80083dc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	695a      	ldr	r2, [r3, #20]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083a2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d013      	beq.n	80083d4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b0:	4a21      	ldr	r2, [pc, #132]	; (8008438 <HAL_UART_IRQHandler+0x1fc>)
 80083b2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fa fcc5 	bl	8002d48 <HAL_DMA_Abort_IT>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d016      	beq.n	80083f2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083ce:	4610      	mov	r0, r2
 80083d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d2:	e00e      	b.n	80083f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f83b 	bl	8008450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083da:	e00a      	b.n	80083f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f837 	bl	8008450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e2:	e006      	b.n	80083f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f833 	bl	8008450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80083f0:	e01e      	b.n	8008430 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f2:	bf00      	nop
    return;
 80083f4:	e01c      	b.n	8008430 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d008      	beq.n	8008412 <HAL_UART_IRQHandler+0x1d6>
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f8a6 	bl	800855c <UART_Transmit_IT>
    return;
 8008410:	e00f      	b.n	8008432 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00a      	beq.n	8008432 <HAL_UART_IRQHandler+0x1f6>
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d005      	beq.n	8008432 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f8ee 	bl	8008608 <UART_EndTransmit_IT>
    return;
 800842c:	bf00      	nop
 800842e:	e000      	b.n	8008432 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008430:	bf00      	nop
  }
}
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	08008535 	.word	0x08008535

0800843c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	603b      	str	r3, [r7, #0]
 8008470:	4613      	mov	r3, r2
 8008472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008474:	e02c      	b.n	80084d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847c:	d028      	beq.n	80084d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <UART_WaitOnFlagUntilTimeout+0x30>
 8008484:	f7fa fa4a 	bl	800291c <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	429a      	cmp	r2, r3
 8008492:	d21d      	bcs.n	80084d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	695a      	ldr	r2, [r3, #20]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f022 0201 	bic.w	r2, r2, #1
 80084b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2220      	movs	r2, #32
 80084c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e00f      	b.n	80084f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	4013      	ands	r3, r2
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	429a      	cmp	r2, r3
 80084de:	bf0c      	ite	eq
 80084e0:	2301      	moveq	r3, #1
 80084e2:	2300      	movne	r3, #0
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	461a      	mov	r2, r3
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d0c3      	beq.n	8008476 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800850e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	695a      	ldr	r2, [r3, #20]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0201 	bic.w	r2, r2, #1
 800851e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2220      	movs	r2, #32
 8008524:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7ff ff7e 	bl	8008450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b21      	cmp	r3, #33	; 0x21
 800856e:	d144      	bne.n	80085fa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008578:	d11a      	bne.n	80085b0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800858e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d105      	bne.n	80085a4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	1c9a      	adds	r2, r3, #2
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	621a      	str	r2, [r3, #32]
 80085a2:	e00e      	b.n	80085c2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	621a      	str	r2, [r3, #32]
 80085ae:	e008      	b.n	80085c2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	1c59      	adds	r1, r3, #1
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6211      	str	r1, [r2, #32]
 80085ba:	781a      	ldrb	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	4619      	mov	r1, r3
 80085d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10f      	bne.n	80085f6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	e000      	b.n	80085fc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80085fa:	2302      	movs	r3, #2
  }
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800861e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff ff07 	bl	800843c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b22      	cmp	r3, #34	; 0x22
 800864a:	d171      	bne.n	8008730 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008654:	d123      	bne.n	800869e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10e      	bne.n	8008682 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	b29b      	uxth	r3, r3
 800866c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008670:	b29a      	uxth	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	1c9a      	adds	r2, r3, #2
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	629a      	str	r2, [r3, #40]	; 0x28
 8008680:	e029      	b.n	80086d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	b29b      	uxth	r3, r3
 800868a:	b2db      	uxtb	r3, r3
 800868c:	b29a      	uxth	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	629a      	str	r2, [r3, #40]	; 0x28
 800869c:	e01b      	b.n	80086d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10a      	bne.n	80086bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6858      	ldr	r0, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b0:	1c59      	adds	r1, r3, #1
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6291      	str	r1, [r2, #40]	; 0x28
 80086b6:	b2c2      	uxtb	r2, r0
 80086b8:	701a      	strb	r2, [r3, #0]
 80086ba:	e00c      	b.n	80086d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c8:	1c58      	adds	r0, r3, #1
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	6288      	str	r0, [r1, #40]	; 0x28
 80086ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086da:	b29b      	uxth	r3, r3
 80086dc:	3b01      	subs	r3, #1
 80086de:	b29b      	uxth	r3, r3
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4619      	mov	r1, r3
 80086e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d120      	bne.n	800872c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68da      	ldr	r2, [r3, #12]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0220 	bic.w	r2, r2, #32
 80086f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008708:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	695a      	ldr	r2, [r3, #20]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 0201 	bic.w	r2, r2, #1
 8008718:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2220      	movs	r2, #32
 800871e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 ff0c 	bl	800a540 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	e002      	b.n	8008732 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	e000      	b.n	8008732 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008730:	2302      	movs	r3, #2
  }
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800873c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008740:	b085      	sub	sp, #20
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	689a      	ldr	r2, [r3, #8]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	431a      	orrs	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	431a      	orrs	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	4313      	orrs	r3, r2
 8008772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800877e:	f023 030c 	bic.w	r3, r3, #12
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	6812      	ldr	r2, [r2, #0]
 8008786:	68f9      	ldr	r1, [r7, #12]
 8008788:	430b      	orrs	r3, r1
 800878a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	430a      	orrs	r2, r1
 80087a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087aa:	f040 818b 	bne.w	8008ac4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4ac1      	ldr	r2, [pc, #772]	; (8008ab8 <UART_SetConfig+0x37c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d005      	beq.n	80087c4 <UART_SetConfig+0x88>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4abf      	ldr	r2, [pc, #764]	; (8008abc <UART_SetConfig+0x380>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	f040 80bd 	bne.w	800893e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087c4:	f7fd fa64 	bl	8005c90 <HAL_RCC_GetPCLK2Freq>
 80087c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	461d      	mov	r5, r3
 80087ce:	f04f 0600 	mov.w	r6, #0
 80087d2:	46a8      	mov	r8, r5
 80087d4:	46b1      	mov	r9, r6
 80087d6:	eb18 0308 	adds.w	r3, r8, r8
 80087da:	eb49 0409 	adc.w	r4, r9, r9
 80087de:	4698      	mov	r8, r3
 80087e0:	46a1      	mov	r9, r4
 80087e2:	eb18 0805 	adds.w	r8, r8, r5
 80087e6:	eb49 0906 	adc.w	r9, r9, r6
 80087ea:	f04f 0100 	mov.w	r1, #0
 80087ee:	f04f 0200 	mov.w	r2, #0
 80087f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80087f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80087fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80087fe:	4688      	mov	r8, r1
 8008800:	4691      	mov	r9, r2
 8008802:	eb18 0005 	adds.w	r0, r8, r5
 8008806:	eb49 0106 	adc.w	r1, r9, r6
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	461d      	mov	r5, r3
 8008810:	f04f 0600 	mov.w	r6, #0
 8008814:	196b      	adds	r3, r5, r5
 8008816:	eb46 0406 	adc.w	r4, r6, r6
 800881a:	461a      	mov	r2, r3
 800881c:	4623      	mov	r3, r4
 800881e:	f7f8 fa43 	bl	8000ca8 <__aeabi_uldivmod>
 8008822:	4603      	mov	r3, r0
 8008824:	460c      	mov	r4, r1
 8008826:	461a      	mov	r2, r3
 8008828:	4ba5      	ldr	r3, [pc, #660]	; (8008ac0 <UART_SetConfig+0x384>)
 800882a:	fba3 2302 	umull	r2, r3, r3, r2
 800882e:	095b      	lsrs	r3, r3, #5
 8008830:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	461d      	mov	r5, r3
 8008838:	f04f 0600 	mov.w	r6, #0
 800883c:	46a9      	mov	r9, r5
 800883e:	46b2      	mov	sl, r6
 8008840:	eb19 0309 	adds.w	r3, r9, r9
 8008844:	eb4a 040a 	adc.w	r4, sl, sl
 8008848:	4699      	mov	r9, r3
 800884a:	46a2      	mov	sl, r4
 800884c:	eb19 0905 	adds.w	r9, r9, r5
 8008850:	eb4a 0a06 	adc.w	sl, sl, r6
 8008854:	f04f 0100 	mov.w	r1, #0
 8008858:	f04f 0200 	mov.w	r2, #0
 800885c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008860:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008864:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008868:	4689      	mov	r9, r1
 800886a:	4692      	mov	sl, r2
 800886c:	eb19 0005 	adds.w	r0, r9, r5
 8008870:	eb4a 0106 	adc.w	r1, sl, r6
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	461d      	mov	r5, r3
 800887a:	f04f 0600 	mov.w	r6, #0
 800887e:	196b      	adds	r3, r5, r5
 8008880:	eb46 0406 	adc.w	r4, r6, r6
 8008884:	461a      	mov	r2, r3
 8008886:	4623      	mov	r3, r4
 8008888:	f7f8 fa0e 	bl	8000ca8 <__aeabi_uldivmod>
 800888c:	4603      	mov	r3, r0
 800888e:	460c      	mov	r4, r1
 8008890:	461a      	mov	r2, r3
 8008892:	4b8b      	ldr	r3, [pc, #556]	; (8008ac0 <UART_SetConfig+0x384>)
 8008894:	fba3 1302 	umull	r1, r3, r3, r2
 8008898:	095b      	lsrs	r3, r3, #5
 800889a:	2164      	movs	r1, #100	; 0x64
 800889c:	fb01 f303 	mul.w	r3, r1, r3
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	3332      	adds	r3, #50	; 0x32
 80088a6:	4a86      	ldr	r2, [pc, #536]	; (8008ac0 <UART_SetConfig+0x384>)
 80088a8:	fba2 2303 	umull	r2, r3, r2, r3
 80088ac:	095b      	lsrs	r3, r3, #5
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088b4:	4498      	add	r8, r3
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	461d      	mov	r5, r3
 80088ba:	f04f 0600 	mov.w	r6, #0
 80088be:	46a9      	mov	r9, r5
 80088c0:	46b2      	mov	sl, r6
 80088c2:	eb19 0309 	adds.w	r3, r9, r9
 80088c6:	eb4a 040a 	adc.w	r4, sl, sl
 80088ca:	4699      	mov	r9, r3
 80088cc:	46a2      	mov	sl, r4
 80088ce:	eb19 0905 	adds.w	r9, r9, r5
 80088d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80088d6:	f04f 0100 	mov.w	r1, #0
 80088da:	f04f 0200 	mov.w	r2, #0
 80088de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088ea:	4689      	mov	r9, r1
 80088ec:	4692      	mov	sl, r2
 80088ee:	eb19 0005 	adds.w	r0, r9, r5
 80088f2:	eb4a 0106 	adc.w	r1, sl, r6
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	461d      	mov	r5, r3
 80088fc:	f04f 0600 	mov.w	r6, #0
 8008900:	196b      	adds	r3, r5, r5
 8008902:	eb46 0406 	adc.w	r4, r6, r6
 8008906:	461a      	mov	r2, r3
 8008908:	4623      	mov	r3, r4
 800890a:	f7f8 f9cd 	bl	8000ca8 <__aeabi_uldivmod>
 800890e:	4603      	mov	r3, r0
 8008910:	460c      	mov	r4, r1
 8008912:	461a      	mov	r2, r3
 8008914:	4b6a      	ldr	r3, [pc, #424]	; (8008ac0 <UART_SetConfig+0x384>)
 8008916:	fba3 1302 	umull	r1, r3, r3, r2
 800891a:	095b      	lsrs	r3, r3, #5
 800891c:	2164      	movs	r1, #100	; 0x64
 800891e:	fb01 f303 	mul.w	r3, r1, r3
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	3332      	adds	r3, #50	; 0x32
 8008928:	4a65      	ldr	r2, [pc, #404]	; (8008ac0 <UART_SetConfig+0x384>)
 800892a:	fba2 2303 	umull	r2, r3, r2, r3
 800892e:	095b      	lsrs	r3, r3, #5
 8008930:	f003 0207 	and.w	r2, r3, #7
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4442      	add	r2, r8
 800893a:	609a      	str	r2, [r3, #8]
 800893c:	e26f      	b.n	8008e1e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800893e:	f7fd f993 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 8008942:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	461d      	mov	r5, r3
 8008948:	f04f 0600 	mov.w	r6, #0
 800894c:	46a8      	mov	r8, r5
 800894e:	46b1      	mov	r9, r6
 8008950:	eb18 0308 	adds.w	r3, r8, r8
 8008954:	eb49 0409 	adc.w	r4, r9, r9
 8008958:	4698      	mov	r8, r3
 800895a:	46a1      	mov	r9, r4
 800895c:	eb18 0805 	adds.w	r8, r8, r5
 8008960:	eb49 0906 	adc.w	r9, r9, r6
 8008964:	f04f 0100 	mov.w	r1, #0
 8008968:	f04f 0200 	mov.w	r2, #0
 800896c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008970:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008974:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008978:	4688      	mov	r8, r1
 800897a:	4691      	mov	r9, r2
 800897c:	eb18 0005 	adds.w	r0, r8, r5
 8008980:	eb49 0106 	adc.w	r1, r9, r6
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	461d      	mov	r5, r3
 800898a:	f04f 0600 	mov.w	r6, #0
 800898e:	196b      	adds	r3, r5, r5
 8008990:	eb46 0406 	adc.w	r4, r6, r6
 8008994:	461a      	mov	r2, r3
 8008996:	4623      	mov	r3, r4
 8008998:	f7f8 f986 	bl	8000ca8 <__aeabi_uldivmod>
 800899c:	4603      	mov	r3, r0
 800899e:	460c      	mov	r4, r1
 80089a0:	461a      	mov	r2, r3
 80089a2:	4b47      	ldr	r3, [pc, #284]	; (8008ac0 <UART_SetConfig+0x384>)
 80089a4:	fba3 2302 	umull	r2, r3, r3, r2
 80089a8:	095b      	lsrs	r3, r3, #5
 80089aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	461d      	mov	r5, r3
 80089b2:	f04f 0600 	mov.w	r6, #0
 80089b6:	46a9      	mov	r9, r5
 80089b8:	46b2      	mov	sl, r6
 80089ba:	eb19 0309 	adds.w	r3, r9, r9
 80089be:	eb4a 040a 	adc.w	r4, sl, sl
 80089c2:	4699      	mov	r9, r3
 80089c4:	46a2      	mov	sl, r4
 80089c6:	eb19 0905 	adds.w	r9, r9, r5
 80089ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80089ce:	f04f 0100 	mov.w	r1, #0
 80089d2:	f04f 0200 	mov.w	r2, #0
 80089d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089e2:	4689      	mov	r9, r1
 80089e4:	4692      	mov	sl, r2
 80089e6:	eb19 0005 	adds.w	r0, r9, r5
 80089ea:	eb4a 0106 	adc.w	r1, sl, r6
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	461d      	mov	r5, r3
 80089f4:	f04f 0600 	mov.w	r6, #0
 80089f8:	196b      	adds	r3, r5, r5
 80089fa:	eb46 0406 	adc.w	r4, r6, r6
 80089fe:	461a      	mov	r2, r3
 8008a00:	4623      	mov	r3, r4
 8008a02:	f7f8 f951 	bl	8000ca8 <__aeabi_uldivmod>
 8008a06:	4603      	mov	r3, r0
 8008a08:	460c      	mov	r4, r1
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	4b2c      	ldr	r3, [pc, #176]	; (8008ac0 <UART_SetConfig+0x384>)
 8008a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8008a12:	095b      	lsrs	r3, r3, #5
 8008a14:	2164      	movs	r1, #100	; 0x64
 8008a16:	fb01 f303 	mul.w	r3, r1, r3
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	00db      	lsls	r3, r3, #3
 8008a1e:	3332      	adds	r3, #50	; 0x32
 8008a20:	4a27      	ldr	r2, [pc, #156]	; (8008ac0 <UART_SetConfig+0x384>)
 8008a22:	fba2 2303 	umull	r2, r3, r2, r3
 8008a26:	095b      	lsrs	r3, r3, #5
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a2e:	4498      	add	r8, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	461d      	mov	r5, r3
 8008a34:	f04f 0600 	mov.w	r6, #0
 8008a38:	46a9      	mov	r9, r5
 8008a3a:	46b2      	mov	sl, r6
 8008a3c:	eb19 0309 	adds.w	r3, r9, r9
 8008a40:	eb4a 040a 	adc.w	r4, sl, sl
 8008a44:	4699      	mov	r9, r3
 8008a46:	46a2      	mov	sl, r4
 8008a48:	eb19 0905 	adds.w	r9, r9, r5
 8008a4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a50:	f04f 0100 	mov.w	r1, #0
 8008a54:	f04f 0200 	mov.w	r2, #0
 8008a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a64:	4689      	mov	r9, r1
 8008a66:	4692      	mov	sl, r2
 8008a68:	eb19 0005 	adds.w	r0, r9, r5
 8008a6c:	eb4a 0106 	adc.w	r1, sl, r6
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	461d      	mov	r5, r3
 8008a76:	f04f 0600 	mov.w	r6, #0
 8008a7a:	196b      	adds	r3, r5, r5
 8008a7c:	eb46 0406 	adc.w	r4, r6, r6
 8008a80:	461a      	mov	r2, r3
 8008a82:	4623      	mov	r3, r4
 8008a84:	f7f8 f910 	bl	8000ca8 <__aeabi_uldivmod>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ac0 <UART_SetConfig+0x384>)
 8008a90:	fba3 1302 	umull	r1, r3, r3, r2
 8008a94:	095b      	lsrs	r3, r3, #5
 8008a96:	2164      	movs	r1, #100	; 0x64
 8008a98:	fb01 f303 	mul.w	r3, r1, r3
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	3332      	adds	r3, #50	; 0x32
 8008aa2:	4a07      	ldr	r2, [pc, #28]	; (8008ac0 <UART_SetConfig+0x384>)
 8008aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa8:	095b      	lsrs	r3, r3, #5
 8008aaa:	f003 0207 	and.w	r2, r3, #7
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4442      	add	r2, r8
 8008ab4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008ab6:	e1b2      	b.n	8008e1e <UART_SetConfig+0x6e2>
 8008ab8:	40011000 	.word	0x40011000
 8008abc:	40011400 	.word	0x40011400
 8008ac0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4ad7      	ldr	r2, [pc, #860]	; (8008e28 <UART_SetConfig+0x6ec>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d005      	beq.n	8008ada <UART_SetConfig+0x39e>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4ad6      	ldr	r2, [pc, #856]	; (8008e2c <UART_SetConfig+0x6f0>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	f040 80d1 	bne.w	8008c7c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ada:	f7fd f8d9 	bl	8005c90 <HAL_RCC_GetPCLK2Freq>
 8008ade:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	469a      	mov	sl, r3
 8008ae4:	f04f 0b00 	mov.w	fp, #0
 8008ae8:	46d0      	mov	r8, sl
 8008aea:	46d9      	mov	r9, fp
 8008aec:	eb18 0308 	adds.w	r3, r8, r8
 8008af0:	eb49 0409 	adc.w	r4, r9, r9
 8008af4:	4698      	mov	r8, r3
 8008af6:	46a1      	mov	r9, r4
 8008af8:	eb18 080a 	adds.w	r8, r8, sl
 8008afc:	eb49 090b 	adc.w	r9, r9, fp
 8008b00:	f04f 0100 	mov.w	r1, #0
 8008b04:	f04f 0200 	mov.w	r2, #0
 8008b08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b14:	4688      	mov	r8, r1
 8008b16:	4691      	mov	r9, r2
 8008b18:	eb1a 0508 	adds.w	r5, sl, r8
 8008b1c:	eb4b 0609 	adc.w	r6, fp, r9
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	4619      	mov	r1, r3
 8008b26:	f04f 0200 	mov.w	r2, #0
 8008b2a:	f04f 0300 	mov.w	r3, #0
 8008b2e:	f04f 0400 	mov.w	r4, #0
 8008b32:	0094      	lsls	r4, r2, #2
 8008b34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b38:	008b      	lsls	r3, r1, #2
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	4623      	mov	r3, r4
 8008b3e:	4628      	mov	r0, r5
 8008b40:	4631      	mov	r1, r6
 8008b42:	f7f8 f8b1 	bl	8000ca8 <__aeabi_uldivmod>
 8008b46:	4603      	mov	r3, r0
 8008b48:	460c      	mov	r4, r1
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	4bb8      	ldr	r3, [pc, #736]	; (8008e30 <UART_SetConfig+0x6f4>)
 8008b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b52:	095b      	lsrs	r3, r3, #5
 8008b54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	469b      	mov	fp, r3
 8008b5c:	f04f 0c00 	mov.w	ip, #0
 8008b60:	46d9      	mov	r9, fp
 8008b62:	46e2      	mov	sl, ip
 8008b64:	eb19 0309 	adds.w	r3, r9, r9
 8008b68:	eb4a 040a 	adc.w	r4, sl, sl
 8008b6c:	4699      	mov	r9, r3
 8008b6e:	46a2      	mov	sl, r4
 8008b70:	eb19 090b 	adds.w	r9, r9, fp
 8008b74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b78:	f04f 0100 	mov.w	r1, #0
 8008b7c:	f04f 0200 	mov.w	r2, #0
 8008b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b8c:	4689      	mov	r9, r1
 8008b8e:	4692      	mov	sl, r2
 8008b90:	eb1b 0509 	adds.w	r5, fp, r9
 8008b94:	eb4c 060a 	adc.w	r6, ip, sl
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	f04f 0400 	mov.w	r4, #0
 8008baa:	0094      	lsls	r4, r2, #2
 8008bac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008bb0:	008b      	lsls	r3, r1, #2
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	4623      	mov	r3, r4
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	4631      	mov	r1, r6
 8008bba:	f7f8 f875 	bl	8000ca8 <__aeabi_uldivmod>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	4b9a      	ldr	r3, [pc, #616]	; (8008e30 <UART_SetConfig+0x6f4>)
 8008bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8008bca:	095b      	lsrs	r3, r3, #5
 8008bcc:	2164      	movs	r1, #100	; 0x64
 8008bce:	fb01 f303 	mul.w	r3, r1, r3
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	011b      	lsls	r3, r3, #4
 8008bd6:	3332      	adds	r3, #50	; 0x32
 8008bd8:	4a95      	ldr	r2, [pc, #596]	; (8008e30 <UART_SetConfig+0x6f4>)
 8008bda:	fba2 2303 	umull	r2, r3, r2, r3
 8008bde:	095b      	lsrs	r3, r3, #5
 8008be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008be4:	4498      	add	r8, r3
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	469b      	mov	fp, r3
 8008bea:	f04f 0c00 	mov.w	ip, #0
 8008bee:	46d9      	mov	r9, fp
 8008bf0:	46e2      	mov	sl, ip
 8008bf2:	eb19 0309 	adds.w	r3, r9, r9
 8008bf6:	eb4a 040a 	adc.w	r4, sl, sl
 8008bfa:	4699      	mov	r9, r3
 8008bfc:	46a2      	mov	sl, r4
 8008bfe:	eb19 090b 	adds.w	r9, r9, fp
 8008c02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008c06:	f04f 0100 	mov.w	r1, #0
 8008c0a:	f04f 0200 	mov.w	r2, #0
 8008c0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c1a:	4689      	mov	r9, r1
 8008c1c:	4692      	mov	sl, r2
 8008c1e:	eb1b 0509 	adds.w	r5, fp, r9
 8008c22:	eb4c 060a 	adc.w	r6, ip, sl
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	f04f 0200 	mov.w	r2, #0
 8008c30:	f04f 0300 	mov.w	r3, #0
 8008c34:	f04f 0400 	mov.w	r4, #0
 8008c38:	0094      	lsls	r4, r2, #2
 8008c3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c3e:	008b      	lsls	r3, r1, #2
 8008c40:	461a      	mov	r2, r3
 8008c42:	4623      	mov	r3, r4
 8008c44:	4628      	mov	r0, r5
 8008c46:	4631      	mov	r1, r6
 8008c48:	f7f8 f82e 	bl	8000ca8 <__aeabi_uldivmod>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	460c      	mov	r4, r1
 8008c50:	461a      	mov	r2, r3
 8008c52:	4b77      	ldr	r3, [pc, #476]	; (8008e30 <UART_SetConfig+0x6f4>)
 8008c54:	fba3 1302 	umull	r1, r3, r3, r2
 8008c58:	095b      	lsrs	r3, r3, #5
 8008c5a:	2164      	movs	r1, #100	; 0x64
 8008c5c:	fb01 f303 	mul.w	r3, r1, r3
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	011b      	lsls	r3, r3, #4
 8008c64:	3332      	adds	r3, #50	; 0x32
 8008c66:	4a72      	ldr	r2, [pc, #456]	; (8008e30 <UART_SetConfig+0x6f4>)
 8008c68:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6c:	095b      	lsrs	r3, r3, #5
 8008c6e:	f003 020f 	and.w	r2, r3, #15
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4442      	add	r2, r8
 8008c78:	609a      	str	r2, [r3, #8]
 8008c7a:	e0d0      	b.n	8008e1e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c7c:	f7fc fff4 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 8008c80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	469a      	mov	sl, r3
 8008c86:	f04f 0b00 	mov.w	fp, #0
 8008c8a:	46d0      	mov	r8, sl
 8008c8c:	46d9      	mov	r9, fp
 8008c8e:	eb18 0308 	adds.w	r3, r8, r8
 8008c92:	eb49 0409 	adc.w	r4, r9, r9
 8008c96:	4698      	mov	r8, r3
 8008c98:	46a1      	mov	r9, r4
 8008c9a:	eb18 080a 	adds.w	r8, r8, sl
 8008c9e:	eb49 090b 	adc.w	r9, r9, fp
 8008ca2:	f04f 0100 	mov.w	r1, #0
 8008ca6:	f04f 0200 	mov.w	r2, #0
 8008caa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008cae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008cb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008cb6:	4688      	mov	r8, r1
 8008cb8:	4691      	mov	r9, r2
 8008cba:	eb1a 0508 	adds.w	r5, sl, r8
 8008cbe:	eb4b 0609 	adc.w	r6, fp, r9
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	f04f 0200 	mov.w	r2, #0
 8008ccc:	f04f 0300 	mov.w	r3, #0
 8008cd0:	f04f 0400 	mov.w	r4, #0
 8008cd4:	0094      	lsls	r4, r2, #2
 8008cd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008cda:	008b      	lsls	r3, r1, #2
 8008cdc:	461a      	mov	r2, r3
 8008cde:	4623      	mov	r3, r4
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	f7f7 ffe0 	bl	8000ca8 <__aeabi_uldivmod>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	461a      	mov	r2, r3
 8008cee:	4b50      	ldr	r3, [pc, #320]	; (8008e30 <UART_SetConfig+0x6f4>)
 8008cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8008cf4:	095b      	lsrs	r3, r3, #5
 8008cf6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	469b      	mov	fp, r3
 8008cfe:	f04f 0c00 	mov.w	ip, #0
 8008d02:	46d9      	mov	r9, fp
 8008d04:	46e2      	mov	sl, ip
 8008d06:	eb19 0309 	adds.w	r3, r9, r9
 8008d0a:	eb4a 040a 	adc.w	r4, sl, sl
 8008d0e:	4699      	mov	r9, r3
 8008d10:	46a2      	mov	sl, r4
 8008d12:	eb19 090b 	adds.w	r9, r9, fp
 8008d16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008d1a:	f04f 0100 	mov.w	r1, #0
 8008d1e:	f04f 0200 	mov.w	r2, #0
 8008d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d2e:	4689      	mov	r9, r1
 8008d30:	4692      	mov	sl, r2
 8008d32:	eb1b 0509 	adds.w	r5, fp, r9
 8008d36:	eb4c 060a 	adc.w	r6, ip, sl
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	f04f 0200 	mov.w	r2, #0
 8008d44:	f04f 0300 	mov.w	r3, #0
 8008d48:	f04f 0400 	mov.w	r4, #0
 8008d4c:	0094      	lsls	r4, r2, #2
 8008d4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d52:	008b      	lsls	r3, r1, #2
 8008d54:	461a      	mov	r2, r3
 8008d56:	4623      	mov	r3, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	f7f7 ffa4 	bl	8000ca8 <__aeabi_uldivmod>
 8008d60:	4603      	mov	r3, r0
 8008d62:	460c      	mov	r4, r1
 8008d64:	461a      	mov	r2, r3
 8008d66:	4b32      	ldr	r3, [pc, #200]	; (8008e30 <UART_SetConfig+0x6f4>)
 8008d68:	fba3 1302 	umull	r1, r3, r3, r2
 8008d6c:	095b      	lsrs	r3, r3, #5
 8008d6e:	2164      	movs	r1, #100	; 0x64
 8008d70:	fb01 f303 	mul.w	r3, r1, r3
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	011b      	lsls	r3, r3, #4
 8008d78:	3332      	adds	r3, #50	; 0x32
 8008d7a:	4a2d      	ldr	r2, [pc, #180]	; (8008e30 <UART_SetConfig+0x6f4>)
 8008d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d80:	095b      	lsrs	r3, r3, #5
 8008d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d86:	4498      	add	r8, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	469b      	mov	fp, r3
 8008d8c:	f04f 0c00 	mov.w	ip, #0
 8008d90:	46d9      	mov	r9, fp
 8008d92:	46e2      	mov	sl, ip
 8008d94:	eb19 0309 	adds.w	r3, r9, r9
 8008d98:	eb4a 040a 	adc.w	r4, sl, sl
 8008d9c:	4699      	mov	r9, r3
 8008d9e:	46a2      	mov	sl, r4
 8008da0:	eb19 090b 	adds.w	r9, r9, fp
 8008da4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008da8:	f04f 0100 	mov.w	r1, #0
 8008dac:	f04f 0200 	mov.w	r2, #0
 8008db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008db4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008db8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008dbc:	4689      	mov	r9, r1
 8008dbe:	4692      	mov	sl, r2
 8008dc0:	eb1b 0509 	adds.w	r5, fp, r9
 8008dc4:	eb4c 060a 	adc.w	r6, ip, sl
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	f04f 0200 	mov.w	r2, #0
 8008dd2:	f04f 0300 	mov.w	r3, #0
 8008dd6:	f04f 0400 	mov.w	r4, #0
 8008dda:	0094      	lsls	r4, r2, #2
 8008ddc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008de0:	008b      	lsls	r3, r1, #2
 8008de2:	461a      	mov	r2, r3
 8008de4:	4623      	mov	r3, r4
 8008de6:	4628      	mov	r0, r5
 8008de8:	4631      	mov	r1, r6
 8008dea:	f7f7 ff5d 	bl	8000ca8 <__aeabi_uldivmod>
 8008dee:	4603      	mov	r3, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	461a      	mov	r2, r3
 8008df4:	4b0e      	ldr	r3, [pc, #56]	; (8008e30 <UART_SetConfig+0x6f4>)
 8008df6:	fba3 1302 	umull	r1, r3, r3, r2
 8008dfa:	095b      	lsrs	r3, r3, #5
 8008dfc:	2164      	movs	r1, #100	; 0x64
 8008dfe:	fb01 f303 	mul.w	r3, r1, r3
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	011b      	lsls	r3, r3, #4
 8008e06:	3332      	adds	r3, #50	; 0x32
 8008e08:	4a09      	ldr	r2, [pc, #36]	; (8008e30 <UART_SetConfig+0x6f4>)
 8008e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e0e:	095b      	lsrs	r3, r3, #5
 8008e10:	f003 020f 	and.w	r2, r3, #15
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4442      	add	r2, r8
 8008e1a:	609a      	str	r2, [r3, #8]
}
 8008e1c:	e7ff      	b.n	8008e1e <UART_SetConfig+0x6e2>
 8008e1e:	bf00      	nop
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e28:	40011000 	.word	0x40011000
 8008e2c:	40011400 	.word	0x40011400
 8008e30:	51eb851f 	.word	0x51eb851f

08008e34 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008e34:	b084      	sub	sp, #16
 8008e36:	b480      	push	{r7}
 8008e38:	b085      	sub	sp, #20
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	f107 001c 	add.w	r0, r7, #28
 8008e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008e4a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008e4e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008e52:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008e56:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008e5a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008e5e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008e6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	431a      	orrs	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	b004      	add	sp, #16
 8008e88:	4770      	bx	lr

08008e8a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b083      	sub	sp, #12
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2203      	movs	r2, #3
 8008ed2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008ed4:	2002      	movs	r0, #2
 8008ed6:	f7f9 fd2d 	bl	8002934 <HAL_Delay>
  
  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0303 	and.w	r3, r3, #3
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008f1e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008f24:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008f2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008f3a:	f023 030f 	bic.w	r3, r3, #15
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	b2db      	uxtb	r3, r3
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3314      	adds	r3, #20
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	4413      	add	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
}  
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008fba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008fc0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008fc6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0

}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008ffa:	2310      	movs	r3, #16
 8008ffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ffe:	2340      	movs	r3, #64	; 0x40
 8009000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009002:	2300      	movs	r3, #0
 8009004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800900a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800900c:	f107 0308 	add.w	r3, r7, #8
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7ff ff74 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009018:	f241 3288 	movw	r2, #5000	; 0x1388
 800901c:	2110      	movs	r1, #16
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa40 	bl	80094a4 <SDMMC_GetCmdResp1>
 8009024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009026:	69fb      	ldr	r3, [r7, #28]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3720      	adds	r7, #32
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b088      	sub	sp, #32
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800903e:	2311      	movs	r3, #17
 8009040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009042:	2340      	movs	r3, #64	; 0x40
 8009044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800904a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800904e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009050:	f107 0308 	add.w	r3, r7, #8
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7ff ff52 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800905c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009060:	2111      	movs	r1, #17
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa1e 	bl	80094a4 <SDMMC_GetCmdResp1>
 8009068:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800906a:	69fb      	ldr	r3, [r7, #28]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3720      	adds	r7, #32
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009082:	2312      	movs	r3, #18
 8009084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009086:	2340      	movs	r3, #64	; 0x40
 8009088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800908a:	2300      	movs	r3, #0
 800908c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800908e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009092:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009094:	f107 0308 	add.w	r3, r7, #8
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7ff ff30 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80090a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090a4:	2112      	movs	r1, #18
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f9fc 	bl	80094a4 <SDMMC_GetCmdResp1>
 80090ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ae:	69fb      	ldr	r3, [r7, #28]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3720      	adds	r7, #32
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b088      	sub	sp, #32
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80090c6:	2318      	movs	r3, #24
 80090c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090ca:	2340      	movs	r3, #64	; 0x40
 80090cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090ce:	2300      	movs	r3, #0
 80090d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090d8:	f107 0308 	add.w	r3, r7, #8
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff ff0e 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80090e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e8:	2118      	movs	r1, #24
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f9da 	bl	80094a4 <SDMMC_GetCmdResp1>
 80090f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090f2:	69fb      	ldr	r3, [r7, #28]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3720      	adds	r7, #32
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800910a:	2319      	movs	r3, #25
 800910c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800910e:	2340      	movs	r3, #64	; 0x40
 8009110:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009112:	2300      	movs	r3, #0
 8009114:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800911a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800911c:	f107 0308 	add.w	r3, r7, #8
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff feec 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009128:	f241 3288 	movw	r2, #5000	; 0x1388
 800912c:	2119      	movs	r1, #25
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f9b8 	bl	80094a4 <SDMMC_GetCmdResp1>
 8009134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009136:	69fb      	ldr	r3, [r7, #28]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3720      	adds	r7, #32
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800914c:	230c      	movs	r3, #12
 800914e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009150:	2340      	movs	r3, #64	; 0x40
 8009152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009154:	2300      	movs	r3, #0
 8009156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800915c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800915e:	f107 0308 	add.w	r3, r7, #8
 8009162:	4619      	mov	r1, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff fecb 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800916a:	4a05      	ldr	r2, [pc, #20]	; (8009180 <SDMMC_CmdStopTransfer+0x40>)
 800916c:	210c      	movs	r1, #12
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f998 	bl	80094a4 <SDMMC_GetCmdResp1>
 8009174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009176:	69fb      	ldr	r3, [r7, #28]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3720      	adds	r7, #32
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	05f5e100 	.word	0x05f5e100

08009184 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b08a      	sub	sp, #40	; 0x28
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009194:	2307      	movs	r3, #7
 8009196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009198:	2340      	movs	r3, #64	; 0x40
 800919a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800919c:	2300      	movs	r3, #0
 800919e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091a4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091a6:	f107 0310 	add.w	r3, r7, #16
 80091aa:	4619      	mov	r1, r3
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f7ff fea7 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80091b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091b6:	2107      	movs	r1, #7
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 f973 	bl	80094a4 <SDMMC_GetCmdResp1>
 80091be:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3728      	adds	r7, #40	; 0x28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b088      	sub	sp, #32
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80091da:	2300      	movs	r3, #0
 80091dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091de:	2300      	movs	r3, #0
 80091e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091e8:	f107 0308 	add.w	r3, r7, #8
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7ff fe86 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f92d 	bl	8009454 <SDMMC_GetCmdError>
 80091fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091fc:	69fb      	ldr	r3, [r7, #28]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3720      	adds	r7, #32
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b088      	sub	sp, #32
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800920e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009214:	2308      	movs	r3, #8
 8009216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009218:	2340      	movs	r3, #64	; 0x40
 800921a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800921c:	2300      	movs	r3, #0
 800921e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009224:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009226:	f107 0308 	add.w	r3, r7, #8
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff fe67 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fb16 	bl	8009864 <SDMMC_GetCmdResp7>
 8009238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800923a:	69fb      	ldr	r3, [r7, #28]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3720      	adds	r7, #32
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b088      	sub	sp, #32
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009252:	2337      	movs	r3, #55	; 0x37
 8009254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009256:	2340      	movs	r3, #64	; 0x40
 8009258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800925a:	2300      	movs	r3, #0
 800925c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800925e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009262:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009264:	f107 0308 	add.w	r3, r7, #8
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7ff fe48 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009270:	f241 3288 	movw	r2, #5000	; 0x1388
 8009274:	2137      	movs	r1, #55	; 0x37
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f914 	bl	80094a4 <SDMMC_GetCmdResp1>
 800927c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800927e:	69fb      	ldr	r3, [r7, #28]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3720      	adds	r7, #32
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b088      	sub	sp, #32
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800929c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800929e:	2329      	movs	r3, #41	; 0x29
 80092a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092a2:	2340      	movs	r3, #64	; 0x40
 80092a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092a6:	2300      	movs	r3, #0
 80092a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092b0:	f107 0308 	add.w	r3, r7, #8
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff fe22 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fa23 	bl	8009708 <SDMMC_GetCmdResp3>
 80092c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092c4:	69fb      	ldr	r3, [r7, #28]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3720      	adds	r7, #32
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b088      	sub	sp, #32
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80092dc:	2306      	movs	r3, #6
 80092de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092e0:	2340      	movs	r3, #64	; 0x40
 80092e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092e4:	2300      	movs	r3, #0
 80092e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092ee:	f107 0308 	add.w	r3, r7, #8
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff fe03 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80092fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80092fe:	2106      	movs	r1, #6
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f8cf 	bl	80094a4 <SDMMC_GetCmdResp1>
 8009306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009308:	69fb      	ldr	r3, [r7, #28]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3720      	adds	r7, #32
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b088      	sub	sp, #32
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800931a:	2300      	movs	r3, #0
 800931c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800931e:	2333      	movs	r3, #51	; 0x33
 8009320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009322:	2340      	movs	r3, #64	; 0x40
 8009324:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009326:	2300      	movs	r3, #0
 8009328:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800932a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800932e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009330:	f107 0308 	add.w	r3, r7, #8
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff fde2 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800933c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009340:	2133      	movs	r1, #51	; 0x33
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f8ae 	bl	80094a4 <SDMMC_GetCmdResp1>
 8009348:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800934a:	69fb      	ldr	r3, [r7, #28]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3720      	adds	r7, #32
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009360:	2302      	movs	r3, #2
 8009362:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009364:	23c0      	movs	r3, #192	; 0xc0
 8009366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009368:	2300      	movs	r3, #0
 800936a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800936c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009370:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009372:	f107 0308 	add.w	r3, r7, #8
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff fdc1 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f97c 	bl	800967c <SDMMC_GetCmdResp2>
 8009384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009386:	69fb      	ldr	r3, [r7, #28]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3720      	adds	r7, #32
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800939e:	2309      	movs	r3, #9
 80093a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80093a2:	23c0      	movs	r3, #192	; 0xc0
 80093a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093a6:	2300      	movs	r3, #0
 80093a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093b0:	f107 0308 	add.w	r3, r7, #8
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff fda2 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f95d 	bl	800967c <SDMMC_GetCmdResp2>
 80093c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093c4:	69fb      	ldr	r3, [r7, #28]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3720      	adds	r7, #32
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b088      	sub	sp, #32
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80093dc:	2303      	movs	r3, #3
 80093de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093e0:	2340      	movs	r3, #64	; 0x40
 80093e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093e4:	2300      	movs	r3, #0
 80093e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093ee:	f107 0308 	add.w	r3, r7, #8
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7ff fd83 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	2103      	movs	r1, #3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f9bc 	bl	800977c <SDMMC_GetCmdResp6>
 8009404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009406:	69fb      	ldr	r3, [r7, #28]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3720      	adds	r7, #32
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800941e:	230d      	movs	r3, #13
 8009420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009422:	2340      	movs	r3, #64	; 0x40
 8009424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009426:	2300      	movs	r3, #0
 8009428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800942a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800942e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009430:	f107 0308 	add.w	r3, r7, #8
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff fd62 	bl	8008f00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800943c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009440:	210d      	movs	r1, #13
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f82e 	bl	80094a4 <SDMMC_GetCmdResp1>
 8009448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800944a:	69fb      	ldr	r3, [r7, #28]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3720      	adds	r7, #32
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009454:	b490      	push	{r4, r7}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800945c:	4b0f      	ldr	r3, [pc, #60]	; (800949c <SDMMC_GetCmdError+0x48>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a0f      	ldr	r2, [pc, #60]	; (80094a0 <SDMMC_GetCmdError+0x4c>)
 8009462:	fba2 2303 	umull	r2, r3, r2, r3
 8009466:	0a5b      	lsrs	r3, r3, #9
 8009468:	f241 3288 	movw	r2, #5000	; 0x1388
 800946c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009470:	4623      	mov	r3, r4
 8009472:	1e5c      	subs	r4, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d102      	bne.n	800947e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800947c:	e009      	b.n	8009492 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0f2      	beq.n	8009470 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	22c5      	movs	r2, #197	; 0xc5
 800948e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bc90      	pop	{r4, r7}
 800949a:	4770      	bx	lr
 800949c:	20000000 	.word	0x20000000
 80094a0:	10624dd3 	.word	0x10624dd3

080094a4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80094a4:	b590      	push	{r4, r7, lr}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	460b      	mov	r3, r1
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80094b2:	4b6f      	ldr	r3, [pc, #444]	; (8009670 <SDMMC_GetCmdResp1+0x1cc>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a6f      	ldr	r2, [pc, #444]	; (8009674 <SDMMC_GetCmdResp1+0x1d0>)
 80094b8:	fba2 2303 	umull	r2, r3, r2, r3
 80094bc:	0a5b      	lsrs	r3, r3, #9
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80094c4:	4623      	mov	r3, r4
 80094c6:	1e5c      	subs	r4, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d102      	bne.n	80094d2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094d0:	e0c9      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d0f0      	beq.n	80094c4 <SDMMC_GetCmdResp1+0x20>
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1eb      	bne.n	80094c4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d004      	beq.n	8009502 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2204      	movs	r2, #4
 80094fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094fe:	2304      	movs	r3, #4
 8009500:	e0b1      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	d004      	beq.n	8009518 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2201      	movs	r2, #1
 8009512:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009514:	2301      	movs	r3, #1
 8009516:	e0a6      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	22c5      	movs	r2, #197	; 0xc5
 800951c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f7ff fd18 	bl	8008f54 <SDIO_GetCommandResponse>
 8009524:	4603      	mov	r3, r0
 8009526:	461a      	mov	r2, r3
 8009528:	7afb      	ldrb	r3, [r7, #11]
 800952a:	4293      	cmp	r3, r2
 800952c:	d001      	beq.n	8009532 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800952e:	2301      	movs	r3, #1
 8009530:	e099      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009532:	2100      	movs	r1, #0
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f7ff fd1a 	bl	8008f6e <SDIO_GetResponse>
 800953a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	4b4e      	ldr	r3, [pc, #312]	; (8009678 <SDMMC_GetCmdResp1+0x1d4>)
 8009540:	4013      	ands	r3, r2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009546:	2300      	movs	r3, #0
 8009548:	e08d      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	da02      	bge.n	8009556 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009550:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009554:	e087      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009560:	2340      	movs	r3, #64	; 0x40
 8009562:	e080      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800956e:	2380      	movs	r3, #128	; 0x80
 8009570:	e079      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800957c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009580:	e071      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800958c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009590:	e069      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800959c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095a0:	e061      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80095ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095b0:	e059      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095c0:	e051      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095d0:	e049      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80095dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095e0:	e041      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80095ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095f0:	e039      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80095fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009600:	e031      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800960c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009610:	e029      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800961c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009620:	e021      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800962c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009630:	e019      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800963c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009640:	e011      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800964c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009650:	e009      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	f003 0308 	and.w	r3, r3, #8
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800965c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009660:	e001      	b.n	8009666 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009666:	4618      	mov	r0, r3
 8009668:	371c      	adds	r7, #28
 800966a:	46bd      	mov	sp, r7
 800966c:	bd90      	pop	{r4, r7, pc}
 800966e:	bf00      	nop
 8009670:	20000000 	.word	0x20000000
 8009674:	10624dd3 	.word	0x10624dd3
 8009678:	fdffe008 	.word	0xfdffe008

0800967c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800967c:	b490      	push	{r4, r7}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009684:	4b1e      	ldr	r3, [pc, #120]	; (8009700 <SDMMC_GetCmdResp2+0x84>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a1e      	ldr	r2, [pc, #120]	; (8009704 <SDMMC_GetCmdResp2+0x88>)
 800968a:	fba2 2303 	umull	r2, r3, r2, r3
 800968e:	0a5b      	lsrs	r3, r3, #9
 8009690:	f241 3288 	movw	r2, #5000	; 0x1388
 8009694:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009698:	4623      	mov	r3, r4
 800969a:	1e5c      	subs	r4, r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	d102      	bne.n	80096a6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096a4:	e026      	b.n	80096f4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096aa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0f0      	beq.n	8009698 <SDMMC_GetCmdResp2+0x1c>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1eb      	bne.n	8009698 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d004      	beq.n	80096d6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2204      	movs	r2, #4
 80096d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096d2:	2304      	movs	r3, #4
 80096d4:	e00e      	b.n	80096f4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d004      	beq.n	80096ec <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e003      	b.n	80096f4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	22c5      	movs	r2, #197	; 0xc5
 80096f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bc90      	pop	{r4, r7}
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	20000000 	.word	0x20000000
 8009704:	10624dd3 	.word	0x10624dd3

08009708 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009708:	b490      	push	{r4, r7}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009710:	4b18      	ldr	r3, [pc, #96]	; (8009774 <SDMMC_GetCmdResp3+0x6c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a18      	ldr	r2, [pc, #96]	; (8009778 <SDMMC_GetCmdResp3+0x70>)
 8009716:	fba2 2303 	umull	r2, r3, r2, r3
 800971a:	0a5b      	lsrs	r3, r3, #9
 800971c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009720:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009724:	4623      	mov	r3, r4
 8009726:	1e5c      	subs	r4, r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800972c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009730:	e01b      	b.n	800976a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009736:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800973e:	2b00      	cmp	r3, #0
 8009740:	d0f0      	beq.n	8009724 <SDMMC_GetCmdResp3+0x1c>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1eb      	bne.n	8009724 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b00      	cmp	r3, #0
 8009756:	d004      	beq.n	8009762 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2204      	movs	r2, #4
 800975c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800975e:	2304      	movs	r3, #4
 8009760:	e003      	b.n	800976a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	22c5      	movs	r2, #197	; 0xc5
 8009766:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bc90      	pop	{r4, r7}
 8009772:	4770      	bx	lr
 8009774:	20000000 	.word	0x20000000
 8009778:	10624dd3 	.word	0x10624dd3

0800977c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800977c:	b590      	push	{r4, r7, lr}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	460b      	mov	r3, r1
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800978a:	4b34      	ldr	r3, [pc, #208]	; (800985c <SDMMC_GetCmdResp6+0xe0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a34      	ldr	r2, [pc, #208]	; (8009860 <SDMMC_GetCmdResp6+0xe4>)
 8009790:	fba2 2303 	umull	r2, r3, r2, r3
 8009794:	0a5b      	lsrs	r3, r3, #9
 8009796:	f241 3288 	movw	r2, #5000	; 0x1388
 800979a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800979e:	4623      	mov	r3, r4
 80097a0:	1e5c      	subs	r4, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d102      	bne.n	80097ac <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097aa:	e052      	b.n	8009852 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0f0      	beq.n	800979e <SDMMC_GetCmdResp6+0x22>
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1eb      	bne.n	800979e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ca:	f003 0304 	and.w	r3, r3, #4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d004      	beq.n	80097dc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2204      	movs	r2, #4
 80097d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097d8:	2304      	movs	r3, #4
 80097da:	e03a      	b.n	8009852 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d004      	beq.n	80097f2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2201      	movs	r2, #1
 80097ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e02f      	b.n	8009852 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f7ff fbae 	bl	8008f54 <SDIO_GetCommandResponse>
 80097f8:	4603      	mov	r3, r0
 80097fa:	461a      	mov	r2, r3
 80097fc:	7afb      	ldrb	r3, [r7, #11]
 80097fe:	4293      	cmp	r3, r2
 8009800:	d001      	beq.n	8009806 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009802:	2301      	movs	r3, #1
 8009804:	e025      	b.n	8009852 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	22c5      	movs	r2, #197	; 0xc5
 800980a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800980c:	2100      	movs	r1, #0
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f7ff fbad 	bl	8008f6e <SDIO_GetResponse>
 8009814:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d106      	bne.n	800982e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	0c1b      	lsrs	r3, r3, #16
 8009824:	b29a      	uxth	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800982a:	2300      	movs	r3, #0
 800982c:	e011      	b.n	8009852 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800983c:	e009      	b.n	8009852 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800984c:	e001      	b.n	8009852 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800984e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009852:	4618      	mov	r0, r3
 8009854:	371c      	adds	r7, #28
 8009856:	46bd      	mov	sp, r7
 8009858:	bd90      	pop	{r4, r7, pc}
 800985a:	bf00      	nop
 800985c:	20000000 	.word	0x20000000
 8009860:	10624dd3 	.word	0x10624dd3

08009864 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009864:	b490      	push	{r4, r7}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800986c:	4b21      	ldr	r3, [pc, #132]	; (80098f4 <SDMMC_GetCmdResp7+0x90>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a21      	ldr	r2, [pc, #132]	; (80098f8 <SDMMC_GetCmdResp7+0x94>)
 8009872:	fba2 2303 	umull	r2, r3, r2, r3
 8009876:	0a5b      	lsrs	r3, r3, #9
 8009878:	f241 3288 	movw	r2, #5000	; 0x1388
 800987c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009880:	4623      	mov	r3, r4
 8009882:	1e5c      	subs	r4, r3, #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	d102      	bne.n	800988e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009888:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800988c:	e02c      	b.n	80098e8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009892:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800989a:	2b00      	cmp	r3, #0
 800989c:	d0f0      	beq.n	8009880 <SDMMC_GetCmdResp7+0x1c>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1eb      	bne.n	8009880 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d004      	beq.n	80098be <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2204      	movs	r2, #4
 80098b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098ba:	2304      	movs	r3, #4
 80098bc:	e014      	b.n	80098e8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d004      	beq.n	80098d4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e009      	b.n	80098e8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2240      	movs	r2, #64	; 0x40
 80098e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80098e6:	2300      	movs	r3, #0
  
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bc90      	pop	{r4, r7}
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	20000000 	.word	0x20000000
 80098f8:	10624dd3 	.word	0x10624dd3

080098fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098fc:	b084      	sub	sp, #16
 80098fe:	b580      	push	{r7, lr}
 8009900:	b084      	sub	sp, #16
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	f107 001c 	add.w	r0, r7, #28
 800990a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	2b01      	cmp	r3, #1
 8009912:	d122      	bne.n	800995a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009918:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800993c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800993e:	2b01      	cmp	r3, #1
 8009940:	d105      	bne.n	800994e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fa4e 	bl	8009df0 <USB_CoreReset>
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]
 8009958:	e01a      	b.n	8009990 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fa42 	bl	8009df0 <USB_CoreReset>
 800996c:	4603      	mov	r3, r0
 800996e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009972:	2b00      	cmp	r3, #0
 8009974:	d106      	bne.n	8009984 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	639a      	str	r2, [r3, #56]	; 0x38
 8009982:	e005      	b.n	8009990 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009988:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	2b01      	cmp	r3, #1
 8009994:	d10b      	bne.n	80099ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f043 0206 	orr.w	r2, r3, #6
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f043 0220 	orr.w	r2, r3, #32
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099ba:	b004      	add	sp, #16
 80099bc:	4770      	bx	lr

080099be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099be:	b480      	push	{r7}
 80099c0:	b083      	sub	sp, #12
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f023 0201 	bic.w	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099f8:	78fb      	ldrb	r3, [r7, #3]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d106      	bne.n	8009a0c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	60da      	str	r2, [r3, #12]
 8009a0a:	e00b      	b.n	8009a24 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a0c:	78fb      	ldrb	r3, [r7, #3]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d106      	bne.n	8009a20 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	60da      	str	r2, [r3, #12]
 8009a1e:	e001      	b.n	8009a24 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e003      	b.n	8009a2c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009a24:	2032      	movs	r0, #50	; 0x32
 8009a26:	f7f8 ff85 	bl	8002934 <HAL_Delay>

  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a34:	b084      	sub	sp, #16
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b086      	sub	sp, #24
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a4e:	2300      	movs	r3, #0
 8009a50:	613b      	str	r3, [r7, #16]
 8009a52:	e009      	b.n	8009a68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	3340      	adds	r3, #64	; 0x40
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	2200      	movs	r2, #0
 8009a60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	3301      	adds	r3, #1
 8009a66:	613b      	str	r3, [r7, #16]
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	2b0e      	cmp	r3, #14
 8009a6c:	d9f2      	bls.n	8009a54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d11c      	bne.n	8009aae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a82:	f043 0302 	orr.w	r3, r3, #2
 8009a86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8009aac:	e00b      	b.n	8009ac6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009acc:	461a      	mov	r2, r3
 8009ace:	2300      	movs	r3, #0
 8009ad0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad8:	4619      	mov	r1, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	680b      	ldr	r3, [r1, #0]
 8009ae4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d10c      	bne.n	8009b06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d104      	bne.n	8009afc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009af2:	2100      	movs	r1, #0
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f949 	bl	8009d8c <USB_SetDevSpeed>
 8009afa:	e008      	b.n	8009b0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009afc:	2101      	movs	r1, #1
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f944 	bl	8009d8c <USB_SetDevSpeed>
 8009b04:	e003      	b.n	8009b0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b06:	2103      	movs	r1, #3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f93f 	bl	8009d8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b0e:	2110      	movs	r1, #16
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f8f3 	bl	8009cfc <USB_FlushTxFifo>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f911 	bl	8009d48 <USB_FlushRxFifo>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b36:	461a      	mov	r2, r3
 8009b38:	2300      	movs	r3, #0
 8009b3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b42:	461a      	mov	r2, r3
 8009b44:	2300      	movs	r3, #0
 8009b46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4e:	461a      	mov	r2, r3
 8009b50:	2300      	movs	r3, #0
 8009b52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b54:	2300      	movs	r3, #0
 8009b56:	613b      	str	r3, [r7, #16]
 8009b58:	e043      	b.n	8009be2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	015a      	lsls	r2, r3, #5
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	4413      	add	r3, r2
 8009b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b70:	d118      	bne.n	8009ba4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b84:	461a      	mov	r2, r3
 8009b86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b8a:	6013      	str	r3, [r2, #0]
 8009b8c:	e013      	b.n	8009bb6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ba0:	6013      	str	r3, [r2, #0]
 8009ba2:	e008      	b.n	8009bb6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	015a      	lsls	r2, r3, #5
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	3301      	adds	r3, #1
 8009be0:	613b      	str	r3, [r7, #16]
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d3b7      	bcc.n	8009b5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bea:	2300      	movs	r3, #0
 8009bec:	613b      	str	r3, [r7, #16]
 8009bee:	e043      	b.n	8009c78 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	015a      	lsls	r2, r3, #5
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c06:	d118      	bne.n	8009c3a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	015a      	lsls	r2, r3, #5
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	4413      	add	r3, r2
 8009c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	e013      	b.n	8009c4c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c30:	461a      	mov	r2, r3
 8009c32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	e008      	b.n	8009c4c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	015a      	lsls	r2, r3, #5
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c46:	461a      	mov	r2, r3
 8009c48:	2300      	movs	r3, #0
 8009c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	015a      	lsls	r2, r3, #5
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4413      	add	r3, r2
 8009c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c58:	461a      	mov	r2, r3
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	3301      	adds	r3, #1
 8009c76:	613b      	str	r3, [r7, #16]
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d3b7      	bcc.n	8009bf0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009ca0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d105      	bne.n	8009cb4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	f043 0210 	orr.w	r2, r3, #16
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	699a      	ldr	r2, [r3, #24]
 8009cb8:	4b0f      	ldr	r3, [pc, #60]	; (8009cf8 <USB_DevInit+0x2c4>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d005      	beq.n	8009cd2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	f043 0208 	orr.w	r2, r3, #8
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d107      	bne.n	8009ce8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ce0:	f043 0304 	orr.w	r3, r3, #4
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3718      	adds	r7, #24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cf4:	b004      	add	sp, #16
 8009cf6:	4770      	bx	lr
 8009cf8:	803c3800 	.word	0x803c3800

08009cfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009d06:	2300      	movs	r3, #0
 8009d08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	019b      	lsls	r3, r3, #6
 8009d0e:	f043 0220 	orr.w	r2, r3, #32
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4a09      	ldr	r2, [pc, #36]	; (8009d44 <USB_FlushTxFifo+0x48>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d901      	bls.n	8009d28 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009d24:	2303      	movs	r3, #3
 8009d26:	e006      	b.n	8009d36 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	f003 0320 	and.w	r3, r3, #32
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	d0f0      	beq.n	8009d16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	00030d40 	.word	0x00030d40

08009d48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009d50:	2300      	movs	r3, #0
 8009d52:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2210      	movs	r2, #16
 8009d58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4a09      	ldr	r2, [pc, #36]	; (8009d88 <USB_FlushRxFifo+0x40>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d901      	bls.n	8009d6c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	e006      	b.n	8009d7a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	f003 0310 	and.w	r3, r3, #16
 8009d74:	2b10      	cmp	r3, #16
 8009d76:	d0f0      	beq.n	8009d5a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	00030d40 	.word	0x00030d40

08009d8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	78fb      	ldrb	r3, [r7, #3]
 8009da6:	68f9      	ldr	r1, [r7, #12]
 8009da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dac:	4313      	orrs	r3, r2
 8009dae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b084      	sub	sp, #16
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dd8:	f043 0302 	orr.w	r3, r3, #2
 8009ddc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009dde:	2003      	movs	r0, #3
 8009de0:	f7f8 fda8 	bl	8002934 <HAL_Delay>

  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
	...

08009df0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	60fb      	str	r3, [r7, #12]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4a13      	ldr	r2, [pc, #76]	; (8009e54 <USB_CoreReset+0x64>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d901      	bls.n	8009e0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e01b      	b.n	8009e46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	daf2      	bge.n	8009dfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	f043 0201 	orr.w	r2, r3, #1
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	60fb      	str	r3, [r7, #12]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4a09      	ldr	r2, [pc, #36]	; (8009e54 <USB_CoreReset+0x64>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d901      	bls.n	8009e38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e006      	b.n	8009e46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d0f0      	beq.n	8009e26 <USB_CoreReset+0x36>

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	00030d40 	.word	0x00030d40

08009e58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009e5c:	4904      	ldr	r1, [pc, #16]	; (8009e70 <MX_FATFS_Init+0x18>)
 8009e5e:	4805      	ldr	r0, [pc, #20]	; (8009e74 <MX_FATFS_Init+0x1c>)
 8009e60:	f002 feb0 	bl	800cbc4 <FATFS_LinkDriver>
 8009e64:	4603      	mov	r3, r0
 8009e66:	461a      	mov	r2, r3
 8009e68:	4b03      	ldr	r3, [pc, #12]	; (8009e78 <MX_FATFS_Init+0x20>)
 8009e6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009e6c:	bf00      	nop
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	200018d4 	.word	0x200018d4
 8009e74:	08014aa8 	.word	0x08014aa8
 8009e78:	200018d0 	.word	0x200018d0

08009e7c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009e80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009e96:	f000 f896 	bl	8009fc6 <BSP_SD_IsDetected>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d001      	beq.n	8009ea4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e012      	b.n	8009eca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009ea4:	480b      	ldr	r0, [pc, #44]	; (8009ed4 <BSP_SD_Init+0x48>)
 8009ea6:	f7fb ff39 	bl	8005d1c <HAL_SD_Init>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009eae:	79fb      	ldrb	r3, [r7, #7]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d109      	bne.n	8009ec8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009eb8:	4806      	ldr	r0, [pc, #24]	; (8009ed4 <BSP_SD_Init+0x48>)
 8009eba:	f7fc fcf9 	bl	80068b0 <HAL_SD_ConfigWideBusOperation>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20001100 	.word	0x20001100

08009ed8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	68f9      	ldr	r1, [r7, #12]
 8009eee:	4806      	ldr	r0, [pc, #24]	; (8009f08 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009ef0:	f7fb ffa4 	bl	8005e3c <HAL_SD_ReadBlocks_DMA>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8009efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20001100 	.word	0x20001100

08009f0c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	68f9      	ldr	r1, [r7, #12]
 8009f22:	4806      	ldr	r0, [pc, #24]	; (8009f3c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009f24:	f7fc f874 	bl	8006010 <HAL_SD_WriteBlocks_DMA>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	20001100 	.word	0x20001100

08009f40 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009f44:	4805      	ldr	r0, [pc, #20]	; (8009f5c <BSP_SD_GetCardState+0x1c>)
 8009f46:	f7fc fd2f 	bl	80069a8 <HAL_SD_GetCardState>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	bf14      	ite	ne
 8009f50:	2301      	movne	r3, #1
 8009f52:	2300      	moveq	r3, #0
 8009f54:	b2db      	uxtb	r3, r3
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20001100 	.word	0x20001100

08009f60 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009f68:	6879      	ldr	r1, [r7, #4]
 8009f6a:	4803      	ldr	r0, [pc, #12]	; (8009f78 <BSP_SD_GetCardInfo+0x18>)
 8009f6c:	f7fc fc74 	bl	8006858 <HAL_SD_GetCardInfo>
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	20001100 	.word	0x20001100

08009f7c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009f84:	f000 f818 	bl	8009fb8 <BSP_SD_AbortCallback>
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009f98:	f000 f9b4 	bl	800a304 <BSP_SD_WriteCpltCallback>
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009fac:	f000 f9bc 	bl	800a328 <BSP_SD_ReadCpltCallback>
}
 8009fb0:	bf00      	nop
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	af00      	add	r7, sp, #0

}
 8009fbc:	bf00      	nop
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b082      	sub	sp, #8
 8009fca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8009fd0:	f000 f80c 	bl	8009fec <BSP_PlatformIsDetected>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	b2db      	uxtb	r3, r3
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
	...

08009fec <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009ff6:	2180      	movs	r1, #128	; 0x80
 8009ff8:	4806      	ldr	r0, [pc, #24]	; (800a014 <BSP_PlatformIsDetected+0x28>)
 8009ffa:	f7f9 faf3 	bl	80035e4 <HAL_GPIO_ReadPin>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a004:	2300      	movs	r3, #0
 800a006:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800a008:	79fb      	ldrb	r3, [r7, #7]
}  
 800a00a:	4618      	mov	r0, r3
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	40021800 	.word	0x40021800

0800a018 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a020:	f002 feba 	bl	800cd98 <osKernelGetTickCount>
 800a024:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a026:	e006      	b.n	800a036 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a028:	f7ff ff8a 	bl	8009f40 <BSP_SD_GetCardState>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a032:	2300      	movs	r3, #0
 800a034:	e009      	b.n	800a04a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a036:	f002 feaf 	bl	800cd98 <osKernelGetTickCount>
 800a03a:	4602      	mov	r2, r0
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	429a      	cmp	r2, r3
 800a044:	d8f0      	bhi.n	800a028 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a046:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
	...

0800a054 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a05e:	4b0b      	ldr	r3, [pc, #44]	; (800a08c <SD_CheckStatus+0x38>)
 800a060:	2201      	movs	r2, #1
 800a062:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a064:	f7ff ff6c 	bl	8009f40 <BSP_SD_GetCardState>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d107      	bne.n	800a07e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a06e:	4b07      	ldr	r3, [pc, #28]	; (800a08c <SD_CheckStatus+0x38>)
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	f023 0301 	bic.w	r3, r3, #1
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	4b04      	ldr	r3, [pc, #16]	; (800a08c <SD_CheckStatus+0x38>)
 800a07c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a07e:	4b03      	ldr	r3, [pc, #12]	; (800a08c <SD_CheckStatus+0x38>)
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	b2db      	uxtb	r3, r3
}
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20000009 	.word	0x20000009

0800a090 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800a09a:	4b1c      	ldr	r3, [pc, #112]	; (800a10c <SD_initialize+0x7c>)
 800a09c:	2201      	movs	r2, #1
 800a09e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800a0a0:	f002 fe22 	bl	800cce8 <osKernelGetState>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d129      	bne.n	800a0fe <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a0aa:	f7ff feef 	bl	8009e8c <BSP_SD_Init>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d107      	bne.n	800a0c4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a0b4:	79fb      	ldrb	r3, [r7, #7]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff ffcc 	bl	800a054 <SD_CheckStatus>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	461a      	mov	r2, r3
 800a0c0:	4b12      	ldr	r3, [pc, #72]	; (800a10c <SD_initialize+0x7c>)
 800a0c2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a0c4:	4b11      	ldr	r3, [pc, #68]	; (800a10c <SD_initialize+0x7c>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d017      	beq.n	800a0fe <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800a0ce:	4b10      	ldr	r3, [pc, #64]	; (800a110 <SD_initialize+0x80>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d107      	bne.n	800a0e6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2102      	movs	r1, #2
 800a0da:	200a      	movs	r0, #10
 800a0dc:	f003 f8ea 	bl	800d2b4 <osMessageQueueNew>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <SD_initialize+0x80>)
 800a0e4:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800a0e6:	4b0a      	ldr	r3, [pc, #40]	; (800a110 <SD_initialize+0x80>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d107      	bne.n	800a0fe <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800a0ee:	4b07      	ldr	r3, [pc, #28]	; (800a10c <SD_initialize+0x7c>)
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	f043 0301 	orr.w	r3, r3, #1
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	4b04      	ldr	r3, [pc, #16]	; (800a10c <SD_initialize+0x7c>)
 800a0fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a0fe:	4b03      	ldr	r3, [pc, #12]	; (800a10c <SD_initialize+0x7c>)
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	b2db      	uxtb	r3, r3
}
 800a104:	4618      	mov	r0, r3
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20000009 	.word	0x20000009
 800a110:	20000200 	.word	0x20000200

0800a114 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a11e:	79fb      	ldrb	r3, [r7, #7]
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff ff97 	bl	800a054 <SD_CheckStatus>
 800a126:	4603      	mov	r3, r0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b088      	sub	sp, #32
 800a134:	af00      	add	r7, sp, #0
 800a136:	60b9      	str	r1, [r7, #8]
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	4603      	mov	r3, r0
 800a13e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a144:	f247 5030 	movw	r0, #30000	; 0x7530
 800a148:	f7ff ff66 	bl	800a018 <SD_CheckStatusWithTimeout>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	da01      	bge.n	800a156 <SD_read+0x26>
  {
    return res;
 800a152:	7ffb      	ldrb	r3, [r7, #31]
 800a154:	e02f      	b.n	800a1b6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	68b8      	ldr	r0, [r7, #8]
 800a15c:	f7ff febc 	bl	8009ed8 <BSP_SD_ReadBlocks_DMA>
 800a160:	4603      	mov	r3, r0
 800a162:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800a164:	7fbb      	ldrb	r3, [r7, #30]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d124      	bne.n	800a1b4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a16a:	4b15      	ldr	r3, [pc, #84]	; (800a1c0 <SD_read+0x90>)
 800a16c:	6818      	ldr	r0, [r3, #0]
 800a16e:	f107 0112 	add.w	r1, r7, #18
 800a172:	f247 5330 	movw	r3, #30000	; 0x7530
 800a176:	2200      	movs	r2, #0
 800a178:	f003 f996 	bl	800d4a8 <osMessageQueueGet>
 800a17c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d117      	bne.n	800a1b4 <SD_read+0x84>
 800a184:	8a7b      	ldrh	r3, [r7, #18]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d114      	bne.n	800a1b4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800a18a:	f002 fe05 	bl	800cd98 <osKernelGetTickCount>
 800a18e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a190:	e007      	b.n	800a1a2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a192:	f7ff fed5 	bl	8009f40 <BSP_SD_GetCardState>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d102      	bne.n	800a1a2 <SD_read+0x72>
              {
                res = RES_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a1a0:	e008      	b.n	800a1b4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a1a2:	f002 fdf9 	bl	800cd98 <osKernelGetTickCount>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	f247 522f 	movw	r2, #29999	; 0x752f
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d9ee      	bls.n	800a192 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a1b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3720      	adds	r7, #32
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20000200 	.word	0x20000200

0800a1c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	607a      	str	r2, [r7, #4]
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a1d8:	f247 5030 	movw	r0, #30000	; 0x7530
 800a1dc:	f7ff ff1c 	bl	800a018 <SD_CheckStatusWithTimeout>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	da01      	bge.n	800a1ea <SD_write+0x26>
  {
    return res;
 800a1e6:	7ffb      	ldrb	r3, [r7, #31]
 800a1e8:	e02d      	b.n	800a246 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	6879      	ldr	r1, [r7, #4]
 800a1ee:	68b8      	ldr	r0, [r7, #8]
 800a1f0:	f7ff fe8c 	bl	8009f0c <BSP_SD_WriteBlocks_DMA>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d124      	bne.n	800a244 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a1fa:	4b15      	ldr	r3, [pc, #84]	; (800a250 <SD_write+0x8c>)
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	f107 0112 	add.w	r1, r7, #18
 800a202:	f247 5330 	movw	r3, #30000	; 0x7530
 800a206:	2200      	movs	r2, #0
 800a208:	f003 f94e 	bl	800d4a8 <osMessageQueueGet>
 800a20c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d117      	bne.n	800a244 <SD_write+0x80>
 800a214:	8a7b      	ldrh	r3, [r7, #18]
 800a216:	2b02      	cmp	r3, #2
 800a218:	d114      	bne.n	800a244 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800a21a:	f002 fdbd 	bl	800cd98 <osKernelGetTickCount>
 800a21e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a220:	e007      	b.n	800a232 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a222:	f7ff fe8d 	bl	8009f40 <BSP_SD_GetCardState>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d102      	bne.n	800a232 <SD_write+0x6e>
          {
            res = RES_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	77fb      	strb	r3, [r7, #31]
            break;
 800a230:	e008      	b.n	800a244 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a232:	f002 fdb1 	bl	800cd98 <osKernelGetTickCount>
 800a236:	4602      	mov	r2, r0
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a240:	4293      	cmp	r3, r2
 800a242:	d9ee      	bls.n	800a222 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800a244:	7ffb      	ldrb	r3, [r7, #31]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3720      	adds	r7, #32
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000200 	.word	0x20000200

0800a254 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08c      	sub	sp, #48	; 0x30
 800a258:	af00      	add	r7, sp, #0
 800a25a:	4603      	mov	r3, r0
 800a25c:	603a      	str	r2, [r7, #0]
 800a25e:	71fb      	strb	r3, [r7, #7]
 800a260:	460b      	mov	r3, r1
 800a262:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a26a:	4b25      	ldr	r3, [pc, #148]	; (800a300 <SD_ioctl+0xac>)
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <SD_ioctl+0x28>
 800a278:	2303      	movs	r3, #3
 800a27a:	e03c      	b.n	800a2f6 <SD_ioctl+0xa2>

  switch (cmd)
 800a27c:	79bb      	ldrb	r3, [r7, #6]
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d834      	bhi.n	800a2ec <SD_ioctl+0x98>
 800a282:	a201      	add	r2, pc, #4	; (adr r2, 800a288 <SD_ioctl+0x34>)
 800a284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a288:	0800a299 	.word	0x0800a299
 800a28c:	0800a2a1 	.word	0x0800a2a1
 800a290:	0800a2b9 	.word	0x0800a2b9
 800a294:	0800a2d3 	.word	0x0800a2d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a29e:	e028      	b.n	800a2f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a2a0:	f107 030c 	add.w	r3, r7, #12
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7ff fe5b 	bl	8009f60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a2aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a2b6:	e01c      	b.n	800a2f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a2b8:	f107 030c 	add.w	r3, r7, #12
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7ff fe4f 	bl	8009f60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a2d0:	e00f      	b.n	800a2f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a2d2:	f107 030c 	add.w	r3, r7, #12
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff fe42 	bl	8009f60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	0a5a      	lsrs	r2, r3, #9
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a2ea:	e002      	b.n	800a2f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a2ec:	2304      	movs	r3, #4
 800a2ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a2f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3730      	adds	r7, #48	; 0x30
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	20000009 	.word	0x20000009

0800a304 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800a30a:	2302      	movs	r3, #2
 800a30c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a30e:	4b05      	ldr	r3, [pc, #20]	; (800a324 <BSP_SD_WriteCpltCallback+0x20>)
 800a310:	6818      	ldr	r0, [r3, #0]
 800a312:	1db9      	adds	r1, r7, #6
 800a314:	2300      	movs	r3, #0
 800a316:	2200      	movs	r2, #0
 800a318:	f003 f852 	bl	800d3c0 <osMessageQueuePut>
#endif
}
 800a31c:	bf00      	nop
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20000200 	.word	0x20000200

0800a328 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800a32e:	2301      	movs	r3, #1
 800a330:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a332:	4b05      	ldr	r3, [pc, #20]	; (800a348 <BSP_SD_ReadCpltCallback+0x20>)
 800a334:	6818      	ldr	r0, [r3, #0]
 800a336:	1db9      	adds	r1, r7, #6
 800a338:	2300      	movs	r3, #0
 800a33a:	2200      	movs	r2, #0
 800a33c:	f003 f840 	bl	800d3c0 <osMessageQueuePut>
#endif
}
 800a340:	bf00      	nop
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	20000200 	.word	0x20000200

0800a34c <_write>:
//#define USE_BME280
//#define USE_SBUS

//we can use printf
int _write(int file, unsigned char* p, int len) // for debug through uart3
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	230a      	movs	r3, #10
 800a35e:	68b9      	ldr	r1, [r7, #8]
 800a360:	4803      	ldr	r0, [pc, #12]	; (800a370 <_write+0x24>)
 800a362:	f7fd fed2 	bl	800810a <HAL_UART_Transmit>
	return len;
 800a366:	687b      	ldr	r3, [r7, #4]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	20001344 	.word	0x20001344

0800a374 <debug_main>:
#endif

uint32_t tim;
uint32_t temp;

void debug_main(){
 800a374:	b580      	push	{r7, lr}
 800a376:	b08a      	sub	sp, #40	; 0x28
 800a378:	af00      	add	r7, sp, #0
//		printf("f_mount OK %d\r\n", retSD);
//		printf("??\r\n");
//		flag = 1;
//	}
//	printf("Test %d\r\n", retSD);
	BYTE buf[32]="hello world";
 800a37a:	4a48      	ldr	r2, [pc, #288]	; (800a49c <debug_main+0x128>)
 800a37c:	f107 0308 	add.w	r3, r7, #8
 800a380:	ca07      	ldmia	r2, {r0, r1, r2}
 800a382:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a386:	f107 0314 	add.w	r3, r7, #20
 800a38a:	2200      	movs	r2, #0
 800a38c:	601a      	str	r2, [r3, #0]
 800a38e:	605a      	str	r2, [r3, #4]
 800a390:	609a      	str	r2, [r3, #8]
 800a392:	60da      	str	r2, [r3, #12]
 800a394:	611a      	str	r2, [r3, #16]
	   uint32_t bw;

	   retSD=f_mount(&SDFatFS ,&SDPath[0],1);
 800a396:	2201      	movs	r2, #1
 800a398:	4941      	ldr	r1, [pc, #260]	; (800a4a0 <debug_main+0x12c>)
 800a39a:	4842      	ldr	r0, [pc, #264]	; (800a4a4 <debug_main+0x130>)
 800a39c:	f001 ff14 	bl	800c1c8 <f_mount>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	4b40      	ldr	r3, [pc, #256]	; (800a4a8 <debug_main+0x134>)
 800a3a6:	701a      	strb	r2, [r3, #0]

//	   printf("f_mount OK %d \n \r",retSD);

	   if(retSD==FR_OK){
 800a3a8:	4b3f      	ldr	r3, [pc, #252]	; (800a4a8 <debug_main+0x134>)
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d106      	bne.n	800a3be <debug_main+0x4a>
	      printf("f_mount OK %d \n \r",retSD);
 800a3b0:	4b3d      	ldr	r3, [pc, #244]	; (800a4a8 <debug_main+0x134>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	483d      	ldr	r0, [pc, #244]	; (800a4ac <debug_main+0x138>)
 800a3b8:	f006 fe92 	bl	80110e0 <iprintf>
 800a3bc:	e005      	b.n	800a3ca <debug_main+0x56>
	   }
	   else printf("f_mount Fail: %d \n \r",retSD);
 800a3be:	4b3a      	ldr	r3, [pc, #232]	; (800a4a8 <debug_main+0x134>)
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	483a      	ldr	r0, [pc, #232]	; (800a4b0 <debug_main+0x13c>)
 800a3c6:	f006 fe8b 	bl	80110e0 <iprintf>

	   retSD=f_open(&SDFile,"123.txt",FA_CREATE_NEW |FA_WRITE);
 800a3ca:	2206      	movs	r2, #6
 800a3cc:	4939      	ldr	r1, [pc, #228]	; (800a4b4 <debug_main+0x140>)
 800a3ce:	483a      	ldr	r0, [pc, #232]	; (800a4b8 <debug_main+0x144>)
 800a3d0:	f001 ff5e 	bl	800c290 <f_open>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	4b33      	ldr	r3, [pc, #204]	; (800a4a8 <debug_main+0x134>)
 800a3da:	701a      	strb	r2, [r3, #0]
	   if(retSD==FR_OK){
 800a3dc:	4b32      	ldr	r3, [pc, #200]	; (800a4a8 <debug_main+0x134>)
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d106      	bne.n	800a3f2 <debug_main+0x7e>
	      printf("f_open OK &d \n \r",retSD);
 800a3e4:	4b30      	ldr	r3, [pc, #192]	; (800a4a8 <debug_main+0x134>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	4834      	ldr	r0, [pc, #208]	; (800a4bc <debug_main+0x148>)
 800a3ec:	f006 fe78 	bl	80110e0 <iprintf>
 800a3f0:	e005      	b.n	800a3fe <debug_main+0x8a>
	   }
	   else printf("f_open Fail: %d \n \r",retSD);
 800a3f2:	4b2d      	ldr	r3, [pc, #180]	; (800a4a8 <debug_main+0x134>)
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4831      	ldr	r0, [pc, #196]	; (800a4c0 <debug_main+0x14c>)
 800a3fa:	f006 fe71 	bl	80110e0 <iprintf>
	   osDelay(10);
 800a3fe:	200a      	movs	r0, #10
 800a400:	f002 fd98 	bl	800cf34 <osDelay>

	   retSD=f_write(&SDFile,buf,sizeof(buf),&bw);
 800a404:	1d3b      	adds	r3, r7, #4
 800a406:	f107 0108 	add.w	r1, r7, #8
 800a40a:	2220      	movs	r2, #32
 800a40c:	482a      	ldr	r0, [pc, #168]	; (800a4b8 <debug_main+0x144>)
 800a40e:	f002 f912 	bl	800c636 <f_write>
 800a412:	4603      	mov	r3, r0
 800a414:	461a      	mov	r2, r3
 800a416:	4b24      	ldr	r3, [pc, #144]	; (800a4a8 <debug_main+0x134>)
 800a418:	701a      	strb	r2, [r3, #0]
	      if(retSD==FR_OK){
 800a41a:	4b23      	ldr	r3, [pc, #140]	; (800a4a8 <debug_main+0x134>)
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d106      	bne.n	800a430 <debug_main+0xbc>
	         printf("f_wirte OK &d \n \r",retSD);
 800a422:	4b21      	ldr	r3, [pc, #132]	; (800a4a8 <debug_main+0x134>)
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	4619      	mov	r1, r3
 800a428:	4826      	ldr	r0, [pc, #152]	; (800a4c4 <debug_main+0x150>)
 800a42a:	f006 fe59 	bl	80110e0 <iprintf>
 800a42e:	e005      	b.n	800a43c <debug_main+0xc8>
	      }
	   else printf("f_write Fail: %d \n \r",retSD);
 800a430:	4b1d      	ldr	r3, [pc, #116]	; (800a4a8 <debug_main+0x134>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	4619      	mov	r1, r3
 800a436:	4824      	ldr	r0, [pc, #144]	; (800a4c8 <debug_main+0x154>)
 800a438:	f006 fe52 	bl	80110e0 <iprintf>

	   retSD=f_close(&SDFile);
 800a43c:	481e      	ldr	r0, [pc, #120]	; (800a4b8 <debug_main+0x144>)
 800a43e:	f002 fb46 	bl	800cace <f_close>
 800a442:	4603      	mov	r3, r0
 800a444:	461a      	mov	r2, r3
 800a446:	4b18      	ldr	r3, [pc, #96]	; (800a4a8 <debug_main+0x134>)
 800a448:	701a      	strb	r2, [r3, #0]
	   if(retSD==FR_OK){
 800a44a:	4b17      	ldr	r3, [pc, #92]	; (800a4a8 <debug_main+0x134>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d106      	bne.n	800a460 <debug_main+0xec>
	      printf("f_close cplt: %d \n \r",retSD);
 800a452:	4b15      	ldr	r3, [pc, #84]	; (800a4a8 <debug_main+0x134>)
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	4619      	mov	r1, r3
 800a458:	481c      	ldr	r0, [pc, #112]	; (800a4cc <debug_main+0x158>)
 800a45a:	f006 fe41 	bl	80110e0 <iprintf>
 800a45e:	e005      	b.n	800a46c <debug_main+0xf8>
	   }
	   else printf("f_close fail: &d \n \r",retSD);
 800a460:	4b11      	ldr	r3, [pc, #68]	; (800a4a8 <debug_main+0x134>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	4619      	mov	r1, r3
 800a466:	481a      	ldr	r0, [pc, #104]	; (800a4d0 <debug_main+0x15c>)
 800a468:	f006 fe3a 	bl	80110e0 <iprintf>

	   retSD=f_mount(NULL,"0:/",1);
 800a46c:	2201      	movs	r2, #1
 800a46e:	4919      	ldr	r1, [pc, #100]	; (800a4d4 <debug_main+0x160>)
 800a470:	2000      	movs	r0, #0
 800a472:	f001 fea9 	bl	800c1c8 <f_mount>
 800a476:	4603      	mov	r3, r0
 800a478:	461a      	mov	r2, r3
 800a47a:	4b0b      	ldr	r3, [pc, #44]	; (800a4a8 <debug_main+0x134>)
 800a47c:	701a      	strb	r2, [r3, #0]

	   printf("dismount result %d \r \n",retSD);
 800a47e:	4b0a      	ldr	r3, [pc, #40]	; (800a4a8 <debug_main+0x134>)
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	4619      	mov	r1, r3
 800a484:	4814      	ldr	r0, [pc, #80]	; (800a4d8 <debug_main+0x164>)
 800a486:	f006 fe2b 	bl	80110e0 <iprintf>
	osDelay(1000);
 800a48a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a48e:	f002 fd51 	bl	800cf34 <osDelay>
//		temp = fcMicroSecond();
//		taskENTER_CRITICAL();



		osDelay(1000);
 800a492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a496:	f002 fd4d 	bl	800cf34 <osDelay>
 800a49a:	e7fa      	b.n	800a492 <debug_main+0x11e>
 800a49c:	080149cc 	.word	0x080149cc
 800a4a0:	200018d4 	.word	0x200018d4
 800a4a4:	20002908 	.word	0x20002908
 800a4a8:	200018d0 	.word	0x200018d0
 800a4ac:	080148f8 	.word	0x080148f8
 800a4b0:	0801490c 	.word	0x0801490c
 800a4b4:	08014924 	.word	0x08014924
 800a4b8:	200018d8 	.word	0x200018d8
 800a4bc:	0801492c 	.word	0x0801492c
 800a4c0:	08014940 	.word	0x08014940
 800a4c4:	08014954 	.word	0x08014954
 800a4c8:	08014968 	.word	0x08014968
 800a4cc:	08014980 	.word	0x08014980
 800a4d0:	08014998 	.word	0x08014998
 800a4d4:	080149b0 	.word	0x080149b0
 800a4d8:	080149b4 	.word	0x080149b4

0800a4dc <userMain>:
//		tim = (uint32_t)FC_usec() - last;
	}
}

void userMain(){
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af02      	add	r7, sp, #8
    setvbuf(stdout, NULL, _IONBF, 0);
 800a4e2:	4b0d      	ldr	r3, [pc, #52]	; (800a518 <userMain+0x3c>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6898      	ldr	r0, [r3, #8]
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	f006 fe83 	bl	80111f8 <setvbuf>
	HAL_TIM_Base_Start_IT(&htim2);
 800a4f2:	480a      	ldr	r0, [pc, #40]	; (800a51c <userMain+0x40>)
 800a4f4:	f7fc ff3b 	bl	800736e <HAL_TIM_Base_Start_IT>

    printf("boot complete\r\n");
 800a4f8:	4809      	ldr	r0, [pc, #36]	; (800a520 <userMain+0x44>)
 800a4fa:	f006 fe65 	bl	80111c8 <puts>

	xTaskCreate(debug_main,
 800a4fe:	2300      	movs	r3, #0
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	2301      	movs	r3, #1
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	2300      	movs	r3, #0
 800a508:	2280      	movs	r2, #128	; 0x80
 800a50a:	4906      	ldr	r1, [pc, #24]	; (800a524 <userMain+0x48>)
 800a50c:	4806      	ldr	r0, [pc, #24]	; (800a528 <userMain+0x4c>)
 800a50e:	f004 f96d 	bl	800e7ec <xTaskCreate>
				NULL,
				4,
				NULL);
#endif

}
 800a512:	bf00      	nop
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	20000010 	.word	0x20000010
 800a51c:	200012c4 	.word	0x200012c4
 800a520:	080149ec 	.word	0x080149ec
 800a524:	080149fc 	.word	0x080149fc
 800a528:	0800a375 	.word	0x0800a375

0800a52c <HAL_I2C_MemRxCpltCallback>:



//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
#endif

#ifdef USE_BME280
	BME280_i2cRxCpltCallback(hi2c);
#endif
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
#endif

	if(huart->Instance == USART2){
		// telemetry
	}
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	4603      	mov	r3, r0
 800a55c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	4a08      	ldr	r2, [pc, #32]	; (800a584 <disk_status+0x30>)
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	79fa      	ldrb	r2, [r7, #7]
 800a56c:	4905      	ldr	r1, [pc, #20]	; (800a584 <disk_status+0x30>)
 800a56e:	440a      	add	r2, r1
 800a570:	7a12      	ldrb	r2, [r2, #8]
 800a572:	4610      	mov	r0, r2
 800a574:	4798      	blx	r3
 800a576:	4603      	mov	r3, r0
 800a578:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	2000022c 	.word	0x2000022c

0800a588 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a596:	79fb      	ldrb	r3, [r7, #7]
 800a598:	4a0d      	ldr	r2, [pc, #52]	; (800a5d0 <disk_initialize+0x48>)
 800a59a:	5cd3      	ldrb	r3, [r2, r3]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d111      	bne.n	800a5c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a5a0:	79fb      	ldrb	r3, [r7, #7]
 800a5a2:	4a0b      	ldr	r2, [pc, #44]	; (800a5d0 <disk_initialize+0x48>)
 800a5a4:	2101      	movs	r1, #1
 800a5a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a5a8:	79fb      	ldrb	r3, [r7, #7]
 800a5aa:	4a09      	ldr	r2, [pc, #36]	; (800a5d0 <disk_initialize+0x48>)
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	79fa      	ldrb	r2, [r7, #7]
 800a5b6:	4906      	ldr	r1, [pc, #24]	; (800a5d0 <disk_initialize+0x48>)
 800a5b8:	440a      	add	r2, r1
 800a5ba:	7a12      	ldrb	r2, [r2, #8]
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4798      	blx	r3
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	2000022c 	.word	0x2000022c

0800a5d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a5d4:	b590      	push	{r4, r7, lr}
 800a5d6:	b087      	sub	sp, #28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	607a      	str	r2, [r7, #4]
 800a5de:	603b      	str	r3, [r7, #0]
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	4a0a      	ldr	r2, [pc, #40]	; (800a610 <disk_read+0x3c>)
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	4413      	add	r3, r2
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	689c      	ldr	r4, [r3, #8]
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
 800a5f2:	4a07      	ldr	r2, [pc, #28]	; (800a610 <disk_read+0x3c>)
 800a5f4:	4413      	add	r3, r2
 800a5f6:	7a18      	ldrb	r0, [r3, #8]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	68b9      	ldr	r1, [r7, #8]
 800a5fe:	47a0      	blx	r4
 800a600:	4603      	mov	r3, r0
 800a602:	75fb      	strb	r3, [r7, #23]
  return res;
 800a604:	7dfb      	ldrb	r3, [r7, #23]
}
 800a606:	4618      	mov	r0, r3
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd90      	pop	{r4, r7, pc}
 800a60e:	bf00      	nop
 800a610:	2000022c 	.word	0x2000022c

0800a614 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a614:	b590      	push	{r4, r7, lr}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60b9      	str	r1, [r7, #8]
 800a61c:	607a      	str	r2, [r7, #4]
 800a61e:	603b      	str	r3, [r7, #0]
 800a620:	4603      	mov	r3, r0
 800a622:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a624:	7bfb      	ldrb	r3, [r7, #15]
 800a626:	4a0a      	ldr	r2, [pc, #40]	; (800a650 <disk_write+0x3c>)
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	68dc      	ldr	r4, [r3, #12]
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	4a07      	ldr	r2, [pc, #28]	; (800a650 <disk_write+0x3c>)
 800a634:	4413      	add	r3, r2
 800a636:	7a18      	ldrb	r0, [r3, #8]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	68b9      	ldr	r1, [r7, #8]
 800a63e:	47a0      	blx	r4
 800a640:	4603      	mov	r3, r0
 800a642:	75fb      	strb	r3, [r7, #23]
  return res;
 800a644:	7dfb      	ldrb	r3, [r7, #23]
}
 800a646:	4618      	mov	r0, r3
 800a648:	371c      	adds	r7, #28
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd90      	pop	{r4, r7, pc}
 800a64e:	bf00      	nop
 800a650:	2000022c 	.word	0x2000022c

0800a654 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	603a      	str	r2, [r7, #0]
 800a65e:	71fb      	strb	r3, [r7, #7]
 800a660:	460b      	mov	r3, r1
 800a662:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a664:	79fb      	ldrb	r3, [r7, #7]
 800a666:	4a09      	ldr	r2, [pc, #36]	; (800a68c <disk_ioctl+0x38>)
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	79fa      	ldrb	r2, [r7, #7]
 800a672:	4906      	ldr	r1, [pc, #24]	; (800a68c <disk_ioctl+0x38>)
 800a674:	440a      	add	r2, r1
 800a676:	7a10      	ldrb	r0, [r2, #8]
 800a678:	79b9      	ldrb	r1, [r7, #6]
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	4798      	blx	r3
 800a67e:	4603      	mov	r3, r0
 800a680:	73fb      	strb	r3, [r7, #15]
  return res;
 800a682:	7bfb      	ldrb	r3, [r7, #15]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	2000022c 	.word	0x2000022c

0800a690 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3301      	adds	r3, #1
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a6a0:	89fb      	ldrh	r3, [r7, #14]
 800a6a2:	021b      	lsls	r3, r3, #8
 800a6a4:	b21a      	sxth	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	b21b      	sxth	r3, r3
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	b21b      	sxth	r3, r3
 800a6b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a6b2:	89fb      	ldrh	r3, [r7, #14]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3714      	adds	r7, #20
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3303      	adds	r3, #3
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	021b      	lsls	r3, r3, #8
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	3202      	adds	r2, #2
 800a6d8:	7812      	ldrb	r2, [r2, #0]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	021b      	lsls	r3, r3, #8
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	3201      	adds	r2, #1
 800a6e6:	7812      	ldrb	r2, [r2, #0]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	021b      	lsls	r3, r3, #8
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	7812      	ldrb	r2, [r2, #0]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]
	return rv;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3714      	adds	r7, #20
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr

0800a706 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a706:	b480      	push	{r7}
 800a708:	b083      	sub	sp, #12
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	460b      	mov	r3, r1
 800a710:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	1c5a      	adds	r2, r3, #1
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	887a      	ldrh	r2, [r7, #2]
 800a71a:	b2d2      	uxtb	r2, r2
 800a71c:	701a      	strb	r2, [r3, #0]
 800a71e:	887b      	ldrh	r3, [r7, #2]
 800a720:	0a1b      	lsrs	r3, r3, #8
 800a722:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	1c5a      	adds	r2, r3, #1
 800a728:	607a      	str	r2, [r7, #4]
 800a72a:	887a      	ldrh	r2, [r7, #2]
 800a72c:	b2d2      	uxtb	r2, r2
 800a72e:	701a      	strb	r2, [r3, #0]
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	1c5a      	adds	r2, r3, #1
 800a74a:	607a      	str	r2, [r7, #4]
 800a74c:	683a      	ldr	r2, [r7, #0]
 800a74e:	b2d2      	uxtb	r2, r2
 800a750:	701a      	strb	r2, [r3, #0]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	0a1b      	lsrs	r3, r3, #8
 800a756:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	1c5a      	adds	r2, r3, #1
 800a75c:	607a      	str	r2, [r7, #4]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	b2d2      	uxtb	r2, r2
 800a762:	701a      	strb	r2, [r3, #0]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	0a1b      	lsrs	r3, r3, #8
 800a768:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	1c5a      	adds	r2, r3, #1
 800a76e:	607a      	str	r2, [r7, #4]
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	b2d2      	uxtb	r2, r2
 800a774:	701a      	strb	r2, [r3, #0]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	0a1b      	lsrs	r3, r3, #8
 800a77a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	1c5a      	adds	r2, r3, #1
 800a780:	607a      	str	r2, [r7, #4]
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	b2d2      	uxtb	r2, r2
 800a786:	701a      	strb	r2, [r3, #0]
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00d      	beq.n	800a7ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	1c53      	adds	r3, r2, #1
 800a7b2:	613b      	str	r3, [r7, #16]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	1c59      	adds	r1, r3, #1
 800a7b8:	6179      	str	r1, [r7, #20]
 800a7ba:	7812      	ldrb	r2, [r2, #0]
 800a7bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	607b      	str	r3, [r7, #4]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1f1      	bne.n	800a7ae <mem_cpy+0x1a>
	}
}
 800a7ca:	bf00      	nop
 800a7cc:	371c      	adds	r7, #28
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a7d6:	b480      	push	{r7}
 800a7d8:	b087      	sub	sp, #28
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	60f8      	str	r0, [r7, #12]
 800a7de:	60b9      	str	r1, [r7, #8]
 800a7e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	1c5a      	adds	r2, r3, #1
 800a7ea:	617a      	str	r2, [r7, #20]
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	b2d2      	uxtb	r2, r2
 800a7f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	607b      	str	r3, [r7, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1f3      	bne.n	800a7e6 <mem_set+0x10>
}
 800a7fe:	bf00      	nop
 800a800:	371c      	adds	r7, #28
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a80a:	b480      	push	{r7}
 800a80c:	b089      	sub	sp, #36	; 0x24
 800a80e:	af00      	add	r7, sp, #0
 800a810:	60f8      	str	r0, [r7, #12]
 800a812:	60b9      	str	r1, [r7, #8]
 800a814:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	61fb      	str	r3, [r7, #28]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a81e:	2300      	movs	r3, #0
 800a820:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	61fa      	str	r2, [r7, #28]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	4619      	mov	r1, r3
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	61ba      	str	r2, [r7, #24]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	1acb      	subs	r3, r1, r3
 800a836:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	607b      	str	r3, [r7, #4]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <mem_cmp+0x40>
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0eb      	beq.n	800a822 <mem_cmp+0x18>

	return r;
 800a84a:	697b      	ldr	r3, [r7, #20]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3724      	adds	r7, #36	; 0x24
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a862:	e002      	b.n	800a86a <chk_chr+0x12>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3301      	adds	r3, #1
 800a868:	607b      	str	r3, [r7, #4]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d005      	beq.n	800a87e <chk_chr+0x26>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	461a      	mov	r2, r3
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d1f2      	bne.n	800a864 <chk_chr+0xc>
	return *str;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	781b      	ldrb	r3, [r3, #0]
}
 800a882:	4618      	mov	r0, r3
 800a884:	370c      	adds	r7, #12
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b082      	sub	sp, #8
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d009      	beq.n	800a8b0 <lock_fs+0x22>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f002 f9c5 	bl	800cc30 <ff_req_grant>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <lock_fs+0x22>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e000      	b.n	800a8b2 <lock_fs+0x24>
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00d      	beq.n	800a8e8 <unlock_fs+0x2e>
 800a8cc:	78fb      	ldrb	r3, [r7, #3]
 800a8ce:	2b0c      	cmp	r3, #12
 800a8d0:	d00a      	beq.n	800a8e8 <unlock_fs+0x2e>
 800a8d2:	78fb      	ldrb	r3, [r7, #3]
 800a8d4:	2b0b      	cmp	r3, #11
 800a8d6:	d007      	beq.n	800a8e8 <unlock_fs+0x2e>
 800a8d8:	78fb      	ldrb	r3, [r7, #3]
 800a8da:	2b0f      	cmp	r3, #15
 800a8dc:	d004      	beq.n	800a8e8 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f002 f9b9 	bl	800cc5a <ff_rel_grant>
	}
}
 800a8e8:	bf00      	nop
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60bb      	str	r3, [r7, #8]
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	60fb      	str	r3, [r7, #12]
 800a902:	e029      	b.n	800a958 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a904:	4a27      	ldr	r2, [pc, #156]	; (800a9a4 <chk_lock+0xb4>)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	011b      	lsls	r3, r3, #4
 800a90a:	4413      	add	r3, r2
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d01d      	beq.n	800a94e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a912:	4a24      	ldr	r2, [pc, #144]	; (800a9a4 <chk_lock+0xb4>)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	011b      	lsls	r3, r3, #4
 800a918:	4413      	add	r3, r2
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	429a      	cmp	r2, r3
 800a922:	d116      	bne.n	800a952 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a924:	4a1f      	ldr	r2, [pc, #124]	; (800a9a4 <chk_lock+0xb4>)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	011b      	lsls	r3, r3, #4
 800a92a:	4413      	add	r3, r2
 800a92c:	3304      	adds	r3, #4
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a934:	429a      	cmp	r2, r3
 800a936:	d10c      	bne.n	800a952 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a938:	4a1a      	ldr	r2, [pc, #104]	; (800a9a4 <chk_lock+0xb4>)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	011b      	lsls	r3, r3, #4
 800a93e:	4413      	add	r3, r2
 800a940:	3308      	adds	r3, #8
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a948:	429a      	cmp	r2, r3
 800a94a:	d102      	bne.n	800a952 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a94c:	e007      	b.n	800a95e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a94e:	2301      	movs	r3, #1
 800a950:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3301      	adds	r3, #1
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d9d2      	bls.n	800a904 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2b02      	cmp	r3, #2
 800a962:	d109      	bne.n	800a978 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d102      	bne.n	800a970 <chk_lock+0x80>
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d101      	bne.n	800a974 <chk_lock+0x84>
 800a970:	2300      	movs	r3, #0
 800a972:	e010      	b.n	800a996 <chk_lock+0xa6>
 800a974:	2312      	movs	r3, #18
 800a976:	e00e      	b.n	800a996 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d108      	bne.n	800a990 <chk_lock+0xa0>
 800a97e:	4a09      	ldr	r2, [pc, #36]	; (800a9a4 <chk_lock+0xb4>)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	011b      	lsls	r3, r3, #4
 800a984:	4413      	add	r3, r2
 800a986:	330c      	adds	r3, #12
 800a988:	881b      	ldrh	r3, [r3, #0]
 800a98a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a98e:	d101      	bne.n	800a994 <chk_lock+0xa4>
 800a990:	2310      	movs	r3, #16
 800a992:	e000      	b.n	800a996 <chk_lock+0xa6>
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	2000020c 	.word	0x2000020c

0800a9a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	607b      	str	r3, [r7, #4]
 800a9b2:	e002      	b.n	800a9ba <enq_lock+0x12>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	607b      	str	r3, [r7, #4]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d806      	bhi.n	800a9ce <enq_lock+0x26>
 800a9c0:	4a09      	ldr	r2, [pc, #36]	; (800a9e8 <enq_lock+0x40>)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	011b      	lsls	r3, r3, #4
 800a9c6:	4413      	add	r3, r2
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1f2      	bne.n	800a9b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	bf14      	ite	ne
 800a9d4:	2301      	movne	r3, #1
 800a9d6:	2300      	moveq	r3, #0
 800a9d8:	b2db      	uxtb	r3, r3
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	2000020c 	.word	0x2000020c

0800a9ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	60fb      	str	r3, [r7, #12]
 800a9fa:	e01f      	b.n	800aa3c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a9fc:	4a41      	ldr	r2, [pc, #260]	; (800ab04 <inc_lock+0x118>)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	011b      	lsls	r3, r3, #4
 800aa02:	4413      	add	r3, r2
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d113      	bne.n	800aa36 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800aa0e:	4a3d      	ldr	r2, [pc, #244]	; (800ab04 <inc_lock+0x118>)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	011b      	lsls	r3, r3, #4
 800aa14:	4413      	add	r3, r2
 800aa16:	3304      	adds	r3, #4
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d109      	bne.n	800aa36 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800aa22:	4a38      	ldr	r2, [pc, #224]	; (800ab04 <inc_lock+0x118>)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	011b      	lsls	r3, r3, #4
 800aa28:	4413      	add	r3, r2
 800aa2a:	3308      	adds	r3, #8
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d006      	beq.n	800aa44 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d9dc      	bls.n	800a9fc <inc_lock+0x10>
 800aa42:	e000      	b.n	800aa46 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800aa44:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d132      	bne.n	800aab2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	60fb      	str	r3, [r7, #12]
 800aa50:	e002      	b.n	800aa58 <inc_lock+0x6c>
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	3301      	adds	r3, #1
 800aa56:	60fb      	str	r3, [r7, #12]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d806      	bhi.n	800aa6c <inc_lock+0x80>
 800aa5e:	4a29      	ldr	r2, [pc, #164]	; (800ab04 <inc_lock+0x118>)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	011b      	lsls	r3, r3, #4
 800aa64:	4413      	add	r3, r2
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1f2      	bne.n	800aa52 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d101      	bne.n	800aa76 <inc_lock+0x8a>
 800aa72:	2300      	movs	r3, #0
 800aa74:	e040      	b.n	800aaf8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	4922      	ldr	r1, [pc, #136]	; (800ab04 <inc_lock+0x118>)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	011b      	lsls	r3, r3, #4
 800aa80:	440b      	add	r3, r1
 800aa82:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	689a      	ldr	r2, [r3, #8]
 800aa88:	491e      	ldr	r1, [pc, #120]	; (800ab04 <inc_lock+0x118>)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	011b      	lsls	r3, r3, #4
 800aa8e:	440b      	add	r3, r1
 800aa90:	3304      	adds	r3, #4
 800aa92:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	695a      	ldr	r2, [r3, #20]
 800aa98:	491a      	ldr	r1, [pc, #104]	; (800ab04 <inc_lock+0x118>)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	011b      	lsls	r3, r3, #4
 800aa9e:	440b      	add	r3, r1
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aaa4:	4a17      	ldr	r2, [pc, #92]	; (800ab04 <inc_lock+0x118>)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	011b      	lsls	r3, r3, #4
 800aaaa:	4413      	add	r3, r2
 800aaac:	330c      	adds	r3, #12
 800aaae:	2200      	movs	r2, #0
 800aab0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <inc_lock+0xe0>
 800aab8:	4a12      	ldr	r2, [pc, #72]	; (800ab04 <inc_lock+0x118>)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	011b      	lsls	r3, r3, #4
 800aabe:	4413      	add	r3, r2
 800aac0:	330c      	adds	r3, #12
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <inc_lock+0xe0>
 800aac8:	2300      	movs	r3, #0
 800aaca:	e015      	b.n	800aaf8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d108      	bne.n	800aae4 <inc_lock+0xf8>
 800aad2:	4a0c      	ldr	r2, [pc, #48]	; (800ab04 <inc_lock+0x118>)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	011b      	lsls	r3, r3, #4
 800aad8:	4413      	add	r3, r2
 800aada:	330c      	adds	r3, #12
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	3301      	adds	r3, #1
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	e001      	b.n	800aae8 <inc_lock+0xfc>
 800aae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aae8:	4906      	ldr	r1, [pc, #24]	; (800ab04 <inc_lock+0x118>)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	011b      	lsls	r3, r3, #4
 800aaee:	440b      	add	r3, r1
 800aaf0:	330c      	adds	r3, #12
 800aaf2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	3301      	adds	r3, #1
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	2000020c 	.word	0x2000020c

0800ab08 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3b01      	subs	r3, #1
 800ab14:	607b      	str	r3, [r7, #4]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d825      	bhi.n	800ab68 <dec_lock+0x60>
		n = Files[i].ctr;
 800ab1c:	4a17      	ldr	r2, [pc, #92]	; (800ab7c <dec_lock+0x74>)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	011b      	lsls	r3, r3, #4
 800ab22:	4413      	add	r3, r2
 800ab24:	330c      	adds	r3, #12
 800ab26:	881b      	ldrh	r3, [r3, #0]
 800ab28:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ab2a:	89fb      	ldrh	r3, [r7, #14]
 800ab2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab30:	d101      	bne.n	800ab36 <dec_lock+0x2e>
 800ab32:	2300      	movs	r3, #0
 800ab34:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ab36:	89fb      	ldrh	r3, [r7, #14]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <dec_lock+0x3a>
 800ab3c:	89fb      	ldrh	r3, [r7, #14]
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ab42:	4a0e      	ldr	r2, [pc, #56]	; (800ab7c <dec_lock+0x74>)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	011b      	lsls	r3, r3, #4
 800ab48:	4413      	add	r3, r2
 800ab4a:	330c      	adds	r3, #12
 800ab4c:	89fa      	ldrh	r2, [r7, #14]
 800ab4e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ab50:	89fb      	ldrh	r3, [r7, #14]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d105      	bne.n	800ab62 <dec_lock+0x5a>
 800ab56:	4a09      	ldr	r2, [pc, #36]	; (800ab7c <dec_lock+0x74>)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	011b      	lsls	r3, r3, #4
 800ab5c:	4413      	add	r3, r2
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	737b      	strb	r3, [r7, #13]
 800ab66:	e001      	b.n	800ab6c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ab68:	2302      	movs	r3, #2
 800ab6a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ab6c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	2000020c 	.word	0x2000020c

0800ab80 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ab88:	2300      	movs	r3, #0
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	e010      	b.n	800abb0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ab8e:	4a0d      	ldr	r2, [pc, #52]	; (800abc4 <clear_lock+0x44>)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	011b      	lsls	r3, r3, #4
 800ab94:	4413      	add	r3, r2
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d105      	bne.n	800abaa <clear_lock+0x2a>
 800ab9e:	4a09      	ldr	r2, [pc, #36]	; (800abc4 <clear_lock+0x44>)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	011b      	lsls	r3, r3, #4
 800aba4:	4413      	add	r3, r2
 800aba6:	2200      	movs	r2, #0
 800aba8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3301      	adds	r3, #1
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d9eb      	bls.n	800ab8e <clear_lock+0xe>
	}
}
 800abb6:	bf00      	nop
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	2000020c 	.word	0x2000020c

0800abc8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	78db      	ldrb	r3, [r3, #3]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d034      	beq.n	800ac46 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	7858      	ldrb	r0, [r3, #1]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800abec:	2301      	movs	r3, #1
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	f7ff fd10 	bl	800a614 <disk_write>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d002      	beq.n	800ac00 <sync_window+0x38>
			res = FR_DISK_ERR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	73fb      	strb	r3, [r7, #15]
 800abfe:	e022      	b.n	800ac46 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0a:	697a      	ldr	r2, [r7, #20]
 800ac0c:	1ad2      	subs	r2, r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d217      	bcs.n	800ac46 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	789b      	ldrb	r3, [r3, #2]
 800ac1a:	613b      	str	r3, [r7, #16]
 800ac1c:	e010      	b.n	800ac40 <sync_window+0x78>
					wsect += fs->fsize;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	4413      	add	r3, r2
 800ac26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	7858      	ldrb	r0, [r3, #1]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ac32:	2301      	movs	r3, #1
 800ac34:	697a      	ldr	r2, [r7, #20]
 800ac36:	f7ff fced 	bl	800a614 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	613b      	str	r3, [r7, #16]
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d8eb      	bhi.n	800ac1e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3718      	adds	r7, #24
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d01b      	beq.n	800aca0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7ff ffad 	bl	800abc8 <sync_window>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d113      	bne.n	800aca0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	7858      	ldrb	r0, [r3, #1]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ac82:	2301      	movs	r3, #1
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	f7ff fca5 	bl	800a5d4 <disk_read>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d004      	beq.n	800ac9a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ac90:	f04f 33ff 	mov.w	r3, #4294967295
 800ac94:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f7ff ff87 	bl	800abc8 <sync_window>
 800acba:	4603      	mov	r3, r0
 800acbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800acbe:	7bfb      	ldrb	r3, [r7, #15]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d159      	bne.n	800ad78 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	2b03      	cmp	r3, #3
 800acca:	d149      	bne.n	800ad60 <sync_fs+0xb4>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	791b      	ldrb	r3, [r3, #4]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d145      	bne.n	800ad60 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	899b      	ldrh	r3, [r3, #12]
 800acde:	461a      	mov	r2, r3
 800ace0:	2100      	movs	r1, #0
 800ace2:	f7ff fd78 	bl	800a7d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3338      	adds	r3, #56	; 0x38
 800acea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800acee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7ff fd07 	bl	800a706 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	3338      	adds	r3, #56	; 0x38
 800acfc:	4921      	ldr	r1, [pc, #132]	; (800ad84 <sync_fs+0xd8>)
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7ff fd1c 	bl	800a73c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	3338      	adds	r3, #56	; 0x38
 800ad08:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ad0c:	491e      	ldr	r1, [pc, #120]	; (800ad88 <sync_fs+0xdc>)
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff fd14 	bl	800a73c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3338      	adds	r3, #56	; 0x38
 800ad18:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	4619      	mov	r1, r3
 800ad22:	4610      	mov	r0, r2
 800ad24:	f7ff fd0a 	bl	800a73c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	3338      	adds	r3, #56	; 0x38
 800ad2c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	695b      	ldr	r3, [r3, #20]
 800ad34:	4619      	mov	r1, r3
 800ad36:	4610      	mov	r0, r2
 800ad38:	f7ff fd00 	bl	800a73c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad40:	1c5a      	adds	r2, r3, #1
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	7858      	ldrb	r0, [r3, #1]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad54:	2301      	movs	r3, #1
 800ad56:	f7ff fc5d 	bl	800a614 <disk_write>
			fs->fsi_flag = 0;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	785b      	ldrb	r3, [r3, #1]
 800ad64:	2200      	movs	r2, #0
 800ad66:	2100      	movs	r1, #0
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7ff fc73 	bl	800a654 <disk_ioctl>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d001      	beq.n	800ad78 <sync_fs+0xcc>
 800ad74:	2301      	movs	r3, #1
 800ad76:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	41615252 	.word	0x41615252
 800ad88:	61417272 	.word	0x61417272

0800ad8c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	3b02      	subs	r3, #2
 800ad9a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	69db      	ldr	r3, [r3, #28]
 800ada0:	3b02      	subs	r3, #2
 800ada2:	683a      	ldr	r2, [r7, #0]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d301      	bcc.n	800adac <clust2sect+0x20>
 800ada8:	2300      	movs	r3, #0
 800adaa:	e008      	b.n	800adbe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	895b      	ldrh	r3, [r3, #10]
 800adb0:	461a      	mov	r2, r3
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	fb03 f202 	mul.w	r2, r3, r2
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbc:	4413      	add	r3, r2
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b086      	sub	sp, #24
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d904      	bls.n	800adea <get_fat+0x20>
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	69db      	ldr	r3, [r3, #28]
 800ade4:	683a      	ldr	r2, [r7, #0]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d302      	bcc.n	800adf0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800adea:	2301      	movs	r3, #1
 800adec:	617b      	str	r3, [r7, #20]
 800adee:	e0b7      	b.n	800af60 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800adf0:	f04f 33ff 	mov.w	r3, #4294967295
 800adf4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d05a      	beq.n	800aeb4 <get_fat+0xea>
 800adfe:	2b03      	cmp	r3, #3
 800ae00:	d07d      	beq.n	800aefe <get_fat+0x134>
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	f040 80a2 	bne.w	800af4c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	085b      	lsrs	r3, r3, #1
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	4413      	add	r3, r2
 800ae14:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	899b      	ldrh	r3, [r3, #12]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae26:	4413      	add	r3, r2
 800ae28:	4619      	mov	r1, r3
 800ae2a:	6938      	ldr	r0, [r7, #16]
 800ae2c:	f7ff ff10 	bl	800ac50 <move_window>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f040 808d 	bne.w	800af52 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	60fa      	str	r2, [r7, #12]
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	8992      	ldrh	r2, [r2, #12]
 800ae42:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae46:	fb02 f201 	mul.w	r2, r2, r1
 800ae4a:	1a9b      	subs	r3, r3, r2
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ae54:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	899b      	ldrh	r3, [r3, #12]
 800ae5e:	4619      	mov	r1, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae66:	4413      	add	r3, r2
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6938      	ldr	r0, [r7, #16]
 800ae6c:	f7ff fef0 	bl	800ac50 <move_window>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d16f      	bne.n	800af56 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	899b      	ldrh	r3, [r3, #12]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae82:	fb02 f201 	mul.w	r2, r2, r1
 800ae86:	1a9b      	subs	r3, r3, r2
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ae90:	021b      	lsls	r3, r3, #8
 800ae92:	461a      	mov	r2, r3
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d002      	beq.n	800aeaa <get_fat+0xe0>
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	091b      	lsrs	r3, r3, #4
 800aea8:	e002      	b.n	800aeb0 <get_fat+0xe6>
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aeb0:	617b      	str	r3, [r7, #20]
			break;
 800aeb2:	e055      	b.n	800af60 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	899b      	ldrh	r3, [r3, #12]
 800aebc:	085b      	lsrs	r3, r3, #1
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	4619      	mov	r1, r3
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	fbb3 f3f1 	udiv	r3, r3, r1
 800aec8:	4413      	add	r3, r2
 800aeca:	4619      	mov	r1, r3
 800aecc:	6938      	ldr	r0, [r7, #16]
 800aece:	f7ff febf 	bl	800ac50 <move_window>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d140      	bne.n	800af5a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	005b      	lsls	r3, r3, #1
 800aee2:	693a      	ldr	r2, [r7, #16]
 800aee4:	8992      	ldrh	r2, [r2, #12]
 800aee6:	fbb3 f0f2 	udiv	r0, r3, r2
 800aeea:	fb02 f200 	mul.w	r2, r2, r0
 800aeee:	1a9b      	subs	r3, r3, r2
 800aef0:	440b      	add	r3, r1
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7ff fbcc 	bl	800a690 <ld_word>
 800aef8:	4603      	mov	r3, r0
 800aefa:	617b      	str	r3, [r7, #20]
			break;
 800aefc:	e030      	b.n	800af60 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	899b      	ldrh	r3, [r3, #12]
 800af06:	089b      	lsrs	r3, r3, #2
 800af08:	b29b      	uxth	r3, r3
 800af0a:	4619      	mov	r1, r3
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800af12:	4413      	add	r3, r2
 800af14:	4619      	mov	r1, r3
 800af16:	6938      	ldr	r0, [r7, #16]
 800af18:	f7ff fe9a 	bl	800ac50 <move_window>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d11d      	bne.n	800af5e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	8992      	ldrh	r2, [r2, #12]
 800af30:	fbb3 f0f2 	udiv	r0, r3, r2
 800af34:	fb02 f200 	mul.w	r2, r2, r0
 800af38:	1a9b      	subs	r3, r3, r2
 800af3a:	440b      	add	r3, r1
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7ff fbbf 	bl	800a6c0 <ld_dword>
 800af42:	4603      	mov	r3, r0
 800af44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800af48:	617b      	str	r3, [r7, #20]
			break;
 800af4a:	e009      	b.n	800af60 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800af4c:	2301      	movs	r3, #1
 800af4e:	617b      	str	r3, [r7, #20]
 800af50:	e006      	b.n	800af60 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af52:	bf00      	nop
 800af54:	e004      	b.n	800af60 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af56:	bf00      	nop
 800af58:	e002      	b.n	800af60 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800af5a:	bf00      	nop
 800af5c:	e000      	b.n	800af60 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800af5e:	bf00      	nop
		}
	}

	return val;
 800af60:	697b      	ldr	r3, [r7, #20]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3718      	adds	r7, #24
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800af6a:	b590      	push	{r4, r7, lr}
 800af6c:	b089      	sub	sp, #36	; 0x24
 800af6e:	af00      	add	r7, sp, #0
 800af70:	60f8      	str	r0, [r7, #12]
 800af72:	60b9      	str	r1, [r7, #8]
 800af74:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800af76:	2302      	movs	r3, #2
 800af78:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	f240 8106 	bls.w	800b18e <put_fat+0x224>
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	429a      	cmp	r2, r3
 800af8a:	f080 8100 	bcs.w	800b18e <put_fat+0x224>
		switch (fs->fs_type) {
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b02      	cmp	r3, #2
 800af94:	f000 8088 	beq.w	800b0a8 <put_fat+0x13e>
 800af98:	2b03      	cmp	r3, #3
 800af9a:	f000 80b0 	beq.w	800b0fe <put_fat+0x194>
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	f040 80f5 	bne.w	800b18e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	61bb      	str	r3, [r7, #24]
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	085b      	lsrs	r3, r3, #1
 800afac:	69ba      	ldr	r2, [r7, #24]
 800afae:	4413      	add	r3, r2
 800afb0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	899b      	ldrh	r3, [r3, #12]
 800afba:	4619      	mov	r1, r3
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	fbb3 f3f1 	udiv	r3, r3, r1
 800afc2:	4413      	add	r3, r2
 800afc4:	4619      	mov	r1, r3
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f7ff fe42 	bl	800ac50 <move_window>
 800afcc:	4603      	mov	r3, r0
 800afce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800afd0:	7ffb      	ldrb	r3, [r7, #31]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f040 80d4 	bne.w	800b180 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	61ba      	str	r2, [r7, #24]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	8992      	ldrh	r2, [r2, #12]
 800afe8:	fbb3 f0f2 	udiv	r0, r3, r2
 800afec:	fb02 f200 	mul.w	r2, r2, r0
 800aff0:	1a9b      	subs	r3, r3, r2
 800aff2:	440b      	add	r3, r1
 800aff4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00d      	beq.n	800b01c <put_fat+0xb2>
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	b25b      	sxtb	r3, r3
 800b006:	f003 030f 	and.w	r3, r3, #15
 800b00a:	b25a      	sxtb	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	011b      	lsls	r3, r3, #4
 800b012:	b25b      	sxtb	r3, r3
 800b014:	4313      	orrs	r3, r2
 800b016:	b25b      	sxtb	r3, r3
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	e001      	b.n	800b020 <put_fat+0xb6>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2201      	movs	r2, #1
 800b028:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	899b      	ldrh	r3, [r3, #12]
 800b032:	4619      	mov	r1, r3
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	fbb3 f3f1 	udiv	r3, r3, r1
 800b03a:	4413      	add	r3, r2
 800b03c:	4619      	mov	r1, r3
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7ff fe06 	bl	800ac50 <move_window>
 800b044:	4603      	mov	r3, r0
 800b046:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b048:	7ffb      	ldrb	r3, [r7, #31]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f040 809a 	bne.w	800b184 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	899b      	ldrh	r3, [r3, #12]
 800b05a:	461a      	mov	r2, r3
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b062:	fb02 f200 	mul.w	r2, r2, r0
 800b066:	1a9b      	subs	r3, r3, r2
 800b068:	440b      	add	r3, r1
 800b06a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	2b00      	cmp	r3, #0
 800b074:	d003      	beq.n	800b07e <put_fat+0x114>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	091b      	lsrs	r3, r3, #4
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	e00e      	b.n	800b09c <put_fat+0x132>
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	b25b      	sxtb	r3, r3
 800b084:	f023 030f 	bic.w	r3, r3, #15
 800b088:	b25a      	sxtb	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	0a1b      	lsrs	r3, r3, #8
 800b08e:	b25b      	sxtb	r3, r3
 800b090:	f003 030f 	and.w	r3, r3, #15
 800b094:	b25b      	sxtb	r3, r3
 800b096:	4313      	orrs	r3, r2
 800b098:	b25b      	sxtb	r3, r3
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	70da      	strb	r2, [r3, #3]
			break;
 800b0a6:	e072      	b.n	800b18e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	899b      	ldrh	r3, [r3, #12]
 800b0b0:	085b      	lsrs	r3, r3, #1
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0bc:	4413      	add	r3, r2
 800b0be:	4619      	mov	r1, r3
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f7ff fdc5 	bl	800ac50 <move_window>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b0ca:	7ffb      	ldrb	r3, [r7, #31]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d15b      	bne.n	800b188 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	005b      	lsls	r3, r3, #1
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	8992      	ldrh	r2, [r2, #12]
 800b0de:	fbb3 f0f2 	udiv	r0, r3, r2
 800b0e2:	fb02 f200 	mul.w	r2, r2, r0
 800b0e6:	1a9b      	subs	r3, r3, r2
 800b0e8:	440b      	add	r3, r1
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	b292      	uxth	r2, r2
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7ff fb08 	bl	800a706 <st_word>
			fs->wflag = 1;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	70da      	strb	r2, [r3, #3]
			break;
 800b0fc:	e047      	b.n	800b18e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	899b      	ldrh	r3, [r3, #12]
 800b106:	089b      	lsrs	r3, r3, #2
 800b108:	b29b      	uxth	r3, r3
 800b10a:	4619      	mov	r1, r3
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b112:	4413      	add	r3, r2
 800b114:	4619      	mov	r1, r3
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f7ff fd9a 	bl	800ac50 <move_window>
 800b11c:	4603      	mov	r3, r0
 800b11e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b120:	7ffb      	ldrb	r3, [r7, #31]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d132      	bne.n	800b18c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	8992      	ldrh	r2, [r2, #12]
 800b13a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b13e:	fb02 f200 	mul.w	r2, r2, r0
 800b142:	1a9b      	subs	r3, r3, r2
 800b144:	440b      	add	r3, r1
 800b146:	4618      	mov	r0, r3
 800b148:	f7ff faba 	bl	800a6c0 <ld_dword>
 800b14c:	4603      	mov	r3, r0
 800b14e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b152:	4323      	orrs	r3, r4
 800b154:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	8992      	ldrh	r2, [r2, #12]
 800b164:	fbb3 f0f2 	udiv	r0, r3, r2
 800b168:	fb02 f200 	mul.w	r2, r2, r0
 800b16c:	1a9b      	subs	r3, r3, r2
 800b16e:	440b      	add	r3, r1
 800b170:	6879      	ldr	r1, [r7, #4]
 800b172:	4618      	mov	r0, r3
 800b174:	f7ff fae2 	bl	800a73c <st_dword>
			fs->wflag = 1;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2201      	movs	r2, #1
 800b17c:	70da      	strb	r2, [r3, #3]
			break;
 800b17e:	e006      	b.n	800b18e <put_fat+0x224>
			if (res != FR_OK) break;
 800b180:	bf00      	nop
 800b182:	e004      	b.n	800b18e <put_fat+0x224>
			if (res != FR_OK) break;
 800b184:	bf00      	nop
 800b186:	e002      	b.n	800b18e <put_fat+0x224>
			if (res != FR_OK) break;
 800b188:	bf00      	nop
 800b18a:	e000      	b.n	800b18e <put_fat+0x224>
			if (res != FR_OK) break;
 800b18c:	bf00      	nop
		}
	}
	return res;
 800b18e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3724      	adds	r7, #36	; 0x24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd90      	pop	{r4, r7, pc}

0800b198 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d904      	bls.n	800b1be <remove_chain+0x26>
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d301      	bcc.n	800b1c2 <remove_chain+0x2a>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	e04b      	b.n	800b25a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00c      	beq.n	800b1e2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1cc:	6879      	ldr	r1, [r7, #4]
 800b1ce:	69b8      	ldr	r0, [r7, #24]
 800b1d0:	f7ff fecb 	bl	800af6a <put_fat>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b1d8:	7ffb      	ldrb	r3, [r7, #31]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <remove_chain+0x4a>
 800b1de:	7ffb      	ldrb	r3, [r7, #31]
 800b1e0:	e03b      	b.n	800b25a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b1e2:	68b9      	ldr	r1, [r7, #8]
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f7ff fdf0 	bl	800adca <get_fat>
 800b1ea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d031      	beq.n	800b256 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d101      	bne.n	800b1fc <remove_chain+0x64>
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	e02e      	b.n	800b25a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b202:	d101      	bne.n	800b208 <remove_chain+0x70>
 800b204:	2301      	movs	r3, #1
 800b206:	e028      	b.n	800b25a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b208:	2200      	movs	r2, #0
 800b20a:	68b9      	ldr	r1, [r7, #8]
 800b20c:	69b8      	ldr	r0, [r7, #24]
 800b20e:	f7ff feac 	bl	800af6a <put_fat>
 800b212:	4603      	mov	r3, r0
 800b214:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b216:	7ffb      	ldrb	r3, [r7, #31]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <remove_chain+0x88>
 800b21c:	7ffb      	ldrb	r3, [r7, #31]
 800b21e:	e01c      	b.n	800b25a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	699a      	ldr	r2, [r3, #24]
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	69db      	ldr	r3, [r3, #28]
 800b228:	3b02      	subs	r3, #2
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d20b      	bcs.n	800b246 <remove_chain+0xae>
			fs->free_clst++;
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	699b      	ldr	r3, [r3, #24]
 800b232:	1c5a      	adds	r2, r3, #1
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	791b      	ldrb	r3, [r3, #4]
 800b23c:	f043 0301 	orr.w	r3, r3, #1
 800b240:	b2da      	uxtb	r2, r3
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	69db      	ldr	r3, [r3, #28]
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	429a      	cmp	r2, r3
 800b252:	d3c6      	bcc.n	800b1e2 <remove_chain+0x4a>
 800b254:	e000      	b.n	800b258 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b256:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3720      	adds	r7, #32
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b088      	sub	sp, #32
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10d      	bne.n	800b294 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d004      	beq.n	800b28e <create_chain+0x2c>
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	69db      	ldr	r3, [r3, #28]
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d31b      	bcc.n	800b2c6 <create_chain+0x64>
 800b28e:	2301      	movs	r3, #1
 800b290:	61bb      	str	r3, [r7, #24]
 800b292:	e018      	b.n	800b2c6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7ff fd97 	bl	800adca <get_fat>
 800b29c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d801      	bhi.n	800b2a8 <create_chain+0x46>
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e070      	b.n	800b38a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ae:	d101      	bne.n	800b2b4 <create_chain+0x52>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	e06a      	b.n	800b38a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	69db      	ldr	r3, [r3, #28]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d201      	bcs.n	800b2c2 <create_chain+0x60>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	e063      	b.n	800b38a <create_chain+0x128>
		scl = clst;
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	69db      	ldr	r3, [r3, #28]
 800b2d4:	69fa      	ldr	r2, [r7, #28]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d307      	bcc.n	800b2ea <create_chain+0x88>
				ncl = 2;
 800b2da:	2302      	movs	r3, #2
 800b2dc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b2de:	69fa      	ldr	r2, [r7, #28]
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d901      	bls.n	800b2ea <create_chain+0x88>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	e04f      	b.n	800b38a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b2ea:	69f9      	ldr	r1, [r7, #28]
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7ff fd6c 	bl	800adca <get_fat>
 800b2f2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00e      	beq.n	800b318 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d003      	beq.n	800b308 <create_chain+0xa6>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b306:	d101      	bne.n	800b30c <create_chain+0xaa>
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	e03e      	b.n	800b38a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b30c:	69fa      	ldr	r2, [r7, #28]
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	429a      	cmp	r2, r3
 800b312:	d1da      	bne.n	800b2ca <create_chain+0x68>
 800b314:	2300      	movs	r3, #0
 800b316:	e038      	b.n	800b38a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b318:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b31a:	f04f 32ff 	mov.w	r2, #4294967295
 800b31e:	69f9      	ldr	r1, [r7, #28]
 800b320:	6938      	ldr	r0, [r7, #16]
 800b322:	f7ff fe22 	bl	800af6a <put_fat>
 800b326:	4603      	mov	r3, r0
 800b328:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b32a:	7dfb      	ldrb	r3, [r7, #23]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d109      	bne.n	800b344 <create_chain+0xe2>
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d006      	beq.n	800b344 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b336:	69fa      	ldr	r2, [r7, #28]
 800b338:	6839      	ldr	r1, [r7, #0]
 800b33a:	6938      	ldr	r0, [r7, #16]
 800b33c:	f7ff fe15 	bl	800af6a <put_fat>
 800b340:	4603      	mov	r3, r0
 800b342:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b344:	7dfb      	ldrb	r3, [r7, #23]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d116      	bne.n	800b378 <create_chain+0x116>
		fs->last_clst = ncl;
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	69fa      	ldr	r2, [r7, #28]
 800b34e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	699a      	ldr	r2, [r3, #24]
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	3b02      	subs	r3, #2
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d804      	bhi.n	800b368 <create_chain+0x106>
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	1e5a      	subs	r2, r3, #1
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	791b      	ldrb	r3, [r3, #4]
 800b36c:	f043 0301 	orr.w	r3, r3, #1
 800b370:	b2da      	uxtb	r2, r3
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	711a      	strb	r2, [r3, #4]
 800b376:	e007      	b.n	800b388 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d102      	bne.n	800b384 <create_chain+0x122>
 800b37e:	f04f 33ff 	mov.w	r3, #4294967295
 800b382:	e000      	b.n	800b386 <create_chain+0x124>
 800b384:	2301      	movs	r3, #1
 800b386:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b388:	69fb      	ldr	r3, [r7, #28]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3720      	adds	r7, #32
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b392:	b480      	push	{r7}
 800b394:	b087      	sub	sp, #28
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	899b      	ldrh	r3, [r3, #12]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	8952      	ldrh	r2, [r2, #10]
 800b3ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	1d1a      	adds	r2, r3, #4
 800b3c4:	613a      	str	r2, [r7, #16]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <clmt_clust+0x42>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	e010      	b.n	800b3f6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d307      	bcc.n	800b3ec <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b3dc:	697a      	ldr	r2, [r7, #20]
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	617b      	str	r3, [r7, #20]
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b3ea:	e7e9      	b.n	800b3c0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b3ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	4413      	add	r3, r2
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	371c      	adds	r7, #28
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b086      	sub	sp, #24
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b418:	d204      	bcs.n	800b424 <dir_sdi+0x22>
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	f003 031f 	and.w	r3, r3, #31
 800b420:	2b00      	cmp	r3, #0
 800b422:	d001      	beq.n	800b428 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b424:	2302      	movs	r3, #2
 800b426:	e071      	b.n	800b50c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d106      	bne.n	800b448 <dir_sdi+0x46>
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d902      	bls.n	800b448 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b446:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10c      	bne.n	800b468 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	095b      	lsrs	r3, r3, #5
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	8912      	ldrh	r2, [r2, #8]
 800b456:	4293      	cmp	r3, r2
 800b458:	d301      	bcc.n	800b45e <dir_sdi+0x5c>
 800b45a:	2302      	movs	r3, #2
 800b45c:	e056      	b.n	800b50c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	61da      	str	r2, [r3, #28]
 800b466:	e02d      	b.n	800b4c4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	895b      	ldrh	r3, [r3, #10]
 800b46c:	461a      	mov	r2, r3
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	899b      	ldrh	r3, [r3, #12]
 800b472:	fb03 f302 	mul.w	r3, r3, r2
 800b476:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b478:	e019      	b.n	800b4ae <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6979      	ldr	r1, [r7, #20]
 800b47e:	4618      	mov	r0, r3
 800b480:	f7ff fca3 	bl	800adca <get_fat>
 800b484:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48c:	d101      	bne.n	800b492 <dir_sdi+0x90>
 800b48e:	2301      	movs	r3, #1
 800b490:	e03c      	b.n	800b50c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d904      	bls.n	800b4a2 <dir_sdi+0xa0>
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	69db      	ldr	r3, [r3, #28]
 800b49c:	697a      	ldr	r2, [r7, #20]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d301      	bcc.n	800b4a6 <dir_sdi+0xa4>
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	e032      	b.n	800b50c <dir_sdi+0x10a>
			ofs -= csz;
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d2e1      	bcs.n	800b47a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b4b6:	6979      	ldr	r1, [r7, #20]
 800b4b8:	6938      	ldr	r0, [r7, #16]
 800b4ba:	f7ff fc67 	bl	800ad8c <clust2sect>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	697a      	ldr	r2, [r7, #20]
 800b4c8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <dir_sdi+0xd4>
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	e01a      	b.n	800b50c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	69da      	ldr	r2, [r3, #28]
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	899b      	ldrh	r3, [r3, #12]
 800b4de:	4619      	mov	r1, r3
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4e6:	441a      	add	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	899b      	ldrh	r3, [r3, #12]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4fe:	fb02 f200 	mul.w	r2, r2, r0
 800b502:	1a9b      	subs	r3, r3, r2
 800b504:	18ca      	adds	r2, r1, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	695b      	ldr	r3, [r3, #20]
 800b528:	3320      	adds	r3, #32
 800b52a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	69db      	ldr	r3, [r3, #28]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d003      	beq.n	800b53c <dir_next+0x28>
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b53a:	d301      	bcc.n	800b540 <dir_next+0x2c>
 800b53c:	2304      	movs	r3, #4
 800b53e:	e0bb      	b.n	800b6b8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	899b      	ldrh	r3, [r3, #12]
 800b544:	461a      	mov	r2, r3
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	fbb3 f1f2 	udiv	r1, r3, r2
 800b54c:	fb02 f201 	mul.w	r2, r2, r1
 800b550:	1a9b      	subs	r3, r3, r2
 800b552:	2b00      	cmp	r3, #0
 800b554:	f040 809d 	bne.w	800b692 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	69db      	ldr	r3, [r3, #28]
 800b55c:	1c5a      	adds	r2, r3, #1
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	699b      	ldr	r3, [r3, #24]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10b      	bne.n	800b582 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	095b      	lsrs	r3, r3, #5
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	8912      	ldrh	r2, [r2, #8]
 800b572:	4293      	cmp	r3, r2
 800b574:	f0c0 808d 	bcc.w	800b692 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	61da      	str	r2, [r3, #28]
 800b57e:	2304      	movs	r3, #4
 800b580:	e09a      	b.n	800b6b8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	899b      	ldrh	r3, [r3, #12]
 800b586:	461a      	mov	r2, r3
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	8952      	ldrh	r2, [r2, #10]
 800b592:	3a01      	subs	r2, #1
 800b594:	4013      	ands	r3, r2
 800b596:	2b00      	cmp	r3, #0
 800b598:	d17b      	bne.n	800b692 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4610      	mov	r0, r2
 800b5a4:	f7ff fc11 	bl	800adca <get_fat>
 800b5a8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d801      	bhi.n	800b5b4 <dir_next+0xa0>
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	e081      	b.n	800b6b8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ba:	d101      	bne.n	800b5c0 <dir_next+0xac>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e07b      	b.n	800b6b8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	69db      	ldr	r3, [r3, #28]
 800b5c4:	697a      	ldr	r2, [r7, #20]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d359      	bcc.n	800b67e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d104      	bne.n	800b5da <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	61da      	str	r2, [r3, #28]
 800b5d6:	2304      	movs	r3, #4
 800b5d8:	e06e      	b.n	800b6b8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f7ff fe3d 	bl	800b262 <create_chain>
 800b5e8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d101      	bne.n	800b5f4 <dir_next+0xe0>
 800b5f0:	2307      	movs	r3, #7
 800b5f2:	e061      	b.n	800b6b8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d101      	bne.n	800b5fe <dir_next+0xea>
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	e05c      	b.n	800b6b8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b604:	d101      	bne.n	800b60a <dir_next+0xf6>
 800b606:	2301      	movs	r3, #1
 800b608:	e056      	b.n	800b6b8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f7ff fadc 	bl	800abc8 <sync_window>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <dir_next+0x106>
 800b616:	2301      	movs	r3, #1
 800b618:	e04e      	b.n	800b6b8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	899b      	ldrh	r3, [r3, #12]
 800b624:	461a      	mov	r2, r3
 800b626:	2100      	movs	r1, #0
 800b628:	f7ff f8d5 	bl	800a7d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b62c:	2300      	movs	r3, #0
 800b62e:	613b      	str	r3, [r7, #16]
 800b630:	6979      	ldr	r1, [r7, #20]
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f7ff fbaa 	bl	800ad8c <clust2sect>
 800b638:	4602      	mov	r2, r0
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	635a      	str	r2, [r3, #52]	; 0x34
 800b63e:	e012      	b.n	800b666 <dir_next+0x152>
						fs->wflag = 1;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2201      	movs	r2, #1
 800b644:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f7ff fabe 	bl	800abc8 <sync_window>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d001      	beq.n	800b656 <dir_next+0x142>
 800b652:	2301      	movs	r3, #1
 800b654:	e030      	b.n	800b6b8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	3301      	adds	r3, #1
 800b65a:	613b      	str	r3, [r7, #16]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b660:	1c5a      	adds	r2, r3, #1
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	635a      	str	r2, [r3, #52]	; 0x34
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	895b      	ldrh	r3, [r3, #10]
 800b66a:	461a      	mov	r2, r3
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	4293      	cmp	r3, r2
 800b670:	d3e6      	bcc.n	800b640 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	1ad2      	subs	r2, r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	697a      	ldr	r2, [r7, #20]
 800b682:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b684:	6979      	ldr	r1, [r7, #20]
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f7ff fb80 	bl	800ad8c <clust2sect>
 800b68c:	4602      	mov	r2, r0
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	899b      	ldrh	r3, [r3, #12]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6aa:	fb02 f200 	mul.w	r2, r2, r0
 800b6ae:	1a9b      	subs	r3, r3, r2
 800b6b0:	18ca      	adds	r2, r1, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff fe95 	bl	800b402 <dir_sdi>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b6dc:	7dfb      	ldrb	r3, [r7, #23]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d12b      	bne.n	800b73a <dir_alloc+0x7a>
		n = 0;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	69db      	ldr	r3, [r3, #28]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f7ff faaf 	bl	800ac50 <move_window>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d11d      	bne.n	800b738 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	2be5      	cmp	r3, #229	; 0xe5
 800b704:	d004      	beq.n	800b710 <dir_alloc+0x50>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a1b      	ldr	r3, [r3, #32]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d107      	bne.n	800b720 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	3301      	adds	r3, #1
 800b714:	613b      	str	r3, [r7, #16]
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d102      	bne.n	800b724 <dir_alloc+0x64>
 800b71e:	e00c      	b.n	800b73a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b720:	2300      	movs	r3, #0
 800b722:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b724:	2101      	movs	r1, #1
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7ff fef4 	bl	800b514 <dir_next>
 800b72c:	4603      	mov	r3, r0
 800b72e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b730:	7dfb      	ldrb	r3, [r7, #23]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d0d7      	beq.n	800b6e6 <dir_alloc+0x26>
 800b736:	e000      	b.n	800b73a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b738:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
 800b73c:	2b04      	cmp	r3, #4
 800b73e:	d101      	bne.n	800b744 <dir_alloc+0x84>
 800b740:	2307      	movs	r3, #7
 800b742:	75fb      	strb	r3, [r7, #23]
	return res;
 800b744:	7dfb      	ldrb	r3, [r7, #23]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b084      	sub	sp, #16
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	331a      	adds	r3, #26
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fe ff97 	bl	800a690 <ld_word>
 800b762:	4603      	mov	r3, r0
 800b764:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d109      	bne.n	800b782 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	3314      	adds	r3, #20
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe ff8c 	bl	800a690 <ld_word>
 800b778:	4603      	mov	r3, r0
 800b77a:	041b      	lsls	r3, r3, #16
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4313      	orrs	r3, r2
 800b780:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b782:	68fb      	ldr	r3, [r7, #12]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	331a      	adds	r3, #26
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	b292      	uxth	r2, r2
 800b7a0:	4611      	mov	r1, r2
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fe ffaf 	bl	800a706 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	2b03      	cmp	r3, #3
 800b7ae:	d109      	bne.n	800b7c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	f103 0214 	add.w	r2, r3, #20
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	0c1b      	lsrs	r3, r3, #16
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4610      	mov	r0, r2
 800b7c0:	f7fe ffa1 	bl	800a706 <st_word>
	}
}
 800b7c4:	bf00      	nop
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b7da:	2100      	movs	r1, #0
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff fe10 	bl	800b402 <dir_sdi>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b7e6:	7dfb      	ldrb	r3, [r7, #23]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <dir_find+0x24>
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	e03e      	b.n	800b86e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	69db      	ldr	r3, [r3, #28]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6938      	ldr	r0, [r7, #16]
 800b7f8:	f7ff fa2a 	bl	800ac50 <move_window>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b800:	7dfb      	ldrb	r3, [r7, #23]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d12f      	bne.n	800b866 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b80e:	7bfb      	ldrb	r3, [r7, #15]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d102      	bne.n	800b81a <dir_find+0x4e>
 800b814:	2304      	movs	r3, #4
 800b816:	75fb      	strb	r3, [r7, #23]
 800b818:	e028      	b.n	800b86c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	330b      	adds	r3, #11
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b826:	b2da      	uxtb	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	330b      	adds	r3, #11
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	f003 0308 	and.w	r3, r3, #8
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10a      	bne.n	800b852 <dir_find+0x86>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a18      	ldr	r0, [r3, #32]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	3324      	adds	r3, #36	; 0x24
 800b844:	220b      	movs	r2, #11
 800b846:	4619      	mov	r1, r3
 800b848:	f7fe ffdf 	bl	800a80a <mem_cmp>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00b      	beq.n	800b86a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b852:	2100      	movs	r1, #0
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7ff fe5d 	bl	800b514 <dir_next>
 800b85a:	4603      	mov	r3, r0
 800b85c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d0c5      	beq.n	800b7f0 <dir_find+0x24>
 800b864:	e002      	b.n	800b86c <dir_find+0xa0>
		if (res != FR_OK) break;
 800b866:	bf00      	nop
 800b868:	e000      	b.n	800b86c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b86a:	bf00      	nop

	return res;
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b084      	sub	sp, #16
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b884:	2101      	movs	r1, #1
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7ff ff1a 	bl	800b6c0 <dir_alloc>
 800b88c:	4603      	mov	r3, r0
 800b88e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d11c      	bne.n	800b8d0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	4619      	mov	r1, r3
 800b89c:	68b8      	ldr	r0, [r7, #8]
 800b89e:	f7ff f9d7 	bl	800ac50 <move_window>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b8a6:	7bfb      	ldrb	r3, [r7, #15]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d111      	bne.n	800b8d0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6a1b      	ldr	r3, [r3, #32]
 800b8b0:	2220      	movs	r2, #32
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fe ff8e 	bl	800a7d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a18      	ldr	r0, [r3, #32]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	3324      	adds	r3, #36	; 0x24
 800b8c2:	220b      	movs	r2, #11
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	f7fe ff65 	bl	800a794 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	60fb      	str	r3, [r7, #12]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	3324      	adds	r3, #36	; 0x24
 800b8f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b8f2:	220b      	movs	r2, #11
 800b8f4:	2120      	movs	r1, #32
 800b8f6:	68b8      	ldr	r0, [r7, #8]
 800b8f8:	f7fe ff6d 	bl	800a7d6 <mem_set>
	si = i = 0; ni = 8;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	613b      	str	r3, [r7, #16]
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	617b      	str	r3, [r7, #20]
 800b904:	2308      	movs	r3, #8
 800b906:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	1c5a      	adds	r2, r3, #1
 800b90c:	617a      	str	r2, [r7, #20]
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	4413      	add	r3, r2
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b916:	7ffb      	ldrb	r3, [r7, #31]
 800b918:	2b20      	cmp	r3, #32
 800b91a:	d94e      	bls.n	800b9ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b91c:	7ffb      	ldrb	r3, [r7, #31]
 800b91e:	2b2f      	cmp	r3, #47	; 0x2f
 800b920:	d006      	beq.n	800b930 <create_name+0x54>
 800b922:	7ffb      	ldrb	r3, [r7, #31]
 800b924:	2b5c      	cmp	r3, #92	; 0x5c
 800b926:	d110      	bne.n	800b94a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b928:	e002      	b.n	800b930 <create_name+0x54>
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	3301      	adds	r3, #1
 800b92e:	617b      	str	r3, [r7, #20]
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	4413      	add	r3, r2
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b2f      	cmp	r3, #47	; 0x2f
 800b93a:	d0f6      	beq.n	800b92a <create_name+0x4e>
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	4413      	add	r3, r2
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b5c      	cmp	r3, #92	; 0x5c
 800b946:	d0f0      	beq.n	800b92a <create_name+0x4e>
			break;
 800b948:	e038      	b.n	800b9bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b94a:	7ffb      	ldrb	r3, [r7, #31]
 800b94c:	2b2e      	cmp	r3, #46	; 0x2e
 800b94e:	d003      	beq.n	800b958 <create_name+0x7c>
 800b950:	693a      	ldr	r2, [r7, #16]
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	429a      	cmp	r2, r3
 800b956:	d30c      	bcc.n	800b972 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	2b0b      	cmp	r3, #11
 800b95c:	d002      	beq.n	800b964 <create_name+0x88>
 800b95e:	7ffb      	ldrb	r3, [r7, #31]
 800b960:	2b2e      	cmp	r3, #46	; 0x2e
 800b962:	d001      	beq.n	800b968 <create_name+0x8c>
 800b964:	2306      	movs	r3, #6
 800b966:	e044      	b.n	800b9f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b968:	2308      	movs	r3, #8
 800b96a:	613b      	str	r3, [r7, #16]
 800b96c:	230b      	movs	r3, #11
 800b96e:	61bb      	str	r3, [r7, #24]
			continue;
 800b970:	e022      	b.n	800b9b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b972:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b976:	2b00      	cmp	r3, #0
 800b978:	da04      	bge.n	800b984 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b97a:	7ffb      	ldrb	r3, [r7, #31]
 800b97c:	3b80      	subs	r3, #128	; 0x80
 800b97e:	4a1f      	ldr	r2, [pc, #124]	; (800b9fc <create_name+0x120>)
 800b980:	5cd3      	ldrb	r3, [r2, r3]
 800b982:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b984:	7ffb      	ldrb	r3, [r7, #31]
 800b986:	4619      	mov	r1, r3
 800b988:	481d      	ldr	r0, [pc, #116]	; (800ba00 <create_name+0x124>)
 800b98a:	f7fe ff65 	bl	800a858 <chk_chr>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <create_name+0xbc>
 800b994:	2306      	movs	r3, #6
 800b996:	e02c      	b.n	800b9f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b998:	7ffb      	ldrb	r3, [r7, #31]
 800b99a:	2b60      	cmp	r3, #96	; 0x60
 800b99c:	d905      	bls.n	800b9aa <create_name+0xce>
 800b99e:	7ffb      	ldrb	r3, [r7, #31]
 800b9a0:	2b7a      	cmp	r3, #122	; 0x7a
 800b9a2:	d802      	bhi.n	800b9aa <create_name+0xce>
 800b9a4:	7ffb      	ldrb	r3, [r7, #31]
 800b9a6:	3b20      	subs	r3, #32
 800b9a8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	1c5a      	adds	r2, r3, #1
 800b9ae:	613a      	str	r2, [r7, #16]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	7ffa      	ldrb	r2, [r7, #31]
 800b9b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b9b8:	e7a6      	b.n	800b908 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b9ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	441a      	add	r2, r3
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d101      	bne.n	800b9d0 <create_name+0xf4>
 800b9cc:	2306      	movs	r3, #6
 800b9ce:	e010      	b.n	800b9f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2be5      	cmp	r3, #229	; 0xe5
 800b9d6:	d102      	bne.n	800b9de <create_name+0x102>
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	2205      	movs	r2, #5
 800b9dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b9de:	7ffb      	ldrb	r3, [r7, #31]
 800b9e0:	2b20      	cmp	r3, #32
 800b9e2:	d801      	bhi.n	800b9e8 <create_name+0x10c>
 800b9e4:	2204      	movs	r2, #4
 800b9e6:	e000      	b.n	800b9ea <create_name+0x10e>
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	330b      	adds	r3, #11
 800b9ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b9f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3720      	adds	r7, #32
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	08014abc 	.word	0x08014abc
 800ba00:	08014a08 	.word	0x08014a08

0800ba04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ba18:	e002      	b.n	800ba20 <follow_path+0x1c>
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	603b      	str	r3, [r7, #0]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	2b2f      	cmp	r3, #47	; 0x2f
 800ba26:	d0f8      	beq.n	800ba1a <follow_path+0x16>
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b5c      	cmp	r3, #92	; 0x5c
 800ba2e:	d0f4      	beq.n	800ba1a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	2200      	movs	r2, #0
 800ba34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	2b1f      	cmp	r3, #31
 800ba3c:	d80a      	bhi.n	800ba54 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2280      	movs	r2, #128	; 0x80
 800ba42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ba46:	2100      	movs	r1, #0
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff fcda 	bl	800b402 <dir_sdi>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	75fb      	strb	r3, [r7, #23]
 800ba52:	e048      	b.n	800bae6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba54:	463b      	mov	r3, r7
 800ba56:	4619      	mov	r1, r3
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f7ff ff3f 	bl	800b8dc <create_name>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d139      	bne.n	800badc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f7ff feaf 	bl	800b7cc <dir_find>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ba7a:	7dfb      	ldrb	r3, [r7, #23]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00a      	beq.n	800ba96 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
 800ba82:	2b04      	cmp	r3, #4
 800ba84:	d12c      	bne.n	800bae0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ba86:	7afb      	ldrb	r3, [r7, #11]
 800ba88:	f003 0304 	and.w	r3, r3, #4
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d127      	bne.n	800bae0 <follow_path+0xdc>
 800ba90:	2305      	movs	r3, #5
 800ba92:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ba94:	e024      	b.n	800bae0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba96:	7afb      	ldrb	r3, [r7, #11]
 800ba98:	f003 0304 	and.w	r3, r3, #4
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d121      	bne.n	800bae4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	799b      	ldrb	r3, [r3, #6]
 800baa4:	f003 0310 	and.w	r3, r3, #16
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d102      	bne.n	800bab2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800baac:	2305      	movs	r3, #5
 800baae:	75fb      	strb	r3, [r7, #23]
 800bab0:	e019      	b.n	800bae6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	695b      	ldr	r3, [r3, #20]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	8992      	ldrh	r2, [r2, #12]
 800bac0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bac4:	fb02 f200 	mul.w	r2, r2, r0
 800bac8:	1a9b      	subs	r3, r3, r2
 800baca:	440b      	add	r3, r1
 800bacc:	4619      	mov	r1, r3
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f7ff fe3d 	bl	800b74e <ld_clust>
 800bad4:	4602      	mov	r2, r0
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bada:	e7bb      	b.n	800ba54 <follow_path+0x50>
			if (res != FR_OK) break;
 800badc:	bf00      	nop
 800bade:	e002      	b.n	800bae6 <follow_path+0xe2>
				break;
 800bae0:	bf00      	nop
 800bae2:	e000      	b.n	800bae6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bae4:	bf00      	nop
			}
		}
	}

	return res;
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3718      	adds	r7, #24
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b087      	sub	sp, #28
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800baf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bafc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d031      	beq.n	800bb6a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	617b      	str	r3, [r7, #20]
 800bb0c:	e002      	b.n	800bb14 <get_ldnumber+0x24>
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	3301      	adds	r3, #1
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	2b20      	cmp	r3, #32
 800bb1a:	d903      	bls.n	800bb24 <get_ldnumber+0x34>
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	2b3a      	cmp	r3, #58	; 0x3a
 800bb22:	d1f4      	bne.n	800bb0e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	2b3a      	cmp	r3, #58	; 0x3a
 800bb2a:	d11c      	bne.n	800bb66 <get_ldnumber+0x76>
			tp = *path;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	60fa      	str	r2, [r7, #12]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	3b30      	subs	r3, #48	; 0x30
 800bb3c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	2b09      	cmp	r3, #9
 800bb42:	d80e      	bhi.n	800bb62 <get_ldnumber+0x72>
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d10a      	bne.n	800bb62 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d107      	bne.n	800bb62 <get_ldnumber+0x72>
					vol = (int)i;
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	617b      	str	r3, [r7, #20]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	e002      	b.n	800bb6c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bb66:	2300      	movs	r3, #0
 800bb68:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bb6a:	693b      	ldr	r3, [r7, #16]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	371c      	adds	r7, #28
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	70da      	strb	r2, [r3, #3]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb8e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7ff f85c 	bl	800ac50 <move_window>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <check_fs+0x2a>
 800bb9e:	2304      	movs	r3, #4
 800bba0:	e038      	b.n	800bc14 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	3338      	adds	r3, #56	; 0x38
 800bba6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fe fd70 	bl	800a690 <ld_word>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d001      	beq.n	800bbc0 <check_fs+0x48>
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	e029      	b.n	800bc14 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bbc6:	2be9      	cmp	r3, #233	; 0xe9
 800bbc8:	d009      	beq.n	800bbde <check_fs+0x66>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bbd0:	2beb      	cmp	r3, #235	; 0xeb
 800bbd2:	d11e      	bne.n	800bc12 <check_fs+0x9a>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bbda:	2b90      	cmp	r3, #144	; 0x90
 800bbdc:	d119      	bne.n	800bc12 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	3338      	adds	r3, #56	; 0x38
 800bbe2:	3336      	adds	r3, #54	; 0x36
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fe fd6b 	bl	800a6c0 <ld_dword>
 800bbea:	4603      	mov	r3, r0
 800bbec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bbf0:	4a0a      	ldr	r2, [pc, #40]	; (800bc1c <check_fs+0xa4>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d101      	bne.n	800bbfa <check_fs+0x82>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	e00c      	b.n	800bc14 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	3338      	adds	r3, #56	; 0x38
 800bbfe:	3352      	adds	r3, #82	; 0x52
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7fe fd5d 	bl	800a6c0 <ld_dword>
 800bc06:	4602      	mov	r2, r0
 800bc08:	4b05      	ldr	r3, [pc, #20]	; (800bc20 <check_fs+0xa8>)
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d101      	bne.n	800bc12 <check_fs+0x9a>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	e000      	b.n	800bc14 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bc12:	2302      	movs	r3, #2
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	00544146 	.word	0x00544146
 800bc20:	33544146 	.word	0x33544146

0800bc24 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b096      	sub	sp, #88	; 0x58
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	2200      	movs	r2, #0
 800bc36:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f7ff ff59 	bl	800baf0 <get_ldnumber>
 800bc3e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	da01      	bge.n	800bc4a <find_volume+0x26>
 800bc46:	230b      	movs	r3, #11
 800bc48:	e26c      	b.n	800c124 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bc4a:	4aa4      	ldr	r2, [pc, #656]	; (800bedc <find_volume+0x2b8>)
 800bc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc52:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d101      	bne.n	800bc5e <find_volume+0x3a>
 800bc5a:	230c      	movs	r3, #12
 800bc5c:	e262      	b.n	800c124 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800bc5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc60:	f7fe fe15 	bl	800a88e <lock_fs>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <find_volume+0x4a>
 800bc6a:	230f      	movs	r3, #15
 800bc6c:	e25a      	b.n	800c124 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bc74:	79fb      	ldrb	r3, [r7, #7]
 800bc76:	f023 0301 	bic.w	r3, r3, #1
 800bc7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d01a      	beq.n	800bcba <find_volume+0x96>
		stat = disk_status(fs->drv);
 800bc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc86:	785b      	ldrb	r3, [r3, #1]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fe fc63 	bl	800a554 <disk_status>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bc94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc98:	f003 0301 	and.w	r3, r3, #1
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10c      	bne.n	800bcba <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bca0:	79fb      	ldrb	r3, [r7, #7]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d007      	beq.n	800bcb6 <find_volume+0x92>
 800bca6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bcaa:	f003 0304 	and.w	r3, r3, #4
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800bcb2:	230a      	movs	r3, #10
 800bcb4:	e236      	b.n	800c124 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e234      	b.n	800c124 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bcc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcca:	785b      	ldrb	r3, [r3, #1]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fe fc5b 	bl	800a588 <disk_initialize>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bcd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bcdc:	f003 0301 	and.w	r3, r3, #1
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d001      	beq.n	800bce8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bce4:	2303      	movs	r3, #3
 800bce6:	e21d      	b.n	800c124 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bce8:	79fb      	ldrb	r3, [r7, #7]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d007      	beq.n	800bcfe <find_volume+0xda>
 800bcee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bcf2:	f003 0304 	and.w	r3, r3, #4
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800bcfa:	230a      	movs	r3, #10
 800bcfc:	e212      	b.n	800c124 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd00:	7858      	ldrb	r0, [r3, #1]
 800bd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd04:	330c      	adds	r3, #12
 800bd06:	461a      	mov	r2, r3
 800bd08:	2102      	movs	r1, #2
 800bd0a:	f7fe fca3 	bl	800a654 <disk_ioctl>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d001      	beq.n	800bd18 <find_volume+0xf4>
 800bd14:	2301      	movs	r3, #1
 800bd16:	e205      	b.n	800c124 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800bd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1a:	899b      	ldrh	r3, [r3, #12]
 800bd1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd20:	d80d      	bhi.n	800bd3e <find_volume+0x11a>
 800bd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd24:	899b      	ldrh	r3, [r3, #12]
 800bd26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd2a:	d308      	bcc.n	800bd3e <find_volume+0x11a>
 800bd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2e:	899b      	ldrh	r3, [r3, #12]
 800bd30:	461a      	mov	r2, r3
 800bd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd34:	899b      	ldrh	r3, [r3, #12]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	4013      	ands	r3, r2
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d001      	beq.n	800bd42 <find_volume+0x11e>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e1f0      	b.n	800c124 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bd46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd4a:	f7ff ff15 	bl	800bb78 <check_fs>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bd54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d14b      	bne.n	800bdf4 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	643b      	str	r3, [r7, #64]	; 0x40
 800bd60:	e01f      	b.n	800bda2 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd64:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bd68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd6a:	011b      	lsls	r3, r3, #4
 800bd6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bd70:	4413      	add	r3, r2
 800bd72:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	3304      	adds	r3, #4
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d006      	beq.n	800bd8c <find_volume+0x168>
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	3308      	adds	r3, #8
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fe fc9c 	bl	800a6c0 <ld_dword>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	e000      	b.n	800bd8e <find_volume+0x16a>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bd96:	440b      	add	r3, r1
 800bd98:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bd9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd9e:	3301      	adds	r3, #1
 800bda0:	643b      	str	r3, [r7, #64]	; 0x40
 800bda2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d9dc      	bls.n	800bd62 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bda8:	2300      	movs	r3, #0
 800bdaa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bdac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d002      	beq.n	800bdb8 <find_volume+0x194>
 800bdb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bdb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bdc0:	4413      	add	r3, r2
 800bdc2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bdc6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bdc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d005      	beq.n	800bdda <find_volume+0x1b6>
 800bdce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bdd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bdd2:	f7ff fed1 	bl	800bb78 <check_fs>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	e000      	b.n	800bddc <find_volume+0x1b8>
 800bdda:	2303      	movs	r3, #3
 800bddc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bde0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d905      	bls.n	800bdf4 <find_volume+0x1d0>
 800bde8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdea:	3301      	adds	r3, #1
 800bdec:	643b      	str	r3, [r7, #64]	; 0x40
 800bdee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdf0:	2b03      	cmp	r3, #3
 800bdf2:	d9e1      	bls.n	800bdb8 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bdf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdf8:	2b04      	cmp	r3, #4
 800bdfa:	d101      	bne.n	800be00 <find_volume+0x1dc>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e191      	b.n	800c124 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800be00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be04:	2b01      	cmp	r3, #1
 800be06:	d901      	bls.n	800be0c <find_volume+0x1e8>
 800be08:	230d      	movs	r3, #13
 800be0a:	e18b      	b.n	800c124 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800be0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0e:	3338      	adds	r3, #56	; 0x38
 800be10:	330b      	adds	r3, #11
 800be12:	4618      	mov	r0, r3
 800be14:	f7fe fc3c 	bl	800a690 <ld_word>
 800be18:	4603      	mov	r3, r0
 800be1a:	461a      	mov	r2, r3
 800be1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1e:	899b      	ldrh	r3, [r3, #12]
 800be20:	429a      	cmp	r2, r3
 800be22:	d001      	beq.n	800be28 <find_volume+0x204>
 800be24:	230d      	movs	r3, #13
 800be26:	e17d      	b.n	800c124 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2a:	3338      	adds	r3, #56	; 0x38
 800be2c:	3316      	adds	r3, #22
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fe fc2e 	bl	800a690 <ld_word>
 800be34:	4603      	mov	r3, r0
 800be36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800be38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d106      	bne.n	800be4c <find_volume+0x228>
 800be3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be40:	3338      	adds	r3, #56	; 0x38
 800be42:	3324      	adds	r3, #36	; 0x24
 800be44:	4618      	mov	r0, r3
 800be46:	f7fe fc3b 	bl	800a6c0 <ld_dword>
 800be4a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800be4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be50:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800be52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be54:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800be58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800be5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5e:	789b      	ldrb	r3, [r3, #2]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d005      	beq.n	800be70 <find_volume+0x24c>
 800be64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be66:	789b      	ldrb	r3, [r3, #2]
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d001      	beq.n	800be70 <find_volume+0x24c>
 800be6c:	230d      	movs	r3, #13
 800be6e:	e159      	b.n	800c124 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800be70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be72:	789b      	ldrb	r3, [r3, #2]
 800be74:	461a      	mov	r2, r3
 800be76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be78:	fb02 f303 	mul.w	r3, r2, r3
 800be7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800be7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be84:	b29a      	uxth	r2, r3
 800be86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800be8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8c:	895b      	ldrh	r3, [r3, #10]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d008      	beq.n	800bea4 <find_volume+0x280>
 800be92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be94:	895b      	ldrh	r3, [r3, #10]
 800be96:	461a      	mov	r2, r3
 800be98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9a:	895b      	ldrh	r3, [r3, #10]
 800be9c:	3b01      	subs	r3, #1
 800be9e:	4013      	ands	r3, r2
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <find_volume+0x284>
 800bea4:	230d      	movs	r3, #13
 800bea6:	e13d      	b.n	800c124 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beaa:	3338      	adds	r3, #56	; 0x38
 800beac:	3311      	adds	r3, #17
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe fbee 	bl	800a690 <ld_word>
 800beb4:	4603      	mov	r3, r0
 800beb6:	461a      	mov	r2, r3
 800beb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebe:	891b      	ldrh	r3, [r3, #8]
 800bec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bec2:	8992      	ldrh	r2, [r2, #12]
 800bec4:	0952      	lsrs	r2, r2, #5
 800bec6:	b292      	uxth	r2, r2
 800bec8:	fbb3 f1f2 	udiv	r1, r3, r2
 800becc:	fb02 f201 	mul.w	r2, r2, r1
 800bed0:	1a9b      	subs	r3, r3, r2
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d003      	beq.n	800bee0 <find_volume+0x2bc>
 800bed8:	230d      	movs	r3, #13
 800beda:	e123      	b.n	800c124 <find_volume+0x500>
 800bedc:	20000204 	.word	0x20000204

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	3338      	adds	r3, #56	; 0x38
 800bee4:	3313      	adds	r3, #19
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe fbd2 	bl	800a690 <ld_word>
 800beec:	4603      	mov	r3, r0
 800beee:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d106      	bne.n	800bf04 <find_volume+0x2e0>
 800bef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef8:	3338      	adds	r3, #56	; 0x38
 800befa:	3320      	adds	r3, #32
 800befc:	4618      	mov	r0, r3
 800befe:	f7fe fbdf 	bl	800a6c0 <ld_dword>
 800bf02:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	3338      	adds	r3, #56	; 0x38
 800bf08:	330e      	adds	r3, #14
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fe fbc0 	bl	800a690 <ld_word>
 800bf10:	4603      	mov	r3, r0
 800bf12:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bf14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d101      	bne.n	800bf1e <find_volume+0x2fa>
 800bf1a:	230d      	movs	r3, #13
 800bf1c:	e102      	b.n	800c124 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bf1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf22:	4413      	add	r3, r2
 800bf24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf26:	8911      	ldrh	r1, [r2, #8]
 800bf28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf2a:	8992      	ldrh	r2, [r2, #12]
 800bf2c:	0952      	lsrs	r2, r2, #5
 800bf2e:	b292      	uxth	r2, r2
 800bf30:	fbb1 f2f2 	udiv	r2, r1, r2
 800bf34:	b292      	uxth	r2, r2
 800bf36:	4413      	add	r3, r2
 800bf38:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bf3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d201      	bcs.n	800bf46 <find_volume+0x322>
 800bf42:	230d      	movs	r3, #13
 800bf44:	e0ee      	b.n	800c124 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bf46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf4e:	8952      	ldrh	r2, [r2, #10]
 800bf50:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf54:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d101      	bne.n	800bf60 <find_volume+0x33c>
 800bf5c:	230d      	movs	r3, #13
 800bf5e:	e0e1      	b.n	800c124 <find_volume+0x500>
		fmt = FS_FAT32;
 800bf60:	2303      	movs	r3, #3
 800bf62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d802      	bhi.n	800bf76 <find_volume+0x352>
 800bf70:	2302      	movs	r3, #2
 800bf72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf78:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d802      	bhi.n	800bf86 <find_volume+0x362>
 800bf80:	2301      	movs	r3, #1
 800bf82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	1c9a      	adds	r2, r3, #2
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf92:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bf94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf98:	441a      	add	r2, r3
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800bf9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa2:	441a      	add	r2, r3
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800bfa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfac:	2b03      	cmp	r3, #3
 800bfae:	d11e      	bne.n	800bfee <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb2:	3338      	adds	r3, #56	; 0x38
 800bfb4:	332a      	adds	r3, #42	; 0x2a
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fe fb6a 	bl	800a690 <ld_word>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d001      	beq.n	800bfc6 <find_volume+0x3a2>
 800bfc2:	230d      	movs	r3, #13
 800bfc4:	e0ae      	b.n	800c124 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc8:	891b      	ldrh	r3, [r3, #8]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <find_volume+0x3ae>
 800bfce:	230d      	movs	r3, #13
 800bfd0:	e0a8      	b.n	800c124 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd4:	3338      	adds	r3, #56	; 0x38
 800bfd6:	332c      	adds	r3, #44	; 0x2c
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe fb71 	bl	800a6c0 <ld_dword>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	647b      	str	r3, [r7, #68]	; 0x44
 800bfec:	e01f      	b.n	800c02e <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff0:	891b      	ldrh	r3, [r3, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d101      	bne.n	800bffa <find_volume+0x3d6>
 800bff6:	230d      	movs	r3, #13
 800bff8:	e094      	b.n	800c124 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c000:	441a      	add	r2, r3
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c006:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	d103      	bne.n	800c016 <find_volume+0x3f2>
 800c00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c010:	69db      	ldr	r3, [r3, #28]
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	e00a      	b.n	800c02c <find_volume+0x408>
 800c016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c018:	69da      	ldr	r2, [r3, #28]
 800c01a:	4613      	mov	r3, r2
 800c01c:	005b      	lsls	r3, r3, #1
 800c01e:	4413      	add	r3, r2
 800c020:	085a      	lsrs	r2, r3, #1
 800c022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c024:	69db      	ldr	r3, [r3, #28]
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c02c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	6a1a      	ldr	r2, [r3, #32]
 800c032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c034:	899b      	ldrh	r3, [r3, #12]
 800c036:	4619      	mov	r1, r3
 800c038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c03a:	440b      	add	r3, r1
 800c03c:	3b01      	subs	r3, #1
 800c03e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c040:	8989      	ldrh	r1, [r1, #12]
 800c042:	fbb3 f3f1 	udiv	r3, r3, r1
 800c046:	429a      	cmp	r2, r3
 800c048:	d201      	bcs.n	800c04e <find_volume+0x42a>
 800c04a:	230d      	movs	r3, #13
 800c04c:	e06a      	b.n	800c124 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c050:	f04f 32ff 	mov.w	r2, #4294967295
 800c054:	619a      	str	r2, [r3, #24]
 800c056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c058:	699a      	ldr	r2, [r3, #24]
 800c05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c060:	2280      	movs	r2, #128	; 0x80
 800c062:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c064:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d149      	bne.n	800c100 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	3338      	adds	r3, #56	; 0x38
 800c070:	3330      	adds	r3, #48	; 0x30
 800c072:	4618      	mov	r0, r3
 800c074:	f7fe fb0c 	bl	800a690 <ld_word>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d140      	bne.n	800c100 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c07e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c080:	3301      	adds	r3, #1
 800c082:	4619      	mov	r1, r3
 800c084:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c086:	f7fe fde3 	bl	800ac50 <move_window>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d137      	bne.n	800c100 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800c090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c092:	2200      	movs	r2, #0
 800c094:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c098:	3338      	adds	r3, #56	; 0x38
 800c09a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fe faf6 	bl	800a690 <ld_word>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d127      	bne.n	800c100 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	3338      	adds	r3, #56	; 0x38
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fe fb03 	bl	800a6c0 <ld_dword>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	4b1b      	ldr	r3, [pc, #108]	; (800c12c <find_volume+0x508>)
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d11e      	bne.n	800c100 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c4:	3338      	adds	r3, #56	; 0x38
 800c0c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fe faf8 	bl	800a6c0 <ld_dword>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	4b17      	ldr	r3, [pc, #92]	; (800c130 <find_volume+0x50c>)
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d113      	bne.n	800c100 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0da:	3338      	adds	r3, #56	; 0x38
 800c0dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7fe faed 	bl	800a6c0 <ld_dword>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ee:	3338      	adds	r3, #56	; 0x38
 800c0f0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fe fae3 	bl	800a6c0 <ld_dword>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fe:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c102:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c106:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c108:	4b0a      	ldr	r3, [pc, #40]	; (800c134 <find_volume+0x510>)
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	3301      	adds	r3, #1
 800c10e:	b29a      	uxth	r2, r3
 800c110:	4b08      	ldr	r3, [pc, #32]	; (800c134 <find_volume+0x510>)
 800c112:	801a      	strh	r2, [r3, #0]
 800c114:	4b07      	ldr	r3, [pc, #28]	; (800c134 <find_volume+0x510>)
 800c116:	881a      	ldrh	r2, [r3, #0]
 800c118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c11c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c11e:	f7fe fd2f 	bl	800ab80 <clear_lock>
#endif
	return FR_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3758      	adds	r7, #88	; 0x58
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	41615252 	.word	0x41615252
 800c130:	61417272 	.word	0x61417272
 800c134:	20000208 	.word	0x20000208

0800c138 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c142:	2309      	movs	r3, #9
 800c144:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d02e      	beq.n	800c1aa <validate+0x72>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d02a      	beq.n	800c1aa <validate+0x72>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d025      	beq.n	800c1aa <validate+0x72>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	889a      	ldrh	r2, [r3, #4]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	88db      	ldrh	r3, [r3, #6]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d11e      	bne.n	800c1aa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4618      	mov	r0, r3
 800c172:	f7fe fb8c 	bl	800a88e <lock_fs>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d014      	beq.n	800c1a6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	785b      	ldrb	r3, [r3, #1]
 800c182:	4618      	mov	r0, r3
 800c184:	f7fe f9e6 	bl	800a554 <disk_status>
 800c188:	4603      	mov	r3, r0
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d102      	bne.n	800c198 <validate+0x60>
				res = FR_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	73fb      	strb	r3, [r7, #15]
 800c196:	e008      	b.n	800c1aa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2100      	movs	r1, #0
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fe fb8b 	bl	800a8ba <unlock_fs>
 800c1a4:	e001      	b.n	800c1aa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c1a6:	230f      	movs	r3, #15
 800c1a8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c1aa:	7bfb      	ldrb	r3, [r7, #15]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d102      	bne.n	800c1b6 <validate+0x7e>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	e000      	b.n	800c1b8 <validate+0x80>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	6013      	str	r3, [r2, #0]
	return res;
 800c1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
	...

0800c1c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b088      	sub	sp, #32
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c1da:	f107 0310 	add.w	r3, r7, #16
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff fc86 	bl	800baf0 <get_ldnumber>
 800c1e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	da01      	bge.n	800c1f0 <f_mount+0x28>
 800c1ec:	230b      	movs	r3, #11
 800c1ee:	e048      	b.n	800c282 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c1f0:	4a26      	ldr	r2, [pc, #152]	; (800c28c <f_mount+0xc4>)
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00f      	beq.n	800c220 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c200:	69b8      	ldr	r0, [r7, #24]
 800c202:	f7fe fcbd 	bl	800ab80 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 fd04 	bl	800cc18 <ff_del_syncobj>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d101      	bne.n	800c21a <f_mount+0x52>
 800c216:	2302      	movs	r3, #2
 800c218:	e033      	b.n	800c282 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2200      	movs	r2, #0
 800c21e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00f      	beq.n	800c246 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	3310      	adds	r3, #16
 800c234:	4619      	mov	r1, r3
 800c236:	4610      	mov	r0, r2
 800c238:	f000 fcd3 	bl	800cbe2 <ff_cre_syncobj>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d101      	bne.n	800c246 <f_mount+0x7e>
 800c242:	2302      	movs	r3, #2
 800c244:	e01d      	b.n	800c282 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	4910      	ldr	r1, [pc, #64]	; (800c28c <f_mount+0xc4>)
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <f_mount+0x94>
 800c256:	79fb      	ldrb	r3, [r7, #7]
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d001      	beq.n	800c260 <f_mount+0x98>
 800c25c:	2300      	movs	r3, #0
 800c25e:	e010      	b.n	800c282 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c260:	f107 010c 	add.w	r1, r7, #12
 800c264:	f107 0308 	add.w	r3, r7, #8
 800c268:	2200      	movs	r2, #0
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7ff fcda 	bl	800bc24 <find_volume>
 800c270:	4603      	mov	r3, r0
 800c272:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	7dfa      	ldrb	r2, [r7, #23]
 800c278:	4611      	mov	r1, r2
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fb1d 	bl	800a8ba <unlock_fs>
 800c280:	7dfb      	ldrb	r3, [r7, #23]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3720      	adds	r7, #32
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	20000204 	.word	0x20000204

0800c290 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b098      	sub	sp, #96	; 0x60
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	4613      	mov	r3, r2
 800c29c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d101      	bne.n	800c2a8 <f_open+0x18>
 800c2a4:	2309      	movs	r3, #9
 800c2a6:	e1c2      	b.n	800c62e <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c2a8:	79fb      	ldrb	r3, [r7, #7]
 800c2aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c2b0:	79fa      	ldrb	r2, [r7, #7]
 800c2b2:	f107 0110 	add.w	r1, r7, #16
 800c2b6:	f107 0308 	add.w	r3, r7, #8
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7ff fcb2 	bl	800bc24 <find_volume>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c2c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f040 819f 	bne.w	800c60e <f_open+0x37e>
		dj.obj.fs = fs;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	f107 0314 	add.w	r3, r7, #20
 800c2da:	4611      	mov	r1, r2
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7ff fb91 	bl	800ba04 <follow_path>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c2e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d11a      	bne.n	800c326 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c2f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c2f4:	b25b      	sxtb	r3, r3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	da03      	bge.n	800c302 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c2fa:	2306      	movs	r3, #6
 800c2fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c300:	e011      	b.n	800c326 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c302:	79fb      	ldrb	r3, [r7, #7]
 800c304:	f023 0301 	bic.w	r3, r3, #1
 800c308:	2b00      	cmp	r3, #0
 800c30a:	bf14      	ite	ne
 800c30c:	2301      	movne	r3, #1
 800c30e:	2300      	moveq	r3, #0
 800c310:	b2db      	uxtb	r3, r3
 800c312:	461a      	mov	r2, r3
 800c314:	f107 0314 	add.w	r3, r7, #20
 800c318:	4611      	mov	r1, r2
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fe fae8 	bl	800a8f0 <chk_lock>
 800c320:	4603      	mov	r3, r0
 800c322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c326:	79fb      	ldrb	r3, [r7, #7]
 800c328:	f003 031c 	and.w	r3, r3, #28
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d07f      	beq.n	800c430 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c334:	2b00      	cmp	r3, #0
 800c336:	d017      	beq.n	800c368 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c338:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c33c:	2b04      	cmp	r3, #4
 800c33e:	d10e      	bne.n	800c35e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c340:	f7fe fb32 	bl	800a9a8 <enq_lock>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d006      	beq.n	800c358 <f_open+0xc8>
 800c34a:	f107 0314 	add.w	r3, r7, #20
 800c34e:	4618      	mov	r0, r3
 800c350:	f7ff fa91 	bl	800b876 <dir_register>
 800c354:	4603      	mov	r3, r0
 800c356:	e000      	b.n	800c35a <f_open+0xca>
 800c358:	2312      	movs	r3, #18
 800c35a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c35e:	79fb      	ldrb	r3, [r7, #7]
 800c360:	f043 0308 	orr.w	r3, r3, #8
 800c364:	71fb      	strb	r3, [r7, #7]
 800c366:	e010      	b.n	800c38a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c368:	7ebb      	ldrb	r3, [r7, #26]
 800c36a:	f003 0311 	and.w	r3, r3, #17
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d003      	beq.n	800c37a <f_open+0xea>
					res = FR_DENIED;
 800c372:	2307      	movs	r3, #7
 800c374:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c378:	e007      	b.n	800c38a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c37a:	79fb      	ldrb	r3, [r7, #7]
 800c37c:	f003 0304 	and.w	r3, r3, #4
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <f_open+0xfa>
 800c384:	2308      	movs	r3, #8
 800c386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c38a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d168      	bne.n	800c464 <f_open+0x1d4>
 800c392:	79fb      	ldrb	r3, [r7, #7]
 800c394:	f003 0308 	and.w	r3, r3, #8
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d063      	beq.n	800c464 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c39c:	f7fd fd6e 	bl	8009e7c <get_fattime>
 800c3a0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a4:	330e      	adds	r3, #14
 800c3a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fe f9c7 	bl	800a73c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3b0:	3316      	adds	r3, #22
 800c3b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fe f9c1 	bl	800a73c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3bc:	330b      	adds	r3, #11
 800c3be:	2220      	movs	r2, #32
 800c3c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3c6:	4611      	mov	r1, r2
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7ff f9c0 	bl	800b74e <ld_clust>
 800c3ce:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff f9d8 	bl	800b78c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3de:	331c      	adds	r3, #28
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fe f9aa 	bl	800a73c <st_dword>
					fs->wflag = 1;
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d037      	beq.n	800c464 <f_open+0x1d4>
						dw = fs->winsect;
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3f8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c3fa:	f107 0314 	add.w	r3, r7, #20
 800c3fe:	2200      	movs	r2, #0
 800c400:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c402:	4618      	mov	r0, r3
 800c404:	f7fe fec8 	bl	800b198 <remove_chain>
 800c408:	4603      	mov	r3, r0
 800c40a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c40e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c412:	2b00      	cmp	r3, #0
 800c414:	d126      	bne.n	800c464 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fe fc18 	bl	800ac50 <move_window>
 800c420:	4603      	mov	r3, r0
 800c422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c42a:	3a01      	subs	r2, #1
 800c42c:	615a      	str	r2, [r3, #20]
 800c42e:	e019      	b.n	800c464 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c430:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c434:	2b00      	cmp	r3, #0
 800c436:	d115      	bne.n	800c464 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c438:	7ebb      	ldrb	r3, [r7, #26]
 800c43a:	f003 0310 	and.w	r3, r3, #16
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d003      	beq.n	800c44a <f_open+0x1ba>
					res = FR_NO_FILE;
 800c442:	2304      	movs	r3, #4
 800c444:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c448:	e00c      	b.n	800c464 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c44a:	79fb      	ldrb	r3, [r7, #7]
 800c44c:	f003 0302 	and.w	r3, r3, #2
 800c450:	2b00      	cmp	r3, #0
 800c452:	d007      	beq.n	800c464 <f_open+0x1d4>
 800c454:	7ebb      	ldrb	r3, [r7, #26]
 800c456:	f003 0301 	and.w	r3, r3, #1
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <f_open+0x1d4>
						res = FR_DENIED;
 800c45e:	2307      	movs	r3, #7
 800c460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d128      	bne.n	800c4be <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c46c:	79fb      	ldrb	r3, [r7, #7]
 800c46e:	f003 0308 	and.w	r3, r3, #8
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c476:	79fb      	ldrb	r3, [r7, #7]
 800c478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c47c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c48c:	79fb      	ldrb	r3, [r7, #7]
 800c48e:	f023 0301 	bic.w	r3, r3, #1
 800c492:	2b00      	cmp	r3, #0
 800c494:	bf14      	ite	ne
 800c496:	2301      	movne	r3, #1
 800c498:	2300      	moveq	r3, #0
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	461a      	mov	r2, r3
 800c49e:	f107 0314 	add.w	r3, r7, #20
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7fe faa1 	bl	800a9ec <inc_lock>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	691b      	ldr	r3, [r3, #16]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d102      	bne.n	800c4be <f_open+0x22e>
 800c4b8:	2302      	movs	r3, #2
 800c4ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c4be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f040 80a3 	bne.w	800c60e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4cc:	4611      	mov	r1, r2
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7ff f93d 	bl	800b74e <ld_clust>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4dc:	331c      	adds	r3, #28
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fe f8ee 	bl	800a6c0 <ld_dword>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c4f0:	693a      	ldr	r2, [r7, #16]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	88da      	ldrh	r2, [r3, #6]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	79fa      	ldrb	r2, [r7, #7]
 800c502:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2200      	movs	r2, #0
 800c50e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2200      	movs	r2, #0
 800c514:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	3330      	adds	r3, #48	; 0x30
 800c51a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c51e:	2100      	movs	r1, #0
 800c520:	4618      	mov	r0, r3
 800c522:	f7fe f958 	bl	800a7d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c526:	79fb      	ldrb	r3, [r7, #7]
 800c528:	f003 0320 	and.w	r3, r3, #32
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d06e      	beq.n	800c60e <f_open+0x37e>
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d06a      	beq.n	800c60e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	68da      	ldr	r2, [r3, #12]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	895b      	ldrh	r3, [r3, #10]
 800c544:	461a      	mov	r2, r3
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	899b      	ldrh	r3, [r3, #12]
 800c54a:	fb03 f302 	mul.w	r3, r3, r2
 800c54e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	657b      	str	r3, [r7, #84]	; 0x54
 800c55c:	e016      	b.n	800c58c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c562:	4618      	mov	r0, r3
 800c564:	f7fe fc31 	bl	800adca <get_fat>
 800c568:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c56a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d802      	bhi.n	800c576 <f_open+0x2e6>
 800c570:	2302      	movs	r3, #2
 800c572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57c:	d102      	bne.n	800c584 <f_open+0x2f4>
 800c57e:	2301      	movs	r3, #1
 800c580:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c584:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	657b      	str	r3, [r7, #84]	; 0x54
 800c58c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c590:	2b00      	cmp	r3, #0
 800c592:	d103      	bne.n	800c59c <f_open+0x30c>
 800c594:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c598:	429a      	cmp	r2, r3
 800c59a:	d8e0      	bhi.n	800c55e <f_open+0x2ce>
				}
				fp->clust = clst;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c5a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d131      	bne.n	800c60e <f_open+0x37e>
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	899b      	ldrh	r3, [r3, #12]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5b6:	fb02 f201 	mul.w	r2, r2, r1
 800c5ba:	1a9b      	subs	r3, r3, r2
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d026      	beq.n	800c60e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7fe fbe1 	bl	800ad8c <clust2sect>
 800c5ca:	6478      	str	r0, [r7, #68]	; 0x44
 800c5cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d103      	bne.n	800c5da <f_open+0x34a>
						res = FR_INT_ERR;
 800c5d2:	2302      	movs	r3, #2
 800c5d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c5d8:	e019      	b.n	800c60e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	899b      	ldrh	r3, [r3, #12]
 800c5de:	461a      	mov	r2, r3
 800c5e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c5e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5e8:	441a      	add	r2, r3
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	7858      	ldrb	r0, [r3, #1]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6a1a      	ldr	r2, [r3, #32]
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	f7fd ffe9 	bl	800a5d4 <disk_read>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d002      	beq.n	800c60e <f_open+0x37e>
 800c608:	2301      	movs	r3, #1
 800c60a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c60e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c612:	2b00      	cmp	r3, #0
 800c614:	d002      	beq.n	800c61c <f_open+0x38c>
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c622:	4611      	mov	r1, r2
 800c624:	4618      	mov	r0, r3
 800c626:	f7fe f948 	bl	800a8ba <unlock_fs>
 800c62a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3760      	adds	r7, #96	; 0x60
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b08c      	sub	sp, #48	; 0x30
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	60f8      	str	r0, [r7, #12]
 800c63e:	60b9      	str	r1, [r7, #8]
 800c640:	607a      	str	r2, [r7, #4]
 800c642:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	2200      	movs	r2, #0
 800c64c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f107 0210 	add.w	r2, r7, #16
 800c654:	4611      	mov	r1, r2
 800c656:	4618      	mov	r0, r3
 800c658:	f7ff fd6e 	bl	800c138 <validate>
 800c65c:	4603      	mov	r3, r0
 800c65e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c666:	2b00      	cmp	r3, #0
 800c668:	d107      	bne.n	800c67a <f_write+0x44>
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	7d5b      	ldrb	r3, [r3, #21]
 800c66e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c676:	2b00      	cmp	r3, #0
 800c678:	d009      	beq.n	800c68e <f_write+0x58>
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c680:	4611      	mov	r1, r2
 800c682:	4618      	mov	r0, r3
 800c684:	f7fe f919 	bl	800a8ba <unlock_fs>
 800c688:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c68c:	e192      	b.n	800c9b4 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	7d1b      	ldrb	r3, [r3, #20]
 800c692:	f003 0302 	and.w	r3, r3, #2
 800c696:	2b00      	cmp	r3, #0
 800c698:	d106      	bne.n	800c6a8 <f_write+0x72>
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	2107      	movs	r1, #7
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7fe f90b 	bl	800a8ba <unlock_fs>
 800c6a4:	2307      	movs	r3, #7
 800c6a6:	e185      	b.n	800c9b4 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	699a      	ldr	r2, [r3, #24]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	441a      	add	r2, r3
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	699b      	ldr	r3, [r3, #24]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	f080 816a 	bcs.w	800c98e <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	699b      	ldr	r3, [r3, #24]
 800c6be:	43db      	mvns	r3, r3
 800c6c0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c6c2:	e164      	b.n	800c98e <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	699b      	ldr	r3, [r3, #24]
 800c6c8:	693a      	ldr	r2, [r7, #16]
 800c6ca:	8992      	ldrh	r2, [r2, #12]
 800c6cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6d0:	fb02 f201 	mul.w	r2, r2, r1
 800c6d4:	1a9b      	subs	r3, r3, r2
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f040 810f 	bne.w	800c8fa <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	699b      	ldr	r3, [r3, #24]
 800c6e0:	693a      	ldr	r2, [r7, #16]
 800c6e2:	8992      	ldrh	r2, [r2, #12]
 800c6e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	8952      	ldrh	r2, [r2, #10]
 800c6ec:	3a01      	subs	r2, #1
 800c6ee:	4013      	ands	r3, r2
 800c6f0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d14d      	bne.n	800c794 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	699b      	ldr	r3, [r3, #24]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d10c      	bne.n	800c71a <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d11a      	bne.n	800c742 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2100      	movs	r1, #0
 800c710:	4618      	mov	r0, r3
 800c712:	f7fe fda6 	bl	800b262 <create_chain>
 800c716:	62b8      	str	r0, [r7, #40]	; 0x28
 800c718:	e013      	b.n	800c742 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d007      	beq.n	800c732 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	699b      	ldr	r3, [r3, #24]
 800c726:	4619      	mov	r1, r3
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f7fe fe32 	bl	800b392 <clmt_clust>
 800c72e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c730:	e007      	b.n	800c742 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	69db      	ldr	r3, [r3, #28]
 800c738:	4619      	mov	r1, r3
 800c73a:	4610      	mov	r0, r2
 800c73c:	f7fe fd91 	bl	800b262 <create_chain>
 800c740:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c744:	2b00      	cmp	r3, #0
 800c746:	f000 8127 	beq.w	800c998 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d109      	bne.n	800c764 <f_write+0x12e>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2202      	movs	r2, #2
 800c754:	755a      	strb	r2, [r3, #21]
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	2102      	movs	r1, #2
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe f8ad 	bl	800a8ba <unlock_fs>
 800c760:	2302      	movs	r3, #2
 800c762:	e127      	b.n	800c9b4 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c76a:	d109      	bne.n	800c780 <f_write+0x14a>
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2201      	movs	r2, #1
 800c770:	755a      	strb	r2, [r3, #21]
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	2101      	movs	r1, #1
 800c776:	4618      	mov	r0, r3
 800c778:	f7fe f89f 	bl	800a8ba <unlock_fs>
 800c77c:	2301      	movs	r3, #1
 800c77e:	e119      	b.n	800c9b4 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c784:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d102      	bne.n	800c794 <f_write+0x15e>
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c792:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	7d1b      	ldrb	r3, [r3, #20]
 800c798:	b25b      	sxtb	r3, r3
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	da1d      	bge.n	800c7da <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	7858      	ldrb	r0, [r3, #1]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6a1a      	ldr	r2, [r3, #32]
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	f7fd ff31 	bl	800a614 <disk_write>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d009      	beq.n	800c7cc <f_write+0x196>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	755a      	strb	r2, [r3, #21]
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	2101      	movs	r1, #1
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fe f879 	bl	800a8ba <unlock_fs>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e0f3      	b.n	800c9b4 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	7d1b      	ldrb	r3, [r3, #20]
 800c7d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c7da:	693a      	ldr	r2, [r7, #16]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	69db      	ldr	r3, [r3, #28]
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	f7fe fad2 	bl	800ad8c <clust2sect>
 800c7e8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d109      	bne.n	800c804 <f_write+0x1ce>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	755a      	strb	r2, [r3, #21]
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	2102      	movs	r1, #2
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fe f85d 	bl	800a8ba <unlock_fs>
 800c800:	2302      	movs	r3, #2
 800c802:	e0d7      	b.n	800c9b4 <f_write+0x37e>
			sect += csect;
 800c804:	697a      	ldr	r2, [r7, #20]
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	4413      	add	r3, r2
 800c80a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	899b      	ldrh	r3, [r3, #12]
 800c810:	461a      	mov	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	fbb3 f3f2 	udiv	r3, r3, r2
 800c818:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c81a:	6a3b      	ldr	r3, [r7, #32]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d048      	beq.n	800c8b2 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c820:	69ba      	ldr	r2, [r7, #24]
 800c822:	6a3b      	ldr	r3, [r7, #32]
 800c824:	4413      	add	r3, r2
 800c826:	693a      	ldr	r2, [r7, #16]
 800c828:	8952      	ldrh	r2, [r2, #10]
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d905      	bls.n	800c83a <f_write+0x204>
					cc = fs->csize - csect;
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	895b      	ldrh	r3, [r3, #10]
 800c832:	461a      	mov	r2, r3
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	7858      	ldrb	r0, [r3, #1]
 800c83e:	6a3b      	ldr	r3, [r7, #32]
 800c840:	697a      	ldr	r2, [r7, #20]
 800c842:	69f9      	ldr	r1, [r7, #28]
 800c844:	f7fd fee6 	bl	800a614 <disk_write>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d009      	beq.n	800c862 <f_write+0x22c>
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2201      	movs	r2, #1
 800c852:	755a      	strb	r2, [r3, #21]
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	2101      	movs	r1, #1
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fe f82e 	bl	800a8ba <unlock_fs>
 800c85e:	2301      	movs	r3, #1
 800c860:	e0a8      	b.n	800c9b4 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6a1a      	ldr	r2, [r3, #32]
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	1ad3      	subs	r3, r2, r3
 800c86a:	6a3a      	ldr	r2, [r7, #32]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d918      	bls.n	800c8a2 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6a1a      	ldr	r2, [r3, #32]
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	693a      	ldr	r2, [r7, #16]
 800c880:	8992      	ldrh	r2, [r2, #12]
 800c882:	fb02 f303 	mul.w	r3, r2, r3
 800c886:	69fa      	ldr	r2, [r7, #28]
 800c888:	18d1      	adds	r1, r2, r3
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	899b      	ldrh	r3, [r3, #12]
 800c88e:	461a      	mov	r2, r3
 800c890:	f7fd ff80 	bl	800a794 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	7d1b      	ldrb	r3, [r3, #20]
 800c898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	899b      	ldrh	r3, [r3, #12]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	6a3b      	ldr	r3, [r7, #32]
 800c8aa:	fb02 f303 	mul.w	r3, r2, r3
 800c8ae:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c8b0:	e050      	b.n	800c954 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6a1b      	ldr	r3, [r3, #32]
 800c8b6:	697a      	ldr	r2, [r7, #20]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d01b      	beq.n	800c8f4 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	699a      	ldr	r2, [r3, #24]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d215      	bcs.n	800c8f4 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	7858      	ldrb	r0, [r3, #1]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	697a      	ldr	r2, [r7, #20]
 800c8d6:	f7fd fe7d 	bl	800a5d4 <disk_read>
 800c8da:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d009      	beq.n	800c8f4 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	755a      	strb	r2, [r3, #21]
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	2101      	movs	r1, #1
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fd ffe5 	bl	800a8ba <unlock_fs>
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e05f      	b.n	800c9b4 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	697a      	ldr	r2, [r7, #20]
 800c8f8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	899b      	ldrh	r3, [r3, #12]
 800c8fe:	4618      	mov	r0, r3
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	8992      	ldrh	r2, [r2, #12]
 800c908:	fbb3 f1f2 	udiv	r1, r3, r2
 800c90c:	fb02 f201 	mul.w	r2, r2, r1
 800c910:	1a9b      	subs	r3, r3, r2
 800c912:	1ac3      	subs	r3, r0, r3
 800c914:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d901      	bls.n	800c922 <f_write+0x2ec>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	699b      	ldr	r3, [r3, #24]
 800c92c:	693a      	ldr	r2, [r7, #16]
 800c92e:	8992      	ldrh	r2, [r2, #12]
 800c930:	fbb3 f0f2 	udiv	r0, r3, r2
 800c934:	fb02 f200 	mul.w	r2, r2, r0
 800c938:	1a9b      	subs	r3, r3, r2
 800c93a:	440b      	add	r3, r1
 800c93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c93e:	69f9      	ldr	r1, [r7, #28]
 800c940:	4618      	mov	r0, r3
 800c942:	f7fd ff27 	bl	800a794 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	7d1b      	ldrb	r3, [r3, #20]
 800c94a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c954:	69fa      	ldr	r2, [r7, #28]
 800c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c958:	4413      	add	r3, r2
 800c95a:	61fb      	str	r3, [r7, #28]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	699a      	ldr	r2, [r3, #24]
 800c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c962:	441a      	add	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	619a      	str	r2, [r3, #24]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	68da      	ldr	r2, [r3, #12]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	429a      	cmp	r2, r3
 800c972:	bf38      	it	cc
 800c974:	461a      	movcc	r2, r3
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	60da      	str	r2, [r3, #12]
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c980:	441a      	add	r2, r3
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	601a      	str	r2, [r3, #0]
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98a:	1ad3      	subs	r3, r2, r3
 800c98c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	f47f ae97 	bne.w	800c6c4 <f_write+0x8e>
 800c996:	e000      	b.n	800c99a <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c998:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	7d1b      	ldrb	r3, [r3, #20]
 800c99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fd ff84 	bl	800a8ba <unlock_fs>
 800c9b2:	2300      	movs	r3, #0
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3730      	adds	r7, #48	; 0x30
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b086      	sub	sp, #24
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f107 0208 	add.w	r2, r7, #8
 800c9ca:	4611      	mov	r1, r2
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7ff fbb3 	bl	800c138 <validate>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9d6:	7dfb      	ldrb	r3, [r7, #23]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d16d      	bne.n	800cab8 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7d1b      	ldrb	r3, [r3, #20]
 800c9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d067      	beq.n	800cab8 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	7d1b      	ldrb	r3, [r3, #20]
 800c9ec:	b25b      	sxtb	r3, r3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	da1a      	bge.n	800ca28 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	7858      	ldrb	r0, [r3, #1]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6a1a      	ldr	r2, [r3, #32]
 800ca00:	2301      	movs	r3, #1
 800ca02:	f7fd fe07 	bl	800a614 <disk_write>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d006      	beq.n	800ca1a <f_sync+0x5e>
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	2101      	movs	r1, #1
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fd ff52 	bl	800a8ba <unlock_fs>
 800ca16:	2301      	movs	r3, #1
 800ca18:	e055      	b.n	800cac6 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7d1b      	ldrb	r3, [r3, #20]
 800ca1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca28:	f7fd fa28 	bl	8009e7c <get_fattime>
 800ca2c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca34:	4619      	mov	r1, r3
 800ca36:	4610      	mov	r0, r2
 800ca38:	f7fe f90a 	bl	800ac50 <move_window>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca40:	7dfb      	ldrb	r3, [r7, #23]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d138      	bne.n	800cab8 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	330b      	adds	r3, #11
 800ca50:	781a      	ldrb	r2, [r3, #0]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	330b      	adds	r3, #11
 800ca56:	f042 0220 	orr.w	r2, r2, #32
 800ca5a:	b2d2      	uxtb	r2, r2
 800ca5c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6818      	ldr	r0, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	461a      	mov	r2, r3
 800ca68:	68f9      	ldr	r1, [r7, #12]
 800ca6a:	f7fe fe8f 	bl	800b78c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f103 021c 	add.w	r2, r3, #28
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	4619      	mov	r1, r3
 800ca7a:	4610      	mov	r0, r2
 800ca7c:	f7fd fe5e 	bl	800a73c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	3316      	adds	r3, #22
 800ca84:	6939      	ldr	r1, [r7, #16]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fd fe58 	bl	800a73c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	3312      	adds	r3, #18
 800ca90:	2100      	movs	r1, #0
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fd fe37 	bl	800a706 <st_word>
					fs->wflag = 1;
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fe f903 	bl	800acac <sync_fs>
 800caa6:	4603      	mov	r3, r0
 800caa8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	7d1b      	ldrb	r3, [r3, #20]
 800caae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	7dfa      	ldrb	r2, [r7, #23]
 800cabc:	4611      	mov	r1, r2
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fd fefb 	bl	800a8ba <unlock_fs>
 800cac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3718      	adds	r7, #24
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f7ff ff70 	bl	800c9bc <f_sync>
 800cadc:	4603      	mov	r3, r0
 800cade:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cae0:	7bfb      	ldrb	r3, [r7, #15]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d11d      	bne.n	800cb22 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f107 0208 	add.w	r2, r7, #8
 800caec:	4611      	mov	r1, r2
 800caee:	4618      	mov	r0, r3
 800caf0:	f7ff fb22 	bl	800c138 <validate>
 800caf4:	4603      	mov	r3, r0
 800caf6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d111      	bne.n	800cb22 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	691b      	ldr	r3, [r3, #16]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe f800 	bl	800ab08 <dec_lock>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d102      	bne.n	800cb18 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7fd fecc 	bl	800a8ba <unlock_fs>
#endif
		}
	}
	return res;
 800cb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b087      	sub	sp, #28
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	4613      	mov	r3, r2
 800cb38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb42:	4b1f      	ldr	r3, [pc, #124]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb44:	7a5b      	ldrb	r3, [r3, #9]
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d131      	bne.n	800cbb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb4c:	4b1c      	ldr	r3, [pc, #112]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb4e:	7a5b      	ldrb	r3, [r3, #9]
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	461a      	mov	r2, r3
 800cb54:	4b1a      	ldr	r3, [pc, #104]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb56:	2100      	movs	r1, #0
 800cb58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cb5a:	4b19      	ldr	r3, [pc, #100]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb5c:	7a5b      	ldrb	r3, [r3, #9]
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	4a17      	ldr	r2, [pc, #92]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	4413      	add	r3, r2
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cb6a:	4b15      	ldr	r3, [pc, #84]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb6c:	7a5b      	ldrb	r3, [r3, #9]
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	461a      	mov	r2, r3
 800cb72:	4b13      	ldr	r3, [pc, #76]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb74:	4413      	add	r3, r2
 800cb76:	79fa      	ldrb	r2, [r7, #7]
 800cb78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb7a:	4b11      	ldr	r3, [pc, #68]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb7c:	7a5b      	ldrb	r3, [r3, #9]
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	b2d1      	uxtb	r1, r2
 800cb84:	4a0e      	ldr	r2, [pc, #56]	; (800cbc0 <FATFS_LinkDriverEx+0x94>)
 800cb86:	7251      	strb	r1, [r2, #9]
 800cb88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb8a:	7dbb      	ldrb	r3, [r7, #22]
 800cb8c:	3330      	adds	r3, #48	; 0x30
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	3301      	adds	r3, #1
 800cb98:	223a      	movs	r2, #58	; 0x3a
 800cb9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	3302      	adds	r3, #2
 800cba0:	222f      	movs	r2, #47	; 0x2f
 800cba2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	3303      	adds	r3, #3
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cbac:	2300      	movs	r3, #0
 800cbae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cbb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	371c      	adds	r7, #28
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	2000022c 	.word	0x2000022c

0800cbc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cbce:	2200      	movs	r2, #0
 800cbd0:	6839      	ldr	r1, [r7, #0]
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7ff ffaa 	bl	800cb2c <FATFS_LinkDriverEx>
 800cbd8:	4603      	mov	r3, r0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b084      	sub	sp, #16
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	4603      	mov	r3, r0
 800cbea:	6039      	str	r1, [r7, #0]
 800cbec:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2101      	movs	r1, #1
 800cbf2:	2001      	movs	r0, #1
 800cbf4:	f000 f9cc 	bl	800cf90 <osSemaphoreNew>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	bf14      	ite	ne
 800cc06:	2301      	movne	r3, #1
 800cc08:	2300      	moveq	r3, #0
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	60fb      	str	r3, [r7, #12]

    return ret;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 fb11 	bl	800d248 <osSemaphoreDelete>
#endif
    return 1;
 800cc26:	2301      	movs	r3, #1
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800cc3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 fa43 	bl	800d0cc <osSemaphoreAcquire>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d101      	bne.n	800cc50 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800cc50:	68fb      	ldr	r3, [r7, #12]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b082      	sub	sp, #8
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fa98 	bl	800d198 <osSemaphoreRelease>
#endif
}
 800cc68:	bf00      	nop
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cc70:	b480      	push	{r7}
 800cc72:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cc74:	bf00      	nop
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
	...

0800cc80 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cc80:	b480      	push	{r7}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc86:	f3ef 8305 	mrs	r3, IPSR
 800cc8a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10f      	bne.n	800ccb2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc92:	f3ef 8310 	mrs	r3, PRIMASK
 800cc96:	607b      	str	r3, [r7, #4]
  return(result);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d105      	bne.n	800ccaa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc9e:	f3ef 8311 	mrs	r3, BASEPRI
 800cca2:	603b      	str	r3, [r7, #0]
  return(result);
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d007      	beq.n	800ccba <osKernelInitialize+0x3a>
 800ccaa:	4b0e      	ldr	r3, [pc, #56]	; (800cce4 <osKernelInitialize+0x64>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d103      	bne.n	800ccba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ccb2:	f06f 0305 	mvn.w	r3, #5
 800ccb6:	60fb      	str	r3, [r7, #12]
 800ccb8:	e00c      	b.n	800ccd4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ccba:	4b0a      	ldr	r3, [pc, #40]	; (800cce4 <osKernelInitialize+0x64>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d105      	bne.n	800ccce <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ccc2:	4b08      	ldr	r3, [pc, #32]	; (800cce4 <osKernelInitialize+0x64>)
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	60fb      	str	r3, [r7, #12]
 800cccc:	e002      	b.n	800ccd4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ccce:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3714      	adds	r7, #20
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr
 800cce2:	bf00      	nop
 800cce4:	20000238 	.word	0x20000238

0800cce8 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800ccee:	f002 fb3d 	bl	800f36c <xTaskGetSchedulerState>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d004      	beq.n	800cd02 <osKernelGetState+0x1a>
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	d105      	bne.n	800cd08 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	607b      	str	r3, [r7, #4]
      break;
 800cd00:	e00c      	b.n	800cd1c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800cd02:	2303      	movs	r3, #3
 800cd04:	607b      	str	r3, [r7, #4]
      break;
 800cd06:	e009      	b.n	800cd1c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800cd08:	4b07      	ldr	r3, [pc, #28]	; (800cd28 <osKernelGetState+0x40>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d102      	bne.n	800cd16 <osKernelGetState+0x2e>
        state = osKernelReady;
 800cd10:	2301      	movs	r3, #1
 800cd12:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800cd14:	e001      	b.n	800cd1a <osKernelGetState+0x32>
        state = osKernelInactive;
 800cd16:	2300      	movs	r3, #0
 800cd18:	607b      	str	r3, [r7, #4]
      break;
 800cd1a:	bf00      	nop
  }

  return (state);
 800cd1c:	687b      	ldr	r3, [r7, #4]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	20000238 	.word	0x20000238

0800cd2c <osKernelStart>:

osStatus_t osKernelStart (void) {
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd32:	f3ef 8305 	mrs	r3, IPSR
 800cd36:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10f      	bne.n	800cd5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd3e:	f3ef 8310 	mrs	r3, PRIMASK
 800cd42:	607b      	str	r3, [r7, #4]
  return(result);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d105      	bne.n	800cd56 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd4a:	f3ef 8311 	mrs	r3, BASEPRI
 800cd4e:	603b      	str	r3, [r7, #0]
  return(result);
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d007      	beq.n	800cd66 <osKernelStart+0x3a>
 800cd56:	4b0f      	ldr	r3, [pc, #60]	; (800cd94 <osKernelStart+0x68>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d103      	bne.n	800cd66 <osKernelStart+0x3a>
    stat = osErrorISR;
 800cd5e:	f06f 0305 	mvn.w	r3, #5
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	e010      	b.n	800cd88 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cd66:	4b0b      	ldr	r3, [pc, #44]	; (800cd94 <osKernelStart+0x68>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d109      	bne.n	800cd82 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cd6e:	f7ff ff7f 	bl	800cc70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cd72:	4b08      	ldr	r3, [pc, #32]	; (800cd94 <osKernelStart+0x68>)
 800cd74:	2202      	movs	r2, #2
 800cd76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd78:	f001 feb0 	bl	800eadc <vTaskStartScheduler>
      stat = osOK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	e002      	b.n	800cd88 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cd82:	f04f 33ff 	mov.w	r3, #4294967295
 800cd86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cd88:	68fb      	ldr	r3, [r7, #12]
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	20000238 	.word	0x20000238

0800cd98 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd9e:	f3ef 8305 	mrs	r3, IPSR
 800cda2:	60bb      	str	r3, [r7, #8]
  return(result);
 800cda4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d10f      	bne.n	800cdca <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdaa:	f3ef 8310 	mrs	r3, PRIMASK
 800cdae:	607b      	str	r3, [r7, #4]
  return(result);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d105      	bne.n	800cdc2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cdb6:	f3ef 8311 	mrs	r3, BASEPRI
 800cdba:	603b      	str	r3, [r7, #0]
  return(result);
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d007      	beq.n	800cdd2 <osKernelGetTickCount+0x3a>
 800cdc2:	4b08      	ldr	r3, [pc, #32]	; (800cde4 <osKernelGetTickCount+0x4c>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	d103      	bne.n	800cdd2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800cdca:	f001 ffa5 	bl	800ed18 <xTaskGetTickCountFromISR>
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	e002      	b.n	800cdd8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800cdd2:	f001 ff91 	bl	800ecf8 <xTaskGetTickCount>
 800cdd6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	20000238 	.word	0x20000238

0800cde8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b090      	sub	sp, #64	; 0x40
 800cdec:	af04      	add	r7, sp, #16
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdf8:	f3ef 8305 	mrs	r3, IPSR
 800cdfc:	61fb      	str	r3, [r7, #28]
  return(result);
 800cdfe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f040 808f 	bne.w	800cf24 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce06:	f3ef 8310 	mrs	r3, PRIMASK
 800ce0a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d105      	bne.n	800ce1e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce12:	f3ef 8311 	mrs	r3, BASEPRI
 800ce16:	617b      	str	r3, [r7, #20]
  return(result);
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d003      	beq.n	800ce26 <osThreadNew+0x3e>
 800ce1e:	4b44      	ldr	r3, [pc, #272]	; (800cf30 <osThreadNew+0x148>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2b02      	cmp	r3, #2
 800ce24:	d07e      	beq.n	800cf24 <osThreadNew+0x13c>
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d07b      	beq.n	800cf24 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ce2c:	2380      	movs	r3, #128	; 0x80
 800ce2e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ce30:	2318      	movs	r3, #24
 800ce32:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ce34:	2300      	movs	r3, #0
 800ce36:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ce38:	f04f 33ff 	mov.w	r3, #4294967295
 800ce3c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d045      	beq.n	800ced0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d002      	beq.n	800ce52 <osThreadNew+0x6a>
        name = attr->name;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	699b      	ldr	r3, [r3, #24]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d002      	beq.n	800ce60 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	699b      	ldr	r3, [r3, #24]
 800ce5e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d008      	beq.n	800ce78 <osThreadNew+0x90>
 800ce66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce68:	2b38      	cmp	r3, #56	; 0x38
 800ce6a:	d805      	bhi.n	800ce78 <osThreadNew+0x90>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	f003 0301 	and.w	r3, r3, #1
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <osThreadNew+0x94>
        return (NULL);
 800ce78:	2300      	movs	r3, #0
 800ce7a:	e054      	b.n	800cf26 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d003      	beq.n	800ce8c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	695b      	ldr	r3, [r3, #20]
 800ce88:	089b      	lsrs	r3, r3, #2
 800ce8a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d00e      	beq.n	800ceb2 <osThreadNew+0xca>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	2b5b      	cmp	r3, #91	; 0x5b
 800ce9a:	d90a      	bls.n	800ceb2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d006      	beq.n	800ceb2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d002      	beq.n	800ceb2 <osThreadNew+0xca>
        mem = 1;
 800ceac:	2301      	movs	r3, #1
 800ceae:	623b      	str	r3, [r7, #32]
 800ceb0:	e010      	b.n	800ced4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10c      	bne.n	800ced4 <osThreadNew+0xec>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d108      	bne.n	800ced4 <osThreadNew+0xec>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	691b      	ldr	r3, [r3, #16]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d104      	bne.n	800ced4 <osThreadNew+0xec>
          mem = 0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	623b      	str	r3, [r7, #32]
 800cece:	e001      	b.n	800ced4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ced0:	2300      	movs	r3, #0
 800ced2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ced4:	6a3b      	ldr	r3, [r7, #32]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d110      	bne.n	800cefc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cee2:	9202      	str	r2, [sp, #8]
 800cee4:	9301      	str	r3, [sp, #4]
 800cee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ceee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f001 fc21 	bl	800e738 <xTaskCreateStatic>
 800cef6:	4603      	mov	r3, r0
 800cef8:	613b      	str	r3, [r7, #16]
 800cefa:	e013      	b.n	800cf24 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800cefc:	6a3b      	ldr	r3, [r7, #32]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d110      	bne.n	800cf24 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf04:	b29a      	uxth	r2, r3
 800cf06:	f107 0310 	add.w	r3, r7, #16
 800cf0a:	9301      	str	r3, [sp, #4]
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0e:	9300      	str	r3, [sp, #0]
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f001 fc69 	bl	800e7ec <xTaskCreate>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d001      	beq.n	800cf24 <osThreadNew+0x13c>
          hTask = NULL;
 800cf20:	2300      	movs	r3, #0
 800cf22:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cf24:	693b      	ldr	r3, [r7, #16]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3730      	adds	r7, #48	; 0x30
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	20000238 	.word	0x20000238

0800cf34 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf3c:	f3ef 8305 	mrs	r3, IPSR
 800cf40:	613b      	str	r3, [r7, #16]
  return(result);
 800cf42:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10f      	bne.n	800cf68 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf48:	f3ef 8310 	mrs	r3, PRIMASK
 800cf4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d105      	bne.n	800cf60 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf54:	f3ef 8311 	mrs	r3, BASEPRI
 800cf58:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d007      	beq.n	800cf70 <osDelay+0x3c>
 800cf60:	4b0a      	ldr	r3, [pc, #40]	; (800cf8c <osDelay+0x58>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	d103      	bne.n	800cf70 <osDelay+0x3c>
    stat = osErrorISR;
 800cf68:	f06f 0305 	mvn.w	r3, #5
 800cf6c:	617b      	str	r3, [r7, #20]
 800cf6e:	e007      	b.n	800cf80 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cf70:	2300      	movs	r3, #0
 800cf72:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d002      	beq.n	800cf80 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f001 fd7a 	bl	800ea74 <vTaskDelay>
    }
  }

  return (stat);
 800cf80:	697b      	ldr	r3, [r7, #20]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3718      	adds	r7, #24
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20000238 	.word	0x20000238

0800cf90 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08c      	sub	sp, #48	; 0x30
 800cf94:	af02      	add	r7, sp, #8
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfa0:	f3ef 8305 	mrs	r3, IPSR
 800cfa4:	61bb      	str	r3, [r7, #24]
  return(result);
 800cfa6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f040 8087 	bne.w	800d0bc <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfae:	f3ef 8310 	mrs	r3, PRIMASK
 800cfb2:	617b      	str	r3, [r7, #20]
  return(result);
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d105      	bne.n	800cfc6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfba:	f3ef 8311 	mrs	r3, BASEPRI
 800cfbe:	613b      	str	r3, [r7, #16]
  return(result);
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d003      	beq.n	800cfce <osSemaphoreNew+0x3e>
 800cfc6:	4b40      	ldr	r3, [pc, #256]	; (800d0c8 <osSemaphoreNew+0x138>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d076      	beq.n	800d0bc <osSemaphoreNew+0x12c>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d073      	beq.n	800d0bc <osSemaphoreNew+0x12c>
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d86f      	bhi.n	800d0bc <osSemaphoreNew+0x12c>
    mem = -1;
 800cfdc:	f04f 33ff 	mov.w	r3, #4294967295
 800cfe0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d015      	beq.n	800d014 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d006      	beq.n	800cffe <osSemaphoreNew+0x6e>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	2b4f      	cmp	r3, #79	; 0x4f
 800cff6:	d902      	bls.n	800cffe <osSemaphoreNew+0x6e>
        mem = 1;
 800cff8:	2301      	movs	r3, #1
 800cffa:	623b      	str	r3, [r7, #32]
 800cffc:	e00c      	b.n	800d018 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	689b      	ldr	r3, [r3, #8]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d108      	bne.n	800d018 <osSemaphoreNew+0x88>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d104      	bne.n	800d018 <osSemaphoreNew+0x88>
          mem = 0;
 800d00e:	2300      	movs	r3, #0
 800d010:	623b      	str	r3, [r7, #32]
 800d012:	e001      	b.n	800d018 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01e:	d04d      	beq.n	800d0bc <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d129      	bne.n	800d07a <osSemaphoreNew+0xea>
        if (mem == 1) {
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d10b      	bne.n	800d044 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	689a      	ldr	r2, [r3, #8]
 800d030:	2303      	movs	r3, #3
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	4613      	mov	r3, r2
 800d036:	2200      	movs	r2, #0
 800d038:	2100      	movs	r1, #0
 800d03a:	2001      	movs	r0, #1
 800d03c:	f000 fbf6 	bl	800d82c <xQueueGenericCreateStatic>
 800d040:	6278      	str	r0, [r7, #36]	; 0x24
 800d042:	e005      	b.n	800d050 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d044:	2203      	movs	r2, #3
 800d046:	2100      	movs	r1, #0
 800d048:	2001      	movs	r0, #1
 800d04a:	f000 fc62 	bl	800d912 <xQueueGenericCreate>
 800d04e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d052:	2b00      	cmp	r3, #0
 800d054:	d022      	beq.n	800d09c <osSemaphoreNew+0x10c>
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d01f      	beq.n	800d09c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d05c:	2300      	movs	r3, #0
 800d05e:	2200      	movs	r2, #0
 800d060:	2100      	movs	r1, #0
 800d062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d064:	f000 fd1e 	bl	800daa4 <xQueueGenericSend>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d016      	beq.n	800d09c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800d06e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d070:	f001 f991 	bl	800e396 <vQueueDelete>
            hSemaphore = NULL;
 800d074:	2300      	movs	r3, #0
 800d076:	627b      	str	r3, [r7, #36]	; 0x24
 800d078:	e010      	b.n	800d09c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d108      	bne.n	800d092 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	461a      	mov	r2, r3
 800d086:	68b9      	ldr	r1, [r7, #8]
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f000 fca4 	bl	800d9d6 <xQueueCreateCountingSemaphoreStatic>
 800d08e:	6278      	str	r0, [r7, #36]	; 0x24
 800d090:	e004      	b.n	800d09c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d092:	68b9      	ldr	r1, [r7, #8]
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f000 fcd3 	bl	800da40 <xQueueCreateCountingSemaphore>
 800d09a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00c      	beq.n	800d0bc <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d003      	beq.n	800d0b0 <osSemaphoreNew+0x120>
          name = attr->name;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	61fb      	str	r3, [r7, #28]
 800d0ae:	e001      	b.n	800d0b4 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d0b4:	69f9      	ldr	r1, [r7, #28]
 800d0b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0b8:	f001 fab8 	bl	800e62c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3728      	adds	r7, #40	; 0x28
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	20000238 	.word	0x20000238

0800d0cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b088      	sub	sp, #32
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d103      	bne.n	800d0ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d0e4:	f06f 0303 	mvn.w	r3, #3
 800d0e8:	61fb      	str	r3, [r7, #28]
 800d0ea:	e04b      	b.n	800d184 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0ec:	f3ef 8305 	mrs	r3, IPSR
 800d0f0:	617b      	str	r3, [r7, #20]
  return(result);
 800d0f2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10f      	bne.n	800d118 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d0fc:	613b      	str	r3, [r7, #16]
  return(result);
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d105      	bne.n	800d110 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d104:	f3ef 8311 	mrs	r3, BASEPRI
 800d108:	60fb      	str	r3, [r7, #12]
  return(result);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d026      	beq.n	800d15e <osSemaphoreAcquire+0x92>
 800d110:	4b1f      	ldr	r3, [pc, #124]	; (800d190 <osSemaphoreAcquire+0xc4>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b02      	cmp	r3, #2
 800d116:	d122      	bne.n	800d15e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d003      	beq.n	800d126 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d11e:	f06f 0303 	mvn.w	r3, #3
 800d122:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d124:	e02d      	b.n	800d182 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d126:	2300      	movs	r3, #0
 800d128:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d12a:	f107 0308 	add.w	r3, r7, #8
 800d12e:	461a      	mov	r2, r3
 800d130:	2100      	movs	r1, #0
 800d132:	69b8      	ldr	r0, [r7, #24]
 800d134:	f001 f8b2 	bl	800e29c <xQueueReceiveFromISR>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d003      	beq.n	800d146 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d13e:	f06f 0302 	mvn.w	r3, #2
 800d142:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d144:	e01d      	b.n	800d182 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d01a      	beq.n	800d182 <osSemaphoreAcquire+0xb6>
 800d14c:	4b11      	ldr	r3, [pc, #68]	; (800d194 <osSemaphoreAcquire+0xc8>)
 800d14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d152:	601a      	str	r2, [r3, #0]
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d15c:	e011      	b.n	800d182 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	69b8      	ldr	r0, [r7, #24]
 800d162:	f000 ff93 	bl	800e08c <xQueueSemaphoreTake>
 800d166:	4603      	mov	r3, r0
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d00b      	beq.n	800d184 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d003      	beq.n	800d17a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d172:	f06f 0301 	mvn.w	r3, #1
 800d176:	61fb      	str	r3, [r7, #28]
 800d178:	e004      	b.n	800d184 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d17a:	f06f 0302 	mvn.w	r3, #2
 800d17e:	61fb      	str	r3, [r7, #28]
 800d180:	e000      	b.n	800d184 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d182:	bf00      	nop
      }
    }
  }

  return (stat);
 800d184:	69fb      	ldr	r3, [r7, #28]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3720      	adds	r7, #32
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	20000238 	.word	0x20000238
 800d194:	e000ed04 	.word	0xe000ed04

0800d198 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d198:	b580      	push	{r7, lr}
 800d19a:	b088      	sub	sp, #32
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d103      	bne.n	800d1b6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d1ae:	f06f 0303 	mvn.w	r3, #3
 800d1b2:	61fb      	str	r3, [r7, #28]
 800d1b4:	e03e      	b.n	800d234 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1b6:	f3ef 8305 	mrs	r3, IPSR
 800d1ba:	617b      	str	r3, [r7, #20]
  return(result);
 800d1bc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d10f      	bne.n	800d1e2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1c2:	f3ef 8310 	mrs	r3, PRIMASK
 800d1c6:	613b      	str	r3, [r7, #16]
  return(result);
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d105      	bne.n	800d1da <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1ce:	f3ef 8311 	mrs	r3, BASEPRI
 800d1d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d01e      	beq.n	800d218 <osSemaphoreRelease+0x80>
 800d1da:	4b19      	ldr	r3, [pc, #100]	; (800d240 <osSemaphoreRelease+0xa8>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b02      	cmp	r3, #2
 800d1e0:	d11a      	bne.n	800d218 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d1e6:	f107 0308 	add.w	r3, r7, #8
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	69b8      	ldr	r0, [r7, #24]
 800d1ee:	f000 fde7 	bl	800ddc0 <xQueueGiveFromISR>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d003      	beq.n	800d200 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d1f8:	f06f 0302 	mvn.w	r3, #2
 800d1fc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d1fe:	e018      	b.n	800d232 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d015      	beq.n	800d232 <osSemaphoreRelease+0x9a>
 800d206:	4b0f      	ldr	r3, [pc, #60]	; (800d244 <osSemaphoreRelease+0xac>)
 800d208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d20c:	601a      	str	r2, [r3, #0]
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d216:	e00c      	b.n	800d232 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d218:	2300      	movs	r3, #0
 800d21a:	2200      	movs	r2, #0
 800d21c:	2100      	movs	r1, #0
 800d21e:	69b8      	ldr	r0, [r7, #24]
 800d220:	f000 fc40 	bl	800daa4 <xQueueGenericSend>
 800d224:	4603      	mov	r3, r0
 800d226:	2b01      	cmp	r3, #1
 800d228:	d004      	beq.n	800d234 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d22a:	f06f 0302 	mvn.w	r3, #2
 800d22e:	61fb      	str	r3, [r7, #28]
 800d230:	e000      	b.n	800d234 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d232:	bf00      	nop
    }
  }

  return (stat);
 800d234:	69fb      	ldr	r3, [r7, #28]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3720      	adds	r7, #32
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	20000238 	.word	0x20000238
 800d244:	e000ed04 	.word	0xe000ed04

0800d248 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d248:	b580      	push	{r7, lr}
 800d24a:	b088      	sub	sp, #32
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d254:	f3ef 8305 	mrs	r3, IPSR
 800d258:	617b      	str	r3, [r7, #20]
  return(result);
 800d25a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10f      	bne.n	800d280 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d260:	f3ef 8310 	mrs	r3, PRIMASK
 800d264:	613b      	str	r3, [r7, #16]
  return(result);
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d105      	bne.n	800d278 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d26c:	f3ef 8311 	mrs	r3, BASEPRI
 800d270:	60fb      	str	r3, [r7, #12]
  return(result);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d007      	beq.n	800d288 <osSemaphoreDelete+0x40>
 800d278:	4b0d      	ldr	r3, [pc, #52]	; (800d2b0 <osSemaphoreDelete+0x68>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d103      	bne.n	800d288 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d280:	f06f 0305 	mvn.w	r3, #5
 800d284:	61fb      	str	r3, [r7, #28]
 800d286:	e00e      	b.n	800d2a6 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d103      	bne.n	800d296 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d28e:	f06f 0303 	mvn.w	r3, #3
 800d292:	61fb      	str	r3, [r7, #28]
 800d294:	e007      	b.n	800d2a6 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d296:	69b8      	ldr	r0, [r7, #24]
 800d298:	f001 f9f0 	bl	800e67c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d2a0:	69b8      	ldr	r0, [r7, #24]
 800d2a2:	f001 f878 	bl	800e396 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d2a6:	69fb      	ldr	r3, [r7, #28]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3720      	adds	r7, #32
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	20000238 	.word	0x20000238

0800d2b4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b08c      	sub	sp, #48	; 0x30
 800d2b8:	af02      	add	r7, sp, #8
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2c4:	f3ef 8305 	mrs	r3, IPSR
 800d2c8:	61bb      	str	r3, [r7, #24]
  return(result);
 800d2ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d170      	bne.n	800d3b2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d2d4:	617b      	str	r3, [r7, #20]
  return(result);
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d105      	bne.n	800d2e8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d2dc:	f3ef 8311 	mrs	r3, BASEPRI
 800d2e0:	613b      	str	r3, [r7, #16]
  return(result);
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d003      	beq.n	800d2f0 <osMessageQueueNew+0x3c>
 800d2e8:	4b34      	ldr	r3, [pc, #208]	; (800d3bc <osMessageQueueNew+0x108>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b02      	cmp	r3, #2
 800d2ee:	d060      	beq.n	800d3b2 <osMessageQueueNew+0xfe>
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d05d      	beq.n	800d3b2 <osMessageQueueNew+0xfe>
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d05a      	beq.n	800d3b2 <osMessageQueueNew+0xfe>
    mem = -1;
 800d2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d300:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d029      	beq.n	800d35c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d012      	beq.n	800d336 <osMessageQueueNew+0x82>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	2b4f      	cmp	r3, #79	; 0x4f
 800d316:	d90e      	bls.n	800d336 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00a      	beq.n	800d336 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	695a      	ldr	r2, [r3, #20]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	68b9      	ldr	r1, [r7, #8]
 800d328:	fb01 f303 	mul.w	r3, r1, r3
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d302      	bcc.n	800d336 <osMessageQueueNew+0x82>
        mem = 1;
 800d330:	2301      	movs	r3, #1
 800d332:	623b      	str	r3, [r7, #32]
 800d334:	e014      	b.n	800d360 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d110      	bne.n	800d360 <osMessageQueueNew+0xac>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10c      	bne.n	800d360 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d108      	bne.n	800d360 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d104      	bne.n	800d360 <osMessageQueueNew+0xac>
          mem = 0;
 800d356:	2300      	movs	r3, #0
 800d358:	623b      	str	r3, [r7, #32]
 800d35a:	e001      	b.n	800d360 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d35c:	2300      	movs	r3, #0
 800d35e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d360:	6a3b      	ldr	r3, [r7, #32]
 800d362:	2b01      	cmp	r3, #1
 800d364:	d10c      	bne.n	800d380 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	691a      	ldr	r2, [r3, #16]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6899      	ldr	r1, [r3, #8]
 800d36e:	2300      	movs	r3, #0
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	460b      	mov	r3, r1
 800d374:	68b9      	ldr	r1, [r7, #8]
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f000 fa58 	bl	800d82c <xQueueGenericCreateStatic>
 800d37c:	6278      	str	r0, [r7, #36]	; 0x24
 800d37e:	e008      	b.n	800d392 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800d380:	6a3b      	ldr	r3, [r7, #32]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d105      	bne.n	800d392 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d386:	2200      	movs	r2, #0
 800d388:	68b9      	ldr	r1, [r7, #8]
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f000 fac1 	bl	800d912 <xQueueGenericCreate>
 800d390:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00c      	beq.n	800d3b2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d003      	beq.n	800d3a6 <osMessageQueueNew+0xf2>
        name = attr->name;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	61fb      	str	r3, [r7, #28]
 800d3a4:	e001      	b.n	800d3aa <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d3aa:	69f9      	ldr	r1, [r7, #28]
 800d3ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3ae:	f001 f93d 	bl	800e62c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3728      	adds	r7, #40	; 0x28
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	20000238 	.word	0x20000238

0800d3c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b08a      	sub	sp, #40	; 0x28
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	603b      	str	r3, [r7, #0]
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3d8:	f3ef 8305 	mrs	r3, IPSR
 800d3dc:	61fb      	str	r3, [r7, #28]
  return(result);
 800d3de:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10f      	bne.n	800d404 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3e4:	f3ef 8310 	mrs	r3, PRIMASK
 800d3e8:	61bb      	str	r3, [r7, #24]
  return(result);
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d105      	bne.n	800d3fc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d3f0:	f3ef 8311 	mrs	r3, BASEPRI
 800d3f4:	617b      	str	r3, [r7, #20]
  return(result);
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d02c      	beq.n	800d456 <osMessageQueuePut+0x96>
 800d3fc:	4b28      	ldr	r3, [pc, #160]	; (800d4a0 <osMessageQueuePut+0xe0>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2b02      	cmp	r3, #2
 800d402:	d128      	bne.n	800d456 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d404:	6a3b      	ldr	r3, [r7, #32]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d005      	beq.n	800d416 <osMessageQueuePut+0x56>
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d002      	beq.n	800d416 <osMessageQueuePut+0x56>
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d003      	beq.n	800d41e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d416:	f06f 0303 	mvn.w	r3, #3
 800d41a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d41c:	e039      	b.n	800d492 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d41e:	2300      	movs	r3, #0
 800d420:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d422:	f107 0210 	add.w	r2, r7, #16
 800d426:	2300      	movs	r3, #0
 800d428:	68b9      	ldr	r1, [r7, #8]
 800d42a:	6a38      	ldr	r0, [r7, #32]
 800d42c:	f000 fc34 	bl	800dc98 <xQueueGenericSendFromISR>
 800d430:	4603      	mov	r3, r0
 800d432:	2b01      	cmp	r3, #1
 800d434:	d003      	beq.n	800d43e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d436:	f06f 0302 	mvn.w	r3, #2
 800d43a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d43c:	e029      	b.n	800d492 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d026      	beq.n	800d492 <osMessageQueuePut+0xd2>
 800d444:	4b17      	ldr	r3, [pc, #92]	; (800d4a4 <osMessageQueuePut+0xe4>)
 800d446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d44a:	601a      	str	r2, [r3, #0]
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d454:	e01d      	b.n	800d492 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d456:	6a3b      	ldr	r3, [r7, #32]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <osMessageQueuePut+0xa2>
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d103      	bne.n	800d46a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d462:	f06f 0303 	mvn.w	r3, #3
 800d466:	627b      	str	r3, [r7, #36]	; 0x24
 800d468:	e014      	b.n	800d494 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d46a:	2300      	movs	r3, #0
 800d46c:	683a      	ldr	r2, [r7, #0]
 800d46e:	68b9      	ldr	r1, [r7, #8]
 800d470:	6a38      	ldr	r0, [r7, #32]
 800d472:	f000 fb17 	bl	800daa4 <xQueueGenericSend>
 800d476:	4603      	mov	r3, r0
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d00b      	beq.n	800d494 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d003      	beq.n	800d48a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d482:	f06f 0301 	mvn.w	r3, #1
 800d486:	627b      	str	r3, [r7, #36]	; 0x24
 800d488:	e004      	b.n	800d494 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d48a:	f06f 0302 	mvn.w	r3, #2
 800d48e:	627b      	str	r3, [r7, #36]	; 0x24
 800d490:	e000      	b.n	800d494 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d492:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d496:	4618      	mov	r0, r3
 800d498:	3728      	adds	r7, #40	; 0x28
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	20000238 	.word	0x20000238
 800d4a4:	e000ed04 	.word	0xe000ed04

0800d4a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08a      	sub	sp, #40	; 0x28
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
 800d4b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4be:	f3ef 8305 	mrs	r3, IPSR
 800d4c2:	61fb      	str	r3, [r7, #28]
  return(result);
 800d4c4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10f      	bne.n	800d4ea <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ce:	61bb      	str	r3, [r7, #24]
  return(result);
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d105      	bne.n	800d4e2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4d6:	f3ef 8311 	mrs	r3, BASEPRI
 800d4da:	617b      	str	r3, [r7, #20]
  return(result);
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d02c      	beq.n	800d53c <osMessageQueueGet+0x94>
 800d4e2:	4b28      	ldr	r3, [pc, #160]	; (800d584 <osMessageQueueGet+0xdc>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d128      	bne.n	800d53c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4ea:	6a3b      	ldr	r3, [r7, #32]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d005      	beq.n	800d4fc <osMessageQueueGet+0x54>
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d002      	beq.n	800d4fc <osMessageQueueGet+0x54>
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d003      	beq.n	800d504 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d4fc:	f06f 0303 	mvn.w	r3, #3
 800d500:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d502:	e038      	b.n	800d576 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d504:	2300      	movs	r3, #0
 800d506:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d508:	f107 0310 	add.w	r3, r7, #16
 800d50c:	461a      	mov	r2, r3
 800d50e:	68b9      	ldr	r1, [r7, #8]
 800d510:	6a38      	ldr	r0, [r7, #32]
 800d512:	f000 fec3 	bl	800e29c <xQueueReceiveFromISR>
 800d516:	4603      	mov	r3, r0
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d003      	beq.n	800d524 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d51c:	f06f 0302 	mvn.w	r3, #2
 800d520:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d522:	e028      	b.n	800d576 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d025      	beq.n	800d576 <osMessageQueueGet+0xce>
 800d52a:	4b17      	ldr	r3, [pc, #92]	; (800d588 <osMessageQueueGet+0xe0>)
 800d52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d53a:	e01c      	b.n	800d576 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d53c:	6a3b      	ldr	r3, [r7, #32]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d002      	beq.n	800d548 <osMessageQueueGet+0xa0>
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d103      	bne.n	800d550 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d548:	f06f 0303 	mvn.w	r3, #3
 800d54c:	627b      	str	r3, [r7, #36]	; 0x24
 800d54e:	e013      	b.n	800d578 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d550:	683a      	ldr	r2, [r7, #0]
 800d552:	68b9      	ldr	r1, [r7, #8]
 800d554:	6a38      	ldr	r0, [r7, #32]
 800d556:	f000 fcbd 	bl	800ded4 <xQueueReceive>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d00b      	beq.n	800d578 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d003      	beq.n	800d56e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d566:	f06f 0301 	mvn.w	r3, #1
 800d56a:	627b      	str	r3, [r7, #36]	; 0x24
 800d56c:	e004      	b.n	800d578 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d56e:	f06f 0302 	mvn.w	r3, #2
 800d572:	627b      	str	r3, [r7, #36]	; 0x24
 800d574:	e000      	b.n	800d578 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d576:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3728      	adds	r7, #40	; 0x28
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	20000238 	.word	0x20000238
 800d588:	e000ed04 	.word	0xe000ed04

0800d58c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	4a07      	ldr	r2, [pc, #28]	; (800d5b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800d59c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	4a06      	ldr	r2, [pc, #24]	; (800d5bc <vApplicationGetIdleTaskMemory+0x30>)
 800d5a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2280      	movs	r2, #128	; 0x80
 800d5a8:	601a      	str	r2, [r3, #0]
}
 800d5aa:	bf00      	nop
 800d5ac:	3714      	adds	r7, #20
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	2000023c 	.word	0x2000023c
 800d5bc:	20000298 	.word	0x20000298

0800d5c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d5c0:	b480      	push	{r7}
 800d5c2:	b085      	sub	sp, #20
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	4a07      	ldr	r2, [pc, #28]	; (800d5ec <vApplicationGetTimerTaskMemory+0x2c>)
 800d5d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	4a06      	ldr	r2, [pc, #24]	; (800d5f0 <vApplicationGetTimerTaskMemory+0x30>)
 800d5d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5de:	601a      	str	r2, [r3, #0]
}
 800d5e0:	bf00      	nop
 800d5e2:	3714      	adds	r7, #20
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr
 800d5ec:	20000498 	.word	0x20000498
 800d5f0:	200004f4 	.word	0x200004f4

0800d5f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f103 0208 	add.w	r2, r3, #8
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f04f 32ff 	mov.w	r2, #4294967295
 800d60c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f103 0208 	add.w	r2, r3, #8
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f103 0208 	add.w	r2, r3, #8
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d628:	bf00      	nop
 800d62a:	370c      	adds	r7, #12
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr

0800d634 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d642:	bf00      	nop
 800d644:	370c      	adds	r7, #12
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr

0800d64e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d64e:	b480      	push	{r7}
 800d650:	b085      	sub	sp, #20
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	689a      	ldr	r2, [r3, #8]
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	683a      	ldr	r2, [r7, #0]
 800d672:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	601a      	str	r2, [r3, #0]
}
 800d68a:	bf00      	nop
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d696:	b480      	push	{r7}
 800d698:	b085      	sub	sp, #20
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
 800d69e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ac:	d103      	bne.n	800d6b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	60fb      	str	r3, [r7, #12]
 800d6b4:	e00c      	b.n	800d6d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	3308      	adds	r3, #8
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	e002      	b.n	800d6c4 <vListInsert+0x2e>
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	60fb      	str	r3, [r7, #12]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d2f6      	bcs.n	800d6be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	685a      	ldr	r2, [r3, #4]
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	683a      	ldr	r2, [r7, #0]
 800d6de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	683a      	ldr	r2, [r7, #0]
 800d6ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	1c5a      	adds	r2, r3, #1
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	601a      	str	r2, [r3, #0]
}
 800d6fc:	bf00      	nop
 800d6fe:	3714      	adds	r7, #20
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d708:	b480      	push	{r7}
 800d70a:	b085      	sub	sp, #20
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	6892      	ldr	r2, [r2, #8]
 800d71e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	6852      	ldr	r2, [r2, #4]
 800d728:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	429a      	cmp	r2, r3
 800d732:	d103      	bne.n	800d73c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	689a      	ldr	r2, [r3, #8]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	1e5a      	subs	r2, r3, #1
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3714      	adds	r7, #20
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d109      	bne.n	800d784 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	60bb      	str	r3, [r7, #8]
 800d782:	e7fe      	b.n	800d782 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d784:	f002 fc3a 	bl	800fffc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d790:	68f9      	ldr	r1, [r7, #12]
 800d792:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d794:	fb01 f303 	mul.w	r3, r1, r3
 800d798:	441a      	add	r2, r3
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	68f9      	ldr	r1, [r7, #12]
 800d7b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d7ba:	fb01 f303 	mul.w	r3, r1, r3
 800d7be:	441a      	add	r2, r3
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	22ff      	movs	r2, #255	; 0xff
 800d7c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	22ff      	movs	r2, #255	; 0xff
 800d7d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d114      	bne.n	800d804 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d01a      	beq.n	800d818 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	3310      	adds	r3, #16
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f001 fc0a 	bl	800f000 <xTaskRemoveFromEventList>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d012      	beq.n	800d818 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d7f2:	4b0d      	ldr	r3, [pc, #52]	; (800d828 <xQueueGenericReset+0xcc>)
 800d7f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f8:	601a      	str	r2, [r3, #0]
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	e009      	b.n	800d818 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	3310      	adds	r3, #16
 800d808:	4618      	mov	r0, r3
 800d80a:	f7ff fef3 	bl	800d5f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	3324      	adds	r3, #36	; 0x24
 800d812:	4618      	mov	r0, r3
 800d814:	f7ff feee 	bl	800d5f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d818:	f002 fc1e 	bl	8010058 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d81c:	2301      	movs	r3, #1
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	e000ed04 	.word	0xe000ed04

0800d82c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b08e      	sub	sp, #56	; 0x38
 800d830:	af02      	add	r7, sp, #8
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
 800d838:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d109      	bne.n	800d854 <xQueueGenericCreateStatic+0x28>
 800d840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d844:	f383 8811 	msr	BASEPRI, r3
 800d848:	f3bf 8f6f 	isb	sy
 800d84c:	f3bf 8f4f 	dsb	sy
 800d850:	62bb      	str	r3, [r7, #40]	; 0x28
 800d852:	e7fe      	b.n	800d852 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d109      	bne.n	800d86e <xQueueGenericCreateStatic+0x42>
 800d85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85e:	f383 8811 	msr	BASEPRI, r3
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	627b      	str	r3, [r7, #36]	; 0x24
 800d86c:	e7fe      	b.n	800d86c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d002      	beq.n	800d87a <xQueueGenericCreateStatic+0x4e>
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d001      	beq.n	800d87e <xQueueGenericCreateStatic+0x52>
 800d87a:	2301      	movs	r3, #1
 800d87c:	e000      	b.n	800d880 <xQueueGenericCreateStatic+0x54>
 800d87e:	2300      	movs	r3, #0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d109      	bne.n	800d898 <xQueueGenericCreateStatic+0x6c>
 800d884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d888:	f383 8811 	msr	BASEPRI, r3
 800d88c:	f3bf 8f6f 	isb	sy
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	623b      	str	r3, [r7, #32]
 800d896:	e7fe      	b.n	800d896 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d102      	bne.n	800d8a4 <xQueueGenericCreateStatic+0x78>
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d101      	bne.n	800d8a8 <xQueueGenericCreateStatic+0x7c>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	e000      	b.n	800d8aa <xQueueGenericCreateStatic+0x7e>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d109      	bne.n	800d8c2 <xQueueGenericCreateStatic+0x96>
 800d8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	61fb      	str	r3, [r7, #28]
 800d8c0:	e7fe      	b.n	800d8c0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d8c2:	2350      	movs	r3, #80	; 0x50
 800d8c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	2b50      	cmp	r3, #80	; 0x50
 800d8ca:	d009      	beq.n	800d8e0 <xQueueGenericCreateStatic+0xb4>
 800d8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d0:	f383 8811 	msr	BASEPRI, r3
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	61bb      	str	r3, [r7, #24]
 800d8de:	e7fe      	b.n	800d8de <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d8e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00d      	beq.n	800d908 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d8f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fa:	9300      	str	r3, [sp, #0]
 800d8fc:	4613      	mov	r3, r2
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	68b9      	ldr	r1, [r7, #8]
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f000 f844 	bl	800d990 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3730      	adds	r7, #48	; 0x30
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d912:	b580      	push	{r7, lr}
 800d914:	b08a      	sub	sp, #40	; 0x28
 800d916:	af02      	add	r7, sp, #8
 800d918:	60f8      	str	r0, [r7, #12]
 800d91a:	60b9      	str	r1, [r7, #8]
 800d91c:	4613      	mov	r3, r2
 800d91e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d109      	bne.n	800d93a <xQueueGenericCreate+0x28>
 800d926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	613b      	str	r3, [r7, #16]
 800d938:	e7fe      	b.n	800d938 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d102      	bne.n	800d946 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d940:	2300      	movs	r3, #0
 800d942:	61fb      	str	r3, [r7, #28]
 800d944:	e004      	b.n	800d950 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	68ba      	ldr	r2, [r7, #8]
 800d94a:	fb02 f303 	mul.w	r3, r2, r3
 800d94e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	3350      	adds	r3, #80	; 0x50
 800d954:	4618      	mov	r0, r3
 800d956:	f002 fc6b 	bl	8010230 <pvPortMalloc>
 800d95a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d011      	beq.n	800d986 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	3350      	adds	r3, #80	; 0x50
 800d96a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	2200      	movs	r2, #0
 800d970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d974:	79fa      	ldrb	r2, [r7, #7]
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	4613      	mov	r3, r2
 800d97c:	697a      	ldr	r2, [r7, #20]
 800d97e:	68b9      	ldr	r1, [r7, #8]
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f000 f805 	bl	800d990 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d986:	69bb      	ldr	r3, [r7, #24]
	}
 800d988:	4618      	mov	r0, r3
 800d98a:	3720      	adds	r7, #32
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
 800d99c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d103      	bne.n	800d9ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	69ba      	ldr	r2, [r7, #24]
 800d9a8:	601a      	str	r2, [r3, #0]
 800d9aa:	e002      	b.n	800d9b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d9be:	2101      	movs	r1, #1
 800d9c0:	69b8      	ldr	r0, [r7, #24]
 800d9c2:	f7ff fecb 	bl	800d75c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	78fa      	ldrb	r2, [r7, #3]
 800d9ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d9ce:	bf00      	nop
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b08a      	sub	sp, #40	; 0x28
 800d9da:	af02      	add	r7, sp, #8
 800d9dc:	60f8      	str	r0, [r7, #12]
 800d9de:	60b9      	str	r1, [r7, #8]
 800d9e0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d109      	bne.n	800d9fc <xQueueCreateCountingSemaphoreStatic+0x26>
 800d9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ec:	f383 8811 	msr	BASEPRI, r3
 800d9f0:	f3bf 8f6f 	isb	sy
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	61bb      	str	r3, [r7, #24]
 800d9fa:	e7fe      	b.n	800d9fa <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d9fc:	68ba      	ldr	r2, [r7, #8]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	429a      	cmp	r2, r3
 800da02:	d909      	bls.n	800da18 <xQueueCreateCountingSemaphoreStatic+0x42>
 800da04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	617b      	str	r3, [r7, #20]
 800da16:	e7fe      	b.n	800da16 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800da18:	2302      	movs	r3, #2
 800da1a:	9300      	str	r3, [sp, #0]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	2100      	movs	r1, #0
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f7ff ff02 	bl	800d82c <xQueueGenericCreateStatic>
 800da28:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d002      	beq.n	800da36 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800da30:	69fb      	ldr	r3, [r7, #28]
 800da32:	68ba      	ldr	r2, [r7, #8]
 800da34:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800da36:	69fb      	ldr	r3, [r7, #28]
	}
 800da38:	4618      	mov	r0, r3
 800da3a:	3720      	adds	r7, #32
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d109      	bne.n	800da64 <xQueueCreateCountingSemaphore+0x24>
 800da50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da54:	f383 8811 	msr	BASEPRI, r3
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	f3bf 8f4f 	dsb	sy
 800da60:	613b      	str	r3, [r7, #16]
 800da62:	e7fe      	b.n	800da62 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800da64:	683a      	ldr	r2, [r7, #0]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d909      	bls.n	800da80 <xQueueCreateCountingSemaphore+0x40>
 800da6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da70:	f383 8811 	msr	BASEPRI, r3
 800da74:	f3bf 8f6f 	isb	sy
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	60fb      	str	r3, [r7, #12]
 800da7e:	e7fe      	b.n	800da7e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800da80:	2202      	movs	r2, #2
 800da82:	2100      	movs	r1, #0
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f7ff ff44 	bl	800d912 <xQueueGenericCreate>
 800da8a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d002      	beq.n	800da98 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	683a      	ldr	r2, [r7, #0]
 800da96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800da98:	697b      	ldr	r3, [r7, #20]
	}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3718      	adds	r7, #24
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
	...

0800daa4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b08e      	sub	sp, #56	; 0x38
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
 800dab0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dab2:	2300      	movs	r3, #0
 800dab4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800daba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d109      	bne.n	800dad4 <xQueueGenericSend+0x30>
 800dac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac4:	f383 8811 	msr	BASEPRI, r3
 800dac8:	f3bf 8f6f 	isb	sy
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	62bb      	str	r3, [r7, #40]	; 0x28
 800dad2:	e7fe      	b.n	800dad2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d103      	bne.n	800dae2 <xQueueGenericSend+0x3e>
 800dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d101      	bne.n	800dae6 <xQueueGenericSend+0x42>
 800dae2:	2301      	movs	r3, #1
 800dae4:	e000      	b.n	800dae8 <xQueueGenericSend+0x44>
 800dae6:	2300      	movs	r3, #0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d109      	bne.n	800db00 <xQueueGenericSend+0x5c>
 800daec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf0:	f383 8811 	msr	BASEPRI, r3
 800daf4:	f3bf 8f6f 	isb	sy
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	627b      	str	r3, [r7, #36]	; 0x24
 800dafe:	e7fe      	b.n	800dafe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	2b02      	cmp	r3, #2
 800db04:	d103      	bne.n	800db0e <xQueueGenericSend+0x6a>
 800db06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d101      	bne.n	800db12 <xQueueGenericSend+0x6e>
 800db0e:	2301      	movs	r3, #1
 800db10:	e000      	b.n	800db14 <xQueueGenericSend+0x70>
 800db12:	2300      	movs	r3, #0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d109      	bne.n	800db2c <xQueueGenericSend+0x88>
 800db18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1c:	f383 8811 	msr	BASEPRI, r3
 800db20:	f3bf 8f6f 	isb	sy
 800db24:	f3bf 8f4f 	dsb	sy
 800db28:	623b      	str	r3, [r7, #32]
 800db2a:	e7fe      	b.n	800db2a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db2c:	f001 fc1e 	bl	800f36c <xTaskGetSchedulerState>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d102      	bne.n	800db3c <xQueueGenericSend+0x98>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d101      	bne.n	800db40 <xQueueGenericSend+0x9c>
 800db3c:	2301      	movs	r3, #1
 800db3e:	e000      	b.n	800db42 <xQueueGenericSend+0x9e>
 800db40:	2300      	movs	r3, #0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d109      	bne.n	800db5a <xQueueGenericSend+0xb6>
 800db46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4a:	f383 8811 	msr	BASEPRI, r3
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f3bf 8f4f 	dsb	sy
 800db56:	61fb      	str	r3, [r7, #28]
 800db58:	e7fe      	b.n	800db58 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db5a:	f002 fa4f 	bl	800fffc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db66:	429a      	cmp	r2, r3
 800db68:	d302      	bcc.n	800db70 <xQueueGenericSend+0xcc>
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	2b02      	cmp	r3, #2
 800db6e:	d129      	bne.n	800dbc4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db70:	683a      	ldr	r2, [r7, #0]
 800db72:	68b9      	ldr	r1, [r7, #8]
 800db74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db76:	f000 fc48 	bl	800e40a <prvCopyDataToQueue>
 800db7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db80:	2b00      	cmp	r3, #0
 800db82:	d010      	beq.n	800dba6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db86:	3324      	adds	r3, #36	; 0x24
 800db88:	4618      	mov	r0, r3
 800db8a:	f001 fa39 	bl	800f000 <xTaskRemoveFromEventList>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d013      	beq.n	800dbbc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800db94:	4b3f      	ldr	r3, [pc, #252]	; (800dc94 <xQueueGenericSend+0x1f0>)
 800db96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db9a:	601a      	str	r2, [r3, #0]
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	f3bf 8f6f 	isb	sy
 800dba4:	e00a      	b.n	800dbbc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d007      	beq.n	800dbbc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dbac:	4b39      	ldr	r3, [pc, #228]	; (800dc94 <xQueueGenericSend+0x1f0>)
 800dbae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbb2:	601a      	str	r2, [r3, #0]
 800dbb4:	f3bf 8f4f 	dsb	sy
 800dbb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dbbc:	f002 fa4c 	bl	8010058 <vPortExitCritical>
				return pdPASS;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e063      	b.n	800dc8c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d103      	bne.n	800dbd2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dbca:	f002 fa45 	bl	8010058 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	e05c      	b.n	800dc8c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d106      	bne.n	800dbe6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dbd8:	f107 0314 	add.w	r3, r7, #20
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f001 fa71 	bl	800f0c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dbe6:	f002 fa37 	bl	8010058 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dbea:	f000 ffdb 	bl	800eba4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbee:	f002 fa05 	bl	800fffc <vPortEnterCritical>
 800dbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbf8:	b25b      	sxtb	r3, r3
 800dbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbfe:	d103      	bne.n	800dc08 <xQueueGenericSend+0x164>
 800dc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc0e:	b25b      	sxtb	r3, r3
 800dc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc14:	d103      	bne.n	800dc1e <xQueueGenericSend+0x17a>
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc1e:	f002 fa1b 	bl	8010058 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc22:	1d3a      	adds	r2, r7, #4
 800dc24:	f107 0314 	add.w	r3, r7, #20
 800dc28:	4611      	mov	r1, r2
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f001 fa60 	bl	800f0f0 <xTaskCheckForTimeOut>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d124      	bne.n	800dc80 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dc36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc38:	f000 fcdf 	bl	800e5fa <prvIsQueueFull>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d018      	beq.n	800dc74 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	3310      	adds	r3, #16
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	4611      	mov	r1, r2
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f001 f98a 	bl	800ef64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dc50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc52:	f000 fc6a 	bl	800e52a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dc56:	f000 ffb3 	bl	800ebc0 <xTaskResumeAll>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f47f af7c 	bne.w	800db5a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800dc62:	4b0c      	ldr	r3, [pc, #48]	; (800dc94 <xQueueGenericSend+0x1f0>)
 800dc64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc68:	601a      	str	r2, [r3, #0]
 800dc6a:	f3bf 8f4f 	dsb	sy
 800dc6e:	f3bf 8f6f 	isb	sy
 800dc72:	e772      	b.n	800db5a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dc74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc76:	f000 fc58 	bl	800e52a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc7a:	f000 ffa1 	bl	800ebc0 <xTaskResumeAll>
 800dc7e:	e76c      	b.n	800db5a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dc80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc82:	f000 fc52 	bl	800e52a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc86:	f000 ff9b 	bl	800ebc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dc8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3738      	adds	r7, #56	; 0x38
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	e000ed04 	.word	0xe000ed04

0800dc98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b08e      	sub	sp, #56	; 0x38
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d109      	bne.n	800dcc4 <xQueueGenericSendFromISR+0x2c>
 800dcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	627b      	str	r3, [r7, #36]	; 0x24
 800dcc2:	e7fe      	b.n	800dcc2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d103      	bne.n	800dcd2 <xQueueGenericSendFromISR+0x3a>
 800dcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <xQueueGenericSendFromISR+0x3e>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e000      	b.n	800dcd8 <xQueueGenericSendFromISR+0x40>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d109      	bne.n	800dcf0 <xQueueGenericSendFromISR+0x58>
 800dcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce0:	f383 8811 	msr	BASEPRI, r3
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	f3bf 8f4f 	dsb	sy
 800dcec:	623b      	str	r3, [r7, #32]
 800dcee:	e7fe      	b.n	800dcee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d103      	bne.n	800dcfe <xQueueGenericSendFromISR+0x66>
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d101      	bne.n	800dd02 <xQueueGenericSendFromISR+0x6a>
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e000      	b.n	800dd04 <xQueueGenericSendFromISR+0x6c>
 800dd02:	2300      	movs	r3, #0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d109      	bne.n	800dd1c <xQueueGenericSendFromISR+0x84>
 800dd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0c:	f383 8811 	msr	BASEPRI, r3
 800dd10:	f3bf 8f6f 	isb	sy
 800dd14:	f3bf 8f4f 	dsb	sy
 800dd18:	61fb      	str	r3, [r7, #28]
 800dd1a:	e7fe      	b.n	800dd1a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd1c:	f002 fa4a 	bl	80101b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dd20:	f3ef 8211 	mrs	r2, BASEPRI
 800dd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd28:	f383 8811 	msr	BASEPRI, r3
 800dd2c:	f3bf 8f6f 	isb	sy
 800dd30:	f3bf 8f4f 	dsb	sy
 800dd34:	61ba      	str	r2, [r7, #24]
 800dd36:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dd38:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d302      	bcc.n	800dd4e <xQueueGenericSendFromISR+0xb6>
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	2b02      	cmp	r3, #2
 800dd4c:	d12c      	bne.n	800dda8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd58:	683a      	ldr	r2, [r7, #0]
 800dd5a:	68b9      	ldr	r1, [r7, #8]
 800dd5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd5e:	f000 fb54 	bl	800e40a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dd62:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800dd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd6a:	d112      	bne.n	800dd92 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d016      	beq.n	800dda2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd76:	3324      	adds	r3, #36	; 0x24
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f001 f941 	bl	800f000 <xTaskRemoveFromEventList>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d00e      	beq.n	800dda2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d00b      	beq.n	800dda2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	601a      	str	r2, [r3, #0]
 800dd90:	e007      	b.n	800dda2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd96:	3301      	adds	r3, #1
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	b25a      	sxtb	r2, r3
 800dd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dda2:	2301      	movs	r3, #1
 800dda4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800dda6:	e001      	b.n	800ddac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	637b      	str	r3, [r7, #52]	; 0x34
 800ddac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ddb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3738      	adds	r7, #56	; 0x38
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08e      	sub	sp, #56	; 0x38
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ddce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d109      	bne.n	800dde8 <xQueueGiveFromISR+0x28>
	__asm volatile
 800ddd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	623b      	str	r3, [r7, #32]
 800dde6:	e7fe      	b.n	800dde6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d009      	beq.n	800de04 <xQueueGiveFromISR+0x44>
 800ddf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	61fb      	str	r3, [r7, #28]
 800de02:	e7fe      	b.n	800de02 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d103      	bne.n	800de14 <xQueueGiveFromISR+0x54>
 800de0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0e:	689b      	ldr	r3, [r3, #8]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d101      	bne.n	800de18 <xQueueGiveFromISR+0x58>
 800de14:	2301      	movs	r3, #1
 800de16:	e000      	b.n	800de1a <xQueueGiveFromISR+0x5a>
 800de18:	2300      	movs	r3, #0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d109      	bne.n	800de32 <xQueueGiveFromISR+0x72>
 800de1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de22:	f383 8811 	msr	BASEPRI, r3
 800de26:	f3bf 8f6f 	isb	sy
 800de2a:	f3bf 8f4f 	dsb	sy
 800de2e:	61bb      	str	r3, [r7, #24]
 800de30:	e7fe      	b.n	800de30 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de32:	f002 f9bf 	bl	80101b4 <vPortValidateInterruptPriority>
	__asm volatile
 800de36:	f3ef 8211 	mrs	r2, BASEPRI
 800de3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3e:	f383 8811 	msr	BASEPRI, r3
 800de42:	f3bf 8f6f 	isb	sy
 800de46:	f3bf 8f4f 	dsb	sy
 800de4a:	617a      	str	r2, [r7, #20]
 800de4c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800de4e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800de58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de5e:	429a      	cmp	r2, r3
 800de60:	d22b      	bcs.n	800deba <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800de62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	1c5a      	adds	r2, r3, #1
 800de70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de72:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800de74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800de78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de7c:	d112      	bne.n	800dea4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de82:	2b00      	cmp	r3, #0
 800de84:	d016      	beq.n	800deb4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de88:	3324      	adds	r3, #36	; 0x24
 800de8a:	4618      	mov	r0, r3
 800de8c:	f001 f8b8 	bl	800f000 <xTaskRemoveFromEventList>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00e      	beq.n	800deb4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d00b      	beq.n	800deb4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	2201      	movs	r2, #1
 800dea0:	601a      	str	r2, [r3, #0]
 800dea2:	e007      	b.n	800deb4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dea8:	3301      	adds	r3, #1
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	b25a      	sxtb	r2, r3
 800deae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800deb4:	2301      	movs	r3, #1
 800deb6:	637b      	str	r3, [r7, #52]	; 0x34
 800deb8:	e001      	b.n	800debe <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800deba:	2300      	movs	r3, #0
 800debc:	637b      	str	r3, [r7, #52]	; 0x34
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800deca:	4618      	mov	r0, r3
 800decc:	3738      	adds	r7, #56	; 0x38
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
	...

0800ded4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b08c      	sub	sp, #48	; 0x30
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dee0:	2300      	movs	r3, #0
 800dee2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deea:	2b00      	cmp	r3, #0
 800deec:	d109      	bne.n	800df02 <xQueueReceive+0x2e>
	__asm volatile
 800deee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def2:	f383 8811 	msr	BASEPRI, r3
 800def6:	f3bf 8f6f 	isb	sy
 800defa:	f3bf 8f4f 	dsb	sy
 800defe:	623b      	str	r3, [r7, #32]
 800df00:	e7fe      	b.n	800df00 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d103      	bne.n	800df10 <xQueueReceive+0x3c>
 800df08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d101      	bne.n	800df14 <xQueueReceive+0x40>
 800df10:	2301      	movs	r3, #1
 800df12:	e000      	b.n	800df16 <xQueueReceive+0x42>
 800df14:	2300      	movs	r3, #0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d109      	bne.n	800df2e <xQueueReceive+0x5a>
 800df1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	61fb      	str	r3, [r7, #28]
 800df2c:	e7fe      	b.n	800df2c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df2e:	f001 fa1d 	bl	800f36c <xTaskGetSchedulerState>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d102      	bne.n	800df3e <xQueueReceive+0x6a>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d101      	bne.n	800df42 <xQueueReceive+0x6e>
 800df3e:	2301      	movs	r3, #1
 800df40:	e000      	b.n	800df44 <xQueueReceive+0x70>
 800df42:	2300      	movs	r3, #0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d109      	bne.n	800df5c <xQueueReceive+0x88>
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	61bb      	str	r3, [r7, #24]
 800df5a:	e7fe      	b.n	800df5a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df5c:	f002 f84e 	bl	800fffc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df64:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d01f      	beq.n	800dfac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df6c:	68b9      	ldr	r1, [r7, #8]
 800df6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df70:	f000 fab5 	bl	800e4de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df76:	1e5a      	subs	r2, r3, #1
 800df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7e:	691b      	ldr	r3, [r3, #16]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00f      	beq.n	800dfa4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df86:	3310      	adds	r3, #16
 800df88:	4618      	mov	r0, r3
 800df8a:	f001 f839 	bl	800f000 <xTaskRemoveFromEventList>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d007      	beq.n	800dfa4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800df94:	4b3c      	ldr	r3, [pc, #240]	; (800e088 <xQueueReceive+0x1b4>)
 800df96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df9a:	601a      	str	r2, [r3, #0]
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dfa4:	f002 f858 	bl	8010058 <vPortExitCritical>
				return pdPASS;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e069      	b.n	800e080 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d103      	bne.n	800dfba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dfb2:	f002 f851 	bl	8010058 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e062      	b.n	800e080 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d106      	bne.n	800dfce <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dfc0:	f107 0310 	add.w	r3, r7, #16
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f001 f87d 	bl	800f0c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dfce:	f002 f843 	bl	8010058 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dfd2:	f000 fde7 	bl	800eba4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfd6:	f002 f811 	bl	800fffc <vPortEnterCritical>
 800dfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfe0:	b25b      	sxtb	r3, r3
 800dfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe6:	d103      	bne.n	800dff0 <xQueueReceive+0x11c>
 800dfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfea:	2200      	movs	r2, #0
 800dfec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dff6:	b25b      	sxtb	r3, r3
 800dff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dffc:	d103      	bne.n	800e006 <xQueueReceive+0x132>
 800dffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e000:	2200      	movs	r2, #0
 800e002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e006:	f002 f827 	bl	8010058 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e00a:	1d3a      	adds	r2, r7, #4
 800e00c:	f107 0310 	add.w	r3, r7, #16
 800e010:	4611      	mov	r1, r2
 800e012:	4618      	mov	r0, r3
 800e014:	f001 f86c 	bl	800f0f0 <xTaskCheckForTimeOut>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d123      	bne.n	800e066 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e01e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e020:	f000 fad5 	bl	800e5ce <prvIsQueueEmpty>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d017      	beq.n	800e05a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02c:	3324      	adds	r3, #36	; 0x24
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	4611      	mov	r1, r2
 800e032:	4618      	mov	r0, r3
 800e034:	f000 ff96 	bl	800ef64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e03a:	f000 fa76 	bl	800e52a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e03e:	f000 fdbf 	bl	800ebc0 <xTaskResumeAll>
 800e042:	4603      	mov	r3, r0
 800e044:	2b00      	cmp	r3, #0
 800e046:	d189      	bne.n	800df5c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800e048:	4b0f      	ldr	r3, [pc, #60]	; (800e088 <xQueueReceive+0x1b4>)
 800e04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e04e:	601a      	str	r2, [r3, #0]
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	f3bf 8f6f 	isb	sy
 800e058:	e780      	b.n	800df5c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e05a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e05c:	f000 fa65 	bl	800e52a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e060:	f000 fdae 	bl	800ebc0 <xTaskResumeAll>
 800e064:	e77a      	b.n	800df5c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e068:	f000 fa5f 	bl	800e52a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e06c:	f000 fda8 	bl	800ebc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e072:	f000 faac 	bl	800e5ce <prvIsQueueEmpty>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f43f af6f 	beq.w	800df5c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e07e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e080:	4618      	mov	r0, r3
 800e082:	3730      	adds	r7, #48	; 0x30
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	e000ed04 	.word	0xe000ed04

0800e08c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b08e      	sub	sp, #56	; 0x38
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e096:	2300      	movs	r3, #0
 800e098:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d109      	bne.n	800e0bc <xQueueSemaphoreTake+0x30>
 800e0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ac:	f383 8811 	msr	BASEPRI, r3
 800e0b0:	f3bf 8f6f 	isb	sy
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	623b      	str	r3, [r7, #32]
 800e0ba:	e7fe      	b.n	800e0ba <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d009      	beq.n	800e0d8 <xQueueSemaphoreTake+0x4c>
 800e0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c8:	f383 8811 	msr	BASEPRI, r3
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f3bf 8f4f 	dsb	sy
 800e0d4:	61fb      	str	r3, [r7, #28]
 800e0d6:	e7fe      	b.n	800e0d6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0d8:	f001 f948 	bl	800f36c <xTaskGetSchedulerState>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d102      	bne.n	800e0e8 <xQueueSemaphoreTake+0x5c>
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d101      	bne.n	800e0ec <xQueueSemaphoreTake+0x60>
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e000      	b.n	800e0ee <xQueueSemaphoreTake+0x62>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d109      	bne.n	800e106 <xQueueSemaphoreTake+0x7a>
 800e0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f6:	f383 8811 	msr	BASEPRI, r3
 800e0fa:	f3bf 8f6f 	isb	sy
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	61bb      	str	r3, [r7, #24]
 800e104:	e7fe      	b.n	800e104 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e106:	f001 ff79 	bl	800fffc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e10e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e112:	2b00      	cmp	r3, #0
 800e114:	d024      	beq.n	800e160 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e118:	1e5a      	subs	r2, r3, #1
 800e11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e11c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d104      	bne.n	800e130 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e126:	f001 fa93 	bl	800f650 <pvTaskIncrementMutexHeldCount>
 800e12a:	4602      	mov	r2, r0
 800e12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e132:	691b      	ldr	r3, [r3, #16]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00f      	beq.n	800e158 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13a:	3310      	adds	r3, #16
 800e13c:	4618      	mov	r0, r3
 800e13e:	f000 ff5f 	bl	800f000 <xTaskRemoveFromEventList>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d007      	beq.n	800e158 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e148:	4b53      	ldr	r3, [pc, #332]	; (800e298 <xQueueSemaphoreTake+0x20c>)
 800e14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e14e:	601a      	str	r2, [r3, #0]
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e158:	f001 ff7e 	bl	8010058 <vPortExitCritical>
				return pdPASS;
 800e15c:	2301      	movs	r3, #1
 800e15e:	e096      	b.n	800e28e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d110      	bne.n	800e188 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d009      	beq.n	800e180 <xQueueSemaphoreTake+0xf4>
 800e16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e170:	f383 8811 	msr	BASEPRI, r3
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	617b      	str	r3, [r7, #20]
 800e17e:	e7fe      	b.n	800e17e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e180:	f001 ff6a 	bl	8010058 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e184:	2300      	movs	r3, #0
 800e186:	e082      	b.n	800e28e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d106      	bne.n	800e19c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e18e:	f107 030c 	add.w	r3, r7, #12
 800e192:	4618      	mov	r0, r3
 800e194:	f000 ff96 	bl	800f0c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e198:	2301      	movs	r3, #1
 800e19a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e19c:	f001 ff5c 	bl	8010058 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e1a0:	f000 fd00 	bl	800eba4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e1a4:	f001 ff2a 	bl	800fffc <vPortEnterCritical>
 800e1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e1ae:	b25b      	sxtb	r3, r3
 800e1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1b4:	d103      	bne.n	800e1be <xQueueSemaphoreTake+0x132>
 800e1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e1c4:	b25b      	sxtb	r3, r3
 800e1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ca:	d103      	bne.n	800e1d4 <xQueueSemaphoreTake+0x148>
 800e1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e1d4:	f001 ff40 	bl	8010058 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1d8:	463a      	mov	r2, r7
 800e1da:	f107 030c 	add.w	r3, r7, #12
 800e1de:	4611      	mov	r1, r2
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f000 ff85 	bl	800f0f0 <xTaskCheckForTimeOut>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d132      	bne.n	800e252 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e1ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1ee:	f000 f9ee 	bl	800e5ce <prvIsQueueEmpty>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d026      	beq.n	800e246 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d109      	bne.n	800e214 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800e200:	f001 fefc 	bl	800fffc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e206:	689b      	ldr	r3, [r3, #8]
 800e208:	4618      	mov	r0, r3
 800e20a:	f001 f8cd 	bl	800f3a8 <xTaskPriorityInherit>
 800e20e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e210:	f001 ff22 	bl	8010058 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e216:	3324      	adds	r3, #36	; 0x24
 800e218:	683a      	ldr	r2, [r7, #0]
 800e21a:	4611      	mov	r1, r2
 800e21c:	4618      	mov	r0, r3
 800e21e:	f000 fea1 	bl	800ef64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e224:	f000 f981 	bl	800e52a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e228:	f000 fcca 	bl	800ebc0 <xTaskResumeAll>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b00      	cmp	r3, #0
 800e230:	f47f af69 	bne.w	800e106 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800e234:	4b18      	ldr	r3, [pc, #96]	; (800e298 <xQueueSemaphoreTake+0x20c>)
 800e236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e23a:	601a      	str	r2, [r3, #0]
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	f3bf 8f6f 	isb	sy
 800e244:	e75f      	b.n	800e106 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e246:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e248:	f000 f96f 	bl	800e52a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e24c:	f000 fcb8 	bl	800ebc0 <xTaskResumeAll>
 800e250:	e759      	b.n	800e106 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e254:	f000 f969 	bl	800e52a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e258:	f000 fcb2 	bl	800ebc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e25c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e25e:	f000 f9b6 	bl	800e5ce <prvIsQueueEmpty>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	f43f af4e 	beq.w	800e106 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d00d      	beq.n	800e28c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800e270:	f001 fec4 	bl	800fffc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e276:	f000 f8b0 	bl	800e3da <prvGetDisinheritPriorityAfterTimeout>
 800e27a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e282:	4618      	mov	r0, r3
 800e284:	f001 f964 	bl	800f550 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e288:	f001 fee6 	bl	8010058 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e28c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3738      	adds	r7, #56	; 0x38
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	e000ed04 	.word	0xe000ed04

0800e29c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b08e      	sub	sp, #56	; 0x38
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d109      	bne.n	800e2c6 <xQueueReceiveFromISR+0x2a>
 800e2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b6:	f383 8811 	msr	BASEPRI, r3
 800e2ba:	f3bf 8f6f 	isb	sy
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	623b      	str	r3, [r7, #32]
 800e2c4:	e7fe      	b.n	800e2c4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d103      	bne.n	800e2d4 <xQueueReceiveFromISR+0x38>
 800e2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d101      	bne.n	800e2d8 <xQueueReceiveFromISR+0x3c>
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	e000      	b.n	800e2da <xQueueReceiveFromISR+0x3e>
 800e2d8:	2300      	movs	r3, #0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d109      	bne.n	800e2f2 <xQueueReceiveFromISR+0x56>
 800e2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	61fb      	str	r3, [r7, #28]
 800e2f0:	e7fe      	b.n	800e2f0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2f2:	f001 ff5f 	bl	80101b4 <vPortValidateInterruptPriority>
	__asm volatile
 800e2f6:	f3ef 8211 	mrs	r2, BASEPRI
 800e2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fe:	f383 8811 	msr	BASEPRI, r3
 800e302:	f3bf 8f6f 	isb	sy
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	61ba      	str	r2, [r7, #24]
 800e30c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e30e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e310:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e316:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d02f      	beq.n	800e37e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e328:	68b9      	ldr	r1, [r7, #8]
 800e32a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e32c:	f000 f8d7 	bl	800e4de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e332:	1e5a      	subs	r2, r3, #1
 800e334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e336:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e338:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e340:	d112      	bne.n	800e368 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d016      	beq.n	800e378 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34c:	3310      	adds	r3, #16
 800e34e:	4618      	mov	r0, r3
 800e350:	f000 fe56 	bl	800f000 <xTaskRemoveFromEventList>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00e      	beq.n	800e378 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d00b      	beq.n	800e378 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2201      	movs	r2, #1
 800e364:	601a      	str	r2, [r3, #0]
 800e366:	e007      	b.n	800e378 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e36c:	3301      	adds	r3, #1
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	b25a      	sxtb	r2, r3
 800e372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e378:	2301      	movs	r3, #1
 800e37a:	637b      	str	r3, [r7, #52]	; 0x34
 800e37c:	e001      	b.n	800e382 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800e37e:	2300      	movs	r3, #0
 800e380:	637b      	str	r3, [r7, #52]	; 0x34
 800e382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e384:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3738      	adds	r7, #56	; 0x38
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}

0800e396 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e396:	b580      	push	{r7, lr}
 800e398:	b084      	sub	sp, #16
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d109      	bne.n	800e3bc <vQueueDelete+0x26>
	__asm volatile
 800e3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ac:	f383 8811 	msr	BASEPRI, r3
 800e3b0:	f3bf 8f6f 	isb	sy
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	60bb      	str	r3, [r7, #8]
 800e3ba:	e7fe      	b.n	800e3ba <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f000 f95d 	bl	800e67c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d102      	bne.n	800e3d2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f001 ff41 	bl	8010254 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e3d2:	bf00      	nop
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e3da:	b480      	push	{r7}
 800e3dc:	b085      	sub	sp, #20
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d006      	beq.n	800e3f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e3f4:	60fb      	str	r3, [r7, #12]
 800e3f6:	e001      	b.n	800e3fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
	}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3714      	adds	r7, #20
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b086      	sub	sp, #24
 800e40e:	af00      	add	r7, sp, #0
 800e410:	60f8      	str	r0, [r7, #12]
 800e412:	60b9      	str	r1, [r7, #8]
 800e414:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e416:	2300      	movs	r3, #0
 800e418:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e41e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10d      	bne.n	800e444 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d14d      	bne.n	800e4cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	689b      	ldr	r3, [r3, #8]
 800e434:	4618      	mov	r0, r3
 800e436:	f001 f81f 	bl	800f478 <xTaskPriorityDisinherit>
 800e43a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	609a      	str	r2, [r3, #8]
 800e442:	e043      	b.n	800e4cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d119      	bne.n	800e47e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6858      	ldr	r0, [r3, #4]
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e452:	461a      	mov	r2, r3
 800e454:	68b9      	ldr	r1, [r7, #8]
 800e456:	f001 ff49 	bl	80102ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	685a      	ldr	r2, [r3, #4]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e462:	441a      	add	r2, r3
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	685a      	ldr	r2, [r3, #4]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	429a      	cmp	r2, r3
 800e472:	d32b      	bcc.n	800e4cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	605a      	str	r2, [r3, #4]
 800e47c:	e026      	b.n	800e4cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	68d8      	ldr	r0, [r3, #12]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e486:	461a      	mov	r2, r3
 800e488:	68b9      	ldr	r1, [r7, #8]
 800e48a:	f001 ff2f 	bl	80102ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	68da      	ldr	r2, [r3, #12]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e496:	425b      	negs	r3, r3
 800e498:	441a      	add	r2, r3
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	68da      	ldr	r2, [r3, #12]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d207      	bcs.n	800e4ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	689a      	ldr	r2, [r3, #8]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4b2:	425b      	negs	r3, r3
 800e4b4:	441a      	add	r2, r3
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2b02      	cmp	r3, #2
 800e4be:	d105      	bne.n	800e4cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d002      	beq.n	800e4cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	1c5a      	adds	r2, r3, #1
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e4d4:	697b      	ldr	r3, [r7, #20]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3718      	adds	r7, #24
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}

0800e4de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e4de:	b580      	push	{r7, lr}
 800e4e0:	b082      	sub	sp, #8
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
 800e4e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d018      	beq.n	800e522 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	68da      	ldr	r2, [r3, #12]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4f8:	441a      	add	r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	68da      	ldr	r2, [r3, #12]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	689b      	ldr	r3, [r3, #8]
 800e506:	429a      	cmp	r2, r3
 800e508:	d303      	bcc.n	800e512 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	68d9      	ldr	r1, [r3, #12]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e51a:	461a      	mov	r2, r3
 800e51c:	6838      	ldr	r0, [r7, #0]
 800e51e:	f001 fee5 	bl	80102ec <memcpy>
	}
}
 800e522:	bf00      	nop
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b084      	sub	sp, #16
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e532:	f001 fd63 	bl	800fffc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e53c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e53e:	e011      	b.n	800e564 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e544:	2b00      	cmp	r3, #0
 800e546:	d012      	beq.n	800e56e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3324      	adds	r3, #36	; 0x24
 800e54c:	4618      	mov	r0, r3
 800e54e:	f000 fd57 	bl	800f000 <xTaskRemoveFromEventList>
 800e552:	4603      	mov	r3, r0
 800e554:	2b00      	cmp	r3, #0
 800e556:	d001      	beq.n	800e55c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e558:	f000 fe2a 	bl	800f1b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e55c:	7bfb      	ldrb	r3, [r7, #15]
 800e55e:	3b01      	subs	r3, #1
 800e560:	b2db      	uxtb	r3, r3
 800e562:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	dce9      	bgt.n	800e540 <prvUnlockQueue+0x16>
 800e56c:	e000      	b.n	800e570 <prvUnlockQueue+0x46>
					break;
 800e56e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	22ff      	movs	r2, #255	; 0xff
 800e574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e578:	f001 fd6e 	bl	8010058 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e57c:	f001 fd3e 	bl	800fffc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e586:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e588:	e011      	b.n	800e5ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	691b      	ldr	r3, [r3, #16]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d012      	beq.n	800e5b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	3310      	adds	r3, #16
 800e596:	4618      	mov	r0, r3
 800e598:	f000 fd32 	bl	800f000 <xTaskRemoveFromEventList>
 800e59c:	4603      	mov	r3, r0
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d001      	beq.n	800e5a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e5a2:	f000 fe05 	bl	800f1b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e5a6:	7bbb      	ldrb	r3, [r7, #14]
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e5ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	dce9      	bgt.n	800e58a <prvUnlockQueue+0x60>
 800e5b6:	e000      	b.n	800e5ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e5b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	22ff      	movs	r2, #255	; 0xff
 800e5be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e5c2:	f001 fd49 	bl	8010058 <vPortExitCritical>
}
 800e5c6:	bf00      	nop
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b084      	sub	sp, #16
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e5d6:	f001 fd11 	bl	800fffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d102      	bne.n	800e5e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	60fb      	str	r3, [r7, #12]
 800e5e6:	e001      	b.n	800e5ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e5ec:	f001 fd34 	bl	8010058 <vPortExitCritical>

	return xReturn;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b084      	sub	sp, #16
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e602:	f001 fcfb 	bl	800fffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e60e:	429a      	cmp	r2, r3
 800e610:	d102      	bne.n	800e618 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e612:	2301      	movs	r3, #1
 800e614:	60fb      	str	r3, [r7, #12]
 800e616:	e001      	b.n	800e61c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e618:	2300      	movs	r3, #0
 800e61a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e61c:	f001 fd1c 	bl	8010058 <vPortExitCritical>

	return xReturn;
 800e620:	68fb      	ldr	r3, [r7, #12]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
	...

0800e62c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e636:	2300      	movs	r3, #0
 800e638:	60fb      	str	r3, [r7, #12]
 800e63a:	e014      	b.n	800e666 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e63c:	4a0e      	ldr	r2, [pc, #56]	; (800e678 <vQueueAddToRegistry+0x4c>)
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d10b      	bne.n	800e660 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e648:	490b      	ldr	r1, [pc, #44]	; (800e678 <vQueueAddToRegistry+0x4c>)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	683a      	ldr	r2, [r7, #0]
 800e64e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e652:	4a09      	ldr	r2, [pc, #36]	; (800e678 <vQueueAddToRegistry+0x4c>)
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	00db      	lsls	r3, r3, #3
 800e658:	4413      	add	r3, r2
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e65e:	e005      	b.n	800e66c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	3301      	adds	r3, #1
 800e664:	60fb      	str	r3, [r7, #12]
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2b07      	cmp	r3, #7
 800e66a:	d9e7      	bls.n	800e63c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e66c:	bf00      	nop
 800e66e:	3714      	adds	r7, #20
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	20003940 	.word	0x20003940

0800e67c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e67c:	b480      	push	{r7}
 800e67e:	b085      	sub	sp, #20
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e684:	2300      	movs	r3, #0
 800e686:	60fb      	str	r3, [r7, #12]
 800e688:	e016      	b.n	800e6b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e68a:	4a10      	ldr	r2, [pc, #64]	; (800e6cc <vQueueUnregisterQueue+0x50>)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	00db      	lsls	r3, r3, #3
 800e690:	4413      	add	r3, r2
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	429a      	cmp	r2, r3
 800e698:	d10b      	bne.n	800e6b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e69a:	4a0c      	ldr	r2, [pc, #48]	; (800e6cc <vQueueUnregisterQueue+0x50>)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2100      	movs	r1, #0
 800e6a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e6a4:	4a09      	ldr	r2, [pc, #36]	; (800e6cc <vQueueUnregisterQueue+0x50>)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	00db      	lsls	r3, r3, #3
 800e6aa:	4413      	add	r3, r2
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	605a      	str	r2, [r3, #4]
				break;
 800e6b0:	e005      	b.n	800e6be <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	60fb      	str	r3, [r7, #12]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2b07      	cmp	r3, #7
 800e6bc:	d9e5      	bls.n	800e68a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e6be:	bf00      	nop
 800e6c0:	3714      	adds	r7, #20
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr
 800e6ca:	bf00      	nop
 800e6cc:	20003940 	.word	0x20003940

0800e6d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b086      	sub	sp, #24
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e6e0:	f001 fc8c 	bl	800fffc <vPortEnterCritical>
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6ea:	b25b      	sxtb	r3, r3
 800e6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6f0:	d103      	bne.n	800e6fa <vQueueWaitForMessageRestricted+0x2a>
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e700:	b25b      	sxtb	r3, r3
 800e702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e706:	d103      	bne.n	800e710 <vQueueWaitForMessageRestricted+0x40>
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e710:	f001 fca2 	bl	8010058 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d106      	bne.n	800e72a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	3324      	adds	r3, #36	; 0x24
 800e720:	687a      	ldr	r2, [r7, #4]
 800e722:	68b9      	ldr	r1, [r7, #8]
 800e724:	4618      	mov	r0, r3
 800e726:	f000 fc41 	bl	800efac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e72a:	6978      	ldr	r0, [r7, #20]
 800e72c:	f7ff fefd 	bl	800e52a <prvUnlockQueue>
	}
 800e730:	bf00      	nop
 800e732:	3718      	adds	r7, #24
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b08e      	sub	sp, #56	; 0x38
 800e73c:	af04      	add	r7, sp, #16
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	607a      	str	r2, [r7, #4]
 800e744:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d109      	bne.n	800e760 <xTaskCreateStatic+0x28>
 800e74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e750:	f383 8811 	msr	BASEPRI, r3
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	623b      	str	r3, [r7, #32]
 800e75e:	e7fe      	b.n	800e75e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800e760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e762:	2b00      	cmp	r3, #0
 800e764:	d109      	bne.n	800e77a <xTaskCreateStatic+0x42>
 800e766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76a:	f383 8811 	msr	BASEPRI, r3
 800e76e:	f3bf 8f6f 	isb	sy
 800e772:	f3bf 8f4f 	dsb	sy
 800e776:	61fb      	str	r3, [r7, #28]
 800e778:	e7fe      	b.n	800e778 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e77a:	235c      	movs	r3, #92	; 0x5c
 800e77c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	2b5c      	cmp	r3, #92	; 0x5c
 800e782:	d009      	beq.n	800e798 <xTaskCreateStatic+0x60>
 800e784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	61bb      	str	r3, [r7, #24]
 800e796:	e7fe      	b.n	800e796 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e798:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d01e      	beq.n	800e7de <xTaskCreateStatic+0xa6>
 800e7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d01b      	beq.n	800e7de <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b2:	2202      	movs	r2, #2
 800e7b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	9303      	str	r3, [sp, #12]
 800e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7be:	9302      	str	r3, [sp, #8]
 800e7c0:	f107 0314 	add.w	r3, r7, #20
 800e7c4:	9301      	str	r3, [sp, #4]
 800e7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c8:	9300      	str	r3, [sp, #0]
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	68b9      	ldr	r1, [r7, #8]
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f000 f850 	bl	800e876 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e7d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7d8:	f000 f8dc 	bl	800e994 <prvAddNewTaskToReadyList>
 800e7dc:	e001      	b.n	800e7e2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e7e2:	697b      	ldr	r3, [r7, #20]
	}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3728      	adds	r7, #40	; 0x28
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b08c      	sub	sp, #48	; 0x30
 800e7f0:	af04      	add	r7, sp, #16
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	603b      	str	r3, [r7, #0]
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e7fc:	88fb      	ldrh	r3, [r7, #6]
 800e7fe:	009b      	lsls	r3, r3, #2
 800e800:	4618      	mov	r0, r3
 800e802:	f001 fd15 	bl	8010230 <pvPortMalloc>
 800e806:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00e      	beq.n	800e82c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e80e:	205c      	movs	r0, #92	; 0x5c
 800e810:	f001 fd0e 	bl	8010230 <pvPortMalloc>
 800e814:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d003      	beq.n	800e824 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	697a      	ldr	r2, [r7, #20]
 800e820:	631a      	str	r2, [r3, #48]	; 0x30
 800e822:	e005      	b.n	800e830 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e824:	6978      	ldr	r0, [r7, #20]
 800e826:	f001 fd15 	bl	8010254 <vPortFree>
 800e82a:	e001      	b.n	800e830 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e82c:	2300      	movs	r3, #0
 800e82e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d017      	beq.n	800e866 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	2200      	movs	r2, #0
 800e83a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e83e:	88fa      	ldrh	r2, [r7, #6]
 800e840:	2300      	movs	r3, #0
 800e842:	9303      	str	r3, [sp, #12]
 800e844:	69fb      	ldr	r3, [r7, #28]
 800e846:	9302      	str	r3, [sp, #8]
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84a:	9301      	str	r3, [sp, #4]
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	68b9      	ldr	r1, [r7, #8]
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f000 f80e 	bl	800e876 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e85a:	69f8      	ldr	r0, [r7, #28]
 800e85c:	f000 f89a 	bl	800e994 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e860:	2301      	movs	r3, #1
 800e862:	61bb      	str	r3, [r7, #24]
 800e864:	e002      	b.n	800e86c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e866:	f04f 33ff 	mov.w	r3, #4294967295
 800e86a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e86c:	69bb      	ldr	r3, [r7, #24]
	}
 800e86e:	4618      	mov	r0, r3
 800e870:	3720      	adds	r7, #32
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b088      	sub	sp, #32
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	60f8      	str	r0, [r7, #12]
 800e87e:	60b9      	str	r1, [r7, #8]
 800e880:	607a      	str	r2, [r7, #4]
 800e882:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e886:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	461a      	mov	r2, r3
 800e88e:	21a5      	movs	r1, #165	; 0xa5
 800e890:	f001 fd37 	bl	8010302 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e89e:	3b01      	subs	r3, #1
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	4413      	add	r3, r2
 800e8a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	f023 0307 	bic.w	r3, r3, #7
 800e8ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	f003 0307 	and.w	r3, r3, #7
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d009      	beq.n	800e8cc <prvInitialiseNewTask+0x56>
 800e8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8bc:	f383 8811 	msr	BASEPRI, r3
 800e8c0:	f3bf 8f6f 	isb	sy
 800e8c4:	f3bf 8f4f 	dsb	sy
 800e8c8:	617b      	str	r3, [r7, #20]
 800e8ca:	e7fe      	b.n	800e8ca <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d01f      	beq.n	800e912 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	61fb      	str	r3, [r7, #28]
 800e8d6:	e012      	b.n	800e8fe <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e8d8:	68ba      	ldr	r2, [r7, #8]
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	4413      	add	r3, r2
 800e8de:	7819      	ldrb	r1, [r3, #0]
 800e8e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	3334      	adds	r3, #52	; 0x34
 800e8e8:	460a      	mov	r2, r1
 800e8ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d006      	beq.n	800e906 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	61fb      	str	r3, [r7, #28]
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	2b0f      	cmp	r3, #15
 800e902:	d9e9      	bls.n	800e8d8 <prvInitialiseNewTask+0x62>
 800e904:	e000      	b.n	800e908 <prvInitialiseNewTask+0x92>
			{
				break;
 800e906:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e910:	e003      	b.n	800e91a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e914:	2200      	movs	r2, #0
 800e916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91c:	2b37      	cmp	r3, #55	; 0x37
 800e91e:	d901      	bls.n	800e924 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e920:	2337      	movs	r3, #55	; 0x37
 800e922:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e928:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e92e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	2200      	movs	r2, #0
 800e934:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e938:	3304      	adds	r3, #4
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fe fe7a 	bl	800d634 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e942:	3318      	adds	r3, #24
 800e944:	4618      	mov	r0, r3
 800e946:	f7fe fe75 	bl	800d634 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e94e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e952:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e958:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e95e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e962:	2200      	movs	r2, #0
 800e964:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e968:	2200      	movs	r2, #0
 800e96a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e96e:	683a      	ldr	r2, [r7, #0]
 800e970:	68f9      	ldr	r1, [r7, #12]
 800e972:	69b8      	ldr	r0, [r7, #24]
 800e974:	f001 fa1a 	bl	800fdac <pxPortInitialiseStack>
 800e978:	4602      	mov	r2, r0
 800e97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e980:	2b00      	cmp	r3, #0
 800e982:	d002      	beq.n	800e98a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e988:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e98a:	bf00      	nop
 800e98c:	3720      	adds	r7, #32
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
	...

0800e994 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e99c:	f001 fb2e 	bl	800fffc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e9a0:	4b2d      	ldr	r3, [pc, #180]	; (800ea58 <prvAddNewTaskToReadyList+0xc4>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	4a2c      	ldr	r2, [pc, #176]	; (800ea58 <prvAddNewTaskToReadyList+0xc4>)
 800e9a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e9aa:	4b2c      	ldr	r3, [pc, #176]	; (800ea5c <prvAddNewTaskToReadyList+0xc8>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d109      	bne.n	800e9c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e9b2:	4a2a      	ldr	r2, [pc, #168]	; (800ea5c <prvAddNewTaskToReadyList+0xc8>)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e9b8:	4b27      	ldr	r3, [pc, #156]	; (800ea58 <prvAddNewTaskToReadyList+0xc4>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d110      	bne.n	800e9e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e9c0:	f000 fc1a 	bl	800f1f8 <prvInitialiseTaskLists>
 800e9c4:	e00d      	b.n	800e9e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e9c6:	4b26      	ldr	r3, [pc, #152]	; (800ea60 <prvAddNewTaskToReadyList+0xcc>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d109      	bne.n	800e9e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e9ce:	4b23      	ldr	r3, [pc, #140]	; (800ea5c <prvAddNewTaskToReadyList+0xc8>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d802      	bhi.n	800e9e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e9dc:	4a1f      	ldr	r2, [pc, #124]	; (800ea5c <prvAddNewTaskToReadyList+0xc8>)
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e9e2:	4b20      	ldr	r3, [pc, #128]	; (800ea64 <prvAddNewTaskToReadyList+0xd0>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	4a1e      	ldr	r2, [pc, #120]	; (800ea64 <prvAddNewTaskToReadyList+0xd0>)
 800e9ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e9ec:	4b1d      	ldr	r3, [pc, #116]	; (800ea64 <prvAddNewTaskToReadyList+0xd0>)
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9f8:	4b1b      	ldr	r3, [pc, #108]	; (800ea68 <prvAddNewTaskToReadyList+0xd4>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d903      	bls.n	800ea08 <prvAddNewTaskToReadyList+0x74>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea04:	4a18      	ldr	r2, [pc, #96]	; (800ea68 <prvAddNewTaskToReadyList+0xd4>)
 800ea06:	6013      	str	r3, [r2, #0]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	009b      	lsls	r3, r3, #2
 800ea10:	4413      	add	r3, r2
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	4a15      	ldr	r2, [pc, #84]	; (800ea6c <prvAddNewTaskToReadyList+0xd8>)
 800ea16:	441a      	add	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	3304      	adds	r3, #4
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	4610      	mov	r0, r2
 800ea20:	f7fe fe15 	bl	800d64e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ea24:	f001 fb18 	bl	8010058 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ea28:	4b0d      	ldr	r3, [pc, #52]	; (800ea60 <prvAddNewTaskToReadyList+0xcc>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d00e      	beq.n	800ea4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ea30:	4b0a      	ldr	r3, [pc, #40]	; (800ea5c <prvAddNewTaskToReadyList+0xc8>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d207      	bcs.n	800ea4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ea3e:	4b0c      	ldr	r3, [pc, #48]	; (800ea70 <prvAddNewTaskToReadyList+0xdc>)
 800ea40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea44:	601a      	str	r2, [r3, #0]
 800ea46:	f3bf 8f4f 	dsb	sy
 800ea4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea4e:	bf00      	nop
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	bf00      	nop
 800ea58:	20000dc8 	.word	0x20000dc8
 800ea5c:	200008f4 	.word	0x200008f4
 800ea60:	20000dd4 	.word	0x20000dd4
 800ea64:	20000de4 	.word	0x20000de4
 800ea68:	20000dd0 	.word	0x20000dd0
 800ea6c:	200008f8 	.word	0x200008f8
 800ea70:	e000ed04 	.word	0xe000ed04

0800ea74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d016      	beq.n	800eab4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ea86:	4b13      	ldr	r3, [pc, #76]	; (800ead4 <vTaskDelay+0x60>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d009      	beq.n	800eaa2 <vTaskDelay+0x2e>
 800ea8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	60bb      	str	r3, [r7, #8]
 800eaa0:	e7fe      	b.n	800eaa0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800eaa2:	f000 f87f 	bl	800eba4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eaa6:	2100      	movs	r1, #0
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f000 fde5 	bl	800f678 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eaae:	f000 f887 	bl	800ebc0 <xTaskResumeAll>
 800eab2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d107      	bne.n	800eaca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800eaba:	4b07      	ldr	r3, [pc, #28]	; (800ead8 <vTaskDelay+0x64>)
 800eabc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eac0:	601a      	str	r2, [r3, #0]
 800eac2:	f3bf 8f4f 	dsb	sy
 800eac6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eaca:	bf00      	nop
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	20000df0 	.word	0x20000df0
 800ead8:	e000ed04 	.word	0xe000ed04

0800eadc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b08a      	sub	sp, #40	; 0x28
 800eae0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eae2:	2300      	movs	r3, #0
 800eae4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eae6:	2300      	movs	r3, #0
 800eae8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eaea:	463a      	mov	r2, r7
 800eaec:	1d39      	adds	r1, r7, #4
 800eaee:	f107 0308 	add.w	r3, r7, #8
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fe fd4a 	bl	800d58c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eaf8:	6839      	ldr	r1, [r7, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	68ba      	ldr	r2, [r7, #8]
 800eafe:	9202      	str	r2, [sp, #8]
 800eb00:	9301      	str	r3, [sp, #4]
 800eb02:	2300      	movs	r3, #0
 800eb04:	9300      	str	r3, [sp, #0]
 800eb06:	2300      	movs	r3, #0
 800eb08:	460a      	mov	r2, r1
 800eb0a:	4920      	ldr	r1, [pc, #128]	; (800eb8c <vTaskStartScheduler+0xb0>)
 800eb0c:	4820      	ldr	r0, [pc, #128]	; (800eb90 <vTaskStartScheduler+0xb4>)
 800eb0e:	f7ff fe13 	bl	800e738 <xTaskCreateStatic>
 800eb12:	4602      	mov	r2, r0
 800eb14:	4b1f      	ldr	r3, [pc, #124]	; (800eb94 <vTaskStartScheduler+0xb8>)
 800eb16:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800eb18:	4b1e      	ldr	r3, [pc, #120]	; (800eb94 <vTaskStartScheduler+0xb8>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d002      	beq.n	800eb26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800eb20:	2301      	movs	r3, #1
 800eb22:	617b      	str	r3, [r7, #20]
 800eb24:	e001      	b.n	800eb2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800eb26:	2300      	movs	r3, #0
 800eb28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d102      	bne.n	800eb36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800eb30:	f000 fdf6 	bl	800f720 <xTimerCreateTimerTask>
 800eb34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d115      	bne.n	800eb68 <vTaskStartScheduler+0x8c>
 800eb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb40:	f383 8811 	msr	BASEPRI, r3
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800eb4e:	4b12      	ldr	r3, [pc, #72]	; (800eb98 <vTaskStartScheduler+0xbc>)
 800eb50:	f04f 32ff 	mov.w	r2, #4294967295
 800eb54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800eb56:	4b11      	ldr	r3, [pc, #68]	; (800eb9c <vTaskStartScheduler+0xc0>)
 800eb58:	2201      	movs	r2, #1
 800eb5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eb5c:	4b10      	ldr	r3, [pc, #64]	; (800eba0 <vTaskStartScheduler+0xc4>)
 800eb5e:	2200      	movs	r2, #0
 800eb60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800eb62:	f001 f9ad 	bl	800fec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eb66:	e00d      	b.n	800eb84 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb6e:	d109      	bne.n	800eb84 <vTaskStartScheduler+0xa8>
 800eb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb74:	f383 8811 	msr	BASEPRI, r3
 800eb78:	f3bf 8f6f 	isb	sy
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	60fb      	str	r3, [r7, #12]
 800eb82:	e7fe      	b.n	800eb82 <vTaskStartScheduler+0xa6>
}
 800eb84:	bf00      	nop
 800eb86:	3718      	adds	r7, #24
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	08014a4c 	.word	0x08014a4c
 800eb90:	0800f1c9 	.word	0x0800f1c9
 800eb94:	20000dec 	.word	0x20000dec
 800eb98:	20000de8 	.word	0x20000de8
 800eb9c:	20000dd4 	.word	0x20000dd4
 800eba0:	20000dcc 	.word	0x20000dcc

0800eba4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eba4:	b480      	push	{r7}
 800eba6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800eba8:	4b04      	ldr	r3, [pc, #16]	; (800ebbc <vTaskSuspendAll+0x18>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	3301      	adds	r3, #1
 800ebae:	4a03      	ldr	r2, [pc, #12]	; (800ebbc <vTaskSuspendAll+0x18>)
 800ebb0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ebb2:	bf00      	nop
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	20000df0 	.word	0x20000df0

0800ebc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ebce:	4b41      	ldr	r3, [pc, #260]	; (800ecd4 <xTaskResumeAll+0x114>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d109      	bne.n	800ebea <xTaskResumeAll+0x2a>
 800ebd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebda:	f383 8811 	msr	BASEPRI, r3
 800ebde:	f3bf 8f6f 	isb	sy
 800ebe2:	f3bf 8f4f 	dsb	sy
 800ebe6:	603b      	str	r3, [r7, #0]
 800ebe8:	e7fe      	b.n	800ebe8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ebea:	f001 fa07 	bl	800fffc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ebee:	4b39      	ldr	r3, [pc, #228]	; (800ecd4 <xTaskResumeAll+0x114>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	3b01      	subs	r3, #1
 800ebf4:	4a37      	ldr	r2, [pc, #220]	; (800ecd4 <xTaskResumeAll+0x114>)
 800ebf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebf8:	4b36      	ldr	r3, [pc, #216]	; (800ecd4 <xTaskResumeAll+0x114>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d162      	bne.n	800ecc6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ec00:	4b35      	ldr	r3, [pc, #212]	; (800ecd8 <xTaskResumeAll+0x118>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d05e      	beq.n	800ecc6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ec08:	e02f      	b.n	800ec6a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec0a:	4b34      	ldr	r3, [pc, #208]	; (800ecdc <xTaskResumeAll+0x11c>)
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	3318      	adds	r3, #24
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fe fd76 	bl	800d708 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	3304      	adds	r3, #4
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7fe fd71 	bl	800d708 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec2a:	4b2d      	ldr	r3, [pc, #180]	; (800ece0 <xTaskResumeAll+0x120>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d903      	bls.n	800ec3a <xTaskResumeAll+0x7a>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec36:	4a2a      	ldr	r2, [pc, #168]	; (800ece0 <xTaskResumeAll+0x120>)
 800ec38:	6013      	str	r3, [r2, #0]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec3e:	4613      	mov	r3, r2
 800ec40:	009b      	lsls	r3, r3, #2
 800ec42:	4413      	add	r3, r2
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	4a27      	ldr	r2, [pc, #156]	; (800ece4 <xTaskResumeAll+0x124>)
 800ec48:	441a      	add	r2, r3
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	3304      	adds	r3, #4
 800ec4e:	4619      	mov	r1, r3
 800ec50:	4610      	mov	r0, r2
 800ec52:	f7fe fcfc 	bl	800d64e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec5a:	4b23      	ldr	r3, [pc, #140]	; (800ece8 <xTaskResumeAll+0x128>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d302      	bcc.n	800ec6a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ec64:	4b21      	ldr	r3, [pc, #132]	; (800ecec <xTaskResumeAll+0x12c>)
 800ec66:	2201      	movs	r2, #1
 800ec68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ec6a:	4b1c      	ldr	r3, [pc, #112]	; (800ecdc <xTaskResumeAll+0x11c>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1cb      	bne.n	800ec0a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d001      	beq.n	800ec7c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ec78:	f000 fb58 	bl	800f32c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ec7c:	4b1c      	ldr	r3, [pc, #112]	; (800ecf0 <xTaskResumeAll+0x130>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d010      	beq.n	800ecaa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ec88:	f000 f858 	bl	800ed3c <xTaskIncrementTick>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d002      	beq.n	800ec98 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ec92:	4b16      	ldr	r3, [pc, #88]	; (800ecec <xTaskResumeAll+0x12c>)
 800ec94:	2201      	movs	r2, #1
 800ec96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	3b01      	subs	r3, #1
 800ec9c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d1f1      	bne.n	800ec88 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800eca4:	4b12      	ldr	r3, [pc, #72]	; (800ecf0 <xTaskResumeAll+0x130>)
 800eca6:	2200      	movs	r2, #0
 800eca8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ecaa:	4b10      	ldr	r3, [pc, #64]	; (800ecec <xTaskResumeAll+0x12c>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d009      	beq.n	800ecc6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ecb6:	4b0f      	ldr	r3, [pc, #60]	; (800ecf4 <xTaskResumeAll+0x134>)
 800ecb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecbc:	601a      	str	r2, [r3, #0]
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ecc6:	f001 f9c7 	bl	8010058 <vPortExitCritical>

	return xAlreadyYielded;
 800ecca:	68bb      	ldr	r3, [r7, #8]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3710      	adds	r7, #16
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	20000df0 	.word	0x20000df0
 800ecd8:	20000dc8 	.word	0x20000dc8
 800ecdc:	20000d88 	.word	0x20000d88
 800ece0:	20000dd0 	.word	0x20000dd0
 800ece4:	200008f8 	.word	0x200008f8
 800ece8:	200008f4 	.word	0x200008f4
 800ecec:	20000ddc 	.word	0x20000ddc
 800ecf0:	20000dd8 	.word	0x20000dd8
 800ecf4:	e000ed04 	.word	0xe000ed04

0800ecf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ecfe:	4b05      	ldr	r3, [pc, #20]	; (800ed14 <xTaskGetTickCount+0x1c>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ed04:	687b      	ldr	r3, [r7, #4]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	370c      	adds	r7, #12
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	20000dcc 	.word	0x20000dcc

0800ed18 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed1e:	f001 fa49 	bl	80101b4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ed22:	2300      	movs	r3, #0
 800ed24:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ed26:	4b04      	ldr	r3, [pc, #16]	; (800ed38 <xTaskGetTickCountFromISR+0x20>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed2c:	683b      	ldr	r3, [r7, #0]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	20000dcc 	.word	0x20000dcc

0800ed3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ed42:	2300      	movs	r3, #0
 800ed44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed46:	4b4e      	ldr	r3, [pc, #312]	; (800ee80 <xTaskIncrementTick+0x144>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	f040 8088 	bne.w	800ee60 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ed50:	4b4c      	ldr	r3, [pc, #304]	; (800ee84 <xTaskIncrementTick+0x148>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	3301      	adds	r3, #1
 800ed56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ed58:	4a4a      	ldr	r2, [pc, #296]	; (800ee84 <xTaskIncrementTick+0x148>)
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d11f      	bne.n	800eda4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ed64:	4b48      	ldr	r3, [pc, #288]	; (800ee88 <xTaskIncrementTick+0x14c>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d009      	beq.n	800ed82 <xTaskIncrementTick+0x46>
 800ed6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed72:	f383 8811 	msr	BASEPRI, r3
 800ed76:	f3bf 8f6f 	isb	sy
 800ed7a:	f3bf 8f4f 	dsb	sy
 800ed7e:	603b      	str	r3, [r7, #0]
 800ed80:	e7fe      	b.n	800ed80 <xTaskIncrementTick+0x44>
 800ed82:	4b41      	ldr	r3, [pc, #260]	; (800ee88 <xTaskIncrementTick+0x14c>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	60fb      	str	r3, [r7, #12]
 800ed88:	4b40      	ldr	r3, [pc, #256]	; (800ee8c <xTaskIncrementTick+0x150>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a3e      	ldr	r2, [pc, #248]	; (800ee88 <xTaskIncrementTick+0x14c>)
 800ed8e:	6013      	str	r3, [r2, #0]
 800ed90:	4a3e      	ldr	r2, [pc, #248]	; (800ee8c <xTaskIncrementTick+0x150>)
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6013      	str	r3, [r2, #0]
 800ed96:	4b3e      	ldr	r3, [pc, #248]	; (800ee90 <xTaskIncrementTick+0x154>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	4a3c      	ldr	r2, [pc, #240]	; (800ee90 <xTaskIncrementTick+0x154>)
 800ed9e:	6013      	str	r3, [r2, #0]
 800eda0:	f000 fac4 	bl	800f32c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eda4:	4b3b      	ldr	r3, [pc, #236]	; (800ee94 <xTaskIncrementTick+0x158>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	693a      	ldr	r2, [r7, #16]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d349      	bcc.n	800ee42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edae:	4b36      	ldr	r3, [pc, #216]	; (800ee88 <xTaskIncrementTick+0x14c>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d104      	bne.n	800edc2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edb8:	4b36      	ldr	r3, [pc, #216]	; (800ee94 <xTaskIncrementTick+0x158>)
 800edba:	f04f 32ff 	mov.w	r2, #4294967295
 800edbe:	601a      	str	r2, [r3, #0]
					break;
 800edc0:	e03f      	b.n	800ee42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edc2:	4b31      	ldr	r3, [pc, #196]	; (800ee88 <xTaskIncrementTick+0x14c>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800edd2:	693a      	ldr	r2, [r7, #16]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d203      	bcs.n	800ede2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800edda:	4a2e      	ldr	r2, [pc, #184]	; (800ee94 <xTaskIncrementTick+0x158>)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ede0:	e02f      	b.n	800ee42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	3304      	adds	r3, #4
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7fe fc8e 	bl	800d708 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d004      	beq.n	800edfe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	3318      	adds	r3, #24
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fe fc85 	bl	800d708 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee02:	4b25      	ldr	r3, [pc, #148]	; (800ee98 <xTaskIncrementTick+0x15c>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d903      	bls.n	800ee12 <xTaskIncrementTick+0xd6>
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee0e:	4a22      	ldr	r2, [pc, #136]	; (800ee98 <xTaskIncrementTick+0x15c>)
 800ee10:	6013      	str	r3, [r2, #0]
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee16:	4613      	mov	r3, r2
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	4413      	add	r3, r2
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	4a1f      	ldr	r2, [pc, #124]	; (800ee9c <xTaskIncrementTick+0x160>)
 800ee20:	441a      	add	r2, r3
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	3304      	adds	r3, #4
 800ee26:	4619      	mov	r1, r3
 800ee28:	4610      	mov	r0, r2
 800ee2a:	f7fe fc10 	bl	800d64e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee32:	4b1b      	ldr	r3, [pc, #108]	; (800eea0 <xTaskIncrementTick+0x164>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d3b8      	bcc.n	800edae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee40:	e7b5      	b.n	800edae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ee42:	4b17      	ldr	r3, [pc, #92]	; (800eea0 <xTaskIncrementTick+0x164>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee48:	4914      	ldr	r1, [pc, #80]	; (800ee9c <xTaskIncrementTick+0x160>)
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4413      	add	r3, r2
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	440b      	add	r3, r1
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2b01      	cmp	r3, #1
 800ee58:	d907      	bls.n	800ee6a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	617b      	str	r3, [r7, #20]
 800ee5e:	e004      	b.n	800ee6a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ee60:	4b10      	ldr	r3, [pc, #64]	; (800eea4 <xTaskIncrementTick+0x168>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	3301      	adds	r3, #1
 800ee66:	4a0f      	ldr	r2, [pc, #60]	; (800eea4 <xTaskIncrementTick+0x168>)
 800ee68:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ee6a:	4b0f      	ldr	r3, [pc, #60]	; (800eea8 <xTaskIncrementTick+0x16c>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d001      	beq.n	800ee76 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800ee72:	2301      	movs	r3, #1
 800ee74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ee76:	697b      	ldr	r3, [r7, #20]
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3718      	adds	r7, #24
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	20000df0 	.word	0x20000df0
 800ee84:	20000dcc 	.word	0x20000dcc
 800ee88:	20000d80 	.word	0x20000d80
 800ee8c:	20000d84 	.word	0x20000d84
 800ee90:	20000de0 	.word	0x20000de0
 800ee94:	20000de8 	.word	0x20000de8
 800ee98:	20000dd0 	.word	0x20000dd0
 800ee9c:	200008f8 	.word	0x200008f8
 800eea0:	200008f4 	.word	0x200008f4
 800eea4:	20000dd8 	.word	0x20000dd8
 800eea8:	20000ddc 	.word	0x20000ddc

0800eeac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eeac:	b480      	push	{r7}
 800eeae:	b085      	sub	sp, #20
 800eeb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eeb2:	4b27      	ldr	r3, [pc, #156]	; (800ef50 <vTaskSwitchContext+0xa4>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d003      	beq.n	800eec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eeba:	4b26      	ldr	r3, [pc, #152]	; (800ef54 <vTaskSwitchContext+0xa8>)
 800eebc:	2201      	movs	r2, #1
 800eebe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eec0:	e040      	b.n	800ef44 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800eec2:	4b24      	ldr	r3, [pc, #144]	; (800ef54 <vTaskSwitchContext+0xa8>)
 800eec4:	2200      	movs	r2, #0
 800eec6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eec8:	4b23      	ldr	r3, [pc, #140]	; (800ef58 <vTaskSwitchContext+0xac>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	60fb      	str	r3, [r7, #12]
 800eece:	e00f      	b.n	800eef0 <vTaskSwitchContext+0x44>
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d109      	bne.n	800eeea <vTaskSwitchContext+0x3e>
 800eed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeda:	f383 8811 	msr	BASEPRI, r3
 800eede:	f3bf 8f6f 	isb	sy
 800eee2:	f3bf 8f4f 	dsb	sy
 800eee6:	607b      	str	r3, [r7, #4]
 800eee8:	e7fe      	b.n	800eee8 <vTaskSwitchContext+0x3c>
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	3b01      	subs	r3, #1
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	491a      	ldr	r1, [pc, #104]	; (800ef5c <vTaskSwitchContext+0xb0>)
 800eef2:	68fa      	ldr	r2, [r7, #12]
 800eef4:	4613      	mov	r3, r2
 800eef6:	009b      	lsls	r3, r3, #2
 800eef8:	4413      	add	r3, r2
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	440b      	add	r3, r1
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d0e5      	beq.n	800eed0 <vTaskSwitchContext+0x24>
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	4613      	mov	r3, r2
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	4413      	add	r3, r2
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	4a13      	ldr	r2, [pc, #76]	; (800ef5c <vTaskSwitchContext+0xb0>)
 800ef10:	4413      	add	r3, r2
 800ef12:	60bb      	str	r3, [r7, #8]
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	685a      	ldr	r2, [r3, #4]
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	605a      	str	r2, [r3, #4]
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	685a      	ldr	r2, [r3, #4]
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	3308      	adds	r3, #8
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d104      	bne.n	800ef34 <vTaskSwitchContext+0x88>
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	685a      	ldr	r2, [r3, #4]
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	605a      	str	r2, [r3, #4]
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	685b      	ldr	r3, [r3, #4]
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	4a09      	ldr	r2, [pc, #36]	; (800ef60 <vTaskSwitchContext+0xb4>)
 800ef3c:	6013      	str	r3, [r2, #0]
 800ef3e:	4a06      	ldr	r2, [pc, #24]	; (800ef58 <vTaskSwitchContext+0xac>)
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	6013      	str	r3, [r2, #0]
}
 800ef44:	bf00      	nop
 800ef46:	3714      	adds	r7, #20
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr
 800ef50:	20000df0 	.word	0x20000df0
 800ef54:	20000ddc 	.word	0x20000ddc
 800ef58:	20000dd0 	.word	0x20000dd0
 800ef5c:	200008f8 	.word	0x200008f8
 800ef60:	200008f4 	.word	0x200008f4

0800ef64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d109      	bne.n	800ef88 <vTaskPlaceOnEventList+0x24>
 800ef74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef78:	f383 8811 	msr	BASEPRI, r3
 800ef7c:	f3bf 8f6f 	isb	sy
 800ef80:	f3bf 8f4f 	dsb	sy
 800ef84:	60fb      	str	r3, [r7, #12]
 800ef86:	e7fe      	b.n	800ef86 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ef88:	4b07      	ldr	r3, [pc, #28]	; (800efa8 <vTaskPlaceOnEventList+0x44>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	3318      	adds	r3, #24
 800ef8e:	4619      	mov	r1, r3
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7fe fb80 	bl	800d696 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ef96:	2101      	movs	r1, #1
 800ef98:	6838      	ldr	r0, [r7, #0]
 800ef9a:	f000 fb6d 	bl	800f678 <prvAddCurrentTaskToDelayedList>
}
 800ef9e:	bf00      	nop
 800efa0:	3710      	adds	r7, #16
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	200008f4 	.word	0x200008f4

0800efac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800efac:	b580      	push	{r7, lr}
 800efae:	b086      	sub	sp, #24
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	60f8      	str	r0, [r7, #12]
 800efb4:	60b9      	str	r1, [r7, #8]
 800efb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d109      	bne.n	800efd2 <vTaskPlaceOnEventListRestricted+0x26>
 800efbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	617b      	str	r3, [r7, #20]
 800efd0:	e7fe      	b.n	800efd0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800efd2:	4b0a      	ldr	r3, [pc, #40]	; (800effc <vTaskPlaceOnEventListRestricted+0x50>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	3318      	adds	r3, #24
 800efd8:	4619      	mov	r1, r3
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f7fe fb37 	bl	800d64e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d002      	beq.n	800efec <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800efe6:	f04f 33ff 	mov.w	r3, #4294967295
 800efea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800efec:	6879      	ldr	r1, [r7, #4]
 800efee:	68b8      	ldr	r0, [r7, #8]
 800eff0:	f000 fb42 	bl	800f678 <prvAddCurrentTaskToDelayedList>
	}
 800eff4:	bf00      	nop
 800eff6:	3718      	adds	r7, #24
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	200008f4 	.word	0x200008f4

0800f000 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d109      	bne.n	800f02a <xTaskRemoveFromEventList+0x2a>
 800f016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01a:	f383 8811 	msr	BASEPRI, r3
 800f01e:	f3bf 8f6f 	isb	sy
 800f022:	f3bf 8f4f 	dsb	sy
 800f026:	60fb      	str	r3, [r7, #12]
 800f028:	e7fe      	b.n	800f028 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	3318      	adds	r3, #24
 800f02e:	4618      	mov	r0, r3
 800f030:	f7fe fb6a 	bl	800d708 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f034:	4b1d      	ldr	r3, [pc, #116]	; (800f0ac <xTaskRemoveFromEventList+0xac>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d11d      	bne.n	800f078 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	3304      	adds	r3, #4
 800f040:	4618      	mov	r0, r3
 800f042:	f7fe fb61 	bl	800d708 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f04a:	4b19      	ldr	r3, [pc, #100]	; (800f0b0 <xTaskRemoveFromEventList+0xb0>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d903      	bls.n	800f05a <xTaskRemoveFromEventList+0x5a>
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f056:	4a16      	ldr	r2, [pc, #88]	; (800f0b0 <xTaskRemoveFromEventList+0xb0>)
 800f058:	6013      	str	r3, [r2, #0]
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f05e:	4613      	mov	r3, r2
 800f060:	009b      	lsls	r3, r3, #2
 800f062:	4413      	add	r3, r2
 800f064:	009b      	lsls	r3, r3, #2
 800f066:	4a13      	ldr	r2, [pc, #76]	; (800f0b4 <xTaskRemoveFromEventList+0xb4>)
 800f068:	441a      	add	r2, r3
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	3304      	adds	r3, #4
 800f06e:	4619      	mov	r1, r3
 800f070:	4610      	mov	r0, r2
 800f072:	f7fe faec 	bl	800d64e <vListInsertEnd>
 800f076:	e005      	b.n	800f084 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	3318      	adds	r3, #24
 800f07c:	4619      	mov	r1, r3
 800f07e:	480e      	ldr	r0, [pc, #56]	; (800f0b8 <xTaskRemoveFromEventList+0xb8>)
 800f080:	f7fe fae5 	bl	800d64e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f088:	4b0c      	ldr	r3, [pc, #48]	; (800f0bc <xTaskRemoveFromEventList+0xbc>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f08e:	429a      	cmp	r2, r3
 800f090:	d905      	bls.n	800f09e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f092:	2301      	movs	r3, #1
 800f094:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f096:	4b0a      	ldr	r3, [pc, #40]	; (800f0c0 <xTaskRemoveFromEventList+0xc0>)
 800f098:	2201      	movs	r2, #1
 800f09a:	601a      	str	r2, [r3, #0]
 800f09c:	e001      	b.n	800f0a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f0a2:	697b      	ldr	r3, [r7, #20]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3718      	adds	r7, #24
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	20000df0 	.word	0x20000df0
 800f0b0:	20000dd0 	.word	0x20000dd0
 800f0b4:	200008f8 	.word	0x200008f8
 800f0b8:	20000d88 	.word	0x20000d88
 800f0bc:	200008f4 	.word	0x200008f4
 800f0c0:	20000ddc 	.word	0x20000ddc

0800f0c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f0cc:	4b06      	ldr	r3, [pc, #24]	; (800f0e8 <vTaskInternalSetTimeOutState+0x24>)
 800f0ce:	681a      	ldr	r2, [r3, #0]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f0d4:	4b05      	ldr	r3, [pc, #20]	; (800f0ec <vTaskInternalSetTimeOutState+0x28>)
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	605a      	str	r2, [r3, #4]
}
 800f0dc:	bf00      	nop
 800f0de:	370c      	adds	r7, #12
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr
 800f0e8:	20000de0 	.word	0x20000de0
 800f0ec:	20000dcc 	.word	0x20000dcc

0800f0f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b088      	sub	sp, #32
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d109      	bne.n	800f114 <xTaskCheckForTimeOut+0x24>
 800f100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f104:	f383 8811 	msr	BASEPRI, r3
 800f108:	f3bf 8f6f 	isb	sy
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	613b      	str	r3, [r7, #16]
 800f112:	e7fe      	b.n	800f112 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d109      	bne.n	800f12e <xTaskCheckForTimeOut+0x3e>
 800f11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11e:	f383 8811 	msr	BASEPRI, r3
 800f122:	f3bf 8f6f 	isb	sy
 800f126:	f3bf 8f4f 	dsb	sy
 800f12a:	60fb      	str	r3, [r7, #12]
 800f12c:	e7fe      	b.n	800f12c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800f12e:	f000 ff65 	bl	800fffc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f132:	4b1d      	ldr	r3, [pc, #116]	; (800f1a8 <xTaskCheckForTimeOut+0xb8>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	69ba      	ldr	r2, [r7, #24]
 800f13e:	1ad3      	subs	r3, r2, r3
 800f140:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f14a:	d102      	bne.n	800f152 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f14c:	2300      	movs	r3, #0
 800f14e:	61fb      	str	r3, [r7, #28]
 800f150:	e023      	b.n	800f19a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681a      	ldr	r2, [r3, #0]
 800f156:	4b15      	ldr	r3, [pc, #84]	; (800f1ac <xTaskCheckForTimeOut+0xbc>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d007      	beq.n	800f16e <xTaskCheckForTimeOut+0x7e>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	69ba      	ldr	r2, [r7, #24]
 800f164:	429a      	cmp	r2, r3
 800f166:	d302      	bcc.n	800f16e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f168:	2301      	movs	r3, #1
 800f16a:	61fb      	str	r3, [r7, #28]
 800f16c:	e015      	b.n	800f19a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	697a      	ldr	r2, [r7, #20]
 800f174:	429a      	cmp	r2, r3
 800f176:	d20b      	bcs.n	800f190 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	1ad2      	subs	r2, r2, r3
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f7ff ff9d 	bl	800f0c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f18a:	2300      	movs	r3, #0
 800f18c:	61fb      	str	r3, [r7, #28]
 800f18e:	e004      	b.n	800f19a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	2200      	movs	r2, #0
 800f194:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f196:	2301      	movs	r3, #1
 800f198:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f19a:	f000 ff5d 	bl	8010058 <vPortExitCritical>

	return xReturn;
 800f19e:	69fb      	ldr	r3, [r7, #28]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3720      	adds	r7, #32
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	20000dcc 	.word	0x20000dcc
 800f1ac:	20000de0 	.word	0x20000de0

0800f1b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f1b4:	4b03      	ldr	r3, [pc, #12]	; (800f1c4 <vTaskMissedYield+0x14>)
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	601a      	str	r2, [r3, #0]
}
 800f1ba:	bf00      	nop
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr
 800f1c4:	20000ddc 	.word	0x20000ddc

0800f1c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f1d0:	f000 f852 	bl	800f278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f1d4:	4b06      	ldr	r3, [pc, #24]	; (800f1f0 <prvIdleTask+0x28>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d9f9      	bls.n	800f1d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f1dc:	4b05      	ldr	r3, [pc, #20]	; (800f1f4 <prvIdleTask+0x2c>)
 800f1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1e2:	601a      	str	r2, [r3, #0]
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f1ec:	e7f0      	b.n	800f1d0 <prvIdleTask+0x8>
 800f1ee:	bf00      	nop
 800f1f0:	200008f8 	.word	0x200008f8
 800f1f4:	e000ed04 	.word	0xe000ed04

0800f1f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f1fe:	2300      	movs	r3, #0
 800f200:	607b      	str	r3, [r7, #4]
 800f202:	e00c      	b.n	800f21e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	4613      	mov	r3, r2
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	4413      	add	r3, r2
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	4a12      	ldr	r2, [pc, #72]	; (800f258 <prvInitialiseTaskLists+0x60>)
 800f210:	4413      	add	r3, r2
 800f212:	4618      	mov	r0, r3
 800f214:	f7fe f9ee 	bl	800d5f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	3301      	adds	r3, #1
 800f21c:	607b      	str	r3, [r7, #4]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b37      	cmp	r3, #55	; 0x37
 800f222:	d9ef      	bls.n	800f204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f224:	480d      	ldr	r0, [pc, #52]	; (800f25c <prvInitialiseTaskLists+0x64>)
 800f226:	f7fe f9e5 	bl	800d5f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f22a:	480d      	ldr	r0, [pc, #52]	; (800f260 <prvInitialiseTaskLists+0x68>)
 800f22c:	f7fe f9e2 	bl	800d5f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f230:	480c      	ldr	r0, [pc, #48]	; (800f264 <prvInitialiseTaskLists+0x6c>)
 800f232:	f7fe f9df 	bl	800d5f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f236:	480c      	ldr	r0, [pc, #48]	; (800f268 <prvInitialiseTaskLists+0x70>)
 800f238:	f7fe f9dc 	bl	800d5f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f23c:	480b      	ldr	r0, [pc, #44]	; (800f26c <prvInitialiseTaskLists+0x74>)
 800f23e:	f7fe f9d9 	bl	800d5f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f242:	4b0b      	ldr	r3, [pc, #44]	; (800f270 <prvInitialiseTaskLists+0x78>)
 800f244:	4a05      	ldr	r2, [pc, #20]	; (800f25c <prvInitialiseTaskLists+0x64>)
 800f246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f248:	4b0a      	ldr	r3, [pc, #40]	; (800f274 <prvInitialiseTaskLists+0x7c>)
 800f24a:	4a05      	ldr	r2, [pc, #20]	; (800f260 <prvInitialiseTaskLists+0x68>)
 800f24c:	601a      	str	r2, [r3, #0]
}
 800f24e:	bf00      	nop
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	200008f8 	.word	0x200008f8
 800f25c:	20000d58 	.word	0x20000d58
 800f260:	20000d6c 	.word	0x20000d6c
 800f264:	20000d88 	.word	0x20000d88
 800f268:	20000d9c 	.word	0x20000d9c
 800f26c:	20000db4 	.word	0x20000db4
 800f270:	20000d80 	.word	0x20000d80
 800f274:	20000d84 	.word	0x20000d84

0800f278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f27e:	e019      	b.n	800f2b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f280:	f000 febc 	bl	800fffc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f284:	4b0f      	ldr	r3, [pc, #60]	; (800f2c4 <prvCheckTasksWaitingTermination+0x4c>)
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	3304      	adds	r3, #4
 800f290:	4618      	mov	r0, r3
 800f292:	f7fe fa39 	bl	800d708 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f296:	4b0c      	ldr	r3, [pc, #48]	; (800f2c8 <prvCheckTasksWaitingTermination+0x50>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	3b01      	subs	r3, #1
 800f29c:	4a0a      	ldr	r2, [pc, #40]	; (800f2c8 <prvCheckTasksWaitingTermination+0x50>)
 800f29e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f2a0:	4b0a      	ldr	r3, [pc, #40]	; (800f2cc <prvCheckTasksWaitingTermination+0x54>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	3b01      	subs	r3, #1
 800f2a6:	4a09      	ldr	r2, [pc, #36]	; (800f2cc <prvCheckTasksWaitingTermination+0x54>)
 800f2a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f2aa:	f000 fed5 	bl	8010058 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f000 f80e 	bl	800f2d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f2b4:	4b05      	ldr	r3, [pc, #20]	; (800f2cc <prvCheckTasksWaitingTermination+0x54>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d1e1      	bne.n	800f280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f2bc:	bf00      	nop
 800f2be:	3708      	adds	r7, #8
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	20000d9c 	.word	0x20000d9c
 800f2c8:	20000dc8 	.word	0x20000dc8
 800f2cc:	20000db0 	.word	0x20000db0

0800f2d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b084      	sub	sp, #16
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d108      	bne.n	800f2f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f000 ffb4 	bl	8010254 <vPortFree>
				vPortFree( pxTCB );
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 ffb1 	bl	8010254 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f2f2:	e017      	b.n	800f324 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d103      	bne.n	800f306 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f000 ffa8 	bl	8010254 <vPortFree>
	}
 800f304:	e00e      	b.n	800f324 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f30c:	2b02      	cmp	r3, #2
 800f30e:	d009      	beq.n	800f324 <prvDeleteTCB+0x54>
 800f310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f314:	f383 8811 	msr	BASEPRI, r3
 800f318:	f3bf 8f6f 	isb	sy
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	60fb      	str	r3, [r7, #12]
 800f322:	e7fe      	b.n	800f322 <prvDeleteTCB+0x52>
	}
 800f324:	bf00      	nop
 800f326:	3710      	adds	r7, #16
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f332:	4b0c      	ldr	r3, [pc, #48]	; (800f364 <prvResetNextTaskUnblockTime+0x38>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d104      	bne.n	800f346 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f33c:	4b0a      	ldr	r3, [pc, #40]	; (800f368 <prvResetNextTaskUnblockTime+0x3c>)
 800f33e:	f04f 32ff 	mov.w	r2, #4294967295
 800f342:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f344:	e008      	b.n	800f358 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f346:	4b07      	ldr	r3, [pc, #28]	; (800f364 <prvResetNextTaskUnblockTime+0x38>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	68db      	ldr	r3, [r3, #12]
 800f34e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	4a04      	ldr	r2, [pc, #16]	; (800f368 <prvResetNextTaskUnblockTime+0x3c>)
 800f356:	6013      	str	r3, [r2, #0]
}
 800f358:	bf00      	nop
 800f35a:	370c      	adds	r7, #12
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr
 800f364:	20000d80 	.word	0x20000d80
 800f368:	20000de8 	.word	0x20000de8

0800f36c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f372:	4b0b      	ldr	r3, [pc, #44]	; (800f3a0 <xTaskGetSchedulerState+0x34>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d102      	bne.n	800f380 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f37a:	2301      	movs	r3, #1
 800f37c:	607b      	str	r3, [r7, #4]
 800f37e:	e008      	b.n	800f392 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f380:	4b08      	ldr	r3, [pc, #32]	; (800f3a4 <xTaskGetSchedulerState+0x38>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d102      	bne.n	800f38e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f388:	2302      	movs	r3, #2
 800f38a:	607b      	str	r3, [r7, #4]
 800f38c:	e001      	b.n	800f392 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f38e:	2300      	movs	r3, #0
 800f390:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f392:	687b      	ldr	r3, [r7, #4]
	}
 800f394:	4618      	mov	r0, r3
 800f396:	370c      	adds	r7, #12
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr
 800f3a0:	20000dd4 	.word	0x20000dd4
 800f3a4:	20000df0 	.word	0x20000df0

0800f3a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d051      	beq.n	800f462 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3c2:	4b2a      	ldr	r3, [pc, #168]	; (800f46c <xTaskPriorityInherit+0xc4>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d241      	bcs.n	800f450 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	699b      	ldr	r3, [r3, #24]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	db06      	blt.n	800f3e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3d4:	4b25      	ldr	r3, [pc, #148]	; (800f46c <xTaskPriorityInherit+0xc4>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	6959      	ldr	r1, [r3, #20]
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3ea:	4613      	mov	r3, r2
 800f3ec:	009b      	lsls	r3, r3, #2
 800f3ee:	4413      	add	r3, r2
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	4a1f      	ldr	r2, [pc, #124]	; (800f470 <xTaskPriorityInherit+0xc8>)
 800f3f4:	4413      	add	r3, r2
 800f3f6:	4299      	cmp	r1, r3
 800f3f8:	d122      	bne.n	800f440 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	3304      	adds	r3, #4
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7fe f982 	bl	800d708 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f404:	4b19      	ldr	r3, [pc, #100]	; (800f46c <xTaskPriorityInherit+0xc4>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f412:	4b18      	ldr	r3, [pc, #96]	; (800f474 <xTaskPriorityInherit+0xcc>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	429a      	cmp	r2, r3
 800f418:	d903      	bls.n	800f422 <xTaskPriorityInherit+0x7a>
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f41e:	4a15      	ldr	r2, [pc, #84]	; (800f474 <xTaskPriorityInherit+0xcc>)
 800f420:	6013      	str	r3, [r2, #0]
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f426:	4613      	mov	r3, r2
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	4413      	add	r3, r2
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	4a10      	ldr	r2, [pc, #64]	; (800f470 <xTaskPriorityInherit+0xc8>)
 800f430:	441a      	add	r2, r3
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	3304      	adds	r3, #4
 800f436:	4619      	mov	r1, r3
 800f438:	4610      	mov	r0, r2
 800f43a:	f7fe f908 	bl	800d64e <vListInsertEnd>
 800f43e:	e004      	b.n	800f44a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f440:	4b0a      	ldr	r3, [pc, #40]	; (800f46c <xTaskPriorityInherit+0xc4>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f44a:	2301      	movs	r3, #1
 800f44c:	60fb      	str	r3, [r7, #12]
 800f44e:	e008      	b.n	800f462 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f454:	4b05      	ldr	r3, [pc, #20]	; (800f46c <xTaskPriorityInherit+0xc4>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d201      	bcs.n	800f462 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f45e:	2301      	movs	r3, #1
 800f460:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f462:	68fb      	ldr	r3, [r7, #12]
	}
 800f464:	4618      	mov	r0, r3
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	200008f4 	.word	0x200008f4
 800f470:	200008f8 	.word	0x200008f8
 800f474:	20000dd0 	.word	0x20000dd0

0800f478 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b086      	sub	sp, #24
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f484:	2300      	movs	r3, #0
 800f486:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d054      	beq.n	800f538 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f48e:	4b2d      	ldr	r3, [pc, #180]	; (800f544 <xTaskPriorityDisinherit+0xcc>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	693a      	ldr	r2, [r7, #16]
 800f494:	429a      	cmp	r2, r3
 800f496:	d009      	beq.n	800f4ac <xTaskPriorityDisinherit+0x34>
 800f498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f49c:	f383 8811 	msr	BASEPRI, r3
 800f4a0:	f3bf 8f6f 	isb	sy
 800f4a4:	f3bf 8f4f 	dsb	sy
 800f4a8:	60fb      	str	r3, [r7, #12]
 800f4aa:	e7fe      	b.n	800f4aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d109      	bne.n	800f4c8 <xTaskPriorityDisinherit+0x50>
 800f4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b8:	f383 8811 	msr	BASEPRI, r3
 800f4bc:	f3bf 8f6f 	isb	sy
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	60bb      	str	r3, [r7, #8]
 800f4c6:	e7fe      	b.n	800f4c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4cc:	1e5a      	subs	r2, r3, #1
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d02c      	beq.n	800f538 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d128      	bne.n	800f538 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	3304      	adds	r3, #4
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fe f90c 	bl	800d708 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f508:	4b0f      	ldr	r3, [pc, #60]	; (800f548 <xTaskPriorityDisinherit+0xd0>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d903      	bls.n	800f518 <xTaskPriorityDisinherit+0xa0>
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f514:	4a0c      	ldr	r2, [pc, #48]	; (800f548 <xTaskPriorityDisinherit+0xd0>)
 800f516:	6013      	str	r3, [r2, #0]
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f51c:	4613      	mov	r3, r2
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	4413      	add	r3, r2
 800f522:	009b      	lsls	r3, r3, #2
 800f524:	4a09      	ldr	r2, [pc, #36]	; (800f54c <xTaskPriorityDisinherit+0xd4>)
 800f526:	441a      	add	r2, r3
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	3304      	adds	r3, #4
 800f52c:	4619      	mov	r1, r3
 800f52e:	4610      	mov	r0, r2
 800f530:	f7fe f88d 	bl	800d64e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f534:	2301      	movs	r3, #1
 800f536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f538:	697b      	ldr	r3, [r7, #20]
	}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3718      	adds	r7, #24
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	200008f4 	.word	0x200008f4
 800f548:	20000dd0 	.word	0x20000dd0
 800f54c:	200008f8 	.word	0x200008f8

0800f550 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f550:	b580      	push	{r7, lr}
 800f552:	b088      	sub	sp, #32
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f55e:	2301      	movs	r3, #1
 800f560:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d068      	beq.n	800f63a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d109      	bne.n	800f584 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800f570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f574:	f383 8811 	msr	BASEPRI, r3
 800f578:	f3bf 8f6f 	isb	sy
 800f57c:	f3bf 8f4f 	dsb	sy
 800f580:	60fb      	str	r3, [r7, #12]
 800f582:	e7fe      	b.n	800f582 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f588:	683a      	ldr	r2, [r7, #0]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d902      	bls.n	800f594 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	61fb      	str	r3, [r7, #28]
 800f592:	e002      	b.n	800f59a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f598:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f59e:	69fa      	ldr	r2, [r7, #28]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d04a      	beq.n	800f63a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f5a4:	69bb      	ldr	r3, [r7, #24]
 800f5a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5a8:	697a      	ldr	r2, [r7, #20]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d145      	bne.n	800f63a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f5ae:	4b25      	ldr	r3, [pc, #148]	; (800f644 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	69ba      	ldr	r2, [r7, #24]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d109      	bne.n	800f5cc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800f5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5bc:	f383 8811 	msr	BASEPRI, r3
 800f5c0:	f3bf 8f6f 	isb	sy
 800f5c4:	f3bf 8f4f 	dsb	sy
 800f5c8:	60bb      	str	r3, [r7, #8]
 800f5ca:	e7fe      	b.n	800f5ca <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f5d2:	69bb      	ldr	r3, [r7, #24]
 800f5d4:	69fa      	ldr	r2, [r7, #28]
 800f5d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f5d8:	69bb      	ldr	r3, [r7, #24]
 800f5da:	699b      	ldr	r3, [r3, #24]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	db04      	blt.n	800f5ea <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5e0:	69fb      	ldr	r3, [r7, #28]
 800f5e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	6959      	ldr	r1, [r3, #20]
 800f5ee:	693a      	ldr	r2, [r7, #16]
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	4413      	add	r3, r2
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	4a13      	ldr	r2, [pc, #76]	; (800f648 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f5fa:	4413      	add	r3, r2
 800f5fc:	4299      	cmp	r1, r3
 800f5fe:	d11c      	bne.n	800f63a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f600:	69bb      	ldr	r3, [r7, #24]
 800f602:	3304      	adds	r3, #4
 800f604:	4618      	mov	r0, r3
 800f606:	f7fe f87f 	bl	800d708 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f60a:	69bb      	ldr	r3, [r7, #24]
 800f60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f60e:	4b0f      	ldr	r3, [pc, #60]	; (800f64c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	429a      	cmp	r2, r3
 800f614:	d903      	bls.n	800f61e <vTaskPriorityDisinheritAfterTimeout+0xce>
 800f616:	69bb      	ldr	r3, [r7, #24]
 800f618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f61a:	4a0c      	ldr	r2, [pc, #48]	; (800f64c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f61c:	6013      	str	r3, [r2, #0]
 800f61e:	69bb      	ldr	r3, [r7, #24]
 800f620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f622:	4613      	mov	r3, r2
 800f624:	009b      	lsls	r3, r3, #2
 800f626:	4413      	add	r3, r2
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	4a07      	ldr	r2, [pc, #28]	; (800f648 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f62c:	441a      	add	r2, r3
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	3304      	adds	r3, #4
 800f632:	4619      	mov	r1, r3
 800f634:	4610      	mov	r0, r2
 800f636:	f7fe f80a 	bl	800d64e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f63a:	bf00      	nop
 800f63c:	3720      	adds	r7, #32
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop
 800f644:	200008f4 	.word	0x200008f4
 800f648:	200008f8 	.word	0x200008f8
 800f64c:	20000dd0 	.word	0x20000dd0

0800f650 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f650:	b480      	push	{r7}
 800f652:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f654:	4b07      	ldr	r3, [pc, #28]	; (800f674 <pvTaskIncrementMutexHeldCount+0x24>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d004      	beq.n	800f666 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f65c:	4b05      	ldr	r3, [pc, #20]	; (800f674 <pvTaskIncrementMutexHeldCount+0x24>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f662:	3201      	adds	r2, #1
 800f664:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f666:	4b03      	ldr	r3, [pc, #12]	; (800f674 <pvTaskIncrementMutexHeldCount+0x24>)
 800f668:	681b      	ldr	r3, [r3, #0]
	}
 800f66a:	4618      	mov	r0, r3
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr
 800f674:	200008f4 	.word	0x200008f4

0800f678 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f682:	4b21      	ldr	r3, [pc, #132]	; (800f708 <prvAddCurrentTaskToDelayedList+0x90>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f688:	4b20      	ldr	r3, [pc, #128]	; (800f70c <prvAddCurrentTaskToDelayedList+0x94>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	3304      	adds	r3, #4
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fe f83a 	bl	800d708 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69a:	d10a      	bne.n	800f6b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d007      	beq.n	800f6b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6a2:	4b1a      	ldr	r3, [pc, #104]	; (800f70c <prvAddCurrentTaskToDelayedList+0x94>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	3304      	adds	r3, #4
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	4819      	ldr	r0, [pc, #100]	; (800f710 <prvAddCurrentTaskToDelayedList+0x98>)
 800f6ac:	f7fd ffcf 	bl	800d64e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f6b0:	e026      	b.n	800f700 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f6b2:	68fa      	ldr	r2, [r7, #12]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f6ba:	4b14      	ldr	r3, [pc, #80]	; (800f70c <prvAddCurrentTaskToDelayedList+0x94>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f6c2:	68ba      	ldr	r2, [r7, #8]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d209      	bcs.n	800f6de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6ca:	4b12      	ldr	r3, [pc, #72]	; (800f714 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	4b0f      	ldr	r3, [pc, #60]	; (800f70c <prvAddCurrentTaskToDelayedList+0x94>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	3304      	adds	r3, #4
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	4610      	mov	r0, r2
 800f6d8:	f7fd ffdd 	bl	800d696 <vListInsert>
}
 800f6dc:	e010      	b.n	800f700 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6de:	4b0e      	ldr	r3, [pc, #56]	; (800f718 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	4b0a      	ldr	r3, [pc, #40]	; (800f70c <prvAddCurrentTaskToDelayedList+0x94>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	3304      	adds	r3, #4
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	4610      	mov	r0, r2
 800f6ec:	f7fd ffd3 	bl	800d696 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f6f0:	4b0a      	ldr	r3, [pc, #40]	; (800f71c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d202      	bcs.n	800f700 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f6fa:	4a08      	ldr	r2, [pc, #32]	; (800f71c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	6013      	str	r3, [r2, #0]
}
 800f700:	bf00      	nop
 800f702:	3710      	adds	r7, #16
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	20000dcc 	.word	0x20000dcc
 800f70c:	200008f4 	.word	0x200008f4
 800f710:	20000db4 	.word	0x20000db4
 800f714:	20000d84 	.word	0x20000d84
 800f718:	20000d80 	.word	0x20000d80
 800f71c:	20000de8 	.word	0x20000de8

0800f720 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b08a      	sub	sp, #40	; 0x28
 800f724:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f726:	2300      	movs	r3, #0
 800f728:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f72a:	f000 faff 	bl	800fd2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f72e:	4b1c      	ldr	r3, [pc, #112]	; (800f7a0 <xTimerCreateTimerTask+0x80>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d021      	beq.n	800f77a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f736:	2300      	movs	r3, #0
 800f738:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f73a:	2300      	movs	r3, #0
 800f73c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f73e:	1d3a      	adds	r2, r7, #4
 800f740:	f107 0108 	add.w	r1, r7, #8
 800f744:	f107 030c 	add.w	r3, r7, #12
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fd ff39 	bl	800d5c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f74e:	6879      	ldr	r1, [r7, #4]
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	68fa      	ldr	r2, [r7, #12]
 800f754:	9202      	str	r2, [sp, #8]
 800f756:	9301      	str	r3, [sp, #4]
 800f758:	2302      	movs	r3, #2
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	2300      	movs	r3, #0
 800f75e:	460a      	mov	r2, r1
 800f760:	4910      	ldr	r1, [pc, #64]	; (800f7a4 <xTimerCreateTimerTask+0x84>)
 800f762:	4811      	ldr	r0, [pc, #68]	; (800f7a8 <xTimerCreateTimerTask+0x88>)
 800f764:	f7fe ffe8 	bl	800e738 <xTaskCreateStatic>
 800f768:	4602      	mov	r2, r0
 800f76a:	4b10      	ldr	r3, [pc, #64]	; (800f7ac <xTimerCreateTimerTask+0x8c>)
 800f76c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f76e:	4b0f      	ldr	r3, [pc, #60]	; (800f7ac <xTimerCreateTimerTask+0x8c>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d001      	beq.n	800f77a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f776:	2301      	movs	r3, #1
 800f778:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d109      	bne.n	800f794 <xTimerCreateTimerTask+0x74>
 800f780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f784:	f383 8811 	msr	BASEPRI, r3
 800f788:	f3bf 8f6f 	isb	sy
 800f78c:	f3bf 8f4f 	dsb	sy
 800f790:	613b      	str	r3, [r7, #16]
 800f792:	e7fe      	b.n	800f792 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800f794:	697b      	ldr	r3, [r7, #20]
}
 800f796:	4618      	mov	r0, r3
 800f798:	3718      	adds	r7, #24
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	20000e24 	.word	0x20000e24
 800f7a4:	08014a54 	.word	0x08014a54
 800f7a8:	0800f8e1 	.word	0x0800f8e1
 800f7ac:	20000e28 	.word	0x20000e28

0800f7b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b08a      	sub	sp, #40	; 0x28
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
 800f7bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d109      	bne.n	800f7dc <xTimerGenericCommand+0x2c>
 800f7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7cc:	f383 8811 	msr	BASEPRI, r3
 800f7d0:	f3bf 8f6f 	isb	sy
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	623b      	str	r3, [r7, #32]
 800f7da:	e7fe      	b.n	800f7da <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f7dc:	4b19      	ldr	r3, [pc, #100]	; (800f844 <xTimerGenericCommand+0x94>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d02a      	beq.n	800f83a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	2b05      	cmp	r3, #5
 800f7f4:	dc18      	bgt.n	800f828 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f7f6:	f7ff fdb9 	bl	800f36c <xTaskGetSchedulerState>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b02      	cmp	r3, #2
 800f7fe:	d109      	bne.n	800f814 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f800:	4b10      	ldr	r3, [pc, #64]	; (800f844 <xTimerGenericCommand+0x94>)
 800f802:	6818      	ldr	r0, [r3, #0]
 800f804:	f107 0110 	add.w	r1, r7, #16
 800f808:	2300      	movs	r3, #0
 800f80a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f80c:	f7fe f94a 	bl	800daa4 <xQueueGenericSend>
 800f810:	6278      	str	r0, [r7, #36]	; 0x24
 800f812:	e012      	b.n	800f83a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f814:	4b0b      	ldr	r3, [pc, #44]	; (800f844 <xTimerGenericCommand+0x94>)
 800f816:	6818      	ldr	r0, [r3, #0]
 800f818:	f107 0110 	add.w	r1, r7, #16
 800f81c:	2300      	movs	r3, #0
 800f81e:	2200      	movs	r2, #0
 800f820:	f7fe f940 	bl	800daa4 <xQueueGenericSend>
 800f824:	6278      	str	r0, [r7, #36]	; 0x24
 800f826:	e008      	b.n	800f83a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f828:	4b06      	ldr	r3, [pc, #24]	; (800f844 <xTimerGenericCommand+0x94>)
 800f82a:	6818      	ldr	r0, [r3, #0]
 800f82c:	f107 0110 	add.w	r1, r7, #16
 800f830:	2300      	movs	r3, #0
 800f832:	683a      	ldr	r2, [r7, #0]
 800f834:	f7fe fa30 	bl	800dc98 <xQueueGenericSendFromISR>
 800f838:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3728      	adds	r7, #40	; 0x28
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	20000e24 	.word	0x20000e24

0800f848 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b088      	sub	sp, #32
 800f84c:	af02      	add	r7, sp, #8
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f852:	4b22      	ldr	r3, [pc, #136]	; (800f8dc <prvProcessExpiredTimer+0x94>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	3304      	adds	r3, #4
 800f860:	4618      	mov	r0, r3
 800f862:	f7fd ff51 	bl	800d708 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f86c:	f003 0304 	and.w	r3, r3, #4
 800f870:	2b00      	cmp	r3, #0
 800f872:	d021      	beq.n	800f8b8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	699a      	ldr	r2, [r3, #24]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	18d1      	adds	r1, r2, r3
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	683a      	ldr	r2, [r7, #0]
 800f880:	6978      	ldr	r0, [r7, #20]
 800f882:	f000 f8d1 	bl	800fa28 <prvInsertTimerInActiveList>
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d01e      	beq.n	800f8ca <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f88c:	2300      	movs	r3, #0
 800f88e:	9300      	str	r3, [sp, #0]
 800f890:	2300      	movs	r3, #0
 800f892:	687a      	ldr	r2, [r7, #4]
 800f894:	2100      	movs	r1, #0
 800f896:	6978      	ldr	r0, [r7, #20]
 800f898:	f7ff ff8a 	bl	800f7b0 <xTimerGenericCommand>
 800f89c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d112      	bne.n	800f8ca <prvProcessExpiredTimer+0x82>
 800f8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a8:	f383 8811 	msr	BASEPRI, r3
 800f8ac:	f3bf 8f6f 	isb	sy
 800f8b0:	f3bf 8f4f 	dsb	sy
 800f8b4:	60fb      	str	r3, [r7, #12]
 800f8b6:	e7fe      	b.n	800f8b6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8be:	f023 0301 	bic.w	r3, r3, #1
 800f8c2:	b2da      	uxtb	r2, r3
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	6a1b      	ldr	r3, [r3, #32]
 800f8ce:	6978      	ldr	r0, [r7, #20]
 800f8d0:	4798      	blx	r3
}
 800f8d2:	bf00      	nop
 800f8d4:	3718      	adds	r7, #24
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	20000e1c 	.word	0x20000e1c

0800f8e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f8e8:	f107 0308 	add.w	r3, r7, #8
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f000 f857 	bl	800f9a0 <prvGetNextExpireTime>
 800f8f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	68f8      	ldr	r0, [r7, #12]
 800f8fa:	f000 f803 	bl	800f904 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f8fe:	f000 f8d5 	bl	800faac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f902:	e7f1      	b.n	800f8e8 <prvTimerTask+0x8>

0800f904 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f90e:	f7ff f949 	bl	800eba4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f912:	f107 0308 	add.w	r3, r7, #8
 800f916:	4618      	mov	r0, r3
 800f918:	f000 f866 	bl	800f9e8 <prvSampleTimeNow>
 800f91c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d130      	bne.n	800f986 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d10a      	bne.n	800f940 <prvProcessTimerOrBlockTask+0x3c>
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	429a      	cmp	r2, r3
 800f930:	d806      	bhi.n	800f940 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f932:	f7ff f945 	bl	800ebc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f936:	68f9      	ldr	r1, [r7, #12]
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f7ff ff85 	bl	800f848 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f93e:	e024      	b.n	800f98a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d008      	beq.n	800f958 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f946:	4b13      	ldr	r3, [pc, #76]	; (800f994 <prvProcessTimerOrBlockTask+0x90>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d101      	bne.n	800f954 <prvProcessTimerOrBlockTask+0x50>
 800f950:	2301      	movs	r3, #1
 800f952:	e000      	b.n	800f956 <prvProcessTimerOrBlockTask+0x52>
 800f954:	2300      	movs	r3, #0
 800f956:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f958:	4b0f      	ldr	r3, [pc, #60]	; (800f998 <prvProcessTimerOrBlockTask+0x94>)
 800f95a:	6818      	ldr	r0, [r3, #0]
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	1ad3      	subs	r3, r2, r3
 800f962:	683a      	ldr	r2, [r7, #0]
 800f964:	4619      	mov	r1, r3
 800f966:	f7fe feb3 	bl	800e6d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f96a:	f7ff f929 	bl	800ebc0 <xTaskResumeAll>
 800f96e:	4603      	mov	r3, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	d10a      	bne.n	800f98a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f974:	4b09      	ldr	r3, [pc, #36]	; (800f99c <prvProcessTimerOrBlockTask+0x98>)
 800f976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f97a:	601a      	str	r2, [r3, #0]
 800f97c:	f3bf 8f4f 	dsb	sy
 800f980:	f3bf 8f6f 	isb	sy
}
 800f984:	e001      	b.n	800f98a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f986:	f7ff f91b 	bl	800ebc0 <xTaskResumeAll>
}
 800f98a:	bf00      	nop
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	20000e20 	.word	0x20000e20
 800f998:	20000e24 	.word	0x20000e24
 800f99c:	e000ed04 	.word	0xe000ed04

0800f9a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b085      	sub	sp, #20
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f9a8:	4b0e      	ldr	r3, [pc, #56]	; (800f9e4 <prvGetNextExpireTime+0x44>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d101      	bne.n	800f9b6 <prvGetNextExpireTime+0x16>
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	e000      	b.n	800f9b8 <prvGetNextExpireTime+0x18>
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d105      	bne.n	800f9d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9c4:	4b07      	ldr	r3, [pc, #28]	; (800f9e4 <prvGetNextExpireTime+0x44>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	60fb      	str	r3, [r7, #12]
 800f9ce:	e001      	b.n	800f9d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3714      	adds	r7, #20
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr
 800f9e2:	bf00      	nop
 800f9e4:	20000e1c 	.word	0x20000e1c

0800f9e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f9f0:	f7ff f982 	bl	800ecf8 <xTaskGetTickCount>
 800f9f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f9f6:	4b0b      	ldr	r3, [pc, #44]	; (800fa24 <prvSampleTimeNow+0x3c>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	68fa      	ldr	r2, [r7, #12]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d205      	bcs.n	800fa0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fa00:	f000 f930 	bl	800fc64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2201      	movs	r2, #1
 800fa08:	601a      	str	r2, [r3, #0]
 800fa0a:	e002      	b.n	800fa12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fa12:	4a04      	ldr	r2, [pc, #16]	; (800fa24 <prvSampleTimeNow+0x3c>)
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fa18:	68fb      	ldr	r3, [r7, #12]
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	20000e2c 	.word	0x20000e2c

0800fa28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b086      	sub	sp, #24
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
 800fa34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fa36:	2300      	movs	r3, #0
 800fa38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	68ba      	ldr	r2, [r7, #8]
 800fa3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fa46:	68ba      	ldr	r2, [r7, #8]
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d812      	bhi.n	800fa74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa4e:	687a      	ldr	r2, [r7, #4]
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	1ad2      	subs	r2, r2, r3
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	699b      	ldr	r3, [r3, #24]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d302      	bcc.n	800fa62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	617b      	str	r3, [r7, #20]
 800fa60:	e01b      	b.n	800fa9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fa62:	4b10      	ldr	r3, [pc, #64]	; (800faa4 <prvInsertTimerInActiveList+0x7c>)
 800fa64:	681a      	ldr	r2, [r3, #0]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	3304      	adds	r3, #4
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	4610      	mov	r0, r2
 800fa6e:	f7fd fe12 	bl	800d696 <vListInsert>
 800fa72:	e012      	b.n	800fa9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d206      	bcs.n	800fa8a <prvInsertTimerInActiveList+0x62>
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d302      	bcc.n	800fa8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fa84:	2301      	movs	r3, #1
 800fa86:	617b      	str	r3, [r7, #20]
 800fa88:	e007      	b.n	800fa9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa8a:	4b07      	ldr	r3, [pc, #28]	; (800faa8 <prvInsertTimerInActiveList+0x80>)
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	3304      	adds	r3, #4
 800fa92:	4619      	mov	r1, r3
 800fa94:	4610      	mov	r0, r2
 800fa96:	f7fd fdfe 	bl	800d696 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fa9a:	697b      	ldr	r3, [r7, #20]
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3718      	adds	r7, #24
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	20000e20 	.word	0x20000e20
 800faa8:	20000e1c 	.word	0x20000e1c

0800faac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b08e      	sub	sp, #56	; 0x38
 800fab0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fab2:	e0c6      	b.n	800fc42 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	da17      	bge.n	800faea <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800faba:	1d3b      	adds	r3, r7, #4
 800fabc:	3304      	adds	r3, #4
 800fabe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d109      	bne.n	800fada <prvProcessReceivedCommands+0x2e>
 800fac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faca:	f383 8811 	msr	BASEPRI, r3
 800face:	f3bf 8f6f 	isb	sy
 800fad2:	f3bf 8f4f 	dsb	sy
 800fad6:	61fb      	str	r3, [r7, #28]
 800fad8:	e7fe      	b.n	800fad8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fae0:	6850      	ldr	r0, [r2, #4]
 800fae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fae4:	6892      	ldr	r2, [r2, #8]
 800fae6:	4611      	mov	r1, r2
 800fae8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	f2c0 80a7 	blt.w	800fc40 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800faf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf8:	695b      	ldr	r3, [r3, #20]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d004      	beq.n	800fb08 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb00:	3304      	adds	r3, #4
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fd fe00 	bl	800d708 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb08:	463b      	mov	r3, r7
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7ff ff6c 	bl	800f9e8 <prvSampleTimeNow>
 800fb10:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2b09      	cmp	r3, #9
 800fb16:	f200 8094 	bhi.w	800fc42 <prvProcessReceivedCommands+0x196>
 800fb1a:	a201      	add	r2, pc, #4	; (adr r2, 800fb20 <prvProcessReceivedCommands+0x74>)
 800fb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb20:	0800fb49 	.word	0x0800fb49
 800fb24:	0800fb49 	.word	0x0800fb49
 800fb28:	0800fb49 	.word	0x0800fb49
 800fb2c:	0800fbbb 	.word	0x0800fbbb
 800fb30:	0800fbcf 	.word	0x0800fbcf
 800fb34:	0800fc17 	.word	0x0800fc17
 800fb38:	0800fb49 	.word	0x0800fb49
 800fb3c:	0800fb49 	.word	0x0800fb49
 800fb40:	0800fbbb 	.word	0x0800fbbb
 800fb44:	0800fbcf 	.word	0x0800fbcf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb4e:	f043 0301 	orr.w	r3, r3, #1
 800fb52:	b2da      	uxtb	r2, r3
 800fb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fb5a:	68ba      	ldr	r2, [r7, #8]
 800fb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb5e:	699b      	ldr	r3, [r3, #24]
 800fb60:	18d1      	adds	r1, r2, r3
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb68:	f7ff ff5e 	bl	800fa28 <prvInsertTimerInActiveList>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d067      	beq.n	800fc42 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb74:	6a1b      	ldr	r3, [r3, #32]
 800fb76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb80:	f003 0304 	and.w	r3, r3, #4
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d05c      	beq.n	800fc42 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fb88:	68ba      	ldr	r2, [r7, #8]
 800fb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb8c:	699b      	ldr	r3, [r3, #24]
 800fb8e:	441a      	add	r2, r3
 800fb90:	2300      	movs	r3, #0
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	2300      	movs	r3, #0
 800fb96:	2100      	movs	r1, #0
 800fb98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb9a:	f7ff fe09 	bl	800f7b0 <xTimerGenericCommand>
 800fb9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fba0:	6a3b      	ldr	r3, [r7, #32]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d14d      	bne.n	800fc42 <prvProcessReceivedCommands+0x196>
 800fba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbaa:	f383 8811 	msr	BASEPRI, r3
 800fbae:	f3bf 8f6f 	isb	sy
 800fbb2:	f3bf 8f4f 	dsb	sy
 800fbb6:	61bb      	str	r3, [r7, #24]
 800fbb8:	e7fe      	b.n	800fbb8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbc0:	f023 0301 	bic.w	r3, r3, #1
 800fbc4:	b2da      	uxtb	r2, r3
 800fbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fbcc:	e039      	b.n	800fc42 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbd4:	f043 0301 	orr.w	r3, r3, #1
 800fbd8:	b2da      	uxtb	r2, r3
 800fbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fbe0:	68ba      	ldr	r2, [r7, #8]
 800fbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe8:	699b      	ldr	r3, [r3, #24]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d109      	bne.n	800fc02 <prvProcessReceivedCommands+0x156>
 800fbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf2:	f383 8811 	msr	BASEPRI, r3
 800fbf6:	f3bf 8f6f 	isb	sy
 800fbfa:	f3bf 8f4f 	dsb	sy
 800fbfe:	617b      	str	r3, [r7, #20]
 800fc00:	e7fe      	b.n	800fc00 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc04:	699a      	ldr	r2, [r3, #24]
 800fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc08:	18d1      	adds	r1, r2, r3
 800fc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc10:	f7ff ff0a 	bl	800fa28 <prvInsertTimerInActiveList>
					break;
 800fc14:	e015      	b.n	800fc42 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc1c:	f003 0302 	and.w	r3, r3, #2
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d103      	bne.n	800fc2c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800fc24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc26:	f000 fb15 	bl	8010254 <vPortFree>
 800fc2a:	e00a      	b.n	800fc42 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc32:	f023 0301 	bic.w	r3, r3, #1
 800fc36:	b2da      	uxtb	r2, r3
 800fc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fc3e:	e000      	b.n	800fc42 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fc40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fc42:	4b07      	ldr	r3, [pc, #28]	; (800fc60 <prvProcessReceivedCommands+0x1b4>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	1d39      	adds	r1, r7, #4
 800fc48:	2200      	movs	r2, #0
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7fe f942 	bl	800ded4 <xQueueReceive>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f47f af2e 	bne.w	800fab4 <prvProcessReceivedCommands+0x8>
	}
}
 800fc58:	bf00      	nop
 800fc5a:	3730      	adds	r7, #48	; 0x30
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	20000e24 	.word	0x20000e24

0800fc64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b088      	sub	sp, #32
 800fc68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fc6a:	e047      	b.n	800fcfc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc6c:	4b2d      	ldr	r3, [pc, #180]	; (800fd24 <prvSwitchTimerLists+0xc0>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc76:	4b2b      	ldr	r3, [pc, #172]	; (800fd24 <prvSwitchTimerLists+0xc0>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	68db      	ldr	r3, [r3, #12]
 800fc7c:	68db      	ldr	r3, [r3, #12]
 800fc7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	3304      	adds	r3, #4
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7fd fd3f 	bl	800d708 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	6a1b      	ldr	r3, [r3, #32]
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc98:	f003 0304 	and.w	r3, r3, #4
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d02d      	beq.n	800fcfc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	699b      	ldr	r3, [r3, #24]
 800fca4:	693a      	ldr	r2, [r7, #16]
 800fca6:	4413      	add	r3, r2
 800fca8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fcaa:	68ba      	ldr	r2, [r7, #8]
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d90e      	bls.n	800fcd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	68ba      	ldr	r2, [r7, #8]
 800fcb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	68fa      	ldr	r2, [r7, #12]
 800fcbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fcbe:	4b19      	ldr	r3, [pc, #100]	; (800fd24 <prvSwitchTimerLists+0xc0>)
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	3304      	adds	r3, #4
 800fcc6:	4619      	mov	r1, r3
 800fcc8:	4610      	mov	r0, r2
 800fcca:	f7fd fce4 	bl	800d696 <vListInsert>
 800fcce:	e015      	b.n	800fcfc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	9300      	str	r3, [sp, #0]
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	693a      	ldr	r2, [r7, #16]
 800fcd8:	2100      	movs	r1, #0
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f7ff fd68 	bl	800f7b0 <xTimerGenericCommand>
 800fce0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d109      	bne.n	800fcfc <prvSwitchTimerLists+0x98>
 800fce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcec:	f383 8811 	msr	BASEPRI, r3
 800fcf0:	f3bf 8f6f 	isb	sy
 800fcf4:	f3bf 8f4f 	dsb	sy
 800fcf8:	603b      	str	r3, [r7, #0]
 800fcfa:	e7fe      	b.n	800fcfa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fcfc:	4b09      	ldr	r3, [pc, #36]	; (800fd24 <prvSwitchTimerLists+0xc0>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d1b2      	bne.n	800fc6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fd06:	4b07      	ldr	r3, [pc, #28]	; (800fd24 <prvSwitchTimerLists+0xc0>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fd0c:	4b06      	ldr	r3, [pc, #24]	; (800fd28 <prvSwitchTimerLists+0xc4>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a04      	ldr	r2, [pc, #16]	; (800fd24 <prvSwitchTimerLists+0xc0>)
 800fd12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fd14:	4a04      	ldr	r2, [pc, #16]	; (800fd28 <prvSwitchTimerLists+0xc4>)
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	6013      	str	r3, [r2, #0]
}
 800fd1a:	bf00      	nop
 800fd1c:	3718      	adds	r7, #24
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
 800fd22:	bf00      	nop
 800fd24:	20000e1c 	.word	0x20000e1c
 800fd28:	20000e20 	.word	0x20000e20

0800fd2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fd32:	f000 f963 	bl	800fffc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fd36:	4b15      	ldr	r3, [pc, #84]	; (800fd8c <prvCheckForValidListAndQueue+0x60>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d120      	bne.n	800fd80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fd3e:	4814      	ldr	r0, [pc, #80]	; (800fd90 <prvCheckForValidListAndQueue+0x64>)
 800fd40:	f7fd fc58 	bl	800d5f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fd44:	4813      	ldr	r0, [pc, #76]	; (800fd94 <prvCheckForValidListAndQueue+0x68>)
 800fd46:	f7fd fc55 	bl	800d5f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fd4a:	4b13      	ldr	r3, [pc, #76]	; (800fd98 <prvCheckForValidListAndQueue+0x6c>)
 800fd4c:	4a10      	ldr	r2, [pc, #64]	; (800fd90 <prvCheckForValidListAndQueue+0x64>)
 800fd4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fd50:	4b12      	ldr	r3, [pc, #72]	; (800fd9c <prvCheckForValidListAndQueue+0x70>)
 800fd52:	4a10      	ldr	r2, [pc, #64]	; (800fd94 <prvCheckForValidListAndQueue+0x68>)
 800fd54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fd56:	2300      	movs	r3, #0
 800fd58:	9300      	str	r3, [sp, #0]
 800fd5a:	4b11      	ldr	r3, [pc, #68]	; (800fda0 <prvCheckForValidListAndQueue+0x74>)
 800fd5c:	4a11      	ldr	r2, [pc, #68]	; (800fda4 <prvCheckForValidListAndQueue+0x78>)
 800fd5e:	2110      	movs	r1, #16
 800fd60:	200a      	movs	r0, #10
 800fd62:	f7fd fd63 	bl	800d82c <xQueueGenericCreateStatic>
 800fd66:	4602      	mov	r2, r0
 800fd68:	4b08      	ldr	r3, [pc, #32]	; (800fd8c <prvCheckForValidListAndQueue+0x60>)
 800fd6a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fd6c:	4b07      	ldr	r3, [pc, #28]	; (800fd8c <prvCheckForValidListAndQueue+0x60>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d005      	beq.n	800fd80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fd74:	4b05      	ldr	r3, [pc, #20]	; (800fd8c <prvCheckForValidListAndQueue+0x60>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	490b      	ldr	r1, [pc, #44]	; (800fda8 <prvCheckForValidListAndQueue+0x7c>)
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fe fc56 	bl	800e62c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fd80:	f000 f96a 	bl	8010058 <vPortExitCritical>
}
 800fd84:	bf00      	nop
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	20000e24 	.word	0x20000e24
 800fd90:	20000df4 	.word	0x20000df4
 800fd94:	20000e08 	.word	0x20000e08
 800fd98:	20000e1c 	.word	0x20000e1c
 800fd9c:	20000e20 	.word	0x20000e20
 800fda0:	20000ed0 	.word	0x20000ed0
 800fda4:	20000e30 	.word	0x20000e30
 800fda8:	08014a5c 	.word	0x08014a5c

0800fdac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fdac:	b480      	push	{r7}
 800fdae:	b085      	sub	sp, #20
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	3b04      	subs	r3, #4
 800fdbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fdc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	3b04      	subs	r3, #4
 800fdca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	f023 0201 	bic.w	r2, r3, #1
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	3b04      	subs	r3, #4
 800fdda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fddc:	4a0c      	ldr	r2, [pc, #48]	; (800fe10 <pxPortInitialiseStack+0x64>)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	3b14      	subs	r3, #20
 800fde6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	3b04      	subs	r3, #4
 800fdf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f06f 0202 	mvn.w	r2, #2
 800fdfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	3b20      	subs	r3, #32
 800fe00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fe02:	68fb      	ldr	r3, [r7, #12]
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3714      	adds	r7, #20
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	4770      	bx	lr
 800fe10:	0800fe15 	.word	0x0800fe15

0800fe14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fe14:	b480      	push	{r7}
 800fe16:	b085      	sub	sp, #20
 800fe18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fe1e:	4b11      	ldr	r3, [pc, #68]	; (800fe64 <prvTaskExitError+0x50>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe26:	d009      	beq.n	800fe3c <prvTaskExitError+0x28>
 800fe28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2c:	f383 8811 	msr	BASEPRI, r3
 800fe30:	f3bf 8f6f 	isb	sy
 800fe34:	f3bf 8f4f 	dsb	sy
 800fe38:	60fb      	str	r3, [r7, #12]
 800fe3a:	e7fe      	b.n	800fe3a <prvTaskExitError+0x26>
 800fe3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe40:	f383 8811 	msr	BASEPRI, r3
 800fe44:	f3bf 8f6f 	isb	sy
 800fe48:	f3bf 8f4f 	dsb	sy
 800fe4c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fe4e:	bf00      	nop
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d0fc      	beq.n	800fe50 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fe56:	bf00      	nop
 800fe58:	3714      	adds	r7, #20
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe60:	4770      	bx	lr
 800fe62:	bf00      	nop
 800fe64:	2000000c 	.word	0x2000000c
	...

0800fe70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fe70:	4b07      	ldr	r3, [pc, #28]	; (800fe90 <pxCurrentTCBConst2>)
 800fe72:	6819      	ldr	r1, [r3, #0]
 800fe74:	6808      	ldr	r0, [r1, #0]
 800fe76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe7a:	f380 8809 	msr	PSP, r0
 800fe7e:	f3bf 8f6f 	isb	sy
 800fe82:	f04f 0000 	mov.w	r0, #0
 800fe86:	f380 8811 	msr	BASEPRI, r0
 800fe8a:	4770      	bx	lr
 800fe8c:	f3af 8000 	nop.w

0800fe90 <pxCurrentTCBConst2>:
 800fe90:	200008f4 	.word	0x200008f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fe94:	bf00      	nop
 800fe96:	bf00      	nop

0800fe98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fe98:	4808      	ldr	r0, [pc, #32]	; (800febc <prvPortStartFirstTask+0x24>)
 800fe9a:	6800      	ldr	r0, [r0, #0]
 800fe9c:	6800      	ldr	r0, [r0, #0]
 800fe9e:	f380 8808 	msr	MSP, r0
 800fea2:	f04f 0000 	mov.w	r0, #0
 800fea6:	f380 8814 	msr	CONTROL, r0
 800feaa:	b662      	cpsie	i
 800feac:	b661      	cpsie	f
 800feae:	f3bf 8f4f 	dsb	sy
 800feb2:	f3bf 8f6f 	isb	sy
 800feb6:	df00      	svc	0
 800feb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800feba:	bf00      	nop
 800febc:	e000ed08 	.word	0xe000ed08

0800fec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b086      	sub	sp, #24
 800fec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fec6:	4b44      	ldr	r3, [pc, #272]	; (800ffd8 <xPortStartScheduler+0x118>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a44      	ldr	r2, [pc, #272]	; (800ffdc <xPortStartScheduler+0x11c>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d109      	bne.n	800fee4 <xPortStartScheduler+0x24>
 800fed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed4:	f383 8811 	msr	BASEPRI, r3
 800fed8:	f3bf 8f6f 	isb	sy
 800fedc:	f3bf 8f4f 	dsb	sy
 800fee0:	613b      	str	r3, [r7, #16]
 800fee2:	e7fe      	b.n	800fee2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fee4:	4b3c      	ldr	r3, [pc, #240]	; (800ffd8 <xPortStartScheduler+0x118>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	4a3d      	ldr	r2, [pc, #244]	; (800ffe0 <xPortStartScheduler+0x120>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d109      	bne.n	800ff02 <xPortStartScheduler+0x42>
 800feee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef2:	f383 8811 	msr	BASEPRI, r3
 800fef6:	f3bf 8f6f 	isb	sy
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	60fb      	str	r3, [r7, #12]
 800ff00:	e7fe      	b.n	800ff00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ff02:	4b38      	ldr	r3, [pc, #224]	; (800ffe4 <xPortStartScheduler+0x124>)
 800ff04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	22ff      	movs	r2, #255	; 0xff
 800ff12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ff1c:	78fb      	ldrb	r3, [r7, #3]
 800ff1e:	b2db      	uxtb	r3, r3
 800ff20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ff24:	b2da      	uxtb	r2, r3
 800ff26:	4b30      	ldr	r3, [pc, #192]	; (800ffe8 <xPortStartScheduler+0x128>)
 800ff28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ff2a:	4b30      	ldr	r3, [pc, #192]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff2c:	2207      	movs	r2, #7
 800ff2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff30:	e009      	b.n	800ff46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ff32:	4b2e      	ldr	r3, [pc, #184]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	3b01      	subs	r3, #1
 800ff38:	4a2c      	ldr	r2, [pc, #176]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ff3c:	78fb      	ldrb	r3, [r7, #3]
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	005b      	lsls	r3, r3, #1
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff46:	78fb      	ldrb	r3, [r7, #3]
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff4e:	2b80      	cmp	r3, #128	; 0x80
 800ff50:	d0ef      	beq.n	800ff32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ff52:	4b26      	ldr	r3, [pc, #152]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f1c3 0307 	rsb	r3, r3, #7
 800ff5a:	2b04      	cmp	r3, #4
 800ff5c:	d009      	beq.n	800ff72 <xPortStartScheduler+0xb2>
 800ff5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff62:	f383 8811 	msr	BASEPRI, r3
 800ff66:	f3bf 8f6f 	isb	sy
 800ff6a:	f3bf 8f4f 	dsb	sy
 800ff6e:	60bb      	str	r3, [r7, #8]
 800ff70:	e7fe      	b.n	800ff70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ff72:	4b1e      	ldr	r3, [pc, #120]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	021b      	lsls	r3, r3, #8
 800ff78:	4a1c      	ldr	r2, [pc, #112]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ff7c:	4b1b      	ldr	r3, [pc, #108]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ff84:	4a19      	ldr	r2, [pc, #100]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	b2da      	uxtb	r2, r3
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ff90:	4b17      	ldr	r3, [pc, #92]	; (800fff0 <xPortStartScheduler+0x130>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4a16      	ldr	r2, [pc, #88]	; (800fff0 <xPortStartScheduler+0x130>)
 800ff96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ff9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ff9c:	4b14      	ldr	r3, [pc, #80]	; (800fff0 <xPortStartScheduler+0x130>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	4a13      	ldr	r2, [pc, #76]	; (800fff0 <xPortStartScheduler+0x130>)
 800ffa2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ffa6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ffa8:	f000 f8d6 	bl	8010158 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ffac:	4b11      	ldr	r3, [pc, #68]	; (800fff4 <xPortStartScheduler+0x134>)
 800ffae:	2200      	movs	r2, #0
 800ffb0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ffb2:	f000 f8f5 	bl	80101a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ffb6:	4b10      	ldr	r3, [pc, #64]	; (800fff8 <xPortStartScheduler+0x138>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4a0f      	ldr	r2, [pc, #60]	; (800fff8 <xPortStartScheduler+0x138>)
 800ffbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ffc0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ffc2:	f7ff ff69 	bl	800fe98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ffc6:	f7fe ff71 	bl	800eeac <vTaskSwitchContext>
	prvTaskExitError();
 800ffca:	f7ff ff23 	bl	800fe14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ffce:	2300      	movs	r3, #0
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3718      	adds	r7, #24
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	e000ed00 	.word	0xe000ed00
 800ffdc:	410fc271 	.word	0x410fc271
 800ffe0:	410fc270 	.word	0x410fc270
 800ffe4:	e000e400 	.word	0xe000e400
 800ffe8:	20000f20 	.word	0x20000f20
 800ffec:	20000f24 	.word	0x20000f24
 800fff0:	e000ed20 	.word	0xe000ed20
 800fff4:	2000000c 	.word	0x2000000c
 800fff8:	e000ef34 	.word	0xe000ef34

0800fffc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010006:	f383 8811 	msr	BASEPRI, r3
 801000a:	f3bf 8f6f 	isb	sy
 801000e:	f3bf 8f4f 	dsb	sy
 8010012:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010014:	4b0e      	ldr	r3, [pc, #56]	; (8010050 <vPortEnterCritical+0x54>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	3301      	adds	r3, #1
 801001a:	4a0d      	ldr	r2, [pc, #52]	; (8010050 <vPortEnterCritical+0x54>)
 801001c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801001e:	4b0c      	ldr	r3, [pc, #48]	; (8010050 <vPortEnterCritical+0x54>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	2b01      	cmp	r3, #1
 8010024:	d10e      	bne.n	8010044 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010026:	4b0b      	ldr	r3, [pc, #44]	; (8010054 <vPortEnterCritical+0x58>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	b2db      	uxtb	r3, r3
 801002c:	2b00      	cmp	r3, #0
 801002e:	d009      	beq.n	8010044 <vPortEnterCritical+0x48>
 8010030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010034:	f383 8811 	msr	BASEPRI, r3
 8010038:	f3bf 8f6f 	isb	sy
 801003c:	f3bf 8f4f 	dsb	sy
 8010040:	603b      	str	r3, [r7, #0]
 8010042:	e7fe      	b.n	8010042 <vPortEnterCritical+0x46>
	}
}
 8010044:	bf00      	nop
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr
 8010050:	2000000c 	.word	0x2000000c
 8010054:	e000ed04 	.word	0xe000ed04

08010058 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801005e:	4b11      	ldr	r3, [pc, #68]	; (80100a4 <vPortExitCritical+0x4c>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d109      	bne.n	801007a <vPortExitCritical+0x22>
 8010066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801006a:	f383 8811 	msr	BASEPRI, r3
 801006e:	f3bf 8f6f 	isb	sy
 8010072:	f3bf 8f4f 	dsb	sy
 8010076:	607b      	str	r3, [r7, #4]
 8010078:	e7fe      	b.n	8010078 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801007a:	4b0a      	ldr	r3, [pc, #40]	; (80100a4 <vPortExitCritical+0x4c>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	3b01      	subs	r3, #1
 8010080:	4a08      	ldr	r2, [pc, #32]	; (80100a4 <vPortExitCritical+0x4c>)
 8010082:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010084:	4b07      	ldr	r3, [pc, #28]	; (80100a4 <vPortExitCritical+0x4c>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d104      	bne.n	8010096 <vPortExitCritical+0x3e>
 801008c:	2300      	movs	r3, #0
 801008e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010096:	bf00      	nop
 8010098:	370c      	adds	r7, #12
 801009a:	46bd      	mov	sp, r7
 801009c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a0:	4770      	bx	lr
 80100a2:	bf00      	nop
 80100a4:	2000000c 	.word	0x2000000c
	...

080100b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80100b0:	f3ef 8009 	mrs	r0, PSP
 80100b4:	f3bf 8f6f 	isb	sy
 80100b8:	4b15      	ldr	r3, [pc, #84]	; (8010110 <pxCurrentTCBConst>)
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	f01e 0f10 	tst.w	lr, #16
 80100c0:	bf08      	it	eq
 80100c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80100c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ca:	6010      	str	r0, [r2, #0]
 80100cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80100d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80100d4:	f380 8811 	msr	BASEPRI, r0
 80100d8:	f3bf 8f4f 	dsb	sy
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f7fe fee4 	bl	800eeac <vTaskSwitchContext>
 80100e4:	f04f 0000 	mov.w	r0, #0
 80100e8:	f380 8811 	msr	BASEPRI, r0
 80100ec:	bc09      	pop	{r0, r3}
 80100ee:	6819      	ldr	r1, [r3, #0]
 80100f0:	6808      	ldr	r0, [r1, #0]
 80100f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f6:	f01e 0f10 	tst.w	lr, #16
 80100fa:	bf08      	it	eq
 80100fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010100:	f380 8809 	msr	PSP, r0
 8010104:	f3bf 8f6f 	isb	sy
 8010108:	4770      	bx	lr
 801010a:	bf00      	nop
 801010c:	f3af 8000 	nop.w

08010110 <pxCurrentTCBConst>:
 8010110:	200008f4 	.word	0x200008f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010114:	bf00      	nop
 8010116:	bf00      	nop

08010118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
	__asm volatile
 801011e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010122:	f383 8811 	msr	BASEPRI, r3
 8010126:	f3bf 8f6f 	isb	sy
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010130:	f7fe fe04 	bl	800ed3c <xTaskIncrementTick>
 8010134:	4603      	mov	r3, r0
 8010136:	2b00      	cmp	r3, #0
 8010138:	d003      	beq.n	8010142 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801013a:	4b06      	ldr	r3, [pc, #24]	; (8010154 <SysTick_Handler+0x3c>)
 801013c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010140:	601a      	str	r2, [r3, #0]
 8010142:	2300      	movs	r3, #0
 8010144:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801014c:	bf00      	nop
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	e000ed04 	.word	0xe000ed04

08010158 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010158:	b480      	push	{r7}
 801015a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801015c:	4b0b      	ldr	r3, [pc, #44]	; (801018c <vPortSetupTimerInterrupt+0x34>)
 801015e:	2200      	movs	r2, #0
 8010160:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010162:	4b0b      	ldr	r3, [pc, #44]	; (8010190 <vPortSetupTimerInterrupt+0x38>)
 8010164:	2200      	movs	r2, #0
 8010166:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010168:	4b0a      	ldr	r3, [pc, #40]	; (8010194 <vPortSetupTimerInterrupt+0x3c>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	4a0a      	ldr	r2, [pc, #40]	; (8010198 <vPortSetupTimerInterrupt+0x40>)
 801016e:	fba2 2303 	umull	r2, r3, r2, r3
 8010172:	099b      	lsrs	r3, r3, #6
 8010174:	4a09      	ldr	r2, [pc, #36]	; (801019c <vPortSetupTimerInterrupt+0x44>)
 8010176:	3b01      	subs	r3, #1
 8010178:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801017a:	4b04      	ldr	r3, [pc, #16]	; (801018c <vPortSetupTimerInterrupt+0x34>)
 801017c:	2207      	movs	r2, #7
 801017e:	601a      	str	r2, [r3, #0]
}
 8010180:	bf00      	nop
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop
 801018c:	e000e010 	.word	0xe000e010
 8010190:	e000e018 	.word	0xe000e018
 8010194:	20000000 	.word	0x20000000
 8010198:	10624dd3 	.word	0x10624dd3
 801019c:	e000e014 	.word	0xe000e014

080101a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80101a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80101b0 <vPortEnableVFP+0x10>
 80101a4:	6801      	ldr	r1, [r0, #0]
 80101a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80101aa:	6001      	str	r1, [r0, #0]
 80101ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80101ae:	bf00      	nop
 80101b0:	e000ed88 	.word	0xe000ed88

080101b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80101b4:	b480      	push	{r7}
 80101b6:	b085      	sub	sp, #20
 80101b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80101ba:	f3ef 8305 	mrs	r3, IPSR
 80101be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	2b0f      	cmp	r3, #15
 80101c4:	d913      	bls.n	80101ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80101c6:	4a16      	ldr	r2, [pc, #88]	; (8010220 <vPortValidateInterruptPriority+0x6c>)
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	4413      	add	r3, r2
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80101d0:	4b14      	ldr	r3, [pc, #80]	; (8010224 <vPortValidateInterruptPriority+0x70>)
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	7afa      	ldrb	r2, [r7, #11]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d209      	bcs.n	80101ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80101da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101de:	f383 8811 	msr	BASEPRI, r3
 80101e2:	f3bf 8f6f 	isb	sy
 80101e6:	f3bf 8f4f 	dsb	sy
 80101ea:	607b      	str	r3, [r7, #4]
 80101ec:	e7fe      	b.n	80101ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80101ee:	4b0e      	ldr	r3, [pc, #56]	; (8010228 <vPortValidateInterruptPriority+0x74>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80101f6:	4b0d      	ldr	r3, [pc, #52]	; (801022c <vPortValidateInterruptPriority+0x78>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d909      	bls.n	8010212 <vPortValidateInterruptPriority+0x5e>
 80101fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010202:	f383 8811 	msr	BASEPRI, r3
 8010206:	f3bf 8f6f 	isb	sy
 801020a:	f3bf 8f4f 	dsb	sy
 801020e:	603b      	str	r3, [r7, #0]
 8010210:	e7fe      	b.n	8010210 <vPortValidateInterruptPriority+0x5c>
	}
 8010212:	bf00      	nop
 8010214:	3714      	adds	r7, #20
 8010216:	46bd      	mov	sp, r7
 8010218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021c:	4770      	bx	lr
 801021e:	bf00      	nop
 8010220:	e000e3f0 	.word	0xe000e3f0
 8010224:	20000f20 	.word	0x20000f20
 8010228:	e000ed0c 	.word	0xe000ed0c
 801022c:	20000f24 	.word	0x20000f24

08010230 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8010238:	f7fe fcb4 	bl	800eba4 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f000 f845 	bl	80102cc <malloc>
 8010242:	4603      	mov	r3, r0
 8010244:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010246:	f7fe fcbb 	bl	800ebc0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 801024a:	68fb      	ldr	r3, [r7, #12]
}
 801024c:	4618      	mov	r0, r3
 801024e:	3710      	adds	r7, #16
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
	if( pv )
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d006      	beq.n	8010270 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8010262:	f7fe fc9f 	bl	800eba4 <vTaskSuspendAll>
		{
			free( pv );
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f000 f838 	bl	80102dc <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 801026c:	f7fe fca8 	bl	800ebc0 <xTaskResumeAll>
	}
}
 8010270:	bf00      	nop
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <__errno>:
 8010278:	4b01      	ldr	r3, [pc, #4]	; (8010280 <__errno+0x8>)
 801027a:	6818      	ldr	r0, [r3, #0]
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop
 8010280:	20000010 	.word	0x20000010

08010284 <__libc_init_array>:
 8010284:	b570      	push	{r4, r5, r6, lr}
 8010286:	4e0d      	ldr	r6, [pc, #52]	; (80102bc <__libc_init_array+0x38>)
 8010288:	4c0d      	ldr	r4, [pc, #52]	; (80102c0 <__libc_init_array+0x3c>)
 801028a:	1ba4      	subs	r4, r4, r6
 801028c:	10a4      	asrs	r4, r4, #2
 801028e:	2500      	movs	r5, #0
 8010290:	42a5      	cmp	r5, r4
 8010292:	d109      	bne.n	80102a8 <__libc_init_array+0x24>
 8010294:	4e0b      	ldr	r6, [pc, #44]	; (80102c4 <__libc_init_array+0x40>)
 8010296:	4c0c      	ldr	r4, [pc, #48]	; (80102c8 <__libc_init_array+0x44>)
 8010298:	f004 fb14 	bl	80148c4 <_init>
 801029c:	1ba4      	subs	r4, r4, r6
 801029e:	10a4      	asrs	r4, r4, #2
 80102a0:	2500      	movs	r5, #0
 80102a2:	42a5      	cmp	r5, r4
 80102a4:	d105      	bne.n	80102b2 <__libc_init_array+0x2e>
 80102a6:	bd70      	pop	{r4, r5, r6, pc}
 80102a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80102ac:	4798      	blx	r3
 80102ae:	3501      	adds	r5, #1
 80102b0:	e7ee      	b.n	8010290 <__libc_init_array+0xc>
 80102b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80102b6:	4798      	blx	r3
 80102b8:	3501      	adds	r5, #1
 80102ba:	e7f2      	b.n	80102a2 <__libc_init_array+0x1e>
 80102bc:	08014e68 	.word	0x08014e68
 80102c0:	08014e68 	.word	0x08014e68
 80102c4:	08014e68 	.word	0x08014e68
 80102c8:	08014e6c 	.word	0x08014e6c

080102cc <malloc>:
 80102cc:	4b02      	ldr	r3, [pc, #8]	; (80102d8 <malloc+0xc>)
 80102ce:	4601      	mov	r1, r0
 80102d0:	6818      	ldr	r0, [r3, #0]
 80102d2:	f000 b86d 	b.w	80103b0 <_malloc_r>
 80102d6:	bf00      	nop
 80102d8:	20000010 	.word	0x20000010

080102dc <free>:
 80102dc:	4b02      	ldr	r3, [pc, #8]	; (80102e8 <free+0xc>)
 80102de:	4601      	mov	r1, r0
 80102e0:	6818      	ldr	r0, [r3, #0]
 80102e2:	f000 b817 	b.w	8010314 <_free_r>
 80102e6:	bf00      	nop
 80102e8:	20000010 	.word	0x20000010

080102ec <memcpy>:
 80102ec:	b510      	push	{r4, lr}
 80102ee:	1e43      	subs	r3, r0, #1
 80102f0:	440a      	add	r2, r1
 80102f2:	4291      	cmp	r1, r2
 80102f4:	d100      	bne.n	80102f8 <memcpy+0xc>
 80102f6:	bd10      	pop	{r4, pc}
 80102f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010300:	e7f7      	b.n	80102f2 <memcpy+0x6>

08010302 <memset>:
 8010302:	4402      	add	r2, r0
 8010304:	4603      	mov	r3, r0
 8010306:	4293      	cmp	r3, r2
 8010308:	d100      	bne.n	801030c <memset+0xa>
 801030a:	4770      	bx	lr
 801030c:	f803 1b01 	strb.w	r1, [r3], #1
 8010310:	e7f9      	b.n	8010306 <memset+0x4>
	...

08010314 <_free_r>:
 8010314:	b538      	push	{r3, r4, r5, lr}
 8010316:	4605      	mov	r5, r0
 8010318:	2900      	cmp	r1, #0
 801031a:	d045      	beq.n	80103a8 <_free_r+0x94>
 801031c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010320:	1f0c      	subs	r4, r1, #4
 8010322:	2b00      	cmp	r3, #0
 8010324:	bfb8      	it	lt
 8010326:	18e4      	addlt	r4, r4, r3
 8010328:	f003 fb18 	bl	801395c <__malloc_lock>
 801032c:	4a1f      	ldr	r2, [pc, #124]	; (80103ac <_free_r+0x98>)
 801032e:	6813      	ldr	r3, [r2, #0]
 8010330:	4610      	mov	r0, r2
 8010332:	b933      	cbnz	r3, 8010342 <_free_r+0x2e>
 8010334:	6063      	str	r3, [r4, #4]
 8010336:	6014      	str	r4, [r2, #0]
 8010338:	4628      	mov	r0, r5
 801033a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801033e:	f003 bb0e 	b.w	801395e <__malloc_unlock>
 8010342:	42a3      	cmp	r3, r4
 8010344:	d90c      	bls.n	8010360 <_free_r+0x4c>
 8010346:	6821      	ldr	r1, [r4, #0]
 8010348:	1862      	adds	r2, r4, r1
 801034a:	4293      	cmp	r3, r2
 801034c:	bf04      	itt	eq
 801034e:	681a      	ldreq	r2, [r3, #0]
 8010350:	685b      	ldreq	r3, [r3, #4]
 8010352:	6063      	str	r3, [r4, #4]
 8010354:	bf04      	itt	eq
 8010356:	1852      	addeq	r2, r2, r1
 8010358:	6022      	streq	r2, [r4, #0]
 801035a:	6004      	str	r4, [r0, #0]
 801035c:	e7ec      	b.n	8010338 <_free_r+0x24>
 801035e:	4613      	mov	r3, r2
 8010360:	685a      	ldr	r2, [r3, #4]
 8010362:	b10a      	cbz	r2, 8010368 <_free_r+0x54>
 8010364:	42a2      	cmp	r2, r4
 8010366:	d9fa      	bls.n	801035e <_free_r+0x4a>
 8010368:	6819      	ldr	r1, [r3, #0]
 801036a:	1858      	adds	r0, r3, r1
 801036c:	42a0      	cmp	r0, r4
 801036e:	d10b      	bne.n	8010388 <_free_r+0x74>
 8010370:	6820      	ldr	r0, [r4, #0]
 8010372:	4401      	add	r1, r0
 8010374:	1858      	adds	r0, r3, r1
 8010376:	4282      	cmp	r2, r0
 8010378:	6019      	str	r1, [r3, #0]
 801037a:	d1dd      	bne.n	8010338 <_free_r+0x24>
 801037c:	6810      	ldr	r0, [r2, #0]
 801037e:	6852      	ldr	r2, [r2, #4]
 8010380:	605a      	str	r2, [r3, #4]
 8010382:	4401      	add	r1, r0
 8010384:	6019      	str	r1, [r3, #0]
 8010386:	e7d7      	b.n	8010338 <_free_r+0x24>
 8010388:	d902      	bls.n	8010390 <_free_r+0x7c>
 801038a:	230c      	movs	r3, #12
 801038c:	602b      	str	r3, [r5, #0]
 801038e:	e7d3      	b.n	8010338 <_free_r+0x24>
 8010390:	6820      	ldr	r0, [r4, #0]
 8010392:	1821      	adds	r1, r4, r0
 8010394:	428a      	cmp	r2, r1
 8010396:	bf04      	itt	eq
 8010398:	6811      	ldreq	r1, [r2, #0]
 801039a:	6852      	ldreq	r2, [r2, #4]
 801039c:	6062      	str	r2, [r4, #4]
 801039e:	bf04      	itt	eq
 80103a0:	1809      	addeq	r1, r1, r0
 80103a2:	6021      	streq	r1, [r4, #0]
 80103a4:	605c      	str	r4, [r3, #4]
 80103a6:	e7c7      	b.n	8010338 <_free_r+0x24>
 80103a8:	bd38      	pop	{r3, r4, r5, pc}
 80103aa:	bf00      	nop
 80103ac:	20000f28 	.word	0x20000f28

080103b0 <_malloc_r>:
 80103b0:	b570      	push	{r4, r5, r6, lr}
 80103b2:	1ccd      	adds	r5, r1, #3
 80103b4:	f025 0503 	bic.w	r5, r5, #3
 80103b8:	3508      	adds	r5, #8
 80103ba:	2d0c      	cmp	r5, #12
 80103bc:	bf38      	it	cc
 80103be:	250c      	movcc	r5, #12
 80103c0:	2d00      	cmp	r5, #0
 80103c2:	4606      	mov	r6, r0
 80103c4:	db01      	blt.n	80103ca <_malloc_r+0x1a>
 80103c6:	42a9      	cmp	r1, r5
 80103c8:	d903      	bls.n	80103d2 <_malloc_r+0x22>
 80103ca:	230c      	movs	r3, #12
 80103cc:	6033      	str	r3, [r6, #0]
 80103ce:	2000      	movs	r0, #0
 80103d0:	bd70      	pop	{r4, r5, r6, pc}
 80103d2:	f003 fac3 	bl	801395c <__malloc_lock>
 80103d6:	4a21      	ldr	r2, [pc, #132]	; (801045c <_malloc_r+0xac>)
 80103d8:	6814      	ldr	r4, [r2, #0]
 80103da:	4621      	mov	r1, r4
 80103dc:	b991      	cbnz	r1, 8010404 <_malloc_r+0x54>
 80103de:	4c20      	ldr	r4, [pc, #128]	; (8010460 <_malloc_r+0xb0>)
 80103e0:	6823      	ldr	r3, [r4, #0]
 80103e2:	b91b      	cbnz	r3, 80103ec <_malloc_r+0x3c>
 80103e4:	4630      	mov	r0, r6
 80103e6:	f000 fef7 	bl	80111d8 <_sbrk_r>
 80103ea:	6020      	str	r0, [r4, #0]
 80103ec:	4629      	mov	r1, r5
 80103ee:	4630      	mov	r0, r6
 80103f0:	f000 fef2 	bl	80111d8 <_sbrk_r>
 80103f4:	1c43      	adds	r3, r0, #1
 80103f6:	d124      	bne.n	8010442 <_malloc_r+0x92>
 80103f8:	230c      	movs	r3, #12
 80103fa:	6033      	str	r3, [r6, #0]
 80103fc:	4630      	mov	r0, r6
 80103fe:	f003 faae 	bl	801395e <__malloc_unlock>
 8010402:	e7e4      	b.n	80103ce <_malloc_r+0x1e>
 8010404:	680b      	ldr	r3, [r1, #0]
 8010406:	1b5b      	subs	r3, r3, r5
 8010408:	d418      	bmi.n	801043c <_malloc_r+0x8c>
 801040a:	2b0b      	cmp	r3, #11
 801040c:	d90f      	bls.n	801042e <_malloc_r+0x7e>
 801040e:	600b      	str	r3, [r1, #0]
 8010410:	50cd      	str	r5, [r1, r3]
 8010412:	18cc      	adds	r4, r1, r3
 8010414:	4630      	mov	r0, r6
 8010416:	f003 faa2 	bl	801395e <__malloc_unlock>
 801041a:	f104 000b 	add.w	r0, r4, #11
 801041e:	1d23      	adds	r3, r4, #4
 8010420:	f020 0007 	bic.w	r0, r0, #7
 8010424:	1ac3      	subs	r3, r0, r3
 8010426:	d0d3      	beq.n	80103d0 <_malloc_r+0x20>
 8010428:	425a      	negs	r2, r3
 801042a:	50e2      	str	r2, [r4, r3]
 801042c:	e7d0      	b.n	80103d0 <_malloc_r+0x20>
 801042e:	428c      	cmp	r4, r1
 8010430:	684b      	ldr	r3, [r1, #4]
 8010432:	bf16      	itet	ne
 8010434:	6063      	strne	r3, [r4, #4]
 8010436:	6013      	streq	r3, [r2, #0]
 8010438:	460c      	movne	r4, r1
 801043a:	e7eb      	b.n	8010414 <_malloc_r+0x64>
 801043c:	460c      	mov	r4, r1
 801043e:	6849      	ldr	r1, [r1, #4]
 8010440:	e7cc      	b.n	80103dc <_malloc_r+0x2c>
 8010442:	1cc4      	adds	r4, r0, #3
 8010444:	f024 0403 	bic.w	r4, r4, #3
 8010448:	42a0      	cmp	r0, r4
 801044a:	d005      	beq.n	8010458 <_malloc_r+0xa8>
 801044c:	1a21      	subs	r1, r4, r0
 801044e:	4630      	mov	r0, r6
 8010450:	f000 fec2 	bl	80111d8 <_sbrk_r>
 8010454:	3001      	adds	r0, #1
 8010456:	d0cf      	beq.n	80103f8 <_malloc_r+0x48>
 8010458:	6025      	str	r5, [r4, #0]
 801045a:	e7db      	b.n	8010414 <_malloc_r+0x64>
 801045c:	20000f28 	.word	0x20000f28
 8010460:	20000f2c 	.word	0x20000f2c

08010464 <__cvt>:
 8010464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010468:	ec55 4b10 	vmov	r4, r5, d0
 801046c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801046e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010472:	2d00      	cmp	r5, #0
 8010474:	460e      	mov	r6, r1
 8010476:	4691      	mov	r9, r2
 8010478:	4619      	mov	r1, r3
 801047a:	bfb8      	it	lt
 801047c:	4622      	movlt	r2, r4
 801047e:	462b      	mov	r3, r5
 8010480:	f027 0720 	bic.w	r7, r7, #32
 8010484:	bfbb      	ittet	lt
 8010486:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801048a:	461d      	movlt	r5, r3
 801048c:	2300      	movge	r3, #0
 801048e:	232d      	movlt	r3, #45	; 0x2d
 8010490:	bfb8      	it	lt
 8010492:	4614      	movlt	r4, r2
 8010494:	2f46      	cmp	r7, #70	; 0x46
 8010496:	700b      	strb	r3, [r1, #0]
 8010498:	d004      	beq.n	80104a4 <__cvt+0x40>
 801049a:	2f45      	cmp	r7, #69	; 0x45
 801049c:	d100      	bne.n	80104a0 <__cvt+0x3c>
 801049e:	3601      	adds	r6, #1
 80104a0:	2102      	movs	r1, #2
 80104a2:	e000      	b.n	80104a6 <__cvt+0x42>
 80104a4:	2103      	movs	r1, #3
 80104a6:	ab03      	add	r3, sp, #12
 80104a8:	9301      	str	r3, [sp, #4]
 80104aa:	ab02      	add	r3, sp, #8
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	4632      	mov	r2, r6
 80104b0:	4653      	mov	r3, sl
 80104b2:	ec45 4b10 	vmov	d0, r4, r5
 80104b6:	f001 ff6f 	bl	8012398 <_dtoa_r>
 80104ba:	2f47      	cmp	r7, #71	; 0x47
 80104bc:	4680      	mov	r8, r0
 80104be:	d102      	bne.n	80104c6 <__cvt+0x62>
 80104c0:	f019 0f01 	tst.w	r9, #1
 80104c4:	d026      	beq.n	8010514 <__cvt+0xb0>
 80104c6:	2f46      	cmp	r7, #70	; 0x46
 80104c8:	eb08 0906 	add.w	r9, r8, r6
 80104cc:	d111      	bne.n	80104f2 <__cvt+0x8e>
 80104ce:	f898 3000 	ldrb.w	r3, [r8]
 80104d2:	2b30      	cmp	r3, #48	; 0x30
 80104d4:	d10a      	bne.n	80104ec <__cvt+0x88>
 80104d6:	2200      	movs	r2, #0
 80104d8:	2300      	movs	r3, #0
 80104da:	4620      	mov	r0, r4
 80104dc:	4629      	mov	r1, r5
 80104de:	f7f0 fb03 	bl	8000ae8 <__aeabi_dcmpeq>
 80104e2:	b918      	cbnz	r0, 80104ec <__cvt+0x88>
 80104e4:	f1c6 0601 	rsb	r6, r6, #1
 80104e8:	f8ca 6000 	str.w	r6, [sl]
 80104ec:	f8da 3000 	ldr.w	r3, [sl]
 80104f0:	4499      	add	r9, r3
 80104f2:	2200      	movs	r2, #0
 80104f4:	2300      	movs	r3, #0
 80104f6:	4620      	mov	r0, r4
 80104f8:	4629      	mov	r1, r5
 80104fa:	f7f0 faf5 	bl	8000ae8 <__aeabi_dcmpeq>
 80104fe:	b938      	cbnz	r0, 8010510 <__cvt+0xac>
 8010500:	2230      	movs	r2, #48	; 0x30
 8010502:	9b03      	ldr	r3, [sp, #12]
 8010504:	454b      	cmp	r3, r9
 8010506:	d205      	bcs.n	8010514 <__cvt+0xb0>
 8010508:	1c59      	adds	r1, r3, #1
 801050a:	9103      	str	r1, [sp, #12]
 801050c:	701a      	strb	r2, [r3, #0]
 801050e:	e7f8      	b.n	8010502 <__cvt+0x9e>
 8010510:	f8cd 900c 	str.w	r9, [sp, #12]
 8010514:	9b03      	ldr	r3, [sp, #12]
 8010516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010518:	eba3 0308 	sub.w	r3, r3, r8
 801051c:	4640      	mov	r0, r8
 801051e:	6013      	str	r3, [r2, #0]
 8010520:	b004      	add	sp, #16
 8010522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010526 <__exponent>:
 8010526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010528:	2900      	cmp	r1, #0
 801052a:	4604      	mov	r4, r0
 801052c:	bfba      	itte	lt
 801052e:	4249      	neglt	r1, r1
 8010530:	232d      	movlt	r3, #45	; 0x2d
 8010532:	232b      	movge	r3, #43	; 0x2b
 8010534:	2909      	cmp	r1, #9
 8010536:	f804 2b02 	strb.w	r2, [r4], #2
 801053a:	7043      	strb	r3, [r0, #1]
 801053c:	dd20      	ble.n	8010580 <__exponent+0x5a>
 801053e:	f10d 0307 	add.w	r3, sp, #7
 8010542:	461f      	mov	r7, r3
 8010544:	260a      	movs	r6, #10
 8010546:	fb91 f5f6 	sdiv	r5, r1, r6
 801054a:	fb06 1115 	mls	r1, r6, r5, r1
 801054e:	3130      	adds	r1, #48	; 0x30
 8010550:	2d09      	cmp	r5, #9
 8010552:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010556:	f103 32ff 	add.w	r2, r3, #4294967295
 801055a:	4629      	mov	r1, r5
 801055c:	dc09      	bgt.n	8010572 <__exponent+0x4c>
 801055e:	3130      	adds	r1, #48	; 0x30
 8010560:	3b02      	subs	r3, #2
 8010562:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010566:	42bb      	cmp	r3, r7
 8010568:	4622      	mov	r2, r4
 801056a:	d304      	bcc.n	8010576 <__exponent+0x50>
 801056c:	1a10      	subs	r0, r2, r0
 801056e:	b003      	add	sp, #12
 8010570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010572:	4613      	mov	r3, r2
 8010574:	e7e7      	b.n	8010546 <__exponent+0x20>
 8010576:	f813 2b01 	ldrb.w	r2, [r3], #1
 801057a:	f804 2b01 	strb.w	r2, [r4], #1
 801057e:	e7f2      	b.n	8010566 <__exponent+0x40>
 8010580:	2330      	movs	r3, #48	; 0x30
 8010582:	4419      	add	r1, r3
 8010584:	7083      	strb	r3, [r0, #2]
 8010586:	1d02      	adds	r2, r0, #4
 8010588:	70c1      	strb	r1, [r0, #3]
 801058a:	e7ef      	b.n	801056c <__exponent+0x46>

0801058c <_printf_float>:
 801058c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010590:	b08d      	sub	sp, #52	; 0x34
 8010592:	460c      	mov	r4, r1
 8010594:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010598:	4616      	mov	r6, r2
 801059a:	461f      	mov	r7, r3
 801059c:	4605      	mov	r5, r0
 801059e:	f003 f959 	bl	8013854 <_localeconv_r>
 80105a2:	6803      	ldr	r3, [r0, #0]
 80105a4:	9304      	str	r3, [sp, #16]
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7ef fe22 	bl	80001f0 <strlen>
 80105ac:	2300      	movs	r3, #0
 80105ae:	930a      	str	r3, [sp, #40]	; 0x28
 80105b0:	f8d8 3000 	ldr.w	r3, [r8]
 80105b4:	9005      	str	r0, [sp, #20]
 80105b6:	3307      	adds	r3, #7
 80105b8:	f023 0307 	bic.w	r3, r3, #7
 80105bc:	f103 0208 	add.w	r2, r3, #8
 80105c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80105c4:	f8d4 b000 	ldr.w	fp, [r4]
 80105c8:	f8c8 2000 	str.w	r2, [r8]
 80105cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80105d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80105d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80105dc:	9307      	str	r3, [sp, #28]
 80105de:	f8cd 8018 	str.w	r8, [sp, #24]
 80105e2:	f04f 32ff 	mov.w	r2, #4294967295
 80105e6:	4ba7      	ldr	r3, [pc, #668]	; (8010884 <_printf_float+0x2f8>)
 80105e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105ec:	f7f0 faae 	bl	8000b4c <__aeabi_dcmpun>
 80105f0:	bb70      	cbnz	r0, 8010650 <_printf_float+0xc4>
 80105f2:	f04f 32ff 	mov.w	r2, #4294967295
 80105f6:	4ba3      	ldr	r3, [pc, #652]	; (8010884 <_printf_float+0x2f8>)
 80105f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105fc:	f7f0 fa88 	bl	8000b10 <__aeabi_dcmple>
 8010600:	bb30      	cbnz	r0, 8010650 <_printf_float+0xc4>
 8010602:	2200      	movs	r2, #0
 8010604:	2300      	movs	r3, #0
 8010606:	4640      	mov	r0, r8
 8010608:	4649      	mov	r1, r9
 801060a:	f7f0 fa77 	bl	8000afc <__aeabi_dcmplt>
 801060e:	b110      	cbz	r0, 8010616 <_printf_float+0x8a>
 8010610:	232d      	movs	r3, #45	; 0x2d
 8010612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010616:	4a9c      	ldr	r2, [pc, #624]	; (8010888 <_printf_float+0x2fc>)
 8010618:	4b9c      	ldr	r3, [pc, #624]	; (801088c <_printf_float+0x300>)
 801061a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801061e:	bf8c      	ite	hi
 8010620:	4690      	movhi	r8, r2
 8010622:	4698      	movls	r8, r3
 8010624:	2303      	movs	r3, #3
 8010626:	f02b 0204 	bic.w	r2, fp, #4
 801062a:	6123      	str	r3, [r4, #16]
 801062c:	6022      	str	r2, [r4, #0]
 801062e:	f04f 0900 	mov.w	r9, #0
 8010632:	9700      	str	r7, [sp, #0]
 8010634:	4633      	mov	r3, r6
 8010636:	aa0b      	add	r2, sp, #44	; 0x2c
 8010638:	4621      	mov	r1, r4
 801063a:	4628      	mov	r0, r5
 801063c:	f000 f9e6 	bl	8010a0c <_printf_common>
 8010640:	3001      	adds	r0, #1
 8010642:	f040 808d 	bne.w	8010760 <_printf_float+0x1d4>
 8010646:	f04f 30ff 	mov.w	r0, #4294967295
 801064a:	b00d      	add	sp, #52	; 0x34
 801064c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010650:	4642      	mov	r2, r8
 8010652:	464b      	mov	r3, r9
 8010654:	4640      	mov	r0, r8
 8010656:	4649      	mov	r1, r9
 8010658:	f7f0 fa78 	bl	8000b4c <__aeabi_dcmpun>
 801065c:	b110      	cbz	r0, 8010664 <_printf_float+0xd8>
 801065e:	4a8c      	ldr	r2, [pc, #560]	; (8010890 <_printf_float+0x304>)
 8010660:	4b8c      	ldr	r3, [pc, #560]	; (8010894 <_printf_float+0x308>)
 8010662:	e7da      	b.n	801061a <_printf_float+0x8e>
 8010664:	6861      	ldr	r1, [r4, #4]
 8010666:	1c4b      	adds	r3, r1, #1
 8010668:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801066c:	a80a      	add	r0, sp, #40	; 0x28
 801066e:	d13e      	bne.n	80106ee <_printf_float+0x162>
 8010670:	2306      	movs	r3, #6
 8010672:	6063      	str	r3, [r4, #4]
 8010674:	2300      	movs	r3, #0
 8010676:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801067a:	ab09      	add	r3, sp, #36	; 0x24
 801067c:	9300      	str	r3, [sp, #0]
 801067e:	ec49 8b10 	vmov	d0, r8, r9
 8010682:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010686:	6022      	str	r2, [r4, #0]
 8010688:	f8cd a004 	str.w	sl, [sp, #4]
 801068c:	6861      	ldr	r1, [r4, #4]
 801068e:	4628      	mov	r0, r5
 8010690:	f7ff fee8 	bl	8010464 <__cvt>
 8010694:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010698:	2b47      	cmp	r3, #71	; 0x47
 801069a:	4680      	mov	r8, r0
 801069c:	d109      	bne.n	80106b2 <_printf_float+0x126>
 801069e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106a0:	1cd8      	adds	r0, r3, #3
 80106a2:	db02      	blt.n	80106aa <_printf_float+0x11e>
 80106a4:	6862      	ldr	r2, [r4, #4]
 80106a6:	4293      	cmp	r3, r2
 80106a8:	dd47      	ble.n	801073a <_printf_float+0x1ae>
 80106aa:	f1aa 0a02 	sub.w	sl, sl, #2
 80106ae:	fa5f fa8a 	uxtb.w	sl, sl
 80106b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80106b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106b8:	d824      	bhi.n	8010704 <_printf_float+0x178>
 80106ba:	3901      	subs	r1, #1
 80106bc:	4652      	mov	r2, sl
 80106be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80106c2:	9109      	str	r1, [sp, #36]	; 0x24
 80106c4:	f7ff ff2f 	bl	8010526 <__exponent>
 80106c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106ca:	1813      	adds	r3, r2, r0
 80106cc:	2a01      	cmp	r2, #1
 80106ce:	4681      	mov	r9, r0
 80106d0:	6123      	str	r3, [r4, #16]
 80106d2:	dc02      	bgt.n	80106da <_printf_float+0x14e>
 80106d4:	6822      	ldr	r2, [r4, #0]
 80106d6:	07d1      	lsls	r1, r2, #31
 80106d8:	d501      	bpl.n	80106de <_printf_float+0x152>
 80106da:	3301      	adds	r3, #1
 80106dc:	6123      	str	r3, [r4, #16]
 80106de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d0a5      	beq.n	8010632 <_printf_float+0xa6>
 80106e6:	232d      	movs	r3, #45	; 0x2d
 80106e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106ec:	e7a1      	b.n	8010632 <_printf_float+0xa6>
 80106ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80106f2:	f000 8177 	beq.w	80109e4 <_printf_float+0x458>
 80106f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80106fa:	d1bb      	bne.n	8010674 <_printf_float+0xe8>
 80106fc:	2900      	cmp	r1, #0
 80106fe:	d1b9      	bne.n	8010674 <_printf_float+0xe8>
 8010700:	2301      	movs	r3, #1
 8010702:	e7b6      	b.n	8010672 <_printf_float+0xe6>
 8010704:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010708:	d119      	bne.n	801073e <_printf_float+0x1b2>
 801070a:	2900      	cmp	r1, #0
 801070c:	6863      	ldr	r3, [r4, #4]
 801070e:	dd0c      	ble.n	801072a <_printf_float+0x19e>
 8010710:	6121      	str	r1, [r4, #16]
 8010712:	b913      	cbnz	r3, 801071a <_printf_float+0x18e>
 8010714:	6822      	ldr	r2, [r4, #0]
 8010716:	07d2      	lsls	r2, r2, #31
 8010718:	d502      	bpl.n	8010720 <_printf_float+0x194>
 801071a:	3301      	adds	r3, #1
 801071c:	440b      	add	r3, r1
 801071e:	6123      	str	r3, [r4, #16]
 8010720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010722:	65a3      	str	r3, [r4, #88]	; 0x58
 8010724:	f04f 0900 	mov.w	r9, #0
 8010728:	e7d9      	b.n	80106de <_printf_float+0x152>
 801072a:	b913      	cbnz	r3, 8010732 <_printf_float+0x1a6>
 801072c:	6822      	ldr	r2, [r4, #0]
 801072e:	07d0      	lsls	r0, r2, #31
 8010730:	d501      	bpl.n	8010736 <_printf_float+0x1aa>
 8010732:	3302      	adds	r3, #2
 8010734:	e7f3      	b.n	801071e <_printf_float+0x192>
 8010736:	2301      	movs	r3, #1
 8010738:	e7f1      	b.n	801071e <_printf_float+0x192>
 801073a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801073e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010742:	4293      	cmp	r3, r2
 8010744:	db05      	blt.n	8010752 <_printf_float+0x1c6>
 8010746:	6822      	ldr	r2, [r4, #0]
 8010748:	6123      	str	r3, [r4, #16]
 801074a:	07d1      	lsls	r1, r2, #31
 801074c:	d5e8      	bpl.n	8010720 <_printf_float+0x194>
 801074e:	3301      	adds	r3, #1
 8010750:	e7e5      	b.n	801071e <_printf_float+0x192>
 8010752:	2b00      	cmp	r3, #0
 8010754:	bfd4      	ite	le
 8010756:	f1c3 0302 	rsble	r3, r3, #2
 801075a:	2301      	movgt	r3, #1
 801075c:	4413      	add	r3, r2
 801075e:	e7de      	b.n	801071e <_printf_float+0x192>
 8010760:	6823      	ldr	r3, [r4, #0]
 8010762:	055a      	lsls	r2, r3, #21
 8010764:	d407      	bmi.n	8010776 <_printf_float+0x1ea>
 8010766:	6923      	ldr	r3, [r4, #16]
 8010768:	4642      	mov	r2, r8
 801076a:	4631      	mov	r1, r6
 801076c:	4628      	mov	r0, r5
 801076e:	47b8      	blx	r7
 8010770:	3001      	adds	r0, #1
 8010772:	d12b      	bne.n	80107cc <_printf_float+0x240>
 8010774:	e767      	b.n	8010646 <_printf_float+0xba>
 8010776:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801077a:	f240 80dc 	bls.w	8010936 <_printf_float+0x3aa>
 801077e:	2200      	movs	r2, #0
 8010780:	2300      	movs	r3, #0
 8010782:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010786:	f7f0 f9af 	bl	8000ae8 <__aeabi_dcmpeq>
 801078a:	2800      	cmp	r0, #0
 801078c:	d033      	beq.n	80107f6 <_printf_float+0x26a>
 801078e:	2301      	movs	r3, #1
 8010790:	4a41      	ldr	r2, [pc, #260]	; (8010898 <_printf_float+0x30c>)
 8010792:	4631      	mov	r1, r6
 8010794:	4628      	mov	r0, r5
 8010796:	47b8      	blx	r7
 8010798:	3001      	adds	r0, #1
 801079a:	f43f af54 	beq.w	8010646 <_printf_float+0xba>
 801079e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107a2:	429a      	cmp	r2, r3
 80107a4:	db02      	blt.n	80107ac <_printf_float+0x220>
 80107a6:	6823      	ldr	r3, [r4, #0]
 80107a8:	07d8      	lsls	r0, r3, #31
 80107aa:	d50f      	bpl.n	80107cc <_printf_float+0x240>
 80107ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107b0:	4631      	mov	r1, r6
 80107b2:	4628      	mov	r0, r5
 80107b4:	47b8      	blx	r7
 80107b6:	3001      	adds	r0, #1
 80107b8:	f43f af45 	beq.w	8010646 <_printf_float+0xba>
 80107bc:	f04f 0800 	mov.w	r8, #0
 80107c0:	f104 091a 	add.w	r9, r4, #26
 80107c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107c6:	3b01      	subs	r3, #1
 80107c8:	4543      	cmp	r3, r8
 80107ca:	dc09      	bgt.n	80107e0 <_printf_float+0x254>
 80107cc:	6823      	ldr	r3, [r4, #0]
 80107ce:	079b      	lsls	r3, r3, #30
 80107d0:	f100 8103 	bmi.w	80109da <_printf_float+0x44e>
 80107d4:	68e0      	ldr	r0, [r4, #12]
 80107d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107d8:	4298      	cmp	r0, r3
 80107da:	bfb8      	it	lt
 80107dc:	4618      	movlt	r0, r3
 80107de:	e734      	b.n	801064a <_printf_float+0xbe>
 80107e0:	2301      	movs	r3, #1
 80107e2:	464a      	mov	r2, r9
 80107e4:	4631      	mov	r1, r6
 80107e6:	4628      	mov	r0, r5
 80107e8:	47b8      	blx	r7
 80107ea:	3001      	adds	r0, #1
 80107ec:	f43f af2b 	beq.w	8010646 <_printf_float+0xba>
 80107f0:	f108 0801 	add.w	r8, r8, #1
 80107f4:	e7e6      	b.n	80107c4 <_printf_float+0x238>
 80107f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	dc2b      	bgt.n	8010854 <_printf_float+0x2c8>
 80107fc:	2301      	movs	r3, #1
 80107fe:	4a26      	ldr	r2, [pc, #152]	; (8010898 <_printf_float+0x30c>)
 8010800:	4631      	mov	r1, r6
 8010802:	4628      	mov	r0, r5
 8010804:	47b8      	blx	r7
 8010806:	3001      	adds	r0, #1
 8010808:	f43f af1d 	beq.w	8010646 <_printf_float+0xba>
 801080c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801080e:	b923      	cbnz	r3, 801081a <_printf_float+0x28e>
 8010810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010812:	b913      	cbnz	r3, 801081a <_printf_float+0x28e>
 8010814:	6823      	ldr	r3, [r4, #0]
 8010816:	07d9      	lsls	r1, r3, #31
 8010818:	d5d8      	bpl.n	80107cc <_printf_float+0x240>
 801081a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801081e:	4631      	mov	r1, r6
 8010820:	4628      	mov	r0, r5
 8010822:	47b8      	blx	r7
 8010824:	3001      	adds	r0, #1
 8010826:	f43f af0e 	beq.w	8010646 <_printf_float+0xba>
 801082a:	f04f 0900 	mov.w	r9, #0
 801082e:	f104 0a1a 	add.w	sl, r4, #26
 8010832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010834:	425b      	negs	r3, r3
 8010836:	454b      	cmp	r3, r9
 8010838:	dc01      	bgt.n	801083e <_printf_float+0x2b2>
 801083a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801083c:	e794      	b.n	8010768 <_printf_float+0x1dc>
 801083e:	2301      	movs	r3, #1
 8010840:	4652      	mov	r2, sl
 8010842:	4631      	mov	r1, r6
 8010844:	4628      	mov	r0, r5
 8010846:	47b8      	blx	r7
 8010848:	3001      	adds	r0, #1
 801084a:	f43f aefc 	beq.w	8010646 <_printf_float+0xba>
 801084e:	f109 0901 	add.w	r9, r9, #1
 8010852:	e7ee      	b.n	8010832 <_printf_float+0x2a6>
 8010854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010858:	429a      	cmp	r2, r3
 801085a:	bfa8      	it	ge
 801085c:	461a      	movge	r2, r3
 801085e:	2a00      	cmp	r2, #0
 8010860:	4691      	mov	r9, r2
 8010862:	dd07      	ble.n	8010874 <_printf_float+0x2e8>
 8010864:	4613      	mov	r3, r2
 8010866:	4631      	mov	r1, r6
 8010868:	4642      	mov	r2, r8
 801086a:	4628      	mov	r0, r5
 801086c:	47b8      	blx	r7
 801086e:	3001      	adds	r0, #1
 8010870:	f43f aee9 	beq.w	8010646 <_printf_float+0xba>
 8010874:	f104 031a 	add.w	r3, r4, #26
 8010878:	f04f 0b00 	mov.w	fp, #0
 801087c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010880:	9306      	str	r3, [sp, #24]
 8010882:	e015      	b.n	80108b0 <_printf_float+0x324>
 8010884:	7fefffff 	.word	0x7fefffff
 8010888:	08014b44 	.word	0x08014b44
 801088c:	08014b40 	.word	0x08014b40
 8010890:	08014b4c 	.word	0x08014b4c
 8010894:	08014b48 	.word	0x08014b48
 8010898:	08014b50 	.word	0x08014b50
 801089c:	2301      	movs	r3, #1
 801089e:	9a06      	ldr	r2, [sp, #24]
 80108a0:	4631      	mov	r1, r6
 80108a2:	4628      	mov	r0, r5
 80108a4:	47b8      	blx	r7
 80108a6:	3001      	adds	r0, #1
 80108a8:	f43f aecd 	beq.w	8010646 <_printf_float+0xba>
 80108ac:	f10b 0b01 	add.w	fp, fp, #1
 80108b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80108b4:	ebaa 0309 	sub.w	r3, sl, r9
 80108b8:	455b      	cmp	r3, fp
 80108ba:	dcef      	bgt.n	801089c <_printf_float+0x310>
 80108bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80108c0:	429a      	cmp	r2, r3
 80108c2:	44d0      	add	r8, sl
 80108c4:	db15      	blt.n	80108f2 <_printf_float+0x366>
 80108c6:	6823      	ldr	r3, [r4, #0]
 80108c8:	07da      	lsls	r2, r3, #31
 80108ca:	d412      	bmi.n	80108f2 <_printf_float+0x366>
 80108cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108d0:	eba3 020a 	sub.w	r2, r3, sl
 80108d4:	eba3 0a01 	sub.w	sl, r3, r1
 80108d8:	4592      	cmp	sl, r2
 80108da:	bfa8      	it	ge
 80108dc:	4692      	movge	sl, r2
 80108de:	f1ba 0f00 	cmp.w	sl, #0
 80108e2:	dc0e      	bgt.n	8010902 <_printf_float+0x376>
 80108e4:	f04f 0800 	mov.w	r8, #0
 80108e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108ec:	f104 091a 	add.w	r9, r4, #26
 80108f0:	e019      	b.n	8010926 <_printf_float+0x39a>
 80108f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108f6:	4631      	mov	r1, r6
 80108f8:	4628      	mov	r0, r5
 80108fa:	47b8      	blx	r7
 80108fc:	3001      	adds	r0, #1
 80108fe:	d1e5      	bne.n	80108cc <_printf_float+0x340>
 8010900:	e6a1      	b.n	8010646 <_printf_float+0xba>
 8010902:	4653      	mov	r3, sl
 8010904:	4642      	mov	r2, r8
 8010906:	4631      	mov	r1, r6
 8010908:	4628      	mov	r0, r5
 801090a:	47b8      	blx	r7
 801090c:	3001      	adds	r0, #1
 801090e:	d1e9      	bne.n	80108e4 <_printf_float+0x358>
 8010910:	e699      	b.n	8010646 <_printf_float+0xba>
 8010912:	2301      	movs	r3, #1
 8010914:	464a      	mov	r2, r9
 8010916:	4631      	mov	r1, r6
 8010918:	4628      	mov	r0, r5
 801091a:	47b8      	blx	r7
 801091c:	3001      	adds	r0, #1
 801091e:	f43f ae92 	beq.w	8010646 <_printf_float+0xba>
 8010922:	f108 0801 	add.w	r8, r8, #1
 8010926:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801092a:	1a9b      	subs	r3, r3, r2
 801092c:	eba3 030a 	sub.w	r3, r3, sl
 8010930:	4543      	cmp	r3, r8
 8010932:	dcee      	bgt.n	8010912 <_printf_float+0x386>
 8010934:	e74a      	b.n	80107cc <_printf_float+0x240>
 8010936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010938:	2a01      	cmp	r2, #1
 801093a:	dc01      	bgt.n	8010940 <_printf_float+0x3b4>
 801093c:	07db      	lsls	r3, r3, #31
 801093e:	d53a      	bpl.n	80109b6 <_printf_float+0x42a>
 8010940:	2301      	movs	r3, #1
 8010942:	4642      	mov	r2, r8
 8010944:	4631      	mov	r1, r6
 8010946:	4628      	mov	r0, r5
 8010948:	47b8      	blx	r7
 801094a:	3001      	adds	r0, #1
 801094c:	f43f ae7b 	beq.w	8010646 <_printf_float+0xba>
 8010950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010954:	4631      	mov	r1, r6
 8010956:	4628      	mov	r0, r5
 8010958:	47b8      	blx	r7
 801095a:	3001      	adds	r0, #1
 801095c:	f108 0801 	add.w	r8, r8, #1
 8010960:	f43f ae71 	beq.w	8010646 <_printf_float+0xba>
 8010964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010966:	2200      	movs	r2, #0
 8010968:	f103 3aff 	add.w	sl, r3, #4294967295
 801096c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010970:	2300      	movs	r3, #0
 8010972:	f7f0 f8b9 	bl	8000ae8 <__aeabi_dcmpeq>
 8010976:	b9c8      	cbnz	r0, 80109ac <_printf_float+0x420>
 8010978:	4653      	mov	r3, sl
 801097a:	4642      	mov	r2, r8
 801097c:	4631      	mov	r1, r6
 801097e:	4628      	mov	r0, r5
 8010980:	47b8      	blx	r7
 8010982:	3001      	adds	r0, #1
 8010984:	d10e      	bne.n	80109a4 <_printf_float+0x418>
 8010986:	e65e      	b.n	8010646 <_printf_float+0xba>
 8010988:	2301      	movs	r3, #1
 801098a:	4652      	mov	r2, sl
 801098c:	4631      	mov	r1, r6
 801098e:	4628      	mov	r0, r5
 8010990:	47b8      	blx	r7
 8010992:	3001      	adds	r0, #1
 8010994:	f43f ae57 	beq.w	8010646 <_printf_float+0xba>
 8010998:	f108 0801 	add.w	r8, r8, #1
 801099c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801099e:	3b01      	subs	r3, #1
 80109a0:	4543      	cmp	r3, r8
 80109a2:	dcf1      	bgt.n	8010988 <_printf_float+0x3fc>
 80109a4:	464b      	mov	r3, r9
 80109a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80109aa:	e6de      	b.n	801076a <_printf_float+0x1de>
 80109ac:	f04f 0800 	mov.w	r8, #0
 80109b0:	f104 0a1a 	add.w	sl, r4, #26
 80109b4:	e7f2      	b.n	801099c <_printf_float+0x410>
 80109b6:	2301      	movs	r3, #1
 80109b8:	e7df      	b.n	801097a <_printf_float+0x3ee>
 80109ba:	2301      	movs	r3, #1
 80109bc:	464a      	mov	r2, r9
 80109be:	4631      	mov	r1, r6
 80109c0:	4628      	mov	r0, r5
 80109c2:	47b8      	blx	r7
 80109c4:	3001      	adds	r0, #1
 80109c6:	f43f ae3e 	beq.w	8010646 <_printf_float+0xba>
 80109ca:	f108 0801 	add.w	r8, r8, #1
 80109ce:	68e3      	ldr	r3, [r4, #12]
 80109d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80109d2:	1a9b      	subs	r3, r3, r2
 80109d4:	4543      	cmp	r3, r8
 80109d6:	dcf0      	bgt.n	80109ba <_printf_float+0x42e>
 80109d8:	e6fc      	b.n	80107d4 <_printf_float+0x248>
 80109da:	f04f 0800 	mov.w	r8, #0
 80109de:	f104 0919 	add.w	r9, r4, #25
 80109e2:	e7f4      	b.n	80109ce <_printf_float+0x442>
 80109e4:	2900      	cmp	r1, #0
 80109e6:	f43f ae8b 	beq.w	8010700 <_printf_float+0x174>
 80109ea:	2300      	movs	r3, #0
 80109ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80109f0:	ab09      	add	r3, sp, #36	; 0x24
 80109f2:	9300      	str	r3, [sp, #0]
 80109f4:	ec49 8b10 	vmov	d0, r8, r9
 80109f8:	6022      	str	r2, [r4, #0]
 80109fa:	f8cd a004 	str.w	sl, [sp, #4]
 80109fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010a02:	4628      	mov	r0, r5
 8010a04:	f7ff fd2e 	bl	8010464 <__cvt>
 8010a08:	4680      	mov	r8, r0
 8010a0a:	e648      	b.n	801069e <_printf_float+0x112>

08010a0c <_printf_common>:
 8010a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a10:	4691      	mov	r9, r2
 8010a12:	461f      	mov	r7, r3
 8010a14:	688a      	ldr	r2, [r1, #8]
 8010a16:	690b      	ldr	r3, [r1, #16]
 8010a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	bfb8      	it	lt
 8010a20:	4613      	movlt	r3, r2
 8010a22:	f8c9 3000 	str.w	r3, [r9]
 8010a26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a2a:	4606      	mov	r6, r0
 8010a2c:	460c      	mov	r4, r1
 8010a2e:	b112      	cbz	r2, 8010a36 <_printf_common+0x2a>
 8010a30:	3301      	adds	r3, #1
 8010a32:	f8c9 3000 	str.w	r3, [r9]
 8010a36:	6823      	ldr	r3, [r4, #0]
 8010a38:	0699      	lsls	r1, r3, #26
 8010a3a:	bf42      	ittt	mi
 8010a3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010a40:	3302      	addmi	r3, #2
 8010a42:	f8c9 3000 	strmi.w	r3, [r9]
 8010a46:	6825      	ldr	r5, [r4, #0]
 8010a48:	f015 0506 	ands.w	r5, r5, #6
 8010a4c:	d107      	bne.n	8010a5e <_printf_common+0x52>
 8010a4e:	f104 0a19 	add.w	sl, r4, #25
 8010a52:	68e3      	ldr	r3, [r4, #12]
 8010a54:	f8d9 2000 	ldr.w	r2, [r9]
 8010a58:	1a9b      	subs	r3, r3, r2
 8010a5a:	42ab      	cmp	r3, r5
 8010a5c:	dc28      	bgt.n	8010ab0 <_printf_common+0xa4>
 8010a5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010a62:	6822      	ldr	r2, [r4, #0]
 8010a64:	3300      	adds	r3, #0
 8010a66:	bf18      	it	ne
 8010a68:	2301      	movne	r3, #1
 8010a6a:	0692      	lsls	r2, r2, #26
 8010a6c:	d42d      	bmi.n	8010aca <_printf_common+0xbe>
 8010a6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a72:	4639      	mov	r1, r7
 8010a74:	4630      	mov	r0, r6
 8010a76:	47c0      	blx	r8
 8010a78:	3001      	adds	r0, #1
 8010a7a:	d020      	beq.n	8010abe <_printf_common+0xb2>
 8010a7c:	6823      	ldr	r3, [r4, #0]
 8010a7e:	68e5      	ldr	r5, [r4, #12]
 8010a80:	f8d9 2000 	ldr.w	r2, [r9]
 8010a84:	f003 0306 	and.w	r3, r3, #6
 8010a88:	2b04      	cmp	r3, #4
 8010a8a:	bf08      	it	eq
 8010a8c:	1aad      	subeq	r5, r5, r2
 8010a8e:	68a3      	ldr	r3, [r4, #8]
 8010a90:	6922      	ldr	r2, [r4, #16]
 8010a92:	bf0c      	ite	eq
 8010a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a98:	2500      	movne	r5, #0
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	bfc4      	itt	gt
 8010a9e:	1a9b      	subgt	r3, r3, r2
 8010aa0:	18ed      	addgt	r5, r5, r3
 8010aa2:	f04f 0900 	mov.w	r9, #0
 8010aa6:	341a      	adds	r4, #26
 8010aa8:	454d      	cmp	r5, r9
 8010aaa:	d11a      	bne.n	8010ae2 <_printf_common+0xd6>
 8010aac:	2000      	movs	r0, #0
 8010aae:	e008      	b.n	8010ac2 <_printf_common+0xb6>
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	4652      	mov	r2, sl
 8010ab4:	4639      	mov	r1, r7
 8010ab6:	4630      	mov	r0, r6
 8010ab8:	47c0      	blx	r8
 8010aba:	3001      	adds	r0, #1
 8010abc:	d103      	bne.n	8010ac6 <_printf_common+0xba>
 8010abe:	f04f 30ff 	mov.w	r0, #4294967295
 8010ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ac6:	3501      	adds	r5, #1
 8010ac8:	e7c3      	b.n	8010a52 <_printf_common+0x46>
 8010aca:	18e1      	adds	r1, r4, r3
 8010acc:	1c5a      	adds	r2, r3, #1
 8010ace:	2030      	movs	r0, #48	; 0x30
 8010ad0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ad4:	4422      	add	r2, r4
 8010ad6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ada:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ade:	3302      	adds	r3, #2
 8010ae0:	e7c5      	b.n	8010a6e <_printf_common+0x62>
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	4622      	mov	r2, r4
 8010ae6:	4639      	mov	r1, r7
 8010ae8:	4630      	mov	r0, r6
 8010aea:	47c0      	blx	r8
 8010aec:	3001      	adds	r0, #1
 8010aee:	d0e6      	beq.n	8010abe <_printf_common+0xb2>
 8010af0:	f109 0901 	add.w	r9, r9, #1
 8010af4:	e7d8      	b.n	8010aa8 <_printf_common+0x9c>
	...

08010af8 <_printf_i>:
 8010af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010afc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010b00:	460c      	mov	r4, r1
 8010b02:	7e09      	ldrb	r1, [r1, #24]
 8010b04:	b085      	sub	sp, #20
 8010b06:	296e      	cmp	r1, #110	; 0x6e
 8010b08:	4617      	mov	r7, r2
 8010b0a:	4606      	mov	r6, r0
 8010b0c:	4698      	mov	r8, r3
 8010b0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b10:	f000 80b3 	beq.w	8010c7a <_printf_i+0x182>
 8010b14:	d822      	bhi.n	8010b5c <_printf_i+0x64>
 8010b16:	2963      	cmp	r1, #99	; 0x63
 8010b18:	d036      	beq.n	8010b88 <_printf_i+0x90>
 8010b1a:	d80a      	bhi.n	8010b32 <_printf_i+0x3a>
 8010b1c:	2900      	cmp	r1, #0
 8010b1e:	f000 80b9 	beq.w	8010c94 <_printf_i+0x19c>
 8010b22:	2958      	cmp	r1, #88	; 0x58
 8010b24:	f000 8083 	beq.w	8010c2e <_printf_i+0x136>
 8010b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010b30:	e032      	b.n	8010b98 <_printf_i+0xa0>
 8010b32:	2964      	cmp	r1, #100	; 0x64
 8010b34:	d001      	beq.n	8010b3a <_printf_i+0x42>
 8010b36:	2969      	cmp	r1, #105	; 0x69
 8010b38:	d1f6      	bne.n	8010b28 <_printf_i+0x30>
 8010b3a:	6820      	ldr	r0, [r4, #0]
 8010b3c:	6813      	ldr	r3, [r2, #0]
 8010b3e:	0605      	lsls	r5, r0, #24
 8010b40:	f103 0104 	add.w	r1, r3, #4
 8010b44:	d52a      	bpl.n	8010b9c <_printf_i+0xa4>
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	6011      	str	r1, [r2, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	da03      	bge.n	8010b56 <_printf_i+0x5e>
 8010b4e:	222d      	movs	r2, #45	; 0x2d
 8010b50:	425b      	negs	r3, r3
 8010b52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010b56:	486f      	ldr	r0, [pc, #444]	; (8010d14 <_printf_i+0x21c>)
 8010b58:	220a      	movs	r2, #10
 8010b5a:	e039      	b.n	8010bd0 <_printf_i+0xd8>
 8010b5c:	2973      	cmp	r1, #115	; 0x73
 8010b5e:	f000 809d 	beq.w	8010c9c <_printf_i+0x1a4>
 8010b62:	d808      	bhi.n	8010b76 <_printf_i+0x7e>
 8010b64:	296f      	cmp	r1, #111	; 0x6f
 8010b66:	d020      	beq.n	8010baa <_printf_i+0xb2>
 8010b68:	2970      	cmp	r1, #112	; 0x70
 8010b6a:	d1dd      	bne.n	8010b28 <_printf_i+0x30>
 8010b6c:	6823      	ldr	r3, [r4, #0]
 8010b6e:	f043 0320 	orr.w	r3, r3, #32
 8010b72:	6023      	str	r3, [r4, #0]
 8010b74:	e003      	b.n	8010b7e <_printf_i+0x86>
 8010b76:	2975      	cmp	r1, #117	; 0x75
 8010b78:	d017      	beq.n	8010baa <_printf_i+0xb2>
 8010b7a:	2978      	cmp	r1, #120	; 0x78
 8010b7c:	d1d4      	bne.n	8010b28 <_printf_i+0x30>
 8010b7e:	2378      	movs	r3, #120	; 0x78
 8010b80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b84:	4864      	ldr	r0, [pc, #400]	; (8010d18 <_printf_i+0x220>)
 8010b86:	e055      	b.n	8010c34 <_printf_i+0x13c>
 8010b88:	6813      	ldr	r3, [r2, #0]
 8010b8a:	1d19      	adds	r1, r3, #4
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	6011      	str	r1, [r2, #0]
 8010b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e08c      	b.n	8010cb6 <_printf_i+0x1be>
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	6011      	str	r1, [r2, #0]
 8010ba0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010ba4:	bf18      	it	ne
 8010ba6:	b21b      	sxthne	r3, r3
 8010ba8:	e7cf      	b.n	8010b4a <_printf_i+0x52>
 8010baa:	6813      	ldr	r3, [r2, #0]
 8010bac:	6825      	ldr	r5, [r4, #0]
 8010bae:	1d18      	adds	r0, r3, #4
 8010bb0:	6010      	str	r0, [r2, #0]
 8010bb2:	0628      	lsls	r0, r5, #24
 8010bb4:	d501      	bpl.n	8010bba <_printf_i+0xc2>
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	e002      	b.n	8010bc0 <_printf_i+0xc8>
 8010bba:	0668      	lsls	r0, r5, #25
 8010bbc:	d5fb      	bpl.n	8010bb6 <_printf_i+0xbe>
 8010bbe:	881b      	ldrh	r3, [r3, #0]
 8010bc0:	4854      	ldr	r0, [pc, #336]	; (8010d14 <_printf_i+0x21c>)
 8010bc2:	296f      	cmp	r1, #111	; 0x6f
 8010bc4:	bf14      	ite	ne
 8010bc6:	220a      	movne	r2, #10
 8010bc8:	2208      	moveq	r2, #8
 8010bca:	2100      	movs	r1, #0
 8010bcc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010bd0:	6865      	ldr	r5, [r4, #4]
 8010bd2:	60a5      	str	r5, [r4, #8]
 8010bd4:	2d00      	cmp	r5, #0
 8010bd6:	f2c0 8095 	blt.w	8010d04 <_printf_i+0x20c>
 8010bda:	6821      	ldr	r1, [r4, #0]
 8010bdc:	f021 0104 	bic.w	r1, r1, #4
 8010be0:	6021      	str	r1, [r4, #0]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d13d      	bne.n	8010c62 <_printf_i+0x16a>
 8010be6:	2d00      	cmp	r5, #0
 8010be8:	f040 808e 	bne.w	8010d08 <_printf_i+0x210>
 8010bec:	4665      	mov	r5, ip
 8010bee:	2a08      	cmp	r2, #8
 8010bf0:	d10b      	bne.n	8010c0a <_printf_i+0x112>
 8010bf2:	6823      	ldr	r3, [r4, #0]
 8010bf4:	07db      	lsls	r3, r3, #31
 8010bf6:	d508      	bpl.n	8010c0a <_printf_i+0x112>
 8010bf8:	6923      	ldr	r3, [r4, #16]
 8010bfa:	6862      	ldr	r2, [r4, #4]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	bfde      	ittt	le
 8010c00:	2330      	movle	r3, #48	; 0x30
 8010c02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010c06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010c0a:	ebac 0305 	sub.w	r3, ip, r5
 8010c0e:	6123      	str	r3, [r4, #16]
 8010c10:	f8cd 8000 	str.w	r8, [sp]
 8010c14:	463b      	mov	r3, r7
 8010c16:	aa03      	add	r2, sp, #12
 8010c18:	4621      	mov	r1, r4
 8010c1a:	4630      	mov	r0, r6
 8010c1c:	f7ff fef6 	bl	8010a0c <_printf_common>
 8010c20:	3001      	adds	r0, #1
 8010c22:	d14d      	bne.n	8010cc0 <_printf_i+0x1c8>
 8010c24:	f04f 30ff 	mov.w	r0, #4294967295
 8010c28:	b005      	add	sp, #20
 8010c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c2e:	4839      	ldr	r0, [pc, #228]	; (8010d14 <_printf_i+0x21c>)
 8010c30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010c34:	6813      	ldr	r3, [r2, #0]
 8010c36:	6821      	ldr	r1, [r4, #0]
 8010c38:	1d1d      	adds	r5, r3, #4
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	6015      	str	r5, [r2, #0]
 8010c3e:	060a      	lsls	r2, r1, #24
 8010c40:	d50b      	bpl.n	8010c5a <_printf_i+0x162>
 8010c42:	07ca      	lsls	r2, r1, #31
 8010c44:	bf44      	itt	mi
 8010c46:	f041 0120 	orrmi.w	r1, r1, #32
 8010c4a:	6021      	strmi	r1, [r4, #0]
 8010c4c:	b91b      	cbnz	r3, 8010c56 <_printf_i+0x15e>
 8010c4e:	6822      	ldr	r2, [r4, #0]
 8010c50:	f022 0220 	bic.w	r2, r2, #32
 8010c54:	6022      	str	r2, [r4, #0]
 8010c56:	2210      	movs	r2, #16
 8010c58:	e7b7      	b.n	8010bca <_printf_i+0xd2>
 8010c5a:	064d      	lsls	r5, r1, #25
 8010c5c:	bf48      	it	mi
 8010c5e:	b29b      	uxthmi	r3, r3
 8010c60:	e7ef      	b.n	8010c42 <_printf_i+0x14a>
 8010c62:	4665      	mov	r5, ip
 8010c64:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c68:	fb02 3311 	mls	r3, r2, r1, r3
 8010c6c:	5cc3      	ldrb	r3, [r0, r3]
 8010c6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010c72:	460b      	mov	r3, r1
 8010c74:	2900      	cmp	r1, #0
 8010c76:	d1f5      	bne.n	8010c64 <_printf_i+0x16c>
 8010c78:	e7b9      	b.n	8010bee <_printf_i+0xf6>
 8010c7a:	6813      	ldr	r3, [r2, #0]
 8010c7c:	6825      	ldr	r5, [r4, #0]
 8010c7e:	6961      	ldr	r1, [r4, #20]
 8010c80:	1d18      	adds	r0, r3, #4
 8010c82:	6010      	str	r0, [r2, #0]
 8010c84:	0628      	lsls	r0, r5, #24
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	d501      	bpl.n	8010c8e <_printf_i+0x196>
 8010c8a:	6019      	str	r1, [r3, #0]
 8010c8c:	e002      	b.n	8010c94 <_printf_i+0x19c>
 8010c8e:	066a      	lsls	r2, r5, #25
 8010c90:	d5fb      	bpl.n	8010c8a <_printf_i+0x192>
 8010c92:	8019      	strh	r1, [r3, #0]
 8010c94:	2300      	movs	r3, #0
 8010c96:	6123      	str	r3, [r4, #16]
 8010c98:	4665      	mov	r5, ip
 8010c9a:	e7b9      	b.n	8010c10 <_printf_i+0x118>
 8010c9c:	6813      	ldr	r3, [r2, #0]
 8010c9e:	1d19      	adds	r1, r3, #4
 8010ca0:	6011      	str	r1, [r2, #0]
 8010ca2:	681d      	ldr	r5, [r3, #0]
 8010ca4:	6862      	ldr	r2, [r4, #4]
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	4628      	mov	r0, r5
 8010caa:	f7ef faa9 	bl	8000200 <memchr>
 8010cae:	b108      	cbz	r0, 8010cb4 <_printf_i+0x1bc>
 8010cb0:	1b40      	subs	r0, r0, r5
 8010cb2:	6060      	str	r0, [r4, #4]
 8010cb4:	6863      	ldr	r3, [r4, #4]
 8010cb6:	6123      	str	r3, [r4, #16]
 8010cb8:	2300      	movs	r3, #0
 8010cba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010cbe:	e7a7      	b.n	8010c10 <_printf_i+0x118>
 8010cc0:	6923      	ldr	r3, [r4, #16]
 8010cc2:	462a      	mov	r2, r5
 8010cc4:	4639      	mov	r1, r7
 8010cc6:	4630      	mov	r0, r6
 8010cc8:	47c0      	blx	r8
 8010cca:	3001      	adds	r0, #1
 8010ccc:	d0aa      	beq.n	8010c24 <_printf_i+0x12c>
 8010cce:	6823      	ldr	r3, [r4, #0]
 8010cd0:	079b      	lsls	r3, r3, #30
 8010cd2:	d413      	bmi.n	8010cfc <_printf_i+0x204>
 8010cd4:	68e0      	ldr	r0, [r4, #12]
 8010cd6:	9b03      	ldr	r3, [sp, #12]
 8010cd8:	4298      	cmp	r0, r3
 8010cda:	bfb8      	it	lt
 8010cdc:	4618      	movlt	r0, r3
 8010cde:	e7a3      	b.n	8010c28 <_printf_i+0x130>
 8010ce0:	2301      	movs	r3, #1
 8010ce2:	464a      	mov	r2, r9
 8010ce4:	4639      	mov	r1, r7
 8010ce6:	4630      	mov	r0, r6
 8010ce8:	47c0      	blx	r8
 8010cea:	3001      	adds	r0, #1
 8010cec:	d09a      	beq.n	8010c24 <_printf_i+0x12c>
 8010cee:	3501      	adds	r5, #1
 8010cf0:	68e3      	ldr	r3, [r4, #12]
 8010cf2:	9a03      	ldr	r2, [sp, #12]
 8010cf4:	1a9b      	subs	r3, r3, r2
 8010cf6:	42ab      	cmp	r3, r5
 8010cf8:	dcf2      	bgt.n	8010ce0 <_printf_i+0x1e8>
 8010cfa:	e7eb      	b.n	8010cd4 <_printf_i+0x1dc>
 8010cfc:	2500      	movs	r5, #0
 8010cfe:	f104 0919 	add.w	r9, r4, #25
 8010d02:	e7f5      	b.n	8010cf0 <_printf_i+0x1f8>
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d1ac      	bne.n	8010c62 <_printf_i+0x16a>
 8010d08:	7803      	ldrb	r3, [r0, #0]
 8010d0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d12:	e76c      	b.n	8010bee <_printf_i+0xf6>
 8010d14:	08014b52 	.word	0x08014b52
 8010d18:	08014b63 	.word	0x08014b63

08010d1c <_scanf_float>:
 8010d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d20:	469a      	mov	sl, r3
 8010d22:	688b      	ldr	r3, [r1, #8]
 8010d24:	4616      	mov	r6, r2
 8010d26:	1e5a      	subs	r2, r3, #1
 8010d28:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010d2c:	b087      	sub	sp, #28
 8010d2e:	bf83      	ittte	hi
 8010d30:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010d34:	189b      	addhi	r3, r3, r2
 8010d36:	9301      	strhi	r3, [sp, #4]
 8010d38:	2300      	movls	r3, #0
 8010d3a:	bf86      	itte	hi
 8010d3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010d40:	608b      	strhi	r3, [r1, #8]
 8010d42:	9301      	strls	r3, [sp, #4]
 8010d44:	680b      	ldr	r3, [r1, #0]
 8010d46:	4688      	mov	r8, r1
 8010d48:	f04f 0b00 	mov.w	fp, #0
 8010d4c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010d50:	f848 3b1c 	str.w	r3, [r8], #28
 8010d54:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8010d58:	4607      	mov	r7, r0
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	4645      	mov	r5, r8
 8010d5e:	465a      	mov	r2, fp
 8010d60:	46d9      	mov	r9, fp
 8010d62:	f8cd b008 	str.w	fp, [sp, #8]
 8010d66:	68a1      	ldr	r1, [r4, #8]
 8010d68:	b181      	cbz	r1, 8010d8c <_scanf_float+0x70>
 8010d6a:	6833      	ldr	r3, [r6, #0]
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	2b49      	cmp	r3, #73	; 0x49
 8010d70:	d071      	beq.n	8010e56 <_scanf_float+0x13a>
 8010d72:	d84d      	bhi.n	8010e10 <_scanf_float+0xf4>
 8010d74:	2b39      	cmp	r3, #57	; 0x39
 8010d76:	d840      	bhi.n	8010dfa <_scanf_float+0xde>
 8010d78:	2b31      	cmp	r3, #49	; 0x31
 8010d7a:	f080 8088 	bcs.w	8010e8e <_scanf_float+0x172>
 8010d7e:	2b2d      	cmp	r3, #45	; 0x2d
 8010d80:	f000 8090 	beq.w	8010ea4 <_scanf_float+0x188>
 8010d84:	d815      	bhi.n	8010db2 <_scanf_float+0x96>
 8010d86:	2b2b      	cmp	r3, #43	; 0x2b
 8010d88:	f000 808c 	beq.w	8010ea4 <_scanf_float+0x188>
 8010d8c:	f1b9 0f00 	cmp.w	r9, #0
 8010d90:	d003      	beq.n	8010d9a <_scanf_float+0x7e>
 8010d92:	6823      	ldr	r3, [r4, #0]
 8010d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d98:	6023      	str	r3, [r4, #0]
 8010d9a:	3a01      	subs	r2, #1
 8010d9c:	2a01      	cmp	r2, #1
 8010d9e:	f200 80ea 	bhi.w	8010f76 <_scanf_float+0x25a>
 8010da2:	4545      	cmp	r5, r8
 8010da4:	f200 80dc 	bhi.w	8010f60 <_scanf_float+0x244>
 8010da8:	2601      	movs	r6, #1
 8010daa:	4630      	mov	r0, r6
 8010dac:	b007      	add	sp, #28
 8010dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db2:	2b2e      	cmp	r3, #46	; 0x2e
 8010db4:	f000 809f 	beq.w	8010ef6 <_scanf_float+0x1da>
 8010db8:	2b30      	cmp	r3, #48	; 0x30
 8010dba:	d1e7      	bne.n	8010d8c <_scanf_float+0x70>
 8010dbc:	6820      	ldr	r0, [r4, #0]
 8010dbe:	f410 7f80 	tst.w	r0, #256	; 0x100
 8010dc2:	d064      	beq.n	8010e8e <_scanf_float+0x172>
 8010dc4:	9b01      	ldr	r3, [sp, #4]
 8010dc6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8010dca:	6020      	str	r0, [r4, #0]
 8010dcc:	f109 0901 	add.w	r9, r9, #1
 8010dd0:	b11b      	cbz	r3, 8010dda <_scanf_float+0xbe>
 8010dd2:	3b01      	subs	r3, #1
 8010dd4:	3101      	adds	r1, #1
 8010dd6:	9301      	str	r3, [sp, #4]
 8010dd8:	60a1      	str	r1, [r4, #8]
 8010dda:	68a3      	ldr	r3, [r4, #8]
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	60a3      	str	r3, [r4, #8]
 8010de0:	6923      	ldr	r3, [r4, #16]
 8010de2:	3301      	adds	r3, #1
 8010de4:	6123      	str	r3, [r4, #16]
 8010de6:	6873      	ldr	r3, [r6, #4]
 8010de8:	3b01      	subs	r3, #1
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	6073      	str	r3, [r6, #4]
 8010dee:	f340 80ac 	ble.w	8010f4a <_scanf_float+0x22e>
 8010df2:	6833      	ldr	r3, [r6, #0]
 8010df4:	3301      	adds	r3, #1
 8010df6:	6033      	str	r3, [r6, #0]
 8010df8:	e7b5      	b.n	8010d66 <_scanf_float+0x4a>
 8010dfa:	2b45      	cmp	r3, #69	; 0x45
 8010dfc:	f000 8085 	beq.w	8010f0a <_scanf_float+0x1ee>
 8010e00:	2b46      	cmp	r3, #70	; 0x46
 8010e02:	d06a      	beq.n	8010eda <_scanf_float+0x1be>
 8010e04:	2b41      	cmp	r3, #65	; 0x41
 8010e06:	d1c1      	bne.n	8010d8c <_scanf_float+0x70>
 8010e08:	2a01      	cmp	r2, #1
 8010e0a:	d1bf      	bne.n	8010d8c <_scanf_float+0x70>
 8010e0c:	2202      	movs	r2, #2
 8010e0e:	e046      	b.n	8010e9e <_scanf_float+0x182>
 8010e10:	2b65      	cmp	r3, #101	; 0x65
 8010e12:	d07a      	beq.n	8010f0a <_scanf_float+0x1ee>
 8010e14:	d818      	bhi.n	8010e48 <_scanf_float+0x12c>
 8010e16:	2b54      	cmp	r3, #84	; 0x54
 8010e18:	d066      	beq.n	8010ee8 <_scanf_float+0x1cc>
 8010e1a:	d811      	bhi.n	8010e40 <_scanf_float+0x124>
 8010e1c:	2b4e      	cmp	r3, #78	; 0x4e
 8010e1e:	d1b5      	bne.n	8010d8c <_scanf_float+0x70>
 8010e20:	2a00      	cmp	r2, #0
 8010e22:	d146      	bne.n	8010eb2 <_scanf_float+0x196>
 8010e24:	f1b9 0f00 	cmp.w	r9, #0
 8010e28:	d145      	bne.n	8010eb6 <_scanf_float+0x19a>
 8010e2a:	6821      	ldr	r1, [r4, #0]
 8010e2c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010e30:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010e34:	d13f      	bne.n	8010eb6 <_scanf_float+0x19a>
 8010e36:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010e3a:	6021      	str	r1, [r4, #0]
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	e02e      	b.n	8010e9e <_scanf_float+0x182>
 8010e40:	2b59      	cmp	r3, #89	; 0x59
 8010e42:	d01e      	beq.n	8010e82 <_scanf_float+0x166>
 8010e44:	2b61      	cmp	r3, #97	; 0x61
 8010e46:	e7de      	b.n	8010e06 <_scanf_float+0xea>
 8010e48:	2b6e      	cmp	r3, #110	; 0x6e
 8010e4a:	d0e9      	beq.n	8010e20 <_scanf_float+0x104>
 8010e4c:	d815      	bhi.n	8010e7a <_scanf_float+0x15e>
 8010e4e:	2b66      	cmp	r3, #102	; 0x66
 8010e50:	d043      	beq.n	8010eda <_scanf_float+0x1be>
 8010e52:	2b69      	cmp	r3, #105	; 0x69
 8010e54:	d19a      	bne.n	8010d8c <_scanf_float+0x70>
 8010e56:	f1bb 0f00 	cmp.w	fp, #0
 8010e5a:	d138      	bne.n	8010ece <_scanf_float+0x1b2>
 8010e5c:	f1b9 0f00 	cmp.w	r9, #0
 8010e60:	d197      	bne.n	8010d92 <_scanf_float+0x76>
 8010e62:	6821      	ldr	r1, [r4, #0]
 8010e64:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010e68:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010e6c:	d195      	bne.n	8010d9a <_scanf_float+0x7e>
 8010e6e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010e72:	6021      	str	r1, [r4, #0]
 8010e74:	f04f 0b01 	mov.w	fp, #1
 8010e78:	e011      	b.n	8010e9e <_scanf_float+0x182>
 8010e7a:	2b74      	cmp	r3, #116	; 0x74
 8010e7c:	d034      	beq.n	8010ee8 <_scanf_float+0x1cc>
 8010e7e:	2b79      	cmp	r3, #121	; 0x79
 8010e80:	d184      	bne.n	8010d8c <_scanf_float+0x70>
 8010e82:	f1bb 0f07 	cmp.w	fp, #7
 8010e86:	d181      	bne.n	8010d8c <_scanf_float+0x70>
 8010e88:	f04f 0b08 	mov.w	fp, #8
 8010e8c:	e007      	b.n	8010e9e <_scanf_float+0x182>
 8010e8e:	eb12 0f0b 	cmn.w	r2, fp
 8010e92:	f47f af7b 	bne.w	8010d8c <_scanf_float+0x70>
 8010e96:	6821      	ldr	r1, [r4, #0]
 8010e98:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8010e9c:	6021      	str	r1, [r4, #0]
 8010e9e:	702b      	strb	r3, [r5, #0]
 8010ea0:	3501      	adds	r5, #1
 8010ea2:	e79a      	b.n	8010dda <_scanf_float+0xbe>
 8010ea4:	6821      	ldr	r1, [r4, #0]
 8010ea6:	0608      	lsls	r0, r1, #24
 8010ea8:	f57f af70 	bpl.w	8010d8c <_scanf_float+0x70>
 8010eac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010eb0:	e7f4      	b.n	8010e9c <_scanf_float+0x180>
 8010eb2:	2a02      	cmp	r2, #2
 8010eb4:	d047      	beq.n	8010f46 <_scanf_float+0x22a>
 8010eb6:	f1bb 0f01 	cmp.w	fp, #1
 8010eba:	d003      	beq.n	8010ec4 <_scanf_float+0x1a8>
 8010ebc:	f1bb 0f04 	cmp.w	fp, #4
 8010ec0:	f47f af64 	bne.w	8010d8c <_scanf_float+0x70>
 8010ec4:	f10b 0b01 	add.w	fp, fp, #1
 8010ec8:	fa5f fb8b 	uxtb.w	fp, fp
 8010ecc:	e7e7      	b.n	8010e9e <_scanf_float+0x182>
 8010ece:	f1bb 0f03 	cmp.w	fp, #3
 8010ed2:	d0f7      	beq.n	8010ec4 <_scanf_float+0x1a8>
 8010ed4:	f1bb 0f05 	cmp.w	fp, #5
 8010ed8:	e7f2      	b.n	8010ec0 <_scanf_float+0x1a4>
 8010eda:	f1bb 0f02 	cmp.w	fp, #2
 8010ede:	f47f af55 	bne.w	8010d8c <_scanf_float+0x70>
 8010ee2:	f04f 0b03 	mov.w	fp, #3
 8010ee6:	e7da      	b.n	8010e9e <_scanf_float+0x182>
 8010ee8:	f1bb 0f06 	cmp.w	fp, #6
 8010eec:	f47f af4e 	bne.w	8010d8c <_scanf_float+0x70>
 8010ef0:	f04f 0b07 	mov.w	fp, #7
 8010ef4:	e7d3      	b.n	8010e9e <_scanf_float+0x182>
 8010ef6:	6821      	ldr	r1, [r4, #0]
 8010ef8:	0588      	lsls	r0, r1, #22
 8010efa:	f57f af47 	bpl.w	8010d8c <_scanf_float+0x70>
 8010efe:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8010f02:	6021      	str	r1, [r4, #0]
 8010f04:	f8cd 9008 	str.w	r9, [sp, #8]
 8010f08:	e7c9      	b.n	8010e9e <_scanf_float+0x182>
 8010f0a:	6821      	ldr	r1, [r4, #0]
 8010f0c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8010f10:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010f14:	d006      	beq.n	8010f24 <_scanf_float+0x208>
 8010f16:	0548      	lsls	r0, r1, #21
 8010f18:	f57f af38 	bpl.w	8010d8c <_scanf_float+0x70>
 8010f1c:	f1b9 0f00 	cmp.w	r9, #0
 8010f20:	f43f af3b 	beq.w	8010d9a <_scanf_float+0x7e>
 8010f24:	0588      	lsls	r0, r1, #22
 8010f26:	bf58      	it	pl
 8010f28:	9802      	ldrpl	r0, [sp, #8]
 8010f2a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010f2e:	bf58      	it	pl
 8010f30:	eba9 0000 	subpl.w	r0, r9, r0
 8010f34:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8010f38:	bf58      	it	pl
 8010f3a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8010f3e:	6021      	str	r1, [r4, #0]
 8010f40:	f04f 0900 	mov.w	r9, #0
 8010f44:	e7ab      	b.n	8010e9e <_scanf_float+0x182>
 8010f46:	2203      	movs	r2, #3
 8010f48:	e7a9      	b.n	8010e9e <_scanf_float+0x182>
 8010f4a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010f4e:	9205      	str	r2, [sp, #20]
 8010f50:	4631      	mov	r1, r6
 8010f52:	4638      	mov	r0, r7
 8010f54:	4798      	blx	r3
 8010f56:	9a05      	ldr	r2, [sp, #20]
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	f43f af04 	beq.w	8010d66 <_scanf_float+0x4a>
 8010f5e:	e715      	b.n	8010d8c <_scanf_float+0x70>
 8010f60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010f68:	4632      	mov	r2, r6
 8010f6a:	4638      	mov	r0, r7
 8010f6c:	4798      	blx	r3
 8010f6e:	6923      	ldr	r3, [r4, #16]
 8010f70:	3b01      	subs	r3, #1
 8010f72:	6123      	str	r3, [r4, #16]
 8010f74:	e715      	b.n	8010da2 <_scanf_float+0x86>
 8010f76:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010f7a:	2b06      	cmp	r3, #6
 8010f7c:	d80a      	bhi.n	8010f94 <_scanf_float+0x278>
 8010f7e:	f1bb 0f02 	cmp.w	fp, #2
 8010f82:	d968      	bls.n	8011056 <_scanf_float+0x33a>
 8010f84:	f1ab 0b03 	sub.w	fp, fp, #3
 8010f88:	fa5f fb8b 	uxtb.w	fp, fp
 8010f8c:	eba5 0b0b 	sub.w	fp, r5, fp
 8010f90:	455d      	cmp	r5, fp
 8010f92:	d14b      	bne.n	801102c <_scanf_float+0x310>
 8010f94:	6823      	ldr	r3, [r4, #0]
 8010f96:	05da      	lsls	r2, r3, #23
 8010f98:	d51f      	bpl.n	8010fda <_scanf_float+0x2be>
 8010f9a:	055b      	lsls	r3, r3, #21
 8010f9c:	d468      	bmi.n	8011070 <_scanf_float+0x354>
 8010f9e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010fa2:	6923      	ldr	r3, [r4, #16]
 8010fa4:	2965      	cmp	r1, #101	; 0x65
 8010fa6:	f103 33ff 	add.w	r3, r3, #4294967295
 8010faa:	f105 3bff 	add.w	fp, r5, #4294967295
 8010fae:	6123      	str	r3, [r4, #16]
 8010fb0:	d00d      	beq.n	8010fce <_scanf_float+0x2b2>
 8010fb2:	2945      	cmp	r1, #69	; 0x45
 8010fb4:	d00b      	beq.n	8010fce <_scanf_float+0x2b2>
 8010fb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010fba:	4632      	mov	r2, r6
 8010fbc:	4638      	mov	r0, r7
 8010fbe:	4798      	blx	r3
 8010fc0:	6923      	ldr	r3, [r4, #16]
 8010fc2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010fc6:	3b01      	subs	r3, #1
 8010fc8:	f1a5 0b02 	sub.w	fp, r5, #2
 8010fcc:	6123      	str	r3, [r4, #16]
 8010fce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010fd2:	4632      	mov	r2, r6
 8010fd4:	4638      	mov	r0, r7
 8010fd6:	4798      	blx	r3
 8010fd8:	465d      	mov	r5, fp
 8010fda:	6826      	ldr	r6, [r4, #0]
 8010fdc:	f016 0610 	ands.w	r6, r6, #16
 8010fe0:	d17a      	bne.n	80110d8 <_scanf_float+0x3bc>
 8010fe2:	702e      	strb	r6, [r5, #0]
 8010fe4:	6823      	ldr	r3, [r4, #0]
 8010fe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010fee:	d142      	bne.n	8011076 <_scanf_float+0x35a>
 8010ff0:	9b02      	ldr	r3, [sp, #8]
 8010ff2:	eba9 0303 	sub.w	r3, r9, r3
 8010ff6:	425a      	negs	r2, r3
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d149      	bne.n	8011090 <_scanf_float+0x374>
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	4641      	mov	r1, r8
 8011000:	4638      	mov	r0, r7
 8011002:	f000 ffdd 	bl	8011fc0 <_strtod_r>
 8011006:	6825      	ldr	r5, [r4, #0]
 8011008:	f8da 3000 	ldr.w	r3, [sl]
 801100c:	f015 0f02 	tst.w	r5, #2
 8011010:	f103 0204 	add.w	r2, r3, #4
 8011014:	ec59 8b10 	vmov	r8, r9, d0
 8011018:	f8ca 2000 	str.w	r2, [sl]
 801101c:	d043      	beq.n	80110a6 <_scanf_float+0x38a>
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	e9c3 8900 	strd	r8, r9, [r3]
 8011024:	68e3      	ldr	r3, [r4, #12]
 8011026:	3301      	adds	r3, #1
 8011028:	60e3      	str	r3, [r4, #12]
 801102a:	e6be      	b.n	8010daa <_scanf_float+0x8e>
 801102c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011030:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011034:	4632      	mov	r2, r6
 8011036:	4638      	mov	r0, r7
 8011038:	4798      	blx	r3
 801103a:	6923      	ldr	r3, [r4, #16]
 801103c:	3b01      	subs	r3, #1
 801103e:	6123      	str	r3, [r4, #16]
 8011040:	e7a6      	b.n	8010f90 <_scanf_float+0x274>
 8011042:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011046:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801104a:	4632      	mov	r2, r6
 801104c:	4638      	mov	r0, r7
 801104e:	4798      	blx	r3
 8011050:	6923      	ldr	r3, [r4, #16]
 8011052:	3b01      	subs	r3, #1
 8011054:	6123      	str	r3, [r4, #16]
 8011056:	4545      	cmp	r5, r8
 8011058:	d8f3      	bhi.n	8011042 <_scanf_float+0x326>
 801105a:	e6a5      	b.n	8010da8 <_scanf_float+0x8c>
 801105c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011060:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011064:	4632      	mov	r2, r6
 8011066:	4638      	mov	r0, r7
 8011068:	4798      	blx	r3
 801106a:	6923      	ldr	r3, [r4, #16]
 801106c:	3b01      	subs	r3, #1
 801106e:	6123      	str	r3, [r4, #16]
 8011070:	4545      	cmp	r5, r8
 8011072:	d8f3      	bhi.n	801105c <_scanf_float+0x340>
 8011074:	e698      	b.n	8010da8 <_scanf_float+0x8c>
 8011076:	9b03      	ldr	r3, [sp, #12]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d0bf      	beq.n	8010ffc <_scanf_float+0x2e0>
 801107c:	9904      	ldr	r1, [sp, #16]
 801107e:	230a      	movs	r3, #10
 8011080:	4632      	mov	r2, r6
 8011082:	3101      	adds	r1, #1
 8011084:	4638      	mov	r0, r7
 8011086:	f001 f827 	bl	80120d8 <_strtol_r>
 801108a:	9b03      	ldr	r3, [sp, #12]
 801108c:	9d04      	ldr	r5, [sp, #16]
 801108e:	1ac2      	subs	r2, r0, r3
 8011090:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011094:	429d      	cmp	r5, r3
 8011096:	bf28      	it	cs
 8011098:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801109c:	490f      	ldr	r1, [pc, #60]	; (80110dc <_scanf_float+0x3c0>)
 801109e:	4628      	mov	r0, r5
 80110a0:	f000 f95e 	bl	8011360 <siprintf>
 80110a4:	e7aa      	b.n	8010ffc <_scanf_float+0x2e0>
 80110a6:	f015 0504 	ands.w	r5, r5, #4
 80110aa:	d1b8      	bne.n	801101e <_scanf_float+0x302>
 80110ac:	681f      	ldr	r7, [r3, #0]
 80110ae:	ee10 2a10 	vmov	r2, s0
 80110b2:	464b      	mov	r3, r9
 80110b4:	ee10 0a10 	vmov	r0, s0
 80110b8:	4649      	mov	r1, r9
 80110ba:	f7ef fd47 	bl	8000b4c <__aeabi_dcmpun>
 80110be:	b128      	cbz	r0, 80110cc <_scanf_float+0x3b0>
 80110c0:	4628      	mov	r0, r5
 80110c2:	f000 f947 	bl	8011354 <nanf>
 80110c6:	ed87 0a00 	vstr	s0, [r7]
 80110ca:	e7ab      	b.n	8011024 <_scanf_float+0x308>
 80110cc:	4640      	mov	r0, r8
 80110ce:	4649      	mov	r1, r9
 80110d0:	f7ef fd9a 	bl	8000c08 <__aeabi_d2f>
 80110d4:	6038      	str	r0, [r7, #0]
 80110d6:	e7a5      	b.n	8011024 <_scanf_float+0x308>
 80110d8:	2600      	movs	r6, #0
 80110da:	e666      	b.n	8010daa <_scanf_float+0x8e>
 80110dc:	08014b74 	.word	0x08014b74

080110e0 <iprintf>:
 80110e0:	b40f      	push	{r0, r1, r2, r3}
 80110e2:	4b0a      	ldr	r3, [pc, #40]	; (801110c <iprintf+0x2c>)
 80110e4:	b513      	push	{r0, r1, r4, lr}
 80110e6:	681c      	ldr	r4, [r3, #0]
 80110e8:	b124      	cbz	r4, 80110f4 <iprintf+0x14>
 80110ea:	69a3      	ldr	r3, [r4, #24]
 80110ec:	b913      	cbnz	r3, 80110f4 <iprintf+0x14>
 80110ee:	4620      	mov	r0, r4
 80110f0:	f001 fffa 	bl	80130e8 <__sinit>
 80110f4:	ab05      	add	r3, sp, #20
 80110f6:	9a04      	ldr	r2, [sp, #16]
 80110f8:	68a1      	ldr	r1, [r4, #8]
 80110fa:	9301      	str	r3, [sp, #4]
 80110fc:	4620      	mov	r0, r4
 80110fe:	f003 f9b9 	bl	8014474 <_vfiprintf_r>
 8011102:	b002      	add	sp, #8
 8011104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011108:	b004      	add	sp, #16
 801110a:	4770      	bx	lr
 801110c:	20000010 	.word	0x20000010

08011110 <_puts_r>:
 8011110:	b570      	push	{r4, r5, r6, lr}
 8011112:	460e      	mov	r6, r1
 8011114:	4605      	mov	r5, r0
 8011116:	b118      	cbz	r0, 8011120 <_puts_r+0x10>
 8011118:	6983      	ldr	r3, [r0, #24]
 801111a:	b90b      	cbnz	r3, 8011120 <_puts_r+0x10>
 801111c:	f001 ffe4 	bl	80130e8 <__sinit>
 8011120:	69ab      	ldr	r3, [r5, #24]
 8011122:	68ac      	ldr	r4, [r5, #8]
 8011124:	b913      	cbnz	r3, 801112c <_puts_r+0x1c>
 8011126:	4628      	mov	r0, r5
 8011128:	f001 ffde 	bl	80130e8 <__sinit>
 801112c:	4b23      	ldr	r3, [pc, #140]	; (80111bc <_puts_r+0xac>)
 801112e:	429c      	cmp	r4, r3
 8011130:	d117      	bne.n	8011162 <_puts_r+0x52>
 8011132:	686c      	ldr	r4, [r5, #4]
 8011134:	89a3      	ldrh	r3, [r4, #12]
 8011136:	071b      	lsls	r3, r3, #28
 8011138:	d51d      	bpl.n	8011176 <_puts_r+0x66>
 801113a:	6923      	ldr	r3, [r4, #16]
 801113c:	b1db      	cbz	r3, 8011176 <_puts_r+0x66>
 801113e:	3e01      	subs	r6, #1
 8011140:	68a3      	ldr	r3, [r4, #8]
 8011142:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011146:	3b01      	subs	r3, #1
 8011148:	60a3      	str	r3, [r4, #8]
 801114a:	b9e9      	cbnz	r1, 8011188 <_puts_r+0x78>
 801114c:	2b00      	cmp	r3, #0
 801114e:	da2e      	bge.n	80111ae <_puts_r+0x9e>
 8011150:	4622      	mov	r2, r4
 8011152:	210a      	movs	r1, #10
 8011154:	4628      	mov	r0, r5
 8011156:	f000 ffd1 	bl	80120fc <__swbuf_r>
 801115a:	3001      	adds	r0, #1
 801115c:	d011      	beq.n	8011182 <_puts_r+0x72>
 801115e:	200a      	movs	r0, #10
 8011160:	e011      	b.n	8011186 <_puts_r+0x76>
 8011162:	4b17      	ldr	r3, [pc, #92]	; (80111c0 <_puts_r+0xb0>)
 8011164:	429c      	cmp	r4, r3
 8011166:	d101      	bne.n	801116c <_puts_r+0x5c>
 8011168:	68ac      	ldr	r4, [r5, #8]
 801116a:	e7e3      	b.n	8011134 <_puts_r+0x24>
 801116c:	4b15      	ldr	r3, [pc, #84]	; (80111c4 <_puts_r+0xb4>)
 801116e:	429c      	cmp	r4, r3
 8011170:	bf08      	it	eq
 8011172:	68ec      	ldreq	r4, [r5, #12]
 8011174:	e7de      	b.n	8011134 <_puts_r+0x24>
 8011176:	4621      	mov	r1, r4
 8011178:	4628      	mov	r0, r5
 801117a:	f001 f811 	bl	80121a0 <__swsetup_r>
 801117e:	2800      	cmp	r0, #0
 8011180:	d0dd      	beq.n	801113e <_puts_r+0x2e>
 8011182:	f04f 30ff 	mov.w	r0, #4294967295
 8011186:	bd70      	pop	{r4, r5, r6, pc}
 8011188:	2b00      	cmp	r3, #0
 801118a:	da04      	bge.n	8011196 <_puts_r+0x86>
 801118c:	69a2      	ldr	r2, [r4, #24]
 801118e:	429a      	cmp	r2, r3
 8011190:	dc06      	bgt.n	80111a0 <_puts_r+0x90>
 8011192:	290a      	cmp	r1, #10
 8011194:	d004      	beq.n	80111a0 <_puts_r+0x90>
 8011196:	6823      	ldr	r3, [r4, #0]
 8011198:	1c5a      	adds	r2, r3, #1
 801119a:	6022      	str	r2, [r4, #0]
 801119c:	7019      	strb	r1, [r3, #0]
 801119e:	e7cf      	b.n	8011140 <_puts_r+0x30>
 80111a0:	4622      	mov	r2, r4
 80111a2:	4628      	mov	r0, r5
 80111a4:	f000 ffaa 	bl	80120fc <__swbuf_r>
 80111a8:	3001      	adds	r0, #1
 80111aa:	d1c9      	bne.n	8011140 <_puts_r+0x30>
 80111ac:	e7e9      	b.n	8011182 <_puts_r+0x72>
 80111ae:	6823      	ldr	r3, [r4, #0]
 80111b0:	200a      	movs	r0, #10
 80111b2:	1c5a      	adds	r2, r3, #1
 80111b4:	6022      	str	r2, [r4, #0]
 80111b6:	7018      	strb	r0, [r3, #0]
 80111b8:	e7e5      	b.n	8011186 <_puts_r+0x76>
 80111ba:	bf00      	nop
 80111bc:	08014c00 	.word	0x08014c00
 80111c0:	08014c20 	.word	0x08014c20
 80111c4:	08014be0 	.word	0x08014be0

080111c8 <puts>:
 80111c8:	4b02      	ldr	r3, [pc, #8]	; (80111d4 <puts+0xc>)
 80111ca:	4601      	mov	r1, r0
 80111cc:	6818      	ldr	r0, [r3, #0]
 80111ce:	f7ff bf9f 	b.w	8011110 <_puts_r>
 80111d2:	bf00      	nop
 80111d4:	20000010 	.word	0x20000010

080111d8 <_sbrk_r>:
 80111d8:	b538      	push	{r3, r4, r5, lr}
 80111da:	4c06      	ldr	r4, [pc, #24]	; (80111f4 <_sbrk_r+0x1c>)
 80111dc:	2300      	movs	r3, #0
 80111de:	4605      	mov	r5, r0
 80111e0:	4608      	mov	r0, r1
 80111e2:	6023      	str	r3, [r4, #0]
 80111e4:	f7f0 fd3e 	bl	8001c64 <_sbrk>
 80111e8:	1c43      	adds	r3, r0, #1
 80111ea:	d102      	bne.n	80111f2 <_sbrk_r+0x1a>
 80111ec:	6823      	ldr	r3, [r4, #0]
 80111ee:	b103      	cbz	r3, 80111f2 <_sbrk_r+0x1a>
 80111f0:	602b      	str	r3, [r5, #0]
 80111f2:	bd38      	pop	{r3, r4, r5, pc}
 80111f4:	20003980 	.word	0x20003980

080111f8 <setvbuf>:
 80111f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80111fc:	461d      	mov	r5, r3
 80111fe:	4b51      	ldr	r3, [pc, #324]	; (8011344 <setvbuf+0x14c>)
 8011200:	681e      	ldr	r6, [r3, #0]
 8011202:	4604      	mov	r4, r0
 8011204:	460f      	mov	r7, r1
 8011206:	4690      	mov	r8, r2
 8011208:	b126      	cbz	r6, 8011214 <setvbuf+0x1c>
 801120a:	69b3      	ldr	r3, [r6, #24]
 801120c:	b913      	cbnz	r3, 8011214 <setvbuf+0x1c>
 801120e:	4630      	mov	r0, r6
 8011210:	f001 ff6a 	bl	80130e8 <__sinit>
 8011214:	4b4c      	ldr	r3, [pc, #304]	; (8011348 <setvbuf+0x150>)
 8011216:	429c      	cmp	r4, r3
 8011218:	d152      	bne.n	80112c0 <setvbuf+0xc8>
 801121a:	6874      	ldr	r4, [r6, #4]
 801121c:	f1b8 0f02 	cmp.w	r8, #2
 8011220:	d006      	beq.n	8011230 <setvbuf+0x38>
 8011222:	f1b8 0f01 	cmp.w	r8, #1
 8011226:	f200 8089 	bhi.w	801133c <setvbuf+0x144>
 801122a:	2d00      	cmp	r5, #0
 801122c:	f2c0 8086 	blt.w	801133c <setvbuf+0x144>
 8011230:	4621      	mov	r1, r4
 8011232:	4630      	mov	r0, r6
 8011234:	f001 feee 	bl	8013014 <_fflush_r>
 8011238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801123a:	b141      	cbz	r1, 801124e <setvbuf+0x56>
 801123c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011240:	4299      	cmp	r1, r3
 8011242:	d002      	beq.n	801124a <setvbuf+0x52>
 8011244:	4630      	mov	r0, r6
 8011246:	f7ff f865 	bl	8010314 <_free_r>
 801124a:	2300      	movs	r3, #0
 801124c:	6363      	str	r3, [r4, #52]	; 0x34
 801124e:	2300      	movs	r3, #0
 8011250:	61a3      	str	r3, [r4, #24]
 8011252:	6063      	str	r3, [r4, #4]
 8011254:	89a3      	ldrh	r3, [r4, #12]
 8011256:	061b      	lsls	r3, r3, #24
 8011258:	d503      	bpl.n	8011262 <setvbuf+0x6a>
 801125a:	6921      	ldr	r1, [r4, #16]
 801125c:	4630      	mov	r0, r6
 801125e:	f7ff f859 	bl	8010314 <_free_r>
 8011262:	89a3      	ldrh	r3, [r4, #12]
 8011264:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8011268:	f023 0303 	bic.w	r3, r3, #3
 801126c:	f1b8 0f02 	cmp.w	r8, #2
 8011270:	81a3      	strh	r3, [r4, #12]
 8011272:	d05d      	beq.n	8011330 <setvbuf+0x138>
 8011274:	ab01      	add	r3, sp, #4
 8011276:	466a      	mov	r2, sp
 8011278:	4621      	mov	r1, r4
 801127a:	4630      	mov	r0, r6
 801127c:	f002 faf8 	bl	8013870 <__swhatbuf_r>
 8011280:	89a3      	ldrh	r3, [r4, #12]
 8011282:	4318      	orrs	r0, r3
 8011284:	81a0      	strh	r0, [r4, #12]
 8011286:	bb2d      	cbnz	r5, 80112d4 <setvbuf+0xdc>
 8011288:	9d00      	ldr	r5, [sp, #0]
 801128a:	4628      	mov	r0, r5
 801128c:	f7ff f81e 	bl	80102cc <malloc>
 8011290:	4607      	mov	r7, r0
 8011292:	2800      	cmp	r0, #0
 8011294:	d14e      	bne.n	8011334 <setvbuf+0x13c>
 8011296:	f8dd 9000 	ldr.w	r9, [sp]
 801129a:	45a9      	cmp	r9, r5
 801129c:	d13c      	bne.n	8011318 <setvbuf+0x120>
 801129e:	f04f 30ff 	mov.w	r0, #4294967295
 80112a2:	89a3      	ldrh	r3, [r4, #12]
 80112a4:	f043 0302 	orr.w	r3, r3, #2
 80112a8:	81a3      	strh	r3, [r4, #12]
 80112aa:	2300      	movs	r3, #0
 80112ac:	60a3      	str	r3, [r4, #8]
 80112ae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80112b2:	6023      	str	r3, [r4, #0]
 80112b4:	6123      	str	r3, [r4, #16]
 80112b6:	2301      	movs	r3, #1
 80112b8:	6163      	str	r3, [r4, #20]
 80112ba:	b003      	add	sp, #12
 80112bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112c0:	4b22      	ldr	r3, [pc, #136]	; (801134c <setvbuf+0x154>)
 80112c2:	429c      	cmp	r4, r3
 80112c4:	d101      	bne.n	80112ca <setvbuf+0xd2>
 80112c6:	68b4      	ldr	r4, [r6, #8]
 80112c8:	e7a8      	b.n	801121c <setvbuf+0x24>
 80112ca:	4b21      	ldr	r3, [pc, #132]	; (8011350 <setvbuf+0x158>)
 80112cc:	429c      	cmp	r4, r3
 80112ce:	bf08      	it	eq
 80112d0:	68f4      	ldreq	r4, [r6, #12]
 80112d2:	e7a3      	b.n	801121c <setvbuf+0x24>
 80112d4:	2f00      	cmp	r7, #0
 80112d6:	d0d8      	beq.n	801128a <setvbuf+0x92>
 80112d8:	69b3      	ldr	r3, [r6, #24]
 80112da:	b913      	cbnz	r3, 80112e2 <setvbuf+0xea>
 80112dc:	4630      	mov	r0, r6
 80112de:	f001 ff03 	bl	80130e8 <__sinit>
 80112e2:	f1b8 0f01 	cmp.w	r8, #1
 80112e6:	bf08      	it	eq
 80112e8:	89a3      	ldrheq	r3, [r4, #12]
 80112ea:	6027      	str	r7, [r4, #0]
 80112ec:	bf04      	itt	eq
 80112ee:	f043 0301 	orreq.w	r3, r3, #1
 80112f2:	81a3      	strheq	r3, [r4, #12]
 80112f4:	89a3      	ldrh	r3, [r4, #12]
 80112f6:	f013 0008 	ands.w	r0, r3, #8
 80112fa:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80112fe:	d01b      	beq.n	8011338 <setvbuf+0x140>
 8011300:	f013 0001 	ands.w	r0, r3, #1
 8011304:	bf18      	it	ne
 8011306:	426d      	negne	r5, r5
 8011308:	f04f 0300 	mov.w	r3, #0
 801130c:	bf1d      	ittte	ne
 801130e:	60a3      	strne	r3, [r4, #8]
 8011310:	61a5      	strne	r5, [r4, #24]
 8011312:	4618      	movne	r0, r3
 8011314:	60a5      	streq	r5, [r4, #8]
 8011316:	e7d0      	b.n	80112ba <setvbuf+0xc2>
 8011318:	4648      	mov	r0, r9
 801131a:	f7fe ffd7 	bl	80102cc <malloc>
 801131e:	4607      	mov	r7, r0
 8011320:	2800      	cmp	r0, #0
 8011322:	d0bc      	beq.n	801129e <setvbuf+0xa6>
 8011324:	89a3      	ldrh	r3, [r4, #12]
 8011326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801132a:	81a3      	strh	r3, [r4, #12]
 801132c:	464d      	mov	r5, r9
 801132e:	e7d3      	b.n	80112d8 <setvbuf+0xe0>
 8011330:	2000      	movs	r0, #0
 8011332:	e7b6      	b.n	80112a2 <setvbuf+0xaa>
 8011334:	46a9      	mov	r9, r5
 8011336:	e7f5      	b.n	8011324 <setvbuf+0x12c>
 8011338:	60a0      	str	r0, [r4, #8]
 801133a:	e7be      	b.n	80112ba <setvbuf+0xc2>
 801133c:	f04f 30ff 	mov.w	r0, #4294967295
 8011340:	e7bb      	b.n	80112ba <setvbuf+0xc2>
 8011342:	bf00      	nop
 8011344:	20000010 	.word	0x20000010
 8011348:	08014c00 	.word	0x08014c00
 801134c:	08014c20 	.word	0x08014c20
 8011350:	08014be0 	.word	0x08014be0

08011354 <nanf>:
 8011354:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801135c <nanf+0x8>
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop
 801135c:	7fc00000 	.word	0x7fc00000

08011360 <siprintf>:
 8011360:	b40e      	push	{r1, r2, r3}
 8011362:	b500      	push	{lr}
 8011364:	b09c      	sub	sp, #112	; 0x70
 8011366:	ab1d      	add	r3, sp, #116	; 0x74
 8011368:	9002      	str	r0, [sp, #8]
 801136a:	9006      	str	r0, [sp, #24]
 801136c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011370:	4809      	ldr	r0, [pc, #36]	; (8011398 <siprintf+0x38>)
 8011372:	9107      	str	r1, [sp, #28]
 8011374:	9104      	str	r1, [sp, #16]
 8011376:	4909      	ldr	r1, [pc, #36]	; (801139c <siprintf+0x3c>)
 8011378:	f853 2b04 	ldr.w	r2, [r3], #4
 801137c:	9105      	str	r1, [sp, #20]
 801137e:	6800      	ldr	r0, [r0, #0]
 8011380:	9301      	str	r3, [sp, #4]
 8011382:	a902      	add	r1, sp, #8
 8011384:	f002 ff54 	bl	8014230 <_svfiprintf_r>
 8011388:	9b02      	ldr	r3, [sp, #8]
 801138a:	2200      	movs	r2, #0
 801138c:	701a      	strb	r2, [r3, #0]
 801138e:	b01c      	add	sp, #112	; 0x70
 8011390:	f85d eb04 	ldr.w	lr, [sp], #4
 8011394:	b003      	add	sp, #12
 8011396:	4770      	bx	lr
 8011398:	20000010 	.word	0x20000010
 801139c:	ffff0208 	.word	0xffff0208

080113a0 <sulp>:
 80113a0:	b570      	push	{r4, r5, r6, lr}
 80113a2:	4604      	mov	r4, r0
 80113a4:	460d      	mov	r5, r1
 80113a6:	ec45 4b10 	vmov	d0, r4, r5
 80113aa:	4616      	mov	r6, r2
 80113ac:	f002 fda4 	bl	8013ef8 <__ulp>
 80113b0:	ec51 0b10 	vmov	r0, r1, d0
 80113b4:	b17e      	cbz	r6, 80113d6 <sulp+0x36>
 80113b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80113ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80113be:	2b00      	cmp	r3, #0
 80113c0:	dd09      	ble.n	80113d6 <sulp+0x36>
 80113c2:	051b      	lsls	r3, r3, #20
 80113c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80113c8:	2400      	movs	r4, #0
 80113ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80113ce:	4622      	mov	r2, r4
 80113d0:	462b      	mov	r3, r5
 80113d2:	f7ef f921 	bl	8000618 <__aeabi_dmul>
 80113d6:	bd70      	pop	{r4, r5, r6, pc}

080113d8 <_strtod_l>:
 80113d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113dc:	461f      	mov	r7, r3
 80113de:	b0a1      	sub	sp, #132	; 0x84
 80113e0:	2300      	movs	r3, #0
 80113e2:	4681      	mov	r9, r0
 80113e4:	4638      	mov	r0, r7
 80113e6:	460e      	mov	r6, r1
 80113e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80113ea:	931c      	str	r3, [sp, #112]	; 0x70
 80113ec:	f002 fa2f 	bl	801384e <__localeconv_l>
 80113f0:	4680      	mov	r8, r0
 80113f2:	6800      	ldr	r0, [r0, #0]
 80113f4:	f7ee fefc 	bl	80001f0 <strlen>
 80113f8:	f04f 0a00 	mov.w	sl, #0
 80113fc:	4604      	mov	r4, r0
 80113fe:	f04f 0b00 	mov.w	fp, #0
 8011402:	961b      	str	r6, [sp, #108]	; 0x6c
 8011404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011406:	781a      	ldrb	r2, [r3, #0]
 8011408:	2a0d      	cmp	r2, #13
 801140a:	d832      	bhi.n	8011472 <_strtod_l+0x9a>
 801140c:	2a09      	cmp	r2, #9
 801140e:	d236      	bcs.n	801147e <_strtod_l+0xa6>
 8011410:	2a00      	cmp	r2, #0
 8011412:	d03e      	beq.n	8011492 <_strtod_l+0xba>
 8011414:	2300      	movs	r3, #0
 8011416:	930d      	str	r3, [sp, #52]	; 0x34
 8011418:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801141a:	782b      	ldrb	r3, [r5, #0]
 801141c:	2b30      	cmp	r3, #48	; 0x30
 801141e:	f040 80ac 	bne.w	801157a <_strtod_l+0x1a2>
 8011422:	786b      	ldrb	r3, [r5, #1]
 8011424:	2b58      	cmp	r3, #88	; 0x58
 8011426:	d001      	beq.n	801142c <_strtod_l+0x54>
 8011428:	2b78      	cmp	r3, #120	; 0x78
 801142a:	d167      	bne.n	80114fc <_strtod_l+0x124>
 801142c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801142e:	9301      	str	r3, [sp, #4]
 8011430:	ab1c      	add	r3, sp, #112	; 0x70
 8011432:	9300      	str	r3, [sp, #0]
 8011434:	9702      	str	r7, [sp, #8]
 8011436:	ab1d      	add	r3, sp, #116	; 0x74
 8011438:	4a88      	ldr	r2, [pc, #544]	; (801165c <_strtod_l+0x284>)
 801143a:	a91b      	add	r1, sp, #108	; 0x6c
 801143c:	4648      	mov	r0, r9
 801143e:	f001 ff2c 	bl	801329a <__gethex>
 8011442:	f010 0407 	ands.w	r4, r0, #7
 8011446:	4606      	mov	r6, r0
 8011448:	d005      	beq.n	8011456 <_strtod_l+0x7e>
 801144a:	2c06      	cmp	r4, #6
 801144c:	d12b      	bne.n	80114a6 <_strtod_l+0xce>
 801144e:	3501      	adds	r5, #1
 8011450:	2300      	movs	r3, #0
 8011452:	951b      	str	r5, [sp, #108]	; 0x6c
 8011454:	930d      	str	r3, [sp, #52]	; 0x34
 8011456:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011458:	2b00      	cmp	r3, #0
 801145a:	f040 859a 	bne.w	8011f92 <_strtod_l+0xbba>
 801145e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011460:	b1e3      	cbz	r3, 801149c <_strtod_l+0xc4>
 8011462:	4652      	mov	r2, sl
 8011464:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011468:	ec43 2b10 	vmov	d0, r2, r3
 801146c:	b021      	add	sp, #132	; 0x84
 801146e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011472:	2a2b      	cmp	r2, #43	; 0x2b
 8011474:	d015      	beq.n	80114a2 <_strtod_l+0xca>
 8011476:	2a2d      	cmp	r2, #45	; 0x2d
 8011478:	d004      	beq.n	8011484 <_strtod_l+0xac>
 801147a:	2a20      	cmp	r2, #32
 801147c:	d1ca      	bne.n	8011414 <_strtod_l+0x3c>
 801147e:	3301      	adds	r3, #1
 8011480:	931b      	str	r3, [sp, #108]	; 0x6c
 8011482:	e7bf      	b.n	8011404 <_strtod_l+0x2c>
 8011484:	2201      	movs	r2, #1
 8011486:	920d      	str	r2, [sp, #52]	; 0x34
 8011488:	1c5a      	adds	r2, r3, #1
 801148a:	921b      	str	r2, [sp, #108]	; 0x6c
 801148c:	785b      	ldrb	r3, [r3, #1]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d1c2      	bne.n	8011418 <_strtod_l+0x40>
 8011492:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011494:	961b      	str	r6, [sp, #108]	; 0x6c
 8011496:	2b00      	cmp	r3, #0
 8011498:	f040 8579 	bne.w	8011f8e <_strtod_l+0xbb6>
 801149c:	4652      	mov	r2, sl
 801149e:	465b      	mov	r3, fp
 80114a0:	e7e2      	b.n	8011468 <_strtod_l+0x90>
 80114a2:	2200      	movs	r2, #0
 80114a4:	e7ef      	b.n	8011486 <_strtod_l+0xae>
 80114a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80114a8:	b13a      	cbz	r2, 80114ba <_strtod_l+0xe2>
 80114aa:	2135      	movs	r1, #53	; 0x35
 80114ac:	a81e      	add	r0, sp, #120	; 0x78
 80114ae:	f002 fe1b 	bl	80140e8 <__copybits>
 80114b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80114b4:	4648      	mov	r0, r9
 80114b6:	f002 fa87 	bl	80139c8 <_Bfree>
 80114ba:	3c01      	subs	r4, #1
 80114bc:	2c04      	cmp	r4, #4
 80114be:	d806      	bhi.n	80114ce <_strtod_l+0xf6>
 80114c0:	e8df f004 	tbb	[pc, r4]
 80114c4:	1714030a 	.word	0x1714030a
 80114c8:	0a          	.byte	0x0a
 80114c9:	00          	.byte	0x00
 80114ca:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80114ce:	0730      	lsls	r0, r6, #28
 80114d0:	d5c1      	bpl.n	8011456 <_strtod_l+0x7e>
 80114d2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80114d6:	e7be      	b.n	8011456 <_strtod_l+0x7e>
 80114d8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80114dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80114de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80114e2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80114e6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80114ea:	e7f0      	b.n	80114ce <_strtod_l+0xf6>
 80114ec:	f8df b170 	ldr.w	fp, [pc, #368]	; 8011660 <_strtod_l+0x288>
 80114f0:	e7ed      	b.n	80114ce <_strtod_l+0xf6>
 80114f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80114f6:	f04f 3aff 	mov.w	sl, #4294967295
 80114fa:	e7e8      	b.n	80114ce <_strtod_l+0xf6>
 80114fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80114fe:	1c5a      	adds	r2, r3, #1
 8011500:	921b      	str	r2, [sp, #108]	; 0x6c
 8011502:	785b      	ldrb	r3, [r3, #1]
 8011504:	2b30      	cmp	r3, #48	; 0x30
 8011506:	d0f9      	beq.n	80114fc <_strtod_l+0x124>
 8011508:	2b00      	cmp	r3, #0
 801150a:	d0a4      	beq.n	8011456 <_strtod_l+0x7e>
 801150c:	2301      	movs	r3, #1
 801150e:	2500      	movs	r5, #0
 8011510:	9306      	str	r3, [sp, #24]
 8011512:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011514:	9308      	str	r3, [sp, #32]
 8011516:	9507      	str	r5, [sp, #28]
 8011518:	9505      	str	r5, [sp, #20]
 801151a:	220a      	movs	r2, #10
 801151c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801151e:	7807      	ldrb	r7, [r0, #0]
 8011520:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011524:	b2d9      	uxtb	r1, r3
 8011526:	2909      	cmp	r1, #9
 8011528:	d929      	bls.n	801157e <_strtod_l+0x1a6>
 801152a:	4622      	mov	r2, r4
 801152c:	f8d8 1000 	ldr.w	r1, [r8]
 8011530:	f003 f8f9 	bl	8014726 <strncmp>
 8011534:	2800      	cmp	r0, #0
 8011536:	d031      	beq.n	801159c <_strtod_l+0x1c4>
 8011538:	2000      	movs	r0, #0
 801153a:	9c05      	ldr	r4, [sp, #20]
 801153c:	9004      	str	r0, [sp, #16]
 801153e:	463b      	mov	r3, r7
 8011540:	4602      	mov	r2, r0
 8011542:	2b65      	cmp	r3, #101	; 0x65
 8011544:	d001      	beq.n	801154a <_strtod_l+0x172>
 8011546:	2b45      	cmp	r3, #69	; 0x45
 8011548:	d114      	bne.n	8011574 <_strtod_l+0x19c>
 801154a:	b924      	cbnz	r4, 8011556 <_strtod_l+0x17e>
 801154c:	b910      	cbnz	r0, 8011554 <_strtod_l+0x17c>
 801154e:	9b06      	ldr	r3, [sp, #24]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d09e      	beq.n	8011492 <_strtod_l+0xba>
 8011554:	2400      	movs	r4, #0
 8011556:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011558:	1c73      	adds	r3, r6, #1
 801155a:	931b      	str	r3, [sp, #108]	; 0x6c
 801155c:	7873      	ldrb	r3, [r6, #1]
 801155e:	2b2b      	cmp	r3, #43	; 0x2b
 8011560:	d078      	beq.n	8011654 <_strtod_l+0x27c>
 8011562:	2b2d      	cmp	r3, #45	; 0x2d
 8011564:	d070      	beq.n	8011648 <_strtod_l+0x270>
 8011566:	f04f 0c00 	mov.w	ip, #0
 801156a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801156e:	2f09      	cmp	r7, #9
 8011570:	d97c      	bls.n	801166c <_strtod_l+0x294>
 8011572:	961b      	str	r6, [sp, #108]	; 0x6c
 8011574:	f04f 0e00 	mov.w	lr, #0
 8011578:	e09a      	b.n	80116b0 <_strtod_l+0x2d8>
 801157a:	2300      	movs	r3, #0
 801157c:	e7c7      	b.n	801150e <_strtod_l+0x136>
 801157e:	9905      	ldr	r1, [sp, #20]
 8011580:	2908      	cmp	r1, #8
 8011582:	bfdd      	ittte	le
 8011584:	9907      	ldrle	r1, [sp, #28]
 8011586:	fb02 3301 	mlale	r3, r2, r1, r3
 801158a:	9307      	strle	r3, [sp, #28]
 801158c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011590:	9b05      	ldr	r3, [sp, #20]
 8011592:	3001      	adds	r0, #1
 8011594:	3301      	adds	r3, #1
 8011596:	9305      	str	r3, [sp, #20]
 8011598:	901b      	str	r0, [sp, #108]	; 0x6c
 801159a:	e7bf      	b.n	801151c <_strtod_l+0x144>
 801159c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801159e:	191a      	adds	r2, r3, r4
 80115a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80115a2:	9a05      	ldr	r2, [sp, #20]
 80115a4:	5d1b      	ldrb	r3, [r3, r4]
 80115a6:	2a00      	cmp	r2, #0
 80115a8:	d037      	beq.n	801161a <_strtod_l+0x242>
 80115aa:	9c05      	ldr	r4, [sp, #20]
 80115ac:	4602      	mov	r2, r0
 80115ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80115b2:	2909      	cmp	r1, #9
 80115b4:	d913      	bls.n	80115de <_strtod_l+0x206>
 80115b6:	2101      	movs	r1, #1
 80115b8:	9104      	str	r1, [sp, #16]
 80115ba:	e7c2      	b.n	8011542 <_strtod_l+0x16a>
 80115bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80115be:	1c5a      	adds	r2, r3, #1
 80115c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80115c2:	785b      	ldrb	r3, [r3, #1]
 80115c4:	3001      	adds	r0, #1
 80115c6:	2b30      	cmp	r3, #48	; 0x30
 80115c8:	d0f8      	beq.n	80115bc <_strtod_l+0x1e4>
 80115ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80115ce:	2a08      	cmp	r2, #8
 80115d0:	f200 84e4 	bhi.w	8011f9c <_strtod_l+0xbc4>
 80115d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80115d6:	9208      	str	r2, [sp, #32]
 80115d8:	4602      	mov	r2, r0
 80115da:	2000      	movs	r0, #0
 80115dc:	4604      	mov	r4, r0
 80115de:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80115e2:	f100 0101 	add.w	r1, r0, #1
 80115e6:	d012      	beq.n	801160e <_strtod_l+0x236>
 80115e8:	440a      	add	r2, r1
 80115ea:	eb00 0c04 	add.w	ip, r0, r4
 80115ee:	4621      	mov	r1, r4
 80115f0:	270a      	movs	r7, #10
 80115f2:	458c      	cmp	ip, r1
 80115f4:	d113      	bne.n	801161e <_strtod_l+0x246>
 80115f6:	1821      	adds	r1, r4, r0
 80115f8:	2908      	cmp	r1, #8
 80115fa:	f104 0401 	add.w	r4, r4, #1
 80115fe:	4404      	add	r4, r0
 8011600:	dc19      	bgt.n	8011636 <_strtod_l+0x25e>
 8011602:	9b07      	ldr	r3, [sp, #28]
 8011604:	210a      	movs	r1, #10
 8011606:	fb01 e303 	mla	r3, r1, r3, lr
 801160a:	9307      	str	r3, [sp, #28]
 801160c:	2100      	movs	r1, #0
 801160e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011610:	1c58      	adds	r0, r3, #1
 8011612:	901b      	str	r0, [sp, #108]	; 0x6c
 8011614:	785b      	ldrb	r3, [r3, #1]
 8011616:	4608      	mov	r0, r1
 8011618:	e7c9      	b.n	80115ae <_strtod_l+0x1d6>
 801161a:	9805      	ldr	r0, [sp, #20]
 801161c:	e7d3      	b.n	80115c6 <_strtod_l+0x1ee>
 801161e:	2908      	cmp	r1, #8
 8011620:	f101 0101 	add.w	r1, r1, #1
 8011624:	dc03      	bgt.n	801162e <_strtod_l+0x256>
 8011626:	9b07      	ldr	r3, [sp, #28]
 8011628:	437b      	muls	r3, r7
 801162a:	9307      	str	r3, [sp, #28]
 801162c:	e7e1      	b.n	80115f2 <_strtod_l+0x21a>
 801162e:	2910      	cmp	r1, #16
 8011630:	bfd8      	it	le
 8011632:	437d      	mulle	r5, r7
 8011634:	e7dd      	b.n	80115f2 <_strtod_l+0x21a>
 8011636:	2c10      	cmp	r4, #16
 8011638:	bfdc      	itt	le
 801163a:	210a      	movle	r1, #10
 801163c:	fb01 e505 	mlale	r5, r1, r5, lr
 8011640:	e7e4      	b.n	801160c <_strtod_l+0x234>
 8011642:	2301      	movs	r3, #1
 8011644:	9304      	str	r3, [sp, #16]
 8011646:	e781      	b.n	801154c <_strtod_l+0x174>
 8011648:	f04f 0c01 	mov.w	ip, #1
 801164c:	1cb3      	adds	r3, r6, #2
 801164e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011650:	78b3      	ldrb	r3, [r6, #2]
 8011652:	e78a      	b.n	801156a <_strtod_l+0x192>
 8011654:	f04f 0c00 	mov.w	ip, #0
 8011658:	e7f8      	b.n	801164c <_strtod_l+0x274>
 801165a:	bf00      	nop
 801165c:	08014b7c 	.word	0x08014b7c
 8011660:	7ff00000 	.word	0x7ff00000
 8011664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011666:	1c5f      	adds	r7, r3, #1
 8011668:	971b      	str	r7, [sp, #108]	; 0x6c
 801166a:	785b      	ldrb	r3, [r3, #1]
 801166c:	2b30      	cmp	r3, #48	; 0x30
 801166e:	d0f9      	beq.n	8011664 <_strtod_l+0x28c>
 8011670:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8011674:	2f08      	cmp	r7, #8
 8011676:	f63f af7d 	bhi.w	8011574 <_strtod_l+0x19c>
 801167a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801167e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011680:	930a      	str	r3, [sp, #40]	; 0x28
 8011682:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011684:	1c5f      	adds	r7, r3, #1
 8011686:	971b      	str	r7, [sp, #108]	; 0x6c
 8011688:	785b      	ldrb	r3, [r3, #1]
 801168a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801168e:	f1b8 0f09 	cmp.w	r8, #9
 8011692:	d937      	bls.n	8011704 <_strtod_l+0x32c>
 8011694:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011696:	1a7f      	subs	r7, r7, r1
 8011698:	2f08      	cmp	r7, #8
 801169a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801169e:	dc37      	bgt.n	8011710 <_strtod_l+0x338>
 80116a0:	45be      	cmp	lr, r7
 80116a2:	bfa8      	it	ge
 80116a4:	46be      	movge	lr, r7
 80116a6:	f1bc 0f00 	cmp.w	ip, #0
 80116aa:	d001      	beq.n	80116b0 <_strtod_l+0x2d8>
 80116ac:	f1ce 0e00 	rsb	lr, lr, #0
 80116b0:	2c00      	cmp	r4, #0
 80116b2:	d151      	bne.n	8011758 <_strtod_l+0x380>
 80116b4:	2800      	cmp	r0, #0
 80116b6:	f47f aece 	bne.w	8011456 <_strtod_l+0x7e>
 80116ba:	9a06      	ldr	r2, [sp, #24]
 80116bc:	2a00      	cmp	r2, #0
 80116be:	f47f aeca 	bne.w	8011456 <_strtod_l+0x7e>
 80116c2:	9a04      	ldr	r2, [sp, #16]
 80116c4:	2a00      	cmp	r2, #0
 80116c6:	f47f aee4 	bne.w	8011492 <_strtod_l+0xba>
 80116ca:	2b4e      	cmp	r3, #78	; 0x4e
 80116cc:	d027      	beq.n	801171e <_strtod_l+0x346>
 80116ce:	dc21      	bgt.n	8011714 <_strtod_l+0x33c>
 80116d0:	2b49      	cmp	r3, #73	; 0x49
 80116d2:	f47f aede 	bne.w	8011492 <_strtod_l+0xba>
 80116d6:	49a0      	ldr	r1, [pc, #640]	; (8011958 <_strtod_l+0x580>)
 80116d8:	a81b      	add	r0, sp, #108	; 0x6c
 80116da:	f002 f811 	bl	8013700 <__match>
 80116de:	2800      	cmp	r0, #0
 80116e0:	f43f aed7 	beq.w	8011492 <_strtod_l+0xba>
 80116e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80116e6:	499d      	ldr	r1, [pc, #628]	; (801195c <_strtod_l+0x584>)
 80116e8:	3b01      	subs	r3, #1
 80116ea:	a81b      	add	r0, sp, #108	; 0x6c
 80116ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80116ee:	f002 f807 	bl	8013700 <__match>
 80116f2:	b910      	cbnz	r0, 80116fa <_strtod_l+0x322>
 80116f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80116f6:	3301      	adds	r3, #1
 80116f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80116fa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8011970 <_strtod_l+0x598>
 80116fe:	f04f 0a00 	mov.w	sl, #0
 8011702:	e6a8      	b.n	8011456 <_strtod_l+0x7e>
 8011704:	210a      	movs	r1, #10
 8011706:	fb01 3e0e 	mla	lr, r1, lr, r3
 801170a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801170e:	e7b8      	b.n	8011682 <_strtod_l+0x2aa>
 8011710:	46be      	mov	lr, r7
 8011712:	e7c8      	b.n	80116a6 <_strtod_l+0x2ce>
 8011714:	2b69      	cmp	r3, #105	; 0x69
 8011716:	d0de      	beq.n	80116d6 <_strtod_l+0x2fe>
 8011718:	2b6e      	cmp	r3, #110	; 0x6e
 801171a:	f47f aeba 	bne.w	8011492 <_strtod_l+0xba>
 801171e:	4990      	ldr	r1, [pc, #576]	; (8011960 <_strtod_l+0x588>)
 8011720:	a81b      	add	r0, sp, #108	; 0x6c
 8011722:	f001 ffed 	bl	8013700 <__match>
 8011726:	2800      	cmp	r0, #0
 8011728:	f43f aeb3 	beq.w	8011492 <_strtod_l+0xba>
 801172c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	2b28      	cmp	r3, #40	; 0x28
 8011732:	d10e      	bne.n	8011752 <_strtod_l+0x37a>
 8011734:	aa1e      	add	r2, sp, #120	; 0x78
 8011736:	498b      	ldr	r1, [pc, #556]	; (8011964 <_strtod_l+0x58c>)
 8011738:	a81b      	add	r0, sp, #108	; 0x6c
 801173a:	f001 fff5 	bl	8013728 <__hexnan>
 801173e:	2805      	cmp	r0, #5
 8011740:	d107      	bne.n	8011752 <_strtod_l+0x37a>
 8011742:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011744:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8011748:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801174c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011750:	e681      	b.n	8011456 <_strtod_l+0x7e>
 8011752:	f8df b224 	ldr.w	fp, [pc, #548]	; 8011978 <_strtod_l+0x5a0>
 8011756:	e7d2      	b.n	80116fe <_strtod_l+0x326>
 8011758:	ebae 0302 	sub.w	r3, lr, r2
 801175c:	9306      	str	r3, [sp, #24]
 801175e:	9b05      	ldr	r3, [sp, #20]
 8011760:	9807      	ldr	r0, [sp, #28]
 8011762:	2b00      	cmp	r3, #0
 8011764:	bf08      	it	eq
 8011766:	4623      	moveq	r3, r4
 8011768:	2c10      	cmp	r4, #16
 801176a:	9305      	str	r3, [sp, #20]
 801176c:	46a0      	mov	r8, r4
 801176e:	bfa8      	it	ge
 8011770:	f04f 0810 	movge.w	r8, #16
 8011774:	f7ee fed6 	bl	8000524 <__aeabi_ui2d>
 8011778:	2c09      	cmp	r4, #9
 801177a:	4682      	mov	sl, r0
 801177c:	468b      	mov	fp, r1
 801177e:	dc13      	bgt.n	80117a8 <_strtod_l+0x3d0>
 8011780:	9b06      	ldr	r3, [sp, #24]
 8011782:	2b00      	cmp	r3, #0
 8011784:	f43f ae67 	beq.w	8011456 <_strtod_l+0x7e>
 8011788:	9b06      	ldr	r3, [sp, #24]
 801178a:	dd7a      	ble.n	8011882 <_strtod_l+0x4aa>
 801178c:	2b16      	cmp	r3, #22
 801178e:	dc61      	bgt.n	8011854 <_strtod_l+0x47c>
 8011790:	4a75      	ldr	r2, [pc, #468]	; (8011968 <_strtod_l+0x590>)
 8011792:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011796:	e9de 0100 	ldrd	r0, r1, [lr]
 801179a:	4652      	mov	r2, sl
 801179c:	465b      	mov	r3, fp
 801179e:	f7ee ff3b 	bl	8000618 <__aeabi_dmul>
 80117a2:	4682      	mov	sl, r0
 80117a4:	468b      	mov	fp, r1
 80117a6:	e656      	b.n	8011456 <_strtod_l+0x7e>
 80117a8:	4b6f      	ldr	r3, [pc, #444]	; (8011968 <_strtod_l+0x590>)
 80117aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80117ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80117b2:	f7ee ff31 	bl	8000618 <__aeabi_dmul>
 80117b6:	4606      	mov	r6, r0
 80117b8:	4628      	mov	r0, r5
 80117ba:	460f      	mov	r7, r1
 80117bc:	f7ee feb2 	bl	8000524 <__aeabi_ui2d>
 80117c0:	4602      	mov	r2, r0
 80117c2:	460b      	mov	r3, r1
 80117c4:	4630      	mov	r0, r6
 80117c6:	4639      	mov	r1, r7
 80117c8:	f7ee fd70 	bl	80002ac <__adddf3>
 80117cc:	2c0f      	cmp	r4, #15
 80117ce:	4682      	mov	sl, r0
 80117d0:	468b      	mov	fp, r1
 80117d2:	ddd5      	ble.n	8011780 <_strtod_l+0x3a8>
 80117d4:	9b06      	ldr	r3, [sp, #24]
 80117d6:	eba4 0808 	sub.w	r8, r4, r8
 80117da:	4498      	add	r8, r3
 80117dc:	f1b8 0f00 	cmp.w	r8, #0
 80117e0:	f340 8096 	ble.w	8011910 <_strtod_l+0x538>
 80117e4:	f018 030f 	ands.w	r3, r8, #15
 80117e8:	d00a      	beq.n	8011800 <_strtod_l+0x428>
 80117ea:	495f      	ldr	r1, [pc, #380]	; (8011968 <_strtod_l+0x590>)
 80117ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80117f0:	4652      	mov	r2, sl
 80117f2:	465b      	mov	r3, fp
 80117f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117f8:	f7ee ff0e 	bl	8000618 <__aeabi_dmul>
 80117fc:	4682      	mov	sl, r0
 80117fe:	468b      	mov	fp, r1
 8011800:	f038 080f 	bics.w	r8, r8, #15
 8011804:	d073      	beq.n	80118ee <_strtod_l+0x516>
 8011806:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801180a:	dd47      	ble.n	801189c <_strtod_l+0x4c4>
 801180c:	2400      	movs	r4, #0
 801180e:	46a0      	mov	r8, r4
 8011810:	9407      	str	r4, [sp, #28]
 8011812:	9405      	str	r4, [sp, #20]
 8011814:	2322      	movs	r3, #34	; 0x22
 8011816:	f8df b158 	ldr.w	fp, [pc, #344]	; 8011970 <_strtod_l+0x598>
 801181a:	f8c9 3000 	str.w	r3, [r9]
 801181e:	f04f 0a00 	mov.w	sl, #0
 8011822:	9b07      	ldr	r3, [sp, #28]
 8011824:	2b00      	cmp	r3, #0
 8011826:	f43f ae16 	beq.w	8011456 <_strtod_l+0x7e>
 801182a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801182c:	4648      	mov	r0, r9
 801182e:	f002 f8cb 	bl	80139c8 <_Bfree>
 8011832:	9905      	ldr	r1, [sp, #20]
 8011834:	4648      	mov	r0, r9
 8011836:	f002 f8c7 	bl	80139c8 <_Bfree>
 801183a:	4641      	mov	r1, r8
 801183c:	4648      	mov	r0, r9
 801183e:	f002 f8c3 	bl	80139c8 <_Bfree>
 8011842:	9907      	ldr	r1, [sp, #28]
 8011844:	4648      	mov	r0, r9
 8011846:	f002 f8bf 	bl	80139c8 <_Bfree>
 801184a:	4621      	mov	r1, r4
 801184c:	4648      	mov	r0, r9
 801184e:	f002 f8bb 	bl	80139c8 <_Bfree>
 8011852:	e600      	b.n	8011456 <_strtod_l+0x7e>
 8011854:	9a06      	ldr	r2, [sp, #24]
 8011856:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801185a:	4293      	cmp	r3, r2
 801185c:	dbba      	blt.n	80117d4 <_strtod_l+0x3fc>
 801185e:	4d42      	ldr	r5, [pc, #264]	; (8011968 <_strtod_l+0x590>)
 8011860:	f1c4 040f 	rsb	r4, r4, #15
 8011864:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011868:	4652      	mov	r2, sl
 801186a:	465b      	mov	r3, fp
 801186c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011870:	f7ee fed2 	bl	8000618 <__aeabi_dmul>
 8011874:	9b06      	ldr	r3, [sp, #24]
 8011876:	1b1c      	subs	r4, r3, r4
 8011878:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801187c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011880:	e78d      	b.n	801179e <_strtod_l+0x3c6>
 8011882:	f113 0f16 	cmn.w	r3, #22
 8011886:	dba5      	blt.n	80117d4 <_strtod_l+0x3fc>
 8011888:	4a37      	ldr	r2, [pc, #220]	; (8011968 <_strtod_l+0x590>)
 801188a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801188e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011892:	4650      	mov	r0, sl
 8011894:	4659      	mov	r1, fp
 8011896:	f7ee ffe9 	bl	800086c <__aeabi_ddiv>
 801189a:	e782      	b.n	80117a2 <_strtod_l+0x3ca>
 801189c:	2300      	movs	r3, #0
 801189e:	4e33      	ldr	r6, [pc, #204]	; (801196c <_strtod_l+0x594>)
 80118a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80118a4:	4650      	mov	r0, sl
 80118a6:	4659      	mov	r1, fp
 80118a8:	461d      	mov	r5, r3
 80118aa:	f1b8 0f01 	cmp.w	r8, #1
 80118ae:	dc21      	bgt.n	80118f4 <_strtod_l+0x51c>
 80118b0:	b10b      	cbz	r3, 80118b6 <_strtod_l+0x4de>
 80118b2:	4682      	mov	sl, r0
 80118b4:	468b      	mov	fp, r1
 80118b6:	4b2d      	ldr	r3, [pc, #180]	; (801196c <_strtod_l+0x594>)
 80118b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80118bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80118c0:	4652      	mov	r2, sl
 80118c2:	465b      	mov	r3, fp
 80118c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80118c8:	f7ee fea6 	bl	8000618 <__aeabi_dmul>
 80118cc:	4b28      	ldr	r3, [pc, #160]	; (8011970 <_strtod_l+0x598>)
 80118ce:	460a      	mov	r2, r1
 80118d0:	400b      	ands	r3, r1
 80118d2:	4928      	ldr	r1, [pc, #160]	; (8011974 <_strtod_l+0x59c>)
 80118d4:	428b      	cmp	r3, r1
 80118d6:	4682      	mov	sl, r0
 80118d8:	d898      	bhi.n	801180c <_strtod_l+0x434>
 80118da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80118de:	428b      	cmp	r3, r1
 80118e0:	bf86      	itte	hi
 80118e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801197c <_strtod_l+0x5a4>
 80118e6:	f04f 3aff 	movhi.w	sl, #4294967295
 80118ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80118ee:	2300      	movs	r3, #0
 80118f0:	9304      	str	r3, [sp, #16]
 80118f2:	e077      	b.n	80119e4 <_strtod_l+0x60c>
 80118f4:	f018 0f01 	tst.w	r8, #1
 80118f8:	d006      	beq.n	8011908 <_strtod_l+0x530>
 80118fa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80118fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011902:	f7ee fe89 	bl	8000618 <__aeabi_dmul>
 8011906:	2301      	movs	r3, #1
 8011908:	3501      	adds	r5, #1
 801190a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801190e:	e7cc      	b.n	80118aa <_strtod_l+0x4d2>
 8011910:	d0ed      	beq.n	80118ee <_strtod_l+0x516>
 8011912:	f1c8 0800 	rsb	r8, r8, #0
 8011916:	f018 020f 	ands.w	r2, r8, #15
 801191a:	d00a      	beq.n	8011932 <_strtod_l+0x55a>
 801191c:	4b12      	ldr	r3, [pc, #72]	; (8011968 <_strtod_l+0x590>)
 801191e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011922:	4650      	mov	r0, sl
 8011924:	4659      	mov	r1, fp
 8011926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192a:	f7ee ff9f 	bl	800086c <__aeabi_ddiv>
 801192e:	4682      	mov	sl, r0
 8011930:	468b      	mov	fp, r1
 8011932:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011936:	d0da      	beq.n	80118ee <_strtod_l+0x516>
 8011938:	f1b8 0f1f 	cmp.w	r8, #31
 801193c:	dd20      	ble.n	8011980 <_strtod_l+0x5a8>
 801193e:	2400      	movs	r4, #0
 8011940:	46a0      	mov	r8, r4
 8011942:	9407      	str	r4, [sp, #28]
 8011944:	9405      	str	r4, [sp, #20]
 8011946:	2322      	movs	r3, #34	; 0x22
 8011948:	f04f 0a00 	mov.w	sl, #0
 801194c:	f04f 0b00 	mov.w	fp, #0
 8011950:	f8c9 3000 	str.w	r3, [r9]
 8011954:	e765      	b.n	8011822 <_strtod_l+0x44a>
 8011956:	bf00      	nop
 8011958:	08014b45 	.word	0x08014b45
 801195c:	08014bd3 	.word	0x08014bd3
 8011960:	08014b4d 	.word	0x08014b4d
 8011964:	08014b90 	.word	0x08014b90
 8011968:	08014c78 	.word	0x08014c78
 801196c:	08014c50 	.word	0x08014c50
 8011970:	7ff00000 	.word	0x7ff00000
 8011974:	7ca00000 	.word	0x7ca00000
 8011978:	fff80000 	.word	0xfff80000
 801197c:	7fefffff 	.word	0x7fefffff
 8011980:	f018 0310 	ands.w	r3, r8, #16
 8011984:	bf18      	it	ne
 8011986:	236a      	movne	r3, #106	; 0x6a
 8011988:	4da0      	ldr	r5, [pc, #640]	; (8011c0c <_strtod_l+0x834>)
 801198a:	9304      	str	r3, [sp, #16]
 801198c:	4650      	mov	r0, sl
 801198e:	4659      	mov	r1, fp
 8011990:	2300      	movs	r3, #0
 8011992:	f1b8 0f00 	cmp.w	r8, #0
 8011996:	f300 810a 	bgt.w	8011bae <_strtod_l+0x7d6>
 801199a:	b10b      	cbz	r3, 80119a0 <_strtod_l+0x5c8>
 801199c:	4682      	mov	sl, r0
 801199e:	468b      	mov	fp, r1
 80119a0:	9b04      	ldr	r3, [sp, #16]
 80119a2:	b1bb      	cbz	r3, 80119d4 <_strtod_l+0x5fc>
 80119a4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80119a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	4659      	mov	r1, fp
 80119b0:	dd10      	ble.n	80119d4 <_strtod_l+0x5fc>
 80119b2:	2b1f      	cmp	r3, #31
 80119b4:	f340 8107 	ble.w	8011bc6 <_strtod_l+0x7ee>
 80119b8:	2b34      	cmp	r3, #52	; 0x34
 80119ba:	bfde      	ittt	le
 80119bc:	3b20      	suble	r3, #32
 80119be:	f04f 32ff 	movle.w	r2, #4294967295
 80119c2:	fa02 f303 	lslle.w	r3, r2, r3
 80119c6:	f04f 0a00 	mov.w	sl, #0
 80119ca:	bfcc      	ite	gt
 80119cc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80119d0:	ea03 0b01 	andle.w	fp, r3, r1
 80119d4:	2200      	movs	r2, #0
 80119d6:	2300      	movs	r3, #0
 80119d8:	4650      	mov	r0, sl
 80119da:	4659      	mov	r1, fp
 80119dc:	f7ef f884 	bl	8000ae8 <__aeabi_dcmpeq>
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d1ac      	bne.n	801193e <_strtod_l+0x566>
 80119e4:	9b07      	ldr	r3, [sp, #28]
 80119e6:	9300      	str	r3, [sp, #0]
 80119e8:	9a05      	ldr	r2, [sp, #20]
 80119ea:	9908      	ldr	r1, [sp, #32]
 80119ec:	4623      	mov	r3, r4
 80119ee:	4648      	mov	r0, r9
 80119f0:	f002 f83c 	bl	8013a6c <__s2b>
 80119f4:	9007      	str	r0, [sp, #28]
 80119f6:	2800      	cmp	r0, #0
 80119f8:	f43f af08 	beq.w	801180c <_strtod_l+0x434>
 80119fc:	9a06      	ldr	r2, [sp, #24]
 80119fe:	9b06      	ldr	r3, [sp, #24]
 8011a00:	2a00      	cmp	r2, #0
 8011a02:	f1c3 0300 	rsb	r3, r3, #0
 8011a06:	bfa8      	it	ge
 8011a08:	2300      	movge	r3, #0
 8011a0a:	930e      	str	r3, [sp, #56]	; 0x38
 8011a0c:	2400      	movs	r4, #0
 8011a0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011a12:	9316      	str	r3, [sp, #88]	; 0x58
 8011a14:	46a0      	mov	r8, r4
 8011a16:	9b07      	ldr	r3, [sp, #28]
 8011a18:	4648      	mov	r0, r9
 8011a1a:	6859      	ldr	r1, [r3, #4]
 8011a1c:	f001 ffa0 	bl	8013960 <_Balloc>
 8011a20:	9005      	str	r0, [sp, #20]
 8011a22:	2800      	cmp	r0, #0
 8011a24:	f43f aef6 	beq.w	8011814 <_strtod_l+0x43c>
 8011a28:	9b07      	ldr	r3, [sp, #28]
 8011a2a:	691a      	ldr	r2, [r3, #16]
 8011a2c:	3202      	adds	r2, #2
 8011a2e:	f103 010c 	add.w	r1, r3, #12
 8011a32:	0092      	lsls	r2, r2, #2
 8011a34:	300c      	adds	r0, #12
 8011a36:	f7fe fc59 	bl	80102ec <memcpy>
 8011a3a:	aa1e      	add	r2, sp, #120	; 0x78
 8011a3c:	a91d      	add	r1, sp, #116	; 0x74
 8011a3e:	ec4b ab10 	vmov	d0, sl, fp
 8011a42:	4648      	mov	r0, r9
 8011a44:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011a48:	f002 facc 	bl	8013fe4 <__d2b>
 8011a4c:	901c      	str	r0, [sp, #112]	; 0x70
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	f43f aee0 	beq.w	8011814 <_strtod_l+0x43c>
 8011a54:	2101      	movs	r1, #1
 8011a56:	4648      	mov	r0, r9
 8011a58:	f002 f894 	bl	8013b84 <__i2b>
 8011a5c:	4680      	mov	r8, r0
 8011a5e:	2800      	cmp	r0, #0
 8011a60:	f43f aed8 	beq.w	8011814 <_strtod_l+0x43c>
 8011a64:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011a66:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011a68:	2e00      	cmp	r6, #0
 8011a6a:	bfab      	itete	ge
 8011a6c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011a6e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8011a70:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8011a72:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8011a74:	bfac      	ite	ge
 8011a76:	18f7      	addge	r7, r6, r3
 8011a78:	1b9d      	sublt	r5, r3, r6
 8011a7a:	9b04      	ldr	r3, [sp, #16]
 8011a7c:	1af6      	subs	r6, r6, r3
 8011a7e:	4416      	add	r6, r2
 8011a80:	4b63      	ldr	r3, [pc, #396]	; (8011c10 <_strtod_l+0x838>)
 8011a82:	3e01      	subs	r6, #1
 8011a84:	429e      	cmp	r6, r3
 8011a86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011a8a:	f280 80af 	bge.w	8011bec <_strtod_l+0x814>
 8011a8e:	1b9b      	subs	r3, r3, r6
 8011a90:	2b1f      	cmp	r3, #31
 8011a92:	eba2 0203 	sub.w	r2, r2, r3
 8011a96:	f04f 0101 	mov.w	r1, #1
 8011a9a:	f300 809b 	bgt.w	8011bd4 <_strtod_l+0x7fc>
 8011a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8011aa2:	930f      	str	r3, [sp, #60]	; 0x3c
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8011aa8:	18be      	adds	r6, r7, r2
 8011aaa:	9b04      	ldr	r3, [sp, #16]
 8011aac:	42b7      	cmp	r7, r6
 8011aae:	4415      	add	r5, r2
 8011ab0:	441d      	add	r5, r3
 8011ab2:	463b      	mov	r3, r7
 8011ab4:	bfa8      	it	ge
 8011ab6:	4633      	movge	r3, r6
 8011ab8:	42ab      	cmp	r3, r5
 8011aba:	bfa8      	it	ge
 8011abc:	462b      	movge	r3, r5
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	bfc2      	ittt	gt
 8011ac2:	1af6      	subgt	r6, r6, r3
 8011ac4:	1aed      	subgt	r5, r5, r3
 8011ac6:	1aff      	subgt	r7, r7, r3
 8011ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011aca:	b1bb      	cbz	r3, 8011afc <_strtod_l+0x724>
 8011acc:	4641      	mov	r1, r8
 8011ace:	461a      	mov	r2, r3
 8011ad0:	4648      	mov	r0, r9
 8011ad2:	f002 f8f7 	bl	8013cc4 <__pow5mult>
 8011ad6:	4680      	mov	r8, r0
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	f43f ae9b 	beq.w	8011814 <_strtod_l+0x43c>
 8011ade:	4601      	mov	r1, r0
 8011ae0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011ae2:	4648      	mov	r0, r9
 8011ae4:	f002 f857 	bl	8013b96 <__multiply>
 8011ae8:	900c      	str	r0, [sp, #48]	; 0x30
 8011aea:	2800      	cmp	r0, #0
 8011aec:	f43f ae92 	beq.w	8011814 <_strtod_l+0x43c>
 8011af0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011af2:	4648      	mov	r0, r9
 8011af4:	f001 ff68 	bl	80139c8 <_Bfree>
 8011af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011afa:	931c      	str	r3, [sp, #112]	; 0x70
 8011afc:	2e00      	cmp	r6, #0
 8011afe:	dc7a      	bgt.n	8011bf6 <_strtod_l+0x81e>
 8011b00:	9b06      	ldr	r3, [sp, #24]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	dd08      	ble.n	8011b18 <_strtod_l+0x740>
 8011b06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b08:	9905      	ldr	r1, [sp, #20]
 8011b0a:	4648      	mov	r0, r9
 8011b0c:	f002 f8da 	bl	8013cc4 <__pow5mult>
 8011b10:	9005      	str	r0, [sp, #20]
 8011b12:	2800      	cmp	r0, #0
 8011b14:	f43f ae7e 	beq.w	8011814 <_strtod_l+0x43c>
 8011b18:	2d00      	cmp	r5, #0
 8011b1a:	dd08      	ble.n	8011b2e <_strtod_l+0x756>
 8011b1c:	462a      	mov	r2, r5
 8011b1e:	9905      	ldr	r1, [sp, #20]
 8011b20:	4648      	mov	r0, r9
 8011b22:	f002 f91d 	bl	8013d60 <__lshift>
 8011b26:	9005      	str	r0, [sp, #20]
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	f43f ae73 	beq.w	8011814 <_strtod_l+0x43c>
 8011b2e:	2f00      	cmp	r7, #0
 8011b30:	dd08      	ble.n	8011b44 <_strtod_l+0x76c>
 8011b32:	4641      	mov	r1, r8
 8011b34:	463a      	mov	r2, r7
 8011b36:	4648      	mov	r0, r9
 8011b38:	f002 f912 	bl	8013d60 <__lshift>
 8011b3c:	4680      	mov	r8, r0
 8011b3e:	2800      	cmp	r0, #0
 8011b40:	f43f ae68 	beq.w	8011814 <_strtod_l+0x43c>
 8011b44:	9a05      	ldr	r2, [sp, #20]
 8011b46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011b48:	4648      	mov	r0, r9
 8011b4a:	f002 f977 	bl	8013e3c <__mdiff>
 8011b4e:	4604      	mov	r4, r0
 8011b50:	2800      	cmp	r0, #0
 8011b52:	f43f ae5f 	beq.w	8011814 <_strtod_l+0x43c>
 8011b56:	68c3      	ldr	r3, [r0, #12]
 8011b58:	930c      	str	r3, [sp, #48]	; 0x30
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	60c3      	str	r3, [r0, #12]
 8011b5e:	4641      	mov	r1, r8
 8011b60:	f002 f952 	bl	8013e08 <__mcmp>
 8011b64:	2800      	cmp	r0, #0
 8011b66:	da55      	bge.n	8011c14 <_strtod_l+0x83c>
 8011b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b6a:	b9e3      	cbnz	r3, 8011ba6 <_strtod_l+0x7ce>
 8011b6c:	f1ba 0f00 	cmp.w	sl, #0
 8011b70:	d119      	bne.n	8011ba6 <_strtod_l+0x7ce>
 8011b72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b76:	b9b3      	cbnz	r3, 8011ba6 <_strtod_l+0x7ce>
 8011b78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011b7c:	0d1b      	lsrs	r3, r3, #20
 8011b7e:	051b      	lsls	r3, r3, #20
 8011b80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011b84:	d90f      	bls.n	8011ba6 <_strtod_l+0x7ce>
 8011b86:	6963      	ldr	r3, [r4, #20]
 8011b88:	b913      	cbnz	r3, 8011b90 <_strtod_l+0x7b8>
 8011b8a:	6923      	ldr	r3, [r4, #16]
 8011b8c:	2b01      	cmp	r3, #1
 8011b8e:	dd0a      	ble.n	8011ba6 <_strtod_l+0x7ce>
 8011b90:	4621      	mov	r1, r4
 8011b92:	2201      	movs	r2, #1
 8011b94:	4648      	mov	r0, r9
 8011b96:	f002 f8e3 	bl	8013d60 <__lshift>
 8011b9a:	4641      	mov	r1, r8
 8011b9c:	4604      	mov	r4, r0
 8011b9e:	f002 f933 	bl	8013e08 <__mcmp>
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	dc67      	bgt.n	8011c76 <_strtod_l+0x89e>
 8011ba6:	9b04      	ldr	r3, [sp, #16]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d171      	bne.n	8011c90 <_strtod_l+0x8b8>
 8011bac:	e63d      	b.n	801182a <_strtod_l+0x452>
 8011bae:	f018 0f01 	tst.w	r8, #1
 8011bb2:	d004      	beq.n	8011bbe <_strtod_l+0x7e6>
 8011bb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011bb8:	f7ee fd2e 	bl	8000618 <__aeabi_dmul>
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011bc2:	3508      	adds	r5, #8
 8011bc4:	e6e5      	b.n	8011992 <_strtod_l+0x5ba>
 8011bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8011bca:	fa02 f303 	lsl.w	r3, r2, r3
 8011bce:	ea03 0a0a 	and.w	sl, r3, sl
 8011bd2:	e6ff      	b.n	80119d4 <_strtod_l+0x5fc>
 8011bd4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011bd8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011bdc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011be0:	36e2      	adds	r6, #226	; 0xe2
 8011be2:	fa01 f306 	lsl.w	r3, r1, r6
 8011be6:	930a      	str	r3, [sp, #40]	; 0x28
 8011be8:	910f      	str	r1, [sp, #60]	; 0x3c
 8011bea:	e75d      	b.n	8011aa8 <_strtod_l+0x6d0>
 8011bec:	2300      	movs	r3, #0
 8011bee:	930a      	str	r3, [sp, #40]	; 0x28
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	930f      	str	r3, [sp, #60]	; 0x3c
 8011bf4:	e758      	b.n	8011aa8 <_strtod_l+0x6d0>
 8011bf6:	4632      	mov	r2, r6
 8011bf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011bfa:	4648      	mov	r0, r9
 8011bfc:	f002 f8b0 	bl	8013d60 <__lshift>
 8011c00:	901c      	str	r0, [sp, #112]	; 0x70
 8011c02:	2800      	cmp	r0, #0
 8011c04:	f47f af7c 	bne.w	8011b00 <_strtod_l+0x728>
 8011c08:	e604      	b.n	8011814 <_strtod_l+0x43c>
 8011c0a:	bf00      	nop
 8011c0c:	08014ba8 	.word	0x08014ba8
 8011c10:	fffffc02 	.word	0xfffffc02
 8011c14:	465d      	mov	r5, fp
 8011c16:	f040 8086 	bne.w	8011d26 <_strtod_l+0x94e>
 8011c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011c20:	b32a      	cbz	r2, 8011c6e <_strtod_l+0x896>
 8011c22:	4aaf      	ldr	r2, [pc, #700]	; (8011ee0 <_strtod_l+0xb08>)
 8011c24:	4293      	cmp	r3, r2
 8011c26:	d153      	bne.n	8011cd0 <_strtod_l+0x8f8>
 8011c28:	9b04      	ldr	r3, [sp, #16]
 8011c2a:	4650      	mov	r0, sl
 8011c2c:	b1d3      	cbz	r3, 8011c64 <_strtod_l+0x88c>
 8011c2e:	4aad      	ldr	r2, [pc, #692]	; (8011ee4 <_strtod_l+0xb0c>)
 8011c30:	402a      	ands	r2, r5
 8011c32:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011c36:	f04f 31ff 	mov.w	r1, #4294967295
 8011c3a:	d816      	bhi.n	8011c6a <_strtod_l+0x892>
 8011c3c:	0d12      	lsrs	r2, r2, #20
 8011c3e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011c42:	fa01 f303 	lsl.w	r3, r1, r3
 8011c46:	4298      	cmp	r0, r3
 8011c48:	d142      	bne.n	8011cd0 <_strtod_l+0x8f8>
 8011c4a:	4ba7      	ldr	r3, [pc, #668]	; (8011ee8 <_strtod_l+0xb10>)
 8011c4c:	429d      	cmp	r5, r3
 8011c4e:	d102      	bne.n	8011c56 <_strtod_l+0x87e>
 8011c50:	3001      	adds	r0, #1
 8011c52:	f43f addf 	beq.w	8011814 <_strtod_l+0x43c>
 8011c56:	4ba3      	ldr	r3, [pc, #652]	; (8011ee4 <_strtod_l+0xb0c>)
 8011c58:	402b      	ands	r3, r5
 8011c5a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011c5e:	f04f 0a00 	mov.w	sl, #0
 8011c62:	e7a0      	b.n	8011ba6 <_strtod_l+0x7ce>
 8011c64:	f04f 33ff 	mov.w	r3, #4294967295
 8011c68:	e7ed      	b.n	8011c46 <_strtod_l+0x86e>
 8011c6a:	460b      	mov	r3, r1
 8011c6c:	e7eb      	b.n	8011c46 <_strtod_l+0x86e>
 8011c6e:	bb7b      	cbnz	r3, 8011cd0 <_strtod_l+0x8f8>
 8011c70:	f1ba 0f00 	cmp.w	sl, #0
 8011c74:	d12c      	bne.n	8011cd0 <_strtod_l+0x8f8>
 8011c76:	9904      	ldr	r1, [sp, #16]
 8011c78:	4a9a      	ldr	r2, [pc, #616]	; (8011ee4 <_strtod_l+0xb0c>)
 8011c7a:	465b      	mov	r3, fp
 8011c7c:	b1f1      	cbz	r1, 8011cbc <_strtod_l+0x8e4>
 8011c7e:	ea02 010b 	and.w	r1, r2, fp
 8011c82:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011c86:	dc19      	bgt.n	8011cbc <_strtod_l+0x8e4>
 8011c88:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011c8c:	f77f ae5b 	ble.w	8011946 <_strtod_l+0x56e>
 8011c90:	4a96      	ldr	r2, [pc, #600]	; (8011eec <_strtod_l+0xb14>)
 8011c92:	2300      	movs	r3, #0
 8011c94:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011c98:	4650      	mov	r0, sl
 8011c9a:	4659      	mov	r1, fp
 8011c9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011ca0:	f7ee fcba 	bl	8000618 <__aeabi_dmul>
 8011ca4:	4682      	mov	sl, r0
 8011ca6:	468b      	mov	fp, r1
 8011ca8:	2900      	cmp	r1, #0
 8011caa:	f47f adbe 	bne.w	801182a <_strtod_l+0x452>
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	f47f adbb 	bne.w	801182a <_strtod_l+0x452>
 8011cb4:	2322      	movs	r3, #34	; 0x22
 8011cb6:	f8c9 3000 	str.w	r3, [r9]
 8011cba:	e5b6      	b.n	801182a <_strtod_l+0x452>
 8011cbc:	4013      	ands	r3, r2
 8011cbe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011cc2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011cc6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011cca:	f04f 3aff 	mov.w	sl, #4294967295
 8011cce:	e76a      	b.n	8011ba6 <_strtod_l+0x7ce>
 8011cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cd2:	b193      	cbz	r3, 8011cfa <_strtod_l+0x922>
 8011cd4:	422b      	tst	r3, r5
 8011cd6:	f43f af66 	beq.w	8011ba6 <_strtod_l+0x7ce>
 8011cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cdc:	9a04      	ldr	r2, [sp, #16]
 8011cde:	4650      	mov	r0, sl
 8011ce0:	4659      	mov	r1, fp
 8011ce2:	b173      	cbz	r3, 8011d02 <_strtod_l+0x92a>
 8011ce4:	f7ff fb5c 	bl	80113a0 <sulp>
 8011ce8:	4602      	mov	r2, r0
 8011cea:	460b      	mov	r3, r1
 8011cec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011cf0:	f7ee fadc 	bl	80002ac <__adddf3>
 8011cf4:	4682      	mov	sl, r0
 8011cf6:	468b      	mov	fp, r1
 8011cf8:	e755      	b.n	8011ba6 <_strtod_l+0x7ce>
 8011cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011cfc:	ea13 0f0a 	tst.w	r3, sl
 8011d00:	e7e9      	b.n	8011cd6 <_strtod_l+0x8fe>
 8011d02:	f7ff fb4d 	bl	80113a0 <sulp>
 8011d06:	4602      	mov	r2, r0
 8011d08:	460b      	mov	r3, r1
 8011d0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011d0e:	f7ee facb 	bl	80002a8 <__aeabi_dsub>
 8011d12:	2200      	movs	r2, #0
 8011d14:	2300      	movs	r3, #0
 8011d16:	4682      	mov	sl, r0
 8011d18:	468b      	mov	fp, r1
 8011d1a:	f7ee fee5 	bl	8000ae8 <__aeabi_dcmpeq>
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	f47f ae11 	bne.w	8011946 <_strtod_l+0x56e>
 8011d24:	e73f      	b.n	8011ba6 <_strtod_l+0x7ce>
 8011d26:	4641      	mov	r1, r8
 8011d28:	4620      	mov	r0, r4
 8011d2a:	f002 f9aa 	bl	8014082 <__ratio>
 8011d2e:	ec57 6b10 	vmov	r6, r7, d0
 8011d32:	2200      	movs	r2, #0
 8011d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d38:	ee10 0a10 	vmov	r0, s0
 8011d3c:	4639      	mov	r1, r7
 8011d3e:	f7ee fee7 	bl	8000b10 <__aeabi_dcmple>
 8011d42:	2800      	cmp	r0, #0
 8011d44:	d077      	beq.n	8011e36 <_strtod_l+0xa5e>
 8011d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d04a      	beq.n	8011de2 <_strtod_l+0xa0a>
 8011d4c:	4b68      	ldr	r3, [pc, #416]	; (8011ef0 <_strtod_l+0xb18>)
 8011d4e:	2200      	movs	r2, #0
 8011d50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011d54:	4f66      	ldr	r7, [pc, #408]	; (8011ef0 <_strtod_l+0xb18>)
 8011d56:	2600      	movs	r6, #0
 8011d58:	4b62      	ldr	r3, [pc, #392]	; (8011ee4 <_strtod_l+0xb0c>)
 8011d5a:	402b      	ands	r3, r5
 8011d5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d60:	4b64      	ldr	r3, [pc, #400]	; (8011ef4 <_strtod_l+0xb1c>)
 8011d62:	429a      	cmp	r2, r3
 8011d64:	f040 80ce 	bne.w	8011f04 <_strtod_l+0xb2c>
 8011d68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011d6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011d70:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8011d74:	ec4b ab10 	vmov	d0, sl, fp
 8011d78:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8011d7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011d80:	f002 f8ba 	bl	8013ef8 <__ulp>
 8011d84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011d88:	ec53 2b10 	vmov	r2, r3, d0
 8011d8c:	f7ee fc44 	bl	8000618 <__aeabi_dmul>
 8011d90:	4652      	mov	r2, sl
 8011d92:	465b      	mov	r3, fp
 8011d94:	f7ee fa8a 	bl	80002ac <__adddf3>
 8011d98:	460b      	mov	r3, r1
 8011d9a:	4952      	ldr	r1, [pc, #328]	; (8011ee4 <_strtod_l+0xb0c>)
 8011d9c:	4a56      	ldr	r2, [pc, #344]	; (8011ef8 <_strtod_l+0xb20>)
 8011d9e:	4019      	ands	r1, r3
 8011da0:	4291      	cmp	r1, r2
 8011da2:	4682      	mov	sl, r0
 8011da4:	d95b      	bls.n	8011e5e <_strtod_l+0xa86>
 8011da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011da8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011dac:	4293      	cmp	r3, r2
 8011dae:	d103      	bne.n	8011db8 <_strtod_l+0x9e0>
 8011db0:	9b08      	ldr	r3, [sp, #32]
 8011db2:	3301      	adds	r3, #1
 8011db4:	f43f ad2e 	beq.w	8011814 <_strtod_l+0x43c>
 8011db8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8011ee8 <_strtod_l+0xb10>
 8011dbc:	f04f 3aff 	mov.w	sl, #4294967295
 8011dc0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011dc2:	4648      	mov	r0, r9
 8011dc4:	f001 fe00 	bl	80139c8 <_Bfree>
 8011dc8:	9905      	ldr	r1, [sp, #20]
 8011dca:	4648      	mov	r0, r9
 8011dcc:	f001 fdfc 	bl	80139c8 <_Bfree>
 8011dd0:	4641      	mov	r1, r8
 8011dd2:	4648      	mov	r0, r9
 8011dd4:	f001 fdf8 	bl	80139c8 <_Bfree>
 8011dd8:	4621      	mov	r1, r4
 8011dda:	4648      	mov	r0, r9
 8011ddc:	f001 fdf4 	bl	80139c8 <_Bfree>
 8011de0:	e619      	b.n	8011a16 <_strtod_l+0x63e>
 8011de2:	f1ba 0f00 	cmp.w	sl, #0
 8011de6:	d11a      	bne.n	8011e1e <_strtod_l+0xa46>
 8011de8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011dec:	b9eb      	cbnz	r3, 8011e2a <_strtod_l+0xa52>
 8011dee:	2200      	movs	r2, #0
 8011df0:	4b3f      	ldr	r3, [pc, #252]	; (8011ef0 <_strtod_l+0xb18>)
 8011df2:	4630      	mov	r0, r6
 8011df4:	4639      	mov	r1, r7
 8011df6:	f7ee fe81 	bl	8000afc <__aeabi_dcmplt>
 8011dfa:	b9c8      	cbnz	r0, 8011e30 <_strtod_l+0xa58>
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	4639      	mov	r1, r7
 8011e00:	2200      	movs	r2, #0
 8011e02:	4b3e      	ldr	r3, [pc, #248]	; (8011efc <_strtod_l+0xb24>)
 8011e04:	f7ee fc08 	bl	8000618 <__aeabi_dmul>
 8011e08:	4606      	mov	r6, r0
 8011e0a:	460f      	mov	r7, r1
 8011e0c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011e10:	9618      	str	r6, [sp, #96]	; 0x60
 8011e12:	9319      	str	r3, [sp, #100]	; 0x64
 8011e14:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011e18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011e1c:	e79c      	b.n	8011d58 <_strtod_l+0x980>
 8011e1e:	f1ba 0f01 	cmp.w	sl, #1
 8011e22:	d102      	bne.n	8011e2a <_strtod_l+0xa52>
 8011e24:	2d00      	cmp	r5, #0
 8011e26:	f43f ad8e 	beq.w	8011946 <_strtod_l+0x56e>
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	4b34      	ldr	r3, [pc, #208]	; (8011f00 <_strtod_l+0xb28>)
 8011e2e:	e78f      	b.n	8011d50 <_strtod_l+0x978>
 8011e30:	2600      	movs	r6, #0
 8011e32:	4f32      	ldr	r7, [pc, #200]	; (8011efc <_strtod_l+0xb24>)
 8011e34:	e7ea      	b.n	8011e0c <_strtod_l+0xa34>
 8011e36:	4b31      	ldr	r3, [pc, #196]	; (8011efc <_strtod_l+0xb24>)
 8011e38:	4630      	mov	r0, r6
 8011e3a:	4639      	mov	r1, r7
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	f7ee fbeb 	bl	8000618 <__aeabi_dmul>
 8011e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e44:	4606      	mov	r6, r0
 8011e46:	460f      	mov	r7, r1
 8011e48:	b933      	cbnz	r3, 8011e58 <_strtod_l+0xa80>
 8011e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e4e:	9010      	str	r0, [sp, #64]	; 0x40
 8011e50:	9311      	str	r3, [sp, #68]	; 0x44
 8011e52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011e56:	e7df      	b.n	8011e18 <_strtod_l+0xa40>
 8011e58:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8011e5c:	e7f9      	b.n	8011e52 <_strtod_l+0xa7a>
 8011e5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011e62:	9b04      	ldr	r3, [sp, #16]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d1ab      	bne.n	8011dc0 <_strtod_l+0x9e8>
 8011e68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011e6c:	0d1b      	lsrs	r3, r3, #20
 8011e6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011e70:	051b      	lsls	r3, r3, #20
 8011e72:	429a      	cmp	r2, r3
 8011e74:	465d      	mov	r5, fp
 8011e76:	d1a3      	bne.n	8011dc0 <_strtod_l+0x9e8>
 8011e78:	4639      	mov	r1, r7
 8011e7a:	4630      	mov	r0, r6
 8011e7c:	f7ee fe7c 	bl	8000b78 <__aeabi_d2iz>
 8011e80:	f7ee fb60 	bl	8000544 <__aeabi_i2d>
 8011e84:	460b      	mov	r3, r1
 8011e86:	4602      	mov	r2, r0
 8011e88:	4639      	mov	r1, r7
 8011e8a:	4630      	mov	r0, r6
 8011e8c:	f7ee fa0c 	bl	80002a8 <__aeabi_dsub>
 8011e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e92:	4606      	mov	r6, r0
 8011e94:	460f      	mov	r7, r1
 8011e96:	b933      	cbnz	r3, 8011ea6 <_strtod_l+0xace>
 8011e98:	f1ba 0f00 	cmp.w	sl, #0
 8011e9c:	d103      	bne.n	8011ea6 <_strtod_l+0xace>
 8011e9e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8011ea2:	2d00      	cmp	r5, #0
 8011ea4:	d06d      	beq.n	8011f82 <_strtod_l+0xbaa>
 8011ea6:	a30a      	add	r3, pc, #40	; (adr r3, 8011ed0 <_strtod_l+0xaf8>)
 8011ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eac:	4630      	mov	r0, r6
 8011eae:	4639      	mov	r1, r7
 8011eb0:	f7ee fe24 	bl	8000afc <__aeabi_dcmplt>
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	f47f acb8 	bne.w	801182a <_strtod_l+0x452>
 8011eba:	a307      	add	r3, pc, #28	; (adr r3, 8011ed8 <_strtod_l+0xb00>)
 8011ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec0:	4630      	mov	r0, r6
 8011ec2:	4639      	mov	r1, r7
 8011ec4:	f7ee fe38 	bl	8000b38 <__aeabi_dcmpgt>
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	f43f af79 	beq.w	8011dc0 <_strtod_l+0x9e8>
 8011ece:	e4ac      	b.n	801182a <_strtod_l+0x452>
 8011ed0:	94a03595 	.word	0x94a03595
 8011ed4:	3fdfffff 	.word	0x3fdfffff
 8011ed8:	35afe535 	.word	0x35afe535
 8011edc:	3fe00000 	.word	0x3fe00000
 8011ee0:	000fffff 	.word	0x000fffff
 8011ee4:	7ff00000 	.word	0x7ff00000
 8011ee8:	7fefffff 	.word	0x7fefffff
 8011eec:	39500000 	.word	0x39500000
 8011ef0:	3ff00000 	.word	0x3ff00000
 8011ef4:	7fe00000 	.word	0x7fe00000
 8011ef8:	7c9fffff 	.word	0x7c9fffff
 8011efc:	3fe00000 	.word	0x3fe00000
 8011f00:	bff00000 	.word	0xbff00000
 8011f04:	9b04      	ldr	r3, [sp, #16]
 8011f06:	b333      	cbz	r3, 8011f56 <_strtod_l+0xb7e>
 8011f08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f0a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011f0e:	d822      	bhi.n	8011f56 <_strtod_l+0xb7e>
 8011f10:	a327      	add	r3, pc, #156	; (adr r3, 8011fb0 <_strtod_l+0xbd8>)
 8011f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f16:	4630      	mov	r0, r6
 8011f18:	4639      	mov	r1, r7
 8011f1a:	f7ee fdf9 	bl	8000b10 <__aeabi_dcmple>
 8011f1e:	b1a0      	cbz	r0, 8011f4a <_strtod_l+0xb72>
 8011f20:	4639      	mov	r1, r7
 8011f22:	4630      	mov	r0, r6
 8011f24:	f7ee fe50 	bl	8000bc8 <__aeabi_d2uiz>
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	bf08      	it	eq
 8011f2c:	2001      	moveq	r0, #1
 8011f2e:	f7ee faf9 	bl	8000524 <__aeabi_ui2d>
 8011f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f34:	4606      	mov	r6, r0
 8011f36:	460f      	mov	r7, r1
 8011f38:	bb03      	cbnz	r3, 8011f7c <_strtod_l+0xba4>
 8011f3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f3e:	9012      	str	r0, [sp, #72]	; 0x48
 8011f40:	9313      	str	r3, [sp, #76]	; 0x4c
 8011f42:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011f46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f4e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011f52:	1a9b      	subs	r3, r3, r2
 8011f54:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f56:	ed9d 0b08 	vldr	d0, [sp, #32]
 8011f5a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011f5e:	f001 ffcb 	bl	8013ef8 <__ulp>
 8011f62:	4650      	mov	r0, sl
 8011f64:	ec53 2b10 	vmov	r2, r3, d0
 8011f68:	4659      	mov	r1, fp
 8011f6a:	f7ee fb55 	bl	8000618 <__aeabi_dmul>
 8011f6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011f72:	f7ee f99b 	bl	80002ac <__adddf3>
 8011f76:	4682      	mov	sl, r0
 8011f78:	468b      	mov	fp, r1
 8011f7a:	e772      	b.n	8011e62 <_strtod_l+0xa8a>
 8011f7c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8011f80:	e7df      	b.n	8011f42 <_strtod_l+0xb6a>
 8011f82:	a30d      	add	r3, pc, #52	; (adr r3, 8011fb8 <_strtod_l+0xbe0>)
 8011f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f88:	f7ee fdb8 	bl	8000afc <__aeabi_dcmplt>
 8011f8c:	e79c      	b.n	8011ec8 <_strtod_l+0xaf0>
 8011f8e:	2300      	movs	r3, #0
 8011f90:	930d      	str	r3, [sp, #52]	; 0x34
 8011f92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011f94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f96:	6013      	str	r3, [r2, #0]
 8011f98:	f7ff ba61 	b.w	801145e <_strtod_l+0x86>
 8011f9c:	2b65      	cmp	r3, #101	; 0x65
 8011f9e:	f04f 0200 	mov.w	r2, #0
 8011fa2:	f43f ab4e 	beq.w	8011642 <_strtod_l+0x26a>
 8011fa6:	2101      	movs	r1, #1
 8011fa8:	4614      	mov	r4, r2
 8011faa:	9104      	str	r1, [sp, #16]
 8011fac:	f7ff bacb 	b.w	8011546 <_strtod_l+0x16e>
 8011fb0:	ffc00000 	.word	0xffc00000
 8011fb4:	41dfffff 	.word	0x41dfffff
 8011fb8:	94a03595 	.word	0x94a03595
 8011fbc:	3fcfffff 	.word	0x3fcfffff

08011fc0 <_strtod_r>:
 8011fc0:	4b05      	ldr	r3, [pc, #20]	; (8011fd8 <_strtod_r+0x18>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	b410      	push	{r4}
 8011fc6:	6a1b      	ldr	r3, [r3, #32]
 8011fc8:	4c04      	ldr	r4, [pc, #16]	; (8011fdc <_strtod_r+0x1c>)
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	bf08      	it	eq
 8011fce:	4623      	moveq	r3, r4
 8011fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fd4:	f7ff ba00 	b.w	80113d8 <_strtod_l>
 8011fd8:	20000010 	.word	0x20000010
 8011fdc:	20000074 	.word	0x20000074

08011fe0 <_strtol_l.isra.0>:
 8011fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fe4:	4680      	mov	r8, r0
 8011fe6:	4689      	mov	r9, r1
 8011fe8:	4692      	mov	sl, r2
 8011fea:	461e      	mov	r6, r3
 8011fec:	460f      	mov	r7, r1
 8011fee:	463d      	mov	r5, r7
 8011ff0:	9808      	ldr	r0, [sp, #32]
 8011ff2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ff6:	f001 fc27 	bl	8013848 <__locale_ctype_ptr_l>
 8011ffa:	4420      	add	r0, r4
 8011ffc:	7843      	ldrb	r3, [r0, #1]
 8011ffe:	f013 0308 	ands.w	r3, r3, #8
 8012002:	d132      	bne.n	801206a <_strtol_l.isra.0+0x8a>
 8012004:	2c2d      	cmp	r4, #45	; 0x2d
 8012006:	d132      	bne.n	801206e <_strtol_l.isra.0+0x8e>
 8012008:	787c      	ldrb	r4, [r7, #1]
 801200a:	1cbd      	adds	r5, r7, #2
 801200c:	2201      	movs	r2, #1
 801200e:	2e00      	cmp	r6, #0
 8012010:	d05d      	beq.n	80120ce <_strtol_l.isra.0+0xee>
 8012012:	2e10      	cmp	r6, #16
 8012014:	d109      	bne.n	801202a <_strtol_l.isra.0+0x4a>
 8012016:	2c30      	cmp	r4, #48	; 0x30
 8012018:	d107      	bne.n	801202a <_strtol_l.isra.0+0x4a>
 801201a:	782b      	ldrb	r3, [r5, #0]
 801201c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012020:	2b58      	cmp	r3, #88	; 0x58
 8012022:	d14f      	bne.n	80120c4 <_strtol_l.isra.0+0xe4>
 8012024:	786c      	ldrb	r4, [r5, #1]
 8012026:	2610      	movs	r6, #16
 8012028:	3502      	adds	r5, #2
 801202a:	2a00      	cmp	r2, #0
 801202c:	bf14      	ite	ne
 801202e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012032:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012036:	2700      	movs	r7, #0
 8012038:	fbb1 fcf6 	udiv	ip, r1, r6
 801203c:	4638      	mov	r0, r7
 801203e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012042:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012046:	2b09      	cmp	r3, #9
 8012048:	d817      	bhi.n	801207a <_strtol_l.isra.0+0x9a>
 801204a:	461c      	mov	r4, r3
 801204c:	42a6      	cmp	r6, r4
 801204e:	dd23      	ble.n	8012098 <_strtol_l.isra.0+0xb8>
 8012050:	1c7b      	adds	r3, r7, #1
 8012052:	d007      	beq.n	8012064 <_strtol_l.isra.0+0x84>
 8012054:	4584      	cmp	ip, r0
 8012056:	d31c      	bcc.n	8012092 <_strtol_l.isra.0+0xb2>
 8012058:	d101      	bne.n	801205e <_strtol_l.isra.0+0x7e>
 801205a:	45a6      	cmp	lr, r4
 801205c:	db19      	blt.n	8012092 <_strtol_l.isra.0+0xb2>
 801205e:	fb00 4006 	mla	r0, r0, r6, r4
 8012062:	2701      	movs	r7, #1
 8012064:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012068:	e7eb      	b.n	8012042 <_strtol_l.isra.0+0x62>
 801206a:	462f      	mov	r7, r5
 801206c:	e7bf      	b.n	8011fee <_strtol_l.isra.0+0xe>
 801206e:	2c2b      	cmp	r4, #43	; 0x2b
 8012070:	bf04      	itt	eq
 8012072:	1cbd      	addeq	r5, r7, #2
 8012074:	787c      	ldrbeq	r4, [r7, #1]
 8012076:	461a      	mov	r2, r3
 8012078:	e7c9      	b.n	801200e <_strtol_l.isra.0+0x2e>
 801207a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801207e:	2b19      	cmp	r3, #25
 8012080:	d801      	bhi.n	8012086 <_strtol_l.isra.0+0xa6>
 8012082:	3c37      	subs	r4, #55	; 0x37
 8012084:	e7e2      	b.n	801204c <_strtol_l.isra.0+0x6c>
 8012086:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801208a:	2b19      	cmp	r3, #25
 801208c:	d804      	bhi.n	8012098 <_strtol_l.isra.0+0xb8>
 801208e:	3c57      	subs	r4, #87	; 0x57
 8012090:	e7dc      	b.n	801204c <_strtol_l.isra.0+0x6c>
 8012092:	f04f 37ff 	mov.w	r7, #4294967295
 8012096:	e7e5      	b.n	8012064 <_strtol_l.isra.0+0x84>
 8012098:	1c7b      	adds	r3, r7, #1
 801209a:	d108      	bne.n	80120ae <_strtol_l.isra.0+0xce>
 801209c:	2322      	movs	r3, #34	; 0x22
 801209e:	f8c8 3000 	str.w	r3, [r8]
 80120a2:	4608      	mov	r0, r1
 80120a4:	f1ba 0f00 	cmp.w	sl, #0
 80120a8:	d107      	bne.n	80120ba <_strtol_l.isra.0+0xda>
 80120aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ae:	b102      	cbz	r2, 80120b2 <_strtol_l.isra.0+0xd2>
 80120b0:	4240      	negs	r0, r0
 80120b2:	f1ba 0f00 	cmp.w	sl, #0
 80120b6:	d0f8      	beq.n	80120aa <_strtol_l.isra.0+0xca>
 80120b8:	b10f      	cbz	r7, 80120be <_strtol_l.isra.0+0xde>
 80120ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80120be:	f8ca 9000 	str.w	r9, [sl]
 80120c2:	e7f2      	b.n	80120aa <_strtol_l.isra.0+0xca>
 80120c4:	2430      	movs	r4, #48	; 0x30
 80120c6:	2e00      	cmp	r6, #0
 80120c8:	d1af      	bne.n	801202a <_strtol_l.isra.0+0x4a>
 80120ca:	2608      	movs	r6, #8
 80120cc:	e7ad      	b.n	801202a <_strtol_l.isra.0+0x4a>
 80120ce:	2c30      	cmp	r4, #48	; 0x30
 80120d0:	d0a3      	beq.n	801201a <_strtol_l.isra.0+0x3a>
 80120d2:	260a      	movs	r6, #10
 80120d4:	e7a9      	b.n	801202a <_strtol_l.isra.0+0x4a>
	...

080120d8 <_strtol_r>:
 80120d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120da:	4c06      	ldr	r4, [pc, #24]	; (80120f4 <_strtol_r+0x1c>)
 80120dc:	4d06      	ldr	r5, [pc, #24]	; (80120f8 <_strtol_r+0x20>)
 80120de:	6824      	ldr	r4, [r4, #0]
 80120e0:	6a24      	ldr	r4, [r4, #32]
 80120e2:	2c00      	cmp	r4, #0
 80120e4:	bf08      	it	eq
 80120e6:	462c      	moveq	r4, r5
 80120e8:	9400      	str	r4, [sp, #0]
 80120ea:	f7ff ff79 	bl	8011fe0 <_strtol_l.isra.0>
 80120ee:	b003      	add	sp, #12
 80120f0:	bd30      	pop	{r4, r5, pc}
 80120f2:	bf00      	nop
 80120f4:	20000010 	.word	0x20000010
 80120f8:	20000074 	.word	0x20000074

080120fc <__swbuf_r>:
 80120fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120fe:	460e      	mov	r6, r1
 8012100:	4614      	mov	r4, r2
 8012102:	4605      	mov	r5, r0
 8012104:	b118      	cbz	r0, 801210e <__swbuf_r+0x12>
 8012106:	6983      	ldr	r3, [r0, #24]
 8012108:	b90b      	cbnz	r3, 801210e <__swbuf_r+0x12>
 801210a:	f000 ffed 	bl	80130e8 <__sinit>
 801210e:	4b21      	ldr	r3, [pc, #132]	; (8012194 <__swbuf_r+0x98>)
 8012110:	429c      	cmp	r4, r3
 8012112:	d12a      	bne.n	801216a <__swbuf_r+0x6e>
 8012114:	686c      	ldr	r4, [r5, #4]
 8012116:	69a3      	ldr	r3, [r4, #24]
 8012118:	60a3      	str	r3, [r4, #8]
 801211a:	89a3      	ldrh	r3, [r4, #12]
 801211c:	071a      	lsls	r2, r3, #28
 801211e:	d52e      	bpl.n	801217e <__swbuf_r+0x82>
 8012120:	6923      	ldr	r3, [r4, #16]
 8012122:	b363      	cbz	r3, 801217e <__swbuf_r+0x82>
 8012124:	6923      	ldr	r3, [r4, #16]
 8012126:	6820      	ldr	r0, [r4, #0]
 8012128:	1ac0      	subs	r0, r0, r3
 801212a:	6963      	ldr	r3, [r4, #20]
 801212c:	b2f6      	uxtb	r6, r6
 801212e:	4283      	cmp	r3, r0
 8012130:	4637      	mov	r7, r6
 8012132:	dc04      	bgt.n	801213e <__swbuf_r+0x42>
 8012134:	4621      	mov	r1, r4
 8012136:	4628      	mov	r0, r5
 8012138:	f000 ff6c 	bl	8013014 <_fflush_r>
 801213c:	bb28      	cbnz	r0, 801218a <__swbuf_r+0x8e>
 801213e:	68a3      	ldr	r3, [r4, #8]
 8012140:	3b01      	subs	r3, #1
 8012142:	60a3      	str	r3, [r4, #8]
 8012144:	6823      	ldr	r3, [r4, #0]
 8012146:	1c5a      	adds	r2, r3, #1
 8012148:	6022      	str	r2, [r4, #0]
 801214a:	701e      	strb	r6, [r3, #0]
 801214c:	6963      	ldr	r3, [r4, #20]
 801214e:	3001      	adds	r0, #1
 8012150:	4283      	cmp	r3, r0
 8012152:	d004      	beq.n	801215e <__swbuf_r+0x62>
 8012154:	89a3      	ldrh	r3, [r4, #12]
 8012156:	07db      	lsls	r3, r3, #31
 8012158:	d519      	bpl.n	801218e <__swbuf_r+0x92>
 801215a:	2e0a      	cmp	r6, #10
 801215c:	d117      	bne.n	801218e <__swbuf_r+0x92>
 801215e:	4621      	mov	r1, r4
 8012160:	4628      	mov	r0, r5
 8012162:	f000 ff57 	bl	8013014 <_fflush_r>
 8012166:	b190      	cbz	r0, 801218e <__swbuf_r+0x92>
 8012168:	e00f      	b.n	801218a <__swbuf_r+0x8e>
 801216a:	4b0b      	ldr	r3, [pc, #44]	; (8012198 <__swbuf_r+0x9c>)
 801216c:	429c      	cmp	r4, r3
 801216e:	d101      	bne.n	8012174 <__swbuf_r+0x78>
 8012170:	68ac      	ldr	r4, [r5, #8]
 8012172:	e7d0      	b.n	8012116 <__swbuf_r+0x1a>
 8012174:	4b09      	ldr	r3, [pc, #36]	; (801219c <__swbuf_r+0xa0>)
 8012176:	429c      	cmp	r4, r3
 8012178:	bf08      	it	eq
 801217a:	68ec      	ldreq	r4, [r5, #12]
 801217c:	e7cb      	b.n	8012116 <__swbuf_r+0x1a>
 801217e:	4621      	mov	r1, r4
 8012180:	4628      	mov	r0, r5
 8012182:	f000 f80d 	bl	80121a0 <__swsetup_r>
 8012186:	2800      	cmp	r0, #0
 8012188:	d0cc      	beq.n	8012124 <__swbuf_r+0x28>
 801218a:	f04f 37ff 	mov.w	r7, #4294967295
 801218e:	4638      	mov	r0, r7
 8012190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012192:	bf00      	nop
 8012194:	08014c00 	.word	0x08014c00
 8012198:	08014c20 	.word	0x08014c20
 801219c:	08014be0 	.word	0x08014be0

080121a0 <__swsetup_r>:
 80121a0:	4b32      	ldr	r3, [pc, #200]	; (801226c <__swsetup_r+0xcc>)
 80121a2:	b570      	push	{r4, r5, r6, lr}
 80121a4:	681d      	ldr	r5, [r3, #0]
 80121a6:	4606      	mov	r6, r0
 80121a8:	460c      	mov	r4, r1
 80121aa:	b125      	cbz	r5, 80121b6 <__swsetup_r+0x16>
 80121ac:	69ab      	ldr	r3, [r5, #24]
 80121ae:	b913      	cbnz	r3, 80121b6 <__swsetup_r+0x16>
 80121b0:	4628      	mov	r0, r5
 80121b2:	f000 ff99 	bl	80130e8 <__sinit>
 80121b6:	4b2e      	ldr	r3, [pc, #184]	; (8012270 <__swsetup_r+0xd0>)
 80121b8:	429c      	cmp	r4, r3
 80121ba:	d10f      	bne.n	80121dc <__swsetup_r+0x3c>
 80121bc:	686c      	ldr	r4, [r5, #4]
 80121be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	0715      	lsls	r5, r2, #28
 80121c6:	d42c      	bmi.n	8012222 <__swsetup_r+0x82>
 80121c8:	06d0      	lsls	r0, r2, #27
 80121ca:	d411      	bmi.n	80121f0 <__swsetup_r+0x50>
 80121cc:	2209      	movs	r2, #9
 80121ce:	6032      	str	r2, [r6, #0]
 80121d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121d4:	81a3      	strh	r3, [r4, #12]
 80121d6:	f04f 30ff 	mov.w	r0, #4294967295
 80121da:	e03e      	b.n	801225a <__swsetup_r+0xba>
 80121dc:	4b25      	ldr	r3, [pc, #148]	; (8012274 <__swsetup_r+0xd4>)
 80121de:	429c      	cmp	r4, r3
 80121e0:	d101      	bne.n	80121e6 <__swsetup_r+0x46>
 80121e2:	68ac      	ldr	r4, [r5, #8]
 80121e4:	e7eb      	b.n	80121be <__swsetup_r+0x1e>
 80121e6:	4b24      	ldr	r3, [pc, #144]	; (8012278 <__swsetup_r+0xd8>)
 80121e8:	429c      	cmp	r4, r3
 80121ea:	bf08      	it	eq
 80121ec:	68ec      	ldreq	r4, [r5, #12]
 80121ee:	e7e6      	b.n	80121be <__swsetup_r+0x1e>
 80121f0:	0751      	lsls	r1, r2, #29
 80121f2:	d512      	bpl.n	801221a <__swsetup_r+0x7a>
 80121f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121f6:	b141      	cbz	r1, 801220a <__swsetup_r+0x6a>
 80121f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121fc:	4299      	cmp	r1, r3
 80121fe:	d002      	beq.n	8012206 <__swsetup_r+0x66>
 8012200:	4630      	mov	r0, r6
 8012202:	f7fe f887 	bl	8010314 <_free_r>
 8012206:	2300      	movs	r3, #0
 8012208:	6363      	str	r3, [r4, #52]	; 0x34
 801220a:	89a3      	ldrh	r3, [r4, #12]
 801220c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012210:	81a3      	strh	r3, [r4, #12]
 8012212:	2300      	movs	r3, #0
 8012214:	6063      	str	r3, [r4, #4]
 8012216:	6923      	ldr	r3, [r4, #16]
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	89a3      	ldrh	r3, [r4, #12]
 801221c:	f043 0308 	orr.w	r3, r3, #8
 8012220:	81a3      	strh	r3, [r4, #12]
 8012222:	6923      	ldr	r3, [r4, #16]
 8012224:	b94b      	cbnz	r3, 801223a <__swsetup_r+0x9a>
 8012226:	89a3      	ldrh	r3, [r4, #12]
 8012228:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801222c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012230:	d003      	beq.n	801223a <__swsetup_r+0x9a>
 8012232:	4621      	mov	r1, r4
 8012234:	4630      	mov	r0, r6
 8012236:	f001 fb3f 	bl	80138b8 <__smakebuf_r>
 801223a:	89a2      	ldrh	r2, [r4, #12]
 801223c:	f012 0301 	ands.w	r3, r2, #1
 8012240:	d00c      	beq.n	801225c <__swsetup_r+0xbc>
 8012242:	2300      	movs	r3, #0
 8012244:	60a3      	str	r3, [r4, #8]
 8012246:	6963      	ldr	r3, [r4, #20]
 8012248:	425b      	negs	r3, r3
 801224a:	61a3      	str	r3, [r4, #24]
 801224c:	6923      	ldr	r3, [r4, #16]
 801224e:	b953      	cbnz	r3, 8012266 <__swsetup_r+0xc6>
 8012250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012254:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012258:	d1ba      	bne.n	80121d0 <__swsetup_r+0x30>
 801225a:	bd70      	pop	{r4, r5, r6, pc}
 801225c:	0792      	lsls	r2, r2, #30
 801225e:	bf58      	it	pl
 8012260:	6963      	ldrpl	r3, [r4, #20]
 8012262:	60a3      	str	r3, [r4, #8]
 8012264:	e7f2      	b.n	801224c <__swsetup_r+0xac>
 8012266:	2000      	movs	r0, #0
 8012268:	e7f7      	b.n	801225a <__swsetup_r+0xba>
 801226a:	bf00      	nop
 801226c:	20000010 	.word	0x20000010
 8012270:	08014c00 	.word	0x08014c00
 8012274:	08014c20 	.word	0x08014c20
 8012278:	08014be0 	.word	0x08014be0

0801227c <quorem>:
 801227c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012280:	6903      	ldr	r3, [r0, #16]
 8012282:	690c      	ldr	r4, [r1, #16]
 8012284:	42a3      	cmp	r3, r4
 8012286:	4680      	mov	r8, r0
 8012288:	f2c0 8082 	blt.w	8012390 <quorem+0x114>
 801228c:	3c01      	subs	r4, #1
 801228e:	f101 0714 	add.w	r7, r1, #20
 8012292:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012296:	f100 0614 	add.w	r6, r0, #20
 801229a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801229e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80122a2:	eb06 030c 	add.w	r3, r6, ip
 80122a6:	3501      	adds	r5, #1
 80122a8:	eb07 090c 	add.w	r9, r7, ip
 80122ac:	9301      	str	r3, [sp, #4]
 80122ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80122b2:	b395      	cbz	r5, 801231a <quorem+0x9e>
 80122b4:	f04f 0a00 	mov.w	sl, #0
 80122b8:	4638      	mov	r0, r7
 80122ba:	46b6      	mov	lr, r6
 80122bc:	46d3      	mov	fp, sl
 80122be:	f850 2b04 	ldr.w	r2, [r0], #4
 80122c2:	b293      	uxth	r3, r2
 80122c4:	fb05 a303 	mla	r3, r5, r3, sl
 80122c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122cc:	b29b      	uxth	r3, r3
 80122ce:	ebab 0303 	sub.w	r3, fp, r3
 80122d2:	0c12      	lsrs	r2, r2, #16
 80122d4:	f8de b000 	ldr.w	fp, [lr]
 80122d8:	fb05 a202 	mla	r2, r5, r2, sl
 80122dc:	fa13 f38b 	uxtah	r3, r3, fp
 80122e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80122e4:	fa1f fb82 	uxth.w	fp, r2
 80122e8:	f8de 2000 	ldr.w	r2, [lr]
 80122ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80122f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122fa:	4581      	cmp	r9, r0
 80122fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012300:	f84e 3b04 	str.w	r3, [lr], #4
 8012304:	d2db      	bcs.n	80122be <quorem+0x42>
 8012306:	f856 300c 	ldr.w	r3, [r6, ip]
 801230a:	b933      	cbnz	r3, 801231a <quorem+0x9e>
 801230c:	9b01      	ldr	r3, [sp, #4]
 801230e:	3b04      	subs	r3, #4
 8012310:	429e      	cmp	r6, r3
 8012312:	461a      	mov	r2, r3
 8012314:	d330      	bcc.n	8012378 <quorem+0xfc>
 8012316:	f8c8 4010 	str.w	r4, [r8, #16]
 801231a:	4640      	mov	r0, r8
 801231c:	f001 fd74 	bl	8013e08 <__mcmp>
 8012320:	2800      	cmp	r0, #0
 8012322:	db25      	blt.n	8012370 <quorem+0xf4>
 8012324:	3501      	adds	r5, #1
 8012326:	4630      	mov	r0, r6
 8012328:	f04f 0c00 	mov.w	ip, #0
 801232c:	f857 2b04 	ldr.w	r2, [r7], #4
 8012330:	f8d0 e000 	ldr.w	lr, [r0]
 8012334:	b293      	uxth	r3, r2
 8012336:	ebac 0303 	sub.w	r3, ip, r3
 801233a:	0c12      	lsrs	r2, r2, #16
 801233c:	fa13 f38e 	uxtah	r3, r3, lr
 8012340:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012348:	b29b      	uxth	r3, r3
 801234a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801234e:	45b9      	cmp	r9, r7
 8012350:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012354:	f840 3b04 	str.w	r3, [r0], #4
 8012358:	d2e8      	bcs.n	801232c <quorem+0xb0>
 801235a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801235e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012362:	b92a      	cbnz	r2, 8012370 <quorem+0xf4>
 8012364:	3b04      	subs	r3, #4
 8012366:	429e      	cmp	r6, r3
 8012368:	461a      	mov	r2, r3
 801236a:	d30b      	bcc.n	8012384 <quorem+0x108>
 801236c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012370:	4628      	mov	r0, r5
 8012372:	b003      	add	sp, #12
 8012374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012378:	6812      	ldr	r2, [r2, #0]
 801237a:	3b04      	subs	r3, #4
 801237c:	2a00      	cmp	r2, #0
 801237e:	d1ca      	bne.n	8012316 <quorem+0x9a>
 8012380:	3c01      	subs	r4, #1
 8012382:	e7c5      	b.n	8012310 <quorem+0x94>
 8012384:	6812      	ldr	r2, [r2, #0]
 8012386:	3b04      	subs	r3, #4
 8012388:	2a00      	cmp	r2, #0
 801238a:	d1ef      	bne.n	801236c <quorem+0xf0>
 801238c:	3c01      	subs	r4, #1
 801238e:	e7ea      	b.n	8012366 <quorem+0xea>
 8012390:	2000      	movs	r0, #0
 8012392:	e7ee      	b.n	8012372 <quorem+0xf6>
 8012394:	0000      	movs	r0, r0
	...

08012398 <_dtoa_r>:
 8012398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801239c:	ec57 6b10 	vmov	r6, r7, d0
 80123a0:	b097      	sub	sp, #92	; 0x5c
 80123a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80123a4:	9106      	str	r1, [sp, #24]
 80123a6:	4604      	mov	r4, r0
 80123a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80123aa:	9312      	str	r3, [sp, #72]	; 0x48
 80123ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80123b0:	e9cd 6700 	strd	r6, r7, [sp]
 80123b4:	b93d      	cbnz	r5, 80123c6 <_dtoa_r+0x2e>
 80123b6:	2010      	movs	r0, #16
 80123b8:	f7fd ff88 	bl	80102cc <malloc>
 80123bc:	6260      	str	r0, [r4, #36]	; 0x24
 80123be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80123c2:	6005      	str	r5, [r0, #0]
 80123c4:	60c5      	str	r5, [r0, #12]
 80123c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123c8:	6819      	ldr	r1, [r3, #0]
 80123ca:	b151      	cbz	r1, 80123e2 <_dtoa_r+0x4a>
 80123cc:	685a      	ldr	r2, [r3, #4]
 80123ce:	604a      	str	r2, [r1, #4]
 80123d0:	2301      	movs	r3, #1
 80123d2:	4093      	lsls	r3, r2
 80123d4:	608b      	str	r3, [r1, #8]
 80123d6:	4620      	mov	r0, r4
 80123d8:	f001 faf6 	bl	80139c8 <_Bfree>
 80123dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123de:	2200      	movs	r2, #0
 80123e0:	601a      	str	r2, [r3, #0]
 80123e2:	1e3b      	subs	r3, r7, #0
 80123e4:	bfbb      	ittet	lt
 80123e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80123ea:	9301      	strlt	r3, [sp, #4]
 80123ec:	2300      	movge	r3, #0
 80123ee:	2201      	movlt	r2, #1
 80123f0:	bfac      	ite	ge
 80123f2:	f8c8 3000 	strge.w	r3, [r8]
 80123f6:	f8c8 2000 	strlt.w	r2, [r8]
 80123fa:	4baf      	ldr	r3, [pc, #700]	; (80126b8 <_dtoa_r+0x320>)
 80123fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012400:	ea33 0308 	bics.w	r3, r3, r8
 8012404:	d114      	bne.n	8012430 <_dtoa_r+0x98>
 8012406:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012408:	f242 730f 	movw	r3, #9999	; 0x270f
 801240c:	6013      	str	r3, [r2, #0]
 801240e:	9b00      	ldr	r3, [sp, #0]
 8012410:	b923      	cbnz	r3, 801241c <_dtoa_r+0x84>
 8012412:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012416:	2800      	cmp	r0, #0
 8012418:	f000 8542 	beq.w	8012ea0 <_dtoa_r+0xb08>
 801241c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801241e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80126cc <_dtoa_r+0x334>
 8012422:	2b00      	cmp	r3, #0
 8012424:	f000 8544 	beq.w	8012eb0 <_dtoa_r+0xb18>
 8012428:	f10b 0303 	add.w	r3, fp, #3
 801242c:	f000 bd3e 	b.w	8012eac <_dtoa_r+0xb14>
 8012430:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012434:	2200      	movs	r2, #0
 8012436:	2300      	movs	r3, #0
 8012438:	4630      	mov	r0, r6
 801243a:	4639      	mov	r1, r7
 801243c:	f7ee fb54 	bl	8000ae8 <__aeabi_dcmpeq>
 8012440:	4681      	mov	r9, r0
 8012442:	b168      	cbz	r0, 8012460 <_dtoa_r+0xc8>
 8012444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012446:	2301      	movs	r3, #1
 8012448:	6013      	str	r3, [r2, #0]
 801244a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801244c:	2b00      	cmp	r3, #0
 801244e:	f000 8524 	beq.w	8012e9a <_dtoa_r+0xb02>
 8012452:	4b9a      	ldr	r3, [pc, #616]	; (80126bc <_dtoa_r+0x324>)
 8012454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012456:	f103 3bff 	add.w	fp, r3, #4294967295
 801245a:	6013      	str	r3, [r2, #0]
 801245c:	f000 bd28 	b.w	8012eb0 <_dtoa_r+0xb18>
 8012460:	aa14      	add	r2, sp, #80	; 0x50
 8012462:	a915      	add	r1, sp, #84	; 0x54
 8012464:	ec47 6b10 	vmov	d0, r6, r7
 8012468:	4620      	mov	r0, r4
 801246a:	f001 fdbb 	bl	8013fe4 <__d2b>
 801246e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012472:	9004      	str	r0, [sp, #16]
 8012474:	2d00      	cmp	r5, #0
 8012476:	d07c      	beq.n	8012572 <_dtoa_r+0x1da>
 8012478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801247c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012480:	46b2      	mov	sl, r6
 8012482:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801248a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801248e:	2200      	movs	r2, #0
 8012490:	4b8b      	ldr	r3, [pc, #556]	; (80126c0 <_dtoa_r+0x328>)
 8012492:	4650      	mov	r0, sl
 8012494:	4659      	mov	r1, fp
 8012496:	f7ed ff07 	bl	80002a8 <__aeabi_dsub>
 801249a:	a381      	add	r3, pc, #516	; (adr r3, 80126a0 <_dtoa_r+0x308>)
 801249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a0:	f7ee f8ba 	bl	8000618 <__aeabi_dmul>
 80124a4:	a380      	add	r3, pc, #512	; (adr r3, 80126a8 <_dtoa_r+0x310>)
 80124a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124aa:	f7ed feff 	bl	80002ac <__adddf3>
 80124ae:	4606      	mov	r6, r0
 80124b0:	4628      	mov	r0, r5
 80124b2:	460f      	mov	r7, r1
 80124b4:	f7ee f846 	bl	8000544 <__aeabi_i2d>
 80124b8:	a37d      	add	r3, pc, #500	; (adr r3, 80126b0 <_dtoa_r+0x318>)
 80124ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124be:	f7ee f8ab 	bl	8000618 <__aeabi_dmul>
 80124c2:	4602      	mov	r2, r0
 80124c4:	460b      	mov	r3, r1
 80124c6:	4630      	mov	r0, r6
 80124c8:	4639      	mov	r1, r7
 80124ca:	f7ed feef 	bl	80002ac <__adddf3>
 80124ce:	4606      	mov	r6, r0
 80124d0:	460f      	mov	r7, r1
 80124d2:	f7ee fb51 	bl	8000b78 <__aeabi_d2iz>
 80124d6:	2200      	movs	r2, #0
 80124d8:	4682      	mov	sl, r0
 80124da:	2300      	movs	r3, #0
 80124dc:	4630      	mov	r0, r6
 80124de:	4639      	mov	r1, r7
 80124e0:	f7ee fb0c 	bl	8000afc <__aeabi_dcmplt>
 80124e4:	b148      	cbz	r0, 80124fa <_dtoa_r+0x162>
 80124e6:	4650      	mov	r0, sl
 80124e8:	f7ee f82c 	bl	8000544 <__aeabi_i2d>
 80124ec:	4632      	mov	r2, r6
 80124ee:	463b      	mov	r3, r7
 80124f0:	f7ee fafa 	bl	8000ae8 <__aeabi_dcmpeq>
 80124f4:	b908      	cbnz	r0, 80124fa <_dtoa_r+0x162>
 80124f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80124fa:	f1ba 0f16 	cmp.w	sl, #22
 80124fe:	d859      	bhi.n	80125b4 <_dtoa_r+0x21c>
 8012500:	4970      	ldr	r1, [pc, #448]	; (80126c4 <_dtoa_r+0x32c>)
 8012502:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012506:	e9dd 2300 	ldrd	r2, r3, [sp]
 801250a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801250e:	f7ee fb13 	bl	8000b38 <__aeabi_dcmpgt>
 8012512:	2800      	cmp	r0, #0
 8012514:	d050      	beq.n	80125b8 <_dtoa_r+0x220>
 8012516:	f10a 3aff 	add.w	sl, sl, #4294967295
 801251a:	2300      	movs	r3, #0
 801251c:	930f      	str	r3, [sp, #60]	; 0x3c
 801251e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012520:	1b5d      	subs	r5, r3, r5
 8012522:	f1b5 0801 	subs.w	r8, r5, #1
 8012526:	bf49      	itett	mi
 8012528:	f1c5 0301 	rsbmi	r3, r5, #1
 801252c:	2300      	movpl	r3, #0
 801252e:	9305      	strmi	r3, [sp, #20]
 8012530:	f04f 0800 	movmi.w	r8, #0
 8012534:	bf58      	it	pl
 8012536:	9305      	strpl	r3, [sp, #20]
 8012538:	f1ba 0f00 	cmp.w	sl, #0
 801253c:	db3e      	blt.n	80125bc <_dtoa_r+0x224>
 801253e:	2300      	movs	r3, #0
 8012540:	44d0      	add	r8, sl
 8012542:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012546:	9307      	str	r3, [sp, #28]
 8012548:	9b06      	ldr	r3, [sp, #24]
 801254a:	2b09      	cmp	r3, #9
 801254c:	f200 8090 	bhi.w	8012670 <_dtoa_r+0x2d8>
 8012550:	2b05      	cmp	r3, #5
 8012552:	bfc4      	itt	gt
 8012554:	3b04      	subgt	r3, #4
 8012556:	9306      	strgt	r3, [sp, #24]
 8012558:	9b06      	ldr	r3, [sp, #24]
 801255a:	f1a3 0302 	sub.w	r3, r3, #2
 801255e:	bfcc      	ite	gt
 8012560:	2500      	movgt	r5, #0
 8012562:	2501      	movle	r5, #1
 8012564:	2b03      	cmp	r3, #3
 8012566:	f200 808f 	bhi.w	8012688 <_dtoa_r+0x2f0>
 801256a:	e8df f003 	tbb	[pc, r3]
 801256e:	7f7d      	.short	0x7f7d
 8012570:	7131      	.short	0x7131
 8012572:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012576:	441d      	add	r5, r3
 8012578:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801257c:	2820      	cmp	r0, #32
 801257e:	dd13      	ble.n	80125a8 <_dtoa_r+0x210>
 8012580:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012584:	9b00      	ldr	r3, [sp, #0]
 8012586:	fa08 f800 	lsl.w	r8, r8, r0
 801258a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801258e:	fa23 f000 	lsr.w	r0, r3, r0
 8012592:	ea48 0000 	orr.w	r0, r8, r0
 8012596:	f7ed ffc5 	bl	8000524 <__aeabi_ui2d>
 801259a:	2301      	movs	r3, #1
 801259c:	4682      	mov	sl, r0
 801259e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80125a2:	3d01      	subs	r5, #1
 80125a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80125a6:	e772      	b.n	801248e <_dtoa_r+0xf6>
 80125a8:	9b00      	ldr	r3, [sp, #0]
 80125aa:	f1c0 0020 	rsb	r0, r0, #32
 80125ae:	fa03 f000 	lsl.w	r0, r3, r0
 80125b2:	e7f0      	b.n	8012596 <_dtoa_r+0x1fe>
 80125b4:	2301      	movs	r3, #1
 80125b6:	e7b1      	b.n	801251c <_dtoa_r+0x184>
 80125b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80125ba:	e7b0      	b.n	801251e <_dtoa_r+0x186>
 80125bc:	9b05      	ldr	r3, [sp, #20]
 80125be:	eba3 030a 	sub.w	r3, r3, sl
 80125c2:	9305      	str	r3, [sp, #20]
 80125c4:	f1ca 0300 	rsb	r3, sl, #0
 80125c8:	9307      	str	r3, [sp, #28]
 80125ca:	2300      	movs	r3, #0
 80125cc:	930e      	str	r3, [sp, #56]	; 0x38
 80125ce:	e7bb      	b.n	8012548 <_dtoa_r+0x1b0>
 80125d0:	2301      	movs	r3, #1
 80125d2:	930a      	str	r3, [sp, #40]	; 0x28
 80125d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	dd59      	ble.n	801268e <_dtoa_r+0x2f6>
 80125da:	9302      	str	r3, [sp, #8]
 80125dc:	4699      	mov	r9, r3
 80125de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80125e0:	2200      	movs	r2, #0
 80125e2:	6072      	str	r2, [r6, #4]
 80125e4:	2204      	movs	r2, #4
 80125e6:	f102 0014 	add.w	r0, r2, #20
 80125ea:	4298      	cmp	r0, r3
 80125ec:	6871      	ldr	r1, [r6, #4]
 80125ee:	d953      	bls.n	8012698 <_dtoa_r+0x300>
 80125f0:	4620      	mov	r0, r4
 80125f2:	f001 f9b5 	bl	8013960 <_Balloc>
 80125f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125f8:	6030      	str	r0, [r6, #0]
 80125fa:	f1b9 0f0e 	cmp.w	r9, #14
 80125fe:	f8d3 b000 	ldr.w	fp, [r3]
 8012602:	f200 80e6 	bhi.w	80127d2 <_dtoa_r+0x43a>
 8012606:	2d00      	cmp	r5, #0
 8012608:	f000 80e3 	beq.w	80127d2 <_dtoa_r+0x43a>
 801260c:	ed9d 7b00 	vldr	d7, [sp]
 8012610:	f1ba 0f00 	cmp.w	sl, #0
 8012614:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012618:	dd74      	ble.n	8012704 <_dtoa_r+0x36c>
 801261a:	4a2a      	ldr	r2, [pc, #168]	; (80126c4 <_dtoa_r+0x32c>)
 801261c:	f00a 030f 	and.w	r3, sl, #15
 8012620:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012624:	ed93 7b00 	vldr	d7, [r3]
 8012628:	ea4f 162a 	mov.w	r6, sl, asr #4
 801262c:	06f0      	lsls	r0, r6, #27
 801262e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012632:	d565      	bpl.n	8012700 <_dtoa_r+0x368>
 8012634:	4b24      	ldr	r3, [pc, #144]	; (80126c8 <_dtoa_r+0x330>)
 8012636:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801263a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801263e:	f7ee f915 	bl	800086c <__aeabi_ddiv>
 8012642:	e9cd 0100 	strd	r0, r1, [sp]
 8012646:	f006 060f 	and.w	r6, r6, #15
 801264a:	2503      	movs	r5, #3
 801264c:	4f1e      	ldr	r7, [pc, #120]	; (80126c8 <_dtoa_r+0x330>)
 801264e:	e04c      	b.n	80126ea <_dtoa_r+0x352>
 8012650:	2301      	movs	r3, #1
 8012652:	930a      	str	r3, [sp, #40]	; 0x28
 8012654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012656:	4453      	add	r3, sl
 8012658:	f103 0901 	add.w	r9, r3, #1
 801265c:	9302      	str	r3, [sp, #8]
 801265e:	464b      	mov	r3, r9
 8012660:	2b01      	cmp	r3, #1
 8012662:	bfb8      	it	lt
 8012664:	2301      	movlt	r3, #1
 8012666:	e7ba      	b.n	80125de <_dtoa_r+0x246>
 8012668:	2300      	movs	r3, #0
 801266a:	e7b2      	b.n	80125d2 <_dtoa_r+0x23a>
 801266c:	2300      	movs	r3, #0
 801266e:	e7f0      	b.n	8012652 <_dtoa_r+0x2ba>
 8012670:	2501      	movs	r5, #1
 8012672:	2300      	movs	r3, #0
 8012674:	9306      	str	r3, [sp, #24]
 8012676:	950a      	str	r5, [sp, #40]	; 0x28
 8012678:	f04f 33ff 	mov.w	r3, #4294967295
 801267c:	9302      	str	r3, [sp, #8]
 801267e:	4699      	mov	r9, r3
 8012680:	2200      	movs	r2, #0
 8012682:	2312      	movs	r3, #18
 8012684:	920b      	str	r2, [sp, #44]	; 0x2c
 8012686:	e7aa      	b.n	80125de <_dtoa_r+0x246>
 8012688:	2301      	movs	r3, #1
 801268a:	930a      	str	r3, [sp, #40]	; 0x28
 801268c:	e7f4      	b.n	8012678 <_dtoa_r+0x2e0>
 801268e:	2301      	movs	r3, #1
 8012690:	9302      	str	r3, [sp, #8]
 8012692:	4699      	mov	r9, r3
 8012694:	461a      	mov	r2, r3
 8012696:	e7f5      	b.n	8012684 <_dtoa_r+0x2ec>
 8012698:	3101      	adds	r1, #1
 801269a:	6071      	str	r1, [r6, #4]
 801269c:	0052      	lsls	r2, r2, #1
 801269e:	e7a2      	b.n	80125e6 <_dtoa_r+0x24e>
 80126a0:	636f4361 	.word	0x636f4361
 80126a4:	3fd287a7 	.word	0x3fd287a7
 80126a8:	8b60c8b3 	.word	0x8b60c8b3
 80126ac:	3fc68a28 	.word	0x3fc68a28
 80126b0:	509f79fb 	.word	0x509f79fb
 80126b4:	3fd34413 	.word	0x3fd34413
 80126b8:	7ff00000 	.word	0x7ff00000
 80126bc:	08014b51 	.word	0x08014b51
 80126c0:	3ff80000 	.word	0x3ff80000
 80126c4:	08014c78 	.word	0x08014c78
 80126c8:	08014c50 	.word	0x08014c50
 80126cc:	08014bd9 	.word	0x08014bd9
 80126d0:	07f1      	lsls	r1, r6, #31
 80126d2:	d508      	bpl.n	80126e6 <_dtoa_r+0x34e>
 80126d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80126d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80126dc:	f7ed ff9c 	bl	8000618 <__aeabi_dmul>
 80126e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80126e4:	3501      	adds	r5, #1
 80126e6:	1076      	asrs	r6, r6, #1
 80126e8:	3708      	adds	r7, #8
 80126ea:	2e00      	cmp	r6, #0
 80126ec:	d1f0      	bne.n	80126d0 <_dtoa_r+0x338>
 80126ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80126f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126f6:	f7ee f8b9 	bl	800086c <__aeabi_ddiv>
 80126fa:	e9cd 0100 	strd	r0, r1, [sp]
 80126fe:	e01a      	b.n	8012736 <_dtoa_r+0x39e>
 8012700:	2502      	movs	r5, #2
 8012702:	e7a3      	b.n	801264c <_dtoa_r+0x2b4>
 8012704:	f000 80a0 	beq.w	8012848 <_dtoa_r+0x4b0>
 8012708:	f1ca 0600 	rsb	r6, sl, #0
 801270c:	4b9f      	ldr	r3, [pc, #636]	; (801298c <_dtoa_r+0x5f4>)
 801270e:	4fa0      	ldr	r7, [pc, #640]	; (8012990 <_dtoa_r+0x5f8>)
 8012710:	f006 020f 	and.w	r2, r6, #15
 8012714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801271c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012720:	f7ed ff7a 	bl	8000618 <__aeabi_dmul>
 8012724:	e9cd 0100 	strd	r0, r1, [sp]
 8012728:	1136      	asrs	r6, r6, #4
 801272a:	2300      	movs	r3, #0
 801272c:	2502      	movs	r5, #2
 801272e:	2e00      	cmp	r6, #0
 8012730:	d17f      	bne.n	8012832 <_dtoa_r+0x49a>
 8012732:	2b00      	cmp	r3, #0
 8012734:	d1e1      	bne.n	80126fa <_dtoa_r+0x362>
 8012736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012738:	2b00      	cmp	r3, #0
 801273a:	f000 8087 	beq.w	801284c <_dtoa_r+0x4b4>
 801273e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012742:	2200      	movs	r2, #0
 8012744:	4b93      	ldr	r3, [pc, #588]	; (8012994 <_dtoa_r+0x5fc>)
 8012746:	4630      	mov	r0, r6
 8012748:	4639      	mov	r1, r7
 801274a:	f7ee f9d7 	bl	8000afc <__aeabi_dcmplt>
 801274e:	2800      	cmp	r0, #0
 8012750:	d07c      	beq.n	801284c <_dtoa_r+0x4b4>
 8012752:	f1b9 0f00 	cmp.w	r9, #0
 8012756:	d079      	beq.n	801284c <_dtoa_r+0x4b4>
 8012758:	9b02      	ldr	r3, [sp, #8]
 801275a:	2b00      	cmp	r3, #0
 801275c:	dd35      	ble.n	80127ca <_dtoa_r+0x432>
 801275e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012762:	9308      	str	r3, [sp, #32]
 8012764:	4639      	mov	r1, r7
 8012766:	2200      	movs	r2, #0
 8012768:	4b8b      	ldr	r3, [pc, #556]	; (8012998 <_dtoa_r+0x600>)
 801276a:	4630      	mov	r0, r6
 801276c:	f7ed ff54 	bl	8000618 <__aeabi_dmul>
 8012770:	e9cd 0100 	strd	r0, r1, [sp]
 8012774:	9f02      	ldr	r7, [sp, #8]
 8012776:	3501      	adds	r5, #1
 8012778:	4628      	mov	r0, r5
 801277a:	f7ed fee3 	bl	8000544 <__aeabi_i2d>
 801277e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012782:	f7ed ff49 	bl	8000618 <__aeabi_dmul>
 8012786:	2200      	movs	r2, #0
 8012788:	4b84      	ldr	r3, [pc, #528]	; (801299c <_dtoa_r+0x604>)
 801278a:	f7ed fd8f 	bl	80002ac <__adddf3>
 801278e:	4605      	mov	r5, r0
 8012790:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012794:	2f00      	cmp	r7, #0
 8012796:	d15d      	bne.n	8012854 <_dtoa_r+0x4bc>
 8012798:	2200      	movs	r2, #0
 801279a:	4b81      	ldr	r3, [pc, #516]	; (80129a0 <_dtoa_r+0x608>)
 801279c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127a0:	f7ed fd82 	bl	80002a8 <__aeabi_dsub>
 80127a4:	462a      	mov	r2, r5
 80127a6:	4633      	mov	r3, r6
 80127a8:	e9cd 0100 	strd	r0, r1, [sp]
 80127ac:	f7ee f9c4 	bl	8000b38 <__aeabi_dcmpgt>
 80127b0:	2800      	cmp	r0, #0
 80127b2:	f040 8288 	bne.w	8012cc6 <_dtoa_r+0x92e>
 80127b6:	462a      	mov	r2, r5
 80127b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80127bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127c0:	f7ee f99c 	bl	8000afc <__aeabi_dcmplt>
 80127c4:	2800      	cmp	r0, #0
 80127c6:	f040 827c 	bne.w	8012cc2 <_dtoa_r+0x92a>
 80127ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80127ce:	e9cd 2300 	strd	r2, r3, [sp]
 80127d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	f2c0 8150 	blt.w	8012a7a <_dtoa_r+0x6e2>
 80127da:	f1ba 0f0e 	cmp.w	sl, #14
 80127de:	f300 814c 	bgt.w	8012a7a <_dtoa_r+0x6e2>
 80127e2:	4b6a      	ldr	r3, [pc, #424]	; (801298c <_dtoa_r+0x5f4>)
 80127e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80127e8:	ed93 7b00 	vldr	d7, [r3]
 80127ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80127f4:	f280 80d8 	bge.w	80129a8 <_dtoa_r+0x610>
 80127f8:	f1b9 0f00 	cmp.w	r9, #0
 80127fc:	f300 80d4 	bgt.w	80129a8 <_dtoa_r+0x610>
 8012800:	f040 825e 	bne.w	8012cc0 <_dtoa_r+0x928>
 8012804:	2200      	movs	r2, #0
 8012806:	4b66      	ldr	r3, [pc, #408]	; (80129a0 <_dtoa_r+0x608>)
 8012808:	ec51 0b17 	vmov	r0, r1, d7
 801280c:	f7ed ff04 	bl	8000618 <__aeabi_dmul>
 8012810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012814:	f7ee f986 	bl	8000b24 <__aeabi_dcmpge>
 8012818:	464f      	mov	r7, r9
 801281a:	464e      	mov	r6, r9
 801281c:	2800      	cmp	r0, #0
 801281e:	f040 8234 	bne.w	8012c8a <_dtoa_r+0x8f2>
 8012822:	2331      	movs	r3, #49	; 0x31
 8012824:	f10b 0501 	add.w	r5, fp, #1
 8012828:	f88b 3000 	strb.w	r3, [fp]
 801282c:	f10a 0a01 	add.w	sl, sl, #1
 8012830:	e22f      	b.n	8012c92 <_dtoa_r+0x8fa>
 8012832:	07f2      	lsls	r2, r6, #31
 8012834:	d505      	bpl.n	8012842 <_dtoa_r+0x4aa>
 8012836:	e9d7 2300 	ldrd	r2, r3, [r7]
 801283a:	f7ed feed 	bl	8000618 <__aeabi_dmul>
 801283e:	3501      	adds	r5, #1
 8012840:	2301      	movs	r3, #1
 8012842:	1076      	asrs	r6, r6, #1
 8012844:	3708      	adds	r7, #8
 8012846:	e772      	b.n	801272e <_dtoa_r+0x396>
 8012848:	2502      	movs	r5, #2
 801284a:	e774      	b.n	8012736 <_dtoa_r+0x39e>
 801284c:	f8cd a020 	str.w	sl, [sp, #32]
 8012850:	464f      	mov	r7, r9
 8012852:	e791      	b.n	8012778 <_dtoa_r+0x3e0>
 8012854:	4b4d      	ldr	r3, [pc, #308]	; (801298c <_dtoa_r+0x5f4>)
 8012856:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801285a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801285e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012860:	2b00      	cmp	r3, #0
 8012862:	d047      	beq.n	80128f4 <_dtoa_r+0x55c>
 8012864:	4602      	mov	r2, r0
 8012866:	460b      	mov	r3, r1
 8012868:	2000      	movs	r0, #0
 801286a:	494e      	ldr	r1, [pc, #312]	; (80129a4 <_dtoa_r+0x60c>)
 801286c:	f7ed fffe 	bl	800086c <__aeabi_ddiv>
 8012870:	462a      	mov	r2, r5
 8012872:	4633      	mov	r3, r6
 8012874:	f7ed fd18 	bl	80002a8 <__aeabi_dsub>
 8012878:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801287c:	465d      	mov	r5, fp
 801287e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012882:	f7ee f979 	bl	8000b78 <__aeabi_d2iz>
 8012886:	4606      	mov	r6, r0
 8012888:	f7ed fe5c 	bl	8000544 <__aeabi_i2d>
 801288c:	4602      	mov	r2, r0
 801288e:	460b      	mov	r3, r1
 8012890:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012894:	f7ed fd08 	bl	80002a8 <__aeabi_dsub>
 8012898:	3630      	adds	r6, #48	; 0x30
 801289a:	f805 6b01 	strb.w	r6, [r5], #1
 801289e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80128a2:	e9cd 0100 	strd	r0, r1, [sp]
 80128a6:	f7ee f929 	bl	8000afc <__aeabi_dcmplt>
 80128aa:	2800      	cmp	r0, #0
 80128ac:	d163      	bne.n	8012976 <_dtoa_r+0x5de>
 80128ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128b2:	2000      	movs	r0, #0
 80128b4:	4937      	ldr	r1, [pc, #220]	; (8012994 <_dtoa_r+0x5fc>)
 80128b6:	f7ed fcf7 	bl	80002a8 <__aeabi_dsub>
 80128ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80128be:	f7ee f91d 	bl	8000afc <__aeabi_dcmplt>
 80128c2:	2800      	cmp	r0, #0
 80128c4:	f040 80b7 	bne.w	8012a36 <_dtoa_r+0x69e>
 80128c8:	eba5 030b 	sub.w	r3, r5, fp
 80128cc:	429f      	cmp	r7, r3
 80128ce:	f77f af7c 	ble.w	80127ca <_dtoa_r+0x432>
 80128d2:	2200      	movs	r2, #0
 80128d4:	4b30      	ldr	r3, [pc, #192]	; (8012998 <_dtoa_r+0x600>)
 80128d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80128da:	f7ed fe9d 	bl	8000618 <__aeabi_dmul>
 80128de:	2200      	movs	r2, #0
 80128e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80128e4:	4b2c      	ldr	r3, [pc, #176]	; (8012998 <_dtoa_r+0x600>)
 80128e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128ea:	f7ed fe95 	bl	8000618 <__aeabi_dmul>
 80128ee:	e9cd 0100 	strd	r0, r1, [sp]
 80128f2:	e7c4      	b.n	801287e <_dtoa_r+0x4e6>
 80128f4:	462a      	mov	r2, r5
 80128f6:	4633      	mov	r3, r6
 80128f8:	f7ed fe8e 	bl	8000618 <__aeabi_dmul>
 80128fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012900:	eb0b 0507 	add.w	r5, fp, r7
 8012904:	465e      	mov	r6, fp
 8012906:	e9dd 0100 	ldrd	r0, r1, [sp]
 801290a:	f7ee f935 	bl	8000b78 <__aeabi_d2iz>
 801290e:	4607      	mov	r7, r0
 8012910:	f7ed fe18 	bl	8000544 <__aeabi_i2d>
 8012914:	3730      	adds	r7, #48	; 0x30
 8012916:	4602      	mov	r2, r0
 8012918:	460b      	mov	r3, r1
 801291a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801291e:	f7ed fcc3 	bl	80002a8 <__aeabi_dsub>
 8012922:	f806 7b01 	strb.w	r7, [r6], #1
 8012926:	42ae      	cmp	r6, r5
 8012928:	e9cd 0100 	strd	r0, r1, [sp]
 801292c:	f04f 0200 	mov.w	r2, #0
 8012930:	d126      	bne.n	8012980 <_dtoa_r+0x5e8>
 8012932:	4b1c      	ldr	r3, [pc, #112]	; (80129a4 <_dtoa_r+0x60c>)
 8012934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012938:	f7ed fcb8 	bl	80002ac <__adddf3>
 801293c:	4602      	mov	r2, r0
 801293e:	460b      	mov	r3, r1
 8012940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012944:	f7ee f8f8 	bl	8000b38 <__aeabi_dcmpgt>
 8012948:	2800      	cmp	r0, #0
 801294a:	d174      	bne.n	8012a36 <_dtoa_r+0x69e>
 801294c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012950:	2000      	movs	r0, #0
 8012952:	4914      	ldr	r1, [pc, #80]	; (80129a4 <_dtoa_r+0x60c>)
 8012954:	f7ed fca8 	bl	80002a8 <__aeabi_dsub>
 8012958:	4602      	mov	r2, r0
 801295a:	460b      	mov	r3, r1
 801295c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012960:	f7ee f8cc 	bl	8000afc <__aeabi_dcmplt>
 8012964:	2800      	cmp	r0, #0
 8012966:	f43f af30 	beq.w	80127ca <_dtoa_r+0x432>
 801296a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801296e:	2b30      	cmp	r3, #48	; 0x30
 8012970:	f105 32ff 	add.w	r2, r5, #4294967295
 8012974:	d002      	beq.n	801297c <_dtoa_r+0x5e4>
 8012976:	f8dd a020 	ldr.w	sl, [sp, #32]
 801297a:	e04a      	b.n	8012a12 <_dtoa_r+0x67a>
 801297c:	4615      	mov	r5, r2
 801297e:	e7f4      	b.n	801296a <_dtoa_r+0x5d2>
 8012980:	4b05      	ldr	r3, [pc, #20]	; (8012998 <_dtoa_r+0x600>)
 8012982:	f7ed fe49 	bl	8000618 <__aeabi_dmul>
 8012986:	e9cd 0100 	strd	r0, r1, [sp]
 801298a:	e7bc      	b.n	8012906 <_dtoa_r+0x56e>
 801298c:	08014c78 	.word	0x08014c78
 8012990:	08014c50 	.word	0x08014c50
 8012994:	3ff00000 	.word	0x3ff00000
 8012998:	40240000 	.word	0x40240000
 801299c:	401c0000 	.word	0x401c0000
 80129a0:	40140000 	.word	0x40140000
 80129a4:	3fe00000 	.word	0x3fe00000
 80129a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80129ac:	465d      	mov	r5, fp
 80129ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129b2:	4630      	mov	r0, r6
 80129b4:	4639      	mov	r1, r7
 80129b6:	f7ed ff59 	bl	800086c <__aeabi_ddiv>
 80129ba:	f7ee f8dd 	bl	8000b78 <__aeabi_d2iz>
 80129be:	4680      	mov	r8, r0
 80129c0:	f7ed fdc0 	bl	8000544 <__aeabi_i2d>
 80129c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129c8:	f7ed fe26 	bl	8000618 <__aeabi_dmul>
 80129cc:	4602      	mov	r2, r0
 80129ce:	460b      	mov	r3, r1
 80129d0:	4630      	mov	r0, r6
 80129d2:	4639      	mov	r1, r7
 80129d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80129d8:	f7ed fc66 	bl	80002a8 <__aeabi_dsub>
 80129dc:	f805 6b01 	strb.w	r6, [r5], #1
 80129e0:	eba5 060b 	sub.w	r6, r5, fp
 80129e4:	45b1      	cmp	r9, r6
 80129e6:	4602      	mov	r2, r0
 80129e8:	460b      	mov	r3, r1
 80129ea:	d139      	bne.n	8012a60 <_dtoa_r+0x6c8>
 80129ec:	f7ed fc5e 	bl	80002ac <__adddf3>
 80129f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129f4:	4606      	mov	r6, r0
 80129f6:	460f      	mov	r7, r1
 80129f8:	f7ee f89e 	bl	8000b38 <__aeabi_dcmpgt>
 80129fc:	b9c8      	cbnz	r0, 8012a32 <_dtoa_r+0x69a>
 80129fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a02:	4630      	mov	r0, r6
 8012a04:	4639      	mov	r1, r7
 8012a06:	f7ee f86f 	bl	8000ae8 <__aeabi_dcmpeq>
 8012a0a:	b110      	cbz	r0, 8012a12 <_dtoa_r+0x67a>
 8012a0c:	f018 0f01 	tst.w	r8, #1
 8012a10:	d10f      	bne.n	8012a32 <_dtoa_r+0x69a>
 8012a12:	9904      	ldr	r1, [sp, #16]
 8012a14:	4620      	mov	r0, r4
 8012a16:	f000 ffd7 	bl	80139c8 <_Bfree>
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a1e:	702b      	strb	r3, [r5, #0]
 8012a20:	f10a 0301 	add.w	r3, sl, #1
 8012a24:	6013      	str	r3, [r2, #0]
 8012a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f000 8241 	beq.w	8012eb0 <_dtoa_r+0xb18>
 8012a2e:	601d      	str	r5, [r3, #0]
 8012a30:	e23e      	b.n	8012eb0 <_dtoa_r+0xb18>
 8012a32:	f8cd a020 	str.w	sl, [sp, #32]
 8012a36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a3a:	2a39      	cmp	r2, #57	; 0x39
 8012a3c:	f105 33ff 	add.w	r3, r5, #4294967295
 8012a40:	d108      	bne.n	8012a54 <_dtoa_r+0x6bc>
 8012a42:	459b      	cmp	fp, r3
 8012a44:	d10a      	bne.n	8012a5c <_dtoa_r+0x6c4>
 8012a46:	9b08      	ldr	r3, [sp, #32]
 8012a48:	3301      	adds	r3, #1
 8012a4a:	9308      	str	r3, [sp, #32]
 8012a4c:	2330      	movs	r3, #48	; 0x30
 8012a4e:	f88b 3000 	strb.w	r3, [fp]
 8012a52:	465b      	mov	r3, fp
 8012a54:	781a      	ldrb	r2, [r3, #0]
 8012a56:	3201      	adds	r2, #1
 8012a58:	701a      	strb	r2, [r3, #0]
 8012a5a:	e78c      	b.n	8012976 <_dtoa_r+0x5de>
 8012a5c:	461d      	mov	r5, r3
 8012a5e:	e7ea      	b.n	8012a36 <_dtoa_r+0x69e>
 8012a60:	2200      	movs	r2, #0
 8012a62:	4b9b      	ldr	r3, [pc, #620]	; (8012cd0 <_dtoa_r+0x938>)
 8012a64:	f7ed fdd8 	bl	8000618 <__aeabi_dmul>
 8012a68:	2200      	movs	r2, #0
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	4606      	mov	r6, r0
 8012a6e:	460f      	mov	r7, r1
 8012a70:	f7ee f83a 	bl	8000ae8 <__aeabi_dcmpeq>
 8012a74:	2800      	cmp	r0, #0
 8012a76:	d09a      	beq.n	80129ae <_dtoa_r+0x616>
 8012a78:	e7cb      	b.n	8012a12 <_dtoa_r+0x67a>
 8012a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a7c:	2a00      	cmp	r2, #0
 8012a7e:	f000 808b 	beq.w	8012b98 <_dtoa_r+0x800>
 8012a82:	9a06      	ldr	r2, [sp, #24]
 8012a84:	2a01      	cmp	r2, #1
 8012a86:	dc6e      	bgt.n	8012b66 <_dtoa_r+0x7ce>
 8012a88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012a8a:	2a00      	cmp	r2, #0
 8012a8c:	d067      	beq.n	8012b5e <_dtoa_r+0x7c6>
 8012a8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012a92:	9f07      	ldr	r7, [sp, #28]
 8012a94:	9d05      	ldr	r5, [sp, #20]
 8012a96:	9a05      	ldr	r2, [sp, #20]
 8012a98:	2101      	movs	r1, #1
 8012a9a:	441a      	add	r2, r3
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	9205      	str	r2, [sp, #20]
 8012aa0:	4498      	add	r8, r3
 8012aa2:	f001 f86f 	bl	8013b84 <__i2b>
 8012aa6:	4606      	mov	r6, r0
 8012aa8:	2d00      	cmp	r5, #0
 8012aaa:	dd0c      	ble.n	8012ac6 <_dtoa_r+0x72e>
 8012aac:	f1b8 0f00 	cmp.w	r8, #0
 8012ab0:	dd09      	ble.n	8012ac6 <_dtoa_r+0x72e>
 8012ab2:	4545      	cmp	r5, r8
 8012ab4:	9a05      	ldr	r2, [sp, #20]
 8012ab6:	462b      	mov	r3, r5
 8012ab8:	bfa8      	it	ge
 8012aba:	4643      	movge	r3, r8
 8012abc:	1ad2      	subs	r2, r2, r3
 8012abe:	9205      	str	r2, [sp, #20]
 8012ac0:	1aed      	subs	r5, r5, r3
 8012ac2:	eba8 0803 	sub.w	r8, r8, r3
 8012ac6:	9b07      	ldr	r3, [sp, #28]
 8012ac8:	b1eb      	cbz	r3, 8012b06 <_dtoa_r+0x76e>
 8012aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d067      	beq.n	8012ba0 <_dtoa_r+0x808>
 8012ad0:	b18f      	cbz	r7, 8012af6 <_dtoa_r+0x75e>
 8012ad2:	4631      	mov	r1, r6
 8012ad4:	463a      	mov	r2, r7
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	f001 f8f4 	bl	8013cc4 <__pow5mult>
 8012adc:	9a04      	ldr	r2, [sp, #16]
 8012ade:	4601      	mov	r1, r0
 8012ae0:	4606      	mov	r6, r0
 8012ae2:	4620      	mov	r0, r4
 8012ae4:	f001 f857 	bl	8013b96 <__multiply>
 8012ae8:	9904      	ldr	r1, [sp, #16]
 8012aea:	9008      	str	r0, [sp, #32]
 8012aec:	4620      	mov	r0, r4
 8012aee:	f000 ff6b 	bl	80139c8 <_Bfree>
 8012af2:	9b08      	ldr	r3, [sp, #32]
 8012af4:	9304      	str	r3, [sp, #16]
 8012af6:	9b07      	ldr	r3, [sp, #28]
 8012af8:	1bda      	subs	r2, r3, r7
 8012afa:	d004      	beq.n	8012b06 <_dtoa_r+0x76e>
 8012afc:	9904      	ldr	r1, [sp, #16]
 8012afe:	4620      	mov	r0, r4
 8012b00:	f001 f8e0 	bl	8013cc4 <__pow5mult>
 8012b04:	9004      	str	r0, [sp, #16]
 8012b06:	2101      	movs	r1, #1
 8012b08:	4620      	mov	r0, r4
 8012b0a:	f001 f83b 	bl	8013b84 <__i2b>
 8012b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b10:	4607      	mov	r7, r0
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	f000 81d0 	beq.w	8012eb8 <_dtoa_r+0xb20>
 8012b18:	461a      	mov	r2, r3
 8012b1a:	4601      	mov	r1, r0
 8012b1c:	4620      	mov	r0, r4
 8012b1e:	f001 f8d1 	bl	8013cc4 <__pow5mult>
 8012b22:	9b06      	ldr	r3, [sp, #24]
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	4607      	mov	r7, r0
 8012b28:	dc40      	bgt.n	8012bac <_dtoa_r+0x814>
 8012b2a:	9b00      	ldr	r3, [sp, #0]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d139      	bne.n	8012ba4 <_dtoa_r+0x80c>
 8012b30:	9b01      	ldr	r3, [sp, #4]
 8012b32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d136      	bne.n	8012ba8 <_dtoa_r+0x810>
 8012b3a:	9b01      	ldr	r3, [sp, #4]
 8012b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012b40:	0d1b      	lsrs	r3, r3, #20
 8012b42:	051b      	lsls	r3, r3, #20
 8012b44:	b12b      	cbz	r3, 8012b52 <_dtoa_r+0x7ba>
 8012b46:	9b05      	ldr	r3, [sp, #20]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	9305      	str	r3, [sp, #20]
 8012b4c:	f108 0801 	add.w	r8, r8, #1
 8012b50:	2301      	movs	r3, #1
 8012b52:	9307      	str	r3, [sp, #28]
 8012b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d12a      	bne.n	8012bb0 <_dtoa_r+0x818>
 8012b5a:	2001      	movs	r0, #1
 8012b5c:	e030      	b.n	8012bc0 <_dtoa_r+0x828>
 8012b5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012b60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012b64:	e795      	b.n	8012a92 <_dtoa_r+0x6fa>
 8012b66:	9b07      	ldr	r3, [sp, #28]
 8012b68:	f109 37ff 	add.w	r7, r9, #4294967295
 8012b6c:	42bb      	cmp	r3, r7
 8012b6e:	bfbf      	itttt	lt
 8012b70:	9b07      	ldrlt	r3, [sp, #28]
 8012b72:	9707      	strlt	r7, [sp, #28]
 8012b74:	1afa      	sublt	r2, r7, r3
 8012b76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012b78:	bfbb      	ittet	lt
 8012b7a:	189b      	addlt	r3, r3, r2
 8012b7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012b7e:	1bdf      	subge	r7, r3, r7
 8012b80:	2700      	movlt	r7, #0
 8012b82:	f1b9 0f00 	cmp.w	r9, #0
 8012b86:	bfb5      	itete	lt
 8012b88:	9b05      	ldrlt	r3, [sp, #20]
 8012b8a:	9d05      	ldrge	r5, [sp, #20]
 8012b8c:	eba3 0509 	sublt.w	r5, r3, r9
 8012b90:	464b      	movge	r3, r9
 8012b92:	bfb8      	it	lt
 8012b94:	2300      	movlt	r3, #0
 8012b96:	e77e      	b.n	8012a96 <_dtoa_r+0x6fe>
 8012b98:	9f07      	ldr	r7, [sp, #28]
 8012b9a:	9d05      	ldr	r5, [sp, #20]
 8012b9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012b9e:	e783      	b.n	8012aa8 <_dtoa_r+0x710>
 8012ba0:	9a07      	ldr	r2, [sp, #28]
 8012ba2:	e7ab      	b.n	8012afc <_dtoa_r+0x764>
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	e7d4      	b.n	8012b52 <_dtoa_r+0x7ba>
 8012ba8:	9b00      	ldr	r3, [sp, #0]
 8012baa:	e7d2      	b.n	8012b52 <_dtoa_r+0x7ba>
 8012bac:	2300      	movs	r3, #0
 8012bae:	9307      	str	r3, [sp, #28]
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012bb6:	6918      	ldr	r0, [r3, #16]
 8012bb8:	f000 ff96 	bl	8013ae8 <__hi0bits>
 8012bbc:	f1c0 0020 	rsb	r0, r0, #32
 8012bc0:	4440      	add	r0, r8
 8012bc2:	f010 001f 	ands.w	r0, r0, #31
 8012bc6:	d047      	beq.n	8012c58 <_dtoa_r+0x8c0>
 8012bc8:	f1c0 0320 	rsb	r3, r0, #32
 8012bcc:	2b04      	cmp	r3, #4
 8012bce:	dd3b      	ble.n	8012c48 <_dtoa_r+0x8b0>
 8012bd0:	9b05      	ldr	r3, [sp, #20]
 8012bd2:	f1c0 001c 	rsb	r0, r0, #28
 8012bd6:	4403      	add	r3, r0
 8012bd8:	9305      	str	r3, [sp, #20]
 8012bda:	4405      	add	r5, r0
 8012bdc:	4480      	add	r8, r0
 8012bde:	9b05      	ldr	r3, [sp, #20]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	dd05      	ble.n	8012bf0 <_dtoa_r+0x858>
 8012be4:	461a      	mov	r2, r3
 8012be6:	9904      	ldr	r1, [sp, #16]
 8012be8:	4620      	mov	r0, r4
 8012bea:	f001 f8b9 	bl	8013d60 <__lshift>
 8012bee:	9004      	str	r0, [sp, #16]
 8012bf0:	f1b8 0f00 	cmp.w	r8, #0
 8012bf4:	dd05      	ble.n	8012c02 <_dtoa_r+0x86a>
 8012bf6:	4639      	mov	r1, r7
 8012bf8:	4642      	mov	r2, r8
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	f001 f8b0 	bl	8013d60 <__lshift>
 8012c00:	4607      	mov	r7, r0
 8012c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c04:	b353      	cbz	r3, 8012c5c <_dtoa_r+0x8c4>
 8012c06:	4639      	mov	r1, r7
 8012c08:	9804      	ldr	r0, [sp, #16]
 8012c0a:	f001 f8fd 	bl	8013e08 <__mcmp>
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	da24      	bge.n	8012c5c <_dtoa_r+0x8c4>
 8012c12:	2300      	movs	r3, #0
 8012c14:	220a      	movs	r2, #10
 8012c16:	9904      	ldr	r1, [sp, #16]
 8012c18:	4620      	mov	r0, r4
 8012c1a:	f000 feec 	bl	80139f6 <__multadd>
 8012c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c20:	9004      	str	r0, [sp, #16]
 8012c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	f000 814d 	beq.w	8012ec6 <_dtoa_r+0xb2e>
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	4631      	mov	r1, r6
 8012c30:	220a      	movs	r2, #10
 8012c32:	4620      	mov	r0, r4
 8012c34:	f000 fedf 	bl	80139f6 <__multadd>
 8012c38:	9b02      	ldr	r3, [sp, #8]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	4606      	mov	r6, r0
 8012c3e:	dc4f      	bgt.n	8012ce0 <_dtoa_r+0x948>
 8012c40:	9b06      	ldr	r3, [sp, #24]
 8012c42:	2b02      	cmp	r3, #2
 8012c44:	dd4c      	ble.n	8012ce0 <_dtoa_r+0x948>
 8012c46:	e011      	b.n	8012c6c <_dtoa_r+0x8d4>
 8012c48:	d0c9      	beq.n	8012bde <_dtoa_r+0x846>
 8012c4a:	9a05      	ldr	r2, [sp, #20]
 8012c4c:	331c      	adds	r3, #28
 8012c4e:	441a      	add	r2, r3
 8012c50:	9205      	str	r2, [sp, #20]
 8012c52:	441d      	add	r5, r3
 8012c54:	4498      	add	r8, r3
 8012c56:	e7c2      	b.n	8012bde <_dtoa_r+0x846>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	e7f6      	b.n	8012c4a <_dtoa_r+0x8b2>
 8012c5c:	f1b9 0f00 	cmp.w	r9, #0
 8012c60:	dc38      	bgt.n	8012cd4 <_dtoa_r+0x93c>
 8012c62:	9b06      	ldr	r3, [sp, #24]
 8012c64:	2b02      	cmp	r3, #2
 8012c66:	dd35      	ble.n	8012cd4 <_dtoa_r+0x93c>
 8012c68:	f8cd 9008 	str.w	r9, [sp, #8]
 8012c6c:	9b02      	ldr	r3, [sp, #8]
 8012c6e:	b963      	cbnz	r3, 8012c8a <_dtoa_r+0x8f2>
 8012c70:	4639      	mov	r1, r7
 8012c72:	2205      	movs	r2, #5
 8012c74:	4620      	mov	r0, r4
 8012c76:	f000 febe 	bl	80139f6 <__multadd>
 8012c7a:	4601      	mov	r1, r0
 8012c7c:	4607      	mov	r7, r0
 8012c7e:	9804      	ldr	r0, [sp, #16]
 8012c80:	f001 f8c2 	bl	8013e08 <__mcmp>
 8012c84:	2800      	cmp	r0, #0
 8012c86:	f73f adcc 	bgt.w	8012822 <_dtoa_r+0x48a>
 8012c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c8c:	465d      	mov	r5, fp
 8012c8e:	ea6f 0a03 	mvn.w	sl, r3
 8012c92:	f04f 0900 	mov.w	r9, #0
 8012c96:	4639      	mov	r1, r7
 8012c98:	4620      	mov	r0, r4
 8012c9a:	f000 fe95 	bl	80139c8 <_Bfree>
 8012c9e:	2e00      	cmp	r6, #0
 8012ca0:	f43f aeb7 	beq.w	8012a12 <_dtoa_r+0x67a>
 8012ca4:	f1b9 0f00 	cmp.w	r9, #0
 8012ca8:	d005      	beq.n	8012cb6 <_dtoa_r+0x91e>
 8012caa:	45b1      	cmp	r9, r6
 8012cac:	d003      	beq.n	8012cb6 <_dtoa_r+0x91e>
 8012cae:	4649      	mov	r1, r9
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f000 fe89 	bl	80139c8 <_Bfree>
 8012cb6:	4631      	mov	r1, r6
 8012cb8:	4620      	mov	r0, r4
 8012cba:	f000 fe85 	bl	80139c8 <_Bfree>
 8012cbe:	e6a8      	b.n	8012a12 <_dtoa_r+0x67a>
 8012cc0:	2700      	movs	r7, #0
 8012cc2:	463e      	mov	r6, r7
 8012cc4:	e7e1      	b.n	8012c8a <_dtoa_r+0x8f2>
 8012cc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012cca:	463e      	mov	r6, r7
 8012ccc:	e5a9      	b.n	8012822 <_dtoa_r+0x48a>
 8012cce:	bf00      	nop
 8012cd0:	40240000 	.word	0x40240000
 8012cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	f000 80fa 	beq.w	8012ed4 <_dtoa_r+0xb3c>
 8012ce0:	2d00      	cmp	r5, #0
 8012ce2:	dd05      	ble.n	8012cf0 <_dtoa_r+0x958>
 8012ce4:	4631      	mov	r1, r6
 8012ce6:	462a      	mov	r2, r5
 8012ce8:	4620      	mov	r0, r4
 8012cea:	f001 f839 	bl	8013d60 <__lshift>
 8012cee:	4606      	mov	r6, r0
 8012cf0:	9b07      	ldr	r3, [sp, #28]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d04c      	beq.n	8012d90 <_dtoa_r+0x9f8>
 8012cf6:	6871      	ldr	r1, [r6, #4]
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f000 fe31 	bl	8013960 <_Balloc>
 8012cfe:	6932      	ldr	r2, [r6, #16]
 8012d00:	3202      	adds	r2, #2
 8012d02:	4605      	mov	r5, r0
 8012d04:	0092      	lsls	r2, r2, #2
 8012d06:	f106 010c 	add.w	r1, r6, #12
 8012d0a:	300c      	adds	r0, #12
 8012d0c:	f7fd faee 	bl	80102ec <memcpy>
 8012d10:	2201      	movs	r2, #1
 8012d12:	4629      	mov	r1, r5
 8012d14:	4620      	mov	r0, r4
 8012d16:	f001 f823 	bl	8013d60 <__lshift>
 8012d1a:	9b00      	ldr	r3, [sp, #0]
 8012d1c:	f8cd b014 	str.w	fp, [sp, #20]
 8012d20:	f003 0301 	and.w	r3, r3, #1
 8012d24:	46b1      	mov	r9, r6
 8012d26:	9307      	str	r3, [sp, #28]
 8012d28:	4606      	mov	r6, r0
 8012d2a:	4639      	mov	r1, r7
 8012d2c:	9804      	ldr	r0, [sp, #16]
 8012d2e:	f7ff faa5 	bl	801227c <quorem>
 8012d32:	4649      	mov	r1, r9
 8012d34:	4605      	mov	r5, r0
 8012d36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012d3a:	9804      	ldr	r0, [sp, #16]
 8012d3c:	f001 f864 	bl	8013e08 <__mcmp>
 8012d40:	4632      	mov	r2, r6
 8012d42:	9000      	str	r0, [sp, #0]
 8012d44:	4639      	mov	r1, r7
 8012d46:	4620      	mov	r0, r4
 8012d48:	f001 f878 	bl	8013e3c <__mdiff>
 8012d4c:	68c3      	ldr	r3, [r0, #12]
 8012d4e:	4602      	mov	r2, r0
 8012d50:	bb03      	cbnz	r3, 8012d94 <_dtoa_r+0x9fc>
 8012d52:	4601      	mov	r1, r0
 8012d54:	9008      	str	r0, [sp, #32]
 8012d56:	9804      	ldr	r0, [sp, #16]
 8012d58:	f001 f856 	bl	8013e08 <__mcmp>
 8012d5c:	9a08      	ldr	r2, [sp, #32]
 8012d5e:	4603      	mov	r3, r0
 8012d60:	4611      	mov	r1, r2
 8012d62:	4620      	mov	r0, r4
 8012d64:	9308      	str	r3, [sp, #32]
 8012d66:	f000 fe2f 	bl	80139c8 <_Bfree>
 8012d6a:	9b08      	ldr	r3, [sp, #32]
 8012d6c:	b9a3      	cbnz	r3, 8012d98 <_dtoa_r+0xa00>
 8012d6e:	9a06      	ldr	r2, [sp, #24]
 8012d70:	b992      	cbnz	r2, 8012d98 <_dtoa_r+0xa00>
 8012d72:	9a07      	ldr	r2, [sp, #28]
 8012d74:	b982      	cbnz	r2, 8012d98 <_dtoa_r+0xa00>
 8012d76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012d7a:	d029      	beq.n	8012dd0 <_dtoa_r+0xa38>
 8012d7c:	9b00      	ldr	r3, [sp, #0]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	dd01      	ble.n	8012d86 <_dtoa_r+0x9ee>
 8012d82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012d86:	9b05      	ldr	r3, [sp, #20]
 8012d88:	1c5d      	adds	r5, r3, #1
 8012d8a:	f883 8000 	strb.w	r8, [r3]
 8012d8e:	e782      	b.n	8012c96 <_dtoa_r+0x8fe>
 8012d90:	4630      	mov	r0, r6
 8012d92:	e7c2      	b.n	8012d1a <_dtoa_r+0x982>
 8012d94:	2301      	movs	r3, #1
 8012d96:	e7e3      	b.n	8012d60 <_dtoa_r+0x9c8>
 8012d98:	9a00      	ldr	r2, [sp, #0]
 8012d9a:	2a00      	cmp	r2, #0
 8012d9c:	db04      	blt.n	8012da8 <_dtoa_r+0xa10>
 8012d9e:	d125      	bne.n	8012dec <_dtoa_r+0xa54>
 8012da0:	9a06      	ldr	r2, [sp, #24]
 8012da2:	bb1a      	cbnz	r2, 8012dec <_dtoa_r+0xa54>
 8012da4:	9a07      	ldr	r2, [sp, #28]
 8012da6:	bb0a      	cbnz	r2, 8012dec <_dtoa_r+0xa54>
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	ddec      	ble.n	8012d86 <_dtoa_r+0x9ee>
 8012dac:	2201      	movs	r2, #1
 8012dae:	9904      	ldr	r1, [sp, #16]
 8012db0:	4620      	mov	r0, r4
 8012db2:	f000 ffd5 	bl	8013d60 <__lshift>
 8012db6:	4639      	mov	r1, r7
 8012db8:	9004      	str	r0, [sp, #16]
 8012dba:	f001 f825 	bl	8013e08 <__mcmp>
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	dc03      	bgt.n	8012dca <_dtoa_r+0xa32>
 8012dc2:	d1e0      	bne.n	8012d86 <_dtoa_r+0x9ee>
 8012dc4:	f018 0f01 	tst.w	r8, #1
 8012dc8:	d0dd      	beq.n	8012d86 <_dtoa_r+0x9ee>
 8012dca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012dce:	d1d8      	bne.n	8012d82 <_dtoa_r+0x9ea>
 8012dd0:	9b05      	ldr	r3, [sp, #20]
 8012dd2:	9a05      	ldr	r2, [sp, #20]
 8012dd4:	1c5d      	adds	r5, r3, #1
 8012dd6:	2339      	movs	r3, #57	; 0x39
 8012dd8:	7013      	strb	r3, [r2, #0]
 8012dda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012dde:	2b39      	cmp	r3, #57	; 0x39
 8012de0:	f105 32ff 	add.w	r2, r5, #4294967295
 8012de4:	d04f      	beq.n	8012e86 <_dtoa_r+0xaee>
 8012de6:	3301      	adds	r3, #1
 8012de8:	7013      	strb	r3, [r2, #0]
 8012dea:	e754      	b.n	8012c96 <_dtoa_r+0x8fe>
 8012dec:	9a05      	ldr	r2, [sp, #20]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	f102 0501 	add.w	r5, r2, #1
 8012df4:	dd06      	ble.n	8012e04 <_dtoa_r+0xa6c>
 8012df6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012dfa:	d0e9      	beq.n	8012dd0 <_dtoa_r+0xa38>
 8012dfc:	f108 0801 	add.w	r8, r8, #1
 8012e00:	9b05      	ldr	r3, [sp, #20]
 8012e02:	e7c2      	b.n	8012d8a <_dtoa_r+0x9f2>
 8012e04:	9a02      	ldr	r2, [sp, #8]
 8012e06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012e0a:	eba5 030b 	sub.w	r3, r5, fp
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d021      	beq.n	8012e56 <_dtoa_r+0xabe>
 8012e12:	2300      	movs	r3, #0
 8012e14:	220a      	movs	r2, #10
 8012e16:	9904      	ldr	r1, [sp, #16]
 8012e18:	4620      	mov	r0, r4
 8012e1a:	f000 fdec 	bl	80139f6 <__multadd>
 8012e1e:	45b1      	cmp	r9, r6
 8012e20:	9004      	str	r0, [sp, #16]
 8012e22:	f04f 0300 	mov.w	r3, #0
 8012e26:	f04f 020a 	mov.w	r2, #10
 8012e2a:	4649      	mov	r1, r9
 8012e2c:	4620      	mov	r0, r4
 8012e2e:	d105      	bne.n	8012e3c <_dtoa_r+0xaa4>
 8012e30:	f000 fde1 	bl	80139f6 <__multadd>
 8012e34:	4681      	mov	r9, r0
 8012e36:	4606      	mov	r6, r0
 8012e38:	9505      	str	r5, [sp, #20]
 8012e3a:	e776      	b.n	8012d2a <_dtoa_r+0x992>
 8012e3c:	f000 fddb 	bl	80139f6 <__multadd>
 8012e40:	4631      	mov	r1, r6
 8012e42:	4681      	mov	r9, r0
 8012e44:	2300      	movs	r3, #0
 8012e46:	220a      	movs	r2, #10
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f000 fdd4 	bl	80139f6 <__multadd>
 8012e4e:	4606      	mov	r6, r0
 8012e50:	e7f2      	b.n	8012e38 <_dtoa_r+0xaa0>
 8012e52:	f04f 0900 	mov.w	r9, #0
 8012e56:	2201      	movs	r2, #1
 8012e58:	9904      	ldr	r1, [sp, #16]
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	f000 ff80 	bl	8013d60 <__lshift>
 8012e60:	4639      	mov	r1, r7
 8012e62:	9004      	str	r0, [sp, #16]
 8012e64:	f000 ffd0 	bl	8013e08 <__mcmp>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	dcb6      	bgt.n	8012dda <_dtoa_r+0xa42>
 8012e6c:	d102      	bne.n	8012e74 <_dtoa_r+0xadc>
 8012e6e:	f018 0f01 	tst.w	r8, #1
 8012e72:	d1b2      	bne.n	8012dda <_dtoa_r+0xa42>
 8012e74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012e78:	2b30      	cmp	r3, #48	; 0x30
 8012e7a:	f105 32ff 	add.w	r2, r5, #4294967295
 8012e7e:	f47f af0a 	bne.w	8012c96 <_dtoa_r+0x8fe>
 8012e82:	4615      	mov	r5, r2
 8012e84:	e7f6      	b.n	8012e74 <_dtoa_r+0xadc>
 8012e86:	4593      	cmp	fp, r2
 8012e88:	d105      	bne.n	8012e96 <_dtoa_r+0xafe>
 8012e8a:	2331      	movs	r3, #49	; 0x31
 8012e8c:	f10a 0a01 	add.w	sl, sl, #1
 8012e90:	f88b 3000 	strb.w	r3, [fp]
 8012e94:	e6ff      	b.n	8012c96 <_dtoa_r+0x8fe>
 8012e96:	4615      	mov	r5, r2
 8012e98:	e79f      	b.n	8012dda <_dtoa_r+0xa42>
 8012e9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012f00 <_dtoa_r+0xb68>
 8012e9e:	e007      	b.n	8012eb0 <_dtoa_r+0xb18>
 8012ea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ea2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8012f04 <_dtoa_r+0xb6c>
 8012ea6:	b11b      	cbz	r3, 8012eb0 <_dtoa_r+0xb18>
 8012ea8:	f10b 0308 	add.w	r3, fp, #8
 8012eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012eae:	6013      	str	r3, [r2, #0]
 8012eb0:	4658      	mov	r0, fp
 8012eb2:	b017      	add	sp, #92	; 0x5c
 8012eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eb8:	9b06      	ldr	r3, [sp, #24]
 8012eba:	2b01      	cmp	r3, #1
 8012ebc:	f77f ae35 	ble.w	8012b2a <_dtoa_r+0x792>
 8012ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ec2:	9307      	str	r3, [sp, #28]
 8012ec4:	e649      	b.n	8012b5a <_dtoa_r+0x7c2>
 8012ec6:	9b02      	ldr	r3, [sp, #8]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	dc03      	bgt.n	8012ed4 <_dtoa_r+0xb3c>
 8012ecc:	9b06      	ldr	r3, [sp, #24]
 8012ece:	2b02      	cmp	r3, #2
 8012ed0:	f73f aecc 	bgt.w	8012c6c <_dtoa_r+0x8d4>
 8012ed4:	465d      	mov	r5, fp
 8012ed6:	4639      	mov	r1, r7
 8012ed8:	9804      	ldr	r0, [sp, #16]
 8012eda:	f7ff f9cf 	bl	801227c <quorem>
 8012ede:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012ee2:	f805 8b01 	strb.w	r8, [r5], #1
 8012ee6:	9a02      	ldr	r2, [sp, #8]
 8012ee8:	eba5 030b 	sub.w	r3, r5, fp
 8012eec:	429a      	cmp	r2, r3
 8012eee:	ddb0      	ble.n	8012e52 <_dtoa_r+0xaba>
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	220a      	movs	r2, #10
 8012ef4:	9904      	ldr	r1, [sp, #16]
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	f000 fd7d 	bl	80139f6 <__multadd>
 8012efc:	9004      	str	r0, [sp, #16]
 8012efe:	e7ea      	b.n	8012ed6 <_dtoa_r+0xb3e>
 8012f00:	08014b50 	.word	0x08014b50
 8012f04:	08014bd0 	.word	0x08014bd0

08012f08 <__sflush_r>:
 8012f08:	898a      	ldrh	r2, [r1, #12]
 8012f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f0e:	4605      	mov	r5, r0
 8012f10:	0710      	lsls	r0, r2, #28
 8012f12:	460c      	mov	r4, r1
 8012f14:	d458      	bmi.n	8012fc8 <__sflush_r+0xc0>
 8012f16:	684b      	ldr	r3, [r1, #4]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	dc05      	bgt.n	8012f28 <__sflush_r+0x20>
 8012f1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	dc02      	bgt.n	8012f28 <__sflush_r+0x20>
 8012f22:	2000      	movs	r0, #0
 8012f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f2a:	2e00      	cmp	r6, #0
 8012f2c:	d0f9      	beq.n	8012f22 <__sflush_r+0x1a>
 8012f2e:	2300      	movs	r3, #0
 8012f30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012f34:	682f      	ldr	r7, [r5, #0]
 8012f36:	6a21      	ldr	r1, [r4, #32]
 8012f38:	602b      	str	r3, [r5, #0]
 8012f3a:	d032      	beq.n	8012fa2 <__sflush_r+0x9a>
 8012f3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f3e:	89a3      	ldrh	r3, [r4, #12]
 8012f40:	075a      	lsls	r2, r3, #29
 8012f42:	d505      	bpl.n	8012f50 <__sflush_r+0x48>
 8012f44:	6863      	ldr	r3, [r4, #4]
 8012f46:	1ac0      	subs	r0, r0, r3
 8012f48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f4a:	b10b      	cbz	r3, 8012f50 <__sflush_r+0x48>
 8012f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f4e:	1ac0      	subs	r0, r0, r3
 8012f50:	2300      	movs	r3, #0
 8012f52:	4602      	mov	r2, r0
 8012f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f56:	6a21      	ldr	r1, [r4, #32]
 8012f58:	4628      	mov	r0, r5
 8012f5a:	47b0      	blx	r6
 8012f5c:	1c43      	adds	r3, r0, #1
 8012f5e:	89a3      	ldrh	r3, [r4, #12]
 8012f60:	d106      	bne.n	8012f70 <__sflush_r+0x68>
 8012f62:	6829      	ldr	r1, [r5, #0]
 8012f64:	291d      	cmp	r1, #29
 8012f66:	d848      	bhi.n	8012ffa <__sflush_r+0xf2>
 8012f68:	4a29      	ldr	r2, [pc, #164]	; (8013010 <__sflush_r+0x108>)
 8012f6a:	40ca      	lsrs	r2, r1
 8012f6c:	07d6      	lsls	r6, r2, #31
 8012f6e:	d544      	bpl.n	8012ffa <__sflush_r+0xf2>
 8012f70:	2200      	movs	r2, #0
 8012f72:	6062      	str	r2, [r4, #4]
 8012f74:	04d9      	lsls	r1, r3, #19
 8012f76:	6922      	ldr	r2, [r4, #16]
 8012f78:	6022      	str	r2, [r4, #0]
 8012f7a:	d504      	bpl.n	8012f86 <__sflush_r+0x7e>
 8012f7c:	1c42      	adds	r2, r0, #1
 8012f7e:	d101      	bne.n	8012f84 <__sflush_r+0x7c>
 8012f80:	682b      	ldr	r3, [r5, #0]
 8012f82:	b903      	cbnz	r3, 8012f86 <__sflush_r+0x7e>
 8012f84:	6560      	str	r0, [r4, #84]	; 0x54
 8012f86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f88:	602f      	str	r7, [r5, #0]
 8012f8a:	2900      	cmp	r1, #0
 8012f8c:	d0c9      	beq.n	8012f22 <__sflush_r+0x1a>
 8012f8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f92:	4299      	cmp	r1, r3
 8012f94:	d002      	beq.n	8012f9c <__sflush_r+0x94>
 8012f96:	4628      	mov	r0, r5
 8012f98:	f7fd f9bc 	bl	8010314 <_free_r>
 8012f9c:	2000      	movs	r0, #0
 8012f9e:	6360      	str	r0, [r4, #52]	; 0x34
 8012fa0:	e7c0      	b.n	8012f24 <__sflush_r+0x1c>
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	4628      	mov	r0, r5
 8012fa6:	47b0      	blx	r6
 8012fa8:	1c41      	adds	r1, r0, #1
 8012faa:	d1c8      	bne.n	8012f3e <__sflush_r+0x36>
 8012fac:	682b      	ldr	r3, [r5, #0]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d0c5      	beq.n	8012f3e <__sflush_r+0x36>
 8012fb2:	2b1d      	cmp	r3, #29
 8012fb4:	d001      	beq.n	8012fba <__sflush_r+0xb2>
 8012fb6:	2b16      	cmp	r3, #22
 8012fb8:	d101      	bne.n	8012fbe <__sflush_r+0xb6>
 8012fba:	602f      	str	r7, [r5, #0]
 8012fbc:	e7b1      	b.n	8012f22 <__sflush_r+0x1a>
 8012fbe:	89a3      	ldrh	r3, [r4, #12]
 8012fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fc4:	81a3      	strh	r3, [r4, #12]
 8012fc6:	e7ad      	b.n	8012f24 <__sflush_r+0x1c>
 8012fc8:	690f      	ldr	r7, [r1, #16]
 8012fca:	2f00      	cmp	r7, #0
 8012fcc:	d0a9      	beq.n	8012f22 <__sflush_r+0x1a>
 8012fce:	0793      	lsls	r3, r2, #30
 8012fd0:	680e      	ldr	r6, [r1, #0]
 8012fd2:	bf08      	it	eq
 8012fd4:	694b      	ldreq	r3, [r1, #20]
 8012fd6:	600f      	str	r7, [r1, #0]
 8012fd8:	bf18      	it	ne
 8012fda:	2300      	movne	r3, #0
 8012fdc:	eba6 0807 	sub.w	r8, r6, r7
 8012fe0:	608b      	str	r3, [r1, #8]
 8012fe2:	f1b8 0f00 	cmp.w	r8, #0
 8012fe6:	dd9c      	ble.n	8012f22 <__sflush_r+0x1a>
 8012fe8:	4643      	mov	r3, r8
 8012fea:	463a      	mov	r2, r7
 8012fec:	6a21      	ldr	r1, [r4, #32]
 8012fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012ff0:	4628      	mov	r0, r5
 8012ff2:	47b0      	blx	r6
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	dc06      	bgt.n	8013006 <__sflush_r+0xfe>
 8012ff8:	89a3      	ldrh	r3, [r4, #12]
 8012ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ffe:	81a3      	strh	r3, [r4, #12]
 8013000:	f04f 30ff 	mov.w	r0, #4294967295
 8013004:	e78e      	b.n	8012f24 <__sflush_r+0x1c>
 8013006:	4407      	add	r7, r0
 8013008:	eba8 0800 	sub.w	r8, r8, r0
 801300c:	e7e9      	b.n	8012fe2 <__sflush_r+0xda>
 801300e:	bf00      	nop
 8013010:	20400001 	.word	0x20400001

08013014 <_fflush_r>:
 8013014:	b538      	push	{r3, r4, r5, lr}
 8013016:	690b      	ldr	r3, [r1, #16]
 8013018:	4605      	mov	r5, r0
 801301a:	460c      	mov	r4, r1
 801301c:	b1db      	cbz	r3, 8013056 <_fflush_r+0x42>
 801301e:	b118      	cbz	r0, 8013028 <_fflush_r+0x14>
 8013020:	6983      	ldr	r3, [r0, #24]
 8013022:	b90b      	cbnz	r3, 8013028 <_fflush_r+0x14>
 8013024:	f000 f860 	bl	80130e8 <__sinit>
 8013028:	4b0c      	ldr	r3, [pc, #48]	; (801305c <_fflush_r+0x48>)
 801302a:	429c      	cmp	r4, r3
 801302c:	d109      	bne.n	8013042 <_fflush_r+0x2e>
 801302e:	686c      	ldr	r4, [r5, #4]
 8013030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013034:	b17b      	cbz	r3, 8013056 <_fflush_r+0x42>
 8013036:	4621      	mov	r1, r4
 8013038:	4628      	mov	r0, r5
 801303a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801303e:	f7ff bf63 	b.w	8012f08 <__sflush_r>
 8013042:	4b07      	ldr	r3, [pc, #28]	; (8013060 <_fflush_r+0x4c>)
 8013044:	429c      	cmp	r4, r3
 8013046:	d101      	bne.n	801304c <_fflush_r+0x38>
 8013048:	68ac      	ldr	r4, [r5, #8]
 801304a:	e7f1      	b.n	8013030 <_fflush_r+0x1c>
 801304c:	4b05      	ldr	r3, [pc, #20]	; (8013064 <_fflush_r+0x50>)
 801304e:	429c      	cmp	r4, r3
 8013050:	bf08      	it	eq
 8013052:	68ec      	ldreq	r4, [r5, #12]
 8013054:	e7ec      	b.n	8013030 <_fflush_r+0x1c>
 8013056:	2000      	movs	r0, #0
 8013058:	bd38      	pop	{r3, r4, r5, pc}
 801305a:	bf00      	nop
 801305c:	08014c00 	.word	0x08014c00
 8013060:	08014c20 	.word	0x08014c20
 8013064:	08014be0 	.word	0x08014be0

08013068 <std>:
 8013068:	2300      	movs	r3, #0
 801306a:	b510      	push	{r4, lr}
 801306c:	4604      	mov	r4, r0
 801306e:	e9c0 3300 	strd	r3, r3, [r0]
 8013072:	6083      	str	r3, [r0, #8]
 8013074:	8181      	strh	r1, [r0, #12]
 8013076:	6643      	str	r3, [r0, #100]	; 0x64
 8013078:	81c2      	strh	r2, [r0, #14]
 801307a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801307e:	6183      	str	r3, [r0, #24]
 8013080:	4619      	mov	r1, r3
 8013082:	2208      	movs	r2, #8
 8013084:	305c      	adds	r0, #92	; 0x5c
 8013086:	f7fd f93c 	bl	8010302 <memset>
 801308a:	4b05      	ldr	r3, [pc, #20]	; (80130a0 <std+0x38>)
 801308c:	6263      	str	r3, [r4, #36]	; 0x24
 801308e:	4b05      	ldr	r3, [pc, #20]	; (80130a4 <std+0x3c>)
 8013090:	62a3      	str	r3, [r4, #40]	; 0x28
 8013092:	4b05      	ldr	r3, [pc, #20]	; (80130a8 <std+0x40>)
 8013094:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013096:	4b05      	ldr	r3, [pc, #20]	; (80130ac <std+0x44>)
 8013098:	6224      	str	r4, [r4, #32]
 801309a:	6323      	str	r3, [r4, #48]	; 0x30
 801309c:	bd10      	pop	{r4, pc}
 801309e:	bf00      	nop
 80130a0:	080146a1 	.word	0x080146a1
 80130a4:	080146c3 	.word	0x080146c3
 80130a8:	080146fb 	.word	0x080146fb
 80130ac:	0801471f 	.word	0x0801471f

080130b0 <_cleanup_r>:
 80130b0:	4901      	ldr	r1, [pc, #4]	; (80130b8 <_cleanup_r+0x8>)
 80130b2:	f000 b885 	b.w	80131c0 <_fwalk_reent>
 80130b6:	bf00      	nop
 80130b8:	08013015 	.word	0x08013015

080130bc <__sfmoreglue>:
 80130bc:	b570      	push	{r4, r5, r6, lr}
 80130be:	1e4a      	subs	r2, r1, #1
 80130c0:	2568      	movs	r5, #104	; 0x68
 80130c2:	4355      	muls	r5, r2
 80130c4:	460e      	mov	r6, r1
 80130c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80130ca:	f7fd f971 	bl	80103b0 <_malloc_r>
 80130ce:	4604      	mov	r4, r0
 80130d0:	b140      	cbz	r0, 80130e4 <__sfmoreglue+0x28>
 80130d2:	2100      	movs	r1, #0
 80130d4:	e9c0 1600 	strd	r1, r6, [r0]
 80130d8:	300c      	adds	r0, #12
 80130da:	60a0      	str	r0, [r4, #8]
 80130dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80130e0:	f7fd f90f 	bl	8010302 <memset>
 80130e4:	4620      	mov	r0, r4
 80130e6:	bd70      	pop	{r4, r5, r6, pc}

080130e8 <__sinit>:
 80130e8:	6983      	ldr	r3, [r0, #24]
 80130ea:	b510      	push	{r4, lr}
 80130ec:	4604      	mov	r4, r0
 80130ee:	bb33      	cbnz	r3, 801313e <__sinit+0x56>
 80130f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80130f4:	6503      	str	r3, [r0, #80]	; 0x50
 80130f6:	4b12      	ldr	r3, [pc, #72]	; (8013140 <__sinit+0x58>)
 80130f8:	4a12      	ldr	r2, [pc, #72]	; (8013144 <__sinit+0x5c>)
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	6282      	str	r2, [r0, #40]	; 0x28
 80130fe:	4298      	cmp	r0, r3
 8013100:	bf04      	itt	eq
 8013102:	2301      	moveq	r3, #1
 8013104:	6183      	streq	r3, [r0, #24]
 8013106:	f000 f81f 	bl	8013148 <__sfp>
 801310a:	6060      	str	r0, [r4, #4]
 801310c:	4620      	mov	r0, r4
 801310e:	f000 f81b 	bl	8013148 <__sfp>
 8013112:	60a0      	str	r0, [r4, #8]
 8013114:	4620      	mov	r0, r4
 8013116:	f000 f817 	bl	8013148 <__sfp>
 801311a:	2200      	movs	r2, #0
 801311c:	60e0      	str	r0, [r4, #12]
 801311e:	2104      	movs	r1, #4
 8013120:	6860      	ldr	r0, [r4, #4]
 8013122:	f7ff ffa1 	bl	8013068 <std>
 8013126:	2201      	movs	r2, #1
 8013128:	2109      	movs	r1, #9
 801312a:	68a0      	ldr	r0, [r4, #8]
 801312c:	f7ff ff9c 	bl	8013068 <std>
 8013130:	2202      	movs	r2, #2
 8013132:	2112      	movs	r1, #18
 8013134:	68e0      	ldr	r0, [r4, #12]
 8013136:	f7ff ff97 	bl	8013068 <std>
 801313a:	2301      	movs	r3, #1
 801313c:	61a3      	str	r3, [r4, #24]
 801313e:	bd10      	pop	{r4, pc}
 8013140:	08014b3c 	.word	0x08014b3c
 8013144:	080130b1 	.word	0x080130b1

08013148 <__sfp>:
 8013148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801314a:	4b1b      	ldr	r3, [pc, #108]	; (80131b8 <__sfp+0x70>)
 801314c:	681e      	ldr	r6, [r3, #0]
 801314e:	69b3      	ldr	r3, [r6, #24]
 8013150:	4607      	mov	r7, r0
 8013152:	b913      	cbnz	r3, 801315a <__sfp+0x12>
 8013154:	4630      	mov	r0, r6
 8013156:	f7ff ffc7 	bl	80130e8 <__sinit>
 801315a:	3648      	adds	r6, #72	; 0x48
 801315c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013160:	3b01      	subs	r3, #1
 8013162:	d503      	bpl.n	801316c <__sfp+0x24>
 8013164:	6833      	ldr	r3, [r6, #0]
 8013166:	b133      	cbz	r3, 8013176 <__sfp+0x2e>
 8013168:	6836      	ldr	r6, [r6, #0]
 801316a:	e7f7      	b.n	801315c <__sfp+0x14>
 801316c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013170:	b16d      	cbz	r5, 801318e <__sfp+0x46>
 8013172:	3468      	adds	r4, #104	; 0x68
 8013174:	e7f4      	b.n	8013160 <__sfp+0x18>
 8013176:	2104      	movs	r1, #4
 8013178:	4638      	mov	r0, r7
 801317a:	f7ff ff9f 	bl	80130bc <__sfmoreglue>
 801317e:	6030      	str	r0, [r6, #0]
 8013180:	2800      	cmp	r0, #0
 8013182:	d1f1      	bne.n	8013168 <__sfp+0x20>
 8013184:	230c      	movs	r3, #12
 8013186:	603b      	str	r3, [r7, #0]
 8013188:	4604      	mov	r4, r0
 801318a:	4620      	mov	r0, r4
 801318c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801318e:	4b0b      	ldr	r3, [pc, #44]	; (80131bc <__sfp+0x74>)
 8013190:	6665      	str	r5, [r4, #100]	; 0x64
 8013192:	e9c4 5500 	strd	r5, r5, [r4]
 8013196:	60a5      	str	r5, [r4, #8]
 8013198:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801319c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80131a0:	2208      	movs	r2, #8
 80131a2:	4629      	mov	r1, r5
 80131a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80131a8:	f7fd f8ab 	bl	8010302 <memset>
 80131ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80131b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80131b4:	e7e9      	b.n	801318a <__sfp+0x42>
 80131b6:	bf00      	nop
 80131b8:	08014b3c 	.word	0x08014b3c
 80131bc:	ffff0001 	.word	0xffff0001

080131c0 <_fwalk_reent>:
 80131c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131c4:	4680      	mov	r8, r0
 80131c6:	4689      	mov	r9, r1
 80131c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80131cc:	2600      	movs	r6, #0
 80131ce:	b914      	cbnz	r4, 80131d6 <_fwalk_reent+0x16>
 80131d0:	4630      	mov	r0, r6
 80131d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80131da:	3f01      	subs	r7, #1
 80131dc:	d501      	bpl.n	80131e2 <_fwalk_reent+0x22>
 80131de:	6824      	ldr	r4, [r4, #0]
 80131e0:	e7f5      	b.n	80131ce <_fwalk_reent+0xe>
 80131e2:	89ab      	ldrh	r3, [r5, #12]
 80131e4:	2b01      	cmp	r3, #1
 80131e6:	d907      	bls.n	80131f8 <_fwalk_reent+0x38>
 80131e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131ec:	3301      	adds	r3, #1
 80131ee:	d003      	beq.n	80131f8 <_fwalk_reent+0x38>
 80131f0:	4629      	mov	r1, r5
 80131f2:	4640      	mov	r0, r8
 80131f4:	47c8      	blx	r9
 80131f6:	4306      	orrs	r6, r0
 80131f8:	3568      	adds	r5, #104	; 0x68
 80131fa:	e7ee      	b.n	80131da <_fwalk_reent+0x1a>

080131fc <rshift>:
 80131fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131fe:	6906      	ldr	r6, [r0, #16]
 8013200:	114b      	asrs	r3, r1, #5
 8013202:	429e      	cmp	r6, r3
 8013204:	f100 0414 	add.w	r4, r0, #20
 8013208:	dd30      	ble.n	801326c <rshift+0x70>
 801320a:	f011 011f 	ands.w	r1, r1, #31
 801320e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8013212:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8013216:	d108      	bne.n	801322a <rshift+0x2e>
 8013218:	4621      	mov	r1, r4
 801321a:	42b2      	cmp	r2, r6
 801321c:	460b      	mov	r3, r1
 801321e:	d211      	bcs.n	8013244 <rshift+0x48>
 8013220:	f852 3b04 	ldr.w	r3, [r2], #4
 8013224:	f841 3b04 	str.w	r3, [r1], #4
 8013228:	e7f7      	b.n	801321a <rshift+0x1e>
 801322a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801322e:	f1c1 0c20 	rsb	ip, r1, #32
 8013232:	40cd      	lsrs	r5, r1
 8013234:	3204      	adds	r2, #4
 8013236:	4623      	mov	r3, r4
 8013238:	42b2      	cmp	r2, r6
 801323a:	4617      	mov	r7, r2
 801323c:	d30c      	bcc.n	8013258 <rshift+0x5c>
 801323e:	601d      	str	r5, [r3, #0]
 8013240:	b105      	cbz	r5, 8013244 <rshift+0x48>
 8013242:	3304      	adds	r3, #4
 8013244:	1b1a      	subs	r2, r3, r4
 8013246:	42a3      	cmp	r3, r4
 8013248:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801324c:	bf08      	it	eq
 801324e:	2300      	moveq	r3, #0
 8013250:	6102      	str	r2, [r0, #16]
 8013252:	bf08      	it	eq
 8013254:	6143      	streq	r3, [r0, #20]
 8013256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013258:	683f      	ldr	r7, [r7, #0]
 801325a:	fa07 f70c 	lsl.w	r7, r7, ip
 801325e:	433d      	orrs	r5, r7
 8013260:	f843 5b04 	str.w	r5, [r3], #4
 8013264:	f852 5b04 	ldr.w	r5, [r2], #4
 8013268:	40cd      	lsrs	r5, r1
 801326a:	e7e5      	b.n	8013238 <rshift+0x3c>
 801326c:	4623      	mov	r3, r4
 801326e:	e7e9      	b.n	8013244 <rshift+0x48>

08013270 <__hexdig_fun>:
 8013270:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013274:	2b09      	cmp	r3, #9
 8013276:	d802      	bhi.n	801327e <__hexdig_fun+0xe>
 8013278:	3820      	subs	r0, #32
 801327a:	b2c0      	uxtb	r0, r0
 801327c:	4770      	bx	lr
 801327e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013282:	2b05      	cmp	r3, #5
 8013284:	d801      	bhi.n	801328a <__hexdig_fun+0x1a>
 8013286:	3847      	subs	r0, #71	; 0x47
 8013288:	e7f7      	b.n	801327a <__hexdig_fun+0xa>
 801328a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801328e:	2b05      	cmp	r3, #5
 8013290:	d801      	bhi.n	8013296 <__hexdig_fun+0x26>
 8013292:	3827      	subs	r0, #39	; 0x27
 8013294:	e7f1      	b.n	801327a <__hexdig_fun+0xa>
 8013296:	2000      	movs	r0, #0
 8013298:	4770      	bx	lr

0801329a <__gethex>:
 801329a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801329e:	b08b      	sub	sp, #44	; 0x2c
 80132a0:	468a      	mov	sl, r1
 80132a2:	9002      	str	r0, [sp, #8]
 80132a4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80132a6:	9306      	str	r3, [sp, #24]
 80132a8:	4690      	mov	r8, r2
 80132aa:	f000 fad0 	bl	801384e <__localeconv_l>
 80132ae:	6803      	ldr	r3, [r0, #0]
 80132b0:	9303      	str	r3, [sp, #12]
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7ec ff9c 	bl	80001f0 <strlen>
 80132b8:	9b03      	ldr	r3, [sp, #12]
 80132ba:	9001      	str	r0, [sp, #4]
 80132bc:	4403      	add	r3, r0
 80132be:	f04f 0b00 	mov.w	fp, #0
 80132c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80132c6:	9307      	str	r3, [sp, #28]
 80132c8:	f8da 3000 	ldr.w	r3, [sl]
 80132cc:	3302      	adds	r3, #2
 80132ce:	461f      	mov	r7, r3
 80132d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80132d4:	2830      	cmp	r0, #48	; 0x30
 80132d6:	d06c      	beq.n	80133b2 <__gethex+0x118>
 80132d8:	f7ff ffca 	bl	8013270 <__hexdig_fun>
 80132dc:	4604      	mov	r4, r0
 80132de:	2800      	cmp	r0, #0
 80132e0:	d16a      	bne.n	80133b8 <__gethex+0x11e>
 80132e2:	9a01      	ldr	r2, [sp, #4]
 80132e4:	9903      	ldr	r1, [sp, #12]
 80132e6:	4638      	mov	r0, r7
 80132e8:	f001 fa1d 	bl	8014726 <strncmp>
 80132ec:	2800      	cmp	r0, #0
 80132ee:	d166      	bne.n	80133be <__gethex+0x124>
 80132f0:	9b01      	ldr	r3, [sp, #4]
 80132f2:	5cf8      	ldrb	r0, [r7, r3]
 80132f4:	18fe      	adds	r6, r7, r3
 80132f6:	f7ff ffbb 	bl	8013270 <__hexdig_fun>
 80132fa:	2800      	cmp	r0, #0
 80132fc:	d062      	beq.n	80133c4 <__gethex+0x12a>
 80132fe:	4633      	mov	r3, r6
 8013300:	7818      	ldrb	r0, [r3, #0]
 8013302:	2830      	cmp	r0, #48	; 0x30
 8013304:	461f      	mov	r7, r3
 8013306:	f103 0301 	add.w	r3, r3, #1
 801330a:	d0f9      	beq.n	8013300 <__gethex+0x66>
 801330c:	f7ff ffb0 	bl	8013270 <__hexdig_fun>
 8013310:	fab0 f580 	clz	r5, r0
 8013314:	096d      	lsrs	r5, r5, #5
 8013316:	4634      	mov	r4, r6
 8013318:	f04f 0b01 	mov.w	fp, #1
 801331c:	463a      	mov	r2, r7
 801331e:	4616      	mov	r6, r2
 8013320:	3201      	adds	r2, #1
 8013322:	7830      	ldrb	r0, [r6, #0]
 8013324:	f7ff ffa4 	bl	8013270 <__hexdig_fun>
 8013328:	2800      	cmp	r0, #0
 801332a:	d1f8      	bne.n	801331e <__gethex+0x84>
 801332c:	9a01      	ldr	r2, [sp, #4]
 801332e:	9903      	ldr	r1, [sp, #12]
 8013330:	4630      	mov	r0, r6
 8013332:	f001 f9f8 	bl	8014726 <strncmp>
 8013336:	b950      	cbnz	r0, 801334e <__gethex+0xb4>
 8013338:	b954      	cbnz	r4, 8013350 <__gethex+0xb6>
 801333a:	9b01      	ldr	r3, [sp, #4]
 801333c:	18f4      	adds	r4, r6, r3
 801333e:	4622      	mov	r2, r4
 8013340:	4616      	mov	r6, r2
 8013342:	3201      	adds	r2, #1
 8013344:	7830      	ldrb	r0, [r6, #0]
 8013346:	f7ff ff93 	bl	8013270 <__hexdig_fun>
 801334a:	2800      	cmp	r0, #0
 801334c:	d1f8      	bne.n	8013340 <__gethex+0xa6>
 801334e:	b10c      	cbz	r4, 8013354 <__gethex+0xba>
 8013350:	1ba4      	subs	r4, r4, r6
 8013352:	00a4      	lsls	r4, r4, #2
 8013354:	7833      	ldrb	r3, [r6, #0]
 8013356:	2b50      	cmp	r3, #80	; 0x50
 8013358:	d001      	beq.n	801335e <__gethex+0xc4>
 801335a:	2b70      	cmp	r3, #112	; 0x70
 801335c:	d140      	bne.n	80133e0 <__gethex+0x146>
 801335e:	7873      	ldrb	r3, [r6, #1]
 8013360:	2b2b      	cmp	r3, #43	; 0x2b
 8013362:	d031      	beq.n	80133c8 <__gethex+0x12e>
 8013364:	2b2d      	cmp	r3, #45	; 0x2d
 8013366:	d033      	beq.n	80133d0 <__gethex+0x136>
 8013368:	1c71      	adds	r1, r6, #1
 801336a:	f04f 0900 	mov.w	r9, #0
 801336e:	7808      	ldrb	r0, [r1, #0]
 8013370:	f7ff ff7e 	bl	8013270 <__hexdig_fun>
 8013374:	1e43      	subs	r3, r0, #1
 8013376:	b2db      	uxtb	r3, r3
 8013378:	2b18      	cmp	r3, #24
 801337a:	d831      	bhi.n	80133e0 <__gethex+0x146>
 801337c:	f1a0 0210 	sub.w	r2, r0, #16
 8013380:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013384:	f7ff ff74 	bl	8013270 <__hexdig_fun>
 8013388:	1e43      	subs	r3, r0, #1
 801338a:	b2db      	uxtb	r3, r3
 801338c:	2b18      	cmp	r3, #24
 801338e:	d922      	bls.n	80133d6 <__gethex+0x13c>
 8013390:	f1b9 0f00 	cmp.w	r9, #0
 8013394:	d000      	beq.n	8013398 <__gethex+0xfe>
 8013396:	4252      	negs	r2, r2
 8013398:	4414      	add	r4, r2
 801339a:	f8ca 1000 	str.w	r1, [sl]
 801339e:	b30d      	cbz	r5, 80133e4 <__gethex+0x14a>
 80133a0:	f1bb 0f00 	cmp.w	fp, #0
 80133a4:	bf0c      	ite	eq
 80133a6:	2706      	moveq	r7, #6
 80133a8:	2700      	movne	r7, #0
 80133aa:	4638      	mov	r0, r7
 80133ac:	b00b      	add	sp, #44	; 0x2c
 80133ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133b2:	f10b 0b01 	add.w	fp, fp, #1
 80133b6:	e78a      	b.n	80132ce <__gethex+0x34>
 80133b8:	2500      	movs	r5, #0
 80133ba:	462c      	mov	r4, r5
 80133bc:	e7ae      	b.n	801331c <__gethex+0x82>
 80133be:	463e      	mov	r6, r7
 80133c0:	2501      	movs	r5, #1
 80133c2:	e7c7      	b.n	8013354 <__gethex+0xba>
 80133c4:	4604      	mov	r4, r0
 80133c6:	e7fb      	b.n	80133c0 <__gethex+0x126>
 80133c8:	f04f 0900 	mov.w	r9, #0
 80133cc:	1cb1      	adds	r1, r6, #2
 80133ce:	e7ce      	b.n	801336e <__gethex+0xd4>
 80133d0:	f04f 0901 	mov.w	r9, #1
 80133d4:	e7fa      	b.n	80133cc <__gethex+0x132>
 80133d6:	230a      	movs	r3, #10
 80133d8:	fb03 0202 	mla	r2, r3, r2, r0
 80133dc:	3a10      	subs	r2, #16
 80133de:	e7cf      	b.n	8013380 <__gethex+0xe6>
 80133e0:	4631      	mov	r1, r6
 80133e2:	e7da      	b.n	801339a <__gethex+0x100>
 80133e4:	1bf3      	subs	r3, r6, r7
 80133e6:	3b01      	subs	r3, #1
 80133e8:	4629      	mov	r1, r5
 80133ea:	2b07      	cmp	r3, #7
 80133ec:	dc49      	bgt.n	8013482 <__gethex+0x1e8>
 80133ee:	9802      	ldr	r0, [sp, #8]
 80133f0:	f000 fab6 	bl	8013960 <_Balloc>
 80133f4:	9b01      	ldr	r3, [sp, #4]
 80133f6:	f100 0914 	add.w	r9, r0, #20
 80133fa:	f04f 0b00 	mov.w	fp, #0
 80133fe:	f1c3 0301 	rsb	r3, r3, #1
 8013402:	4605      	mov	r5, r0
 8013404:	f8cd 9010 	str.w	r9, [sp, #16]
 8013408:	46da      	mov	sl, fp
 801340a:	9308      	str	r3, [sp, #32]
 801340c:	42b7      	cmp	r7, r6
 801340e:	d33b      	bcc.n	8013488 <__gethex+0x1ee>
 8013410:	9804      	ldr	r0, [sp, #16]
 8013412:	f840 ab04 	str.w	sl, [r0], #4
 8013416:	eba0 0009 	sub.w	r0, r0, r9
 801341a:	1080      	asrs	r0, r0, #2
 801341c:	6128      	str	r0, [r5, #16]
 801341e:	0147      	lsls	r7, r0, #5
 8013420:	4650      	mov	r0, sl
 8013422:	f000 fb61 	bl	8013ae8 <__hi0bits>
 8013426:	f8d8 6000 	ldr.w	r6, [r8]
 801342a:	1a3f      	subs	r7, r7, r0
 801342c:	42b7      	cmp	r7, r6
 801342e:	dd64      	ble.n	80134fa <__gethex+0x260>
 8013430:	1bbf      	subs	r7, r7, r6
 8013432:	4639      	mov	r1, r7
 8013434:	4628      	mov	r0, r5
 8013436:	f000 fe71 	bl	801411c <__any_on>
 801343a:	4682      	mov	sl, r0
 801343c:	b178      	cbz	r0, 801345e <__gethex+0x1c4>
 801343e:	1e7b      	subs	r3, r7, #1
 8013440:	1159      	asrs	r1, r3, #5
 8013442:	f003 021f 	and.w	r2, r3, #31
 8013446:	f04f 0a01 	mov.w	sl, #1
 801344a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801344e:	fa0a f202 	lsl.w	r2, sl, r2
 8013452:	420a      	tst	r2, r1
 8013454:	d003      	beq.n	801345e <__gethex+0x1c4>
 8013456:	4553      	cmp	r3, sl
 8013458:	dc46      	bgt.n	80134e8 <__gethex+0x24e>
 801345a:	f04f 0a02 	mov.w	sl, #2
 801345e:	4639      	mov	r1, r7
 8013460:	4628      	mov	r0, r5
 8013462:	f7ff fecb 	bl	80131fc <rshift>
 8013466:	443c      	add	r4, r7
 8013468:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801346c:	42a3      	cmp	r3, r4
 801346e:	da52      	bge.n	8013516 <__gethex+0x27c>
 8013470:	4629      	mov	r1, r5
 8013472:	9802      	ldr	r0, [sp, #8]
 8013474:	f000 faa8 	bl	80139c8 <_Bfree>
 8013478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801347a:	2300      	movs	r3, #0
 801347c:	6013      	str	r3, [r2, #0]
 801347e:	27a3      	movs	r7, #163	; 0xa3
 8013480:	e793      	b.n	80133aa <__gethex+0x110>
 8013482:	3101      	adds	r1, #1
 8013484:	105b      	asrs	r3, r3, #1
 8013486:	e7b0      	b.n	80133ea <__gethex+0x150>
 8013488:	1e73      	subs	r3, r6, #1
 801348a:	9305      	str	r3, [sp, #20]
 801348c:	9a07      	ldr	r2, [sp, #28]
 801348e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013492:	4293      	cmp	r3, r2
 8013494:	d018      	beq.n	80134c8 <__gethex+0x22e>
 8013496:	f1bb 0f20 	cmp.w	fp, #32
 801349a:	d107      	bne.n	80134ac <__gethex+0x212>
 801349c:	9b04      	ldr	r3, [sp, #16]
 801349e:	f8c3 a000 	str.w	sl, [r3]
 80134a2:	3304      	adds	r3, #4
 80134a4:	f04f 0a00 	mov.w	sl, #0
 80134a8:	9304      	str	r3, [sp, #16]
 80134aa:	46d3      	mov	fp, sl
 80134ac:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80134b0:	f7ff fede 	bl	8013270 <__hexdig_fun>
 80134b4:	f000 000f 	and.w	r0, r0, #15
 80134b8:	fa00 f00b 	lsl.w	r0, r0, fp
 80134bc:	ea4a 0a00 	orr.w	sl, sl, r0
 80134c0:	f10b 0b04 	add.w	fp, fp, #4
 80134c4:	9b05      	ldr	r3, [sp, #20]
 80134c6:	e00d      	b.n	80134e4 <__gethex+0x24a>
 80134c8:	9b05      	ldr	r3, [sp, #20]
 80134ca:	9a08      	ldr	r2, [sp, #32]
 80134cc:	4413      	add	r3, r2
 80134ce:	42bb      	cmp	r3, r7
 80134d0:	d3e1      	bcc.n	8013496 <__gethex+0x1fc>
 80134d2:	4618      	mov	r0, r3
 80134d4:	9a01      	ldr	r2, [sp, #4]
 80134d6:	9903      	ldr	r1, [sp, #12]
 80134d8:	9309      	str	r3, [sp, #36]	; 0x24
 80134da:	f001 f924 	bl	8014726 <strncmp>
 80134de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134e0:	2800      	cmp	r0, #0
 80134e2:	d1d8      	bne.n	8013496 <__gethex+0x1fc>
 80134e4:	461e      	mov	r6, r3
 80134e6:	e791      	b.n	801340c <__gethex+0x172>
 80134e8:	1eb9      	subs	r1, r7, #2
 80134ea:	4628      	mov	r0, r5
 80134ec:	f000 fe16 	bl	801411c <__any_on>
 80134f0:	2800      	cmp	r0, #0
 80134f2:	d0b2      	beq.n	801345a <__gethex+0x1c0>
 80134f4:	f04f 0a03 	mov.w	sl, #3
 80134f8:	e7b1      	b.n	801345e <__gethex+0x1c4>
 80134fa:	da09      	bge.n	8013510 <__gethex+0x276>
 80134fc:	1bf7      	subs	r7, r6, r7
 80134fe:	4629      	mov	r1, r5
 8013500:	463a      	mov	r2, r7
 8013502:	9802      	ldr	r0, [sp, #8]
 8013504:	f000 fc2c 	bl	8013d60 <__lshift>
 8013508:	1be4      	subs	r4, r4, r7
 801350a:	4605      	mov	r5, r0
 801350c:	f100 0914 	add.w	r9, r0, #20
 8013510:	f04f 0a00 	mov.w	sl, #0
 8013514:	e7a8      	b.n	8013468 <__gethex+0x1ce>
 8013516:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801351a:	42a0      	cmp	r0, r4
 801351c:	dd6a      	ble.n	80135f4 <__gethex+0x35a>
 801351e:	1b04      	subs	r4, r0, r4
 8013520:	42a6      	cmp	r6, r4
 8013522:	dc2e      	bgt.n	8013582 <__gethex+0x2e8>
 8013524:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013528:	2b02      	cmp	r3, #2
 801352a:	d022      	beq.n	8013572 <__gethex+0x2d8>
 801352c:	2b03      	cmp	r3, #3
 801352e:	d024      	beq.n	801357a <__gethex+0x2e0>
 8013530:	2b01      	cmp	r3, #1
 8013532:	d115      	bne.n	8013560 <__gethex+0x2c6>
 8013534:	42a6      	cmp	r6, r4
 8013536:	d113      	bne.n	8013560 <__gethex+0x2c6>
 8013538:	2e01      	cmp	r6, #1
 801353a:	dc0b      	bgt.n	8013554 <__gethex+0x2ba>
 801353c:	9a06      	ldr	r2, [sp, #24]
 801353e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013542:	6013      	str	r3, [r2, #0]
 8013544:	2301      	movs	r3, #1
 8013546:	612b      	str	r3, [r5, #16]
 8013548:	f8c9 3000 	str.w	r3, [r9]
 801354c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801354e:	2762      	movs	r7, #98	; 0x62
 8013550:	601d      	str	r5, [r3, #0]
 8013552:	e72a      	b.n	80133aa <__gethex+0x110>
 8013554:	1e71      	subs	r1, r6, #1
 8013556:	4628      	mov	r0, r5
 8013558:	f000 fde0 	bl	801411c <__any_on>
 801355c:	2800      	cmp	r0, #0
 801355e:	d1ed      	bne.n	801353c <__gethex+0x2a2>
 8013560:	4629      	mov	r1, r5
 8013562:	9802      	ldr	r0, [sp, #8]
 8013564:	f000 fa30 	bl	80139c8 <_Bfree>
 8013568:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801356a:	2300      	movs	r3, #0
 801356c:	6013      	str	r3, [r2, #0]
 801356e:	2750      	movs	r7, #80	; 0x50
 8013570:	e71b      	b.n	80133aa <__gethex+0x110>
 8013572:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013574:	2b00      	cmp	r3, #0
 8013576:	d0e1      	beq.n	801353c <__gethex+0x2a2>
 8013578:	e7f2      	b.n	8013560 <__gethex+0x2c6>
 801357a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801357c:	2b00      	cmp	r3, #0
 801357e:	d1dd      	bne.n	801353c <__gethex+0x2a2>
 8013580:	e7ee      	b.n	8013560 <__gethex+0x2c6>
 8013582:	1e67      	subs	r7, r4, #1
 8013584:	f1ba 0f00 	cmp.w	sl, #0
 8013588:	d131      	bne.n	80135ee <__gethex+0x354>
 801358a:	b127      	cbz	r7, 8013596 <__gethex+0x2fc>
 801358c:	4639      	mov	r1, r7
 801358e:	4628      	mov	r0, r5
 8013590:	f000 fdc4 	bl	801411c <__any_on>
 8013594:	4682      	mov	sl, r0
 8013596:	117a      	asrs	r2, r7, #5
 8013598:	2301      	movs	r3, #1
 801359a:	f007 071f 	and.w	r7, r7, #31
 801359e:	fa03 f707 	lsl.w	r7, r3, r7
 80135a2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80135a6:	4621      	mov	r1, r4
 80135a8:	421f      	tst	r7, r3
 80135aa:	4628      	mov	r0, r5
 80135ac:	bf18      	it	ne
 80135ae:	f04a 0a02 	orrne.w	sl, sl, #2
 80135b2:	1b36      	subs	r6, r6, r4
 80135b4:	f7ff fe22 	bl	80131fc <rshift>
 80135b8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80135bc:	2702      	movs	r7, #2
 80135be:	f1ba 0f00 	cmp.w	sl, #0
 80135c2:	d048      	beq.n	8013656 <__gethex+0x3bc>
 80135c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80135c8:	2b02      	cmp	r3, #2
 80135ca:	d015      	beq.n	80135f8 <__gethex+0x35e>
 80135cc:	2b03      	cmp	r3, #3
 80135ce:	d017      	beq.n	8013600 <__gethex+0x366>
 80135d0:	2b01      	cmp	r3, #1
 80135d2:	d109      	bne.n	80135e8 <__gethex+0x34e>
 80135d4:	f01a 0f02 	tst.w	sl, #2
 80135d8:	d006      	beq.n	80135e8 <__gethex+0x34e>
 80135da:	f8d9 3000 	ldr.w	r3, [r9]
 80135de:	ea4a 0a03 	orr.w	sl, sl, r3
 80135e2:	f01a 0f01 	tst.w	sl, #1
 80135e6:	d10e      	bne.n	8013606 <__gethex+0x36c>
 80135e8:	f047 0710 	orr.w	r7, r7, #16
 80135ec:	e033      	b.n	8013656 <__gethex+0x3bc>
 80135ee:	f04f 0a01 	mov.w	sl, #1
 80135f2:	e7d0      	b.n	8013596 <__gethex+0x2fc>
 80135f4:	2701      	movs	r7, #1
 80135f6:	e7e2      	b.n	80135be <__gethex+0x324>
 80135f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80135fa:	f1c3 0301 	rsb	r3, r3, #1
 80135fe:	9315      	str	r3, [sp, #84]	; 0x54
 8013600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013602:	2b00      	cmp	r3, #0
 8013604:	d0f0      	beq.n	80135e8 <__gethex+0x34e>
 8013606:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801360a:	f105 0314 	add.w	r3, r5, #20
 801360e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8013612:	eb03 010a 	add.w	r1, r3, sl
 8013616:	f04f 0c00 	mov.w	ip, #0
 801361a:	4618      	mov	r0, r3
 801361c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013620:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013624:	d01c      	beq.n	8013660 <__gethex+0x3c6>
 8013626:	3201      	adds	r2, #1
 8013628:	6002      	str	r2, [r0, #0]
 801362a:	2f02      	cmp	r7, #2
 801362c:	f105 0314 	add.w	r3, r5, #20
 8013630:	d138      	bne.n	80136a4 <__gethex+0x40a>
 8013632:	f8d8 2000 	ldr.w	r2, [r8]
 8013636:	3a01      	subs	r2, #1
 8013638:	42b2      	cmp	r2, r6
 801363a:	d10a      	bne.n	8013652 <__gethex+0x3b8>
 801363c:	1171      	asrs	r1, r6, #5
 801363e:	2201      	movs	r2, #1
 8013640:	f006 061f 	and.w	r6, r6, #31
 8013644:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013648:	fa02 f606 	lsl.w	r6, r2, r6
 801364c:	421e      	tst	r6, r3
 801364e:	bf18      	it	ne
 8013650:	4617      	movne	r7, r2
 8013652:	f047 0720 	orr.w	r7, r7, #32
 8013656:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013658:	601d      	str	r5, [r3, #0]
 801365a:	9b06      	ldr	r3, [sp, #24]
 801365c:	601c      	str	r4, [r3, #0]
 801365e:	e6a4      	b.n	80133aa <__gethex+0x110>
 8013660:	4299      	cmp	r1, r3
 8013662:	f843 cc04 	str.w	ip, [r3, #-4]
 8013666:	d8d8      	bhi.n	801361a <__gethex+0x380>
 8013668:	68ab      	ldr	r3, [r5, #8]
 801366a:	4599      	cmp	r9, r3
 801366c:	db12      	blt.n	8013694 <__gethex+0x3fa>
 801366e:	6869      	ldr	r1, [r5, #4]
 8013670:	9802      	ldr	r0, [sp, #8]
 8013672:	3101      	adds	r1, #1
 8013674:	f000 f974 	bl	8013960 <_Balloc>
 8013678:	692a      	ldr	r2, [r5, #16]
 801367a:	3202      	adds	r2, #2
 801367c:	f105 010c 	add.w	r1, r5, #12
 8013680:	4683      	mov	fp, r0
 8013682:	0092      	lsls	r2, r2, #2
 8013684:	300c      	adds	r0, #12
 8013686:	f7fc fe31 	bl	80102ec <memcpy>
 801368a:	4629      	mov	r1, r5
 801368c:	9802      	ldr	r0, [sp, #8]
 801368e:	f000 f99b 	bl	80139c8 <_Bfree>
 8013692:	465d      	mov	r5, fp
 8013694:	692b      	ldr	r3, [r5, #16]
 8013696:	1c5a      	adds	r2, r3, #1
 8013698:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801369c:	612a      	str	r2, [r5, #16]
 801369e:	2201      	movs	r2, #1
 80136a0:	615a      	str	r2, [r3, #20]
 80136a2:	e7c2      	b.n	801362a <__gethex+0x390>
 80136a4:	692a      	ldr	r2, [r5, #16]
 80136a6:	454a      	cmp	r2, r9
 80136a8:	dd0b      	ble.n	80136c2 <__gethex+0x428>
 80136aa:	2101      	movs	r1, #1
 80136ac:	4628      	mov	r0, r5
 80136ae:	f7ff fda5 	bl	80131fc <rshift>
 80136b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80136b6:	3401      	adds	r4, #1
 80136b8:	42a3      	cmp	r3, r4
 80136ba:	f6ff aed9 	blt.w	8013470 <__gethex+0x1d6>
 80136be:	2701      	movs	r7, #1
 80136c0:	e7c7      	b.n	8013652 <__gethex+0x3b8>
 80136c2:	f016 061f 	ands.w	r6, r6, #31
 80136c6:	d0fa      	beq.n	80136be <__gethex+0x424>
 80136c8:	449a      	add	sl, r3
 80136ca:	f1c6 0620 	rsb	r6, r6, #32
 80136ce:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80136d2:	f000 fa09 	bl	8013ae8 <__hi0bits>
 80136d6:	42b0      	cmp	r0, r6
 80136d8:	dbe7      	blt.n	80136aa <__gethex+0x410>
 80136da:	e7f0      	b.n	80136be <__gethex+0x424>

080136dc <L_shift>:
 80136dc:	f1c2 0208 	rsb	r2, r2, #8
 80136e0:	0092      	lsls	r2, r2, #2
 80136e2:	b570      	push	{r4, r5, r6, lr}
 80136e4:	f1c2 0620 	rsb	r6, r2, #32
 80136e8:	6843      	ldr	r3, [r0, #4]
 80136ea:	6804      	ldr	r4, [r0, #0]
 80136ec:	fa03 f506 	lsl.w	r5, r3, r6
 80136f0:	432c      	orrs	r4, r5
 80136f2:	40d3      	lsrs	r3, r2
 80136f4:	6004      	str	r4, [r0, #0]
 80136f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80136fa:	4288      	cmp	r0, r1
 80136fc:	d3f4      	bcc.n	80136e8 <L_shift+0xc>
 80136fe:	bd70      	pop	{r4, r5, r6, pc}

08013700 <__match>:
 8013700:	b530      	push	{r4, r5, lr}
 8013702:	6803      	ldr	r3, [r0, #0]
 8013704:	3301      	adds	r3, #1
 8013706:	f811 4b01 	ldrb.w	r4, [r1], #1
 801370a:	b914      	cbnz	r4, 8013712 <__match+0x12>
 801370c:	6003      	str	r3, [r0, #0]
 801370e:	2001      	movs	r0, #1
 8013710:	bd30      	pop	{r4, r5, pc}
 8013712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013716:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801371a:	2d19      	cmp	r5, #25
 801371c:	bf98      	it	ls
 801371e:	3220      	addls	r2, #32
 8013720:	42a2      	cmp	r2, r4
 8013722:	d0f0      	beq.n	8013706 <__match+0x6>
 8013724:	2000      	movs	r0, #0
 8013726:	e7f3      	b.n	8013710 <__match+0x10>

08013728 <__hexnan>:
 8013728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801372c:	680b      	ldr	r3, [r1, #0]
 801372e:	6801      	ldr	r1, [r0, #0]
 8013730:	115f      	asrs	r7, r3, #5
 8013732:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8013736:	f013 031f 	ands.w	r3, r3, #31
 801373a:	b087      	sub	sp, #28
 801373c:	bf18      	it	ne
 801373e:	3704      	addne	r7, #4
 8013740:	2500      	movs	r5, #0
 8013742:	1f3e      	subs	r6, r7, #4
 8013744:	4682      	mov	sl, r0
 8013746:	4690      	mov	r8, r2
 8013748:	9301      	str	r3, [sp, #4]
 801374a:	f847 5c04 	str.w	r5, [r7, #-4]
 801374e:	46b1      	mov	r9, r6
 8013750:	4634      	mov	r4, r6
 8013752:	9502      	str	r5, [sp, #8]
 8013754:	46ab      	mov	fp, r5
 8013756:	784a      	ldrb	r2, [r1, #1]
 8013758:	1c4b      	adds	r3, r1, #1
 801375a:	9303      	str	r3, [sp, #12]
 801375c:	b342      	cbz	r2, 80137b0 <__hexnan+0x88>
 801375e:	4610      	mov	r0, r2
 8013760:	9105      	str	r1, [sp, #20]
 8013762:	9204      	str	r2, [sp, #16]
 8013764:	f7ff fd84 	bl	8013270 <__hexdig_fun>
 8013768:	2800      	cmp	r0, #0
 801376a:	d143      	bne.n	80137f4 <__hexnan+0xcc>
 801376c:	9a04      	ldr	r2, [sp, #16]
 801376e:	9905      	ldr	r1, [sp, #20]
 8013770:	2a20      	cmp	r2, #32
 8013772:	d818      	bhi.n	80137a6 <__hexnan+0x7e>
 8013774:	9b02      	ldr	r3, [sp, #8]
 8013776:	459b      	cmp	fp, r3
 8013778:	dd13      	ble.n	80137a2 <__hexnan+0x7a>
 801377a:	454c      	cmp	r4, r9
 801377c:	d206      	bcs.n	801378c <__hexnan+0x64>
 801377e:	2d07      	cmp	r5, #7
 8013780:	dc04      	bgt.n	801378c <__hexnan+0x64>
 8013782:	462a      	mov	r2, r5
 8013784:	4649      	mov	r1, r9
 8013786:	4620      	mov	r0, r4
 8013788:	f7ff ffa8 	bl	80136dc <L_shift>
 801378c:	4544      	cmp	r4, r8
 801378e:	d944      	bls.n	801381a <__hexnan+0xf2>
 8013790:	2300      	movs	r3, #0
 8013792:	f1a4 0904 	sub.w	r9, r4, #4
 8013796:	f844 3c04 	str.w	r3, [r4, #-4]
 801379a:	f8cd b008 	str.w	fp, [sp, #8]
 801379e:	464c      	mov	r4, r9
 80137a0:	461d      	mov	r5, r3
 80137a2:	9903      	ldr	r1, [sp, #12]
 80137a4:	e7d7      	b.n	8013756 <__hexnan+0x2e>
 80137a6:	2a29      	cmp	r2, #41	; 0x29
 80137a8:	d14a      	bne.n	8013840 <__hexnan+0x118>
 80137aa:	3102      	adds	r1, #2
 80137ac:	f8ca 1000 	str.w	r1, [sl]
 80137b0:	f1bb 0f00 	cmp.w	fp, #0
 80137b4:	d044      	beq.n	8013840 <__hexnan+0x118>
 80137b6:	454c      	cmp	r4, r9
 80137b8:	d206      	bcs.n	80137c8 <__hexnan+0xa0>
 80137ba:	2d07      	cmp	r5, #7
 80137bc:	dc04      	bgt.n	80137c8 <__hexnan+0xa0>
 80137be:	462a      	mov	r2, r5
 80137c0:	4649      	mov	r1, r9
 80137c2:	4620      	mov	r0, r4
 80137c4:	f7ff ff8a 	bl	80136dc <L_shift>
 80137c8:	4544      	cmp	r4, r8
 80137ca:	d928      	bls.n	801381e <__hexnan+0xf6>
 80137cc:	4643      	mov	r3, r8
 80137ce:	f854 2b04 	ldr.w	r2, [r4], #4
 80137d2:	f843 2b04 	str.w	r2, [r3], #4
 80137d6:	42a6      	cmp	r6, r4
 80137d8:	d2f9      	bcs.n	80137ce <__hexnan+0xa6>
 80137da:	2200      	movs	r2, #0
 80137dc:	f843 2b04 	str.w	r2, [r3], #4
 80137e0:	429e      	cmp	r6, r3
 80137e2:	d2fb      	bcs.n	80137dc <__hexnan+0xb4>
 80137e4:	6833      	ldr	r3, [r6, #0]
 80137e6:	b91b      	cbnz	r3, 80137f0 <__hexnan+0xc8>
 80137e8:	4546      	cmp	r6, r8
 80137ea:	d127      	bne.n	801383c <__hexnan+0x114>
 80137ec:	2301      	movs	r3, #1
 80137ee:	6033      	str	r3, [r6, #0]
 80137f0:	2005      	movs	r0, #5
 80137f2:	e026      	b.n	8013842 <__hexnan+0x11a>
 80137f4:	3501      	adds	r5, #1
 80137f6:	2d08      	cmp	r5, #8
 80137f8:	f10b 0b01 	add.w	fp, fp, #1
 80137fc:	dd06      	ble.n	801380c <__hexnan+0xe4>
 80137fe:	4544      	cmp	r4, r8
 8013800:	d9cf      	bls.n	80137a2 <__hexnan+0x7a>
 8013802:	2300      	movs	r3, #0
 8013804:	f844 3c04 	str.w	r3, [r4, #-4]
 8013808:	2501      	movs	r5, #1
 801380a:	3c04      	subs	r4, #4
 801380c:	6822      	ldr	r2, [r4, #0]
 801380e:	f000 000f 	and.w	r0, r0, #15
 8013812:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013816:	6020      	str	r0, [r4, #0]
 8013818:	e7c3      	b.n	80137a2 <__hexnan+0x7a>
 801381a:	2508      	movs	r5, #8
 801381c:	e7c1      	b.n	80137a2 <__hexnan+0x7a>
 801381e:	9b01      	ldr	r3, [sp, #4]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d0df      	beq.n	80137e4 <__hexnan+0xbc>
 8013824:	f04f 32ff 	mov.w	r2, #4294967295
 8013828:	f1c3 0320 	rsb	r3, r3, #32
 801382c:	fa22 f303 	lsr.w	r3, r2, r3
 8013830:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013834:	401a      	ands	r2, r3
 8013836:	f847 2c04 	str.w	r2, [r7, #-4]
 801383a:	e7d3      	b.n	80137e4 <__hexnan+0xbc>
 801383c:	3e04      	subs	r6, #4
 801383e:	e7d1      	b.n	80137e4 <__hexnan+0xbc>
 8013840:	2004      	movs	r0, #4
 8013842:	b007      	add	sp, #28
 8013844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013848 <__locale_ctype_ptr_l>:
 8013848:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801384c:	4770      	bx	lr

0801384e <__localeconv_l>:
 801384e:	30f0      	adds	r0, #240	; 0xf0
 8013850:	4770      	bx	lr
	...

08013854 <_localeconv_r>:
 8013854:	4b04      	ldr	r3, [pc, #16]	; (8013868 <_localeconv_r+0x14>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	6a18      	ldr	r0, [r3, #32]
 801385a:	4b04      	ldr	r3, [pc, #16]	; (801386c <_localeconv_r+0x18>)
 801385c:	2800      	cmp	r0, #0
 801385e:	bf08      	it	eq
 8013860:	4618      	moveq	r0, r3
 8013862:	30f0      	adds	r0, #240	; 0xf0
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop
 8013868:	20000010 	.word	0x20000010
 801386c:	20000074 	.word	0x20000074

08013870 <__swhatbuf_r>:
 8013870:	b570      	push	{r4, r5, r6, lr}
 8013872:	460e      	mov	r6, r1
 8013874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013878:	2900      	cmp	r1, #0
 801387a:	b096      	sub	sp, #88	; 0x58
 801387c:	4614      	mov	r4, r2
 801387e:	461d      	mov	r5, r3
 8013880:	da07      	bge.n	8013892 <__swhatbuf_r+0x22>
 8013882:	2300      	movs	r3, #0
 8013884:	602b      	str	r3, [r5, #0]
 8013886:	89b3      	ldrh	r3, [r6, #12]
 8013888:	061a      	lsls	r2, r3, #24
 801388a:	d410      	bmi.n	80138ae <__swhatbuf_r+0x3e>
 801388c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013890:	e00e      	b.n	80138b0 <__swhatbuf_r+0x40>
 8013892:	466a      	mov	r2, sp
 8013894:	f000 ff88 	bl	80147a8 <_fstat_r>
 8013898:	2800      	cmp	r0, #0
 801389a:	dbf2      	blt.n	8013882 <__swhatbuf_r+0x12>
 801389c:	9a01      	ldr	r2, [sp, #4]
 801389e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80138a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80138a6:	425a      	negs	r2, r3
 80138a8:	415a      	adcs	r2, r3
 80138aa:	602a      	str	r2, [r5, #0]
 80138ac:	e7ee      	b.n	801388c <__swhatbuf_r+0x1c>
 80138ae:	2340      	movs	r3, #64	; 0x40
 80138b0:	2000      	movs	r0, #0
 80138b2:	6023      	str	r3, [r4, #0]
 80138b4:	b016      	add	sp, #88	; 0x58
 80138b6:	bd70      	pop	{r4, r5, r6, pc}

080138b8 <__smakebuf_r>:
 80138b8:	898b      	ldrh	r3, [r1, #12]
 80138ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80138bc:	079d      	lsls	r5, r3, #30
 80138be:	4606      	mov	r6, r0
 80138c0:	460c      	mov	r4, r1
 80138c2:	d507      	bpl.n	80138d4 <__smakebuf_r+0x1c>
 80138c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80138c8:	6023      	str	r3, [r4, #0]
 80138ca:	6123      	str	r3, [r4, #16]
 80138cc:	2301      	movs	r3, #1
 80138ce:	6163      	str	r3, [r4, #20]
 80138d0:	b002      	add	sp, #8
 80138d2:	bd70      	pop	{r4, r5, r6, pc}
 80138d4:	ab01      	add	r3, sp, #4
 80138d6:	466a      	mov	r2, sp
 80138d8:	f7ff ffca 	bl	8013870 <__swhatbuf_r>
 80138dc:	9900      	ldr	r1, [sp, #0]
 80138de:	4605      	mov	r5, r0
 80138e0:	4630      	mov	r0, r6
 80138e2:	f7fc fd65 	bl	80103b0 <_malloc_r>
 80138e6:	b948      	cbnz	r0, 80138fc <__smakebuf_r+0x44>
 80138e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138ec:	059a      	lsls	r2, r3, #22
 80138ee:	d4ef      	bmi.n	80138d0 <__smakebuf_r+0x18>
 80138f0:	f023 0303 	bic.w	r3, r3, #3
 80138f4:	f043 0302 	orr.w	r3, r3, #2
 80138f8:	81a3      	strh	r3, [r4, #12]
 80138fa:	e7e3      	b.n	80138c4 <__smakebuf_r+0xc>
 80138fc:	4b0d      	ldr	r3, [pc, #52]	; (8013934 <__smakebuf_r+0x7c>)
 80138fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8013900:	89a3      	ldrh	r3, [r4, #12]
 8013902:	6020      	str	r0, [r4, #0]
 8013904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013908:	81a3      	strh	r3, [r4, #12]
 801390a:	9b00      	ldr	r3, [sp, #0]
 801390c:	6163      	str	r3, [r4, #20]
 801390e:	9b01      	ldr	r3, [sp, #4]
 8013910:	6120      	str	r0, [r4, #16]
 8013912:	b15b      	cbz	r3, 801392c <__smakebuf_r+0x74>
 8013914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013918:	4630      	mov	r0, r6
 801391a:	f000 ff57 	bl	80147cc <_isatty_r>
 801391e:	b128      	cbz	r0, 801392c <__smakebuf_r+0x74>
 8013920:	89a3      	ldrh	r3, [r4, #12]
 8013922:	f023 0303 	bic.w	r3, r3, #3
 8013926:	f043 0301 	orr.w	r3, r3, #1
 801392a:	81a3      	strh	r3, [r4, #12]
 801392c:	89a3      	ldrh	r3, [r4, #12]
 801392e:	431d      	orrs	r5, r3
 8013930:	81a5      	strh	r5, [r4, #12]
 8013932:	e7cd      	b.n	80138d0 <__smakebuf_r+0x18>
 8013934:	080130b1 	.word	0x080130b1

08013938 <__ascii_mbtowc>:
 8013938:	b082      	sub	sp, #8
 801393a:	b901      	cbnz	r1, 801393e <__ascii_mbtowc+0x6>
 801393c:	a901      	add	r1, sp, #4
 801393e:	b142      	cbz	r2, 8013952 <__ascii_mbtowc+0x1a>
 8013940:	b14b      	cbz	r3, 8013956 <__ascii_mbtowc+0x1e>
 8013942:	7813      	ldrb	r3, [r2, #0]
 8013944:	600b      	str	r3, [r1, #0]
 8013946:	7812      	ldrb	r2, [r2, #0]
 8013948:	1c10      	adds	r0, r2, #0
 801394a:	bf18      	it	ne
 801394c:	2001      	movne	r0, #1
 801394e:	b002      	add	sp, #8
 8013950:	4770      	bx	lr
 8013952:	4610      	mov	r0, r2
 8013954:	e7fb      	b.n	801394e <__ascii_mbtowc+0x16>
 8013956:	f06f 0001 	mvn.w	r0, #1
 801395a:	e7f8      	b.n	801394e <__ascii_mbtowc+0x16>

0801395c <__malloc_lock>:
 801395c:	4770      	bx	lr

0801395e <__malloc_unlock>:
 801395e:	4770      	bx	lr

08013960 <_Balloc>:
 8013960:	b570      	push	{r4, r5, r6, lr}
 8013962:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013964:	4604      	mov	r4, r0
 8013966:	460e      	mov	r6, r1
 8013968:	b93d      	cbnz	r5, 801397a <_Balloc+0x1a>
 801396a:	2010      	movs	r0, #16
 801396c:	f7fc fcae 	bl	80102cc <malloc>
 8013970:	6260      	str	r0, [r4, #36]	; 0x24
 8013972:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013976:	6005      	str	r5, [r0, #0]
 8013978:	60c5      	str	r5, [r0, #12]
 801397a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801397c:	68eb      	ldr	r3, [r5, #12]
 801397e:	b183      	cbz	r3, 80139a2 <_Balloc+0x42>
 8013980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013982:	68db      	ldr	r3, [r3, #12]
 8013984:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013988:	b9b8      	cbnz	r0, 80139ba <_Balloc+0x5a>
 801398a:	2101      	movs	r1, #1
 801398c:	fa01 f506 	lsl.w	r5, r1, r6
 8013990:	1d6a      	adds	r2, r5, #5
 8013992:	0092      	lsls	r2, r2, #2
 8013994:	4620      	mov	r0, r4
 8013996:	f000 fbe2 	bl	801415e <_calloc_r>
 801399a:	b160      	cbz	r0, 80139b6 <_Balloc+0x56>
 801399c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80139a0:	e00e      	b.n	80139c0 <_Balloc+0x60>
 80139a2:	2221      	movs	r2, #33	; 0x21
 80139a4:	2104      	movs	r1, #4
 80139a6:	4620      	mov	r0, r4
 80139a8:	f000 fbd9 	bl	801415e <_calloc_r>
 80139ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139ae:	60e8      	str	r0, [r5, #12]
 80139b0:	68db      	ldr	r3, [r3, #12]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d1e4      	bne.n	8013980 <_Balloc+0x20>
 80139b6:	2000      	movs	r0, #0
 80139b8:	bd70      	pop	{r4, r5, r6, pc}
 80139ba:	6802      	ldr	r2, [r0, #0]
 80139bc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80139c0:	2300      	movs	r3, #0
 80139c2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80139c6:	e7f7      	b.n	80139b8 <_Balloc+0x58>

080139c8 <_Bfree>:
 80139c8:	b570      	push	{r4, r5, r6, lr}
 80139ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80139cc:	4606      	mov	r6, r0
 80139ce:	460d      	mov	r5, r1
 80139d0:	b93c      	cbnz	r4, 80139e2 <_Bfree+0x1a>
 80139d2:	2010      	movs	r0, #16
 80139d4:	f7fc fc7a 	bl	80102cc <malloc>
 80139d8:	6270      	str	r0, [r6, #36]	; 0x24
 80139da:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80139de:	6004      	str	r4, [r0, #0]
 80139e0:	60c4      	str	r4, [r0, #12]
 80139e2:	b13d      	cbz	r5, 80139f4 <_Bfree+0x2c>
 80139e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80139e6:	686a      	ldr	r2, [r5, #4]
 80139e8:	68db      	ldr	r3, [r3, #12]
 80139ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80139ee:	6029      	str	r1, [r5, #0]
 80139f0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80139f4:	bd70      	pop	{r4, r5, r6, pc}

080139f6 <__multadd>:
 80139f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139fa:	690d      	ldr	r5, [r1, #16]
 80139fc:	461f      	mov	r7, r3
 80139fe:	4606      	mov	r6, r0
 8013a00:	460c      	mov	r4, r1
 8013a02:	f101 0c14 	add.w	ip, r1, #20
 8013a06:	2300      	movs	r3, #0
 8013a08:	f8dc 0000 	ldr.w	r0, [ip]
 8013a0c:	b281      	uxth	r1, r0
 8013a0e:	fb02 7101 	mla	r1, r2, r1, r7
 8013a12:	0c0f      	lsrs	r7, r1, #16
 8013a14:	0c00      	lsrs	r0, r0, #16
 8013a16:	fb02 7000 	mla	r0, r2, r0, r7
 8013a1a:	b289      	uxth	r1, r1
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013a22:	429d      	cmp	r5, r3
 8013a24:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013a28:	f84c 1b04 	str.w	r1, [ip], #4
 8013a2c:	dcec      	bgt.n	8013a08 <__multadd+0x12>
 8013a2e:	b1d7      	cbz	r7, 8013a66 <__multadd+0x70>
 8013a30:	68a3      	ldr	r3, [r4, #8]
 8013a32:	42ab      	cmp	r3, r5
 8013a34:	dc12      	bgt.n	8013a5c <__multadd+0x66>
 8013a36:	6861      	ldr	r1, [r4, #4]
 8013a38:	4630      	mov	r0, r6
 8013a3a:	3101      	adds	r1, #1
 8013a3c:	f7ff ff90 	bl	8013960 <_Balloc>
 8013a40:	6922      	ldr	r2, [r4, #16]
 8013a42:	3202      	adds	r2, #2
 8013a44:	f104 010c 	add.w	r1, r4, #12
 8013a48:	4680      	mov	r8, r0
 8013a4a:	0092      	lsls	r2, r2, #2
 8013a4c:	300c      	adds	r0, #12
 8013a4e:	f7fc fc4d 	bl	80102ec <memcpy>
 8013a52:	4621      	mov	r1, r4
 8013a54:	4630      	mov	r0, r6
 8013a56:	f7ff ffb7 	bl	80139c8 <_Bfree>
 8013a5a:	4644      	mov	r4, r8
 8013a5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013a60:	3501      	adds	r5, #1
 8013a62:	615f      	str	r7, [r3, #20]
 8013a64:	6125      	str	r5, [r4, #16]
 8013a66:	4620      	mov	r0, r4
 8013a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a6c <__s2b>:
 8013a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a70:	460c      	mov	r4, r1
 8013a72:	4615      	mov	r5, r2
 8013a74:	461f      	mov	r7, r3
 8013a76:	2209      	movs	r2, #9
 8013a78:	3308      	adds	r3, #8
 8013a7a:	4606      	mov	r6, r0
 8013a7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013a80:	2100      	movs	r1, #0
 8013a82:	2201      	movs	r2, #1
 8013a84:	429a      	cmp	r2, r3
 8013a86:	db20      	blt.n	8013aca <__s2b+0x5e>
 8013a88:	4630      	mov	r0, r6
 8013a8a:	f7ff ff69 	bl	8013960 <_Balloc>
 8013a8e:	9b08      	ldr	r3, [sp, #32]
 8013a90:	6143      	str	r3, [r0, #20]
 8013a92:	2d09      	cmp	r5, #9
 8013a94:	f04f 0301 	mov.w	r3, #1
 8013a98:	6103      	str	r3, [r0, #16]
 8013a9a:	dd19      	ble.n	8013ad0 <__s2b+0x64>
 8013a9c:	f104 0809 	add.w	r8, r4, #9
 8013aa0:	46c1      	mov	r9, r8
 8013aa2:	442c      	add	r4, r5
 8013aa4:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013aa8:	4601      	mov	r1, r0
 8013aaa:	3b30      	subs	r3, #48	; 0x30
 8013aac:	220a      	movs	r2, #10
 8013aae:	4630      	mov	r0, r6
 8013ab0:	f7ff ffa1 	bl	80139f6 <__multadd>
 8013ab4:	45a1      	cmp	r9, r4
 8013ab6:	d1f5      	bne.n	8013aa4 <__s2b+0x38>
 8013ab8:	eb08 0405 	add.w	r4, r8, r5
 8013abc:	3c08      	subs	r4, #8
 8013abe:	1b2d      	subs	r5, r5, r4
 8013ac0:	1963      	adds	r3, r4, r5
 8013ac2:	42bb      	cmp	r3, r7
 8013ac4:	db07      	blt.n	8013ad6 <__s2b+0x6a>
 8013ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013aca:	0052      	lsls	r2, r2, #1
 8013acc:	3101      	adds	r1, #1
 8013ace:	e7d9      	b.n	8013a84 <__s2b+0x18>
 8013ad0:	340a      	adds	r4, #10
 8013ad2:	2509      	movs	r5, #9
 8013ad4:	e7f3      	b.n	8013abe <__s2b+0x52>
 8013ad6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013ada:	4601      	mov	r1, r0
 8013adc:	3b30      	subs	r3, #48	; 0x30
 8013ade:	220a      	movs	r2, #10
 8013ae0:	4630      	mov	r0, r6
 8013ae2:	f7ff ff88 	bl	80139f6 <__multadd>
 8013ae6:	e7eb      	b.n	8013ac0 <__s2b+0x54>

08013ae8 <__hi0bits>:
 8013ae8:	0c02      	lsrs	r2, r0, #16
 8013aea:	0412      	lsls	r2, r2, #16
 8013aec:	4603      	mov	r3, r0
 8013aee:	b9b2      	cbnz	r2, 8013b1e <__hi0bits+0x36>
 8013af0:	0403      	lsls	r3, r0, #16
 8013af2:	2010      	movs	r0, #16
 8013af4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013af8:	bf04      	itt	eq
 8013afa:	021b      	lsleq	r3, r3, #8
 8013afc:	3008      	addeq	r0, #8
 8013afe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013b02:	bf04      	itt	eq
 8013b04:	011b      	lsleq	r3, r3, #4
 8013b06:	3004      	addeq	r0, #4
 8013b08:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013b0c:	bf04      	itt	eq
 8013b0e:	009b      	lsleq	r3, r3, #2
 8013b10:	3002      	addeq	r0, #2
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	db06      	blt.n	8013b24 <__hi0bits+0x3c>
 8013b16:	005b      	lsls	r3, r3, #1
 8013b18:	d503      	bpl.n	8013b22 <__hi0bits+0x3a>
 8013b1a:	3001      	adds	r0, #1
 8013b1c:	4770      	bx	lr
 8013b1e:	2000      	movs	r0, #0
 8013b20:	e7e8      	b.n	8013af4 <__hi0bits+0xc>
 8013b22:	2020      	movs	r0, #32
 8013b24:	4770      	bx	lr

08013b26 <__lo0bits>:
 8013b26:	6803      	ldr	r3, [r0, #0]
 8013b28:	f013 0207 	ands.w	r2, r3, #7
 8013b2c:	4601      	mov	r1, r0
 8013b2e:	d00b      	beq.n	8013b48 <__lo0bits+0x22>
 8013b30:	07da      	lsls	r2, r3, #31
 8013b32:	d423      	bmi.n	8013b7c <__lo0bits+0x56>
 8013b34:	0798      	lsls	r0, r3, #30
 8013b36:	bf49      	itett	mi
 8013b38:	085b      	lsrmi	r3, r3, #1
 8013b3a:	089b      	lsrpl	r3, r3, #2
 8013b3c:	2001      	movmi	r0, #1
 8013b3e:	600b      	strmi	r3, [r1, #0]
 8013b40:	bf5c      	itt	pl
 8013b42:	600b      	strpl	r3, [r1, #0]
 8013b44:	2002      	movpl	r0, #2
 8013b46:	4770      	bx	lr
 8013b48:	b298      	uxth	r0, r3
 8013b4a:	b9a8      	cbnz	r0, 8013b78 <__lo0bits+0x52>
 8013b4c:	0c1b      	lsrs	r3, r3, #16
 8013b4e:	2010      	movs	r0, #16
 8013b50:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013b54:	bf04      	itt	eq
 8013b56:	0a1b      	lsreq	r3, r3, #8
 8013b58:	3008      	addeq	r0, #8
 8013b5a:	071a      	lsls	r2, r3, #28
 8013b5c:	bf04      	itt	eq
 8013b5e:	091b      	lsreq	r3, r3, #4
 8013b60:	3004      	addeq	r0, #4
 8013b62:	079a      	lsls	r2, r3, #30
 8013b64:	bf04      	itt	eq
 8013b66:	089b      	lsreq	r3, r3, #2
 8013b68:	3002      	addeq	r0, #2
 8013b6a:	07da      	lsls	r2, r3, #31
 8013b6c:	d402      	bmi.n	8013b74 <__lo0bits+0x4e>
 8013b6e:	085b      	lsrs	r3, r3, #1
 8013b70:	d006      	beq.n	8013b80 <__lo0bits+0x5a>
 8013b72:	3001      	adds	r0, #1
 8013b74:	600b      	str	r3, [r1, #0]
 8013b76:	4770      	bx	lr
 8013b78:	4610      	mov	r0, r2
 8013b7a:	e7e9      	b.n	8013b50 <__lo0bits+0x2a>
 8013b7c:	2000      	movs	r0, #0
 8013b7e:	4770      	bx	lr
 8013b80:	2020      	movs	r0, #32
 8013b82:	4770      	bx	lr

08013b84 <__i2b>:
 8013b84:	b510      	push	{r4, lr}
 8013b86:	460c      	mov	r4, r1
 8013b88:	2101      	movs	r1, #1
 8013b8a:	f7ff fee9 	bl	8013960 <_Balloc>
 8013b8e:	2201      	movs	r2, #1
 8013b90:	6144      	str	r4, [r0, #20]
 8013b92:	6102      	str	r2, [r0, #16]
 8013b94:	bd10      	pop	{r4, pc}

08013b96 <__multiply>:
 8013b96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b9a:	4614      	mov	r4, r2
 8013b9c:	690a      	ldr	r2, [r1, #16]
 8013b9e:	6923      	ldr	r3, [r4, #16]
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	bfb8      	it	lt
 8013ba4:	460b      	movlt	r3, r1
 8013ba6:	4688      	mov	r8, r1
 8013ba8:	bfbc      	itt	lt
 8013baa:	46a0      	movlt	r8, r4
 8013bac:	461c      	movlt	r4, r3
 8013bae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013bb2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013bb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013bba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013bbe:	eb07 0609 	add.w	r6, r7, r9
 8013bc2:	42b3      	cmp	r3, r6
 8013bc4:	bfb8      	it	lt
 8013bc6:	3101      	addlt	r1, #1
 8013bc8:	f7ff feca 	bl	8013960 <_Balloc>
 8013bcc:	f100 0514 	add.w	r5, r0, #20
 8013bd0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013bd4:	462b      	mov	r3, r5
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	4573      	cmp	r3, lr
 8013bda:	d316      	bcc.n	8013c0a <__multiply+0x74>
 8013bdc:	f104 0214 	add.w	r2, r4, #20
 8013be0:	f108 0114 	add.w	r1, r8, #20
 8013be4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013be8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013bec:	9300      	str	r3, [sp, #0]
 8013bee:	9b00      	ldr	r3, [sp, #0]
 8013bf0:	9201      	str	r2, [sp, #4]
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	d80c      	bhi.n	8013c10 <__multiply+0x7a>
 8013bf6:	2e00      	cmp	r6, #0
 8013bf8:	dd03      	ble.n	8013c02 <__multiply+0x6c>
 8013bfa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d05d      	beq.n	8013cbe <__multiply+0x128>
 8013c02:	6106      	str	r6, [r0, #16]
 8013c04:	b003      	add	sp, #12
 8013c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c0a:	f843 2b04 	str.w	r2, [r3], #4
 8013c0e:	e7e3      	b.n	8013bd8 <__multiply+0x42>
 8013c10:	f8b2 b000 	ldrh.w	fp, [r2]
 8013c14:	f1bb 0f00 	cmp.w	fp, #0
 8013c18:	d023      	beq.n	8013c62 <__multiply+0xcc>
 8013c1a:	4689      	mov	r9, r1
 8013c1c:	46ac      	mov	ip, r5
 8013c1e:	f04f 0800 	mov.w	r8, #0
 8013c22:	f859 4b04 	ldr.w	r4, [r9], #4
 8013c26:	f8dc a000 	ldr.w	sl, [ip]
 8013c2a:	b2a3      	uxth	r3, r4
 8013c2c:	fa1f fa8a 	uxth.w	sl, sl
 8013c30:	fb0b a303 	mla	r3, fp, r3, sl
 8013c34:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013c38:	f8dc 4000 	ldr.w	r4, [ip]
 8013c3c:	4443      	add	r3, r8
 8013c3e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013c42:	fb0b 840a 	mla	r4, fp, sl, r8
 8013c46:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013c4a:	46e2      	mov	sl, ip
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013c52:	454f      	cmp	r7, r9
 8013c54:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013c58:	f84a 3b04 	str.w	r3, [sl], #4
 8013c5c:	d82b      	bhi.n	8013cb6 <__multiply+0x120>
 8013c5e:	f8cc 8004 	str.w	r8, [ip, #4]
 8013c62:	9b01      	ldr	r3, [sp, #4]
 8013c64:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013c68:	3204      	adds	r2, #4
 8013c6a:	f1ba 0f00 	cmp.w	sl, #0
 8013c6e:	d020      	beq.n	8013cb2 <__multiply+0x11c>
 8013c70:	682b      	ldr	r3, [r5, #0]
 8013c72:	4689      	mov	r9, r1
 8013c74:	46a8      	mov	r8, r5
 8013c76:	f04f 0b00 	mov.w	fp, #0
 8013c7a:	f8b9 c000 	ldrh.w	ip, [r9]
 8013c7e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013c82:	fb0a 440c 	mla	r4, sl, ip, r4
 8013c86:	445c      	add	r4, fp
 8013c88:	46c4      	mov	ip, r8
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013c90:	f84c 3b04 	str.w	r3, [ip], #4
 8013c94:	f859 3b04 	ldr.w	r3, [r9], #4
 8013c98:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013c9c:	0c1b      	lsrs	r3, r3, #16
 8013c9e:	fb0a b303 	mla	r3, sl, r3, fp
 8013ca2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013ca6:	454f      	cmp	r7, r9
 8013ca8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013cac:	d805      	bhi.n	8013cba <__multiply+0x124>
 8013cae:	f8c8 3004 	str.w	r3, [r8, #4]
 8013cb2:	3504      	adds	r5, #4
 8013cb4:	e79b      	b.n	8013bee <__multiply+0x58>
 8013cb6:	46d4      	mov	ip, sl
 8013cb8:	e7b3      	b.n	8013c22 <__multiply+0x8c>
 8013cba:	46e0      	mov	r8, ip
 8013cbc:	e7dd      	b.n	8013c7a <__multiply+0xe4>
 8013cbe:	3e01      	subs	r6, #1
 8013cc0:	e799      	b.n	8013bf6 <__multiply+0x60>
	...

08013cc4 <__pow5mult>:
 8013cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cc8:	4615      	mov	r5, r2
 8013cca:	f012 0203 	ands.w	r2, r2, #3
 8013cce:	4606      	mov	r6, r0
 8013cd0:	460f      	mov	r7, r1
 8013cd2:	d007      	beq.n	8013ce4 <__pow5mult+0x20>
 8013cd4:	3a01      	subs	r2, #1
 8013cd6:	4c21      	ldr	r4, [pc, #132]	; (8013d5c <__pow5mult+0x98>)
 8013cd8:	2300      	movs	r3, #0
 8013cda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013cde:	f7ff fe8a 	bl	80139f6 <__multadd>
 8013ce2:	4607      	mov	r7, r0
 8013ce4:	10ad      	asrs	r5, r5, #2
 8013ce6:	d035      	beq.n	8013d54 <__pow5mult+0x90>
 8013ce8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013cea:	b93c      	cbnz	r4, 8013cfc <__pow5mult+0x38>
 8013cec:	2010      	movs	r0, #16
 8013cee:	f7fc faed 	bl	80102cc <malloc>
 8013cf2:	6270      	str	r0, [r6, #36]	; 0x24
 8013cf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013cf8:	6004      	str	r4, [r0, #0]
 8013cfa:	60c4      	str	r4, [r0, #12]
 8013cfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013d00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013d04:	b94c      	cbnz	r4, 8013d1a <__pow5mult+0x56>
 8013d06:	f240 2171 	movw	r1, #625	; 0x271
 8013d0a:	4630      	mov	r0, r6
 8013d0c:	f7ff ff3a 	bl	8013b84 <__i2b>
 8013d10:	2300      	movs	r3, #0
 8013d12:	f8c8 0008 	str.w	r0, [r8, #8]
 8013d16:	4604      	mov	r4, r0
 8013d18:	6003      	str	r3, [r0, #0]
 8013d1a:	f04f 0800 	mov.w	r8, #0
 8013d1e:	07eb      	lsls	r3, r5, #31
 8013d20:	d50a      	bpl.n	8013d38 <__pow5mult+0x74>
 8013d22:	4639      	mov	r1, r7
 8013d24:	4622      	mov	r2, r4
 8013d26:	4630      	mov	r0, r6
 8013d28:	f7ff ff35 	bl	8013b96 <__multiply>
 8013d2c:	4639      	mov	r1, r7
 8013d2e:	4681      	mov	r9, r0
 8013d30:	4630      	mov	r0, r6
 8013d32:	f7ff fe49 	bl	80139c8 <_Bfree>
 8013d36:	464f      	mov	r7, r9
 8013d38:	106d      	asrs	r5, r5, #1
 8013d3a:	d00b      	beq.n	8013d54 <__pow5mult+0x90>
 8013d3c:	6820      	ldr	r0, [r4, #0]
 8013d3e:	b938      	cbnz	r0, 8013d50 <__pow5mult+0x8c>
 8013d40:	4622      	mov	r2, r4
 8013d42:	4621      	mov	r1, r4
 8013d44:	4630      	mov	r0, r6
 8013d46:	f7ff ff26 	bl	8013b96 <__multiply>
 8013d4a:	6020      	str	r0, [r4, #0]
 8013d4c:	f8c0 8000 	str.w	r8, [r0]
 8013d50:	4604      	mov	r4, r0
 8013d52:	e7e4      	b.n	8013d1e <__pow5mult+0x5a>
 8013d54:	4638      	mov	r0, r7
 8013d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d5a:	bf00      	nop
 8013d5c:	08014d40 	.word	0x08014d40

08013d60 <__lshift>:
 8013d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d64:	460c      	mov	r4, r1
 8013d66:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d6a:	6923      	ldr	r3, [r4, #16]
 8013d6c:	6849      	ldr	r1, [r1, #4]
 8013d6e:	eb0a 0903 	add.w	r9, sl, r3
 8013d72:	68a3      	ldr	r3, [r4, #8]
 8013d74:	4607      	mov	r7, r0
 8013d76:	4616      	mov	r6, r2
 8013d78:	f109 0501 	add.w	r5, r9, #1
 8013d7c:	42ab      	cmp	r3, r5
 8013d7e:	db32      	blt.n	8013de6 <__lshift+0x86>
 8013d80:	4638      	mov	r0, r7
 8013d82:	f7ff fded 	bl	8013960 <_Balloc>
 8013d86:	2300      	movs	r3, #0
 8013d88:	4680      	mov	r8, r0
 8013d8a:	f100 0114 	add.w	r1, r0, #20
 8013d8e:	461a      	mov	r2, r3
 8013d90:	4553      	cmp	r3, sl
 8013d92:	db2b      	blt.n	8013dec <__lshift+0x8c>
 8013d94:	6920      	ldr	r0, [r4, #16]
 8013d96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d9a:	f104 0314 	add.w	r3, r4, #20
 8013d9e:	f016 021f 	ands.w	r2, r6, #31
 8013da2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013da6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013daa:	d025      	beq.n	8013df8 <__lshift+0x98>
 8013dac:	f1c2 0e20 	rsb	lr, r2, #32
 8013db0:	2000      	movs	r0, #0
 8013db2:	681e      	ldr	r6, [r3, #0]
 8013db4:	468a      	mov	sl, r1
 8013db6:	4096      	lsls	r6, r2
 8013db8:	4330      	orrs	r0, r6
 8013dba:	f84a 0b04 	str.w	r0, [sl], #4
 8013dbe:	f853 0b04 	ldr.w	r0, [r3], #4
 8013dc2:	459c      	cmp	ip, r3
 8013dc4:	fa20 f00e 	lsr.w	r0, r0, lr
 8013dc8:	d814      	bhi.n	8013df4 <__lshift+0x94>
 8013dca:	6048      	str	r0, [r1, #4]
 8013dcc:	b108      	cbz	r0, 8013dd2 <__lshift+0x72>
 8013dce:	f109 0502 	add.w	r5, r9, #2
 8013dd2:	3d01      	subs	r5, #1
 8013dd4:	4638      	mov	r0, r7
 8013dd6:	f8c8 5010 	str.w	r5, [r8, #16]
 8013dda:	4621      	mov	r1, r4
 8013ddc:	f7ff fdf4 	bl	80139c8 <_Bfree>
 8013de0:	4640      	mov	r0, r8
 8013de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013de6:	3101      	adds	r1, #1
 8013de8:	005b      	lsls	r3, r3, #1
 8013dea:	e7c7      	b.n	8013d7c <__lshift+0x1c>
 8013dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013df0:	3301      	adds	r3, #1
 8013df2:	e7cd      	b.n	8013d90 <__lshift+0x30>
 8013df4:	4651      	mov	r1, sl
 8013df6:	e7dc      	b.n	8013db2 <__lshift+0x52>
 8013df8:	3904      	subs	r1, #4
 8013dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dfe:	f841 2f04 	str.w	r2, [r1, #4]!
 8013e02:	459c      	cmp	ip, r3
 8013e04:	d8f9      	bhi.n	8013dfa <__lshift+0x9a>
 8013e06:	e7e4      	b.n	8013dd2 <__lshift+0x72>

08013e08 <__mcmp>:
 8013e08:	6903      	ldr	r3, [r0, #16]
 8013e0a:	690a      	ldr	r2, [r1, #16]
 8013e0c:	1a9b      	subs	r3, r3, r2
 8013e0e:	b530      	push	{r4, r5, lr}
 8013e10:	d10c      	bne.n	8013e2c <__mcmp+0x24>
 8013e12:	0092      	lsls	r2, r2, #2
 8013e14:	3014      	adds	r0, #20
 8013e16:	3114      	adds	r1, #20
 8013e18:	1884      	adds	r4, r0, r2
 8013e1a:	4411      	add	r1, r2
 8013e1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013e20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013e24:	4295      	cmp	r5, r2
 8013e26:	d003      	beq.n	8013e30 <__mcmp+0x28>
 8013e28:	d305      	bcc.n	8013e36 <__mcmp+0x2e>
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	bd30      	pop	{r4, r5, pc}
 8013e30:	42a0      	cmp	r0, r4
 8013e32:	d3f3      	bcc.n	8013e1c <__mcmp+0x14>
 8013e34:	e7fa      	b.n	8013e2c <__mcmp+0x24>
 8013e36:	f04f 33ff 	mov.w	r3, #4294967295
 8013e3a:	e7f7      	b.n	8013e2c <__mcmp+0x24>

08013e3c <__mdiff>:
 8013e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e40:	460d      	mov	r5, r1
 8013e42:	4607      	mov	r7, r0
 8013e44:	4611      	mov	r1, r2
 8013e46:	4628      	mov	r0, r5
 8013e48:	4614      	mov	r4, r2
 8013e4a:	f7ff ffdd 	bl	8013e08 <__mcmp>
 8013e4e:	1e06      	subs	r6, r0, #0
 8013e50:	d108      	bne.n	8013e64 <__mdiff+0x28>
 8013e52:	4631      	mov	r1, r6
 8013e54:	4638      	mov	r0, r7
 8013e56:	f7ff fd83 	bl	8013960 <_Balloc>
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e64:	bfa4      	itt	ge
 8013e66:	4623      	movge	r3, r4
 8013e68:	462c      	movge	r4, r5
 8013e6a:	4638      	mov	r0, r7
 8013e6c:	6861      	ldr	r1, [r4, #4]
 8013e6e:	bfa6      	itte	ge
 8013e70:	461d      	movge	r5, r3
 8013e72:	2600      	movge	r6, #0
 8013e74:	2601      	movlt	r6, #1
 8013e76:	f7ff fd73 	bl	8013960 <_Balloc>
 8013e7a:	692b      	ldr	r3, [r5, #16]
 8013e7c:	60c6      	str	r6, [r0, #12]
 8013e7e:	6926      	ldr	r6, [r4, #16]
 8013e80:	f105 0914 	add.w	r9, r5, #20
 8013e84:	f104 0214 	add.w	r2, r4, #20
 8013e88:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013e8c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013e90:	f100 0514 	add.w	r5, r0, #20
 8013e94:	f04f 0e00 	mov.w	lr, #0
 8013e98:	f852 ab04 	ldr.w	sl, [r2], #4
 8013e9c:	f859 4b04 	ldr.w	r4, [r9], #4
 8013ea0:	fa1e f18a 	uxtah	r1, lr, sl
 8013ea4:	b2a3      	uxth	r3, r4
 8013ea6:	1ac9      	subs	r1, r1, r3
 8013ea8:	0c23      	lsrs	r3, r4, #16
 8013eaa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013eae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013eb2:	b289      	uxth	r1, r1
 8013eb4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013eb8:	45c8      	cmp	r8, r9
 8013eba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013ebe:	4694      	mov	ip, r2
 8013ec0:	f845 3b04 	str.w	r3, [r5], #4
 8013ec4:	d8e8      	bhi.n	8013e98 <__mdiff+0x5c>
 8013ec6:	45bc      	cmp	ip, r7
 8013ec8:	d304      	bcc.n	8013ed4 <__mdiff+0x98>
 8013eca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013ece:	b183      	cbz	r3, 8013ef2 <__mdiff+0xb6>
 8013ed0:	6106      	str	r6, [r0, #16]
 8013ed2:	e7c5      	b.n	8013e60 <__mdiff+0x24>
 8013ed4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013ed8:	fa1e f381 	uxtah	r3, lr, r1
 8013edc:	141a      	asrs	r2, r3, #16
 8013ede:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013ee2:	b29b      	uxth	r3, r3
 8013ee4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ee8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013eec:	f845 3b04 	str.w	r3, [r5], #4
 8013ef0:	e7e9      	b.n	8013ec6 <__mdiff+0x8a>
 8013ef2:	3e01      	subs	r6, #1
 8013ef4:	e7e9      	b.n	8013eca <__mdiff+0x8e>
	...

08013ef8 <__ulp>:
 8013ef8:	4b12      	ldr	r3, [pc, #72]	; (8013f44 <__ulp+0x4c>)
 8013efa:	ee10 2a90 	vmov	r2, s1
 8013efe:	401a      	ands	r2, r3
 8013f00:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	dd04      	ble.n	8013f12 <__ulp+0x1a>
 8013f08:	2000      	movs	r0, #0
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	ec41 0b10 	vmov	d0, r0, r1
 8013f10:	4770      	bx	lr
 8013f12:	425b      	negs	r3, r3
 8013f14:	151b      	asrs	r3, r3, #20
 8013f16:	2b13      	cmp	r3, #19
 8013f18:	f04f 0000 	mov.w	r0, #0
 8013f1c:	f04f 0100 	mov.w	r1, #0
 8013f20:	dc04      	bgt.n	8013f2c <__ulp+0x34>
 8013f22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013f26:	fa42 f103 	asr.w	r1, r2, r3
 8013f2a:	e7ef      	b.n	8013f0c <__ulp+0x14>
 8013f2c:	3b14      	subs	r3, #20
 8013f2e:	2b1e      	cmp	r3, #30
 8013f30:	f04f 0201 	mov.w	r2, #1
 8013f34:	bfda      	itte	le
 8013f36:	f1c3 031f 	rsble	r3, r3, #31
 8013f3a:	fa02 f303 	lslle.w	r3, r2, r3
 8013f3e:	4613      	movgt	r3, r2
 8013f40:	4618      	mov	r0, r3
 8013f42:	e7e3      	b.n	8013f0c <__ulp+0x14>
 8013f44:	7ff00000 	.word	0x7ff00000

08013f48 <__b2d>:
 8013f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f4a:	6905      	ldr	r5, [r0, #16]
 8013f4c:	f100 0714 	add.w	r7, r0, #20
 8013f50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013f54:	1f2e      	subs	r6, r5, #4
 8013f56:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	f7ff fdc4 	bl	8013ae8 <__hi0bits>
 8013f60:	f1c0 0320 	rsb	r3, r0, #32
 8013f64:	280a      	cmp	r0, #10
 8013f66:	600b      	str	r3, [r1, #0]
 8013f68:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013fe0 <__b2d+0x98>
 8013f6c:	dc14      	bgt.n	8013f98 <__b2d+0x50>
 8013f6e:	f1c0 0e0b 	rsb	lr, r0, #11
 8013f72:	fa24 f10e 	lsr.w	r1, r4, lr
 8013f76:	42b7      	cmp	r7, r6
 8013f78:	ea41 030c 	orr.w	r3, r1, ip
 8013f7c:	bf34      	ite	cc
 8013f7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013f82:	2100      	movcs	r1, #0
 8013f84:	3015      	adds	r0, #21
 8013f86:	fa04 f000 	lsl.w	r0, r4, r0
 8013f8a:	fa21 f10e 	lsr.w	r1, r1, lr
 8013f8e:	ea40 0201 	orr.w	r2, r0, r1
 8013f92:	ec43 2b10 	vmov	d0, r2, r3
 8013f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f98:	42b7      	cmp	r7, r6
 8013f9a:	bf3a      	itte	cc
 8013f9c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013fa0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013fa4:	2100      	movcs	r1, #0
 8013fa6:	380b      	subs	r0, #11
 8013fa8:	d015      	beq.n	8013fd6 <__b2d+0x8e>
 8013faa:	4084      	lsls	r4, r0
 8013fac:	f1c0 0520 	rsb	r5, r0, #32
 8013fb0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013fb4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013fb8:	42be      	cmp	r6, r7
 8013fba:	fa21 fc05 	lsr.w	ip, r1, r5
 8013fbe:	ea44 030c 	orr.w	r3, r4, ip
 8013fc2:	bf8c      	ite	hi
 8013fc4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013fc8:	2400      	movls	r4, #0
 8013fca:	fa01 f000 	lsl.w	r0, r1, r0
 8013fce:	40ec      	lsrs	r4, r5
 8013fd0:	ea40 0204 	orr.w	r2, r0, r4
 8013fd4:	e7dd      	b.n	8013f92 <__b2d+0x4a>
 8013fd6:	ea44 030c 	orr.w	r3, r4, ip
 8013fda:	460a      	mov	r2, r1
 8013fdc:	e7d9      	b.n	8013f92 <__b2d+0x4a>
 8013fde:	bf00      	nop
 8013fe0:	3ff00000 	.word	0x3ff00000

08013fe4 <__d2b>:
 8013fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013fe8:	460e      	mov	r6, r1
 8013fea:	2101      	movs	r1, #1
 8013fec:	ec59 8b10 	vmov	r8, r9, d0
 8013ff0:	4615      	mov	r5, r2
 8013ff2:	f7ff fcb5 	bl	8013960 <_Balloc>
 8013ff6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013ffa:	4607      	mov	r7, r0
 8013ffc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014000:	bb34      	cbnz	r4, 8014050 <__d2b+0x6c>
 8014002:	9301      	str	r3, [sp, #4]
 8014004:	f1b8 0300 	subs.w	r3, r8, #0
 8014008:	d027      	beq.n	801405a <__d2b+0x76>
 801400a:	a802      	add	r0, sp, #8
 801400c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014010:	f7ff fd89 	bl	8013b26 <__lo0bits>
 8014014:	9900      	ldr	r1, [sp, #0]
 8014016:	b1f0      	cbz	r0, 8014056 <__d2b+0x72>
 8014018:	9a01      	ldr	r2, [sp, #4]
 801401a:	f1c0 0320 	rsb	r3, r0, #32
 801401e:	fa02 f303 	lsl.w	r3, r2, r3
 8014022:	430b      	orrs	r3, r1
 8014024:	40c2      	lsrs	r2, r0
 8014026:	617b      	str	r3, [r7, #20]
 8014028:	9201      	str	r2, [sp, #4]
 801402a:	9b01      	ldr	r3, [sp, #4]
 801402c:	61bb      	str	r3, [r7, #24]
 801402e:	2b00      	cmp	r3, #0
 8014030:	bf14      	ite	ne
 8014032:	2102      	movne	r1, #2
 8014034:	2101      	moveq	r1, #1
 8014036:	6139      	str	r1, [r7, #16]
 8014038:	b1c4      	cbz	r4, 801406c <__d2b+0x88>
 801403a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801403e:	4404      	add	r4, r0
 8014040:	6034      	str	r4, [r6, #0]
 8014042:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014046:	6028      	str	r0, [r5, #0]
 8014048:	4638      	mov	r0, r7
 801404a:	b003      	add	sp, #12
 801404c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014054:	e7d5      	b.n	8014002 <__d2b+0x1e>
 8014056:	6179      	str	r1, [r7, #20]
 8014058:	e7e7      	b.n	801402a <__d2b+0x46>
 801405a:	a801      	add	r0, sp, #4
 801405c:	f7ff fd63 	bl	8013b26 <__lo0bits>
 8014060:	9b01      	ldr	r3, [sp, #4]
 8014062:	617b      	str	r3, [r7, #20]
 8014064:	2101      	movs	r1, #1
 8014066:	6139      	str	r1, [r7, #16]
 8014068:	3020      	adds	r0, #32
 801406a:	e7e5      	b.n	8014038 <__d2b+0x54>
 801406c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014070:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014074:	6030      	str	r0, [r6, #0]
 8014076:	6918      	ldr	r0, [r3, #16]
 8014078:	f7ff fd36 	bl	8013ae8 <__hi0bits>
 801407c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014080:	e7e1      	b.n	8014046 <__d2b+0x62>

08014082 <__ratio>:
 8014082:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014086:	4688      	mov	r8, r1
 8014088:	4669      	mov	r1, sp
 801408a:	4681      	mov	r9, r0
 801408c:	f7ff ff5c 	bl	8013f48 <__b2d>
 8014090:	a901      	add	r1, sp, #4
 8014092:	4640      	mov	r0, r8
 8014094:	ec57 6b10 	vmov	r6, r7, d0
 8014098:	f7ff ff56 	bl	8013f48 <__b2d>
 801409c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80140a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80140a4:	eba3 0c02 	sub.w	ip, r3, r2
 80140a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80140ac:	1a9b      	subs	r3, r3, r2
 80140ae:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80140b2:	ec5b ab10 	vmov	sl, fp, d0
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	bfce      	itee	gt
 80140ba:	463a      	movgt	r2, r7
 80140bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80140c0:	465a      	movle	r2, fp
 80140c2:	4659      	mov	r1, fp
 80140c4:	463d      	mov	r5, r7
 80140c6:	bfd4      	ite	le
 80140c8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80140cc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80140d0:	4630      	mov	r0, r6
 80140d2:	ee10 2a10 	vmov	r2, s0
 80140d6:	460b      	mov	r3, r1
 80140d8:	4629      	mov	r1, r5
 80140da:	f7ec fbc7 	bl	800086c <__aeabi_ddiv>
 80140de:	ec41 0b10 	vmov	d0, r0, r1
 80140e2:	b003      	add	sp, #12
 80140e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080140e8 <__copybits>:
 80140e8:	3901      	subs	r1, #1
 80140ea:	b510      	push	{r4, lr}
 80140ec:	1149      	asrs	r1, r1, #5
 80140ee:	6914      	ldr	r4, [r2, #16]
 80140f0:	3101      	adds	r1, #1
 80140f2:	f102 0314 	add.w	r3, r2, #20
 80140f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80140fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80140fe:	42a3      	cmp	r3, r4
 8014100:	4602      	mov	r2, r0
 8014102:	d303      	bcc.n	801410c <__copybits+0x24>
 8014104:	2300      	movs	r3, #0
 8014106:	428a      	cmp	r2, r1
 8014108:	d305      	bcc.n	8014116 <__copybits+0x2e>
 801410a:	bd10      	pop	{r4, pc}
 801410c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014110:	f840 2b04 	str.w	r2, [r0], #4
 8014114:	e7f3      	b.n	80140fe <__copybits+0x16>
 8014116:	f842 3b04 	str.w	r3, [r2], #4
 801411a:	e7f4      	b.n	8014106 <__copybits+0x1e>

0801411c <__any_on>:
 801411c:	f100 0214 	add.w	r2, r0, #20
 8014120:	6900      	ldr	r0, [r0, #16]
 8014122:	114b      	asrs	r3, r1, #5
 8014124:	4298      	cmp	r0, r3
 8014126:	b510      	push	{r4, lr}
 8014128:	db11      	blt.n	801414e <__any_on+0x32>
 801412a:	dd0a      	ble.n	8014142 <__any_on+0x26>
 801412c:	f011 011f 	ands.w	r1, r1, #31
 8014130:	d007      	beq.n	8014142 <__any_on+0x26>
 8014132:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014136:	fa24 f001 	lsr.w	r0, r4, r1
 801413a:	fa00 f101 	lsl.w	r1, r0, r1
 801413e:	428c      	cmp	r4, r1
 8014140:	d10b      	bne.n	801415a <__any_on+0x3e>
 8014142:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014146:	4293      	cmp	r3, r2
 8014148:	d803      	bhi.n	8014152 <__any_on+0x36>
 801414a:	2000      	movs	r0, #0
 801414c:	bd10      	pop	{r4, pc}
 801414e:	4603      	mov	r3, r0
 8014150:	e7f7      	b.n	8014142 <__any_on+0x26>
 8014152:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014156:	2900      	cmp	r1, #0
 8014158:	d0f5      	beq.n	8014146 <__any_on+0x2a>
 801415a:	2001      	movs	r0, #1
 801415c:	e7f6      	b.n	801414c <__any_on+0x30>

0801415e <_calloc_r>:
 801415e:	b538      	push	{r3, r4, r5, lr}
 8014160:	fb02 f401 	mul.w	r4, r2, r1
 8014164:	4621      	mov	r1, r4
 8014166:	f7fc f923 	bl	80103b0 <_malloc_r>
 801416a:	4605      	mov	r5, r0
 801416c:	b118      	cbz	r0, 8014176 <_calloc_r+0x18>
 801416e:	4622      	mov	r2, r4
 8014170:	2100      	movs	r1, #0
 8014172:	f7fc f8c6 	bl	8010302 <memset>
 8014176:	4628      	mov	r0, r5
 8014178:	bd38      	pop	{r3, r4, r5, pc}

0801417a <__ssputs_r>:
 801417a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801417e:	688e      	ldr	r6, [r1, #8]
 8014180:	429e      	cmp	r6, r3
 8014182:	4682      	mov	sl, r0
 8014184:	460c      	mov	r4, r1
 8014186:	4690      	mov	r8, r2
 8014188:	4699      	mov	r9, r3
 801418a:	d837      	bhi.n	80141fc <__ssputs_r+0x82>
 801418c:	898a      	ldrh	r2, [r1, #12]
 801418e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014192:	d031      	beq.n	80141f8 <__ssputs_r+0x7e>
 8014194:	6825      	ldr	r5, [r4, #0]
 8014196:	6909      	ldr	r1, [r1, #16]
 8014198:	1a6f      	subs	r7, r5, r1
 801419a:	6965      	ldr	r5, [r4, #20]
 801419c:	2302      	movs	r3, #2
 801419e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80141a2:	fb95 f5f3 	sdiv	r5, r5, r3
 80141a6:	f109 0301 	add.w	r3, r9, #1
 80141aa:	443b      	add	r3, r7
 80141ac:	429d      	cmp	r5, r3
 80141ae:	bf38      	it	cc
 80141b0:	461d      	movcc	r5, r3
 80141b2:	0553      	lsls	r3, r2, #21
 80141b4:	d530      	bpl.n	8014218 <__ssputs_r+0x9e>
 80141b6:	4629      	mov	r1, r5
 80141b8:	f7fc f8fa 	bl	80103b0 <_malloc_r>
 80141bc:	4606      	mov	r6, r0
 80141be:	b950      	cbnz	r0, 80141d6 <__ssputs_r+0x5c>
 80141c0:	230c      	movs	r3, #12
 80141c2:	f8ca 3000 	str.w	r3, [sl]
 80141c6:	89a3      	ldrh	r3, [r4, #12]
 80141c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141cc:	81a3      	strh	r3, [r4, #12]
 80141ce:	f04f 30ff 	mov.w	r0, #4294967295
 80141d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141d6:	463a      	mov	r2, r7
 80141d8:	6921      	ldr	r1, [r4, #16]
 80141da:	f7fc f887 	bl	80102ec <memcpy>
 80141de:	89a3      	ldrh	r3, [r4, #12]
 80141e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80141e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141e8:	81a3      	strh	r3, [r4, #12]
 80141ea:	6126      	str	r6, [r4, #16]
 80141ec:	6165      	str	r5, [r4, #20]
 80141ee:	443e      	add	r6, r7
 80141f0:	1bed      	subs	r5, r5, r7
 80141f2:	6026      	str	r6, [r4, #0]
 80141f4:	60a5      	str	r5, [r4, #8]
 80141f6:	464e      	mov	r6, r9
 80141f8:	454e      	cmp	r6, r9
 80141fa:	d900      	bls.n	80141fe <__ssputs_r+0x84>
 80141fc:	464e      	mov	r6, r9
 80141fe:	4632      	mov	r2, r6
 8014200:	4641      	mov	r1, r8
 8014202:	6820      	ldr	r0, [r4, #0]
 8014204:	f000 fb04 	bl	8014810 <memmove>
 8014208:	68a3      	ldr	r3, [r4, #8]
 801420a:	1b9b      	subs	r3, r3, r6
 801420c:	60a3      	str	r3, [r4, #8]
 801420e:	6823      	ldr	r3, [r4, #0]
 8014210:	441e      	add	r6, r3
 8014212:	6026      	str	r6, [r4, #0]
 8014214:	2000      	movs	r0, #0
 8014216:	e7dc      	b.n	80141d2 <__ssputs_r+0x58>
 8014218:	462a      	mov	r2, r5
 801421a:	f000 fb12 	bl	8014842 <_realloc_r>
 801421e:	4606      	mov	r6, r0
 8014220:	2800      	cmp	r0, #0
 8014222:	d1e2      	bne.n	80141ea <__ssputs_r+0x70>
 8014224:	6921      	ldr	r1, [r4, #16]
 8014226:	4650      	mov	r0, sl
 8014228:	f7fc f874 	bl	8010314 <_free_r>
 801422c:	e7c8      	b.n	80141c0 <__ssputs_r+0x46>
	...

08014230 <_svfiprintf_r>:
 8014230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014234:	461d      	mov	r5, r3
 8014236:	898b      	ldrh	r3, [r1, #12]
 8014238:	061f      	lsls	r7, r3, #24
 801423a:	b09d      	sub	sp, #116	; 0x74
 801423c:	4680      	mov	r8, r0
 801423e:	460c      	mov	r4, r1
 8014240:	4616      	mov	r6, r2
 8014242:	d50f      	bpl.n	8014264 <_svfiprintf_r+0x34>
 8014244:	690b      	ldr	r3, [r1, #16]
 8014246:	b96b      	cbnz	r3, 8014264 <_svfiprintf_r+0x34>
 8014248:	2140      	movs	r1, #64	; 0x40
 801424a:	f7fc f8b1 	bl	80103b0 <_malloc_r>
 801424e:	6020      	str	r0, [r4, #0]
 8014250:	6120      	str	r0, [r4, #16]
 8014252:	b928      	cbnz	r0, 8014260 <_svfiprintf_r+0x30>
 8014254:	230c      	movs	r3, #12
 8014256:	f8c8 3000 	str.w	r3, [r8]
 801425a:	f04f 30ff 	mov.w	r0, #4294967295
 801425e:	e0c8      	b.n	80143f2 <_svfiprintf_r+0x1c2>
 8014260:	2340      	movs	r3, #64	; 0x40
 8014262:	6163      	str	r3, [r4, #20]
 8014264:	2300      	movs	r3, #0
 8014266:	9309      	str	r3, [sp, #36]	; 0x24
 8014268:	2320      	movs	r3, #32
 801426a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801426e:	2330      	movs	r3, #48	; 0x30
 8014270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014274:	9503      	str	r5, [sp, #12]
 8014276:	f04f 0b01 	mov.w	fp, #1
 801427a:	4637      	mov	r7, r6
 801427c:	463d      	mov	r5, r7
 801427e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014282:	b10b      	cbz	r3, 8014288 <_svfiprintf_r+0x58>
 8014284:	2b25      	cmp	r3, #37	; 0x25
 8014286:	d13e      	bne.n	8014306 <_svfiprintf_r+0xd6>
 8014288:	ebb7 0a06 	subs.w	sl, r7, r6
 801428c:	d00b      	beq.n	80142a6 <_svfiprintf_r+0x76>
 801428e:	4653      	mov	r3, sl
 8014290:	4632      	mov	r2, r6
 8014292:	4621      	mov	r1, r4
 8014294:	4640      	mov	r0, r8
 8014296:	f7ff ff70 	bl	801417a <__ssputs_r>
 801429a:	3001      	adds	r0, #1
 801429c:	f000 80a4 	beq.w	80143e8 <_svfiprintf_r+0x1b8>
 80142a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142a2:	4453      	add	r3, sl
 80142a4:	9309      	str	r3, [sp, #36]	; 0x24
 80142a6:	783b      	ldrb	r3, [r7, #0]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	f000 809d 	beq.w	80143e8 <_svfiprintf_r+0x1b8>
 80142ae:	2300      	movs	r3, #0
 80142b0:	f04f 32ff 	mov.w	r2, #4294967295
 80142b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142b8:	9304      	str	r3, [sp, #16]
 80142ba:	9307      	str	r3, [sp, #28]
 80142bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142c0:	931a      	str	r3, [sp, #104]	; 0x68
 80142c2:	462f      	mov	r7, r5
 80142c4:	2205      	movs	r2, #5
 80142c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80142ca:	4850      	ldr	r0, [pc, #320]	; (801440c <_svfiprintf_r+0x1dc>)
 80142cc:	f7eb ff98 	bl	8000200 <memchr>
 80142d0:	9b04      	ldr	r3, [sp, #16]
 80142d2:	b9d0      	cbnz	r0, 801430a <_svfiprintf_r+0xda>
 80142d4:	06d9      	lsls	r1, r3, #27
 80142d6:	bf44      	itt	mi
 80142d8:	2220      	movmi	r2, #32
 80142da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80142de:	071a      	lsls	r2, r3, #28
 80142e0:	bf44      	itt	mi
 80142e2:	222b      	movmi	r2, #43	; 0x2b
 80142e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80142e8:	782a      	ldrb	r2, [r5, #0]
 80142ea:	2a2a      	cmp	r2, #42	; 0x2a
 80142ec:	d015      	beq.n	801431a <_svfiprintf_r+0xea>
 80142ee:	9a07      	ldr	r2, [sp, #28]
 80142f0:	462f      	mov	r7, r5
 80142f2:	2000      	movs	r0, #0
 80142f4:	250a      	movs	r5, #10
 80142f6:	4639      	mov	r1, r7
 80142f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142fc:	3b30      	subs	r3, #48	; 0x30
 80142fe:	2b09      	cmp	r3, #9
 8014300:	d94d      	bls.n	801439e <_svfiprintf_r+0x16e>
 8014302:	b1b8      	cbz	r0, 8014334 <_svfiprintf_r+0x104>
 8014304:	e00f      	b.n	8014326 <_svfiprintf_r+0xf6>
 8014306:	462f      	mov	r7, r5
 8014308:	e7b8      	b.n	801427c <_svfiprintf_r+0x4c>
 801430a:	4a40      	ldr	r2, [pc, #256]	; (801440c <_svfiprintf_r+0x1dc>)
 801430c:	1a80      	subs	r0, r0, r2
 801430e:	fa0b f000 	lsl.w	r0, fp, r0
 8014312:	4318      	orrs	r0, r3
 8014314:	9004      	str	r0, [sp, #16]
 8014316:	463d      	mov	r5, r7
 8014318:	e7d3      	b.n	80142c2 <_svfiprintf_r+0x92>
 801431a:	9a03      	ldr	r2, [sp, #12]
 801431c:	1d11      	adds	r1, r2, #4
 801431e:	6812      	ldr	r2, [r2, #0]
 8014320:	9103      	str	r1, [sp, #12]
 8014322:	2a00      	cmp	r2, #0
 8014324:	db01      	blt.n	801432a <_svfiprintf_r+0xfa>
 8014326:	9207      	str	r2, [sp, #28]
 8014328:	e004      	b.n	8014334 <_svfiprintf_r+0x104>
 801432a:	4252      	negs	r2, r2
 801432c:	f043 0302 	orr.w	r3, r3, #2
 8014330:	9207      	str	r2, [sp, #28]
 8014332:	9304      	str	r3, [sp, #16]
 8014334:	783b      	ldrb	r3, [r7, #0]
 8014336:	2b2e      	cmp	r3, #46	; 0x2e
 8014338:	d10c      	bne.n	8014354 <_svfiprintf_r+0x124>
 801433a:	787b      	ldrb	r3, [r7, #1]
 801433c:	2b2a      	cmp	r3, #42	; 0x2a
 801433e:	d133      	bne.n	80143a8 <_svfiprintf_r+0x178>
 8014340:	9b03      	ldr	r3, [sp, #12]
 8014342:	1d1a      	adds	r2, r3, #4
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	9203      	str	r2, [sp, #12]
 8014348:	2b00      	cmp	r3, #0
 801434a:	bfb8      	it	lt
 801434c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014350:	3702      	adds	r7, #2
 8014352:	9305      	str	r3, [sp, #20]
 8014354:	4d2e      	ldr	r5, [pc, #184]	; (8014410 <_svfiprintf_r+0x1e0>)
 8014356:	7839      	ldrb	r1, [r7, #0]
 8014358:	2203      	movs	r2, #3
 801435a:	4628      	mov	r0, r5
 801435c:	f7eb ff50 	bl	8000200 <memchr>
 8014360:	b138      	cbz	r0, 8014372 <_svfiprintf_r+0x142>
 8014362:	2340      	movs	r3, #64	; 0x40
 8014364:	1b40      	subs	r0, r0, r5
 8014366:	fa03 f000 	lsl.w	r0, r3, r0
 801436a:	9b04      	ldr	r3, [sp, #16]
 801436c:	4303      	orrs	r3, r0
 801436e:	3701      	adds	r7, #1
 8014370:	9304      	str	r3, [sp, #16]
 8014372:	7839      	ldrb	r1, [r7, #0]
 8014374:	4827      	ldr	r0, [pc, #156]	; (8014414 <_svfiprintf_r+0x1e4>)
 8014376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801437a:	2206      	movs	r2, #6
 801437c:	1c7e      	adds	r6, r7, #1
 801437e:	f7eb ff3f 	bl	8000200 <memchr>
 8014382:	2800      	cmp	r0, #0
 8014384:	d038      	beq.n	80143f8 <_svfiprintf_r+0x1c8>
 8014386:	4b24      	ldr	r3, [pc, #144]	; (8014418 <_svfiprintf_r+0x1e8>)
 8014388:	bb13      	cbnz	r3, 80143d0 <_svfiprintf_r+0x1a0>
 801438a:	9b03      	ldr	r3, [sp, #12]
 801438c:	3307      	adds	r3, #7
 801438e:	f023 0307 	bic.w	r3, r3, #7
 8014392:	3308      	adds	r3, #8
 8014394:	9303      	str	r3, [sp, #12]
 8014396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014398:	444b      	add	r3, r9
 801439a:	9309      	str	r3, [sp, #36]	; 0x24
 801439c:	e76d      	b.n	801427a <_svfiprintf_r+0x4a>
 801439e:	fb05 3202 	mla	r2, r5, r2, r3
 80143a2:	2001      	movs	r0, #1
 80143a4:	460f      	mov	r7, r1
 80143a6:	e7a6      	b.n	80142f6 <_svfiprintf_r+0xc6>
 80143a8:	2300      	movs	r3, #0
 80143aa:	3701      	adds	r7, #1
 80143ac:	9305      	str	r3, [sp, #20]
 80143ae:	4619      	mov	r1, r3
 80143b0:	250a      	movs	r5, #10
 80143b2:	4638      	mov	r0, r7
 80143b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143b8:	3a30      	subs	r2, #48	; 0x30
 80143ba:	2a09      	cmp	r2, #9
 80143bc:	d903      	bls.n	80143c6 <_svfiprintf_r+0x196>
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d0c8      	beq.n	8014354 <_svfiprintf_r+0x124>
 80143c2:	9105      	str	r1, [sp, #20]
 80143c4:	e7c6      	b.n	8014354 <_svfiprintf_r+0x124>
 80143c6:	fb05 2101 	mla	r1, r5, r1, r2
 80143ca:	2301      	movs	r3, #1
 80143cc:	4607      	mov	r7, r0
 80143ce:	e7f0      	b.n	80143b2 <_svfiprintf_r+0x182>
 80143d0:	ab03      	add	r3, sp, #12
 80143d2:	9300      	str	r3, [sp, #0]
 80143d4:	4622      	mov	r2, r4
 80143d6:	4b11      	ldr	r3, [pc, #68]	; (801441c <_svfiprintf_r+0x1ec>)
 80143d8:	a904      	add	r1, sp, #16
 80143da:	4640      	mov	r0, r8
 80143dc:	f7fc f8d6 	bl	801058c <_printf_float>
 80143e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80143e4:	4681      	mov	r9, r0
 80143e6:	d1d6      	bne.n	8014396 <_svfiprintf_r+0x166>
 80143e8:	89a3      	ldrh	r3, [r4, #12]
 80143ea:	065b      	lsls	r3, r3, #25
 80143ec:	f53f af35 	bmi.w	801425a <_svfiprintf_r+0x2a>
 80143f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143f2:	b01d      	add	sp, #116	; 0x74
 80143f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143f8:	ab03      	add	r3, sp, #12
 80143fa:	9300      	str	r3, [sp, #0]
 80143fc:	4622      	mov	r2, r4
 80143fe:	4b07      	ldr	r3, [pc, #28]	; (801441c <_svfiprintf_r+0x1ec>)
 8014400:	a904      	add	r1, sp, #16
 8014402:	4640      	mov	r0, r8
 8014404:	f7fc fb78 	bl	8010af8 <_printf_i>
 8014408:	e7ea      	b.n	80143e0 <_svfiprintf_r+0x1b0>
 801440a:	bf00      	nop
 801440c:	08014d4c 	.word	0x08014d4c
 8014410:	08014d52 	.word	0x08014d52
 8014414:	08014d56 	.word	0x08014d56
 8014418:	0801058d 	.word	0x0801058d
 801441c:	0801417b 	.word	0x0801417b

08014420 <__sfputc_r>:
 8014420:	6893      	ldr	r3, [r2, #8]
 8014422:	3b01      	subs	r3, #1
 8014424:	2b00      	cmp	r3, #0
 8014426:	b410      	push	{r4}
 8014428:	6093      	str	r3, [r2, #8]
 801442a:	da08      	bge.n	801443e <__sfputc_r+0x1e>
 801442c:	6994      	ldr	r4, [r2, #24]
 801442e:	42a3      	cmp	r3, r4
 8014430:	db01      	blt.n	8014436 <__sfputc_r+0x16>
 8014432:	290a      	cmp	r1, #10
 8014434:	d103      	bne.n	801443e <__sfputc_r+0x1e>
 8014436:	f85d 4b04 	ldr.w	r4, [sp], #4
 801443a:	f7fd be5f 	b.w	80120fc <__swbuf_r>
 801443e:	6813      	ldr	r3, [r2, #0]
 8014440:	1c58      	adds	r0, r3, #1
 8014442:	6010      	str	r0, [r2, #0]
 8014444:	7019      	strb	r1, [r3, #0]
 8014446:	4608      	mov	r0, r1
 8014448:	f85d 4b04 	ldr.w	r4, [sp], #4
 801444c:	4770      	bx	lr

0801444e <__sfputs_r>:
 801444e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014450:	4606      	mov	r6, r0
 8014452:	460f      	mov	r7, r1
 8014454:	4614      	mov	r4, r2
 8014456:	18d5      	adds	r5, r2, r3
 8014458:	42ac      	cmp	r4, r5
 801445a:	d101      	bne.n	8014460 <__sfputs_r+0x12>
 801445c:	2000      	movs	r0, #0
 801445e:	e007      	b.n	8014470 <__sfputs_r+0x22>
 8014460:	463a      	mov	r2, r7
 8014462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014466:	4630      	mov	r0, r6
 8014468:	f7ff ffda 	bl	8014420 <__sfputc_r>
 801446c:	1c43      	adds	r3, r0, #1
 801446e:	d1f3      	bne.n	8014458 <__sfputs_r+0xa>
 8014470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014474 <_vfiprintf_r>:
 8014474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014478:	460c      	mov	r4, r1
 801447a:	b09d      	sub	sp, #116	; 0x74
 801447c:	4617      	mov	r7, r2
 801447e:	461d      	mov	r5, r3
 8014480:	4606      	mov	r6, r0
 8014482:	b118      	cbz	r0, 801448c <_vfiprintf_r+0x18>
 8014484:	6983      	ldr	r3, [r0, #24]
 8014486:	b90b      	cbnz	r3, 801448c <_vfiprintf_r+0x18>
 8014488:	f7fe fe2e 	bl	80130e8 <__sinit>
 801448c:	4b7c      	ldr	r3, [pc, #496]	; (8014680 <_vfiprintf_r+0x20c>)
 801448e:	429c      	cmp	r4, r3
 8014490:	d158      	bne.n	8014544 <_vfiprintf_r+0xd0>
 8014492:	6874      	ldr	r4, [r6, #4]
 8014494:	89a3      	ldrh	r3, [r4, #12]
 8014496:	0718      	lsls	r0, r3, #28
 8014498:	d55e      	bpl.n	8014558 <_vfiprintf_r+0xe4>
 801449a:	6923      	ldr	r3, [r4, #16]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d05b      	beq.n	8014558 <_vfiprintf_r+0xe4>
 80144a0:	2300      	movs	r3, #0
 80144a2:	9309      	str	r3, [sp, #36]	; 0x24
 80144a4:	2320      	movs	r3, #32
 80144a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144aa:	2330      	movs	r3, #48	; 0x30
 80144ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144b0:	9503      	str	r5, [sp, #12]
 80144b2:	f04f 0b01 	mov.w	fp, #1
 80144b6:	46b8      	mov	r8, r7
 80144b8:	4645      	mov	r5, r8
 80144ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80144be:	b10b      	cbz	r3, 80144c4 <_vfiprintf_r+0x50>
 80144c0:	2b25      	cmp	r3, #37	; 0x25
 80144c2:	d154      	bne.n	801456e <_vfiprintf_r+0xfa>
 80144c4:	ebb8 0a07 	subs.w	sl, r8, r7
 80144c8:	d00b      	beq.n	80144e2 <_vfiprintf_r+0x6e>
 80144ca:	4653      	mov	r3, sl
 80144cc:	463a      	mov	r2, r7
 80144ce:	4621      	mov	r1, r4
 80144d0:	4630      	mov	r0, r6
 80144d2:	f7ff ffbc 	bl	801444e <__sfputs_r>
 80144d6:	3001      	adds	r0, #1
 80144d8:	f000 80c2 	beq.w	8014660 <_vfiprintf_r+0x1ec>
 80144dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144de:	4453      	add	r3, sl
 80144e0:	9309      	str	r3, [sp, #36]	; 0x24
 80144e2:	f898 3000 	ldrb.w	r3, [r8]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	f000 80ba 	beq.w	8014660 <_vfiprintf_r+0x1ec>
 80144ec:	2300      	movs	r3, #0
 80144ee:	f04f 32ff 	mov.w	r2, #4294967295
 80144f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144f6:	9304      	str	r3, [sp, #16]
 80144f8:	9307      	str	r3, [sp, #28]
 80144fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80144fe:	931a      	str	r3, [sp, #104]	; 0x68
 8014500:	46a8      	mov	r8, r5
 8014502:	2205      	movs	r2, #5
 8014504:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014508:	485e      	ldr	r0, [pc, #376]	; (8014684 <_vfiprintf_r+0x210>)
 801450a:	f7eb fe79 	bl	8000200 <memchr>
 801450e:	9b04      	ldr	r3, [sp, #16]
 8014510:	bb78      	cbnz	r0, 8014572 <_vfiprintf_r+0xfe>
 8014512:	06d9      	lsls	r1, r3, #27
 8014514:	bf44      	itt	mi
 8014516:	2220      	movmi	r2, #32
 8014518:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801451c:	071a      	lsls	r2, r3, #28
 801451e:	bf44      	itt	mi
 8014520:	222b      	movmi	r2, #43	; 0x2b
 8014522:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014526:	782a      	ldrb	r2, [r5, #0]
 8014528:	2a2a      	cmp	r2, #42	; 0x2a
 801452a:	d02a      	beq.n	8014582 <_vfiprintf_r+0x10e>
 801452c:	9a07      	ldr	r2, [sp, #28]
 801452e:	46a8      	mov	r8, r5
 8014530:	2000      	movs	r0, #0
 8014532:	250a      	movs	r5, #10
 8014534:	4641      	mov	r1, r8
 8014536:	f811 3b01 	ldrb.w	r3, [r1], #1
 801453a:	3b30      	subs	r3, #48	; 0x30
 801453c:	2b09      	cmp	r3, #9
 801453e:	d969      	bls.n	8014614 <_vfiprintf_r+0x1a0>
 8014540:	b360      	cbz	r0, 801459c <_vfiprintf_r+0x128>
 8014542:	e024      	b.n	801458e <_vfiprintf_r+0x11a>
 8014544:	4b50      	ldr	r3, [pc, #320]	; (8014688 <_vfiprintf_r+0x214>)
 8014546:	429c      	cmp	r4, r3
 8014548:	d101      	bne.n	801454e <_vfiprintf_r+0xda>
 801454a:	68b4      	ldr	r4, [r6, #8]
 801454c:	e7a2      	b.n	8014494 <_vfiprintf_r+0x20>
 801454e:	4b4f      	ldr	r3, [pc, #316]	; (801468c <_vfiprintf_r+0x218>)
 8014550:	429c      	cmp	r4, r3
 8014552:	bf08      	it	eq
 8014554:	68f4      	ldreq	r4, [r6, #12]
 8014556:	e79d      	b.n	8014494 <_vfiprintf_r+0x20>
 8014558:	4621      	mov	r1, r4
 801455a:	4630      	mov	r0, r6
 801455c:	f7fd fe20 	bl	80121a0 <__swsetup_r>
 8014560:	2800      	cmp	r0, #0
 8014562:	d09d      	beq.n	80144a0 <_vfiprintf_r+0x2c>
 8014564:	f04f 30ff 	mov.w	r0, #4294967295
 8014568:	b01d      	add	sp, #116	; 0x74
 801456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801456e:	46a8      	mov	r8, r5
 8014570:	e7a2      	b.n	80144b8 <_vfiprintf_r+0x44>
 8014572:	4a44      	ldr	r2, [pc, #272]	; (8014684 <_vfiprintf_r+0x210>)
 8014574:	1a80      	subs	r0, r0, r2
 8014576:	fa0b f000 	lsl.w	r0, fp, r0
 801457a:	4318      	orrs	r0, r3
 801457c:	9004      	str	r0, [sp, #16]
 801457e:	4645      	mov	r5, r8
 8014580:	e7be      	b.n	8014500 <_vfiprintf_r+0x8c>
 8014582:	9a03      	ldr	r2, [sp, #12]
 8014584:	1d11      	adds	r1, r2, #4
 8014586:	6812      	ldr	r2, [r2, #0]
 8014588:	9103      	str	r1, [sp, #12]
 801458a:	2a00      	cmp	r2, #0
 801458c:	db01      	blt.n	8014592 <_vfiprintf_r+0x11e>
 801458e:	9207      	str	r2, [sp, #28]
 8014590:	e004      	b.n	801459c <_vfiprintf_r+0x128>
 8014592:	4252      	negs	r2, r2
 8014594:	f043 0302 	orr.w	r3, r3, #2
 8014598:	9207      	str	r2, [sp, #28]
 801459a:	9304      	str	r3, [sp, #16]
 801459c:	f898 3000 	ldrb.w	r3, [r8]
 80145a0:	2b2e      	cmp	r3, #46	; 0x2e
 80145a2:	d10e      	bne.n	80145c2 <_vfiprintf_r+0x14e>
 80145a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80145a8:	2b2a      	cmp	r3, #42	; 0x2a
 80145aa:	d138      	bne.n	801461e <_vfiprintf_r+0x1aa>
 80145ac:	9b03      	ldr	r3, [sp, #12]
 80145ae:	1d1a      	adds	r2, r3, #4
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	9203      	str	r2, [sp, #12]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	bfb8      	it	lt
 80145b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80145bc:	f108 0802 	add.w	r8, r8, #2
 80145c0:	9305      	str	r3, [sp, #20]
 80145c2:	4d33      	ldr	r5, [pc, #204]	; (8014690 <_vfiprintf_r+0x21c>)
 80145c4:	f898 1000 	ldrb.w	r1, [r8]
 80145c8:	2203      	movs	r2, #3
 80145ca:	4628      	mov	r0, r5
 80145cc:	f7eb fe18 	bl	8000200 <memchr>
 80145d0:	b140      	cbz	r0, 80145e4 <_vfiprintf_r+0x170>
 80145d2:	2340      	movs	r3, #64	; 0x40
 80145d4:	1b40      	subs	r0, r0, r5
 80145d6:	fa03 f000 	lsl.w	r0, r3, r0
 80145da:	9b04      	ldr	r3, [sp, #16]
 80145dc:	4303      	orrs	r3, r0
 80145de:	f108 0801 	add.w	r8, r8, #1
 80145e2:	9304      	str	r3, [sp, #16]
 80145e4:	f898 1000 	ldrb.w	r1, [r8]
 80145e8:	482a      	ldr	r0, [pc, #168]	; (8014694 <_vfiprintf_r+0x220>)
 80145ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80145ee:	2206      	movs	r2, #6
 80145f0:	f108 0701 	add.w	r7, r8, #1
 80145f4:	f7eb fe04 	bl	8000200 <memchr>
 80145f8:	2800      	cmp	r0, #0
 80145fa:	d037      	beq.n	801466c <_vfiprintf_r+0x1f8>
 80145fc:	4b26      	ldr	r3, [pc, #152]	; (8014698 <_vfiprintf_r+0x224>)
 80145fe:	bb1b      	cbnz	r3, 8014648 <_vfiprintf_r+0x1d4>
 8014600:	9b03      	ldr	r3, [sp, #12]
 8014602:	3307      	adds	r3, #7
 8014604:	f023 0307 	bic.w	r3, r3, #7
 8014608:	3308      	adds	r3, #8
 801460a:	9303      	str	r3, [sp, #12]
 801460c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801460e:	444b      	add	r3, r9
 8014610:	9309      	str	r3, [sp, #36]	; 0x24
 8014612:	e750      	b.n	80144b6 <_vfiprintf_r+0x42>
 8014614:	fb05 3202 	mla	r2, r5, r2, r3
 8014618:	2001      	movs	r0, #1
 801461a:	4688      	mov	r8, r1
 801461c:	e78a      	b.n	8014534 <_vfiprintf_r+0xc0>
 801461e:	2300      	movs	r3, #0
 8014620:	f108 0801 	add.w	r8, r8, #1
 8014624:	9305      	str	r3, [sp, #20]
 8014626:	4619      	mov	r1, r3
 8014628:	250a      	movs	r5, #10
 801462a:	4640      	mov	r0, r8
 801462c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014630:	3a30      	subs	r2, #48	; 0x30
 8014632:	2a09      	cmp	r2, #9
 8014634:	d903      	bls.n	801463e <_vfiprintf_r+0x1ca>
 8014636:	2b00      	cmp	r3, #0
 8014638:	d0c3      	beq.n	80145c2 <_vfiprintf_r+0x14e>
 801463a:	9105      	str	r1, [sp, #20]
 801463c:	e7c1      	b.n	80145c2 <_vfiprintf_r+0x14e>
 801463e:	fb05 2101 	mla	r1, r5, r1, r2
 8014642:	2301      	movs	r3, #1
 8014644:	4680      	mov	r8, r0
 8014646:	e7f0      	b.n	801462a <_vfiprintf_r+0x1b6>
 8014648:	ab03      	add	r3, sp, #12
 801464a:	9300      	str	r3, [sp, #0]
 801464c:	4622      	mov	r2, r4
 801464e:	4b13      	ldr	r3, [pc, #76]	; (801469c <_vfiprintf_r+0x228>)
 8014650:	a904      	add	r1, sp, #16
 8014652:	4630      	mov	r0, r6
 8014654:	f7fb ff9a 	bl	801058c <_printf_float>
 8014658:	f1b0 3fff 	cmp.w	r0, #4294967295
 801465c:	4681      	mov	r9, r0
 801465e:	d1d5      	bne.n	801460c <_vfiprintf_r+0x198>
 8014660:	89a3      	ldrh	r3, [r4, #12]
 8014662:	065b      	lsls	r3, r3, #25
 8014664:	f53f af7e 	bmi.w	8014564 <_vfiprintf_r+0xf0>
 8014668:	9809      	ldr	r0, [sp, #36]	; 0x24
 801466a:	e77d      	b.n	8014568 <_vfiprintf_r+0xf4>
 801466c:	ab03      	add	r3, sp, #12
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	4622      	mov	r2, r4
 8014672:	4b0a      	ldr	r3, [pc, #40]	; (801469c <_vfiprintf_r+0x228>)
 8014674:	a904      	add	r1, sp, #16
 8014676:	4630      	mov	r0, r6
 8014678:	f7fc fa3e 	bl	8010af8 <_printf_i>
 801467c:	e7ec      	b.n	8014658 <_vfiprintf_r+0x1e4>
 801467e:	bf00      	nop
 8014680:	08014c00 	.word	0x08014c00
 8014684:	08014d4c 	.word	0x08014d4c
 8014688:	08014c20 	.word	0x08014c20
 801468c:	08014be0 	.word	0x08014be0
 8014690:	08014d52 	.word	0x08014d52
 8014694:	08014d56 	.word	0x08014d56
 8014698:	0801058d 	.word	0x0801058d
 801469c:	0801444f 	.word	0x0801444f

080146a0 <__sread>:
 80146a0:	b510      	push	{r4, lr}
 80146a2:	460c      	mov	r4, r1
 80146a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146a8:	f000 f8f2 	bl	8014890 <_read_r>
 80146ac:	2800      	cmp	r0, #0
 80146ae:	bfab      	itete	ge
 80146b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146b2:	89a3      	ldrhlt	r3, [r4, #12]
 80146b4:	181b      	addge	r3, r3, r0
 80146b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146ba:	bfac      	ite	ge
 80146bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80146be:	81a3      	strhlt	r3, [r4, #12]
 80146c0:	bd10      	pop	{r4, pc}

080146c2 <__swrite>:
 80146c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146c6:	461f      	mov	r7, r3
 80146c8:	898b      	ldrh	r3, [r1, #12]
 80146ca:	05db      	lsls	r3, r3, #23
 80146cc:	4605      	mov	r5, r0
 80146ce:	460c      	mov	r4, r1
 80146d0:	4616      	mov	r6, r2
 80146d2:	d505      	bpl.n	80146e0 <__swrite+0x1e>
 80146d4:	2302      	movs	r3, #2
 80146d6:	2200      	movs	r2, #0
 80146d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146dc:	f000 f886 	bl	80147ec <_lseek_r>
 80146e0:	89a3      	ldrh	r3, [r4, #12]
 80146e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80146ea:	81a3      	strh	r3, [r4, #12]
 80146ec:	4632      	mov	r2, r6
 80146ee:	463b      	mov	r3, r7
 80146f0:	4628      	mov	r0, r5
 80146f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146f6:	f000 b835 	b.w	8014764 <_write_r>

080146fa <__sseek>:
 80146fa:	b510      	push	{r4, lr}
 80146fc:	460c      	mov	r4, r1
 80146fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014702:	f000 f873 	bl	80147ec <_lseek_r>
 8014706:	1c43      	adds	r3, r0, #1
 8014708:	89a3      	ldrh	r3, [r4, #12]
 801470a:	bf15      	itete	ne
 801470c:	6560      	strne	r0, [r4, #84]	; 0x54
 801470e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014716:	81a3      	strheq	r3, [r4, #12]
 8014718:	bf18      	it	ne
 801471a:	81a3      	strhne	r3, [r4, #12]
 801471c:	bd10      	pop	{r4, pc}

0801471e <__sclose>:
 801471e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014722:	f000 b831 	b.w	8014788 <_close_r>

08014726 <strncmp>:
 8014726:	b510      	push	{r4, lr}
 8014728:	b16a      	cbz	r2, 8014746 <strncmp+0x20>
 801472a:	3901      	subs	r1, #1
 801472c:	1884      	adds	r4, r0, r2
 801472e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014732:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014736:	4293      	cmp	r3, r2
 8014738:	d103      	bne.n	8014742 <strncmp+0x1c>
 801473a:	42a0      	cmp	r0, r4
 801473c:	d001      	beq.n	8014742 <strncmp+0x1c>
 801473e:	2b00      	cmp	r3, #0
 8014740:	d1f5      	bne.n	801472e <strncmp+0x8>
 8014742:	1a98      	subs	r0, r3, r2
 8014744:	bd10      	pop	{r4, pc}
 8014746:	4610      	mov	r0, r2
 8014748:	e7fc      	b.n	8014744 <strncmp+0x1e>

0801474a <__ascii_wctomb>:
 801474a:	b149      	cbz	r1, 8014760 <__ascii_wctomb+0x16>
 801474c:	2aff      	cmp	r2, #255	; 0xff
 801474e:	bf85      	ittet	hi
 8014750:	238a      	movhi	r3, #138	; 0x8a
 8014752:	6003      	strhi	r3, [r0, #0]
 8014754:	700a      	strbls	r2, [r1, #0]
 8014756:	f04f 30ff 	movhi.w	r0, #4294967295
 801475a:	bf98      	it	ls
 801475c:	2001      	movls	r0, #1
 801475e:	4770      	bx	lr
 8014760:	4608      	mov	r0, r1
 8014762:	4770      	bx	lr

08014764 <_write_r>:
 8014764:	b538      	push	{r3, r4, r5, lr}
 8014766:	4c07      	ldr	r4, [pc, #28]	; (8014784 <_write_r+0x20>)
 8014768:	4605      	mov	r5, r0
 801476a:	4608      	mov	r0, r1
 801476c:	4611      	mov	r1, r2
 801476e:	2200      	movs	r2, #0
 8014770:	6022      	str	r2, [r4, #0]
 8014772:	461a      	mov	r2, r3
 8014774:	f7f5 fdea 	bl	800a34c <_write>
 8014778:	1c43      	adds	r3, r0, #1
 801477a:	d102      	bne.n	8014782 <_write_r+0x1e>
 801477c:	6823      	ldr	r3, [r4, #0]
 801477e:	b103      	cbz	r3, 8014782 <_write_r+0x1e>
 8014780:	602b      	str	r3, [r5, #0]
 8014782:	bd38      	pop	{r3, r4, r5, pc}
 8014784:	20003980 	.word	0x20003980

08014788 <_close_r>:
 8014788:	b538      	push	{r3, r4, r5, lr}
 801478a:	4c06      	ldr	r4, [pc, #24]	; (80147a4 <_close_r+0x1c>)
 801478c:	2300      	movs	r3, #0
 801478e:	4605      	mov	r5, r0
 8014790:	4608      	mov	r0, r1
 8014792:	6023      	str	r3, [r4, #0]
 8014794:	f7ed fa31 	bl	8001bfa <_close>
 8014798:	1c43      	adds	r3, r0, #1
 801479a:	d102      	bne.n	80147a2 <_close_r+0x1a>
 801479c:	6823      	ldr	r3, [r4, #0]
 801479e:	b103      	cbz	r3, 80147a2 <_close_r+0x1a>
 80147a0:	602b      	str	r3, [r5, #0]
 80147a2:	bd38      	pop	{r3, r4, r5, pc}
 80147a4:	20003980 	.word	0x20003980

080147a8 <_fstat_r>:
 80147a8:	b538      	push	{r3, r4, r5, lr}
 80147aa:	4c07      	ldr	r4, [pc, #28]	; (80147c8 <_fstat_r+0x20>)
 80147ac:	2300      	movs	r3, #0
 80147ae:	4605      	mov	r5, r0
 80147b0:	4608      	mov	r0, r1
 80147b2:	4611      	mov	r1, r2
 80147b4:	6023      	str	r3, [r4, #0]
 80147b6:	f7ed fa2c 	bl	8001c12 <_fstat>
 80147ba:	1c43      	adds	r3, r0, #1
 80147bc:	d102      	bne.n	80147c4 <_fstat_r+0x1c>
 80147be:	6823      	ldr	r3, [r4, #0]
 80147c0:	b103      	cbz	r3, 80147c4 <_fstat_r+0x1c>
 80147c2:	602b      	str	r3, [r5, #0]
 80147c4:	bd38      	pop	{r3, r4, r5, pc}
 80147c6:	bf00      	nop
 80147c8:	20003980 	.word	0x20003980

080147cc <_isatty_r>:
 80147cc:	b538      	push	{r3, r4, r5, lr}
 80147ce:	4c06      	ldr	r4, [pc, #24]	; (80147e8 <_isatty_r+0x1c>)
 80147d0:	2300      	movs	r3, #0
 80147d2:	4605      	mov	r5, r0
 80147d4:	4608      	mov	r0, r1
 80147d6:	6023      	str	r3, [r4, #0]
 80147d8:	f7ed fa2b 	bl	8001c32 <_isatty>
 80147dc:	1c43      	adds	r3, r0, #1
 80147de:	d102      	bne.n	80147e6 <_isatty_r+0x1a>
 80147e0:	6823      	ldr	r3, [r4, #0]
 80147e2:	b103      	cbz	r3, 80147e6 <_isatty_r+0x1a>
 80147e4:	602b      	str	r3, [r5, #0]
 80147e6:	bd38      	pop	{r3, r4, r5, pc}
 80147e8:	20003980 	.word	0x20003980

080147ec <_lseek_r>:
 80147ec:	b538      	push	{r3, r4, r5, lr}
 80147ee:	4c07      	ldr	r4, [pc, #28]	; (801480c <_lseek_r+0x20>)
 80147f0:	4605      	mov	r5, r0
 80147f2:	4608      	mov	r0, r1
 80147f4:	4611      	mov	r1, r2
 80147f6:	2200      	movs	r2, #0
 80147f8:	6022      	str	r2, [r4, #0]
 80147fa:	461a      	mov	r2, r3
 80147fc:	f7ed fa24 	bl	8001c48 <_lseek>
 8014800:	1c43      	adds	r3, r0, #1
 8014802:	d102      	bne.n	801480a <_lseek_r+0x1e>
 8014804:	6823      	ldr	r3, [r4, #0]
 8014806:	b103      	cbz	r3, 801480a <_lseek_r+0x1e>
 8014808:	602b      	str	r3, [r5, #0]
 801480a:	bd38      	pop	{r3, r4, r5, pc}
 801480c:	20003980 	.word	0x20003980

08014810 <memmove>:
 8014810:	4288      	cmp	r0, r1
 8014812:	b510      	push	{r4, lr}
 8014814:	eb01 0302 	add.w	r3, r1, r2
 8014818:	d807      	bhi.n	801482a <memmove+0x1a>
 801481a:	1e42      	subs	r2, r0, #1
 801481c:	4299      	cmp	r1, r3
 801481e:	d00a      	beq.n	8014836 <memmove+0x26>
 8014820:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014824:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014828:	e7f8      	b.n	801481c <memmove+0xc>
 801482a:	4283      	cmp	r3, r0
 801482c:	d9f5      	bls.n	801481a <memmove+0xa>
 801482e:	1881      	adds	r1, r0, r2
 8014830:	1ad2      	subs	r2, r2, r3
 8014832:	42d3      	cmn	r3, r2
 8014834:	d100      	bne.n	8014838 <memmove+0x28>
 8014836:	bd10      	pop	{r4, pc}
 8014838:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801483c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014840:	e7f7      	b.n	8014832 <memmove+0x22>

08014842 <_realloc_r>:
 8014842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014844:	4607      	mov	r7, r0
 8014846:	4614      	mov	r4, r2
 8014848:	460e      	mov	r6, r1
 801484a:	b921      	cbnz	r1, 8014856 <_realloc_r+0x14>
 801484c:	4611      	mov	r1, r2
 801484e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014852:	f7fb bdad 	b.w	80103b0 <_malloc_r>
 8014856:	b922      	cbnz	r2, 8014862 <_realloc_r+0x20>
 8014858:	f7fb fd5c 	bl	8010314 <_free_r>
 801485c:	4625      	mov	r5, r4
 801485e:	4628      	mov	r0, r5
 8014860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014862:	f000 f827 	bl	80148b4 <_malloc_usable_size_r>
 8014866:	42a0      	cmp	r0, r4
 8014868:	d20f      	bcs.n	801488a <_realloc_r+0x48>
 801486a:	4621      	mov	r1, r4
 801486c:	4638      	mov	r0, r7
 801486e:	f7fb fd9f 	bl	80103b0 <_malloc_r>
 8014872:	4605      	mov	r5, r0
 8014874:	2800      	cmp	r0, #0
 8014876:	d0f2      	beq.n	801485e <_realloc_r+0x1c>
 8014878:	4631      	mov	r1, r6
 801487a:	4622      	mov	r2, r4
 801487c:	f7fb fd36 	bl	80102ec <memcpy>
 8014880:	4631      	mov	r1, r6
 8014882:	4638      	mov	r0, r7
 8014884:	f7fb fd46 	bl	8010314 <_free_r>
 8014888:	e7e9      	b.n	801485e <_realloc_r+0x1c>
 801488a:	4635      	mov	r5, r6
 801488c:	e7e7      	b.n	801485e <_realloc_r+0x1c>
	...

08014890 <_read_r>:
 8014890:	b538      	push	{r3, r4, r5, lr}
 8014892:	4c07      	ldr	r4, [pc, #28]	; (80148b0 <_read_r+0x20>)
 8014894:	4605      	mov	r5, r0
 8014896:	4608      	mov	r0, r1
 8014898:	4611      	mov	r1, r2
 801489a:	2200      	movs	r2, #0
 801489c:	6022      	str	r2, [r4, #0]
 801489e:	461a      	mov	r2, r3
 80148a0:	f7ed f98e 	bl	8001bc0 <_read>
 80148a4:	1c43      	adds	r3, r0, #1
 80148a6:	d102      	bne.n	80148ae <_read_r+0x1e>
 80148a8:	6823      	ldr	r3, [r4, #0]
 80148aa:	b103      	cbz	r3, 80148ae <_read_r+0x1e>
 80148ac:	602b      	str	r3, [r5, #0]
 80148ae:	bd38      	pop	{r3, r4, r5, pc}
 80148b0:	20003980 	.word	0x20003980

080148b4 <_malloc_usable_size_r>:
 80148b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148b8:	1f18      	subs	r0, r3, #4
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	bfbc      	itt	lt
 80148be:	580b      	ldrlt	r3, [r1, r0]
 80148c0:	18c0      	addlt	r0, r0, r3
 80148c2:	4770      	bx	lr

080148c4 <_init>:
 80148c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148c6:	bf00      	nop
 80148c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148ca:	bc08      	pop	{r3}
 80148cc:	469e      	mov	lr, r3
 80148ce:	4770      	bx	lr

080148d0 <_fini>:
 80148d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148d2:	bf00      	nop
 80148d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148d6:	bc08      	pop	{r3}
 80148d8:	469e      	mov	lr, r3
 80148da:	4770      	bx	lr
