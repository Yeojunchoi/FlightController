
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8f8  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800eaa8  0800eaa8  0001eaa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee10  0800ee10  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee10  0800ee10  0001ee10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee18  0800ee18  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee18  0800ee18  0001ee18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee1c  0800ee1c  0001ee1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800ee20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ec  20000240  0800f05c  00020240  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000c2c  0800f05c  00020c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f264  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000407c  00000000  00000000  0003f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001678  00000000  00000000  00043550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001490  00000000  00000000  00044bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000282e3  00000000  00000000  00046058  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015382  00000000  00000000  0006e33b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e90bc  00000000  00000000  000836bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016c779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c70  00000000  00000000  0016c7f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000240 	.word	0x20000240
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ea90 	.word	0x0800ea90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000244 	.word	0x20000244
 80001ec:	0800ea90 	.word	0x0800ea90

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2iz>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae0:	d215      	bcs.n	8000b0e <__aeabi_d2iz+0x36>
 8000ae2:	d511      	bpl.n	8000b08 <__aeabi_d2iz+0x30>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d912      	bls.n	8000b14 <__aeabi_d2iz+0x3c>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d105      	bne.n	8000b20 <__aeabi_d2iz+0x48>
 8000b14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	bf08      	it	eq
 8000b1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_d2f>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b30:	bf24      	itt	cs
 8000b32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_d2f+0x30>
 8000b3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b5c:	d121      	bne.n	8000ba2 <__aeabi_d2f+0x7a>
 8000b5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b62:	bfbc      	itt	lt
 8000b64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	4770      	bxlt	lr
 8000b6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b72:	f1c2 0218 	rsb	r2, r2, #24
 8000b76:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	bf18      	it	ne
 8000b84:	f040 0001 	orrne.w	r0, r0, #1
 8000b88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b94:	ea40 000c 	orr.w	r0, r0, ip
 8000b98:	fa23 f302 	lsr.w	r3, r3, r2
 8000b9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba0:	e7cc      	b.n	8000b3c <__aeabi_d2f+0x14>
 8000ba2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba6:	d107      	bne.n	8000bb8 <__aeabi_d2f+0x90>
 8000ba8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bac:	bf1e      	ittt	ne
 8000bae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bxne	lr
 8000bb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <invSqrt>:
#include "algorithmCollection.h"
#include <math.h>

#define DEG2PI 0.01745329251F

float invSqrt(float x) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000ed2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ed6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ede:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	105a      	asrs	r2, r3, #1
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <invSqrt+0x74>)
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000f00:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f04:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f14:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000f18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f24:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	ee07 3a90 	vmov	s15, r3
}
 8000f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	5f3759df 	.word	0x5f3759df

08000f40 <quat2eul>:

void quat2eul(float* q, float* roll, float* pitch, float* yaw){
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]
	*roll = atan2(2*(q[0]*q[1] + q[2]* q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	ed93 7a00 	vldr	s14, [r3]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	3304      	adds	r3, #4
 8000f58:	edd3 7a00 	vldr	s15, [r3]
 8000f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3308      	adds	r3, #8
 8000f64:	edd3 6a00 	vldr	s13, [r3]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	330c      	adds	r3, #12
 8000f6c:	edd3 7a00 	vldr	s15, [r3]
 8000f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f7c:	ee17 0a90 	vmov	r0, s15
 8000f80:	f7ff faa2 	bl	80004c8 <__aeabi_f2d>
 8000f84:	4604      	mov	r4, r0
 8000f86:	460d      	mov	r5, r1
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	ed93 7a00 	vldr	s14, [r3]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	edd3 7a00 	vldr	s15, [r3]
 8000f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	edd3 6a00 	vldr	s13, [r3]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	edd3 6a00 	vldr	s13, [r3]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	330c      	adds	r3, #12
 8000fcc:	edd3 6a00 	vldr	s13, [r3]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	330c      	adds	r3, #12
 8000fd4:	edd3 7a00 	vldr	s15, [r3]
 8000fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe0:	ee17 0a90 	vmov	r0, s15
 8000fe4:	f7ff fa70 	bl	80004c8 <__aeabi_f2d>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	ec43 2b11 	vmov	d1, r2, r3
 8000ff0:	ec45 4b10 	vmov	d0, r4, r5
 8000ff4:	f00a fde8 	bl	800bbc8 <atan2>
 8000ff8:	ec54 3b10 	vmov	r3, r4, d0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	4621      	mov	r1, r4
 8001000:	f7ff fd92 	bl	8000b28 <__aeabi_d2f>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	601a      	str	r2, [r3, #0]
	*pitch = asin(-2*(q[1]*q[3] - q[0]*q[2]));
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3304      	adds	r3, #4
 800100e:	ed93 7a00 	vldr	s14, [r3]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	330c      	adds	r3, #12
 8001016:	edd3 7a00 	vldr	s15, [r3]
 800101a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	edd3 6a00 	vldr	s13, [r3]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3308      	adds	r3, #8
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001034:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103c:	ee17 0a90 	vmov	r0, s15
 8001040:	f7ff fa42 	bl	80004c8 <__aeabi_f2d>
 8001044:	4603      	mov	r3, r0
 8001046:	460c      	mov	r4, r1
 8001048:	ec44 3b10 	vmov	d0, r3, r4
 800104c:	f00a fd64 	bl	800bb18 <asin>
 8001050:	ec54 3b10 	vmov	r3, r4, d0
 8001054:	4618      	mov	r0, r3
 8001056:	4621      	mov	r1, r4
 8001058:	f7ff fd66 	bl	8000b28 <__aeabi_d2f>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
	*yaw = atan2(2*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3304      	adds	r3, #4
 8001066:	ed93 7a00 	vldr	s14, [r3]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3308      	adds	r3, #8
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	edd3 6a00 	vldr	s13, [r3]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	330c      	adds	r3, #12
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001090:	ee17 0a90 	vmov	r0, s15
 8001094:	f7ff fa18 	bl	80004c8 <__aeabi_f2d>
 8001098:	4604      	mov	r4, r0
 800109a:	460d      	mov	r5, r1
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	ed93 7a00 	vldr	s14, [r3]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3304      	adds	r3, #4
 80010b0:	edd3 6a00 	vldr	s13, [r3]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3304      	adds	r3, #4
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3308      	adds	r3, #8
 80010c8:	edd3 6a00 	vldr	s13, [r3]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3308      	adds	r3, #8
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	330c      	adds	r3, #12
 80010e0:	edd3 6a00 	vldr	s13, [r3]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	330c      	adds	r3, #12
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f4:	ee17 0a90 	vmov	r0, s15
 80010f8:	f7ff f9e6 	bl	80004c8 <__aeabi_f2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	ec43 2b11 	vmov	d1, r2, r3
 8001104:	ec45 4b10 	vmov	d0, r4, r5
 8001108:	f00a fd5e 	bl	800bbc8 <atan2>
 800110c:	ec54 3b10 	vmov	r3, r4, d0
 8001110:	4618      	mov	r0, r3
 8001112:	4621      	mov	r1, r4
 8001114:	f7ff fd08 	bl	8000b28 <__aeabi_d2f>
 8001118:	4602      	mov	r2, r0
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	601a      	str	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bdb0      	pop	{r4, r5, r7, pc}

08001126 <junTimer_tic>:

void junTimer_tic(struct junTimer* t){
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   t->last_time = HAL_GetTick();
 800112e:	f001 f99d 	bl	800246c <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	601a      	str	r2, [r3, #0]
   t->start = 1;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	711a      	strb	r2, [r3, #4]
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <junTimer_toc>:

uint32_t junTimer_toc(struct junTimer* t){
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return HAL_GetTick() - t->last_time;
 800114e:	f001 f98d 	bl	800246c <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1ad3      	subs	r3, r2, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_DMA_Init+0x3c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <MX_DMA_Init+0x3c>)
 8001174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_DMA_Init+0x3c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	200e      	movs	r0, #14
 800118c:	f001 fa77 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001190:	200e      	movs	r0, #14
 8001192:	f001 fa90 	bl	80026b6 <HAL_NVIC_EnableIRQ>

}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_ETH_Init+0x78>)
 80011aa:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <MX_ETH_Init+0x7c>)
 80011ac:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_ETH_Init+0x78>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <MX_ETH_Init+0x78>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_ETH_Init+0x78>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_ETH_Init+0x78>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_ETH_Init+0x78>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	3302      	adds	r3, #2
 80011d2:	22e1      	movs	r2, #225	; 0xe1
 80011d4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_ETH_Init+0x78>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	3303      	adds	r3, #3
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_ETH_Init+0x78>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_ETH_Init+0x78>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	3305      	adds	r3, #5
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_ETH_Init+0x78>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_ETH_Init+0x78>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_ETH_Init+0x78>)
 8001202:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001206:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_ETH_Init+0x78>)
 800120a:	f001 fe0d 	bl	8002e28 <HAL_ETH_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8001214:	f000 fac8 	bl	80017a8 <Error_Handler>
  }

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200003b8 	.word	0x200003b8
 8001220:	40028000 	.word	0x40028000

08001224 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a55      	ldr	r2, [pc, #340]	; (8001398 <HAL_ETH_MspInit+0x174>)
 8001242:	4293      	cmp	r3, r2
 8001244:	f040 80a4 	bne.w	8001390 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
 800124c:	4b53      	ldr	r3, [pc, #332]	; (800139c <HAL_ETH_MspInit+0x178>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a52      	ldr	r2, [pc, #328]	; (800139c <HAL_ETH_MspInit+0x178>)
 8001252:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
 8001258:	4b50      	ldr	r3, [pc, #320]	; (800139c <HAL_ETH_MspInit+0x178>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	4b4c      	ldr	r3, [pc, #304]	; (800139c <HAL_ETH_MspInit+0x178>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	4a4b      	ldr	r2, [pc, #300]	; (800139c <HAL_ETH_MspInit+0x178>)
 800126e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001272:	6313      	str	r3, [r2, #48]	; 0x30
 8001274:	4b49      	ldr	r3, [pc, #292]	; (800139c <HAL_ETH_MspInit+0x178>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	4b45      	ldr	r3, [pc, #276]	; (800139c <HAL_ETH_MspInit+0x178>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	4a44      	ldr	r2, [pc, #272]	; (800139c <HAL_ETH_MspInit+0x178>)
 800128a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800128e:	6313      	str	r3, [r2, #48]	; 0x30
 8001290:	4b42      	ldr	r3, [pc, #264]	; (800139c <HAL_ETH_MspInit+0x178>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	4b3e      	ldr	r3, [pc, #248]	; (800139c <HAL_ETH_MspInit+0x178>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a3d      	ldr	r2, [pc, #244]	; (800139c <HAL_ETH_MspInit+0x178>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b3b      	ldr	r3, [pc, #236]	; (800139c <HAL_ETH_MspInit+0x178>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	4b37      	ldr	r3, [pc, #220]	; (800139c <HAL_ETH_MspInit+0x178>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a36      	ldr	r2, [pc, #216]	; (800139c <HAL_ETH_MspInit+0x178>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <HAL_ETH_MspInit+0x178>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_ETH_MspInit+0x178>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a2f      	ldr	r2, [pc, #188]	; (800139c <HAL_ETH_MspInit+0x178>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_ETH_MspInit+0x178>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_ETH_MspInit+0x178>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	4a28      	ldr	r2, [pc, #160]	; (800139c <HAL_ETH_MspInit+0x178>)
 80012fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_ETH_MspInit+0x178>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800130c:	2332      	movs	r3, #50	; 0x32
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800131c:	230b      	movs	r3, #11
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	481e      	ldr	r0, [pc, #120]	; (80013a0 <HAL_ETH_MspInit+0x17c>)
 8001328:	f002 f9ec 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800132c:	2386      	movs	r3, #134	; 0x86
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800133c:	230b      	movs	r3, #11
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4817      	ldr	r0, [pc, #92]	; (80013a4 <HAL_ETH_MspInit+0x180>)
 8001348:	f002 f9dc 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800134c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800135e:	230b      	movs	r3, #11
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	480f      	ldr	r0, [pc, #60]	; (80013a8 <HAL_ETH_MspInit+0x184>)
 800136a:	f002 f9cb 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800136e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001380:	230b      	movs	r3, #11
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	4619      	mov	r1, r3
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <HAL_ETH_MspInit+0x188>)
 800138c:	f002 f9ba 	bl	8003704 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001390:	bf00      	nop
 8001392:	3738      	adds	r7, #56	; 0x38
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40028000 	.word	0x40028000
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40021800 	.word	0x40021800

080013b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	; 0x38
 80013b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
 80013ca:	4b59      	ldr	r3, [pc, #356]	; (8001530 <MX_GPIO_Init+0x180>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a58      	ldr	r2, [pc, #352]	; (8001530 <MX_GPIO_Init+0x180>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b56      	ldr	r3, [pc, #344]	; (8001530 <MX_GPIO_Init+0x180>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	623b      	str	r3, [r7, #32]
 80013e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	4b52      	ldr	r3, [pc, #328]	; (8001530 <MX_GPIO_Init+0x180>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a51      	ldr	r2, [pc, #324]	; (8001530 <MX_GPIO_Init+0x180>)
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <MX_GPIO_Init+0x180>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0320 	and.w	r3, r3, #32
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	4b4b      	ldr	r3, [pc, #300]	; (8001530 <MX_GPIO_Init+0x180>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a4a      	ldr	r2, [pc, #296]	; (8001530 <MX_GPIO_Init+0x180>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b48      	ldr	r3, [pc, #288]	; (8001530 <MX_GPIO_Init+0x180>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	4b44      	ldr	r3, [pc, #272]	; (8001530 <MX_GPIO_Init+0x180>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a43      	ldr	r2, [pc, #268]	; (8001530 <MX_GPIO_Init+0x180>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <MX_GPIO_Init+0x180>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <MX_GPIO_Init+0x180>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a3c      	ldr	r2, [pc, #240]	; (8001530 <MX_GPIO_Init+0x180>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b3a      	ldr	r3, [pc, #232]	; (8001530 <MX_GPIO_Init+0x180>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b36      	ldr	r3, [pc, #216]	; (8001530 <MX_GPIO_Init+0x180>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a35      	ldr	r2, [pc, #212]	; (8001530 <MX_GPIO_Init+0x180>)
 800145c:	f043 0310 	orr.w	r3, r3, #16
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <MX_GPIO_Init+0x180>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <MX_GPIO_Init+0x180>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a2e      	ldr	r2, [pc, #184]	; (8001530 <MX_GPIO_Init+0x180>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <MX_GPIO_Init+0x180>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <MX_GPIO_Init+0x180>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a27      	ldr	r2, [pc, #156]	; (8001530 <MX_GPIO_Init+0x180>)
 8001494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <MX_GPIO_Init+0x180>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f244 0181 	movw	r1, #16513	; 0x4081
 80014ac:	4821      	ldr	r0, [pc, #132]	; (8001534 <MX_GPIO_Init+0x184>)
 80014ae:	f002 faeb 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2140      	movs	r1, #64	; 0x40
 80014b6:	4820      	ldr	r0, [pc, #128]	; (8001538 <MX_GPIO_Init+0x188>)
 80014b8:	f002 fae6 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80014bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <MX_GPIO_Init+0x18c>)
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	4619      	mov	r1, r3
 80014d0:	481b      	ldr	r0, [pc, #108]	; (8001540 <MX_GPIO_Init+0x190>)
 80014d2:	f002 f917 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80014d6:	f244 0381 	movw	r3, #16513	; 0x4081
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	4811      	ldr	r0, [pc, #68]	; (8001534 <MX_GPIO_Init+0x184>)
 80014f0:	f002 f908 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014f4:	2340      	movs	r3, #64	; 0x40
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <MX_GPIO_Init+0x188>)
 800150c:	f002 f8fa 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001520:	4619      	mov	r1, r3
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_GPIO_Init+0x188>)
 8001524:	f002 f8ee 	bl	8003704 <HAL_GPIO_Init>

}
 8001528:	bf00      	nop
 800152a:	3738      	adds	r7, #56	; 0x38
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400
 8001538:	40021800 	.word	0x40021800
 800153c:	10110000 	.word	0x10110000
 8001540:	40020800 	.word	0x40020800

08001544 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MX_I2C1_Init+0x74>)
 800154a:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <MX_I2C1_Init+0x78>)
 800154c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <MX_I2C1_Init+0x74>)
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <MX_I2C1_Init+0x7c>)
 8001552:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <MX_I2C1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_I2C1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MX_I2C1_Init+0x74>)
 8001562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001566:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_I2C1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_I2C1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_I2C1_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_I2C1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <MX_I2C1_Init+0x74>)
 8001582:	f002 fa9b 	bl	8003abc <HAL_I2C_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800158c:	f000 f90c 	bl	80017a8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001590:	2100      	movs	r1, #0
 8001592:	4809      	ldr	r0, [pc, #36]	; (80015b8 <MX_I2C1_Init+0x74>)
 8001594:	f004 fedd 	bl	8006352 <HAL_I2CEx_ConfigAnalogFilter>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800159e:	f000 f903 	bl	80017a8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015a2:	2100      	movs	r1, #0
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_I2C1_Init+0x74>)
 80015a6:	f004 ff10 	bl	80063ca <HAL_I2CEx_ConfigDigitalFilter>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80015b0:	f000 f8fa 	bl	80017a8 <Error_Handler>
  }

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000400 	.word	0x20000400
 80015bc:	40005400 	.word	0x40005400
 80015c0:	00061a80 	.word	0x00061a80

080015c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_I2C_MspInit+0x84>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d12c      	bne.n	8001640 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_I2C_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_I2C_MspInit+0x88>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_I2C_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001602:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001608:	2312      	movs	r3, #18
 800160a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160c:	2301      	movs	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001614:	2304      	movs	r3, #4
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	480c      	ldr	r0, [pc, #48]	; (8001650 <HAL_I2C_MspInit+0x8c>)
 8001620:	f002 f870 	bl	8003704 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_I2C_MspInit+0x88>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_I2C_MspInit+0x88>)
 800162e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001632:	6413      	str	r3, [r2, #64]	; 0x40
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_I2C_MspInit+0x88>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40005400 	.word	0x40005400
 800164c:	40023800 	.word	0x40023800
 8001650:	40020400 	.word	0x40020400

08001654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001658:	f000 fea2 	bl	80023a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165c:	f000 f81e 	bl	800169c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001660:	f7ff fea6 	bl	80013b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001664:	f7ff fd7e 	bl	8001164 <MX_DMA_Init>
  MX_ETH_Init();
 8001668:	f7ff fd9c 	bl	80011a4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800166c:	f000 fcb6 	bl	8001fdc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001670:	f000 fde4 	bl	800223c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001674:	f7ff ff66 	bl	8001544 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001678:	f000 fad4 	bl	8001c24 <MX_TIM10_Init>
  MX_TIM11_Init();
 800167c:	f000 fb1e 	bl	8001cbc <MX_TIM11_Init>
  MX_TIM3_Init();
 8001680:	f000 f9b6 	bl	80019f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001684:	f000 fa36 	bl	8001af4 <MX_TIM4_Init>
  MX_UART7_Init();
 8001688:	f000 fc50 	bl	8001f2c <MX_UART7_Init>
  MX_USART2_UART_Init();
 800168c:	f000 fc7c 	bl	8001f88 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001690:	f000 f86e 	bl	8001770 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    userMain();
 8001694:	f009 f880 	bl	800a798 <userMain>
 8001698:	e7fc      	b.n	8001694 <main+0x40>
	...

0800169c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b094      	sub	sp, #80	; 0x50
 80016a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	2230      	movs	r2, #48	; 0x30
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f00b f829 	bl	800c702 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <SystemClock_Config+0xcc>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	4a27      	ldr	r2, [pc, #156]	; (8001768 <SystemClock_Config+0xcc>)
 80016ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6413      	str	r3, [r2, #64]	; 0x40
 80016d0:	4b25      	ldr	r3, [pc, #148]	; (8001768 <SystemClock_Config+0xcc>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <SystemClock_Config+0xd0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a21      	ldr	r2, [pc, #132]	; (800176c <SystemClock_Config+0xd0>)
 80016e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <SystemClock_Config+0xd0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001702:	2302      	movs	r3, #2
 8001704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800170c:	2308      	movs	r3, #8
 800170e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001710:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001714:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001716:	2302      	movs	r3, #2
 8001718:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800171a:	2307      	movs	r3, #7
 800171c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171e:	f107 0320 	add.w	r3, r7, #32
 8001722:	4618      	mov	r0, r3
 8001724:	f004 ffae 	bl	8006684 <HAL_RCC_OscConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800172e:	f000 f83b 	bl	80017a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001732:	230f      	movs	r3, #15
 8001734:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001736:	2302      	movs	r3, #2
 8001738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800173e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001748:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	2105      	movs	r1, #5
 8001750:	4618      	mov	r0, r3
 8001752:	f005 fa07 	bl	8006b64 <HAL_RCC_ClockConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800175c:	f000 f824 	bl	80017a8 <Error_Handler>
  }
}
 8001760:	bf00      	nop
 8001762:	3750      	adds	r7, #80	; 0x50
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000

08001770 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	201f      	movs	r0, #31
 800177a:	f000 ff80 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800177e:	201f      	movs	r0, #31
 8001780:	f000 ff99 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	2020      	movs	r0, #32
 800178a:	f000 ff78 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800178e:	2020      	movs	r0, #32
 8001790:	f000 ff91 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* UART7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	2052      	movs	r0, #82	; 0x52
 800179a:	f000 ff70 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART7_IRQn);
 800179e:	2052      	movs	r0, #82	; 0x52
 80017a0:	f000 ff89 	bl	80026b6 <HAL_NVIC_EnableIRQ>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_MspInit+0x4c>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_MspInit+0x4c>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_MspInit+0x4c>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_MspInit+0x4c>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f000 fdf2 	bl	8002444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DMA1_Stream3_IRQHandler+0x10>)
 800186a:	f001 f867 	bl	800293c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200005d4 	.word	0x200005d4

08001878 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800187e:	f005 fc25 	bl	80070cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000514 	.word	0x20000514

0800188c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <I2C1_EV_IRQHandler+0x10>)
 8001892:	f002 fe2d 	bl	80044f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000400 	.word	0x20000400

080018a0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <I2C1_ER_IRQHandler+0x10>)
 80018a6:	f002 ff89 	bl	80047bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000400 	.word	0x20000400

080018b4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <UART7_IRQHandler+0x10>)
 80018ba:	f006 fbbb 	bl	8008034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000554 	.word	0x20000554

080018c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e00a      	b.n	80018f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018da:	f3af 8000 	nop.w
 80018de:	4601      	mov	r1, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	b2ca      	uxtb	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf0      	blt.n	80018da <_read+0x12>
	}

return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
	return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192a:	605a      	str	r2, [r3, #4]
	return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_isatty>:

int _isatty(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
	return 1;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <_sbrk+0x50>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x16>
		heap_end = &end;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <_sbrk+0x50>)
 800197e:	4a10      	ldr	r2, [pc, #64]	; (80019c0 <_sbrk+0x54>)
 8001980:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <_sbrk+0x50>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <_sbrk+0x50>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	466a      	mov	r2, sp
 8001992:	4293      	cmp	r3, r2
 8001994:	d907      	bls.n	80019a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001996:	f00a fe6f 	bl	800c678 <__errno>
 800199a:	4602      	mov	r2, r0
 800199c:	230c      	movs	r3, #12
 800199e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	e006      	b.n	80019b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <_sbrk+0x50>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a03      	ldr	r2, [pc, #12]	; (80019bc <_sbrk+0x50>)
 80019b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000025c 	.word	0x2000025c
 80019c0:	20000c30 	.word	0x20000c30

080019c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <SystemInit+0x28>)
 80019ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <SystemInit+0x28>)
 80019d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SystemInit+0x28>)
 80019da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019de:	609a      	str	r2, [r3, #8]
#endif
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08e      	sub	sp, #56	; 0x38
 80019f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
 8001a1c:	615a      	str	r2, [r3, #20]
 8001a1e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001a20:	4b32      	ldr	r3, [pc, #200]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001a22:	4a33      	ldr	r2, [pc, #204]	; (8001af0 <MX_TIM3_Init+0x100>)
 8001a24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8001a26:	4b31      	ldr	r3, [pc, #196]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001a28:	2229      	movs	r2, #41	; 0x29
 8001a2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8001a32:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001a34:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001a38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a46:	4829      	ldr	r0, [pc, #164]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001a48:	f005 fa7e 	bl	8006f48 <HAL_TIM_Base_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a52:	f7ff fea9 	bl	80017a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a60:	4619      	mov	r1, r3
 8001a62:	4822      	ldr	r0, [pc, #136]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001a64:	f005 fd00 	bl	8007468 <HAL_TIM_ConfigClockSource>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a6e:	f7ff fe9b 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a72:	481e      	ldr	r0, [pc, #120]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001a74:	f005 fab7 	bl	8006fe6 <HAL_TIM_PWM_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a7e:	f7ff fe93 	bl	80017a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a8a:	f107 0320 	add.w	r3, r7, #32
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4816      	ldr	r0, [pc, #88]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001a92:	f006 f8d9 	bl	8007c48 <HAL_TIMEx_MasterConfigSynchronization>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a9c:	f7ff fe84 	bl	80017a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa0:	2360      	movs	r3, #96	; 0x60
 8001aa2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480d      	ldr	r0, [pc, #52]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001ab8:	f005 fc10 	bl	80072dc <HAL_TIM_PWM_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ac2:	f7ff fe71 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2204      	movs	r2, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4807      	ldr	r0, [pc, #28]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001ace:	f005 fc05 	bl	80072dc <HAL_TIM_PWM_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001ad8:	f7ff fe66 	bl	80017a8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <MX_TIM3_Init+0xfc>)
 8001ade:	f000 f97b 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 8001ae2:	bf00      	nop
 8001ae4:	3738      	adds	r7, #56	; 0x38
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200004d4 	.word	0x200004d4
 8001af0:	40000400 	.word	0x40000400

08001af4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08e      	sub	sp, #56	; 0x38
 8001af8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	f107 0320 	add.w	r3, r7, #32
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
 8001b20:	615a      	str	r2, [r3, #20]
 8001b22:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001b24:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001b26:	4a3e      	ldr	r2, [pc, #248]	; (8001c20 <MX_TIM4_Init+0x12c>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8001b2a:	4b3c      	ldr	r3, [pc, #240]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001b2c:	2229      	movs	r2, #41	; 0x29
 8001b2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001b38:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001b3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b35      	ldr	r3, [pc, #212]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b4a:	4834      	ldr	r0, [pc, #208]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001b4c:	f005 f9fc 	bl	8006f48 <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b56:	f7ff fe27 	bl	80017a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b64:	4619      	mov	r1, r3
 8001b66:	482d      	ldr	r0, [pc, #180]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001b68:	f005 fc7e 	bl	8007468 <HAL_TIM_ConfigClockSource>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b72:	f7ff fe19 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b76:	4829      	ldr	r0, [pc, #164]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001b78:	f005 fa35 	bl	8006fe6 <HAL_TIM_PWM_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b82:	f7ff fe11 	bl	80017a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b8e:	f107 0320 	add.w	r3, r7, #32
 8001b92:	4619      	mov	r1, r3
 8001b94:	4821      	ldr	r0, [pc, #132]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001b96:	f006 f857 	bl	8007c48 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ba0:	f7ff fe02 	bl	80017a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba4:	2360      	movs	r3, #96	; 0x60
 8001ba6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4818      	ldr	r0, [pc, #96]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001bbc:	f005 fb8e 	bl	80072dc <HAL_TIM_PWM_ConfigChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001bc6:	f7ff fdef 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2204      	movs	r2, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4812      	ldr	r0, [pc, #72]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001bd2:	f005 fb83 	bl	80072dc <HAL_TIM_PWM_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001bdc:	f7ff fde4 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2208      	movs	r2, #8
 8001be4:	4619      	mov	r1, r3
 8001be6:	480d      	ldr	r0, [pc, #52]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001be8:	f005 fb78 	bl	80072dc <HAL_TIM_PWM_ConfigChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001bf2:	f7ff fdd9 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4807      	ldr	r0, [pc, #28]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001bfe:	f005 fb6d 	bl	80072dc <HAL_TIM_PWM_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001c08:	f7ff fdce 	bl	80017a8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001c0c:	4803      	ldr	r0, [pc, #12]	; (8001c1c <MX_TIM4_Init+0x128>)
 8001c0e:	f000 f8e3 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 8001c12:	bf00      	nop
 8001c14:	3738      	adds	r7, #56	; 0x38
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000454 	.word	0x20000454
 8001c20:	40000800 	.word	0x40000800

08001c24 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	615a      	str	r2, [r3, #20]
 8001c3a:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <MX_TIM10_Init+0x90>)
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <MX_TIM10_Init+0x94>)
 8001c40:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001c42:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <MX_TIM10_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_TIM10_Init+0x90>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <MX_TIM10_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_TIM10_Init+0x90>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <MX_TIM10_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c60:	4814      	ldr	r0, [pc, #80]	; (8001cb4 <MX_TIM10_Init+0x90>)
 8001c62:	f005 f971 	bl	8006f48 <HAL_TIM_Base_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001c6c:	f7ff fd9c 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001c70:	4810      	ldr	r0, [pc, #64]	; (8001cb4 <MX_TIM10_Init+0x90>)
 8001c72:	f005 f9b8 	bl	8006fe6 <HAL_TIM_PWM_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8001c7c:	f7ff fd94 	bl	80017a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c80:	2360      	movs	r3, #96	; 0x60
 8001c82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2200      	movs	r2, #0
 8001c94:	4619      	mov	r1, r3
 8001c96:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <MX_TIM10_Init+0x90>)
 8001c98:	f005 fb20 	bl	80072dc <HAL_TIM_PWM_ConfigChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8001ca2:	f7ff fd81 	bl	80017a8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 8001ca6:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <MX_TIM10_Init+0x90>)
 8001ca8:	f000 f896 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 8001cac:	bf00      	nop
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000494 	.word	0x20000494
 8001cb8:	40014400 	.word	0x40014400

08001cbc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <MX_TIM11_Init+0x40>)
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <MX_TIM11_Init+0x44>)
 8001cc4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1680-1;
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <MX_TIM11_Init+0x40>)
 8001cc8:	f240 628f 	movw	r2, #1679	; 0x68f
 8001ccc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <MX_TIM11_Init+0x40>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_TIM11_Init+0x40>)
 8001cd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cda:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <MX_TIM11_Init+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_TIM11_Init+0x40>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <MX_TIM11_Init+0x40>)
 8001cea:	f005 f92d 	bl	8006f48 <HAL_TIM_Base_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001cf4:	f7ff fd58 	bl	80017a8 <Error_Handler>
  }

}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000514 	.word	0x20000514
 8001d00:	40014800 	.word	0x40014800

08001d04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a2c      	ldr	r2, [pc, #176]	; (8001dc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10e      	bne.n	8001d34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a2a      	ldr	r2, [pc, #168]	; (8001dc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001d32:	e042      	b.n	8001dba <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a24      	ldr	r2, [pc, #144]	; (8001dcc <HAL_TIM_Base_MspInit+0xc8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d10e      	bne.n	8001d5c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a20      	ldr	r2, [pc, #128]	; (8001dc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
}
 8001d5a:	e02e      	b.n	8001dba <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10e      	bne.n	8001d84 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	6453      	str	r3, [r2, #68]	; 0x44
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
}
 8001d82:	e01a      	b.n	8001dba <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <HAL_TIM_Base_MspInit+0xd0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d115      	bne.n	8001dba <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	201a      	movs	r0, #26
 8001db0:	f000 fc65 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001db4:	201a      	movs	r0, #26
 8001db6:	f000 fc7e 	bl	80026b6 <HAL_NVIC_EnableIRQ>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40000800 	.word	0x40000800
 8001dd0:	40014400 	.word	0x40014400
 8001dd4:	40014800 	.word	0x40014800

08001dd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	; 0x30
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a45      	ldr	r2, [pc, #276]	; (8001f0c <HAL_TIM_MspPostInit+0x134>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d13c      	bne.n	8001e74 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <HAL_TIM_MspPostInit+0x138>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a43      	ldr	r2, [pc, #268]	; (8001f10 <HAL_TIM_MspPostInit+0x138>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <HAL_TIM_MspPostInit+0x138>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_TIM_MspPostInit+0x138>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a3c      	ldr	r2, [pc, #240]	; (8001f10 <HAL_TIM_MspPostInit+0x138>)
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <HAL_TIM_MspPostInit+0x138>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e32:	2340      	movs	r3, #64	; 0x40
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e42:	2302      	movs	r3, #2
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4831      	ldr	r0, [pc, #196]	; (8001f14 <HAL_TIM_MspPostInit+0x13c>)
 8001e4e:	f001 fc59 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e62:	2302      	movs	r3, #2
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	482a      	ldr	r0, [pc, #168]	; (8001f18 <HAL_TIM_MspPostInit+0x140>)
 8001e6e:	f001 fc49 	bl	8003704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001e72:	e047      	b.n	8001f04 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a28      	ldr	r2, [pc, #160]	; (8001f1c <HAL_TIM_MspPostInit+0x144>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d11f      	bne.n	8001ebe <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <HAL_TIM_MspPostInit+0x138>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <HAL_TIM_MspPostInit+0x138>)
 8001e88:	f043 0308 	orr.w	r3, r3, #8
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_TIM_MspPostInit+0x138>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e9a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001eac:	2302      	movs	r3, #2
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	481a      	ldr	r0, [pc, #104]	; (8001f20 <HAL_TIM_MspPostInit+0x148>)
 8001eb8:	f001 fc24 	bl	8003704 <HAL_GPIO_Init>
}
 8001ebc:	e022      	b.n	8001f04 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM10)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <HAL_TIM_MspPostInit+0x14c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d11d      	bne.n	8001f04 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_TIM_MspPostInit+0x138>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_TIM_MspPostInit+0x138>)
 8001ed2:	f043 0320 	orr.w	r3, r3, #32
 8001ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_TIM_MspPostInit+0x138>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ee4:	2340      	movs	r3, #64	; 0x40
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	480a      	ldr	r0, [pc, #40]	; (8001f28 <HAL_TIM_MspPostInit+0x150>)
 8001f00:	f001 fc00 	bl	8003704 <HAL_GPIO_Init>
}
 8001f04:	bf00      	nop
 8001f06:	3730      	adds	r7, #48	; 0x30
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40000800 	.word	0x40000800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40014400 	.word	0x40014400
 8001f28:	40021400 	.word	0x40021400

08001f2c <MX_UART7_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart7_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <MX_UART7_Init+0x50>)
 8001f32:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <MX_UART7_Init+0x54>)
 8001f34:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <MX_UART7_Init+0x50>)
 8001f38:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <MX_UART7_Init+0x58>)
 8001f3a:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <MX_UART7_Init+0x50>)
 8001f3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f42:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <MX_UART7_Init+0x50>)
 8001f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4a:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <MX_UART7_Init+0x50>)
 8001f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f52:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <MX_UART7_Init+0x50>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <MX_UART7_Init+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <MX_UART7_Init+0x50>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_UART7_Init+0x50>)
 8001f68:	f005 fefe 	bl	8007d68 <HAL_UART_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 8001f72:	f7ff fc19 	bl	80017a8 <Error_Handler>
  }

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000554 	.word	0x20000554
 8001f80:	40007800 	.word	0x40007800
 8001f84:	000186a0 	.word	0x000186a0

08001f88 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <MX_USART2_UART_Init+0x50>)
 8001f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fb4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001fb8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <MX_USART2_UART_Init+0x4c>)
 8001fc2:	f005 fed1 	bl	8007d68 <HAL_UART_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001fcc:	f7ff fbec 	bl	80017a8 <Error_Handler>
  }

}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000634 	.word	0x20000634
 8001fd8:	40004400 	.word	0x40004400

08001fdc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_USART3_UART_Init+0x4c>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <MX_USART3_UART_Init+0x50>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <MX_USART3_UART_Init+0x4c>)
 8001fe8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001fec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_USART3_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_USART3_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <MX_USART3_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_USART3_UART_Init+0x4c>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <MX_USART3_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_USART3_UART_Init+0x4c>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <MX_USART3_UART_Init+0x4c>)
 8002014:	f005 fea8 	bl	8007d68 <HAL_UART_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800201e:	f7ff fbc3 	bl	80017a8 <Error_Handler>
  }

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000594 	.word	0x20000594
 800202c:	40004800 	.word	0x40004800

08002030 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08e      	sub	sp, #56	; 0x38
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a72      	ldr	r2, [pc, #456]	; (8002218 <HAL_UART_MspInit+0x1e8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d15c      	bne.n	800210c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
 8002056:	4b71      	ldr	r3, [pc, #452]	; (800221c <HAL_UART_MspInit+0x1ec>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a70      	ldr	r2, [pc, #448]	; (800221c <HAL_UART_MspInit+0x1ec>)
 800205c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b6e      	ldr	r3, [pc, #440]	; (800221c <HAL_UART_MspInit+0x1ec>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800206a:	623b      	str	r3, [r7, #32]
 800206c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	4b6a      	ldr	r3, [pc, #424]	; (800221c <HAL_UART_MspInit+0x1ec>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a69      	ldr	r2, [pc, #420]	; (800221c <HAL_UART_MspInit+0x1ec>)
 8002078:	f043 0310 	orr.w	r3, r3, #16
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b67      	ldr	r3, [pc, #412]	; (800221c <HAL_UART_MspInit+0x1ec>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800208a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002094:	2301      	movs	r3, #1
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800209c:	2308      	movs	r3, #8
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a4:	4619      	mov	r1, r3
 80020a6:	485e      	ldr	r0, [pc, #376]	; (8002220 <HAL_UART_MspInit+0x1f0>)
 80020a8:	f001 fb2c 	bl	8003704 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80020ac:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 80020ae:	4a5e      	ldr	r2, [pc, #376]	; (8002228 <HAL_UART_MspInit+0x1f8>)
 80020b0:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80020b2:	4b5c      	ldr	r3, [pc, #368]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 80020b4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80020b8:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ba:	4b5a      	ldr	r3, [pc, #360]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c0:	4b58      	ldr	r3, [pc, #352]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020c6:	4b57      	ldr	r3, [pc, #348]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 80020c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020cc:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ce:	4b55      	ldr	r3, [pc, #340]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020d4:	4b53      	ldr	r3, [pc, #332]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80020da:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 80020dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e0:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020e2:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020e8:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80020ee:	484d      	ldr	r0, [pc, #308]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 80020f0:	f000 fafc 	bl	80026ec <HAL_DMA_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80020fa:	f7ff fb55 	bl	80017a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a48      	ldr	r2, [pc, #288]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 8002102:	635a      	str	r2, [r3, #52]	; 0x34
 8002104:	4a47      	ldr	r2, [pc, #284]	; (8002224 <HAL_UART_MspInit+0x1f4>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800210a:	e081      	b.n	8002210 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_UART_MspInit+0x1fc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d14a      	bne.n	80021ac <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	4b40      	ldr	r3, [pc, #256]	; (800221c <HAL_UART_MspInit+0x1ec>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a3f      	ldr	r2, [pc, #252]	; (800221c <HAL_UART_MspInit+0x1ec>)
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b3d      	ldr	r3, [pc, #244]	; (800221c <HAL_UART_MspInit+0x1ec>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	4b39      	ldr	r3, [pc, #228]	; (800221c <HAL_UART_MspInit+0x1ec>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a38      	ldr	r2, [pc, #224]	; (800221c <HAL_UART_MspInit+0x1ec>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b36      	ldr	r3, [pc, #216]	; (800221c <HAL_UART_MspInit+0x1ec>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b32      	ldr	r3, [pc, #200]	; (800221c <HAL_UART_MspInit+0x1ec>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a31      	ldr	r2, [pc, #196]	; (800221c <HAL_UART_MspInit+0x1ec>)
 8002158:	f043 0308 	orr.w	r3, r3, #8
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b2f      	ldr	r3, [pc, #188]	; (800221c <HAL_UART_MspInit+0x1ec>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800216a:	2301      	movs	r3, #1
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800217a:	2307      	movs	r3, #7
 800217c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	4619      	mov	r1, r3
 8002184:	482a      	ldr	r0, [pc, #168]	; (8002230 <HAL_UART_MspInit+0x200>)
 8002186:	f001 fabd 	bl	8003704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800218a:	2370      	movs	r3, #112	; 0x70
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002196:	2303      	movs	r3, #3
 8002198:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800219a:	2307      	movs	r3, #7
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800219e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a2:	4619      	mov	r1, r3
 80021a4:	4823      	ldr	r0, [pc, #140]	; (8002234 <HAL_UART_MspInit+0x204>)
 80021a6:	f001 faad 	bl	8003704 <HAL_GPIO_Init>
}
 80021aa:	e031      	b.n	8002210 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART3)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a21      	ldr	r2, [pc, #132]	; (8002238 <HAL_UART_MspInit+0x208>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12c      	bne.n	8002210 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_UART_MspInit+0x1ec>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a17      	ldr	r2, [pc, #92]	; (800221c <HAL_UART_MspInit+0x1ec>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_UART_MspInit+0x1ec>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_UART_MspInit+0x1ec>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a10      	ldr	r2, [pc, #64]	; (800221c <HAL_UART_MspInit+0x1ec>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_UART_MspInit+0x1ec>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002200:	2307      	movs	r3, #7
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	480a      	ldr	r0, [pc, #40]	; (8002234 <HAL_UART_MspInit+0x204>)
 800220c:	f001 fa7a 	bl	8003704 <HAL_GPIO_Init>
}
 8002210:	bf00      	nop
 8002212:	3738      	adds	r7, #56	; 0x38
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40007800 	.word	0x40007800
 800221c:	40023800 	.word	0x40023800
 8002220:	40021000 	.word	0x40021000
 8002224:	200005d4 	.word	0x200005d4
 8002228:	40026058 	.word	0x40026058
 800222c:	40004400 	.word	0x40004400
 8002230:	40020000 	.word	0x40020000
 8002234:	40020c00 	.word	0x40020c00
 8002238:	40004800 	.word	0x40004800

0800223c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002242:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002246:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800224a:	2204      	movs	r2, #4
 800224c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002250:	2202      	movs	r2, #2
 8002252:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800225c:	2202      	movs	r2, #2
 800225e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002262:	2201      	movs	r2, #1
 8002264:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800226e:	2200      	movs	r2, #0
 8002270:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002274:	2201      	movs	r2, #1
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002280:	f004 f8e2 	bl	8006448 <HAL_PCD_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800228a:	f7ff fa8d 	bl	80017a8 <Error_Handler>
  }

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000674 	.word	0x20000674

08002298 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b8:	d13f      	bne.n	800233a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <HAL_PCD_MspInit+0xac>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a20      	ldr	r2, [pc, #128]	; (8002344 <HAL_PCD_MspInit+0xac>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <HAL_PCD_MspInit+0xac>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80022d6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022e8:	230a      	movs	r3, #10
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	4619      	mov	r1, r3
 80022f2:	4815      	ldr	r0, [pc, #84]	; (8002348 <HAL_PCD_MspInit+0xb0>)
 80022f4:	f001 fa06 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80022f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	480e      	ldr	r0, [pc, #56]	; (8002348 <HAL_PCD_MspInit+0xb0>)
 800230e:	f001 f9f9 	bl	8003704 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <HAL_PCD_MspInit+0xac>)
 8002314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <HAL_PCD_MspInit+0xac>)
 8002318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231c:	6353      	str	r3, [r2, #52]	; 0x34
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_PCD_MspInit+0xac>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_PCD_MspInit+0xac>)
 8002328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_PCD_MspInit+0xac>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800233a:	bf00      	nop
 800233c:	3728      	adds	r7, #40	; 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40020000 	.word	0x40020000

0800234c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800234c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002384 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002350:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002352:	e003      	b.n	800235c <LoopCopyDataInit>

08002354 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002356:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002358:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800235a:	3104      	adds	r1, #4

0800235c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800235c:	480b      	ldr	r0, [pc, #44]	; (800238c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002360:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002362:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002364:	d3f6      	bcc.n	8002354 <CopyDataInit>
  ldr  r2, =_sbss
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002368:	e002      	b.n	8002370 <LoopFillZerobss>

0800236a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800236a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800236c:	f842 3b04 	str.w	r3, [r2], #4

08002370 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002372:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002374:	d3f9      	bcc.n	800236a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002376:	f7ff fb25 	bl	80019c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237a:	f00a f983 	bl	800c684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237e:	f7ff f969 	bl	8001654 <main>
  bx  lr    
 8002382:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002384:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002388:	0800ee20 	.word	0x0800ee20
  ldr  r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002390:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 8002394:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 8002398:	20000c2c 	.word	0x20000c2c

0800239c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800239c:	e7fe      	b.n	800239c <ADC_IRQHandler>
	...

080023a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <HAL_Init+0x40>)
 80023aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <HAL_Init+0x40>)
 80023b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_Init+0x40>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f000 f94d 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f000 f808 	bl	80023e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d4:	f7ff f9f0 	bl	80017b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023c00 	.word	0x40023c00

080023e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_InitTick+0x54>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_InitTick+0x58>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f965 	bl	80026d2 <HAL_SYSTICK_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e00e      	b.n	8002430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d80a      	bhi.n	800242e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002418:	2200      	movs	r2, #0
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f000 f92d 	bl	800267e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <HAL_InitTick+0x5c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000000 	.word	0x20000000
 800243c:	20000008 	.word	0x20000008
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000008 	.word	0x20000008
 8002468:	20000a7c 	.word	0x20000a7c

0800246c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000a7c 	.word	0x20000a7c

08002484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff ffee 	bl	800246c <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d005      	beq.n	80024aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_Delay+0x40>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024aa:	bf00      	nop
 80024ac:	f7ff ffde 	bl	800246c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8f7      	bhi.n	80024ac <HAL_Delay+0x28>
  {
  }
}
 80024bc:	bf00      	nop
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000008 	.word	0x20000008

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	; (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002634:	d301      	bcc.n	800263a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002636:	2301      	movs	r3, #1
 8002638:	e00f      	b.n	800265a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <SysTick_Config+0x40>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002642:	210f      	movs	r1, #15
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f7ff ff8e 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <SysTick_Config+0x40>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <SysTick_Config+0x40>)
 8002654:	2207      	movs	r2, #7
 8002656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e000e010 	.word	0xe000e010

08002668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff29 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002690:	f7ff ff3e 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	6978      	ldr	r0, [r7, #20]
 800269c:	f7ff ff8e 	bl	80025bc <NVIC_EncodePriority>
 80026a0:	4602      	mov	r2, r0
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff5d 	bl	8002568 <__NVIC_SetPriority>
}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff31 	bl	800252c <__NVIC_EnableIRQ>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ffa2 	bl	8002624 <SysTick_Config>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026f8:	f7ff feb8 	bl	800246c <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e099      	b.n	800283c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002728:	e00f      	b.n	800274a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272a:	f7ff fe9f 	bl	800246c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b05      	cmp	r3, #5
 8002736:	d908      	bls.n	800274a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2203      	movs	r2, #3
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e078      	b.n	800283c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e8      	bne.n	800272a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_DMA_Init+0x158>)
 8002764:	4013      	ands	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4313      	orrs	r3, r2
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d117      	bne.n	800280e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fa9f 	bl	8002d34 <DMA_CheckFifoParam>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800280a:	2301      	movs	r3, #1
 800280c:	e016      	b.n	800283c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa56 	bl	8002cc8 <DMA_CalcBaseAndBitshift>
 800281c:	4603      	mov	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	223f      	movs	r2, #63	; 0x3f
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f010803f 	.word	0xf010803f

08002848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_DMA_Start_IT+0x26>
 800286a:	2302      	movs	r3, #2
 800286c:	e040      	b.n	80028f0 <HAL_DMA_Start_IT+0xa8>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d12f      	bne.n	80028e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f9e8 	bl	8002c6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	223f      	movs	r2, #63	; 0x3f
 80028a2:	409a      	lsls	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0216 	orr.w	r2, r2, #22
 80028b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0208 	orr.w	r2, r2, #8
 80028ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e005      	b.n	80028ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d004      	beq.n	8002916 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e00c      	b.n	8002930 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2205      	movs	r2, #5
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0201 	bic.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002948:	4b92      	ldr	r3, [pc, #584]	; (8002b94 <HAL_DMA_IRQHandler+0x258>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a92      	ldr	r2, [pc, #584]	; (8002b98 <HAL_DMA_IRQHandler+0x25c>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0a9b      	lsrs	r3, r3, #10
 8002954:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2208      	movs	r2, #8
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01a      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0204 	bic.w	r2, r2, #4
 800298e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	2208      	movs	r2, #8
 8002996:	409a      	lsls	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	2201      	movs	r2, #1
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	2201      	movs	r2, #1
 80029cc:	409a      	lsls	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	f043 0202 	orr.w	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	2204      	movs	r2, #4
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	2204      	movs	r2, #4
 8002a02:	409a      	lsls	r2, r3
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f043 0204 	orr.w	r2, r3, #4
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	2210      	movs	r2, #16
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d043      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d03c      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	2210      	movs	r2, #16
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d018      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d108      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d024      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
 8002a6a:	e01f      	b.n	8002aac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01b      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
 8002a7c:	e016      	b.n	8002aac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0208 	bic.w	r2, r2, #8
 8002a9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 808e 	beq.w	8002bda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8086 	beq.w	8002bda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d136      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0216 	bic.w	r2, r2, #22
 8002af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <HAL_DMA_IRQHandler+0x1da>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0208 	bic.w	r2, r2, #8
 8002b24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	223f      	movs	r2, #63	; 0x3f
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d07d      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
        }
        return;
 8002b52:	e078      	b.n	8002c46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01c      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d108      	bne.n	8002b82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d030      	beq.n	8002bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
 8002b80:	e02b      	b.n	8002bda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d027      	beq.n	8002bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
 8002b92:	e022      	b.n	8002bda <HAL_DMA_IRQHandler+0x29e>
 8002b94:	20000000 	.word	0x20000000
 8002b98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0210 	bic.w	r2, r2, #16
 8002bb8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d032      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d022      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d307      	bcc.n	8002c22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f2      	bne.n	8002c06 <HAL_DMA_IRQHandler+0x2ca>
 8002c20:	e000      	b.n	8002c24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
 8002c44:	e000      	b.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c46:	bf00      	nop
    }
  }
}
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop

08002c50 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5e:	b2db      	uxtb	r3, r3
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d108      	bne.n	8002cac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002caa:	e007      	b.n	8002cbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	60da      	str	r2, [r3, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	3b10      	subs	r3, #16
 8002cd8:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <DMA_CalcBaseAndBitshift+0x64>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ce2:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <DMA_CalcBaseAndBitshift+0x68>)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d909      	bls.n	8002d0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	1d1a      	adds	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	659a      	str	r2, [r3, #88]	; 0x58
 8002d08:	e007      	b.n	8002d1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	aaaaaaab 	.word	0xaaaaaaab
 8002d30:	0800eb2c 	.word	0x0800eb2c

08002d34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d11f      	bne.n	8002d8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d855      	bhi.n	8002e00 <DMA_CheckFifoParam+0xcc>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <DMA_CheckFifoParam+0x28>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d7f 	.word	0x08002d7f
 8002d64:	08002d6d 	.word	0x08002d6d
 8002d68:	08002e01 	.word	0x08002e01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d045      	beq.n	8002e04 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d7c:	e042      	b.n	8002e04 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d86:	d13f      	bne.n	8002e08 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8c:	e03c      	b.n	8002e08 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d96:	d121      	bne.n	8002ddc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d836      	bhi.n	8002e0c <DMA_CheckFifoParam+0xd8>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <DMA_CheckFifoParam+0x70>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002db5 	.word	0x08002db5
 8002da8:	08002dbb 	.word	0x08002dbb
 8002dac:	08002db5 	.word	0x08002db5
 8002db0:	08002dcd 	.word	0x08002dcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
      break;
 8002db8:	e02f      	b.n	8002e1a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d024      	beq.n	8002e10 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dca:	e021      	b.n	8002e10 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dd4:	d11e      	bne.n	8002e14 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dda:	e01b      	b.n	8002e14 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d902      	bls.n	8002de8 <DMA_CheckFifoParam+0xb4>
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d003      	beq.n	8002dee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002de6:	e018      	b.n	8002e1a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      break;
 8002dec:	e015      	b.n	8002e1a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00e      	beq.n	8002e18 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfe:	e00b      	b.n	8002e18 <DMA_CheckFifoParam+0xe4>
      break;
 8002e00:	bf00      	nop
 8002e02:	e00a      	b.n	8002e1a <DMA_CheckFifoParam+0xe6>
      break;
 8002e04:	bf00      	nop
 8002e06:	e008      	b.n	8002e1a <DMA_CheckFifoParam+0xe6>
      break;
 8002e08:	bf00      	nop
 8002e0a:	e006      	b.n	8002e1a <DMA_CheckFifoParam+0xe6>
      break;
 8002e0c:	bf00      	nop
 8002e0e:	e004      	b.n	8002e1a <DMA_CheckFifoParam+0xe6>
      break;
 8002e10:	bf00      	nop
 8002e12:	e002      	b.n	8002e1a <DMA_CheckFifoParam+0xe6>
      break;   
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <DMA_CheckFifoParam+0xe6>
      break;
 8002e18:	bf00      	nop
    }
  } 
  
  return status; 
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002e38:	4baa      	ldr	r3, [pc, #680]	; (80030e4 <HAL_ETH_Init+0x2bc>)
 8002e3a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002e40:	2300      	movs	r3, #0
 8002e42:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e185      	b.n	800315a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe f9de 	bl	8001224 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	4b9e      	ldr	r3, [pc, #632]	; (80030e8 <HAL_ETH_Init+0x2c0>)
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	4a9d      	ldr	r2, [pc, #628]	; (80030e8 <HAL_ETH_Init+0x2c0>)
 8002e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e76:	6453      	str	r3, [r2, #68]	; 0x44
 8002e78:	4b9b      	ldr	r3, [pc, #620]	; (80030e8 <HAL_ETH_Init+0x2c0>)
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e84:	4b99      	ldr	r3, [pc, #612]	; (80030ec <HAL_ETH_Init+0x2c4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a98      	ldr	r2, [pc, #608]	; (80030ec <HAL_ETH_Init+0x2c4>)
 8002e8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e8e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e90:	4b96      	ldr	r3, [pc, #600]	; (80030ec <HAL_ETH_Init+0x2c4>)
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4994      	ldr	r1, [pc, #592]	; (80030ec <HAL_ETH_Init+0x2c4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0201 	orr.w	r2, r2, #1
 8002eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb6:	f7ff fad9 	bl	800246c <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002ebc:	e011      	b.n	8002ee2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002ebe:	f7ff fad5 	bl	800246c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ecc:	d909      	bls.n	8002ee2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e13b      	b.n	800315a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e4      	bne.n	8002ebe <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f023 031c 	bic.w	r3, r3, #28
 8002f02:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002f04:	f003 ffec 	bl	8006ee0 <HAL_RCC_GetHCLKFreq>
 8002f08:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4a78      	ldr	r2, [pc, #480]	; (80030f0 <HAL_ETH_Init+0x2c8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d908      	bls.n	8002f24 <HAL_ETH_Init+0xfc>
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4a77      	ldr	r2, [pc, #476]	; (80030f4 <HAL_ETH_Init+0x2cc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d804      	bhi.n	8002f24 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f043 0308 	orr.w	r3, r3, #8
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	e027      	b.n	8002f74 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	4a73      	ldr	r2, [pc, #460]	; (80030f4 <HAL_ETH_Init+0x2cc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d908      	bls.n	8002f3e <HAL_ETH_Init+0x116>
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	4a72      	ldr	r2, [pc, #456]	; (80030f8 <HAL_ETH_Init+0x2d0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d804      	bhi.n	8002f3e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f043 030c 	orr.w	r3, r3, #12
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	e01a      	b.n	8002f74 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	4a6d      	ldr	r2, [pc, #436]	; (80030f8 <HAL_ETH_Init+0x2d0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d903      	bls.n	8002f4e <HAL_ETH_Init+0x126>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4a6c      	ldr	r2, [pc, #432]	; (80030fc <HAL_ETH_Init+0x2d4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d911      	bls.n	8002f72 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	4a6a      	ldr	r2, [pc, #424]	; (80030fc <HAL_ETH_Init+0x2d4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d908      	bls.n	8002f68 <HAL_ETH_Init+0x140>
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	4a69      	ldr	r2, [pc, #420]	; (8003100 <HAL_ETH_Init+0x2d8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d804      	bhi.n	8002f68 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f043 0304 	orr.w	r3, r3, #4
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	e005      	b.n	8002f74 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f043 0310 	orr.w	r3, r3, #16
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	e000      	b.n	8002f74 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002f72:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002f7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f80:	2100      	movs	r1, #0
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f956 	bl	8003234 <HAL_ETH_WritePHYRegister>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002f92:	6939      	ldr	r1, [r7, #16]
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f9b3 	bl	8003300 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0d9      	b.n	800315a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002fa6:	20ff      	movs	r0, #255	; 0xff
 8002fa8:	f7ff fa6c 	bl	8002484 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a7 	beq.w	8003104 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fb6:	f7ff fa59 	bl	800246c <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f8cd 	bl	8003164 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002fca:	f7ff fa4f 	bl	800246c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d90f      	bls.n	8002ffc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002fe0:	6939      	ldr	r1, [r7, #16]
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f98c 	bl	8003300 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e0ae      	b.n	800315a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0da      	beq.n	8002fbc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003006:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800300a:	2100      	movs	r1, #0
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f911 	bl	8003234 <HAL_ETH_WritePHYRegister>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800301c:	6939      	ldr	r1, [r7, #16]
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f96e 	bl	8003300 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800302c:	2301      	movs	r3, #1
 800302e:	e094      	b.n	800315a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003030:	f7ff fa1c 	bl	800246c <HAL_GetTick>
 8003034:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003036:	f107 030c 	add.w	r3, r7, #12
 800303a:	461a      	mov	r2, r3
 800303c:	2101      	movs	r1, #1
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f890 	bl	8003164 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003044:	f7ff fa12 	bl	800246c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d90f      	bls.n	8003076 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800305a:	6939      	ldr	r1, [r7, #16]
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f94f 	bl	8003300 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e071      	b.n	800315a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0da      	beq.n	8003036 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003080:	f107 030c 	add.w	r3, r7, #12
 8003084:	461a      	mov	r2, r3
 8003086:	211f      	movs	r1, #31
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f86b 	bl	8003164 <HAL_ETH_ReadPHYRegister>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003098:	6939      	ldr	r1, [r7, #16]
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f930 	bl	8003300 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80030a8:	2301      	movs	r3, #1
 80030aa:	e056      	b.n	800315a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d004      	beq.n	80030c0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	e002      	b.n	80030c6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	e037      	b.n	8003148 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e032      	b.n	8003148 <HAL_ETH_Init+0x320>
 80030e2:	bf00      	nop
 80030e4:	03938700 	.word	0x03938700
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40013800 	.word	0x40013800
 80030f0:	01312cff 	.word	0x01312cff
 80030f4:	02160ebf 	.word	0x02160ebf
 80030f8:	039386ff 	.word	0x039386ff
 80030fc:	05f5e0ff 	.word	0x05f5e0ff
 8003100:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	08db      	lsrs	r3, r3, #3
 800310a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003114:	4313      	orrs	r3, r2
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	2100      	movs	r1, #0
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f889 	bl	8003234 <HAL_ETH_WritePHYRegister>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800312c:	6939      	ldr	r1, [r7, #16]
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f8e6 	bl	8003300 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e00c      	b.n	800315a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003140:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003144:	f7ff f99e 	bl	8002484 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003148:	6939      	ldr	r1, [r7, #16]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8d8 	bl	8003300 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop

08003164 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	460b      	mov	r3, r1
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b82      	cmp	r3, #130	; 0x82
 8003184:	d101      	bne.n	800318a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
 8003188:	e050      	b.n	800322c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2282      	movs	r2, #130	; 0x82
 800318e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 031c 	and.w	r3, r3, #28
 80031a0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8a1b      	ldrh	r3, [r3, #16]
 80031a6:	02db      	lsls	r3, r3, #11
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80031b0:	897b      	ldrh	r3, [r7, #10]
 80031b2:	019b      	lsls	r3, r3, #6
 80031b4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f023 0302 	bic.w	r3, r3, #2
 80031c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80031d6:	f7ff f949 	bl	800246c <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031dc:	e015      	b.n	800320a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80031de:	f7ff f945 	bl	800246c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d309      	bcc.n	8003202 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e014      	b.n	800322c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e4      	bne.n	80031de <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	460b      	mov	r3, r1
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b42      	cmp	r3, #66	; 0x42
 8003254:	d101      	bne.n	800325a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003256:	2302      	movs	r3, #2
 8003258:	e04e      	b.n	80032f8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2242      	movs	r2, #66	; 0x42
 800325e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f003 031c 	and.w	r3, r3, #28
 8003270:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8a1b      	ldrh	r3, [r3, #16]
 8003276:	02db      	lsls	r3, r3, #11
 8003278:	b29b      	uxth	r3, r3
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003280:	897b      	ldrh	r3, [r7, #10]
 8003282:	019b      	lsls	r3, r3, #6
 8003284:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f043 0302 	orr.w	r3, r3, #2
 8003294:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80032b0:	f7ff f8dc 	bl	800246c <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80032b6:	e015      	b.n	80032e4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80032b8:	f7ff f8d8 	bl	800246c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c6:	d309      	bcc.n	80032dc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e00d      	b.n	80032f8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e4      	bne.n	80032b8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b0b0      	sub	sp, #192	; 0xc0
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800331c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003324:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003326:	2300      	movs	r3, #0
 8003328:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800332a:	2300      	movs	r3, #0
 800332c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800332e:	2300      	movs	r3, #0
 8003330:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003332:	2300      	movs	r3, #0
 8003334:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003336:	2300      	movs	r3, #0
 8003338:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800333a:	2300      	movs	r3, #0
 800333c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800334a:	663b      	str	r3, [r7, #96]	; 0x60
 800334c:	e001      	b.n	8003352 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800334e:	2300      	movs	r3, #0
 8003350:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003356:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800335c:	2300      	movs	r3, #0
 800335e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003360:	2300      	movs	r3, #0
 8003362:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003364:	2300      	movs	r3, #0
 8003366:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800336c:	2340      	movs	r3, #64	; 0x40
 800336e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003376:	2300      	movs	r3, #0
 8003378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003382:	2300      	movs	r3, #0
 8003384:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800338e:	2300      	movs	r3, #0
 8003390:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003394:	2300      	movs	r3, #0
 8003396:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800339a:	2300      	movs	r3, #0
 800339c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80033d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033d8:	4bac      	ldr	r3, [pc, #688]	; (800368c <ETH_MACDMAConfig+0x38c>)
 80033da:	4013      	ands	r3, r2
 80033dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80033e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80033e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80033e4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80033e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80033e8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80033ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80033ec:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80033f2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80033f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80033f6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80033f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80033fa:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003400:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003404:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003408:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800340a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800340c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800340e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003410:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003414:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003416:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003428:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003434:	2001      	movs	r0, #1
 8003436:	f7ff f825 	bl	8002484 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003442:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003444:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003448:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800344a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800344c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800344e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003452:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003458:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800345a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800345e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003464:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003468:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003470:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003472:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800347e:	2001      	movs	r0, #1
 8003480:	f7ff f800 	bl	8002484 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800348c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003496:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80034a0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80034ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034b0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80034b4:	4013      	ands	r3, r2
 80034b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80034ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034be:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80034c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80034c4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80034c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80034ca:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80034cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80034d0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80034d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80034d6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80034d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80034dc:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80034de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034f0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80034fc:	2001      	movs	r0, #1
 80034fe:	f7fe ffc1 	bl	8002484 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800350a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800350c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003510:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003526:	2001      	movs	r0, #1
 8003528:	f7fe ffac 	bl	8002484 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003534:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800353a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800353e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003544:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003548:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003552:	2300      	movs	r3, #0
 8003554:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800355a:	2304      	movs	r3, #4
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800355e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003568:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800356a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003574:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800357a:	2300      	movs	r3, #0
 800357c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800357e:	2300      	movs	r3, #0
 8003580:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358a:	3318      	adds	r3, #24
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003592:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003596:	4b3e      	ldr	r3, [pc, #248]	; (8003690 <ETH_MACDMAConfig+0x390>)
 8003598:	4013      	ands	r3, r2
 800359a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800359e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80035a0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80035a2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80035a4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80035a6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80035a8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80035aa:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80035ac:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80035ae:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80035b0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80035b2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80035b4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80035b6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80035ba:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80035be:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80035c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d2:	3318      	adds	r3, #24
 80035d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035d8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e2:	3318      	adds	r3, #24
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80035ea:	2001      	movs	r0, #1
 80035ec:	f7fe ff4a 	bl	8002484 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f8:	3318      	adds	r3, #24
 80035fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035fe:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003604:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003608:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800360c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800360e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003610:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003614:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003616:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800361a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003628:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003638:	2001      	movs	r0, #1
 800363a:	f7fe ff23 	bl	8002484 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003646:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800364a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d10f      	bne.n	8003674 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800365c:	331c      	adds	r3, #28
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003670:	331c      	adds	r3, #28
 8003672:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	461a      	mov	r2, r3
 800367a:	2100      	movs	r1, #0
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f809 	bl	8003694 <ETH_MACAddressConfig>
}
 8003682:	bf00      	nop
 8003684:	37c0      	adds	r7, #192	; 0xc0
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	ff20810f 	.word	0xff20810f
 8003690:	f8de3f23 	.word	0xf8de3f23

08003694 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3305      	adds	r3, #5
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	3204      	adds	r2, #4
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <ETH_MACAddressConfig+0x68>)
 80036b6:	4413      	add	r3, r2
 80036b8:	461a      	mov	r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3303      	adds	r3, #3
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	061a      	lsls	r2, r3, #24
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3302      	adds	r3, #2
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3301      	adds	r3, #1
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	4313      	orrs	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	7812      	ldrb	r2, [r2, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <ETH_MACAddressConfig+0x6c>)
 80036e6:	4413      	add	r3, r2
 80036e8:	461a      	mov	r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	6013      	str	r3, [r2, #0]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40028040 	.word	0x40028040
 8003700:	40028044 	.word	0x40028044

08003704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	; 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e177      	b.n	8003a10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003720:	2201      	movs	r2, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	429a      	cmp	r2, r3
 800373a:	f040 8166 	bne.w	8003a0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d00b      	beq.n	800375e <HAL_GPIO_Init+0x5a>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d007      	beq.n	800375e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003752:	2b11      	cmp	r3, #17
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b12      	cmp	r3, #18
 800375c:	d130      	bne.n	80037c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	2203      	movs	r2, #3
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003794:	2201      	movs	r2, #1
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 0201 	and.w	r2, r3, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	2203      	movs	r2, #3
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0xfc>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b12      	cmp	r3, #18
 80037fe:	d123      	bne.n	8003848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	08da      	lsrs	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3208      	adds	r2, #8
 8003808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	220f      	movs	r2, #15
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	08da      	lsrs	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3208      	adds	r2, #8
 8003842:	69b9      	ldr	r1, [r7, #24]
 8003844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	2203      	movs	r2, #3
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0203 	and.w	r2, r3, #3
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80c0 	beq.w	8003a0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <HAL_GPIO_Init+0x320>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	4a64      	ldr	r2, [pc, #400]	; (8003a24 <HAL_GPIO_Init+0x320>)
 8003894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003898:	6453      	str	r3, [r2, #68]	; 0x44
 800389a:	4b62      	ldr	r3, [pc, #392]	; (8003a24 <HAL_GPIO_Init+0x320>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a6:	4a60      	ldr	r2, [pc, #384]	; (8003a28 <HAL_GPIO_Init+0x324>)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	3302      	adds	r3, #2
 80038ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	220f      	movs	r2, #15
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a57      	ldr	r2, [pc, #348]	; (8003a2c <HAL_GPIO_Init+0x328>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d037      	beq.n	8003942 <HAL_GPIO_Init+0x23e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a56      	ldr	r2, [pc, #344]	; (8003a30 <HAL_GPIO_Init+0x32c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d031      	beq.n	800393e <HAL_GPIO_Init+0x23a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a55      	ldr	r2, [pc, #340]	; (8003a34 <HAL_GPIO_Init+0x330>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d02b      	beq.n	800393a <HAL_GPIO_Init+0x236>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a54      	ldr	r2, [pc, #336]	; (8003a38 <HAL_GPIO_Init+0x334>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d025      	beq.n	8003936 <HAL_GPIO_Init+0x232>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a53      	ldr	r2, [pc, #332]	; (8003a3c <HAL_GPIO_Init+0x338>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01f      	beq.n	8003932 <HAL_GPIO_Init+0x22e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a52      	ldr	r2, [pc, #328]	; (8003a40 <HAL_GPIO_Init+0x33c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d019      	beq.n	800392e <HAL_GPIO_Init+0x22a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a51      	ldr	r2, [pc, #324]	; (8003a44 <HAL_GPIO_Init+0x340>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_GPIO_Init+0x226>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a50      	ldr	r2, [pc, #320]	; (8003a48 <HAL_GPIO_Init+0x344>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00d      	beq.n	8003926 <HAL_GPIO_Init+0x222>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a4f      	ldr	r2, [pc, #316]	; (8003a4c <HAL_GPIO_Init+0x348>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <HAL_GPIO_Init+0x21e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a4e      	ldr	r2, [pc, #312]	; (8003a50 <HAL_GPIO_Init+0x34c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <HAL_GPIO_Init+0x21a>
 800391a:	2309      	movs	r3, #9
 800391c:	e012      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800391e:	230a      	movs	r3, #10
 8003920:	e010      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003922:	2308      	movs	r3, #8
 8003924:	e00e      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003926:	2307      	movs	r3, #7
 8003928:	e00c      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800392a:	2306      	movs	r3, #6
 800392c:	e00a      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800392e:	2305      	movs	r3, #5
 8003930:	e008      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003932:	2304      	movs	r3, #4
 8003934:	e006      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003936:	2303      	movs	r3, #3
 8003938:	e004      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800393a:	2302      	movs	r3, #2
 800393c:	e002      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003942:	2300      	movs	r3, #0
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	f002 0203 	and.w	r2, r2, #3
 800394a:	0092      	lsls	r2, r2, #2
 800394c:	4093      	lsls	r3, r2
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003954:	4934      	ldr	r1, [pc, #208]	; (8003a28 <HAL_GPIO_Init+0x324>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003962:	4b3c      	ldr	r3, [pc, #240]	; (8003a54 <HAL_GPIO_Init+0x350>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003986:	4a33      	ldr	r2, [pc, #204]	; (8003a54 <HAL_GPIO_Init+0x350>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800398c:	4b31      	ldr	r3, [pc, #196]	; (8003a54 <HAL_GPIO_Init+0x350>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b0:	4a28      	ldr	r2, [pc, #160]	; (8003a54 <HAL_GPIO_Init+0x350>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039b6:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <HAL_GPIO_Init+0x350>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039da:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <HAL_GPIO_Init+0x350>)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039e0:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <HAL_GPIO_Init+0x350>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a04:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <HAL_GPIO_Init+0x350>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b0f      	cmp	r3, #15
 8003a14:	f67f ae84 	bls.w	8003720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3724      	adds	r7, #36	; 0x24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	40020000 	.word	0x40020000
 8003a30:	40020400 	.word	0x40020400
 8003a34:	40020800 	.word	0x40020800
 8003a38:	40020c00 	.word	0x40020c00
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40021400 	.word	0x40021400
 8003a44:	40021800 	.word	0x40021800
 8003a48:	40021c00 	.word	0x40021c00
 8003a4c:	40022000 	.word	0x40022000
 8003a50:	40022400 	.word	0x40022400
 8003a54:	40013c00 	.word	0x40013c00

08003a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	887b      	ldrh	r3, [r7, #2]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
 8003a74:	e001      	b.n	8003a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	807b      	strh	r3, [r7, #2]
 8003a94:	4613      	mov	r3, r2
 8003a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a98:	787b      	ldrb	r3, [r7, #1]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a9e:	887a      	ldrh	r2, [r7, #2]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003aa4:	e003      	b.n	8003aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aa6:	887b      	ldrh	r3, [r7, #2]
 8003aa8:	041a      	lsls	r2, r3, #16
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	619a      	str	r2, [r3, #24]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e11f      	b.n	8003d0e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fd fd6e 	bl	80015c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2224      	movs	r2, #36	; 0x24
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b20:	f003 f9ea 	bl	8006ef8 <HAL_RCC_GetPCLK1Freq>
 8003b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4a7b      	ldr	r2, [pc, #492]	; (8003d18 <HAL_I2C_Init+0x25c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d807      	bhi.n	8003b40 <HAL_I2C_Init+0x84>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a7a      	ldr	r2, [pc, #488]	; (8003d1c <HAL_I2C_Init+0x260>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	bf94      	ite	ls
 8003b38:	2301      	movls	r3, #1
 8003b3a:	2300      	movhi	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e006      	b.n	8003b4e <HAL_I2C_Init+0x92>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a77      	ldr	r2, [pc, #476]	; (8003d20 <HAL_I2C_Init+0x264>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bf94      	ite	ls
 8003b48:	2301      	movls	r3, #1
 8003b4a:	2300      	movhi	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0db      	b.n	8003d0e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a72      	ldr	r2, [pc, #456]	; (8003d24 <HAL_I2C_Init+0x268>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0c9b      	lsrs	r3, r3, #18
 8003b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a64      	ldr	r2, [pc, #400]	; (8003d18 <HAL_I2C_Init+0x25c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d802      	bhi.n	8003b90 <HAL_I2C_Init+0xd4>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	e009      	b.n	8003ba4 <HAL_I2C_Init+0xe8>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	4a63      	ldr	r2, [pc, #396]	; (8003d28 <HAL_I2C_Init+0x26c>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4956      	ldr	r1, [pc, #344]	; (8003d18 <HAL_I2C_Init+0x25c>)
 8003bc0:	428b      	cmp	r3, r1
 8003bc2:	d80d      	bhi.n	8003be0 <HAL_I2C_Init+0x124>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1e59      	subs	r1, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	bf38      	it	cc
 8003bdc:	2304      	movcc	r3, #4
 8003bde:	e04f      	b.n	8003c80 <HAL_I2C_Init+0x1c4>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d111      	bne.n	8003c0c <HAL_I2C_Init+0x150>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1e58      	subs	r0, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	440b      	add	r3, r1
 8003bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	e012      	b.n	8003c32 <HAL_I2C_Init+0x176>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1e58      	subs	r0, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	0099      	lsls	r1, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c22:	3301      	adds	r3, #1
 8003c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Init+0x17e>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e022      	b.n	8003c80 <HAL_I2C_Init+0x1c4>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10e      	bne.n	8003c60 <HAL_I2C_Init+0x1a4>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1e58      	subs	r0, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6859      	ldr	r1, [r3, #4]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	440b      	add	r3, r1
 8003c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c54:	3301      	adds	r3, #1
 8003c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5e:	e00f      	b.n	8003c80 <HAL_I2C_Init+0x1c4>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1e58      	subs	r0, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6859      	ldr	r1, [r3, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	0099      	lsls	r1, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c76:	3301      	adds	r3, #1
 8003c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	6809      	ldr	r1, [r1, #0]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6911      	ldr	r1, [r2, #16]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68d2      	ldr	r2, [r2, #12]
 8003cba:	4311      	orrs	r1, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	000186a0 	.word	0x000186a0
 8003d1c:	001e847f 	.word	0x001e847f
 8003d20:	003d08ff 	.word	0x003d08ff
 8003d24:	431bde83 	.word	0x431bde83
 8003d28:	10624dd3 	.word	0x10624dd3

08003d2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	461a      	mov	r2, r3
 8003d38:	460b      	mov	r3, r1
 8003d3a:	817b      	strh	r3, [r7, #10]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d40:	f7fe fb94 	bl	800246c <HAL_GetTick>
 8003d44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	f040 80e0 	bne.w	8003f14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2319      	movs	r3, #25
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4970      	ldr	r1, [pc, #448]	; (8003f20 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f002 f8ff 	bl	8005f62 <I2C_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e0d3      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_I2C_Master_Transmit+0x50>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e0cc      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x1ea>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d007      	beq.n	8003da2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2221      	movs	r2, #33	; 0x21
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	893a      	ldrh	r2, [r7, #8]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a50      	ldr	r2, [pc, #320]	; (8003f24 <HAL_I2C_Master_Transmit+0x1f8>)
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003de4:	8979      	ldrh	r1, [r7, #10]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	6a3a      	ldr	r2, [r7, #32]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f001 feec 	bl	8005bc8 <I2C_MasterRequestWrite>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e08d      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e10:	e066      	b.n	8003ee0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	6a39      	ldr	r1, [r7, #32]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f002 f979 	bl	800610e <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d107      	bne.n	8003e3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e06b      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	781a      	ldrb	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d11b      	bne.n	8003eb4 <HAL_I2C_Master_Transmit+0x188>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d017      	beq.n	8003eb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	6a39      	ldr	r1, [r7, #32]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f002 f969 	bl	8006190 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00d      	beq.n	8003ee0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d107      	bne.n	8003edc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e01a      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d194      	bne.n	8003e12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	00100002 	.word	0x00100002
 8003f24:	ffff0000 	.word	0xffff0000

08003f28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	; 0x30
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	461a      	mov	r2, r3
 8003f34:	460b      	mov	r3, r1
 8003f36:	817b      	strh	r3, [r7, #10]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f3c:	f7fe fa96 	bl	800246c <HAL_GetTick>
 8003f40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	f040 820b 	bne.w	8004366 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2319      	movs	r3, #25
 8003f56:	2201      	movs	r2, #1
 8003f58:	497c      	ldr	r1, [pc, #496]	; (800414c <HAL_I2C_Master_Receive+0x224>)
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f002 f801 	bl	8005f62 <I2C_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
 8003f68:	e1fe      	b.n	8004368 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_I2C_Master_Receive+0x50>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e1f7      	b.n	8004368 <HAL_I2C_Master_Receive+0x440>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d007      	beq.n	8003f9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2222      	movs	r2, #34	; 0x22
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2210      	movs	r2, #16
 8003fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	893a      	ldrh	r2, [r7, #8]
 8003fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a5c      	ldr	r2, [pc, #368]	; (8004150 <HAL_I2C_Master_Receive+0x228>)
 8003fde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fe0:	8979      	ldrh	r1, [r7, #10]
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f001 fe70 	bl	8005ccc <I2C_MasterRequestRead>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e1b8      	b.n	8004368 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d113      	bne.n	8004026 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffe:	2300      	movs	r3, #0
 8004000:	623b      	str	r3, [r7, #32]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	623b      	str	r3, [r7, #32]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	623b      	str	r3, [r7, #32]
 8004012:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	e18c      	b.n	8004340 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	2b01      	cmp	r3, #1
 800402c:	d11b      	bne.n	8004066 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	e16c      	b.n	8004340 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	2b02      	cmp	r3, #2
 800406c:	d11b      	bne.n	80040a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800408c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408e:	2300      	movs	r3, #0
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	e14c      	b.n	8004340 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040cc:	e138      	b.n	8004340 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	f200 80f1 	bhi.w	80042ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d123      	bne.n	8004128 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f002 f894 	bl	8006212 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e139      	b.n	8004368 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004126:	e10b      	b.n	8004340 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	2b02      	cmp	r3, #2
 800412e:	d14e      	bne.n	80041ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004136:	2200      	movs	r2, #0
 8004138:	4906      	ldr	r1, [pc, #24]	; (8004154 <HAL_I2C_Master_Receive+0x22c>)
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f001 ff11 	bl	8005f62 <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e10e      	b.n	8004368 <HAL_I2C_Master_Receive+0x440>
 800414a:	bf00      	nop
 800414c:	00100002 	.word	0x00100002
 8004150:	ffff0000 	.word	0xffff0000
 8004154:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041cc:	e0b8      	b.n	8004340 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2200      	movs	r2, #0
 80041d6:	4966      	ldr	r1, [pc, #408]	; (8004370 <HAL_I2C_Master_Receive+0x448>)
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f001 fec2 	bl	8005f62 <I2C_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0bf      	b.n	8004368 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	2200      	movs	r2, #0
 8004232:	494f      	ldr	r1, [pc, #316]	; (8004370 <HAL_I2C_Master_Receive+0x448>)
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f001 fe94 	bl	8005f62 <I2C_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e091      	b.n	8004368 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042b8:	e042      	b.n	8004340 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f001 ffa7 	bl	8006212 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e04c      	b.n	8004368 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b04      	cmp	r3, #4
 800430c:	d118      	bne.n	8004340 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	f47f aec2 	bne.w	80040ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3728      	adds	r7, #40	; 0x28
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	00010004 	.word	0x00010004

08004374 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	4608      	mov	r0, r1
 800437e:	4611      	mov	r1, r2
 8004380:	461a      	mov	r2, r3
 8004382:	4603      	mov	r3, r0
 8004384:	817b      	strh	r3, [r7, #10]
 8004386:	460b      	mov	r3, r1
 8004388:	813b      	strh	r3, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b20      	cmp	r3, #32
 800439c:	f040 809a 	bne.w	80044d4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80043a0:	4b50      	ldr	r3, [pc, #320]	; (80044e4 <HAL_I2C_Mem_Read_IT+0x170>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	08db      	lsrs	r3, r3, #3
 80043a6:	4a50      	ldr	r2, [pc, #320]	; (80044e8 <HAL_I2C_Mem_Read_IT+0x174>)
 80043a8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ac:	0a1a      	lsrs	r2, r3, #8
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	009a      	lsls	r2, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	3b01      	subs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d116      	bne.n	80043f4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f043 0220 	orr.w	r2, r3, #32
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e070      	b.n	80044d6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d0db      	beq.n	80043ba <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_I2C_Mem_Read_IT+0x9c>
 800440c:	2302      	movs	r3, #2
 800440e:	e062      	b.n	80044d6 <HAL_I2C_Mem_Read_IT+0x162>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b01      	cmp	r3, #1
 8004424:	d007      	beq.n	8004436 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004444:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2222      	movs	r2, #34	; 0x22
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2240      	movs	r2, #64	; 0x40
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a3a      	ldr	r2, [r7, #32]
 8004460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004466:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <HAL_I2C_Mem_Read_IT+0x178>)
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004478:	897a      	ldrh	r2, [r7, #10]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800447e:	893a      	ldrh	r2, [r7, #8]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800449e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ae:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80044ce:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000000 	.word	0x20000000
 80044e8:	14f8b589 	.word	0x14f8b589
 80044ec:	ffff0000 	.word	0xffff0000

080044f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004510:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004518:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b10      	cmp	r3, #16
 800451e:	d003      	beq.n	8004528 <HAL_I2C_EV_IRQHandler+0x38>
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	f040 80b6 	bne.w	8004694 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10d      	bne.n	800455e <HAL_I2C_EV_IRQHandler+0x6e>
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004548:	d003      	beq.n	8004552 <HAL_I2C_EV_IRQHandler+0x62>
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004550:	d101      	bne.n	8004556 <HAL_I2C_EV_IRQHandler+0x66>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <HAL_I2C_EV_IRQHandler+0x68>
 8004556:	2300      	movs	r3, #0
 8004558:	2b01      	cmp	r3, #1
 800455a:	f000 8127 	beq.w	80047ac <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00c      	beq.n	8004582 <HAL_I2C_EV_IRQHandler+0x92>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	0a5b      	lsrs	r3, r3, #9
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d006      	beq.n	8004582 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f001 fed1 	bl	800631c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fd12 	bl	8004fa4 <I2C_Master_SB>
 8004580:	e087      	b.n	8004692 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	08db      	lsrs	r3, r3, #3
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	0a5b      	lsrs	r3, r3, #9
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fd88 	bl	80050b0 <I2C_Master_ADD10>
 80045a0:	e077      	b.n	8004692 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	0a5b      	lsrs	r3, r3, #9
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fda2 	bl	8005104 <I2C_Master_ADDR>
 80045c0:	e067      	b.n	8004692 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d030      	beq.n	8004630 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045dc:	f000 80e8 	beq.w	80047b0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	09db      	lsrs	r3, r3, #7
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00f      	beq.n	800460c <HAL_I2C_EV_IRQHandler+0x11c>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	0a9b      	lsrs	r3, r3, #10
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <HAL_I2C_EV_IRQHandler+0x11c>
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	089b      	lsrs	r3, r3, #2
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d103      	bne.n	800460c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f9de 	bl	80049c6 <I2C_MasterTransmit_TXE>
 800460a:	e042      	b.n	8004692 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	089b      	lsrs	r3, r3, #2
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80cb 	beq.w	80047b0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	0a5b      	lsrs	r3, r3, #9
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80c4 	beq.w	80047b0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fa68 	bl	8004afe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800462e:	e0bf      	b.n	80047b0 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463e:	f000 80b7 	beq.w	80047b0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	099b      	lsrs	r3, r3, #6
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00f      	beq.n	800466e <HAL_I2C_EV_IRQHandler+0x17e>
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	0a9b      	lsrs	r3, r3, #10
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_I2C_EV_IRQHandler+0x17e>
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fb30 	bl	8004ccc <I2C_MasterReceive_RXNE>
 800466c:	e011      	b.n	8004692 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 809a 	beq.w	80047b0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	0a5b      	lsrs	r3, r3, #9
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8093 	beq.w	80047b0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fba0 	bl	8004dd0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004690:	e08e      	b.n	80047b0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004692:	e08d      	b.n	80047b0 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	e007      	b.n	80046b6 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d012      	beq.n	80046e8 <HAL_I2C_EV_IRQHandler+0x1f8>
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	0a5b      	lsrs	r3, r3, #9
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80046de:	69b9      	ldr	r1, [r7, #24]
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 ff5e 	bl	80055a2 <I2C_Slave_ADDR>
 80046e6:	e066      	b.n	80047b6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d009      	beq.n	8004708 <HAL_I2C_EV_IRQHandler+0x218>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	0a5b      	lsrs	r3, r3, #9
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 ff93 	bl	800562c <I2C_Slave_STOPF>
 8004706:	e056      	b.n	80047b6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004708:	7bbb      	ldrb	r3, [r7, #14]
 800470a:	2b21      	cmp	r3, #33	; 0x21
 800470c:	d002      	beq.n	8004714 <HAL_I2C_EV_IRQHandler+0x224>
 800470e:	7bbb      	ldrb	r3, [r7, #14]
 8004710:	2b29      	cmp	r3, #41	; 0x29
 8004712:	d125      	bne.n	8004760 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	09db      	lsrs	r3, r3, #7
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00f      	beq.n	8004740 <HAL_I2C_EV_IRQHandler+0x250>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	0a9b      	lsrs	r3, r3, #10
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <HAL_I2C_EV_IRQHandler+0x250>
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	089b      	lsrs	r3, r3, #2
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fe74 	bl	8005426 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800473e:	e039      	b.n	80047b4 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	089b      	lsrs	r3, r3, #2
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d033      	beq.n	80047b4 <HAL_I2C_EV_IRQHandler+0x2c4>
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	0a5b      	lsrs	r3, r3, #9
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02d      	beq.n	80047b4 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fea1 	bl	80054a0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800475e:	e029      	b.n	80047b4 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	099b      	lsrs	r3, r3, #6
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00f      	beq.n	800478c <HAL_I2C_EV_IRQHandler+0x29c>
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	0a9b      	lsrs	r3, r3, #10
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <HAL_I2C_EV_IRQHandler+0x29c>
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	089b      	lsrs	r3, r3, #2
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d103      	bne.n	800478c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 feac 	bl	80054e2 <I2C_SlaveReceive_RXNE>
 800478a:	e014      	b.n	80047b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	089b      	lsrs	r3, r3, #2
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00e      	beq.n	80047b6 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	0a5b      	lsrs	r3, r3, #9
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 feda 	bl	800555e <I2C_SlaveReceive_BTF>
 80047aa:	e004      	b.n	80047b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80047ac:	bf00      	nop
 80047ae:	e002      	b.n	80047b6 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047b4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80047b6:	3720      	adds	r7, #32
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	; 0x28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047de:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	0a1b      	lsrs	r3, r3, #8
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <HAL_I2C_ER_IRQHandler+0x4e>
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004808:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	0a5b      	lsrs	r3, r3, #9
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00e      	beq.n	8004834 <HAL_I2C_ER_IRQHandler+0x78>
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	0a1b      	lsrs	r3, r3, #8
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	f043 0302 	orr.w	r3, r3, #2
 8004828:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004832:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	0a9b      	lsrs	r3, r3, #10
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d03f      	beq.n	80048c0 <HAL_I2C_ER_IRQHandler+0x104>
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	0a1b      	lsrs	r3, r3, #8
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d039      	beq.n	80048c0 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800484c:	7efb      	ldrb	r3, [r7, #27]
 800484e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004854:	b29b      	uxth	r3, r3
 8004856:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004866:	7ebb      	ldrb	r3, [r7, #26]
 8004868:	2b20      	cmp	r3, #32
 800486a:	d112      	bne.n	8004892 <HAL_I2C_ER_IRQHandler+0xd6>
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10f      	bne.n	8004892 <HAL_I2C_ER_IRQHandler+0xd6>
 8004872:	7cfb      	ldrb	r3, [r7, #19]
 8004874:	2b21      	cmp	r3, #33	; 0x21
 8004876:	d008      	beq.n	800488a <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	2b29      	cmp	r3, #41	; 0x29
 800487c:	d005      	beq.n	800488a <HAL_I2C_ER_IRQHandler+0xce>
 800487e:	7cfb      	ldrb	r3, [r7, #19]
 8004880:	2b28      	cmp	r3, #40	; 0x28
 8004882:	d106      	bne.n	8004892 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b21      	cmp	r3, #33	; 0x21
 8004888:	d103      	bne.n	8004892 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fffe 	bl	800588c <I2C_Slave_AF>
 8004890:	e016      	b.n	80048c0 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800489a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	f043 0304 	orr.w	r3, r3, #4
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80048a4:	7efb      	ldrb	r3, [r7, #27]
 80048a6:	2b10      	cmp	r3, #16
 80048a8:	d002      	beq.n	80048b0 <HAL_I2C_ER_IRQHandler+0xf4>
 80048aa:	7efb      	ldrb	r3, [r7, #27]
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d107      	bne.n	80048c0 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048be:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	0adb      	lsrs	r3, r3, #11
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00e      	beq.n	80048ea <HAL_I2C_ER_IRQHandler+0x12e>
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	0a1b      	lsrs	r3, r3, #8
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	f043 0308 	orr.w	r3, r3, #8
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80048e8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f001 f835 	bl	800596c <I2C_ITError>
  }
}
 8004902:	bf00      	nop
 8004904:	3728      	adds	r7, #40	; 0x28
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	460b      	mov	r3, r1
 8004964:	70fb      	strb	r3, [r7, #3]
 8004966:	4613      	mov	r3, r2
 8004968:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049dc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d150      	bne.n	8004a8e <I2C_MasterTransmit_TXE+0xc8>
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b21      	cmp	r3, #33	; 0x21
 80049f0:	d14d      	bne.n	8004a8e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d01d      	beq.n	8004a34 <I2C_MasterTransmit_TXE+0x6e>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d01a      	beq.n	8004a34 <I2C_MasterTransmit_TXE+0x6e>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a04:	d016      	beq.n	8004a34 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a14:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2211      	movs	r2, #17
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff ff6c 	bl	800490a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a32:	e060      	b.n	8004af6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a42:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a52:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d107      	bne.n	8004a7e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff ff87 	bl	800498a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a7c:	e03b      	b.n	8004af6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff ff3f 	bl	800490a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a8c:	e033      	b.n	8004af6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	2b21      	cmp	r3, #33	; 0x21
 8004a92:	d005      	beq.n	8004aa0 <I2C_MasterTransmit_TXE+0xda>
 8004a94:	7bbb      	ldrb	r3, [r7, #14]
 8004a96:	2b40      	cmp	r3, #64	; 0x40
 8004a98:	d12d      	bne.n	8004af6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b22      	cmp	r3, #34	; 0x22
 8004a9e:	d12a      	bne.n	8004af6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d108      	bne.n	8004abc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004aba:	e01c      	b.n	8004af6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d103      	bne.n	8004ad0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f898 	bl	8004bfe <I2C_MemoryTransmit_TXE_BTF>
}
 8004ace:	e012      	b.n	8004af6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004af4:	e7ff      	b.n	8004af6 <I2C_MasterTransmit_TXE+0x130>
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b21      	cmp	r3, #33	; 0x21
 8004b16:	d165      	bne.n	8004be4 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d012      	beq.n	8004b48 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	781a      	ldrb	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004b46:	e056      	b.n	8004bf6 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d01d      	beq.n	8004b8a <I2C_MasterTransmit_BTF+0x8c>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d01a      	beq.n	8004b8a <I2C_MasterTransmit_BTF+0x8c>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b5a:	d016      	beq.n	8004b8a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b6a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2211      	movs	r2, #17
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fec1 	bl	800490a <HAL_I2C_MasterTxCpltCallback>
}
 8004b88:	e035      	b.n	8004bf6 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b98:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d107      	bne.n	8004bd4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff fedc 	bl	800498a <HAL_I2C_MemTxCpltCallback>
}
 8004bd2:	e010      	b.n	8004bf6 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fe94 	bl	800490a <HAL_I2C_MasterTxCpltCallback>
}
 8004be2:	e008      	b.n	8004bf6 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d102      	bne.n	8004bf6 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f804 	bl	8004bfe <I2C_MemoryTransmit_TXE_BTF>
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d11d      	bne.n	8004c4a <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d10b      	bne.n	8004c2e <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c26:	1c9a      	adds	r2, r3, #2
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004c2c:	e048      	b.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	121b      	asrs	r3, r3, #8
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c48:	e03a      	b.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d10b      	bne.n	8004c6a <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c68:	e02a      	b.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d126      	bne.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b22      	cmp	r3, #34	; 0x22
 8004c7c:	d108      	bne.n	8004c90 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c8c:	601a      	str	r2, [r3, #0]
}
 8004c8e:	e017      	b.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b21      	cmp	r3, #33	; 0x21
 8004c9a:	d111      	bne.n	8004cc0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	781a      	ldrb	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b22      	cmp	r3, #34	; 0x22
 8004cde:	d173      	bne.n	8004dc8 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d920      	bls.n	8004d30 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d154      	bne.n	8004dc8 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004d2e:	e04b      	b.n	8004dc8 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d047      	beq.n	8004dc8 <I2C_MasterReceive_RXNE+0xfc>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d002      	beq.n	8004d44 <I2C_MasterReceive_RXNE+0x78>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d141      	bne.n	8004dc8 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d52:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d62:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b40      	cmp	r3, #64	; 0x40
 8004d9c:	d10a      	bne.n	8004db4 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f005 fe31 	bl	800aa14 <HAL_I2C_MemRxCpltCallback>
}
 8004db2:	e009      	b.n	8004dc8 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2212      	movs	r2, #18
 8004dc0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff fdab 	bl	800491e <HAL_I2C_MasterRxCpltCallback>
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d11b      	bne.n	8004e20 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e1e:	e0bd      	b.n	8004f9c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d129      	bne.n	8004e7e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e38:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d00a      	beq.n	8004e56 <I2C_MasterReceive_BTF+0x86>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d007      	beq.n	8004e56 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e54:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e7c:	e08e      	b.n	8004f9c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d176      	bne.n	8004f76 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d002      	beq.n	8004e94 <I2C_MasterReceive_BTF+0xc4>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d108      	bne.n	8004ea6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e019      	b.n	8004eda <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d002      	beq.n	8004eb2 <I2C_MasterReceive_BTF+0xe2>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d108      	bne.n	8004ec4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e00a      	b.n	8004eda <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b10      	cmp	r3, #16
 8004ec8:	d007      	beq.n	8004eda <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f34:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b40      	cmp	r3, #64	; 0x40
 8004f48:	d10a      	bne.n	8004f60 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f005 fd5b 	bl	800aa14 <HAL_I2C_MemRxCpltCallback>
}
 8004f5e:	e01d      	b.n	8004f9c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2212      	movs	r2, #18
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff fcd5 	bl	800491e <HAL_I2C_MasterRxCpltCallback>
}
 8004f74:	e012      	b.n	8004f9c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d117      	bne.n	8004fe8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fd0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004fd2:	e067      	b.n	80050a4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	f043 0301 	orr.w	r3, r3, #1
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	611a      	str	r2, [r3, #16]
}
 8004fe6:	e05d      	b.n	80050a4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ff0:	d133      	bne.n	800505a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b21      	cmp	r3, #33	; 0x21
 8004ffc:	d109      	bne.n	8005012 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	b2db      	uxtb	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800500e:	611a      	str	r2, [r3, #16]
 8005010:	e008      	b.n	8005024 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	b2db      	uxtb	r3, r3
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	b2da      	uxtb	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005028:	2b00      	cmp	r3, #0
 800502a:	d004      	beq.n	8005036 <I2C_Master_SB+0x92>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d108      	bne.n	8005048 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	2b00      	cmp	r3, #0
 800503c:	d032      	beq.n	80050a4 <I2C_Master_SB+0x100>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d02d      	beq.n	80050a4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005056:	605a      	str	r2, [r3, #4]
}
 8005058:	e024      	b.n	80050a4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10e      	bne.n	8005080 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	b29b      	uxth	r3, r3
 8005068:	11db      	asrs	r3, r3, #7
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 0306 	and.w	r3, r3, #6
 8005070:	b2db      	uxtb	r3, r3
 8005072:	f063 030f 	orn	r3, r3, #15
 8005076:	b2da      	uxtb	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	611a      	str	r2, [r3, #16]
}
 800507e:	e011      	b.n	80050a4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005084:	2b01      	cmp	r3, #1
 8005086:	d10d      	bne.n	80050a4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508c:	b29b      	uxth	r3, r3
 800508e:	11db      	asrs	r3, r3, #7
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f003 0306 	and.w	r3, r3, #6
 8005096:	b2db      	uxtb	r3, r3
 8005098:	f063 030e 	orn	r3, r3, #14
 800509c:	b2da      	uxtb	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	611a      	str	r2, [r3, #16]
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d103      	bne.n	80050d4 <I2C_Master_ADD10+0x24>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d011      	beq.n	80050f8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <I2C_Master_ADD10+0x38>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050f6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005104:	b480      	push	{r7}
 8005106:	b091      	sub	sp, #68	; 0x44
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005112:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b22      	cmp	r3, #34	; 0x22
 800512c:	f040 8169 	bne.w	8005402 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10f      	bne.n	8005158 <I2C_Master_ADDR+0x54>
 8005138:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d10b      	bne.n	8005158 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005140:	2300      	movs	r3, #0
 8005142:	633b      	str	r3, [r7, #48]	; 0x30
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	633b      	str	r3, [r7, #48]	; 0x30
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	633b      	str	r3, [r7, #48]	; 0x30
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	e160      	b.n	800541a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515c:	2b00      	cmp	r3, #0
 800515e:	d11d      	bne.n	800519c <I2C_Master_ADDR+0x98>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005168:	d118      	bne.n	800519c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516a:	2300      	movs	r3, #0
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800518e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	651a      	str	r2, [r3, #80]	; 0x50
 800519a:	e13e      	b.n	800541a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d113      	bne.n	80051ce <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a6:	2300      	movs	r3, #0
 80051a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e115      	b.n	80053fa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	f040 808a 	bne.w	80052ee <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051e0:	d137      	bne.n	8005252 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005200:	d113      	bne.n	800522a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005210:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005212:	2300      	movs	r3, #0
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	e0e7      	b.n	80053fa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800522a:	2300      	movs	r3, #0
 800522c:	623b      	str	r3, [r7, #32]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	623b      	str	r3, [r7, #32]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	623b      	str	r3, [r7, #32]
 800523e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	e0d3      	b.n	80053fa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	2b08      	cmp	r3, #8
 8005256:	d02e      	beq.n	80052b6 <I2C_Master_ADDR+0x1b2>
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	2b20      	cmp	r3, #32
 800525c:	d02b      	beq.n	80052b6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800525e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005260:	2b12      	cmp	r3, #18
 8005262:	d102      	bne.n	800526a <I2C_Master_ADDR+0x166>
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	2b01      	cmp	r3, #1
 8005268:	d125      	bne.n	80052b6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	2b04      	cmp	r3, #4
 800526e:	d00e      	beq.n	800528e <I2C_Master_ADDR+0x18a>
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	2b02      	cmp	r3, #2
 8005274:	d00b      	beq.n	800528e <I2C_Master_ADDR+0x18a>
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	2b10      	cmp	r3, #16
 800527a:	d008      	beq.n	800528e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e007      	b.n	800529e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800529c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	61fb      	str	r3, [r7, #28]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	61fb      	str	r3, [r7, #28]
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	e0a1      	b.n	80053fa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c6:	2300      	movs	r3, #0
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	e085      	b.n	80053fa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d14d      	bne.n	8005394 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d016      	beq.n	800532c <I2C_Master_ADDR+0x228>
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	2b02      	cmp	r3, #2
 8005302:	d013      	beq.n	800532c <I2C_Master_ADDR+0x228>
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	2b10      	cmp	r3, #16
 8005308:	d010      	beq.n	800532c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005318:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e007      	b.n	800533c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800533a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534a:	d117      	bne.n	800537c <I2C_Master_ADDR+0x278>
 800534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005352:	d00b      	beq.n	800536c <I2C_Master_ADDR+0x268>
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	2b01      	cmp	r3, #1
 8005358:	d008      	beq.n	800536c <I2C_Master_ADDR+0x268>
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	2b08      	cmp	r3, #8
 800535e:	d005      	beq.n	800536c <I2C_Master_ADDR+0x268>
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	2b10      	cmp	r3, #16
 8005364:	d002      	beq.n	800536c <I2C_Master_ADDR+0x268>
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	2b20      	cmp	r3, #32
 800536a:	d107      	bne.n	800537c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800537a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	e032      	b.n	80053fa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053a2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b2:	d117      	bne.n	80053e4 <I2C_Master_ADDR+0x2e0>
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053ba:	d00b      	beq.n	80053d4 <I2C_Master_ADDR+0x2d0>
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d008      	beq.n	80053d4 <I2C_Master_ADDR+0x2d0>
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d005      	beq.n	80053d4 <I2C_Master_ADDR+0x2d0>
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d002      	beq.n	80053d4 <I2C_Master_ADDR+0x2d0>
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d107      	bne.n	80053e4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053e2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e4:	2300      	movs	r3, #0
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005400:	e00b      	b.n	800541a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	68fb      	ldr	r3, [r7, #12]
}
 8005418:	e7ff      	b.n	800541a <I2C_Master_ADDR+0x316>
 800541a:	bf00      	nop
 800541c:	3744      	adds	r7, #68	; 0x44
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005434:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d02b      	beq.n	8005498 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	781a      	ldrb	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d114      	bne.n	8005498 <I2C_SlaveTransmit_TXE+0x72>
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	2b29      	cmp	r3, #41	; 0x29
 8005472:	d111      	bne.n	8005498 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005482:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2221      	movs	r2, #33	; 0x21
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2228      	movs	r2, #40	; 0x28
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff fa4d 	bl	8004932 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d011      	beq.n	80054d6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	781a      	ldrb	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d02c      	beq.n	8005556 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d114      	bne.n	8005556 <I2C_SlaveReceive_RXNE+0x74>
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	2b2a      	cmp	r3, #42	; 0x2a
 8005530:	d111      	bne.n	8005556 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005540:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2222      	movs	r2, #34	; 0x22
 8005546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2228      	movs	r2, #40	; 0x28
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff f9f8 	bl	8004946 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005556:	bf00      	nop
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d012      	beq.n	8005596 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055bc:	2b28      	cmp	r3, #40	; 0x28
 80055be:	d127      	bne.n	8005610 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	089b      	lsrs	r3, r3, #2
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80055dc:	2301      	movs	r3, #1
 80055de:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	09db      	lsrs	r3, r3, #7
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	81bb      	strh	r3, [r7, #12]
 80055f2:	e002      	b.n	80055fa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005602:	89ba      	ldrh	r2, [r7, #12]
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff f9a6 	bl	800495a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800560e:	e008      	b.n	8005622 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0202 	mvn.w	r2, #2
 8005618:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005622:	bf00      	nop
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800564a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005678:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005688:	d172      	bne.n	8005770 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	2b22      	cmp	r3, #34	; 0x22
 800568e:	d002      	beq.n	8005696 <I2C_Slave_STOPF+0x6a>
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	2b2a      	cmp	r3, #42	; 0x2a
 8005694:	d135      	bne.n	8005702 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	b29a      	uxth	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f043 0204 	orr.w	r2, r3, #4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fd fabe 	bl	8002c50 <HAL_DMA_GetState>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d049      	beq.n	800576e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	4a69      	ldr	r2, [pc, #420]	; (8005884 <I2C_Slave_STOPF+0x258>)
 80056e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fd f906 	bl	80028f8 <HAL_DMA_Abort_IT>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d03d      	beq.n	800576e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056fc:	4610      	mov	r0, r2
 80056fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005700:	e035      	b.n	800576e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	b29a      	uxth	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f043 0204 	orr.w	r2, r3, #4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005734:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573a:	4618      	mov	r0, r3
 800573c:	f7fd fa88 	bl	8002c50 <HAL_DMA_GetState>
 8005740:	4603      	mov	r3, r0
 8005742:	2b01      	cmp	r3, #1
 8005744:	d014      	beq.n	8005770 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574a:	4a4e      	ldr	r2, [pc, #312]	; (8005884 <I2C_Slave_STOPF+0x258>)
 800574c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005752:	4618      	mov	r0, r3
 8005754:	f7fd f8d0 	bl	80028f8 <HAL_DMA_Abort_IT>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005768:	4610      	mov	r0, r2
 800576a:	4798      	blx	r3
 800576c:	e000      	b.n	8005770 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800576e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d03e      	beq.n	80057f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b04      	cmp	r3, #4
 8005786:	d112      	bne.n	80057ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	d112      	bne.n	80057e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d8:	b29b      	uxth	r3, r3
 80057da:	3b01      	subs	r3, #1
 80057dc:	b29a      	uxth	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	f043 0204 	orr.w	r2, r3, #4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f8b3 	bl	800596c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005806:	e039      	b.n	800587c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b2a      	cmp	r3, #42	; 0x2a
 800580c:	d109      	bne.n	8005822 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2228      	movs	r2, #40	; 0x28
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff f892 	bl	8004946 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b28      	cmp	r3, #40	; 0x28
 800582c:	d111      	bne.n	8005852 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a15      	ldr	r2, [pc, #84]	; (8005888 <I2C_Slave_STOPF+0x25c>)
 8005832:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff f893 	bl	8004976 <HAL_I2C_ListenCpltCallback>
}
 8005850:	e014      	b.n	800587c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	2b22      	cmp	r3, #34	; 0x22
 8005858:	d002      	beq.n	8005860 <I2C_Slave_STOPF+0x234>
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	2b22      	cmp	r3, #34	; 0x22
 800585e:	d10d      	bne.n	800587c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff f865 	bl	8004946 <HAL_I2C_SlaveRxCpltCallback>
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	08005e65 	.word	0x08005e65
 8005888:	ffff0000 	.word	0xffff0000

0800588c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d002      	beq.n	80058ae <I2C_Slave_AF+0x22>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d129      	bne.n	8005902 <I2C_Slave_AF+0x76>
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b28      	cmp	r3, #40	; 0x28
 80058b2:	d126      	bne.n	8005902 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a2c      	ldr	r2, [pc, #176]	; (8005968 <I2C_Slave_AF+0xdc>)
 80058b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff f83b 	bl	8004976 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005900:	e02e      	b.n	8005960 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	2b21      	cmp	r3, #33	; 0x21
 8005906:	d126      	bne.n	8005956 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a17      	ldr	r2, [pc, #92]	; (8005968 <I2C_Slave_AF+0xdc>)
 800590c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2221      	movs	r2, #33	; 0x21
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005932:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800593c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fe ffef 	bl	8004932 <HAL_I2C_SlaveTxCpltCallback>
}
 8005954:	e004      	b.n	8005960 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800595e:	615a      	str	r2, [r3, #20]
}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	ffff0000 	.word	0xffff0000

0800596c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b10      	cmp	r3, #16
 8005986:	d10a      	bne.n	800599e <I2C_ITError+0x32>
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b22      	cmp	r3, #34	; 0x22
 800598c:	d107      	bne.n	800599e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800599c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059a4:	2b28      	cmp	r3, #40	; 0x28
 80059a6:	d107      	bne.n	80059b8 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2228      	movs	r2, #40	; 0x28
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059b6:	e015      	b.n	80059e4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c6:	d006      	beq.n	80059d6 <I2C_ITError+0x6a>
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b60      	cmp	r3, #96	; 0x60
 80059cc:	d003      	beq.n	80059d6 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f2:	d162      	bne.n	8005aba <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d020      	beq.n	8005a54 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	4a6a      	ldr	r2, [pc, #424]	; (8005bc0 <I2C_ITError+0x254>)
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fc ff6a 	bl	80028f8 <HAL_DMA_Abort_IT>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8089 	beq.w	8005b3e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a4e:	4610      	mov	r0, r2
 8005a50:	4798      	blx	r3
 8005a52:	e074      	b.n	8005b3e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	4a59      	ldr	r2, [pc, #356]	; (8005bc0 <I2C_ITError+0x254>)
 8005a5a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fc ff49 	bl	80028f8 <HAL_DMA_Abort_IT>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d068      	beq.n	8005b3e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a76:	2b40      	cmp	r3, #64	; 0x40
 8005a78:	d10b      	bne.n	8005a92 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
 8005ab8:	e041      	b.n	8005b3e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b60      	cmp	r3, #96	; 0x60
 8005ac4:	d125      	bne.n	8005b12 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b40      	cmp	r3, #64	; 0x40
 8005ae0:	d10b      	bne.n	8005afa <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fe ff51 	bl	80049b2 <HAL_I2C_AbortCpltCallback>
 8005b10:	e015      	b.n	8005b3e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1c:	2b40      	cmp	r3, #64	; 0x40
 8005b1e:	d10b      	bne.n	8005b38 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fe ff30 	bl	800499e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10e      	bne.n	8005b6c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d104      	bne.n	8005b6c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b7a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b82:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d113      	bne.n	8005bb8 <I2C_ITError+0x24c>
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	2b28      	cmp	r3, #40	; 0x28
 8005b94:	d110      	bne.n	8005bb8 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a0a      	ldr	r2, [pc, #40]	; (8005bc4 <I2C_ITError+0x258>)
 8005b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fe fedf 	bl	8004976 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	08005e65 	.word	0x08005e65
 8005bc4:	ffff0000 	.word	0xffff0000

08005bc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d006      	beq.n	8005bf2 <I2C_MasterRequestWrite+0x2a>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d003      	beq.n	8005bf2 <I2C_MasterRequestWrite+0x2a>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bf0:	d108      	bne.n	8005c04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e00b      	b.n	8005c1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	2b12      	cmp	r3, #18
 8005c0a:	d107      	bne.n	8005c1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f99a 	bl	8005f62 <I2C_WaitOnFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00c      	beq.n	8005c4e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e035      	b.n	8005cba <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c56:	d108      	bne.n	8005c6a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c58:	897b      	ldrh	r3, [r7, #10]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c66:	611a      	str	r2, [r3, #16]
 8005c68:	e01b      	b.n	8005ca2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c6a:	897b      	ldrh	r3, [r7, #10]
 8005c6c:	11db      	asrs	r3, r3, #7
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	f003 0306 	and.w	r3, r3, #6
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f063 030f 	orn	r3, r3, #15
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	490f      	ldr	r1, [pc, #60]	; (8005cc4 <I2C_MasterRequestWrite+0xfc>)
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f9c1 	bl	8006010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e010      	b.n	8005cba <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c98:	897b      	ldrh	r3, [r7, #10]
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	4908      	ldr	r1, [pc, #32]	; (8005cc8 <I2C_MasterRequestWrite+0x100>)
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f9b1 	bl	8006010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	00010008 	.word	0x00010008
 8005cc8:	00010002 	.word	0x00010002

08005ccc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cf0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d006      	beq.n	8005d06 <I2C_MasterRequestRead+0x3a>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d003      	beq.n	8005d06 <I2C_MasterRequestRead+0x3a>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d04:	d108      	bne.n	8005d18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e00b      	b.n	8005d30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	2b11      	cmp	r3, #17
 8005d1e:	d107      	bne.n	8005d30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f910 	bl	8005f62 <I2C_WaitOnFlagUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00c      	beq.n	8005d62 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e078      	b.n	8005e54 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d6a:	d108      	bne.n	8005d7e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d6c:	897b      	ldrh	r3, [r7, #10]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	611a      	str	r2, [r3, #16]
 8005d7c:	e05e      	b.n	8005e3c <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d7e:	897b      	ldrh	r3, [r7, #10]
 8005d80:	11db      	asrs	r3, r3, #7
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f003 0306 	and.w	r3, r3, #6
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f063 030f 	orn	r3, r3, #15
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	4930      	ldr	r1, [pc, #192]	; (8005e5c <I2C_MasterRequestRead+0x190>)
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f937 	bl	8006010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e053      	b.n	8005e54 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dac:	897b      	ldrh	r3, [r7, #10]
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	4929      	ldr	r1, [pc, #164]	; (8005e60 <I2C_MasterRequestRead+0x194>)
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f927 	bl	8006010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e043      	b.n	8005e54 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dcc:	2300      	movs	r3, #0
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005df0:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f8af 	bl	8005f62 <I2C_WaitOnFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00c      	beq.n	8005e24 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e1e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e017      	b.n	8005e54 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e24:	897b      	ldrh	r3, [r7, #10]
 8005e26:	11db      	asrs	r3, r3, #7
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	f003 0306 	and.w	r3, r3, #6
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f063 030e 	orn	r3, r3, #14
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	4907      	ldr	r1, [pc, #28]	; (8005e60 <I2C_MasterRequestRead+0x194>)
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f8e4 	bl	8006010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	00010008 	.word	0x00010008
 8005e60:	00010002 	.word	0x00010002

08005e64 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e78:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e86:	2200      	movs	r2, #0
 8005e88:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e96:	2200      	movs	r2, #0
 8005e98:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ea8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	2200      	movs	r2, #0
 8005ece:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0201 	bic.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b60      	cmp	r3, #96	; 0x60
 8005eea:	d10e      	bne.n	8005f0a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7fe fd55 	bl	80049b2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f08:	e027      	b.n	8005f5a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f0a:	7afb      	ldrb	r3, [r7, #11]
 8005f0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f10:	2b28      	cmp	r3, #40	; 0x28
 8005f12:	d117      	bne.n	8005f44 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2228      	movs	r2, #40	; 0x28
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f42:	e007      	b.n	8005f54 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7fe fd22 	bl	800499e <HAL_I2C_ErrorCallback>
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f72:	e025      	b.n	8005fc0 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d021      	beq.n	8005fc0 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7c:	f7fc fa76 	bl	800246c <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d116      	bne.n	8005fc0 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	f043 0220 	orr.w	r2, r3, #32
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e023      	b.n	8006008 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d10d      	bne.n	8005fe6 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	43da      	mvns	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bf0c      	ite	eq
 8005fdc:	2301      	moveq	r3, #1
 8005fde:	2300      	movne	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	e00c      	b.n	8006000 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	43da      	mvns	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	bf0c      	ite	eq
 8005ff8:	2301      	moveq	r3, #1
 8005ffa:	2300      	movne	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	429a      	cmp	r2, r3
 8006004:	d0b6      	beq.n	8005f74 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800601e:	e051      	b.n	80060c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602e:	d123      	bne.n	8006078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	f043 0204 	orr.w	r2, r3, #4
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e046      	b.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d021      	beq.n	80060c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006080:	f7fc f9f4 	bl	800246c <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	429a      	cmp	r2, r3
 800608e:	d302      	bcc.n	8006096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d116      	bne.n	80060c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	f043 0220 	orr.w	r2, r3, #32
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e020      	b.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	0c1b      	lsrs	r3, r3, #16
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d10c      	bne.n	80060e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	43da      	mvns	r2, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	4013      	ands	r3, r2
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	bf14      	ite	ne
 80060e0:	2301      	movne	r3, #1
 80060e2:	2300      	moveq	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	e00b      	b.n	8006100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	43da      	mvns	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4013      	ands	r3, r2
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bf14      	ite	ne
 80060fa:	2301      	movne	r3, #1
 80060fc:	2300      	moveq	r3, #0
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d18d      	bne.n	8006020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800611a:	e02d      	b.n	8006178 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f8ce 	bl	80062be <I2C_IsAcknowledgeFailed>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e02d      	b.n	8006188 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006132:	d021      	beq.n	8006178 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006134:	f7fc f99a 	bl	800246c <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	429a      	cmp	r2, r3
 8006142:	d302      	bcc.n	800614a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d116      	bne.n	8006178 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	f043 0220 	orr.w	r2, r3, #32
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e007      	b.n	8006188 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d1ca      	bne.n	800611c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800619c:	e02d      	b.n	80061fa <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f88d 	bl	80062be <I2C_IsAcknowledgeFailed>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e02d      	b.n	800620a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d021      	beq.n	80061fa <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b6:	f7fc f959 	bl	800246c <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d302      	bcc.n	80061cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d116      	bne.n	80061fa <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	f043 0220 	orr.w	r2, r3, #32
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e007      	b.n	800620a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b04      	cmp	r3, #4
 8006206:	d1ca      	bne.n	800619e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800621e:	e042      	b.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f003 0310 	and.w	r3, r3, #16
 800622a:	2b10      	cmp	r3, #16
 800622c:	d119      	bne.n	8006262 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f06f 0210 	mvn.w	r2, #16
 8006236:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e029      	b.n	80062b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006262:	f7fc f903 	bl	800246c <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	429a      	cmp	r2, r3
 8006270:	d302      	bcc.n	8006278 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d116      	bne.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f043 0220 	orr.w	r2, r3, #32
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e007      	b.n	80062b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	d1b5      	bne.n	8006220 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d4:	d11b      	bne.n	800630e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	f043 0204 	orr.w	r2, r3, #4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800632c:	d103      	bne.n	8006336 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006334:	e007      	b.n	8006346 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800633e:	d102      	bne.n	8006346 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2208      	movs	r2, #8
 8006344:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b20      	cmp	r3, #32
 8006366:	d129      	bne.n	80063bc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2224      	movs	r2, #36	; 0x24
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0201 	bic.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0210 	bic.w	r2, r2, #16
 800638e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	4618      	mov	r0, r3
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d12a      	bne.n	800643a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2224      	movs	r2, #36	; 0x24
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0201 	bic.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006404:	89fb      	ldrh	r3, [r7, #14]
 8006406:	f023 030f 	bic.w	r3, r3, #15
 800640a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	b29a      	uxth	r2, r3
 8006410:	89fb      	ldrh	r3, [r7, #14]
 8006412:	4313      	orrs	r3, r2
 8006414:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	89fa      	ldrh	r2, [r7, #14]
 800641c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0201 	orr.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	e000      	b.n	800643c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800643a:	2302      	movs	r3, #2
  }
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800644a:	b08f      	sub	sp, #60	; 0x3c
 800644c:	af0a      	add	r7, sp, #40	; 0x28
 800644e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e10f      	b.n	800667a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7fb ff0f 	bl	8002298 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2203      	movs	r2, #3
 800647e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648a:	2b00      	cmp	r3, #0
 800648c:	d102      	bne.n	8006494 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f002 fcd4 	bl	8008e46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	687e      	ldr	r6, [r7, #4]
 80064a6:	466d      	mov	r5, sp
 80064a8:	f106 0410 	add.w	r4, r6, #16
 80064ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80064bc:	1d33      	adds	r3, r6, #4
 80064be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064c0:	6838      	ldr	r0, [r7, #0]
 80064c2:	f002 fc5f 	bl	8008d84 <USB_CoreInit>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0d0      	b.n	800667a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f002 fcc2 	bl	8008e68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064e4:	2300      	movs	r3, #0
 80064e6:	73fb      	strb	r3, [r7, #15]
 80064e8:	e04a      	b.n	8006580 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064ea:	7bfa      	ldrb	r2, [r7, #15]
 80064ec:	6879      	ldr	r1, [r7, #4]
 80064ee:	4613      	mov	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	1a9b      	subs	r3, r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	440b      	add	r3, r1
 80064f8:	333d      	adds	r3, #61	; 0x3d
 80064fa:	2201      	movs	r2, #1
 80064fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064fe:	7bfa      	ldrb	r2, [r7, #15]
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	1a9b      	subs	r3, r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	333c      	adds	r3, #60	; 0x3c
 800650e:	7bfa      	ldrb	r2, [r7, #15]
 8006510:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006512:	7bfa      	ldrb	r2, [r7, #15]
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	b298      	uxth	r0, r3
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	3342      	adds	r3, #66	; 0x42
 8006526:	4602      	mov	r2, r0
 8006528:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800652a:	7bfa      	ldrb	r2, [r7, #15]
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	1a9b      	subs	r3, r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	440b      	add	r3, r1
 8006538:	333f      	adds	r3, #63	; 0x3f
 800653a:	2200      	movs	r2, #0
 800653c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800653e:	7bfa      	ldrb	r2, [r7, #15]
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	1a9b      	subs	r3, r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	3344      	adds	r3, #68	; 0x44
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006552:	7bfa      	ldrb	r2, [r7, #15]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	3348      	adds	r3, #72	; 0x48
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006566:	7bfa      	ldrb	r2, [r7, #15]
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	3350      	adds	r3, #80	; 0x50
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	3301      	adds	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
 8006580:	7bfa      	ldrb	r2, [r7, #15]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	429a      	cmp	r2, r3
 8006588:	d3af      	bcc.n	80064ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]
 800658e:	e044      	b.n	800661a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006590:	7bfa      	ldrb	r2, [r7, #15]
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	4613      	mov	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	1a9b      	subs	r3, r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80065a2:	2200      	movs	r2, #0
 80065a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065a6:	7bfa      	ldrb	r2, [r7, #15]
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	4613      	mov	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	1a9b      	subs	r3, r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	440b      	add	r3, r1
 80065b4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80065b8:	7bfa      	ldrb	r2, [r7, #15]
 80065ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80065bc:	7bfa      	ldrb	r2, [r7, #15]
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	4613      	mov	r3, r2
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	1a9b      	subs	r3, r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80065d2:	7bfa      	ldrb	r2, [r7, #15]
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	4613      	mov	r3, r2
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	1a9b      	subs	r3, r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	440b      	add	r3, r1
 80065e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065e8:	7bfa      	ldrb	r2, [r7, #15]
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	4613      	mov	r3, r2
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	1a9b      	subs	r3, r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	440b      	add	r3, r1
 80065f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065fe:	7bfa      	ldrb	r2, [r7, #15]
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	4613      	mov	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	3301      	adds	r3, #1
 8006618:	73fb      	strb	r3, [r7, #15]
 800661a:	7bfa      	ldrb	r2, [r7, #15]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	429a      	cmp	r2, r3
 8006622:	d3b5      	bcc.n	8006590 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	603b      	str	r3, [r7, #0]
 800662a:	687e      	ldr	r6, [r7, #4]
 800662c:	466d      	mov	r5, sp
 800662e:	f106 0410 	add.w	r4, r6, #16
 8006632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800663a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800663e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006642:	1d33      	adds	r3, r6, #4
 8006644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006646:	6838      	ldr	r0, [r7, #0]
 8006648:	f002 fc38 	bl	8008ebc <USB_DevInit>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e00d      	b.n	800667a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f002 fde7 	bl	8009246 <USB_DevDisconnect>

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e25b      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d075      	beq.n	800678e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066a2:	4ba3      	ldr	r3, [pc, #652]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 030c 	and.w	r3, r3, #12
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d00c      	beq.n	80066c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ae:	4ba0      	ldr	r3, [pc, #640]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d112      	bne.n	80066e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ba:	4b9d      	ldr	r3, [pc, #628]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066c6:	d10b      	bne.n	80066e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066c8:	4b99      	ldr	r3, [pc, #612]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d05b      	beq.n	800678c <HAL_RCC_OscConfig+0x108>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d157      	bne.n	800678c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e236      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e8:	d106      	bne.n	80066f8 <HAL_RCC_OscConfig+0x74>
 80066ea:	4b91      	ldr	r3, [pc, #580]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a90      	ldr	r2, [pc, #576]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80066f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	e01d      	b.n	8006734 <HAL_RCC_OscConfig+0xb0>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006700:	d10c      	bne.n	800671c <HAL_RCC_OscConfig+0x98>
 8006702:	4b8b      	ldr	r3, [pc, #556]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a8a      	ldr	r2, [pc, #552]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	4b88      	ldr	r3, [pc, #544]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a87      	ldr	r2, [pc, #540]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	e00b      	b.n	8006734 <HAL_RCC_OscConfig+0xb0>
 800671c:	4b84      	ldr	r3, [pc, #528]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a83      	ldr	r2, [pc, #524]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	4b81      	ldr	r3, [pc, #516]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a80      	ldr	r2, [pc, #512]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 800672e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d013      	beq.n	8006764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673c:	f7fb fe96 	bl	800246c <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006744:	f7fb fe92 	bl	800246c <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b64      	cmp	r3, #100	; 0x64
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e1fb      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006756:	4b76      	ldr	r3, [pc, #472]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0f0      	beq.n	8006744 <HAL_RCC_OscConfig+0xc0>
 8006762:	e014      	b.n	800678e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006764:	f7fb fe82 	bl	800246c <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800676c:	f7fb fe7e 	bl	800246c <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b64      	cmp	r3, #100	; 0x64
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e1e7      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800677e:	4b6c      	ldr	r3, [pc, #432]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f0      	bne.n	800676c <HAL_RCC_OscConfig+0xe8>
 800678a:	e000      	b.n	800678e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800678c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d063      	beq.n	8006862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800679a:	4b65      	ldr	r3, [pc, #404]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 030c 	and.w	r3, r3, #12
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00b      	beq.n	80067be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067a6:	4b62      	ldr	r3, [pc, #392]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067ae:	2b08      	cmp	r3, #8
 80067b0:	d11c      	bne.n	80067ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067b2:	4b5f      	ldr	r3, [pc, #380]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d116      	bne.n	80067ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067be:	4b5c      	ldr	r3, [pc, #368]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <HAL_RCC_OscConfig+0x152>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d001      	beq.n	80067d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e1bb      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d6:	4b56      	ldr	r3, [pc, #344]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	4952      	ldr	r1, [pc, #328]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ea:	e03a      	b.n	8006862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d020      	beq.n	8006836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067f4:	4b4f      	ldr	r3, [pc, #316]	; (8006934 <HAL_RCC_OscConfig+0x2b0>)
 80067f6:	2201      	movs	r2, #1
 80067f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fa:	f7fb fe37 	bl	800246c <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006800:	e008      	b.n	8006814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006802:	f7fb fe33 	bl	800246c <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e19c      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006814:	4b46      	ldr	r3, [pc, #280]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0f0      	beq.n	8006802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006820:	4b43      	ldr	r3, [pc, #268]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	00db      	lsls	r3, r3, #3
 800682e:	4940      	ldr	r1, [pc, #256]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006830:	4313      	orrs	r3, r2
 8006832:	600b      	str	r3, [r1, #0]
 8006834:	e015      	b.n	8006862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006836:	4b3f      	ldr	r3, [pc, #252]	; (8006934 <HAL_RCC_OscConfig+0x2b0>)
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683c:	f7fb fe16 	bl	800246c <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006844:	f7fb fe12 	bl	800246c <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e17b      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006856:	4b36      	ldr	r3, [pc, #216]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f0      	bne.n	8006844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d030      	beq.n	80068d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d016      	beq.n	80068a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006876:	4b30      	ldr	r3, [pc, #192]	; (8006938 <HAL_RCC_OscConfig+0x2b4>)
 8006878:	2201      	movs	r2, #1
 800687a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687c:	f7fb fdf6 	bl	800246c <HAL_GetTick>
 8006880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006884:	f7fb fdf2 	bl	800246c <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e15b      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006896:	4b26      	ldr	r3, [pc, #152]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0f0      	beq.n	8006884 <HAL_RCC_OscConfig+0x200>
 80068a2:	e015      	b.n	80068d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068a4:	4b24      	ldr	r3, [pc, #144]	; (8006938 <HAL_RCC_OscConfig+0x2b4>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068aa:	f7fb fddf 	bl	800246c <HAL_GetTick>
 80068ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068b2:	f7fb fddb 	bl	800246c <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e144      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068c4:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80068c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1f0      	bne.n	80068b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 80a0 	beq.w	8006a1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068e2:	4b13      	ldr	r3, [pc, #76]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10f      	bne.n	800690e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ee:	2300      	movs	r3, #0
 80068f0:	60bb      	str	r3, [r7, #8]
 80068f2:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	4a0e      	ldr	r2, [pc, #56]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 80068f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068fc:	6413      	str	r3, [r2, #64]	; 0x40
 80068fe:	4b0c      	ldr	r3, [pc, #48]	; (8006930 <HAL_RCC_OscConfig+0x2ac>)
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006906:	60bb      	str	r3, [r7, #8]
 8006908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800690a:	2301      	movs	r3, #1
 800690c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800690e:	4b0b      	ldr	r3, [pc, #44]	; (800693c <HAL_RCC_OscConfig+0x2b8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d121      	bne.n	800695e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800691a:	4b08      	ldr	r3, [pc, #32]	; (800693c <HAL_RCC_OscConfig+0x2b8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a07      	ldr	r2, [pc, #28]	; (800693c <HAL_RCC_OscConfig+0x2b8>)
 8006920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006926:	f7fb fda1 	bl	800246c <HAL_GetTick>
 800692a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800692c:	e011      	b.n	8006952 <HAL_RCC_OscConfig+0x2ce>
 800692e:	bf00      	nop
 8006930:	40023800 	.word	0x40023800
 8006934:	42470000 	.word	0x42470000
 8006938:	42470e80 	.word	0x42470e80
 800693c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006940:	f7fb fd94 	bl	800246c <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e0fd      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006952:	4b81      	ldr	r3, [pc, #516]	; (8006b58 <HAL_RCC_OscConfig+0x4d4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0f0      	beq.n	8006940 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d106      	bne.n	8006974 <HAL_RCC_OscConfig+0x2f0>
 8006966:	4b7d      	ldr	r3, [pc, #500]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	4a7c      	ldr	r2, [pc, #496]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	6713      	str	r3, [r2, #112]	; 0x70
 8006972:	e01c      	b.n	80069ae <HAL_RCC_OscConfig+0x32a>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	2b05      	cmp	r3, #5
 800697a:	d10c      	bne.n	8006996 <HAL_RCC_OscConfig+0x312>
 800697c:	4b77      	ldr	r3, [pc, #476]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	4a76      	ldr	r2, [pc, #472]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 8006982:	f043 0304 	orr.w	r3, r3, #4
 8006986:	6713      	str	r3, [r2, #112]	; 0x70
 8006988:	4b74      	ldr	r3, [pc, #464]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 800698a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698c:	4a73      	ldr	r2, [pc, #460]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	6713      	str	r3, [r2, #112]	; 0x70
 8006994:	e00b      	b.n	80069ae <HAL_RCC_OscConfig+0x32a>
 8006996:	4b71      	ldr	r3, [pc, #452]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a70      	ldr	r2, [pc, #448]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 800699c:	f023 0301 	bic.w	r3, r3, #1
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
 80069a2:	4b6e      	ldr	r3, [pc, #440]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	4a6d      	ldr	r2, [pc, #436]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 80069a8:	f023 0304 	bic.w	r3, r3, #4
 80069ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d015      	beq.n	80069e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b6:	f7fb fd59 	bl	800246c <HAL_GetTick>
 80069ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069bc:	e00a      	b.n	80069d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069be:	f7fb fd55 	bl	800246c <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e0bc      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d4:	4b61      	ldr	r3, [pc, #388]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 80069d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0ee      	beq.n	80069be <HAL_RCC_OscConfig+0x33a>
 80069e0:	e014      	b.n	8006a0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069e2:	f7fb fd43 	bl	800246c <HAL_GetTick>
 80069e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069e8:	e00a      	b.n	8006a00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ea:	f7fb fd3f 	bl	800246c <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e0a6      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a00:	4b56      	ldr	r3, [pc, #344]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 8006a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1ee      	bne.n	80069ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d105      	bne.n	8006a1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a12:	4b52      	ldr	r3, [pc, #328]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	4a51      	ldr	r2, [pc, #324]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 8006a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 8092 	beq.w	8006b4c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a28:	4b4c      	ldr	r3, [pc, #304]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 030c 	and.w	r3, r3, #12
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d05c      	beq.n	8006aee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d141      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a3c:	4b48      	ldr	r3, [pc, #288]	; (8006b60 <HAL_RCC_OscConfig+0x4dc>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a42:	f7fb fd13 	bl	800246c <HAL_GetTick>
 8006a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a48:	e008      	b.n	8006a5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a4a:	f7fb fd0f 	bl	800246c <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e078      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a5c:	4b3f      	ldr	r3, [pc, #252]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1f0      	bne.n	8006a4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	69da      	ldr	r2, [r3, #28]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	019b      	lsls	r3, r3, #6
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	085b      	lsrs	r3, r3, #1
 8006a80:	3b01      	subs	r3, #1
 8006a82:	041b      	lsls	r3, r3, #16
 8006a84:	431a      	orrs	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	061b      	lsls	r3, r3, #24
 8006a8c:	4933      	ldr	r1, [pc, #204]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a92:	4b33      	ldr	r3, [pc, #204]	; (8006b60 <HAL_RCC_OscConfig+0x4dc>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a98:	f7fb fce8 	bl	800246c <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aa0:	f7fb fce4 	bl	800246c <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e04d      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab2:	4b2a      	ldr	r3, [pc, #168]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f0      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x41c>
 8006abe:	e045      	b.n	8006b4c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac0:	4b27      	ldr	r3, [pc, #156]	; (8006b60 <HAL_RCC_OscConfig+0x4dc>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac6:	f7fb fcd1 	bl	800246c <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ace:	f7fb fccd 	bl	800246c <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e036      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae0:	4b1e      	ldr	r3, [pc, #120]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f0      	bne.n	8006ace <HAL_RCC_OscConfig+0x44a>
 8006aec:	e02e      	b.n	8006b4c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d101      	bne.n	8006afa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e029      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006afa:	4b18      	ldr	r3, [pc, #96]	; (8006b5c <HAL_RCC_OscConfig+0x4d8>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d11c      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d115      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b22:	4013      	ands	r3, r2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d10d      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d106      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	40007000 	.word	0x40007000
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	42470060 	.word	0x42470060

08006b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0cc      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b78:	4b68      	ldr	r3, [pc, #416]	; (8006d1c <HAL_RCC_ClockConfig+0x1b8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 030f 	and.w	r3, r3, #15
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d90c      	bls.n	8006ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b86:	4b65      	ldr	r3, [pc, #404]	; (8006d1c <HAL_RCC_ClockConfig+0x1b8>)
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b8e:	4b63      	ldr	r3, [pc, #396]	; (8006d1c <HAL_RCC_ClockConfig+0x1b8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 030f 	and.w	r3, r3, #15
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d001      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e0b8      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d020      	beq.n	8006bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bb8:	4b59      	ldr	r3, [pc, #356]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4a58      	ldr	r2, [pc, #352]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bd0:	4b53      	ldr	r3, [pc, #332]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	4a52      	ldr	r2, [pc, #328]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bdc:	4b50      	ldr	r3, [pc, #320]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	494d      	ldr	r1, [pc, #308]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d044      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d107      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c02:	4b47      	ldr	r3, [pc, #284]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d119      	bne.n	8006c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e07f      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d003      	beq.n	8006c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d107      	bne.n	8006c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c22:	4b3f      	ldr	r3, [pc, #252]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d109      	bne.n	8006c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e06f      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c32:	4b3b      	ldr	r3, [pc, #236]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e067      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c42:	4b37      	ldr	r3, [pc, #220]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f023 0203 	bic.w	r2, r3, #3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	4934      	ldr	r1, [pc, #208]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c54:	f7fb fc0a 	bl	800246c <HAL_GetTick>
 8006c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5a:	e00a      	b.n	8006c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c5c:	f7fb fc06 	bl	800246c <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e04f      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c72:	4b2b      	ldr	r3, [pc, #172]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 020c 	and.w	r2, r3, #12
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d1eb      	bne.n	8006c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c84:	4b25      	ldr	r3, [pc, #148]	; (8006d1c <HAL_RCC_ClockConfig+0x1b8>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d20c      	bcs.n	8006cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c92:	4b22      	ldr	r3, [pc, #136]	; (8006d1c <HAL_RCC_ClockConfig+0x1b8>)
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9a:	4b20      	ldr	r3, [pc, #128]	; (8006d1c <HAL_RCC_ClockConfig+0x1b8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d001      	beq.n	8006cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e032      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cb8:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	4916      	ldr	r1, [pc, #88]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d009      	beq.n	8006cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cd6:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	490e      	ldr	r1, [pc, #56]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cea:	f000 f821 	bl	8006d30 <HAL_RCC_GetSysClockFreq>
 8006cee:	4601      	mov	r1, r0
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	091b      	lsrs	r3, r3, #4
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	4a0a      	ldr	r2, [pc, #40]	; (8006d24 <HAL_RCC_ClockConfig+0x1c0>)
 8006cfc:	5cd3      	ldrb	r3, [r2, r3]
 8006cfe:	fa21 f303 	lsr.w	r3, r1, r3
 8006d02:	4a09      	ldr	r2, [pc, #36]	; (8006d28 <HAL_RCC_ClockConfig+0x1c4>)
 8006d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d06:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <HAL_RCC_ClockConfig+0x1c8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fb fb6a 	bl	80023e4 <HAL_InitTick>

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40023c00 	.word	0x40023c00
 8006d20:	40023800 	.word	0x40023800
 8006d24:	0800eb14 	.word	0x0800eb14
 8006d28:	20000000 	.word	0x20000000
 8006d2c:	20000004 	.word	0x20000004

08006d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	607b      	str	r3, [r7, #4]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d46:	4b63      	ldr	r3, [pc, #396]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d007      	beq.n	8006d62 <HAL_RCC_GetSysClockFreq+0x32>
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d008      	beq.n	8006d68 <HAL_RCC_GetSysClockFreq+0x38>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f040 80b4 	bne.w	8006ec4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d5c:	4b5e      	ldr	r3, [pc, #376]	; (8006ed8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006d5e:	60bb      	str	r3, [r7, #8]
       break;
 8006d60:	e0b3      	b.n	8006eca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d62:	4b5e      	ldr	r3, [pc, #376]	; (8006edc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006d64:	60bb      	str	r3, [r7, #8]
      break;
 8006d66:	e0b0      	b.n	8006eca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d68:	4b5a      	ldr	r3, [pc, #360]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d72:	4b58      	ldr	r3, [pc, #352]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d04a      	beq.n	8006e14 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d7e:	4b55      	ldr	r3, [pc, #340]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	099b      	lsrs	r3, r3, #6
 8006d84:	f04f 0400 	mov.w	r4, #0
 8006d88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	ea03 0501 	and.w	r5, r3, r1
 8006d94:	ea04 0602 	and.w	r6, r4, r2
 8006d98:	4629      	mov	r1, r5
 8006d9a:	4632      	mov	r2, r6
 8006d9c:	f04f 0300 	mov.w	r3, #0
 8006da0:	f04f 0400 	mov.w	r4, #0
 8006da4:	0154      	lsls	r4, r2, #5
 8006da6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006daa:	014b      	lsls	r3, r1, #5
 8006dac:	4619      	mov	r1, r3
 8006dae:	4622      	mov	r2, r4
 8006db0:	1b49      	subs	r1, r1, r5
 8006db2:	eb62 0206 	sbc.w	r2, r2, r6
 8006db6:	f04f 0300 	mov.w	r3, #0
 8006dba:	f04f 0400 	mov.w	r4, #0
 8006dbe:	0194      	lsls	r4, r2, #6
 8006dc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006dc4:	018b      	lsls	r3, r1, #6
 8006dc6:	1a5b      	subs	r3, r3, r1
 8006dc8:	eb64 0402 	sbc.w	r4, r4, r2
 8006dcc:	f04f 0100 	mov.w	r1, #0
 8006dd0:	f04f 0200 	mov.w	r2, #0
 8006dd4:	00e2      	lsls	r2, r4, #3
 8006dd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006dda:	00d9      	lsls	r1, r3, #3
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4614      	mov	r4, r2
 8006de0:	195b      	adds	r3, r3, r5
 8006de2:	eb44 0406 	adc.w	r4, r4, r6
 8006de6:	f04f 0100 	mov.w	r1, #0
 8006dea:	f04f 0200 	mov.w	r2, #0
 8006dee:	0262      	lsls	r2, r4, #9
 8006df0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006df4:	0259      	lsls	r1, r3, #9
 8006df6:	460b      	mov	r3, r1
 8006df8:	4614      	mov	r4, r2
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f04f 0400 	mov.w	r4, #0
 8006e04:	461a      	mov	r2, r3
 8006e06:	4623      	mov	r3, r4
 8006e08:	f7f9 fede 	bl	8000bc8 <__aeabi_uldivmod>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	e049      	b.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e14:	4b2f      	ldr	r3, [pc, #188]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	099b      	lsrs	r3, r3, #6
 8006e1a:	f04f 0400 	mov.w	r4, #0
 8006e1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	ea03 0501 	and.w	r5, r3, r1
 8006e2a:	ea04 0602 	and.w	r6, r4, r2
 8006e2e:	4629      	mov	r1, r5
 8006e30:	4632      	mov	r2, r6
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	f04f 0400 	mov.w	r4, #0
 8006e3a:	0154      	lsls	r4, r2, #5
 8006e3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e40:	014b      	lsls	r3, r1, #5
 8006e42:	4619      	mov	r1, r3
 8006e44:	4622      	mov	r2, r4
 8006e46:	1b49      	subs	r1, r1, r5
 8006e48:	eb62 0206 	sbc.w	r2, r2, r6
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	f04f 0400 	mov.w	r4, #0
 8006e54:	0194      	lsls	r4, r2, #6
 8006e56:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e5a:	018b      	lsls	r3, r1, #6
 8006e5c:	1a5b      	subs	r3, r3, r1
 8006e5e:	eb64 0402 	sbc.w	r4, r4, r2
 8006e62:	f04f 0100 	mov.w	r1, #0
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	00e2      	lsls	r2, r4, #3
 8006e6c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e70:	00d9      	lsls	r1, r3, #3
 8006e72:	460b      	mov	r3, r1
 8006e74:	4614      	mov	r4, r2
 8006e76:	195b      	adds	r3, r3, r5
 8006e78:	eb44 0406 	adc.w	r4, r4, r6
 8006e7c:	f04f 0100 	mov.w	r1, #0
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	02a2      	lsls	r2, r4, #10
 8006e86:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006e8a:	0299      	lsls	r1, r3, #10
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4614      	mov	r4, r2
 8006e90:	4618      	mov	r0, r3
 8006e92:	4621      	mov	r1, r4
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f04f 0400 	mov.w	r4, #0
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	f7f9 fe93 	bl	8000bc8 <__aeabi_uldivmod>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ea8:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	0c1b      	lsrs	r3, r3, #16
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec0:	60bb      	str	r3, [r7, #8]
      break;
 8006ec2:	e002      	b.n	8006eca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ec4:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006ec6:	60bb      	str	r3, [r7, #8]
      break;
 8006ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eca:	68bb      	ldr	r3, [r7, #8]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	00f42400 	.word	0x00f42400
 8006edc:	007a1200 	.word	0x007a1200

08006ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ee4:	4b03      	ldr	r3, [pc, #12]	; (8006ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	20000000 	.word	0x20000000

08006ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006efc:	f7ff fff0 	bl	8006ee0 <HAL_RCC_GetHCLKFreq>
 8006f00:	4601      	mov	r1, r0
 8006f02:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	0a9b      	lsrs	r3, r3, #10
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	4a03      	ldr	r2, [pc, #12]	; (8006f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f0e:	5cd3      	ldrb	r3, [r2, r3]
 8006f10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	0800eb24 	.word	0x0800eb24

08006f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f24:	f7ff ffdc 	bl	8006ee0 <HAL_RCC_GetHCLKFreq>
 8006f28:	4601      	mov	r1, r0
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	0b5b      	lsrs	r3, r3, #13
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	4a03      	ldr	r2, [pc, #12]	; (8006f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f36:	5cd3      	ldrb	r3, [r2, r3]
 8006f38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40023800 	.word	0x40023800
 8006f44:	0800eb24 	.word	0x0800eb24

08006f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e01d      	b.n	8006f96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7fa fec8 	bl	8001d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	4610      	mov	r0, r2
 8006f88:	f000 fb4e 	bl	8007628 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b06      	cmp	r3, #6
 8006fc6:	d007      	beq.n	8006fd8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0201 	orr.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e01d      	b.n	8007034 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d106      	bne.n	8007012 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f815 	bl	800703c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2202      	movs	r2, #2
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3304      	adds	r3, #4
 8007022:	4619      	mov	r1, r3
 8007024:	4610      	mov	r0, r2
 8007026:	f000 faff 	bl	8007628 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2201      	movs	r2, #1
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f000 fdca 	bl	8007bfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <HAL_TIM_PWM_Start+0x74>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <HAL_TIM_PWM_Start+0x2c>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a14      	ldr	r2, [pc, #80]	; (80070c8 <HAL_TIM_PWM_Start+0x78>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d101      	bne.n	8007080 <HAL_TIM_PWM_Start+0x30>
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <HAL_TIM_PWM_Start+0x32>
 8007080:	2300      	movs	r3, #0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d007      	beq.n	8007096 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007094:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b06      	cmp	r3, #6
 80070a6:	d007      	beq.n	80070b8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	40010000 	.word	0x40010000
 80070c8:	40010400 	.word	0x40010400

080070cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d122      	bne.n	8007128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f003 0302 	and.w	r3, r3, #2
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d11b      	bne.n	8007128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0202 	mvn.w	r2, #2
 80070f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa6b 	bl	80075ea <HAL_TIM_IC_CaptureCallback>
 8007114:	e005      	b.n	8007122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa5d 	bl	80075d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fa6e 	bl	80075fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f003 0304 	and.w	r3, r3, #4
 8007132:	2b04      	cmp	r3, #4
 8007134:	d122      	bne.n	800717c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b04      	cmp	r3, #4
 8007142:	d11b      	bne.n	800717c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0204 	mvn.w	r2, #4
 800714c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2202      	movs	r2, #2
 8007152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa41 	bl	80075ea <HAL_TIM_IC_CaptureCallback>
 8007168:	e005      	b.n	8007176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa33 	bl	80075d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fa44 	bl	80075fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b08      	cmp	r3, #8
 8007188:	d122      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b08      	cmp	r3, #8
 8007196:	d11b      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f06f 0208 	mvn.w	r2, #8
 80071a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2204      	movs	r2, #4
 80071a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa17 	bl	80075ea <HAL_TIM_IC_CaptureCallback>
 80071bc:	e005      	b.n	80071ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa09 	bl	80075d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fa1a 	bl	80075fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0310 	and.w	r3, r3, #16
 80071da:	2b10      	cmp	r3, #16
 80071dc:	d122      	bne.n	8007224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	2b10      	cmp	r3, #16
 80071ea:	d11b      	bne.n	8007224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0210 	mvn.w	r2, #16
 80071f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2208      	movs	r2, #8
 80071fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f9ed 	bl	80075ea <HAL_TIM_IC_CaptureCallback>
 8007210:	e005      	b.n	800721e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f9df 	bl	80075d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f9f0 	bl	80075fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b01      	cmp	r3, #1
 8007230:	d10e      	bne.n	8007250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b01      	cmp	r3, #1
 800723e:	d107      	bne.n	8007250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0201 	mvn.w	r2, #1
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f003 fc08 	bl	800aa60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725a:	2b80      	cmp	r3, #128	; 0x80
 800725c:	d10e      	bne.n	800727c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007268:	2b80      	cmp	r3, #128	; 0x80
 800726a:	d107      	bne.n	800727c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fd6c 	bl	8007d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007286:	2b40      	cmp	r3, #64	; 0x40
 8007288:	d10e      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007294:	2b40      	cmp	r3, #64	; 0x40
 8007296:	d107      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f9b5 	bl	8007612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	d10e      	bne.n	80072d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	d107      	bne.n	80072d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f06f 0220 	mvn.w	r2, #32
 80072cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fd36 	bl	8007d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072d4:	bf00      	nop
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e0b4      	b.n	8007460 <HAL_TIM_PWM_ConfigChannel+0x184>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2202      	movs	r2, #2
 8007302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b0c      	cmp	r3, #12
 800730a:	f200 809f 	bhi.w	800744c <HAL_TIM_PWM_ConfigChannel+0x170>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007349 	.word	0x08007349
 8007318:	0800744d 	.word	0x0800744d
 800731c:	0800744d 	.word	0x0800744d
 8007320:	0800744d 	.word	0x0800744d
 8007324:	08007389 	.word	0x08007389
 8007328:	0800744d 	.word	0x0800744d
 800732c:	0800744d 	.word	0x0800744d
 8007330:	0800744d 	.word	0x0800744d
 8007334:	080073cb 	.word	0x080073cb
 8007338:	0800744d 	.word	0x0800744d
 800733c:	0800744d 	.word	0x0800744d
 8007340:	0800744d 	.word	0x0800744d
 8007344:	0800740b 	.word	0x0800740b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fa0a 	bl	8007768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0208 	orr.w	r2, r2, #8
 8007362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0204 	bic.w	r2, r2, #4
 8007372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6999      	ldr	r1, [r3, #24]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	691a      	ldr	r2, [r3, #16]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	619a      	str	r2, [r3, #24]
      break;
 8007386:	e062      	b.n	800744e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fa5a 	bl	8007848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6999      	ldr	r1, [r3, #24]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	021a      	lsls	r2, r3, #8
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	619a      	str	r2, [r3, #24]
      break;
 80073c8:	e041      	b.n	800744e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 faaf 	bl	8007934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69da      	ldr	r2, [r3, #28]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0208 	orr.w	r2, r2, #8
 80073e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0204 	bic.w	r2, r2, #4
 80073f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69d9      	ldr	r1, [r3, #28]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	691a      	ldr	r2, [r3, #16]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	61da      	str	r2, [r3, #28]
      break;
 8007408:	e021      	b.n	800744e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68b9      	ldr	r1, [r7, #8]
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fb03 	bl	8007a1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69da      	ldr	r2, [r3, #28]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69d9      	ldr	r1, [r3, #28]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	021a      	lsls	r2, r3, #8
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	61da      	str	r2, [r3, #28]
      break;
 800744a:	e000      	b.n	800744e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800744c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <HAL_TIM_ConfigClockSource+0x18>
 800747c:	2302      	movs	r3, #2
 800747e:	e0a6      	b.n	80075ce <HAL_TIM_ConfigClockSource+0x166>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800749e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b40      	cmp	r3, #64	; 0x40
 80074b6:	d067      	beq.n	8007588 <HAL_TIM_ConfigClockSource+0x120>
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d80b      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x6c>
 80074bc:	2b10      	cmp	r3, #16
 80074be:	d073      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x140>
 80074c0:	2b10      	cmp	r3, #16
 80074c2:	d802      	bhi.n	80074ca <HAL_TIM_ConfigClockSource+0x62>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d06f      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80074c8:	e078      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d06c      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x140>
 80074ce:	2b30      	cmp	r3, #48	; 0x30
 80074d0:	d06a      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80074d2:	e073      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80074d4:	2b70      	cmp	r3, #112	; 0x70
 80074d6:	d00d      	beq.n	80074f4 <HAL_TIM_ConfigClockSource+0x8c>
 80074d8:	2b70      	cmp	r3, #112	; 0x70
 80074da:	d804      	bhi.n	80074e6 <HAL_TIM_ConfigClockSource+0x7e>
 80074dc:	2b50      	cmp	r3, #80	; 0x50
 80074de:	d033      	beq.n	8007548 <HAL_TIM_ConfigClockSource+0xe0>
 80074e0:	2b60      	cmp	r3, #96	; 0x60
 80074e2:	d041      	beq.n	8007568 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80074e4:	e06a      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80074e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ea:	d066      	beq.n	80075ba <HAL_TIM_ConfigClockSource+0x152>
 80074ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f0:	d017      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80074f2:	e063      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	6899      	ldr	r1, [r3, #8]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f000 fb5a 	bl	8007bbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007516:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	609a      	str	r2, [r3, #8]
      break;
 8007520:	e04c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6899      	ldr	r1, [r3, #8]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f000 fb43 	bl	8007bbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007544:	609a      	str	r2, [r3, #8]
      break;
 8007546:	e039      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	6859      	ldr	r1, [r3, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	461a      	mov	r2, r3
 8007556:	f000 fab7 	bl	8007ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2150      	movs	r1, #80	; 0x50
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fb10 	bl	8007b86 <TIM_ITRx_SetConfig>
      break;
 8007566:	e029      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6818      	ldr	r0, [r3, #0]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	6859      	ldr	r1, [r3, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	461a      	mov	r2, r3
 8007576:	f000 fad6 	bl	8007b26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2160      	movs	r1, #96	; 0x60
 8007580:	4618      	mov	r0, r3
 8007582:	f000 fb00 	bl	8007b86 <TIM_ITRx_SetConfig>
      break;
 8007586:	e019      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6818      	ldr	r0, [r3, #0]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	6859      	ldr	r1, [r3, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	461a      	mov	r2, r3
 8007596:	f000 fa97 	bl	8007ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2140      	movs	r1, #64	; 0x40
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 faf0 	bl	8007b86 <TIM_ITRx_SetConfig>
      break;
 80075a6:	e009      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f000 fae7 	bl	8007b86 <TIM_ITRx_SetConfig>
      break;
 80075b8:	e000      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80075ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a40      	ldr	r2, [pc, #256]	; (800773c <TIM_Base_SetConfig+0x114>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d013      	beq.n	8007668 <TIM_Base_SetConfig+0x40>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007646:	d00f      	beq.n	8007668 <TIM_Base_SetConfig+0x40>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a3d      	ldr	r2, [pc, #244]	; (8007740 <TIM_Base_SetConfig+0x118>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00b      	beq.n	8007668 <TIM_Base_SetConfig+0x40>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a3c      	ldr	r2, [pc, #240]	; (8007744 <TIM_Base_SetConfig+0x11c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d007      	beq.n	8007668 <TIM_Base_SetConfig+0x40>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a3b      	ldr	r2, [pc, #236]	; (8007748 <TIM_Base_SetConfig+0x120>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d003      	beq.n	8007668 <TIM_Base_SetConfig+0x40>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a3a      	ldr	r2, [pc, #232]	; (800774c <TIM_Base_SetConfig+0x124>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d108      	bne.n	800767a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a2f      	ldr	r2, [pc, #188]	; (800773c <TIM_Base_SetConfig+0x114>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d02b      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007688:	d027      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a2c      	ldr	r2, [pc, #176]	; (8007740 <TIM_Base_SetConfig+0x118>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d023      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a2b      	ldr	r2, [pc, #172]	; (8007744 <TIM_Base_SetConfig+0x11c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d01f      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a2a      	ldr	r2, [pc, #168]	; (8007748 <TIM_Base_SetConfig+0x120>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d01b      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a29      	ldr	r2, [pc, #164]	; (800774c <TIM_Base_SetConfig+0x124>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d017      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a28      	ldr	r2, [pc, #160]	; (8007750 <TIM_Base_SetConfig+0x128>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a27      	ldr	r2, [pc, #156]	; (8007754 <TIM_Base_SetConfig+0x12c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00f      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a26      	ldr	r2, [pc, #152]	; (8007758 <TIM_Base_SetConfig+0x130>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00b      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a25      	ldr	r2, [pc, #148]	; (800775c <TIM_Base_SetConfig+0x134>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d007      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a24      	ldr	r2, [pc, #144]	; (8007760 <TIM_Base_SetConfig+0x138>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d003      	beq.n	80076da <TIM_Base_SetConfig+0xb2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a23      	ldr	r2, [pc, #140]	; (8007764 <TIM_Base_SetConfig+0x13c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d108      	bne.n	80076ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a0a      	ldr	r2, [pc, #40]	; (800773c <TIM_Base_SetConfig+0x114>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d003      	beq.n	8007720 <TIM_Base_SetConfig+0xf8>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a0c      	ldr	r2, [pc, #48]	; (800774c <TIM_Base_SetConfig+0x124>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d103      	bne.n	8007728 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	615a      	str	r2, [r3, #20]
}
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	40010000 	.word	0x40010000
 8007740:	40000400 	.word	0x40000400
 8007744:	40000800 	.word	0x40000800
 8007748:	40000c00 	.word	0x40000c00
 800774c:	40010400 	.word	0x40010400
 8007750:	40014000 	.word	0x40014000
 8007754:	40014400 	.word	0x40014400
 8007758:	40014800 	.word	0x40014800
 800775c:	40001800 	.word	0x40001800
 8007760:	40001c00 	.word	0x40001c00
 8007764:	40002000 	.word	0x40002000

08007768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	f023 0201 	bic.w	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0303 	bic.w	r3, r3, #3
 800779e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f023 0302 	bic.w	r3, r3, #2
 80077b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a20      	ldr	r2, [pc, #128]	; (8007840 <TIM_OC1_SetConfig+0xd8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_OC1_SetConfig+0x64>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a1f      	ldr	r2, [pc, #124]	; (8007844 <TIM_OC1_SetConfig+0xdc>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d10c      	bne.n	80077e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f023 0308 	bic.w	r3, r3, #8
 80077d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	4313      	orrs	r3, r2
 80077dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f023 0304 	bic.w	r3, r3, #4
 80077e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a15      	ldr	r2, [pc, #84]	; (8007840 <TIM_OC1_SetConfig+0xd8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d003      	beq.n	80077f6 <TIM_OC1_SetConfig+0x8e>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a14      	ldr	r2, [pc, #80]	; (8007844 <TIM_OC1_SetConfig+0xdc>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d111      	bne.n	800781a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	4313      	orrs	r3, r2
 800780e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	621a      	str	r2, [r3, #32]
}
 8007834:	bf00      	nop
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	40010000 	.word	0x40010000
 8007844:	40010400 	.word	0x40010400

08007848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	f023 0210 	bic.w	r2, r3, #16
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800787e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	4313      	orrs	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f023 0320 	bic.w	r3, r3, #32
 8007892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	4313      	orrs	r3, r2
 800789e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a22      	ldr	r2, [pc, #136]	; (800792c <TIM_OC2_SetConfig+0xe4>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d003      	beq.n	80078b0 <TIM_OC2_SetConfig+0x68>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a21      	ldr	r2, [pc, #132]	; (8007930 <TIM_OC2_SetConfig+0xe8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d10d      	bne.n	80078cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a17      	ldr	r2, [pc, #92]	; (800792c <TIM_OC2_SetConfig+0xe4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_OC2_SetConfig+0x94>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a16      	ldr	r2, [pc, #88]	; (8007930 <TIM_OC2_SetConfig+0xe8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d113      	bne.n	8007904 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40010000 	.word	0x40010000
 8007930:	40010400 	.word	0x40010400

08007934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0303 	bic.w	r3, r3, #3
 800796a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800797c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	021b      	lsls	r3, r3, #8
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	4313      	orrs	r3, r2
 8007988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <TIM_OC3_SetConfig+0xe0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d003      	beq.n	800799a <TIM_OC3_SetConfig+0x66>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a20      	ldr	r2, [pc, #128]	; (8007a18 <TIM_OC3_SetConfig+0xe4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d10d      	bne.n	80079b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a16      	ldr	r2, [pc, #88]	; (8007a14 <TIM_OC3_SetConfig+0xe0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d003      	beq.n	80079c6 <TIM_OC3_SetConfig+0x92>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a15      	ldr	r2, [pc, #84]	; (8007a18 <TIM_OC3_SetConfig+0xe4>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d113      	bne.n	80079ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	621a      	str	r2, [r3, #32]
}
 8007a08:	bf00      	nop
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	40010000 	.word	0x40010000
 8007a18:	40010400 	.word	0x40010400

08007a1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	021b      	lsls	r3, r3, #8
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	031b      	lsls	r3, r3, #12
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a12      	ldr	r2, [pc, #72]	; (8007ac0 <TIM_OC4_SetConfig+0xa4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d003      	beq.n	8007a84 <TIM_OC4_SetConfig+0x68>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <TIM_OC4_SetConfig+0xa8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d109      	bne.n	8007a98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	019b      	lsls	r3, r3, #6
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	621a      	str	r2, [r3, #32]
}
 8007ab2:	bf00      	nop
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	40010000 	.word	0x40010000
 8007ac4:	40010400 	.word	0x40010400

08007ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	f023 0201 	bic.w	r2, r3, #1
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f023 030a 	bic.w	r3, r3, #10
 8007b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	621a      	str	r2, [r3, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b087      	sub	sp, #28
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	f023 0210 	bic.w	r2, r3, #16
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	031b      	lsls	r3, r3, #12
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	011b      	lsls	r3, r3, #4
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	621a      	str	r2, [r3, #32]
}
 8007b7a:	bf00      	nop
 8007b7c:	371c      	adds	r7, #28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b085      	sub	sp, #20
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f043 0307 	orr.w	r3, r3, #7
 8007ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	609a      	str	r2, [r3, #8]
}
 8007bb0:	bf00      	nop
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
 8007bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	021a      	lsls	r2, r3, #8
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	431a      	orrs	r2, r3
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	609a      	str	r2, [r3, #8]
}
 8007bf0:	bf00      	nop
 8007bf2:	371c      	adds	r7, #28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f003 031f 	and.w	r3, r3, #31
 8007c0e:	2201      	movs	r2, #1
 8007c10:	fa02 f303 	lsl.w	r3, r2, r3
 8007c14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a1a      	ldr	r2, [r3, #32]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	43db      	mvns	r3, r3
 8007c1e:	401a      	ands	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a1a      	ldr	r2, [r3, #32]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f003 031f 	and.w	r3, r3, #31
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	fa01 f303 	lsl.w	r3, r1, r3
 8007c34:	431a      	orrs	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	621a      	str	r2, [r3, #32]
}
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
	...

08007c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d101      	bne.n	8007c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e05a      	b.n	8007d16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a21      	ldr	r2, [pc, #132]	; (8007d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d022      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cac:	d01d      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a1d      	ldr	r2, [pc, #116]	; (8007d28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d018      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a1b      	ldr	r2, [pc, #108]	; (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d013      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a1a      	ldr	r2, [pc, #104]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d00e      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a18      	ldr	r2, [pc, #96]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d009      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d004      	beq.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a15      	ldr	r2, [pc, #84]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d10c      	bne.n	8007d04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	40010000 	.word	0x40010000
 8007d28:	40000400 	.word	0x40000400
 8007d2c:	40000800 	.word	0x40000800
 8007d30:	40000c00 	.word	0x40000c00
 8007d34:	40010400 	.word	0x40010400
 8007d38:	40014000 	.word	0x40014000
 8007d3c:	40001800 	.word	0x40001800

08007d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e03f      	b.n	8007dfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d106      	bne.n	8007d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7fa f94e 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2224      	movs	r2, #36	; 0x24
 8007d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fc6d 	bl	800868c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691a      	ldr	r2, [r3, #16]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	695a      	ldr	r2, [r3, #20]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b088      	sub	sp, #32
 8007e06:	af02      	add	r7, sp, #8
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	603b      	str	r3, [r7, #0]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	f040 8083 	bne.w	8007f2a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <HAL_UART_Transmit+0x2e>
 8007e2a:	88fb      	ldrh	r3, [r7, #6]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e07b      	b.n	8007f2c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <HAL_UART_Transmit+0x40>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e074      	b.n	8007f2c <HAL_UART_Transmit+0x12a>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2221      	movs	r2, #33	; 0x21
 8007e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007e58:	f7fa fb08 	bl	800246c <HAL_GetTick>
 8007e5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	88fa      	ldrh	r2, [r7, #6]
 8007e62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	88fa      	ldrh	r2, [r7, #6]
 8007e68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007e72:	e042      	b.n	8007efa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8a:	d122      	bne.n	8007ed2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2200      	movs	r2, #0
 8007e94:	2180      	movs	r1, #128	; 0x80
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fa76 	bl	8008388 <UART_WaitOnFlagUntilTimeout>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e042      	b.n	8007f2c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eb8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d103      	bne.n	8007eca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	3302      	adds	r3, #2
 8007ec6:	60bb      	str	r3, [r7, #8]
 8007ec8:	e017      	b.n	8007efa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	60bb      	str	r3, [r7, #8]
 8007ed0:	e013      	b.n	8007efa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2180      	movs	r1, #128	; 0x80
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fa53 	bl	8008388 <UART_WaitOnFlagUntilTimeout>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e01f      	b.n	8007f2c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	60ba      	str	r2, [r7, #8]
 8007ef2:	781a      	ldrb	r2, [r3, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1b7      	bne.n	8007e74 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2140      	movs	r1, #64	; 0x40
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 fa3a 	bl	8008388 <UART_WaitOnFlagUntilTimeout>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e006      	b.n	8007f2c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	e000      	b.n	8007f2c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007f2a:	2302      	movs	r3, #2
  }
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	d166      	bne.n	800801c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <HAL_UART_Receive_DMA+0x26>
 8007f54:	88fb      	ldrh	r3, [r7, #6]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e05f      	b.n	800801e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_UART_Receive_DMA+0x38>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e058      	b.n	800801e <HAL_UART_Receive_DMA+0xea>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	88fa      	ldrh	r2, [r7, #6]
 8007f7e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2222      	movs	r2, #34	; 0x22
 8007f8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f92:	4a25      	ldr	r2, [pc, #148]	; (8008028 <HAL_UART_Receive_DMA+0xf4>)
 8007f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9a:	4a24      	ldr	r2, [pc, #144]	; (800802c <HAL_UART_Receive_DMA+0xf8>)
 8007f9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa2:	4a23      	ldr	r2, [pc, #140]	; (8008030 <HAL_UART_Receive_DMA+0xfc>)
 8007fa4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007faa:	2200      	movs	r2, #0
 8007fac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007fae:	f107 0308 	add.w	r3, r7, #8
 8007fb2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	88fb      	ldrh	r3, [r7, #6]
 8007fc6:	f7fa fc3f 	bl	8002848 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007fca:	2300      	movs	r3, #0
 8007fcc:	613b      	str	r3, [r7, #16]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	613b      	str	r3, [r7, #16]
 8007fde:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ff6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	695a      	ldr	r2, [r3, #20]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f042 0201 	orr.w	r2, r2, #1
 8008006:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	695a      	ldr	r2, [r3, #20]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008016:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	e000      	b.n	800801e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800801c:	2302      	movs	r3, #2
  }
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	08008271 	.word	0x08008271
 800802c:	080082d9 	.word	0x080082d9
 8008030:	080082f5 	.word	0x080082f5

08008034 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008054:	2300      	movs	r3, #0
 8008056:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	f003 030f 	and.w	r3, r3, #15
 8008062:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10d      	bne.n	8008086 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	2b00      	cmp	r3, #0
 8008072:	d008      	beq.n	8008086 <HAL_UART_IRQHandler+0x52>
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fa82 	bl	8008588 <UART_Receive_IT>
      return;
 8008084:	e0d1      	b.n	800822a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 80b0 	beq.w	80081ee <HAL_UART_IRQHandler+0x1ba>
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	2b00      	cmp	r3, #0
 8008096:	d105      	bne.n	80080a4 <HAL_UART_IRQHandler+0x70>
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 80a5 	beq.w	80081ee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <HAL_UART_IRQHandler+0x90>
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d005      	beq.n	80080c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080bc:	f043 0201 	orr.w	r2, r3, #1
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	f003 0304 	and.w	r3, r3, #4
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <HAL_UART_IRQHandler+0xb0>
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080dc:	f043 0202 	orr.w	r2, r3, #2
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <HAL_UART_IRQHandler+0xd0>
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d005      	beq.n	8008104 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fc:	f043 0204 	orr.w	r2, r3, #4
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	f003 0308 	and.w	r3, r3, #8
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00f      	beq.n	800812e <HAL_UART_IRQHandler+0xfa>
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	f003 0320 	and.w	r3, r3, #32
 8008114:	2b00      	cmp	r3, #0
 8008116:	d104      	bne.n	8008122 <HAL_UART_IRQHandler+0xee>
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d005      	beq.n	800812e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008126:	f043 0208 	orr.w	r2, r3, #8
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d078      	beq.n	8008228 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	f003 0320 	and.w	r3, r3, #32
 800813c:	2b00      	cmp	r3, #0
 800813e:	d007      	beq.n	8008150 <HAL_UART_IRQHandler+0x11c>
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa1c 	bl	8008588 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815a:	2b40      	cmp	r3, #64	; 0x40
 800815c:	bf0c      	ite	eq
 800815e:	2301      	moveq	r3, #1
 8008160:	2300      	movne	r3, #0
 8008162:	b2db      	uxtb	r3, r3
 8008164:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d102      	bne.n	8008178 <HAL_UART_IRQHandler+0x144>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d031      	beq.n	80081dc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f965 	bl	8008448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008188:	2b40      	cmp	r3, #64	; 0x40
 800818a:	d123      	bne.n	80081d4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	695a      	ldr	r2, [r3, #20]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800819a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d013      	beq.n	80081cc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a8:	4a21      	ldr	r2, [pc, #132]	; (8008230 <HAL_UART_IRQHandler+0x1fc>)
 80081aa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fa fba1 	bl	80028f8 <HAL_DMA_Abort_IT>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d016      	beq.n	80081ea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80081c6:	4610      	mov	r0, r2
 80081c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ca:	e00e      	b.n	80081ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f845 	bl	800825c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d2:	e00a      	b.n	80081ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f841 	bl	800825c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081da:	e006      	b.n	80081ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f83d 	bl	800825c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80081e8:	e01e      	b.n	8008228 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ea:	bf00      	nop
    return;
 80081ec:	e01c      	b.n	8008228 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d008      	beq.n	800820a <HAL_UART_IRQHandler+0x1d6>
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f952 	bl	80084ac <UART_Transmit_IT>
    return;
 8008208:	e00f      	b.n	800822a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00a      	beq.n	800822a <HAL_UART_IRQHandler+0x1f6>
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821a:	2b00      	cmp	r3, #0
 800821c:	d005      	beq.n	800822a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f99a 	bl	8008558 <UART_EndTransmit_IT>
    return;
 8008224:	bf00      	nop
 8008226:	e000      	b.n	800822a <HAL_UART_IRQHandler+0x1f6>
    return;
 8008228:	bf00      	nop
  }
}
 800822a:	3720      	adds	r7, #32
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	08008485 	.word	0x08008485

08008234 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008288:	2b00      	cmp	r3, #0
 800828a:	d11e      	bne.n	80082ca <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082a0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695a      	ldr	r2, [r3, #20]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0201 	bic.w	r2, r2, #1
 80082b0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	695a      	ldr	r2, [r3, #20]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082c0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2220      	movs	r2, #32
 80082c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f002 fbec 	bl	800aaa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff ffae 	bl	8008248 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082ec:	bf00      	nop
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008310:	2b80      	cmp	r3, #128	; 0x80
 8008312:	bf0c      	ite	eq
 8008314:	2301      	moveq	r3, #1
 8008316:	2300      	movne	r3, #0
 8008318:	b2db      	uxtb	r3, r3
 800831a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b21      	cmp	r3, #33	; 0x21
 8008326:	d108      	bne.n	800833a <UART_DMAError+0x46>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d005      	beq.n	800833a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2200      	movs	r2, #0
 8008332:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008334:	68b8      	ldr	r0, [r7, #8]
 8008336:	f000 f871 	bl	800841c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008344:	2b40      	cmp	r3, #64	; 0x40
 8008346:	bf0c      	ite	eq
 8008348:	2301      	moveq	r3, #1
 800834a:	2300      	movne	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b22      	cmp	r3, #34	; 0x22
 800835a:	d108      	bne.n	800836e <UART_DMAError+0x7a>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d005      	beq.n	800836e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008368:	68b8      	ldr	r0, [r7, #8]
 800836a:	f000 f86d 	bl	8008448 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008372:	f043 0210 	orr.w	r2, r3, #16
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800837a:	68b8      	ldr	r0, [r7, #8]
 800837c:	f7ff ff6e 	bl	800825c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008380:	bf00      	nop
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	4613      	mov	r3, r2
 8008396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008398:	e02c      	b.n	80083f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a0:	d028      	beq.n	80083f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d007      	beq.n	80083b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80083a8:	f7fa f860 	bl	800246c <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d21d      	bcs.n	80083f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80083c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0201 	bic.w	r2, r2, #1
 80083d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2220      	movs	r2, #32
 80083dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2220      	movs	r2, #32
 80083e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e00f      	b.n	8008414 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	4013      	ands	r3, r2
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	429a      	cmp	r2, r3
 8008402:	bf0c      	ite	eq
 8008404:	2301      	moveq	r3, #1
 8008406:	2300      	movne	r3, #0
 8008408:	b2db      	uxtb	r3, r3
 800840a:	461a      	mov	r2, r3
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	429a      	cmp	r2, r3
 8008410:	d0c3      	beq.n	800839a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008432:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68da      	ldr	r2, [r3, #12]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800845e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	695a      	ldr	r2, [r3, #20]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 0201 	bic.w	r2, r2, #1
 800846e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2220      	movs	r2, #32
 8008474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f7ff fedc 	bl	800825c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084a4:	bf00      	nop
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b21      	cmp	r3, #33	; 0x21
 80084be:	d144      	bne.n	800854a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c8:	d11a      	bne.n	8008500 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084de:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d105      	bne.n	80084f4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	1c9a      	adds	r2, r3, #2
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	621a      	str	r2, [r3, #32]
 80084f2:	e00e      	b.n	8008512 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	621a      	str	r2, [r3, #32]
 80084fe:	e008      	b.n	8008512 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	1c59      	adds	r1, r3, #1
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6211      	str	r1, [r2, #32]
 800850a:	781a      	ldrb	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008516:	b29b      	uxth	r3, r3
 8008518:	3b01      	subs	r3, #1
 800851a:	b29b      	uxth	r3, r3
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	4619      	mov	r1, r3
 8008520:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10f      	bne.n	8008546 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68da      	ldr	r2, [r3, #12]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008534:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008544:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	e000      	b.n	800854c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800854a:	2302      	movs	r3, #2
  }
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800856e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2220      	movs	r2, #32
 8008574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff fe5b 	bl	8008234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b22      	cmp	r3, #34	; 0x22
 800859a:	d171      	bne.n	8008680 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085a4:	d123      	bne.n	80085ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10e      	bne.n	80085d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ca:	1c9a      	adds	r2, r3, #2
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	629a      	str	r2, [r3, #40]	; 0x28
 80085d0:	e029      	b.n	8008626 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	b29a      	uxth	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	629a      	str	r2, [r3, #40]	; 0x28
 80085ec:	e01b      	b.n	8008626 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10a      	bne.n	800860c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6858      	ldr	r0, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008600:	1c59      	adds	r1, r3, #1
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	6291      	str	r1, [r2, #40]	; 0x28
 8008606:	b2c2      	uxtb	r2, r0
 8008608:	701a      	strb	r2, [r3, #0]
 800860a:	e00c      	b.n	8008626 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	b2da      	uxtb	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	1c58      	adds	r0, r3, #1
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	6288      	str	r0, [r1, #40]	; 0x28
 800861e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008622:	b2d2      	uxtb	r2, r2
 8008624:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	b29b      	uxth	r3, r3
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	4619      	mov	r1, r3
 8008634:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008636:	2b00      	cmp	r3, #0
 8008638:	d120      	bne.n	800867c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f022 0220 	bic.w	r2, r2, #32
 8008648:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68da      	ldr	r2, [r3, #12]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008658:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	695a      	ldr	r2, [r3, #20]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0201 	bic.w	r2, r2, #1
 8008668:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f002 fa18 	bl	800aaa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	e002      	b.n	8008682 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	e000      	b.n	8008682 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008680:	2302      	movs	r3, #2
  }
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	b085      	sub	sp, #20
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	431a      	orrs	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	431a      	orrs	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80086ce:	f023 030c 	bic.w	r3, r3, #12
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	6812      	ldr	r2, [r2, #0]
 80086d6:	68f9      	ldr	r1, [r7, #12]
 80086d8:	430b      	orrs	r3, r1
 80086da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	699a      	ldr	r2, [r3, #24]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086fa:	f040 818b 	bne.w	8008a14 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4ac1      	ldr	r2, [pc, #772]	; (8008a08 <UART_SetConfig+0x37c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d005      	beq.n	8008714 <UART_SetConfig+0x88>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4abf      	ldr	r2, [pc, #764]	; (8008a0c <UART_SetConfig+0x380>)
 800870e:	4293      	cmp	r3, r2
 8008710:	f040 80bd 	bne.w	800888e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008714:	f7fe fc04 	bl	8006f20 <HAL_RCC_GetPCLK2Freq>
 8008718:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	461d      	mov	r5, r3
 800871e:	f04f 0600 	mov.w	r6, #0
 8008722:	46a8      	mov	r8, r5
 8008724:	46b1      	mov	r9, r6
 8008726:	eb18 0308 	adds.w	r3, r8, r8
 800872a:	eb49 0409 	adc.w	r4, r9, r9
 800872e:	4698      	mov	r8, r3
 8008730:	46a1      	mov	r9, r4
 8008732:	eb18 0805 	adds.w	r8, r8, r5
 8008736:	eb49 0906 	adc.w	r9, r9, r6
 800873a:	f04f 0100 	mov.w	r1, #0
 800873e:	f04f 0200 	mov.w	r2, #0
 8008742:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008746:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800874a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800874e:	4688      	mov	r8, r1
 8008750:	4691      	mov	r9, r2
 8008752:	eb18 0005 	adds.w	r0, r8, r5
 8008756:	eb49 0106 	adc.w	r1, r9, r6
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	461d      	mov	r5, r3
 8008760:	f04f 0600 	mov.w	r6, #0
 8008764:	196b      	adds	r3, r5, r5
 8008766:	eb46 0406 	adc.w	r4, r6, r6
 800876a:	461a      	mov	r2, r3
 800876c:	4623      	mov	r3, r4
 800876e:	f7f8 fa2b 	bl	8000bc8 <__aeabi_uldivmod>
 8008772:	4603      	mov	r3, r0
 8008774:	460c      	mov	r4, r1
 8008776:	461a      	mov	r2, r3
 8008778:	4ba5      	ldr	r3, [pc, #660]	; (8008a10 <UART_SetConfig+0x384>)
 800877a:	fba3 2302 	umull	r2, r3, r3, r2
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	461d      	mov	r5, r3
 8008788:	f04f 0600 	mov.w	r6, #0
 800878c:	46a9      	mov	r9, r5
 800878e:	46b2      	mov	sl, r6
 8008790:	eb19 0309 	adds.w	r3, r9, r9
 8008794:	eb4a 040a 	adc.w	r4, sl, sl
 8008798:	4699      	mov	r9, r3
 800879a:	46a2      	mov	sl, r4
 800879c:	eb19 0905 	adds.w	r9, r9, r5
 80087a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80087a4:	f04f 0100 	mov.w	r1, #0
 80087a8:	f04f 0200 	mov.w	r2, #0
 80087ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087b8:	4689      	mov	r9, r1
 80087ba:	4692      	mov	sl, r2
 80087bc:	eb19 0005 	adds.w	r0, r9, r5
 80087c0:	eb4a 0106 	adc.w	r1, sl, r6
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	461d      	mov	r5, r3
 80087ca:	f04f 0600 	mov.w	r6, #0
 80087ce:	196b      	adds	r3, r5, r5
 80087d0:	eb46 0406 	adc.w	r4, r6, r6
 80087d4:	461a      	mov	r2, r3
 80087d6:	4623      	mov	r3, r4
 80087d8:	f7f8 f9f6 	bl	8000bc8 <__aeabi_uldivmod>
 80087dc:	4603      	mov	r3, r0
 80087de:	460c      	mov	r4, r1
 80087e0:	461a      	mov	r2, r3
 80087e2:	4b8b      	ldr	r3, [pc, #556]	; (8008a10 <UART_SetConfig+0x384>)
 80087e4:	fba3 1302 	umull	r1, r3, r3, r2
 80087e8:	095b      	lsrs	r3, r3, #5
 80087ea:	2164      	movs	r1, #100	; 0x64
 80087ec:	fb01 f303 	mul.w	r3, r1, r3
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	3332      	adds	r3, #50	; 0x32
 80087f6:	4a86      	ldr	r2, [pc, #536]	; (8008a10 <UART_SetConfig+0x384>)
 80087f8:	fba2 2303 	umull	r2, r3, r2, r3
 80087fc:	095b      	lsrs	r3, r3, #5
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008804:	4498      	add	r8, r3
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	461d      	mov	r5, r3
 800880a:	f04f 0600 	mov.w	r6, #0
 800880e:	46a9      	mov	r9, r5
 8008810:	46b2      	mov	sl, r6
 8008812:	eb19 0309 	adds.w	r3, r9, r9
 8008816:	eb4a 040a 	adc.w	r4, sl, sl
 800881a:	4699      	mov	r9, r3
 800881c:	46a2      	mov	sl, r4
 800881e:	eb19 0905 	adds.w	r9, r9, r5
 8008822:	eb4a 0a06 	adc.w	sl, sl, r6
 8008826:	f04f 0100 	mov.w	r1, #0
 800882a:	f04f 0200 	mov.w	r2, #0
 800882e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008832:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008836:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800883a:	4689      	mov	r9, r1
 800883c:	4692      	mov	sl, r2
 800883e:	eb19 0005 	adds.w	r0, r9, r5
 8008842:	eb4a 0106 	adc.w	r1, sl, r6
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	461d      	mov	r5, r3
 800884c:	f04f 0600 	mov.w	r6, #0
 8008850:	196b      	adds	r3, r5, r5
 8008852:	eb46 0406 	adc.w	r4, r6, r6
 8008856:	461a      	mov	r2, r3
 8008858:	4623      	mov	r3, r4
 800885a:	f7f8 f9b5 	bl	8000bc8 <__aeabi_uldivmod>
 800885e:	4603      	mov	r3, r0
 8008860:	460c      	mov	r4, r1
 8008862:	461a      	mov	r2, r3
 8008864:	4b6a      	ldr	r3, [pc, #424]	; (8008a10 <UART_SetConfig+0x384>)
 8008866:	fba3 1302 	umull	r1, r3, r3, r2
 800886a:	095b      	lsrs	r3, r3, #5
 800886c:	2164      	movs	r1, #100	; 0x64
 800886e:	fb01 f303 	mul.w	r3, r1, r3
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	3332      	adds	r3, #50	; 0x32
 8008878:	4a65      	ldr	r2, [pc, #404]	; (8008a10 <UART_SetConfig+0x384>)
 800887a:	fba2 2303 	umull	r2, r3, r2, r3
 800887e:	095b      	lsrs	r3, r3, #5
 8008880:	f003 0207 	and.w	r2, r3, #7
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4442      	add	r2, r8
 800888a:	609a      	str	r2, [r3, #8]
 800888c:	e26f      	b.n	8008d6e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800888e:	f7fe fb33 	bl	8006ef8 <HAL_RCC_GetPCLK1Freq>
 8008892:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	461d      	mov	r5, r3
 8008898:	f04f 0600 	mov.w	r6, #0
 800889c:	46a8      	mov	r8, r5
 800889e:	46b1      	mov	r9, r6
 80088a0:	eb18 0308 	adds.w	r3, r8, r8
 80088a4:	eb49 0409 	adc.w	r4, r9, r9
 80088a8:	4698      	mov	r8, r3
 80088aa:	46a1      	mov	r9, r4
 80088ac:	eb18 0805 	adds.w	r8, r8, r5
 80088b0:	eb49 0906 	adc.w	r9, r9, r6
 80088b4:	f04f 0100 	mov.w	r1, #0
 80088b8:	f04f 0200 	mov.w	r2, #0
 80088bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80088c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80088c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80088c8:	4688      	mov	r8, r1
 80088ca:	4691      	mov	r9, r2
 80088cc:	eb18 0005 	adds.w	r0, r8, r5
 80088d0:	eb49 0106 	adc.w	r1, r9, r6
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	461d      	mov	r5, r3
 80088da:	f04f 0600 	mov.w	r6, #0
 80088de:	196b      	adds	r3, r5, r5
 80088e0:	eb46 0406 	adc.w	r4, r6, r6
 80088e4:	461a      	mov	r2, r3
 80088e6:	4623      	mov	r3, r4
 80088e8:	f7f8 f96e 	bl	8000bc8 <__aeabi_uldivmod>
 80088ec:	4603      	mov	r3, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	461a      	mov	r2, r3
 80088f2:	4b47      	ldr	r3, [pc, #284]	; (8008a10 <UART_SetConfig+0x384>)
 80088f4:	fba3 2302 	umull	r2, r3, r3, r2
 80088f8:	095b      	lsrs	r3, r3, #5
 80088fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	461d      	mov	r5, r3
 8008902:	f04f 0600 	mov.w	r6, #0
 8008906:	46a9      	mov	r9, r5
 8008908:	46b2      	mov	sl, r6
 800890a:	eb19 0309 	adds.w	r3, r9, r9
 800890e:	eb4a 040a 	adc.w	r4, sl, sl
 8008912:	4699      	mov	r9, r3
 8008914:	46a2      	mov	sl, r4
 8008916:	eb19 0905 	adds.w	r9, r9, r5
 800891a:	eb4a 0a06 	adc.w	sl, sl, r6
 800891e:	f04f 0100 	mov.w	r1, #0
 8008922:	f04f 0200 	mov.w	r2, #0
 8008926:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800892a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800892e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008932:	4689      	mov	r9, r1
 8008934:	4692      	mov	sl, r2
 8008936:	eb19 0005 	adds.w	r0, r9, r5
 800893a:	eb4a 0106 	adc.w	r1, sl, r6
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	461d      	mov	r5, r3
 8008944:	f04f 0600 	mov.w	r6, #0
 8008948:	196b      	adds	r3, r5, r5
 800894a:	eb46 0406 	adc.w	r4, r6, r6
 800894e:	461a      	mov	r2, r3
 8008950:	4623      	mov	r3, r4
 8008952:	f7f8 f939 	bl	8000bc8 <__aeabi_uldivmod>
 8008956:	4603      	mov	r3, r0
 8008958:	460c      	mov	r4, r1
 800895a:	461a      	mov	r2, r3
 800895c:	4b2c      	ldr	r3, [pc, #176]	; (8008a10 <UART_SetConfig+0x384>)
 800895e:	fba3 1302 	umull	r1, r3, r3, r2
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	2164      	movs	r1, #100	; 0x64
 8008966:	fb01 f303 	mul.w	r3, r1, r3
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	3332      	adds	r3, #50	; 0x32
 8008970:	4a27      	ldr	r2, [pc, #156]	; (8008a10 <UART_SetConfig+0x384>)
 8008972:	fba2 2303 	umull	r2, r3, r2, r3
 8008976:	095b      	lsrs	r3, r3, #5
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800897e:	4498      	add	r8, r3
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	461d      	mov	r5, r3
 8008984:	f04f 0600 	mov.w	r6, #0
 8008988:	46a9      	mov	r9, r5
 800898a:	46b2      	mov	sl, r6
 800898c:	eb19 0309 	adds.w	r3, r9, r9
 8008990:	eb4a 040a 	adc.w	r4, sl, sl
 8008994:	4699      	mov	r9, r3
 8008996:	46a2      	mov	sl, r4
 8008998:	eb19 0905 	adds.w	r9, r9, r5
 800899c:	eb4a 0a06 	adc.w	sl, sl, r6
 80089a0:	f04f 0100 	mov.w	r1, #0
 80089a4:	f04f 0200 	mov.w	r2, #0
 80089a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089b4:	4689      	mov	r9, r1
 80089b6:	4692      	mov	sl, r2
 80089b8:	eb19 0005 	adds.w	r0, r9, r5
 80089bc:	eb4a 0106 	adc.w	r1, sl, r6
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	461d      	mov	r5, r3
 80089c6:	f04f 0600 	mov.w	r6, #0
 80089ca:	196b      	adds	r3, r5, r5
 80089cc:	eb46 0406 	adc.w	r4, r6, r6
 80089d0:	461a      	mov	r2, r3
 80089d2:	4623      	mov	r3, r4
 80089d4:	f7f8 f8f8 	bl	8000bc8 <__aeabi_uldivmod>
 80089d8:	4603      	mov	r3, r0
 80089da:	460c      	mov	r4, r1
 80089dc:	461a      	mov	r2, r3
 80089de:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <UART_SetConfig+0x384>)
 80089e0:	fba3 1302 	umull	r1, r3, r3, r2
 80089e4:	095b      	lsrs	r3, r3, #5
 80089e6:	2164      	movs	r1, #100	; 0x64
 80089e8:	fb01 f303 	mul.w	r3, r1, r3
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	3332      	adds	r3, #50	; 0x32
 80089f2:	4a07      	ldr	r2, [pc, #28]	; (8008a10 <UART_SetConfig+0x384>)
 80089f4:	fba2 2303 	umull	r2, r3, r2, r3
 80089f8:	095b      	lsrs	r3, r3, #5
 80089fa:	f003 0207 	and.w	r2, r3, #7
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4442      	add	r2, r8
 8008a04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008a06:	e1b2      	b.n	8008d6e <UART_SetConfig+0x6e2>
 8008a08:	40011000 	.word	0x40011000
 8008a0c:	40011400 	.word	0x40011400
 8008a10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4ad7      	ldr	r2, [pc, #860]	; (8008d78 <UART_SetConfig+0x6ec>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d005      	beq.n	8008a2a <UART_SetConfig+0x39e>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4ad6      	ldr	r2, [pc, #856]	; (8008d7c <UART_SetConfig+0x6f0>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	f040 80d1 	bne.w	8008bcc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a2a:	f7fe fa79 	bl	8006f20 <HAL_RCC_GetPCLK2Freq>
 8008a2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	469a      	mov	sl, r3
 8008a34:	f04f 0b00 	mov.w	fp, #0
 8008a38:	46d0      	mov	r8, sl
 8008a3a:	46d9      	mov	r9, fp
 8008a3c:	eb18 0308 	adds.w	r3, r8, r8
 8008a40:	eb49 0409 	adc.w	r4, r9, r9
 8008a44:	4698      	mov	r8, r3
 8008a46:	46a1      	mov	r9, r4
 8008a48:	eb18 080a 	adds.w	r8, r8, sl
 8008a4c:	eb49 090b 	adc.w	r9, r9, fp
 8008a50:	f04f 0100 	mov.w	r1, #0
 8008a54:	f04f 0200 	mov.w	r2, #0
 8008a58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008a5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008a60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008a64:	4688      	mov	r8, r1
 8008a66:	4691      	mov	r9, r2
 8008a68:	eb1a 0508 	adds.w	r5, sl, r8
 8008a6c:	eb4b 0609 	adc.w	r6, fp, r9
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	4619      	mov	r1, r3
 8008a76:	f04f 0200 	mov.w	r2, #0
 8008a7a:	f04f 0300 	mov.w	r3, #0
 8008a7e:	f04f 0400 	mov.w	r4, #0
 8008a82:	0094      	lsls	r4, r2, #2
 8008a84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a88:	008b      	lsls	r3, r1, #2
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	4623      	mov	r3, r4
 8008a8e:	4628      	mov	r0, r5
 8008a90:	4631      	mov	r1, r6
 8008a92:	f7f8 f899 	bl	8000bc8 <__aeabi_uldivmod>
 8008a96:	4603      	mov	r3, r0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4bb8      	ldr	r3, [pc, #736]	; (8008d80 <UART_SetConfig+0x6f4>)
 8008a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8008aa2:	095b      	lsrs	r3, r3, #5
 8008aa4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	469b      	mov	fp, r3
 8008aac:	f04f 0c00 	mov.w	ip, #0
 8008ab0:	46d9      	mov	r9, fp
 8008ab2:	46e2      	mov	sl, ip
 8008ab4:	eb19 0309 	adds.w	r3, r9, r9
 8008ab8:	eb4a 040a 	adc.w	r4, sl, sl
 8008abc:	4699      	mov	r9, r3
 8008abe:	46a2      	mov	sl, r4
 8008ac0:	eb19 090b 	adds.w	r9, r9, fp
 8008ac4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008ac8:	f04f 0100 	mov.w	r1, #0
 8008acc:	f04f 0200 	mov.w	r2, #0
 8008ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ad4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ad8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008adc:	4689      	mov	r9, r1
 8008ade:	4692      	mov	sl, r2
 8008ae0:	eb1b 0509 	adds.w	r5, fp, r9
 8008ae4:	eb4c 060a 	adc.w	r6, ip, sl
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	4619      	mov	r1, r3
 8008aee:	f04f 0200 	mov.w	r2, #0
 8008af2:	f04f 0300 	mov.w	r3, #0
 8008af6:	f04f 0400 	mov.w	r4, #0
 8008afa:	0094      	lsls	r4, r2, #2
 8008afc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b00:	008b      	lsls	r3, r1, #2
 8008b02:	461a      	mov	r2, r3
 8008b04:	4623      	mov	r3, r4
 8008b06:	4628      	mov	r0, r5
 8008b08:	4631      	mov	r1, r6
 8008b0a:	f7f8 f85d 	bl	8000bc8 <__aeabi_uldivmod>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	460c      	mov	r4, r1
 8008b12:	461a      	mov	r2, r3
 8008b14:	4b9a      	ldr	r3, [pc, #616]	; (8008d80 <UART_SetConfig+0x6f4>)
 8008b16:	fba3 1302 	umull	r1, r3, r3, r2
 8008b1a:	095b      	lsrs	r3, r3, #5
 8008b1c:	2164      	movs	r1, #100	; 0x64
 8008b1e:	fb01 f303 	mul.w	r3, r1, r3
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	011b      	lsls	r3, r3, #4
 8008b26:	3332      	adds	r3, #50	; 0x32
 8008b28:	4a95      	ldr	r2, [pc, #596]	; (8008d80 <UART_SetConfig+0x6f4>)
 8008b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2e:	095b      	lsrs	r3, r3, #5
 8008b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b34:	4498      	add	r8, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	469b      	mov	fp, r3
 8008b3a:	f04f 0c00 	mov.w	ip, #0
 8008b3e:	46d9      	mov	r9, fp
 8008b40:	46e2      	mov	sl, ip
 8008b42:	eb19 0309 	adds.w	r3, r9, r9
 8008b46:	eb4a 040a 	adc.w	r4, sl, sl
 8008b4a:	4699      	mov	r9, r3
 8008b4c:	46a2      	mov	sl, r4
 8008b4e:	eb19 090b 	adds.w	r9, r9, fp
 8008b52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b56:	f04f 0100 	mov.w	r1, #0
 8008b5a:	f04f 0200 	mov.w	r2, #0
 8008b5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b6a:	4689      	mov	r9, r1
 8008b6c:	4692      	mov	sl, r2
 8008b6e:	eb1b 0509 	adds.w	r5, fp, r9
 8008b72:	eb4c 060a 	adc.w	r6, ip, sl
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	f04f 0200 	mov.w	r2, #0
 8008b80:	f04f 0300 	mov.w	r3, #0
 8008b84:	f04f 0400 	mov.w	r4, #0
 8008b88:	0094      	lsls	r4, r2, #2
 8008b8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b8e:	008b      	lsls	r3, r1, #2
 8008b90:	461a      	mov	r2, r3
 8008b92:	4623      	mov	r3, r4
 8008b94:	4628      	mov	r0, r5
 8008b96:	4631      	mov	r1, r6
 8008b98:	f7f8 f816 	bl	8000bc8 <__aeabi_uldivmod>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4b77      	ldr	r3, [pc, #476]	; (8008d80 <UART_SetConfig+0x6f4>)
 8008ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ba8:	095b      	lsrs	r3, r3, #5
 8008baa:	2164      	movs	r1, #100	; 0x64
 8008bac:	fb01 f303 	mul.w	r3, r1, r3
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	011b      	lsls	r3, r3, #4
 8008bb4:	3332      	adds	r3, #50	; 0x32
 8008bb6:	4a72      	ldr	r2, [pc, #456]	; (8008d80 <UART_SetConfig+0x6f4>)
 8008bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bbc:	095b      	lsrs	r3, r3, #5
 8008bbe:	f003 020f 	and.w	r2, r3, #15
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4442      	add	r2, r8
 8008bc8:	609a      	str	r2, [r3, #8]
 8008bca:	e0d0      	b.n	8008d6e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bcc:	f7fe f994 	bl	8006ef8 <HAL_RCC_GetPCLK1Freq>
 8008bd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	469a      	mov	sl, r3
 8008bd6:	f04f 0b00 	mov.w	fp, #0
 8008bda:	46d0      	mov	r8, sl
 8008bdc:	46d9      	mov	r9, fp
 8008bde:	eb18 0308 	adds.w	r3, r8, r8
 8008be2:	eb49 0409 	adc.w	r4, r9, r9
 8008be6:	4698      	mov	r8, r3
 8008be8:	46a1      	mov	r9, r4
 8008bea:	eb18 080a 	adds.w	r8, r8, sl
 8008bee:	eb49 090b 	adc.w	r9, r9, fp
 8008bf2:	f04f 0100 	mov.w	r1, #0
 8008bf6:	f04f 0200 	mov.w	r2, #0
 8008bfa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008bfe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008c02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008c06:	4688      	mov	r8, r1
 8008c08:	4691      	mov	r9, r2
 8008c0a:	eb1a 0508 	adds.w	r5, sl, r8
 8008c0e:	eb4b 0609 	adc.w	r6, fp, r9
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	4619      	mov	r1, r3
 8008c18:	f04f 0200 	mov.w	r2, #0
 8008c1c:	f04f 0300 	mov.w	r3, #0
 8008c20:	f04f 0400 	mov.w	r4, #0
 8008c24:	0094      	lsls	r4, r2, #2
 8008c26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c2a:	008b      	lsls	r3, r1, #2
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	4623      	mov	r3, r4
 8008c30:	4628      	mov	r0, r5
 8008c32:	4631      	mov	r1, r6
 8008c34:	f7f7 ffc8 	bl	8000bc8 <__aeabi_uldivmod>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4b50      	ldr	r3, [pc, #320]	; (8008d80 <UART_SetConfig+0x6f4>)
 8008c40:	fba3 2302 	umull	r2, r3, r3, r2
 8008c44:	095b      	lsrs	r3, r3, #5
 8008c46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	469b      	mov	fp, r3
 8008c4e:	f04f 0c00 	mov.w	ip, #0
 8008c52:	46d9      	mov	r9, fp
 8008c54:	46e2      	mov	sl, ip
 8008c56:	eb19 0309 	adds.w	r3, r9, r9
 8008c5a:	eb4a 040a 	adc.w	r4, sl, sl
 8008c5e:	4699      	mov	r9, r3
 8008c60:	46a2      	mov	sl, r4
 8008c62:	eb19 090b 	adds.w	r9, r9, fp
 8008c66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008c6a:	f04f 0100 	mov.w	r1, #0
 8008c6e:	f04f 0200 	mov.w	r2, #0
 8008c72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c7e:	4689      	mov	r9, r1
 8008c80:	4692      	mov	sl, r2
 8008c82:	eb1b 0509 	adds.w	r5, fp, r9
 8008c86:	eb4c 060a 	adc.w	r6, ip, sl
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	f04f 0300 	mov.w	r3, #0
 8008c98:	f04f 0400 	mov.w	r4, #0
 8008c9c:	0094      	lsls	r4, r2, #2
 8008c9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ca2:	008b      	lsls	r3, r1, #2
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4623      	mov	r3, r4
 8008ca8:	4628      	mov	r0, r5
 8008caa:	4631      	mov	r1, r6
 8008cac:	f7f7 ff8c 	bl	8000bc8 <__aeabi_uldivmod>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	4b32      	ldr	r3, [pc, #200]	; (8008d80 <UART_SetConfig+0x6f4>)
 8008cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8008cbc:	095b      	lsrs	r3, r3, #5
 8008cbe:	2164      	movs	r1, #100	; 0x64
 8008cc0:	fb01 f303 	mul.w	r3, r1, r3
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	011b      	lsls	r3, r3, #4
 8008cc8:	3332      	adds	r3, #50	; 0x32
 8008cca:	4a2d      	ldr	r2, [pc, #180]	; (8008d80 <UART_SetConfig+0x6f4>)
 8008ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd0:	095b      	lsrs	r3, r3, #5
 8008cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cd6:	4498      	add	r8, r3
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	469b      	mov	fp, r3
 8008cdc:	f04f 0c00 	mov.w	ip, #0
 8008ce0:	46d9      	mov	r9, fp
 8008ce2:	46e2      	mov	sl, ip
 8008ce4:	eb19 0309 	adds.w	r3, r9, r9
 8008ce8:	eb4a 040a 	adc.w	r4, sl, sl
 8008cec:	4699      	mov	r9, r3
 8008cee:	46a2      	mov	sl, r4
 8008cf0:	eb19 090b 	adds.w	r9, r9, fp
 8008cf4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008cf8:	f04f 0100 	mov.w	r1, #0
 8008cfc:	f04f 0200 	mov.w	r2, #0
 8008d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d0c:	4689      	mov	r9, r1
 8008d0e:	4692      	mov	sl, r2
 8008d10:	eb1b 0509 	adds.w	r5, fp, r9
 8008d14:	eb4c 060a 	adc.w	r6, ip, sl
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	f04f 0200 	mov.w	r2, #0
 8008d22:	f04f 0300 	mov.w	r3, #0
 8008d26:	f04f 0400 	mov.w	r4, #0
 8008d2a:	0094      	lsls	r4, r2, #2
 8008d2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d30:	008b      	lsls	r3, r1, #2
 8008d32:	461a      	mov	r2, r3
 8008d34:	4623      	mov	r3, r4
 8008d36:	4628      	mov	r0, r5
 8008d38:	4631      	mov	r1, r6
 8008d3a:	f7f7 ff45 	bl	8000bc8 <__aeabi_uldivmod>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	460c      	mov	r4, r1
 8008d42:	461a      	mov	r2, r3
 8008d44:	4b0e      	ldr	r3, [pc, #56]	; (8008d80 <UART_SetConfig+0x6f4>)
 8008d46:	fba3 1302 	umull	r1, r3, r3, r2
 8008d4a:	095b      	lsrs	r3, r3, #5
 8008d4c:	2164      	movs	r1, #100	; 0x64
 8008d4e:	fb01 f303 	mul.w	r3, r1, r3
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	011b      	lsls	r3, r3, #4
 8008d56:	3332      	adds	r3, #50	; 0x32
 8008d58:	4a09      	ldr	r2, [pc, #36]	; (8008d80 <UART_SetConfig+0x6f4>)
 8008d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5e:	095b      	lsrs	r3, r3, #5
 8008d60:	f003 020f 	and.w	r2, r3, #15
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4442      	add	r2, r8
 8008d6a:	609a      	str	r2, [r3, #8]
}
 8008d6c:	e7ff      	b.n	8008d6e <UART_SetConfig+0x6e2>
 8008d6e:	bf00      	nop
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d78:	40011000 	.word	0x40011000
 8008d7c:	40011400 	.word	0x40011400
 8008d80:	51eb851f 	.word	0x51eb851f

08008d84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d84:	b084      	sub	sp, #16
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	f107 001c 	add.w	r0, r7, #28
 8008d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d122      	bne.n	8008de2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d105      	bne.n	8008dd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa4e 	bl	8009278 <USB_CoreReset>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]
 8008de0:	e01a      	b.n	8008e18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fa42 	bl	8009278 <USB_CoreReset>
 8008df4:	4603      	mov	r3, r0
 8008df6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d106      	bne.n	8008e0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	639a      	str	r2, [r3, #56]	; 0x38
 8008e0a:	e005      	b.n	8008e18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d10b      	bne.n	8008e36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f043 0206 	orr.w	r2, r3, #6
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f043 0220 	orr.w	r2, r3, #32
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e42:	b004      	add	sp, #16
 8008e44:	4770      	bx	lr

08008e46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b083      	sub	sp, #12
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f023 0201 	bic.w	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e80:	78fb      	ldrb	r3, [r7, #3]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d106      	bne.n	8008e94 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	60da      	str	r2, [r3, #12]
 8008e92:	e00b      	b.n	8008eac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d106      	bne.n	8008ea8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60da      	str	r2, [r3, #12]
 8008ea6:	e001      	b.n	8008eac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e003      	b.n	8008eb4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008eac:	2032      	movs	r0, #50	; 0x32
 8008eae:	f7f9 fae9 	bl	8002484 <HAL_Delay>

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b086      	sub	sp, #24
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	613b      	str	r3, [r7, #16]
 8008eda:	e009      	b.n	8008ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	3340      	adds	r3, #64	; 0x40
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	3301      	adds	r3, #1
 8008eee:	613b      	str	r3, [r7, #16]
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	2b0e      	cmp	r3, #14
 8008ef4:	d9f2      	bls.n	8008edc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d11c      	bne.n	8008f36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f0a:	f043 0302 	orr.w	r3, r3, #2
 8008f0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	639a      	str	r2, [r3, #56]	; 0x38
 8008f34:	e00b      	b.n	8008f4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f54:	461a      	mov	r2, r3
 8008f56:	2300      	movs	r3, #0
 8008f58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f60:	4619      	mov	r1, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f68:	461a      	mov	r2, r3
 8008f6a:	680b      	ldr	r3, [r1, #0]
 8008f6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d10c      	bne.n	8008f8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d104      	bne.n	8008f84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f949 	bl	8009214 <USB_SetDevSpeed>
 8008f82:	e008      	b.n	8008f96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f84:	2101      	movs	r1, #1
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f944 	bl	8009214 <USB_SetDevSpeed>
 8008f8c:	e003      	b.n	8008f96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f8e:	2103      	movs	r1, #3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f93f 	bl	8009214 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f96:	2110      	movs	r1, #16
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f8f3 	bl	8009184 <USB_FlushTxFifo>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f911 	bl	80091d0 <USB_FlushRxFifo>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fca:	461a      	mov	r2, r3
 8008fcc:	2300      	movs	r3, #0
 8008fce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fdc:	2300      	movs	r3, #0
 8008fde:	613b      	str	r3, [r7, #16]
 8008fe0:	e043      	b.n	800906a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ff8:	d118      	bne.n	800902c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900c:	461a      	mov	r2, r3
 800900e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	e013      	b.n	800903e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009022:	461a      	mov	r2, r3
 8009024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	e008      	b.n	800903e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009038:	461a      	mov	r2, r3
 800903a:	2300      	movs	r3, #0
 800903c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904a:	461a      	mov	r2, r3
 800904c:	2300      	movs	r3, #0
 800904e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4413      	add	r3, r2
 8009058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800905c:	461a      	mov	r2, r3
 800905e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009062:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	3301      	adds	r3, #1
 8009068:	613b      	str	r3, [r7, #16]
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	429a      	cmp	r2, r3
 8009070:	d3b7      	bcc.n	8008fe2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]
 8009076:	e043      	b.n	8009100 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	4413      	add	r3, r2
 8009080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800908a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800908e:	d118      	bne.n	80090c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10a      	bne.n	80090ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	4413      	add	r3, r2
 800909e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a2:	461a      	mov	r2, r3
 80090a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	e013      	b.n	80090d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b8:	461a      	mov	r2, r3
 80090ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	e008      	b.n	80090d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ce:	461a      	mov	r2, r3
 80090d0:	2300      	movs	r3, #0
 80090d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e0:	461a      	mov	r2, r3
 80090e2:	2300      	movs	r3, #0
 80090e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f2:	461a      	mov	r2, r3
 80090f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	3301      	adds	r3, #1
 80090fe:	613b      	str	r3, [r7, #16]
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	429a      	cmp	r2, r3
 8009106:	d3b7      	bcc.n	8009078 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800911a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009128:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	2b00      	cmp	r3, #0
 800912e:	d105      	bne.n	800913c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	f043 0210 	orr.w	r2, r3, #16
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699a      	ldr	r2, [r3, #24]
 8009140:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <USB_DevInit+0x2c4>)
 8009142:	4313      	orrs	r3, r2
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914a:	2b00      	cmp	r3, #0
 800914c:	d005      	beq.n	800915a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	f043 0208 	orr.w	r2, r3, #8
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800915a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800915c:	2b01      	cmp	r3, #1
 800915e:	d107      	bne.n	8009170 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009168:	f043 0304 	orr.w	r3, r3, #4
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009170:	7dfb      	ldrb	r3, [r7, #23]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800917c:	b004      	add	sp, #16
 800917e:	4770      	bx	lr
 8009180:	803c3800 	.word	0x803c3800

08009184 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	019b      	lsls	r3, r3, #6
 8009196:	f043 0220 	orr.w	r2, r3, #32
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3301      	adds	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4a09      	ldr	r2, [pc, #36]	; (80091cc <USB_FlushTxFifo+0x48>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d901      	bls.n	80091b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e006      	b.n	80091be <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	f003 0320 	and.w	r3, r3, #32
 80091b8:	2b20      	cmp	r3, #32
 80091ba:	d0f0      	beq.n	800919e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	00030d40 	.word	0x00030d40

080091d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2210      	movs	r2, #16
 80091e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3301      	adds	r3, #1
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4a09      	ldr	r2, [pc, #36]	; (8009210 <USB_FlushRxFifo+0x40>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d901      	bls.n	80091f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e006      	b.n	8009202 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	f003 0310 	and.w	r3, r3, #16
 80091fc:	2b10      	cmp	r3, #16
 80091fe:	d0f0      	beq.n	80091e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	00030d40 	.word	0x00030d40

08009214 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	68f9      	ldr	r1, [r7, #12]
 8009230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009234:	4313      	orrs	r3, r2
 8009236:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b084      	sub	sp, #16
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009260:	f043 0302 	orr.w	r3, r3, #2
 8009264:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009266:	2003      	movs	r0, #3
 8009268:	f7f9 f90c 	bl	8002484 <HAL_Delay>

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009280:	2300      	movs	r3, #0
 8009282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3301      	adds	r3, #1
 8009288:	60fb      	str	r3, [r7, #12]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	4a13      	ldr	r2, [pc, #76]	; (80092dc <USB_CoreReset+0x64>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d901      	bls.n	8009296 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e01b      	b.n	80092ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	daf2      	bge.n	8009284 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	f043 0201 	orr.w	r2, r3, #1
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3301      	adds	r3, #1
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4a09      	ldr	r2, [pc, #36]	; (80092dc <USB_CoreReset+0x64>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d901      	bls.n	80092c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092bc:	2303      	movs	r3, #3
 80092be:	e006      	b.n	80092ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d0f0      	beq.n	80092ae <USB_CoreReset+0x36>

  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	00030d40 	.word	0x00030d40

080092e0 <MPU9250_getHz>:

// mpu global instance
struct MPU9250 iMPU9250 = {0, };


uint16_t MPU9250_getHz(){ // call this func 1hz
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
	uint16_t temp = MPU9250_hzcnt;
 80092e6:	4b06      	ldr	r3, [pc, #24]	; (8009300 <MPU9250_getHz+0x20>)
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	80fb      	strh	r3, [r7, #6]
	MPU9250_hzcnt = 0;
 80092ec:	4b04      	ldr	r3, [pc, #16]	; (8009300 <MPU9250_getHz+0x20>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	801a      	strh	r2, [r3, #0]
	return temp;
 80092f2:	88fb      	ldrh	r3, [r7, #6]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	20000260 	.word	0x20000260

08009304 <MPU9250_init>:

void MPU9250_init(struct MPU9250* obj, I2C_HandleTypeDef *phi2c){
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
//	obj->gyroBias[3] = {0, 0, 0}
//	obj->accelBias[3] = {0, 0, 0}; // Bias corrections for gyro and accelerometer

	obj->phi2c = phi2c;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	601a      	str	r2, [r3, #0]

	obj->Ascale = AFS_2G;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	711a      	strb	r2, [r3, #4]
	obj->Gscale = GFS_250DPS;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	715a      	strb	r2, [r3, #5]
	obj->Mscale = MFS_14BITS;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	719a      	strb	r2, [r3, #6]
	obj->Mmode = 0x06;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2206      	movs	r2, #6
 800932a:	71da      	strb	r2, [r3, #7]

	obj->initQ[0] = 1;//initial value
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009332:	675a      	str	r2, [r3, #116]	; 0x74
	obj->initQ[1] = 0;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f04f 0200 	mov.w	r2, #0
 800933a:	679a      	str	r2, [r3, #120]	; 0x78
	obj->initQ[2] = 0;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f04f 0200 	mov.w	r2, #0
 8009342:	67da      	str	r2, [r3, #124]	; 0x7c
	obj->initQ[3] = 0;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f04f 0200 	mov.w	r2, #0
 800934a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	obj->status = MPU9250_disable;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	MPU9250_resetMPU9250(obj);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fa64 	bl	8009824 <MPU9250_resetMPU9250>
//	MPU9250_calibrateMPU9250(obj);

	MPU9250_initMPU9250(obj); // calculate ay, ac bias
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fae7 	bl	8009930 <MPU9250_initMPU9250>
	MPU9250_initAK8963(obj);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fa70 	bl	8009848 <MPU9250_initAK8963>

	MPU9250_getMres(obj);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f9dd 	bl	8009728 <MPU9250_getMres>
	MPU9250_getGres(obj);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f9f8 	bl	8009764 <MPU9250_getGres>
	MPU9250_getAres(obj);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fa27 	bl	80097c8 <MPU9250_getAres>
}
 800937a:	bf00      	nop
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <MPU9250_writeByte>:

uint16_t MPU9250_writeByte(struct MPU9250* obj, uint8_t address, uint8_t subAddress, uint8_t data)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b086      	sub	sp, #24
 8009386:	af02      	add	r7, sp, #8
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	4608      	mov	r0, r1
 800938c:	4611      	mov	r1, r2
 800938e:	461a      	mov	r2, r3
 8009390:	4603      	mov	r3, r0
 8009392:	70fb      	strb	r3, [r7, #3]
 8009394:	460b      	mov	r3, r1
 8009396:	70bb      	strb	r3, [r7, #2]
 8009398:	4613      	mov	r3, r2
 800939a:	707b      	strb	r3, [r7, #1]
	// Creating dynamic array to store regAddr + data in one buffer
	#define SIZE 1
	uint8_t * dynBuffer;
	dynBuffer = (uint8_t *) malloc(sizeof(uint8_t) * (SIZE+1));
 800939c:	2002      	movs	r0, #2
 800939e:	f003 f995 	bl	800c6cc <malloc>
 80093a2:	4603      	mov	r3, r0
 80093a4:	60fb      	str	r3, [r7, #12]
	dynBuffer[0] = subAddress;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	78ba      	ldrb	r2, [r7, #2]
 80093aa:	701a      	strb	r2, [r3, #0]

	// copy array
	memcpy(dynBuffer+1, &data, sizeof(uint8_t) * SIZE);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	787a      	ldrb	r2, [r7, #1]
 80093b2:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(obj->phi2c, address, dynBuffer, SIZE+1, DEFAULT_TIMEOUT);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6818      	ldr	r0, [r3, #0]
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	b299      	uxth	r1, r3
 80093bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	2302      	movs	r3, #2
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	f7fa fcb1 	bl	8003d2c <HAL_I2C_Master_Transmit>
 80093ca:	4603      	mov	r3, r0
 80093cc:	72fb      	strb	r3, [r7, #11]
	free(dynBuffer);
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f003 f984 	bl	800c6dc <free>
	return status == HAL_OK;
 80093d4:	7afb      	ldrb	r3, [r7, #11]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	bf0c      	ite	eq
 80093da:	2301      	moveq	r3, #1
 80093dc:	2300      	movne	r3, #0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	b29b      	uxth	r3, r3
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <MPU9250_readBytes>:



void MPU9250_readBytes(struct MPU9250* obj, uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 80093ea:	b590      	push	{r4, r7, lr}
 80093ec:	b08b      	sub	sp, #44	; 0x2c
 80093ee:	af02      	add	r7, sp, #8
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	4608      	mov	r0, r1
 80093f4:	4611      	mov	r1, r2
 80093f6:	461a      	mov	r2, r3
 80093f8:	4603      	mov	r3, r0
 80093fa:	70fb      	strb	r3, [r7, #3]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70bb      	strb	r3, [r7, #2]
 8009400:	4613      	mov	r3, r2
 8009402:	707b      	strb	r3, [r7, #1]
	char data[14];
	char data_write[1];
	data_write[0] = subAddress;
 8009404:	78bb      	ldrb	r3, [r7, #2]
 8009406:	723b      	strb	r3, [r7, #8]

	//    uint16_t tout = timeout > 0 ? timeout : DEFAULT_TIMEOUT;
	HAL_I2C_Master_Transmit(obj->phi2c, address, (uint8_t*)data_write, 1, DEFAULT_TIMEOUT);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	78fb      	ldrb	r3, [r7, #3]
 800940e:	b299      	uxth	r1, r3
 8009410:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009414:	f107 0208 	add.w	r2, r7, #8
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	2301      	movs	r3, #1
 800941c:	f7fa fc86 	bl	8003d2c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(obj->phi2c, address, (uint8_t*)data, count, DEFAULT_TIMEOUT);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6818      	ldr	r0, [r3, #0]
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	b299      	uxth	r1, r3
 8009428:	787b      	ldrb	r3, [r7, #1]
 800942a:	b29b      	uxth	r3, r3
 800942c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009430:	4614      	mov	r4, r2
 8009432:	f107 020c 	add.w	r2, r7, #12
 8009436:	9400      	str	r4, [sp, #0]
 8009438:	f7fa fd76 	bl	8003f28 <HAL_I2C_Master_Receive>
	for(int ii = 0; ii < count; ii++) {
 800943c:	2300      	movs	r3, #0
 800943e:	61fb      	str	r3, [r7, #28]
 8009440:	e00b      	b.n	800945a <MPU9250_readBytes+0x70>
		dest[ii] = data[ii];
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009446:	4413      	add	r3, r2
 8009448:	f107 010c 	add.w	r1, r7, #12
 800944c:	69fa      	ldr	r2, [r7, #28]
 800944e:	440a      	add	r2, r1
 8009450:	7812      	ldrb	r2, [r2, #0]
 8009452:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii < count; ii++) {
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	3301      	adds	r3, #1
 8009458:	61fb      	str	r3, [r7, #28]
 800945a:	787b      	ldrb	r3, [r7, #1]
 800945c:	69fa      	ldr	r2, [r7, #28]
 800945e:	429a      	cmp	r2, r3
 8009460:	dbef      	blt.n	8009442 <MPU9250_readBytes+0x58>
	}
}
 8009462:	bf00      	nop
 8009464:	3724      	adds	r7, #36	; 0x24
 8009466:	46bd      	mov	sp, r7
 8009468:	bd90      	pop	{r4, r7, pc}

0800946a <MPU9250_readByte>:

char MPU9250_readByte(struct MPU9250* obj, uint8_t address, uint8_t subAddress)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b086      	sub	sp, #24
 800946e:	af02      	add	r7, sp, #8
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	460b      	mov	r3, r1
 8009474:	70fb      	strb	r3, [r7, #3]
 8009476:	4613      	mov	r3, r2
 8009478:	70bb      	strb	r3, [r7, #2]
	char data[1]; // `data` will store the register data
	MPU9250_readBytes(obj, address, subAddress, 1, (uint8_t*)data);
 800947a:	78ba      	ldrb	r2, [r7, #2]
 800947c:	78f9      	ldrb	r1, [r7, #3]
 800947e:	f107 030c 	add.w	r3, r7, #12
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	2301      	movs	r3, #1
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff ffaf 	bl	80093ea <MPU9250_readBytes>
	return data[1];
 800948c:	7b7b      	ldrb	r3, [r7, #13]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <MPU9250_readMPU9250IT>:

void MPU9250_readMPU9250IT(struct MPU9250* obj){
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af02      	add	r7, sp, #8
 800949c:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(obj->phi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, obj->agtBuffer, 14);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	3388      	adds	r3, #136	; 0x88
 80094a6:	220e      	movs	r2, #14
 80094a8:	9201      	str	r2, [sp, #4]
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	2301      	movs	r3, #1
 80094ae:	223b      	movs	r2, #59	; 0x3b
 80094b0:	21d0      	movs	r1, #208	; 0xd0
 80094b2:	f7fa ff5f 	bl	8004374 <HAL_I2C_Mem_Read_IT>
}
 80094b6:	bf00      	nop
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
	...

080094c0 <MPU9250_callbackMPU9250IT>:

uint8_t MPU9250_callbackMPU9250IT(struct MPU9250* obj){
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
	obj->accelCount[0] = (((int16_t)obj->agtBuffer[0]) << 8) | obj->agtBuffer[1];
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80094ce:	021b      	lsls	r3, r3, #8
 80094d0:	b21a      	sxth	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80094d8:	b21b      	sxth	r3, r3
 80094da:	4313      	orrs	r3, r2
 80094dc:	b21a      	sxth	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	829a      	strh	r2, [r3, #20]
	obj->accelCount[1] = (((int16_t)obj->agtBuffer[2]) << 8) | obj->agtBuffer[3];
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80094e8:	021b      	lsls	r3, r3, #8
 80094ea:	b21a      	sxth	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 80094f2:	b21b      	sxth	r3, r3
 80094f4:	4313      	orrs	r3, r2
 80094f6:	b21a      	sxth	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	82da      	strh	r2, [r3, #22]
	obj->accelCount[2] = (((int16_t)obj->agtBuffer[4]) << 8) | obj->agtBuffer[5];
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009502:	021b      	lsls	r3, r3, #8
 8009504:	b21a      	sxth	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800950c:	b21b      	sxth	r3, r3
 800950e:	4313      	orrs	r3, r2
 8009510:	b21a      	sxth	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	831a      	strh	r2, [r3, #24]
	obj->tmpCount = (int16_t) (obj->agtBuffer[6] << 8 | obj->agtBuffer[7]);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800951c:	021b      	lsls	r3, r3, #8
 800951e:	b21a      	sxth	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8009526:	b21b      	sxth	r3, r3
 8009528:	4313      	orrs	r3, r2
 800952a:	b21a      	sxth	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	84da      	strh	r2, [r3, #38]	; 0x26
	obj->gyroCount[0] = (((int16_t)obj->agtBuffer[8]) << 8) | obj->agtBuffer[9];
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009536:	021b      	lsls	r3, r3, #8
 8009538:	b21a      	sxth	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009540:	b21b      	sxth	r3, r3
 8009542:	4313      	orrs	r3, r2
 8009544:	b21a      	sxth	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	835a      	strh	r2, [r3, #26]
	obj->gyroCount[1] = (((int16_t)obj->agtBuffer[10]) << 8) | obj->agtBuffer[11];
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8009550:	021b      	lsls	r3, r3, #8
 8009552:	b21a      	sxth	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800955a:	b21b      	sxth	r3, r3
 800955c:	4313      	orrs	r3, r2
 800955e:	b21a      	sxth	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	839a      	strh	r2, [r3, #28]
	obj->gyroCount[2] = (((int16_t)obj->agtBuffer[12]) << 8) | obj->agtBuffer[13];
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800956a:	021b      	lsls	r3, r3, #8
 800956c:	b21a      	sxth	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009574:	b21b      	sxth	r3, r3
 8009576:	4313      	orrs	r3, r2
 8009578:	b21a      	sxth	r2, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	83da      	strh	r2, [r3, #30]

	if((!(obj->accelCount[0])&!(obj->accelCount[1])&!(obj->accelCount[2]))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800958a:	4313      	orrs	r3, r2
 800958c:	b21a      	sxth	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009594:	4313      	orrs	r3, r2
 8009596:	b21b      	sxth	r3, r3
	   |(!(obj->gyroCount[0])&!(obj->gyroCount[1])&!(obj->gyroCount[2]))){
 8009598:	2b00      	cmp	r3, #0
 800959a:	bf0c      	ite	eq
 800959c:	2301      	moveq	r3, #1
 800959e:	2300      	movne	r3, #0
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80095ae:	430b      	orrs	r3, r1
 80095b0:	b219      	sxth	r1, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80095b8:	430b      	orrs	r3, r1
 80095ba:	b21b      	sxth	r3, r3
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bf0c      	ite	eq
 80095c0:	2301      	moveq	r3, #1
 80095c2:	2300      	movne	r3, #0
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	4313      	orrs	r3, r2
 80095c8:	b2db      	uxtb	r3, r3
	if((!(obj->accelCount[0])&!(obj->accelCount[1])&!(obj->accelCount[2]))
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <MPU9250_callbackMPU9250IT+0x112>
		return 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	e09c      	b.n	800970c <MPU9250_callbackMPU9250IT+0x24c>
//	Gx = (rawGx-baseGyX) / 131.0;
//	Gy = (rawGy-baseGyY) / 131.0;
//	Gz = (rawGz-baseGyZ) / 131.0;

	// Now we'll calculate the accleration value into actual g's
	obj->ax = ((float)obj->accelCount[0]*obj->aRes - obj->accelBias[0]);  // get actual g value, this depends on scale being set
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80095d8:	ee07 3a90 	vmov	s15, r3
 80095dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80095e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80095f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	obj->ay = ((float)obj->accelCount[1]*obj->aRes - obj->accelBias[1]);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009600:	ee07 3a90 	vmov	s15, r3
 8009604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	edd3 7a02 	vldr	s15, [r3, #8]
 800960e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	obj->az = ((float)obj->accelCount[2]*obj->aRes - obj->accelBias[2]);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009628:	ee07 3a90 	vmov	s15, r3
 800962c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	edd3 7a02 	vldr	s15, [r3, #8]
 8009636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8009640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	obj->tmp = (float) ((int16_t) obj->tmpCount / (float) 340.0 + (float) 36.53);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8009650:	ee07 3a90 	vmov	s15, r3
 8009654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009658:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009718 <MPU9250_callbackMPU9250IT+0x258>
 800965c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009660:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800971c <MPU9250_callbackMPU9250IT+0x25c>
 8009664:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	// Calculate the gyro value into actual degrees per second
	obj->gx = MPU9250_DEG2RAD*((float)obj->gyroCount[0]*obj->gRes - obj->gyroBias[0]);  // get actual gyro value, this depends on scale being set
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009674:	ee07 3a90 	vmov	s15, r3
 8009678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800968c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009690:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8009720 <MPU9250_callbackMPU9250IT+0x260>
 8009694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	obj->gy = MPU9250_DEG2RAD*((float)obj->gyroCount[1]*obj->gRes - obj->gyroBias[1]);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80096a4:	ee07 3a90 	vmov	s15, r3
 80096a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80096b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80096bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096c0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8009720 <MPU9250_callbackMPU9250IT+0x260>
 80096c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	obj->gz = MPU9250_DEG2RAD*((float)obj->gyroCount[2]*obj->gRes - obj->gyroBias[2]);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80096d4:	ee07 3a90 	vmov	s15, r3
 80096d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	edd3 7a03 	vldr	s15, [r3, #12]
 80096e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80096ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096f0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8009720 <MPU9250_callbackMPU9250IT+0x260>
 80096f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

	MPU9250_hzcnt++;
 80096fe:	4b09      	ldr	r3, [pc, #36]	; (8009724 <MPU9250_callbackMPU9250IT+0x264>)
 8009700:	881b      	ldrh	r3, [r3, #0]
 8009702:	3301      	adds	r3, #1
 8009704:	b29a      	uxth	r2, r3
 8009706:	4b07      	ldr	r3, [pc, #28]	; (8009724 <MPU9250_callbackMPU9250IT+0x264>)
 8009708:	801a      	strh	r2, [r3, #0]
	return 1;
 800970a:	2301      	movs	r3, #1
}
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	43aa0000 	.word	0x43aa0000
 800971c:	42121eb8 	.word	0x42121eb8
 8009720:	3c8efa35 	.word	0x3c8efa35
 8009724:	20000260 	.word	0x20000260

08009728 <MPU9250_getMres>:

void MPU9250_getMres(struct MPU9250* obj) {
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
	switch (obj->Mscale)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	799b      	ldrb	r3, [r3, #6]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d002      	beq.n	800973e <MPU9250_getMres+0x16>
 8009738:	2b01      	cmp	r3, #1
 800973a:	d004      	beq.n	8009746 <MPU9250_getMres+0x1e>
		  break;
	case MFS_16BITS:
		  obj->mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 800973c:	e007      	b.n	800974e <MPU9250_getMres+0x26>
		  obj->mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a06      	ldr	r2, [pc, #24]	; (800975c <MPU9250_getMres+0x34>)
 8009742:	611a      	str	r2, [r3, #16]
		  break;
 8009744:	e003      	b.n	800974e <MPU9250_getMres+0x26>
		  obj->mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a05      	ldr	r2, [pc, #20]	; (8009760 <MPU9250_getMres+0x38>)
 800974a:	611a      	str	r2, [r3, #16]
		  break;
 800974c:	bf00      	nop
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	40bfebff 	.word	0x40bfebff
 8009760:	3fbfebff 	.word	0x3fbfebff

08009764 <MPU9250_getGres>:

void MPU9250_getGres(struct MPU9250* obj) {
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  switch (obj->Gscale)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	795b      	ldrb	r3, [r3, #5]
 8009770:	2b03      	cmp	r3, #3
 8009772:	d81b      	bhi.n	80097ac <MPU9250_getGres+0x48>
 8009774:	a201      	add	r2, pc, #4	; (adr r2, 800977c <MPU9250_getGres+0x18>)
 8009776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977a:	bf00      	nop
 800977c:	0800978d 	.word	0x0800978d
 8009780:	08009795 	.word	0x08009795
 8009784:	0800979d 	.word	0x0800979d
 8009788:	080097a5 	.word	0x080097a5
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
    	  obj->gRes = 250.0/32768.0;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a0a      	ldr	r2, [pc, #40]	; (80097b8 <MPU9250_getGres+0x54>)
 8009790:	60da      	str	r2, [r3, #12]
          break;
 8009792:	e00b      	b.n	80097ac <MPU9250_getGres+0x48>
    case GFS_500DPS:
    	  obj->gRes = 500.0/32768.0;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a09      	ldr	r2, [pc, #36]	; (80097bc <MPU9250_getGres+0x58>)
 8009798:	60da      	str	r2, [r3, #12]
          break;
 800979a:	e007      	b.n	80097ac <MPU9250_getGres+0x48>
    case GFS_1000DPS:
    	  obj->gRes = 1000.0/32768.0;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a08      	ldr	r2, [pc, #32]	; (80097c0 <MPU9250_getGres+0x5c>)
 80097a0:	60da      	str	r2, [r3, #12]
          break;
 80097a2:	e003      	b.n	80097ac <MPU9250_getGres+0x48>
    case GFS_2000DPS:
    	  obj->gRes = 2000.0/32768.0;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a07      	ldr	r2, [pc, #28]	; (80097c4 <MPU9250_getGres+0x60>)
 80097a8:	60da      	str	r2, [r3, #12]
          break;
 80097aa:	bf00      	nop
  }
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	3bfa0000 	.word	0x3bfa0000
 80097bc:	3c7a0000 	.word	0x3c7a0000
 80097c0:	3cfa0000 	.word	0x3cfa0000
 80097c4:	3d7a0000 	.word	0x3d7a0000

080097c8 <MPU9250_getAres>:


void MPU9250_getAres(struct MPU9250* obj) {
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  switch (obj->Ascale)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	791b      	ldrb	r3, [r3, #4]
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d81f      	bhi.n	8009818 <MPU9250_getAres+0x50>
 80097d8:	a201      	add	r2, pc, #4	; (adr r2, 80097e0 <MPU9250_getAres+0x18>)
 80097da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097de:	bf00      	nop
 80097e0:	080097f1 	.word	0x080097f1
 80097e4:	080097fb 	.word	0x080097fb
 80097e8:	08009805 	.word	0x08009805
 80097ec:	0800980f 	.word	0x0800980f
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	  obj->aRes = 2.0/32768.0;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80097f6:	609a      	str	r2, [r3, #8]
          break;
 80097f8:	e00e      	b.n	8009818 <MPU9250_getAres+0x50>
    case AFS_4G:
    	  obj->aRes = 4.0/32768.0;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8009800:	609a      	str	r2, [r3, #8]
          break;
 8009802:	e009      	b.n	8009818 <MPU9250_getAres+0x50>
    case AFS_8G:
    	  obj->aRes = 8.0/32768.0;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800980a:	609a      	str	r2, [r3, #8]
          break;
 800980c:	e004      	b.n	8009818 <MPU9250_getAres+0x50>
    case AFS_16G:
    	  obj->aRes = 16.0/32768.0;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8009814:	609a      	str	r2, [r3, #8]
          break;
 8009816:	bf00      	nop
  }
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <MPU9250_resetMPU9250>:
  obj->tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return obj->tmpCount;
}


void MPU9250_resetMPU9250(struct MPU9250* obj) {
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
    // reset device
    MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800982c:	2380      	movs	r3, #128	; 0x80
 800982e:	226b      	movs	r2, #107	; 0x6b
 8009830:	21d0      	movs	r1, #208	; 0xd0
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff fda5 	bl	8009382 <MPU9250_writeByte>
    HAL_Delay(10);
 8009838:	200a      	movs	r0, #10
 800983a:	f7f8 fe23 	bl	8002484 <HAL_Delay>
}
 800983e:	bf00      	nop
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <MPU9250_initAK8963>:

void MPU9250_initAK8963(struct MPU9250* obj)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af02      	add	r7, sp, #8
 800984e:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8009850:	2300      	movs	r3, #0
 8009852:	220a      	movs	r2, #10
 8009854:	2118      	movs	r1, #24
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff fd93 	bl	8009382 <MPU9250_writeByte>
	HAL_Delay(10);
 800985c:	200a      	movs	r0, #10
 800985e:	f7f8 fe11 	bl	8002484 <HAL_Delay>
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8009862:	230f      	movs	r3, #15
 8009864:	220a      	movs	r2, #10
 8009866:	2118      	movs	r1, #24
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff fd8a 	bl	8009382 <MPU9250_writeByte>
	HAL_Delay(10);
 800986e:	200a      	movs	r0, #10
 8009870:	f7f8 fe08 	bl	8002484 <HAL_Delay>
	MPU9250_readBytes(obj, AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8009874:	f107 030c 	add.w	r3, r7, #12
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	2303      	movs	r3, #3
 800987c:	2210      	movs	r2, #16
 800987e:	2118      	movs	r1, #24
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff fdb2 	bl	80093ea <MPU9250_readBytes>
	obj->magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8009886:	7b3b      	ldrb	r3, [r7, #12]
 8009888:	3b80      	subs	r3, #128	; 0x80
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009892:	eddf 6a26 	vldr	s13, [pc, #152]	; 800992c <MPU9250_initAK8963+0xe4>
 8009896:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800989a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800989e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	obj->magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 80098a8:	7b7b      	ldrb	r3, [r7, #13]
 80098aa:	3b80      	subs	r3, #128	; 0x80
 80098ac:	ee07 3a90 	vmov	s15, r3
 80098b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098b4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800992c <MPU9250_initAK8963+0xe4>
 80098b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80098bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	obj->magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	3b80      	subs	r3, #128	; 0x80
 80098ce:	ee07 3a90 	vmov	s15, r3
 80098d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098d6:	eddf 6a15 	vldr	s13, [pc, #84]	; 800992c <MPU9250_initAK8963+0xe4>
 80098da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80098de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 80098ec:	2300      	movs	r3, #0
 80098ee:	220a      	movs	r2, #10
 80098f0:	2118      	movs	r1, #24
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff fd45 	bl	8009382 <MPU9250_writeByte>
	HAL_Delay(10);
 80098f8:	200a      	movs	r0, #10
 80098fa:	f7f8 fdc3 	bl	8002484 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, obj->Mscale << 4 | obj->Mmode); // Set magnetometer data resolution and sample ODR
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	799b      	ldrb	r3, [r3, #6]
 8009902:	011b      	lsls	r3, r3, #4
 8009904:	b25a      	sxtb	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	79db      	ldrb	r3, [r3, #7]
 800990a:	b25b      	sxtb	r3, r3
 800990c:	4313      	orrs	r3, r2
 800990e:	b25b      	sxtb	r3, r3
 8009910:	b2db      	uxtb	r3, r3
 8009912:	220a      	movs	r2, #10
 8009914:	2118      	movs	r1, #24
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f7ff fd33 	bl	8009382 <MPU9250_writeByte>
	HAL_Delay(10);
 800991c:	200a      	movs	r0, #10
 800991e:	f7f8 fdb1 	bl	8002484 <HAL_Delay>
}
 8009922:	bf00      	nop
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	43800000 	.word	0x43800000

08009930 <MPU9250_initMPU9250>:


void MPU9250_initMPU9250(struct MPU9250* obj)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8009938:	2300      	movs	r3, #0
 800993a:	226b      	movs	r2, #107	; 0x6b
 800993c:	21d0      	movs	r1, #208	; 0xd0
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7ff fd1f 	bl	8009382 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8009944:	2064      	movs	r0, #100	; 0x64
 8009946:	f7f8 fd9d 	bl	8002484 <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 800994a:	2301      	movs	r3, #1
 800994c:	226b      	movs	r2, #107	; 0x6b
 800994e:	21d0      	movs	r1, #208	; 0xd0
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff fd16 	bl	8009382 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(obj, MPU9250_ADDRESS, CONFIG, 0x03);
 8009956:	2303      	movs	r3, #3
 8009958:	221a      	movs	r2, #26
 800995a:	21d0      	movs	r1, #208	; 0xd0
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f7ff fd10 	bl	8009382 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(obj, MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8009962:	2304      	movs	r3, #4
 8009964:	2219      	movs	r2, #25
 8009966:	21d0      	movs	r1, #208	; 0xd0
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff fd0a 	bl	8009382 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(obj, MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 800996e:	221b      	movs	r2, #27
 8009970:	21d0      	movs	r1, #208	; 0xd0
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7ff fd79 	bl	800946a <MPU9250_readByte>
 8009978:	4603      	mov	r3, r0
 800997a:	73fb      	strb	r3, [r7, #15]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 800997c:	7bfb      	ldrb	r3, [r7, #15]
 800997e:	f023 0302 	bic.w	r3, r3, #2
 8009982:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8009984:	7bfb      	ldrb	r3, [r7, #15]
 8009986:	f023 0318 	bic.w	r3, r3, #24
 800998a:	73fb      	strb	r3, [r7, #15]
  c = c | obj->Gscale << 3; // Set full scale range for the gyro
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	795b      	ldrb	r3, [r3, #5]
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	b25a      	sxtb	r2, r3
 8009994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009998:	4313      	orrs	r3, r2
 800999a:	b25b      	sxtb	r3, r3
 800999c:	73fb      	strb	r3, [r7, #15]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  MPU9250_writeByte(obj, MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	221b      	movs	r2, #27
 80099a2:	21d0      	movs	r1, #208	; 0xd0
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff fcec 	bl	8009382 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 80099aa:	221c      	movs	r2, #28
 80099ac:	21d0      	movs	r1, #208	; 0xd0
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7ff fd5b 	bl	800946a <MPU9250_readByte>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73fb      	strb	r3, [r7, #15]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	f023 0318 	bic.w	r3, r3, #24
 80099be:	73fb      	strb	r3, [r7, #15]
  c = c | obj->Ascale << 3; // Set full scale range for the accelerometer
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	791b      	ldrb	r3, [r3, #4]
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	b25a      	sxtb	r2, r3
 80099c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	b25b      	sxtb	r3, r3
 80099d0:	73fb      	strb	r3, [r7, #15]
  MPU9250_writeByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
 80099d4:	221c      	movs	r2, #28
 80099d6:	21d0      	movs	r1, #208	; 0xd0
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff fcd2 	bl	8009382 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 80099de:	221d      	movs	r2, #29
 80099e0:	21d0      	movs	r1, #208	; 0xd0
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff fd41 	bl	800946a <MPU9250_readByte>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	f023 030f 	bic.w	r3, r3, #15
 80099f2:	73fb      	strb	r3, [r7, #15]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	f043 0303 	orr.w	r3, r3, #3
 80099fa:	73fb      	strb	r3, [r7, #15]
  MPU9250_writeByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	221d      	movs	r2, #29
 8009a00:	21d0      	movs	r1, #208	; 0xd0
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff fcbd 	bl	8009382 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(obj, MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8009a08:	2322      	movs	r3, #34	; 0x22
 8009a0a:	2237      	movs	r2, #55	; 0x37
 8009a0c:	21d0      	movs	r1, #208	; 0xd0
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7ff fcb7 	bl	8009382 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8009a14:	2301      	movs	r3, #1
 8009a16:	2238      	movs	r2, #56	; 0x38
 8009a18:	21d0      	movs	r1, #208	; 0xd0
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff fcb1 	bl	8009382 <MPU9250_writeByte>
}
 8009a20:	bf00      	nop
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <sensorHz_update>:

// hz check

uint16_t imu_state, mag_state, sbus_state, gps_state, estimator_state;
uint16_t imu_hz, mag_hz, sbus_hz, gps_hz, estimator_hz;
void sensorHz_update(){
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	af00      	add	r7, sp, #0
	imu_hz = MPU9250_getHz();
 8009a2c:	f7ff fc58 	bl	80092e0 <MPU9250_getHz>
 8009a30:	4603      	mov	r3, r0
 8009a32:	461a      	mov	r2, r3
 8009a34:	4b15      	ldr	r3, [pc, #84]	; (8009a8c <sensorHz_update+0x64>)
 8009a36:	801a      	strh	r2, [r3, #0]
	estimator_hz = estimate_getHz(&iEstimate);
 8009a38:	4815      	ldr	r0, [pc, #84]	; (8009a90 <sensorHz_update+0x68>)
 8009a3a:	f000 f835 	bl	8009aa8 <estimate_getHz>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	461a      	mov	r2, r3
 8009a42:	4b14      	ldr	r3, [pc, #80]	; (8009a94 <sensorHz_update+0x6c>)
 8009a44:	801a      	strh	r2, [r3, #0]
	sbus_hz = sbus_getHz();
 8009a46:	f000 fde9 	bl	800a61c <sbus_getHz>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	4b12      	ldr	r3, [pc, #72]	; (8009a98 <sensorHz_update+0x70>)
 8009a50:	801a      	strh	r2, [r3, #0]

	//state update
	imu_state = imu_hz > 60 ? STATE_STABLE : STATE_DISABLE;
 8009a52:	4b0e      	ldr	r3, [pc, #56]	; (8009a8c <sensorHz_update+0x64>)
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	2b3c      	cmp	r3, #60	; 0x3c
 8009a58:	d901      	bls.n	8009a5e <sensorHz_update+0x36>
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	e000      	b.n	8009a60 <sensorHz_update+0x38>
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4b0e      	ldr	r3, [pc, #56]	; (8009a9c <sensorHz_update+0x74>)
 8009a62:	801a      	strh	r2, [r3, #0]
	estimator_state = estimator_hz > 60 ? STATE_STABLE : STATE_DISABLE;
 8009a64:	4b0b      	ldr	r3, [pc, #44]	; (8009a94 <sensorHz_update+0x6c>)
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	2b3c      	cmp	r3, #60	; 0x3c
 8009a6a:	d901      	bls.n	8009a70 <sensorHz_update+0x48>
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	e000      	b.n	8009a72 <sensorHz_update+0x4a>
 8009a70:	2200      	movs	r2, #0
 8009a72:	4b0b      	ldr	r3, [pc, #44]	; (8009aa0 <sensorHz_update+0x78>)
 8009a74:	801a      	strh	r2, [r3, #0]
	sbus_state = sbus_hz > 60 ? STATE_STABLE : STATE_DISABLE;
 8009a76:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <sensorHz_update+0x70>)
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	2b3c      	cmp	r3, #60	; 0x3c
 8009a7c:	d901      	bls.n	8009a82 <sensorHz_update+0x5a>
 8009a7e:	2202      	movs	r2, #2
 8009a80:	e000      	b.n	8009a84 <sensorHz_update+0x5c>
 8009a82:	2200      	movs	r2, #0
 8009a84:	4b07      	ldr	r3, [pc, #28]	; (8009aa4 <sensorHz_update+0x7c>)
 8009a86:	801a      	strh	r2, [r3, #0]
}
 8009a88:	bf00      	nop
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20000a8e 	.word	0x20000a8e
 8009a90:	2000000c 	.word	0x2000000c
 8009a94:	20000a94 	.word	0x20000a94
 8009a98:	20000a90 	.word	0x20000a90
 8009a9c:	20000a86 	.word	0x20000a86
 8009aa0:	20000a8c 	.word	0x20000a8c
 8009aa4:	20000a92 	.word	0x20000a92

08009aa8 <estimate_getHz>:
#include "estimate.h"
#include "algorithmCollection.h"

struct estimate iEstimate = {{1, 0, 0, 0}, 0, 0, 0, 0, 0, 0};

uint16_t estimate_getHz(struct estimate* e){ // call this func 1hz
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
	uint16_t temp = e->estimate_hzcnt;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab4:	81fb      	strh	r3, [r7, #14]
	e->estimate_hzcnt = 0;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	851a      	strh	r2, [r3, #40]	; 0x28
	return temp;
 8009abc:	89fb      	ldrh	r3, [r7, #14]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
	...

08009acc <estimate_update>:
//---------------------------------------------------------------------------------------------------
// Variable definitions

volatile float beta = betaDef;

void estimate_update(struct estimate* e, struct MPU9250* mpu9250){
 8009acc:	b590      	push	{r4, r7, lr}
 8009ace:	ed2d 8b06 	vpush	{d8-d10}
 8009ad2:	b087      	sub	sp, #28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
	static struct junTimer timer;
	if(!timer.start){
 8009ada:	4b3f      	ldr	r3, [pc, #252]	; (8009bd8 <estimate_update+0x10c>)
 8009adc:	791b      	ldrb	r3, [r3, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d103      	bne.n	8009aea <estimate_update+0x1e>
		junTimer_tic(&timer);
 8009ae2:	483d      	ldr	r0, [pc, #244]	; (8009bd8 <estimate_update+0x10c>)
 8009ae4:	f7f7 fb1f 	bl	8001126 <junTimer_tic>
 8009ae8:	e070      	b.n	8009bcc <estimate_update+0x100>
		return;
	}

	MadgwickAHRSupdateIMU(e, mpu9250->gx, mpu9250->gy, mpu9250->gz
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	ed93 8a16 	vldr	s16, [r3, #88]	; 0x58
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	edd3 8a17 	vldr	s17, [r3, #92]	; 0x5c
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	ed93 9a18 	vldr	s18, [r3, #96]	; 0x60
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	edd3 9a13 	vldr	s19, [r3, #76]	; 0x4c
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	ed93 aa14 	vldr	s20, [r3, #80]	; 0x50
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	edd3 aa15 	vldr	s21, [r3, #84]	; 0x54
						, mpu9250->ax, mpu9250->ay, mpu9250->az, junTimer_toc(&timer)/1000.0);
 8009b0e:	4832      	ldr	r0, [pc, #200]	; (8009bd8 <estimate_update+0x10c>)
 8009b10:	f7f7 fb19 	bl	8001146 <junTimer_toc>
 8009b14:	4603      	mov	r3, r0
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7f6 fcb4 	bl	8000484 <__aeabi_ui2d>
 8009b1c:	f04f 0200 	mov.w	r2, #0
 8009b20:	4b2e      	ldr	r3, [pc, #184]	; (8009bdc <estimate_update+0x110>)
 8009b22:	f7f6 fe53 	bl	80007cc <__aeabi_ddiv>
 8009b26:	4603      	mov	r3, r0
 8009b28:	460c      	mov	r4, r1
	MadgwickAHRSupdateIMU(e, mpu9250->gx, mpu9250->gy, mpu9250->gz
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	f7f6 fffb 	bl	8000b28 <__aeabi_d2f>
 8009b32:	4603      	mov	r3, r0
 8009b34:	ee03 3a10 	vmov	s6, r3
 8009b38:	eef0 2a6a 	vmov.f32	s5, s21
 8009b3c:	eeb0 2a4a 	vmov.f32	s4, s20
 8009b40:	eef0 1a69 	vmov.f32	s3, s19
 8009b44:	eeb0 1a49 	vmov.f32	s2, s18
 8009b48:	eef0 0a68 	vmov.f32	s1, s17
 8009b4c:	eeb0 0a48 	vmov.f32	s0, s16
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f845 	bl	8009be0 <MadgwickAHRSupdateIMU>

	float roll, pitch, yaw;
	quat2eul(e->bodyQ, &roll, &pitch, &yaw);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f107 030c 	add.w	r3, r7, #12
 8009b5c:	f107 0210 	add.w	r2, r7, #16
 8009b60:	f107 0114 	add.w	r1, r7, #20
 8009b64:	f7f7 f9ec 	bl	8000f40 <quat2eul>
	e->roll = -1*roll;//rpy vector
 8009b68:	edd7 7a05 	vldr	s15, [r7, #20]
 8009b6c:	eef1 7a67 	vneg.f32	s15, s15
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	edc3 7a04 	vstr	s15, [r3, #16]
	e->pitch = pitch;
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	615a      	str	r2, [r3, #20]
	e->yaw = -1*yaw;
 8009b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b80:	eef1 7a67 	vneg.f32	s15, s15
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	edc3 7a06 	vstr	s15, [r3, #24]

	e->p = -mpu9250->gx;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009b90:	eef1 7a67 	vneg.f32	s15, s15
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	edc3 7a07 	vstr	s15, [r3, #28]
	e->q = -mpu9250->gy;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8009ba0:	eef1 7a67 	vneg.f32	s15, s15
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	edc3 7a08 	vstr	s15, [r3, #32]
	e->r = -mpu9250->gz;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8009bb0:	eef1 7a67 	vneg.f32	s15, s15
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	e->estimate_hzcnt++;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	851a      	strh	r2, [r3, #40]	; 0x28
	junTimer_tic(&timer);
 8009bc6:	4804      	ldr	r0, [pc, #16]	; (8009bd8 <estimate_update+0x10c>)
 8009bc8:	f7f7 faad 	bl	8001126 <junTimer_tic>
}
 8009bcc:	371c      	adds	r7, #28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	ecbd 8b06 	vpop	{d8-d10}
 8009bd4:	bd90      	pop	{r4, r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000300 	.word	0x20000300
 8009bdc:	408f4000 	.word	0x408f4000

08009be0 <MadgwickAHRSupdateIMU>:

void estimate_print(struct estimate* e){
	printf("%f %f %f\r\n", e->roll, e->pitch, e->yaw);
}
void MadgwickAHRSupdateIMU(struct estimate* e, float gx, float gy, float gz, float ax, float ay, float az , float dt) { // dt : second
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b0a2      	sub	sp, #136	; 0x88
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	61f8      	str	r0, [r7, #28]
 8009be8:	ed87 0a06 	vstr	s0, [r7, #24]
 8009bec:	edc7 0a05 	vstr	s1, [r7, #20]
 8009bf0:	ed87 1a04 	vstr	s2, [r7, #16]
 8009bf4:	edc7 1a03 	vstr	s3, [r7, #12]
 8009bf8:	ed87 2a02 	vstr	s4, [r7, #8]
 8009bfc:	edc7 2a01 	vstr	s5, [r7, #4]
 8009c00:	ed87 3a00 	vstr	s6, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	float q0 = e->bodyQ[0];
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	677b      	str	r3, [r7, #116]	; 0x74
	float q1 = e->bodyQ[1];
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	673b      	str	r3, [r7, #112]	; 0x70
	float q2 = e->bodyQ[2];
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	66fb      	str	r3, [r7, #108]	; 0x6c
	float q3 = e->bodyQ[3];
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	66bb      	str	r3, [r7, #104]	; 0x68

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8009c1c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009c20:	eeb1 7a67 	vneg.f32	s14, s15
 8009c24:	edd7 7a06 	vldr	s15, [r7, #24]
 8009c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c2c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8009c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c3c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8009c40:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c54:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8009c58:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009c5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009c60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c64:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8009c68:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c74:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8009c78:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c8c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8009c90:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009c94:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c9c:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8009ca0:	edd7 7a04 	vldr	s15, [r7, #16]
 8009ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ca8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009cac:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8009cb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8009cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009cc4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8009cc8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009ccc:	edd7 7a04 	vldr	s15, [r7, #16]
 8009cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009cd4:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8009cd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8009cdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ce4:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8009ce8:	edd7 7a06 	vldr	s15, [r7, #24]
 8009cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cf4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009cfc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8009d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8009d04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d0c:	d10e      	bne.n	8009d2c <MadgwickAHRSupdateIMU+0x14c>
 8009d0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009d12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1a:	d107      	bne.n	8009d2c <MadgwickAHRSupdateIMU+0x14c>
 8009d1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d28:	f000 81d4 	beq.w	800a0d4 <MadgwickAHRSupdateIMU+0x4f4>
		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8009d2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009d30:	edd7 7a03 	vldr	s15, [r7, #12]
 8009d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d38:	edd7 6a02 	vldr	s13, [r7, #8]
 8009d3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d48:	edd7 6a01 	vldr	s13, [r7, #4]
 8009d4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d58:	eeb0 0a67 	vmov.f32	s0, s15
 8009d5c:	f7f7 f8b4 	bl	8000ec8 <invSqrt>
 8009d60:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 8009d64:	ed97 7a03 	vldr	s14, [r7, #12]
 8009d68:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8009d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d70:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8009d74:	ed97 7a02 	vldr	s14, [r7, #8]
 8009d78:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8009d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d80:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8009d84:	ed97 7a01 	vldr	s14, [r7, #4]
 8009d88:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8009d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d90:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8009d94:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009d98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009d9c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 8009da0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009da4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009da8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 8009dac:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009db0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009db4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 8009db8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8009dbc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009dc0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 8009dc4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009dc8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009dd0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 8009dd4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009dd8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009de0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 8009de4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009de8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009df0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 8009df4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009df8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e00:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 8009e04:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009e08:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e10:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 8009e14:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009e18:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e20:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 8009e24:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8009e28:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e30:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 8009e34:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8009e38:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e40:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 8009e44:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8009e48:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8009e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e50:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8009e54:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009e58:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e60:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8009e64:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e70:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8009e74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e80:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8009e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8009e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8009e94:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009e98:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ea0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8009ea4:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009eac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009eb0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009eb4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8009eb8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009ebc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ec8:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8009ecc:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ed4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009ed8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009edc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009ee0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8009ee4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009eec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ef0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8009ef4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009efc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f00:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8009f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f10:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8009f14:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f18:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009f1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009f20:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f28:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8009f2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f38:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8009f3c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f48:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8009f4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f58:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009f5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f60:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8009f64:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f70:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8009f74:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f80:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8009f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8009f94:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009f98:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009f9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009fa0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8009fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fa8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8009fac:	edd7 7a03 	vldr	s15, [r7, #12]
 8009fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009fb8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009fbc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8009fc0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009fc4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8009fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fd0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8009fd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fe0:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8009fe4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009fe8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ff0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009ff4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a000:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a004:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a00c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a010:	edd7 6a08 	vldr	s13, [r7, #32]
 800a014:	edd7 7a08 	vldr	s15, [r7, #32]
 800a018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a01c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a020:	eeb0 0a67 	vmov.f32	s0, s15
 800a024:	f7f6 ff50 	bl	8000ec8 <invSqrt>
 800a028:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 800a02c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a030:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a034:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a038:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 800a03c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a040:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a044:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a048:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 800a04c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a050:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a054:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a058:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 800a05c:	ed97 7a08 	vldr	s14, [r7, #32]
 800a060:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a064:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a068:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 800a06c:	4b5b      	ldr	r3, [pc, #364]	; (800a1dc <MadgwickAHRSupdateIMU+0x5fc>)
 800a06e:	ed93 7a00 	vldr	s14, [r3]
 800a072:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a07a:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800a07e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a082:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		qDot2 -= beta * s1;
 800a086:	4b55      	ldr	r3, [pc, #340]	; (800a1dc <MadgwickAHRSupdateIMU+0x5fc>)
 800a088:	ed93 7a00 	vldr	s14, [r3]
 800a08c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a090:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a094:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a09c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		qDot3 -= beta * s2;
 800a0a0:	4b4e      	ldr	r3, [pc, #312]	; (800a1dc <MadgwickAHRSupdateIMU+0x5fc>)
 800a0a2:	ed93 7a00 	vldr	s14, [r3]
 800a0a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ae:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a0b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0b6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		qDot4 -= beta * s3;
 800a0ba:	4b48      	ldr	r3, [pc, #288]	; (800a1dc <MadgwickAHRSupdateIMU+0x5fc>)
 800a0bc:	ed93 7a00 	vldr	s14, [r3]
 800a0c0:	edd7 7a08 	vldr	s15, [r7, #32]
 800a0c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0c8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800a0cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0d0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
//	q0 += qDot1 * (1.0f / sampleFreq);
//	q1 += qDot2 * (1.0f / sampleFreq);
//	q2 += qDot3 * (1.0f / sampleFreq);
//	q3 += qDot4 * (1.0f / sampleFreq);

	q0 += qDot1 * (dt);
 800a0d4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800a0d8:	edd7 7a00 	vldr	s15, [r7]
 800a0dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a0e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0e8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q1 += qDot2 * (dt);
 800a0ec:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a0f0:	edd7 7a00 	vldr	s15, [r7]
 800a0f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a0fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a100:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q2 += qDot3 * (dt);
 800a104:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a108:	edd7 7a00 	vldr	s15, [r7]
 800a10c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a110:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a114:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a118:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q3 += qDot4 * (dt);
 800a11c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800a120:	edd7 7a00 	vldr	s15, [r7]
 800a124:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a128:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800a12c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a130:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800a134:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a138:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a13c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a140:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800a144:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a14c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a150:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800a154:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a15c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a160:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800a164:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a168:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a16c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a170:	eeb0 0a67 	vmov.f32	s0, s15
 800a174:	f7f6 fea8 	bl	8000ec8 <invSqrt>
 800a178:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 800a17c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a180:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a184:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a188:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q1 *= recipNorm;
 800a18c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a190:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a194:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a198:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q2 *= recipNorm;
 800a19c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a1a0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a1a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1a8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q3 *= recipNorm;
 800a1ac:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800a1b0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a1b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1b8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


	e->bodyQ[0] = q0;
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a1c0:	601a      	str	r2, [r3, #0]
	e->bodyQ[1] = q1;
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a1c6:	605a      	str	r2, [r3, #4]
	e->bodyQ[2] = q2;
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1cc:	609a      	str	r2, [r3, #8]
	e->bodyQ[3] = q3;
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a1d2:	60da      	str	r2, [r3, #12]
}
 800a1d4:	bf00      	nop
 800a1d6:	3788      	adds	r7, #136	; 0x88
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20000038 	.word	0x20000038

0800a1e0 <sbus_start>:
uint16_t sbus_errcnt = 0;

static uint8_t _parserState = 0;		//for parsing
static uint8_t _curByte, _prevByte;

void sbus_start(UART_HandleTypeDef *huart) {
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
	sbus_phuart = huart;
 800a1e8:	4a05      	ldr	r2, [pc, #20]	; (800a200 <sbus_start+0x20>)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6013      	str	r3, [r2, #0]
//	HAL_UART_Receive_DMA(huart, sbus_rxBuf, SBUS_BUF_SIZE);
	HAL_UART_Receive_DMA(huart, sbus_dmaBuf, SBUS_DMA_BUF_SIZE);
 800a1ee:	2219      	movs	r2, #25
 800a1f0:	4904      	ldr	r1, [pc, #16]	; (800a204 <sbus_start+0x24>)
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7fd fe9e 	bl	8007f34 <HAL_UART_Receive_DMA>
}
 800a1f8:	bf00      	nop
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	20000388 	.word	0x20000388
 800a204:	20000324 	.word	0x20000324

0800a208 <sbus_decoding>:


void sbus_decoding() { // input to HAL_UART_RxCpltCallback
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
	if(sbus_rxBuf[23] & SBUS_LOST_FRAME || sbus_rxBuf[23] & SBUS_FAIL_SAFE){//failsafe frame
 800a20e:	4b09      	ldr	r3, [pc, #36]	; (800a234 <sbus_decoding+0x2c>)
 800a210:	7ddb      	ldrb	r3, [r3, #23]
 800a212:	f003 0304 	and.w	r3, r3, #4
 800a216:	2b00      	cmp	r3, #0
 800a218:	d105      	bne.n	800a226 <sbus_decoding+0x1e>
 800a21a:	4b06      	ldr	r3, [pc, #24]	; (800a234 <sbus_decoding+0x2c>)
 800a21c:	7ddb      	ldrb	r3, [r3, #23]
 800a21e:	f003 0308 	and.w	r3, r3, #8
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <sbus_decoding+0x34>
//		printf("fail safe\r\n");
		sbus_errcnt++;
 800a226:	4b04      	ldr	r3, [pc, #16]	; (800a238 <sbus_decoding+0x30>)
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	3301      	adds	r3, #1
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	4b02      	ldr	r3, [pc, #8]	; (800a238 <sbus_decoding+0x30>)
 800a230:	801a      	strh	r2, [r3, #0]
		return;
 800a232:	e170      	b.n	800a516 <sbus_decoding+0x30e>
 800a234:	20000308 	.word	0x20000308
 800a238:	2000038e 	.word	0x2000038e
	}

	sbus_rcValue[0] = ((uint16_t)sbus_rxBuf[1] >> 0 | ((uint16_t)sbus_rxBuf[2] << 8)) & 0x07FF;
 800a23c:	4b95      	ldr	r3, [pc, #596]	; (800a494 <sbus_decoding+0x28c>)
 800a23e:	785b      	ldrb	r3, [r3, #1]
 800a240:	b21a      	sxth	r2, r3
 800a242:	4b94      	ldr	r3, [pc, #592]	; (800a494 <sbus_decoding+0x28c>)
 800a244:	789b      	ldrb	r3, [r3, #2]
 800a246:	021b      	lsls	r3, r3, #8
 800a248:	b21b      	sxth	r3, r3
 800a24a:	4313      	orrs	r3, r2
 800a24c:	b21b      	sxth	r3, r3
 800a24e:	b29b      	uxth	r3, r3
 800a250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a254:	b29a      	uxth	r2, r3
 800a256:	4b90      	ldr	r3, [pc, #576]	; (800a498 <sbus_decoding+0x290>)
 800a258:	801a      	strh	r2, [r3, #0]
	sbus_rcValue[1] = ((uint16_t)sbus_rxBuf[2] >> 3 | ((uint16_t)sbus_rxBuf[3] << 5)) & 0x07FF;
 800a25a:	4b8e      	ldr	r3, [pc, #568]	; (800a494 <sbus_decoding+0x28c>)
 800a25c:	789b      	ldrb	r3, [r3, #2]
 800a25e:	08db      	lsrs	r3, r3, #3
 800a260:	b2db      	uxtb	r3, r3
 800a262:	b21a      	sxth	r2, r3
 800a264:	4b8b      	ldr	r3, [pc, #556]	; (800a494 <sbus_decoding+0x28c>)
 800a266:	78db      	ldrb	r3, [r3, #3]
 800a268:	015b      	lsls	r3, r3, #5
 800a26a:	b21b      	sxth	r3, r3
 800a26c:	4313      	orrs	r3, r2
 800a26e:	b21b      	sxth	r3, r3
 800a270:	b29b      	uxth	r3, r3
 800a272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a276:	b29a      	uxth	r2, r3
 800a278:	4b87      	ldr	r3, [pc, #540]	; (800a498 <sbus_decoding+0x290>)
 800a27a:	805a      	strh	r2, [r3, #2]
	sbus_rcValue[2] = ((uint16_t)sbus_rxBuf[3] >> 6 | ((uint16_t)sbus_rxBuf[4] << 2) | (uint16_t)sbus_rxBuf[5] << 10) & 0x07FF;
 800a27c:	4b85      	ldr	r3, [pc, #532]	; (800a494 <sbus_decoding+0x28c>)
 800a27e:	78db      	ldrb	r3, [r3, #3]
 800a280:	099b      	lsrs	r3, r3, #6
 800a282:	b2db      	uxtb	r3, r3
 800a284:	b21a      	sxth	r2, r3
 800a286:	4b83      	ldr	r3, [pc, #524]	; (800a494 <sbus_decoding+0x28c>)
 800a288:	791b      	ldrb	r3, [r3, #4]
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	b21b      	sxth	r3, r3
 800a28e:	4313      	orrs	r3, r2
 800a290:	b21a      	sxth	r2, r3
 800a292:	4b80      	ldr	r3, [pc, #512]	; (800a494 <sbus_decoding+0x28c>)
 800a294:	795b      	ldrb	r3, [r3, #5]
 800a296:	029b      	lsls	r3, r3, #10
 800a298:	b21b      	sxth	r3, r3
 800a29a:	4313      	orrs	r3, r2
 800a29c:	b21b      	sxth	r3, r3
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	4b7c      	ldr	r3, [pc, #496]	; (800a498 <sbus_decoding+0x290>)
 800a2a8:	809a      	strh	r2, [r3, #4]
	sbus_rcValue[3] = ((uint16_t)sbus_rxBuf[5] >> 1 | ((uint16_t)sbus_rxBuf[6] << 7)) & 0x07FF;
 800a2aa:	4b7a      	ldr	r3, [pc, #488]	; (800a494 <sbus_decoding+0x28c>)
 800a2ac:	795b      	ldrb	r3, [r3, #5]
 800a2ae:	085b      	lsrs	r3, r3, #1
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	b21a      	sxth	r2, r3
 800a2b4:	4b77      	ldr	r3, [pc, #476]	; (800a494 <sbus_decoding+0x28c>)
 800a2b6:	799b      	ldrb	r3, [r3, #6]
 800a2b8:	01db      	lsls	r3, r3, #7
 800a2ba:	b21b      	sxth	r3, r3
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	b21b      	sxth	r3, r3
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	4b73      	ldr	r3, [pc, #460]	; (800a498 <sbus_decoding+0x290>)
 800a2ca:	80da      	strh	r2, [r3, #6]
	sbus_rcValue[4] = ((uint16_t)sbus_rxBuf[6] >> 4 | ((uint16_t)sbus_rxBuf[7] << 4)) & 0x07FF;
 800a2cc:	4b71      	ldr	r3, [pc, #452]	; (800a494 <sbus_decoding+0x28c>)
 800a2ce:	799b      	ldrb	r3, [r3, #6]
 800a2d0:	091b      	lsrs	r3, r3, #4
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	b21a      	sxth	r2, r3
 800a2d6:	4b6f      	ldr	r3, [pc, #444]	; (800a494 <sbus_decoding+0x28c>)
 800a2d8:	79db      	ldrb	r3, [r3, #7]
 800a2da:	011b      	lsls	r3, r3, #4
 800a2dc:	b21b      	sxth	r3, r3
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	b21b      	sxth	r3, r3
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	4b6b      	ldr	r3, [pc, #428]	; (800a498 <sbus_decoding+0x290>)
 800a2ec:	811a      	strh	r2, [r3, #8]
	sbus_rcValue[5] = ((uint16_t)sbus_rxBuf[7] >> 7 | ((uint16_t)sbus_rxBuf[8] << 1) | (uint16_t)sbus_rxBuf[9] << 9) & 0x07FF;
 800a2ee:	4b69      	ldr	r3, [pc, #420]	; (800a494 <sbus_decoding+0x28c>)
 800a2f0:	79db      	ldrb	r3, [r3, #7]
 800a2f2:	09db      	lsrs	r3, r3, #7
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	b21a      	sxth	r2, r3
 800a2f8:	4b66      	ldr	r3, [pc, #408]	; (800a494 <sbus_decoding+0x28c>)
 800a2fa:	7a1b      	ldrb	r3, [r3, #8]
 800a2fc:	005b      	lsls	r3, r3, #1
 800a2fe:	b21b      	sxth	r3, r3
 800a300:	4313      	orrs	r3, r2
 800a302:	b21a      	sxth	r2, r3
 800a304:	4b63      	ldr	r3, [pc, #396]	; (800a494 <sbus_decoding+0x28c>)
 800a306:	7a5b      	ldrb	r3, [r3, #9]
 800a308:	025b      	lsls	r3, r3, #9
 800a30a:	b21b      	sxth	r3, r3
 800a30c:	4313      	orrs	r3, r2
 800a30e:	b21b      	sxth	r3, r3
 800a310:	b29b      	uxth	r3, r3
 800a312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a316:	b29a      	uxth	r2, r3
 800a318:	4b5f      	ldr	r3, [pc, #380]	; (800a498 <sbus_decoding+0x290>)
 800a31a:	815a      	strh	r2, [r3, #10]
	sbus_rcValue[6] = ((uint16_t)sbus_rxBuf[9] >> 2 | ((uint16_t)sbus_rxBuf[10] << 6)) & 0x07FF;
 800a31c:	4b5d      	ldr	r3, [pc, #372]	; (800a494 <sbus_decoding+0x28c>)
 800a31e:	7a5b      	ldrb	r3, [r3, #9]
 800a320:	089b      	lsrs	r3, r3, #2
 800a322:	b2db      	uxtb	r3, r3
 800a324:	b21a      	sxth	r2, r3
 800a326:	4b5b      	ldr	r3, [pc, #364]	; (800a494 <sbus_decoding+0x28c>)
 800a328:	7a9b      	ldrb	r3, [r3, #10]
 800a32a:	019b      	lsls	r3, r3, #6
 800a32c:	b21b      	sxth	r3, r3
 800a32e:	4313      	orrs	r3, r2
 800a330:	b21b      	sxth	r3, r3
 800a332:	b29b      	uxth	r3, r3
 800a334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a338:	b29a      	uxth	r2, r3
 800a33a:	4b57      	ldr	r3, [pc, #348]	; (800a498 <sbus_decoding+0x290>)
 800a33c:	819a      	strh	r2, [r3, #12]
	sbus_rcValue[7] = ((uint16_t)sbus_rxBuf[10] >> 5 | ((uint16_t)sbus_rxBuf[11] << 3)) & 0x07FF;
 800a33e:	4b55      	ldr	r3, [pc, #340]	; (800a494 <sbus_decoding+0x28c>)
 800a340:	7a9b      	ldrb	r3, [r3, #10]
 800a342:	095b      	lsrs	r3, r3, #5
 800a344:	b2db      	uxtb	r3, r3
 800a346:	b21a      	sxth	r2, r3
 800a348:	4b52      	ldr	r3, [pc, #328]	; (800a494 <sbus_decoding+0x28c>)
 800a34a:	7adb      	ldrb	r3, [r3, #11]
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	b21b      	sxth	r3, r3
 800a350:	4313      	orrs	r3, r2
 800a352:	b21b      	sxth	r3, r3
 800a354:	b29b      	uxth	r3, r3
 800a356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	4b4e      	ldr	r3, [pc, #312]	; (800a498 <sbus_decoding+0x290>)
 800a35e:	81da      	strh	r2, [r3, #14]

	sbus_rcValue[8] = ((uint16_t)sbus_rxBuf[12] << 0 | ((uint16_t)sbus_rxBuf[13] << 8)) & 0x07FF;
 800a360:	4b4c      	ldr	r3, [pc, #304]	; (800a494 <sbus_decoding+0x28c>)
 800a362:	7b1b      	ldrb	r3, [r3, #12]
 800a364:	b21a      	sxth	r2, r3
 800a366:	4b4b      	ldr	r3, [pc, #300]	; (800a494 <sbus_decoding+0x28c>)
 800a368:	7b5b      	ldrb	r3, [r3, #13]
 800a36a:	021b      	lsls	r3, r3, #8
 800a36c:	b21b      	sxth	r3, r3
 800a36e:	4313      	orrs	r3, r2
 800a370:	b21b      	sxth	r3, r3
 800a372:	b29b      	uxth	r3, r3
 800a374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a378:	b29a      	uxth	r2, r3
 800a37a:	4b47      	ldr	r3, [pc, #284]	; (800a498 <sbus_decoding+0x290>)
 800a37c:	821a      	strh	r2, [r3, #16]
	sbus_rcValue[9] = ((uint16_t)sbus_rxBuf[13] >> 3 | ((uint16_t)sbus_rxBuf[14] << 5)) & 0x07FF;
 800a37e:	4b45      	ldr	r3, [pc, #276]	; (800a494 <sbus_decoding+0x28c>)
 800a380:	7b5b      	ldrb	r3, [r3, #13]
 800a382:	08db      	lsrs	r3, r3, #3
 800a384:	b2db      	uxtb	r3, r3
 800a386:	b21a      	sxth	r2, r3
 800a388:	4b42      	ldr	r3, [pc, #264]	; (800a494 <sbus_decoding+0x28c>)
 800a38a:	7b9b      	ldrb	r3, [r3, #14]
 800a38c:	015b      	lsls	r3, r3, #5
 800a38e:	b21b      	sxth	r3, r3
 800a390:	4313      	orrs	r3, r2
 800a392:	b21b      	sxth	r3, r3
 800a394:	b29b      	uxth	r3, r3
 800a396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	4b3e      	ldr	r3, [pc, #248]	; (800a498 <sbus_decoding+0x290>)
 800a39e:	825a      	strh	r2, [r3, #18]
	sbus_rcValue[10] = ((uint16_t)sbus_rxBuf[14] >> 6 | ((uint16_t)sbus_rxBuf[15] << 2) | (uint16_t)sbus_rxBuf[16] << 10) & 0x07FF;
 800a3a0:	4b3c      	ldr	r3, [pc, #240]	; (800a494 <sbus_decoding+0x28c>)
 800a3a2:	7b9b      	ldrb	r3, [r3, #14]
 800a3a4:	099b      	lsrs	r3, r3, #6
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	b21a      	sxth	r2, r3
 800a3aa:	4b3a      	ldr	r3, [pc, #232]	; (800a494 <sbus_decoding+0x28c>)
 800a3ac:	7bdb      	ldrb	r3, [r3, #15]
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	b21b      	sxth	r3, r3
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	b21a      	sxth	r2, r3
 800a3b6:	4b37      	ldr	r3, [pc, #220]	; (800a494 <sbus_decoding+0x28c>)
 800a3b8:	7c1b      	ldrb	r3, [r3, #16]
 800a3ba:	029b      	lsls	r3, r3, #10
 800a3bc:	b21b      	sxth	r3, r3
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	b21b      	sxth	r3, r3
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	4b33      	ldr	r3, [pc, #204]	; (800a498 <sbus_decoding+0x290>)
 800a3cc:	829a      	strh	r2, [r3, #20]
	sbus_rcValue[11] = ((uint16_t)sbus_rxBuf[16] >> 1 | ((uint16_t)sbus_rxBuf[17] << 7)) & 0x07FF;
 800a3ce:	4b31      	ldr	r3, [pc, #196]	; (800a494 <sbus_decoding+0x28c>)
 800a3d0:	7c1b      	ldrb	r3, [r3, #16]
 800a3d2:	085b      	lsrs	r3, r3, #1
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	b21a      	sxth	r2, r3
 800a3d8:	4b2e      	ldr	r3, [pc, #184]	; (800a494 <sbus_decoding+0x28c>)
 800a3da:	7c5b      	ldrb	r3, [r3, #17]
 800a3dc:	01db      	lsls	r3, r3, #7
 800a3de:	b21b      	sxth	r3, r3
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	b21b      	sxth	r3, r3
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	4b2a      	ldr	r3, [pc, #168]	; (800a498 <sbus_decoding+0x290>)
 800a3ee:	82da      	strh	r2, [r3, #22]
	sbus_rcValue[12] = ((uint16_t)sbus_rxBuf[17] >> 4 | ((uint16_t)sbus_rxBuf[18] << 4)) & 0x07FF;
 800a3f0:	4b28      	ldr	r3, [pc, #160]	; (800a494 <sbus_decoding+0x28c>)
 800a3f2:	7c5b      	ldrb	r3, [r3, #17]
 800a3f4:	091b      	lsrs	r3, r3, #4
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	b21a      	sxth	r2, r3
 800a3fa:	4b26      	ldr	r3, [pc, #152]	; (800a494 <sbus_decoding+0x28c>)
 800a3fc:	7c9b      	ldrb	r3, [r3, #18]
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	b21b      	sxth	r3, r3
 800a402:	4313      	orrs	r3, r2
 800a404:	b21b      	sxth	r3, r3
 800a406:	b29b      	uxth	r3, r3
 800a408:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	4b22      	ldr	r3, [pc, #136]	; (800a498 <sbus_decoding+0x290>)
 800a410:	831a      	strh	r2, [r3, #24]
	sbus_rcValue[13] = ((uint16_t)sbus_rxBuf[18] >> 7 | ((uint16_t)sbus_rxBuf[19] << 1) | (uint16_t)sbus_rxBuf[21] << 9) & 0x07FF;
 800a412:	4b20      	ldr	r3, [pc, #128]	; (800a494 <sbus_decoding+0x28c>)
 800a414:	7c9b      	ldrb	r3, [r3, #18]
 800a416:	09db      	lsrs	r3, r3, #7
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	b21a      	sxth	r2, r3
 800a41c:	4b1d      	ldr	r3, [pc, #116]	; (800a494 <sbus_decoding+0x28c>)
 800a41e:	7cdb      	ldrb	r3, [r3, #19]
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	b21b      	sxth	r3, r3
 800a424:	4313      	orrs	r3, r2
 800a426:	b21a      	sxth	r2, r3
 800a428:	4b1a      	ldr	r3, [pc, #104]	; (800a494 <sbus_decoding+0x28c>)
 800a42a:	7d5b      	ldrb	r3, [r3, #21]
 800a42c:	025b      	lsls	r3, r3, #9
 800a42e:	b21b      	sxth	r3, r3
 800a430:	4313      	orrs	r3, r2
 800a432:	b21b      	sxth	r3, r3
 800a434:	b29b      	uxth	r3, r3
 800a436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	4b16      	ldr	r3, [pc, #88]	; (800a498 <sbus_decoding+0x290>)
 800a43e:	835a      	strh	r2, [r3, #26]
	sbus_rcValue[14] = ((uint16_t)sbus_rxBuf[20] >> 2 | ((uint16_t)sbus_rxBuf[21] << 6)) & 0x07FF;
 800a440:	4b14      	ldr	r3, [pc, #80]	; (800a494 <sbus_decoding+0x28c>)
 800a442:	7d1b      	ldrb	r3, [r3, #20]
 800a444:	089b      	lsrs	r3, r3, #2
 800a446:	b2db      	uxtb	r3, r3
 800a448:	b21a      	sxth	r2, r3
 800a44a:	4b12      	ldr	r3, [pc, #72]	; (800a494 <sbus_decoding+0x28c>)
 800a44c:	7d5b      	ldrb	r3, [r3, #21]
 800a44e:	019b      	lsls	r3, r3, #6
 800a450:	b21b      	sxth	r3, r3
 800a452:	4313      	orrs	r3, r2
 800a454:	b21b      	sxth	r3, r3
 800a456:	b29b      	uxth	r3, r3
 800a458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	4b0e      	ldr	r3, [pc, #56]	; (800a498 <sbus_decoding+0x290>)
 800a460:	839a      	strh	r2, [r3, #28]
	sbus_rcValue[15] = ((uint16_t)sbus_rxBuf[21] >> 5 | ((uint16_t)sbus_rxBuf[22] << 3)) & 0x07FF;
 800a462:	4b0c      	ldr	r3, [pc, #48]	; (800a494 <sbus_decoding+0x28c>)
 800a464:	7d5b      	ldrb	r3, [r3, #21]
 800a466:	095b      	lsrs	r3, r3, #5
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	b21a      	sxth	r2, r3
 800a46c:	4b09      	ldr	r3, [pc, #36]	; (800a494 <sbus_decoding+0x28c>)
 800a46e:	7d9b      	ldrb	r3, [r3, #22]
 800a470:	00db      	lsls	r3, r3, #3
 800a472:	b21b      	sxth	r3, r3
 800a474:	4313      	orrs	r3, r2
 800a476:	b21b      	sxth	r3, r3
 800a478:	b29b      	uxth	r3, r3
 800a47a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a47e:	b29a      	uxth	r2, r3
 800a480:	4b05      	ldr	r3, [pc, #20]	; (800a498 <sbus_decoding+0x290>)
 800a482:	83da      	strh	r2, [r3, #30]


	if (((uint16_t)sbus_rxBuf[23]) & 0x0001)       sbus_rcValue[16] = 2000; else sbus_rcValue[16] = 1000;
 800a484:	4b03      	ldr	r3, [pc, #12]	; (800a494 <sbus_decoding+0x28c>)
 800a486:	7ddb      	ldrb	r3, [r3, #23]
 800a488:	f003 0301 	and.w	r3, r3, #1
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00a      	beq.n	800a4a6 <sbus_decoding+0x29e>
 800a490:	e004      	b.n	800a49c <sbus_decoding+0x294>
 800a492:	bf00      	nop
 800a494:	20000308 	.word	0x20000308
 800a498:	20000340 	.word	0x20000340
 800a49c:	4b20      	ldr	r3, [pc, #128]	; (800a520 <sbus_decoding+0x318>)
 800a49e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a4a2:	841a      	strh	r2, [r3, #32]
 800a4a4:	e003      	b.n	800a4ae <sbus_decoding+0x2a6>
 800a4a6:	4b1e      	ldr	r3, [pc, #120]	; (800a520 <sbus_decoding+0x318>)
 800a4a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4ac:	841a      	strh	r2, [r3, #32]
	if (((uint16_t)sbus_rxBuf[23] >> 1) & 0x0001)  sbus_rcValue[17] = 2000; else sbus_rcValue[17] = 1000;
 800a4ae:	4b1d      	ldr	r3, [pc, #116]	; (800a524 <sbus_decoding+0x31c>)
 800a4b0:	7ddb      	ldrb	r3, [r3, #23]
 800a4b2:	085b      	lsrs	r3, r3, #1
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d004      	beq.n	800a4c8 <sbus_decoding+0x2c0>
 800a4be:	4b18      	ldr	r3, [pc, #96]	; (800a520 <sbus_decoding+0x318>)
 800a4c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a4c4:	845a      	strh	r2, [r3, #34]	; 0x22
 800a4c6:	e003      	b.n	800a4d0 <sbus_decoding+0x2c8>
 800a4c8:	4b15      	ldr	r3, [pc, #84]	; (800a520 <sbus_decoding+0x318>)
 800a4ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4ce:	845a      	strh	r2, [r3, #34]	; 0x22

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	607b      	str	r3, [r7, #4]
 800a4d4:	e016      	b.n	800a504 <sbus_decoding+0x2fc>
		sbus_comp_rcValue[i] = (sbus_rcValue[i]) * 5 / 8 + 880;
 800a4d6:	4a12      	ldr	r2, [pc, #72]	; (800a520 <sbus_decoding+0x318>)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	da00      	bge.n	800a4ec <sbus_decoding+0x2e4>
 800a4ea:	3307      	adds	r3, #7
 800a4ec:	10db      	asrs	r3, r3, #3
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800a4f4:	b299      	uxth	r1, r3
 800a4f6:	4a0c      	ldr	r2, [pc, #48]	; (800a528 <sbus_decoding+0x320>)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	3301      	adds	r3, #1
 800a502:	607b      	str	r3, [r7, #4]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b11      	cmp	r3, #17
 800a508:	dde5      	ble.n	800a4d6 <sbus_decoding+0x2ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe

	sbus_hzcnt++;
 800a50a:	4b08      	ldr	r3, [pc, #32]	; (800a52c <sbus_decoding+0x324>)
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	3301      	adds	r3, #1
 800a510:	b29a      	uxth	r2, r3
 800a512:	4b06      	ldr	r3, [pc, #24]	; (800a52c <sbus_decoding+0x324>)
 800a514:	801a      	strh	r2, [r3, #0]
}
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr
 800a520:	20000340 	.word	0x20000340
 800a524:	20000308 	.word	0x20000308
 800a528:	20000364 	.word	0x20000364
 800a52c:	2000038c 	.word	0x2000038c

0800a530 <sbus_callback>:


void sbus_callback(){
 800a530:	b580      	push	{r7, lr}
 800a532:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 800a534:	4b33      	ldr	r3, [pc, #204]	; (800a604 <sbus_callback+0xd4>)
 800a536:	2200      	movs	r2, #0
 800a538:	701a      	strb	r2, [r3, #0]
 800a53a:	e05c      	b.n	800a5f6 <sbus_callback+0xc6>
		_curByte = sbus_dmaBuf[i];
 800a53c:	4b31      	ldr	r3, [pc, #196]	; (800a604 <sbus_callback+0xd4>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	461a      	mov	r2, r3
 800a542:	4b31      	ldr	r3, [pc, #196]	; (800a608 <sbus_callback+0xd8>)
 800a544:	5c9a      	ldrb	r2, [r3, r2]
 800a546:	4b31      	ldr	r3, [pc, #196]	; (800a60c <sbus_callback+0xdc>)
 800a548:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 800a54a:	4b31      	ldr	r3, [pc, #196]	; (800a610 <sbus_callback+0xe0>)
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d11f      	bne.n	800a592 <sbus_callback+0x62>
				if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 800a552:	4b2e      	ldr	r3, [pc, #184]	; (800a60c <sbus_callback+0xdc>)
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	2b0f      	cmp	r3, #15
 800a558:	d117      	bne.n	800a58a <sbus_callback+0x5a>
 800a55a:	4b2e      	ldr	r3, [pc, #184]	; (800a614 <sbus_callback+0xe4>)
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d005      	beq.n	800a56e <sbus_callback+0x3e>
 800a562:	4b2c      	ldr	r3, [pc, #176]	; (800a614 <sbus_callback+0xe4>)
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	f003 030f 	and.w	r3, r3, #15
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10d      	bne.n	800a58a <sbus_callback+0x5a>
					sbus_rxBuf[_parserState] = _curByte;
 800a56e:	4b28      	ldr	r3, [pc, #160]	; (800a610 <sbus_callback+0xe0>)
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	4b25      	ldr	r3, [pc, #148]	; (800a60c <sbus_callback+0xdc>)
 800a576:	7819      	ldrb	r1, [r3, #0]
 800a578:	4b27      	ldr	r3, [pc, #156]	; (800a618 <sbus_callback+0xe8>)
 800a57a:	5499      	strb	r1, [r3, r2]
					_parserState++;
 800a57c:	4b24      	ldr	r3, [pc, #144]	; (800a610 <sbus_callback+0xe0>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	3301      	adds	r3, #1
 800a582:	b2da      	uxtb	r2, r3
 800a584:	4b22      	ldr	r3, [pc, #136]	; (800a610 <sbus_callback+0xe0>)
 800a586:	701a      	strb	r2, [r3, #0]
 800a588:	e02b      	b.n	800a5e2 <sbus_callback+0xb2>
				} else {
					_parserState = 0;
 800a58a:	4b21      	ldr	r3, [pc, #132]	; (800a610 <sbus_callback+0xe0>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	701a      	strb	r2, [r3, #0]
 800a590:	e027      	b.n	800a5e2 <sbus_callback+0xb2>
				}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 800a592:	4b1f      	ldr	r3, [pc, #124]	; (800a610 <sbus_callback+0xe0>)
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	2b18      	cmp	r3, #24
 800a598:	d80c      	bhi.n	800a5b4 <sbus_callback+0x84>
				sbus_rxBuf[_parserState] = _curByte;
 800a59a:	4b1d      	ldr	r3, [pc, #116]	; (800a610 <sbus_callback+0xe0>)
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	4b1a      	ldr	r3, [pc, #104]	; (800a60c <sbus_callback+0xdc>)
 800a5a2:	7819      	ldrb	r1, [r3, #0]
 800a5a4:	4b1c      	ldr	r3, [pc, #112]	; (800a618 <sbus_callback+0xe8>)
 800a5a6:	5499      	strb	r1, [r3, r2]
				_parserState++;
 800a5a8:	4b19      	ldr	r3, [pc, #100]	; (800a610 <sbus_callback+0xe0>)
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	4b17      	ldr	r3, [pc, #92]	; (800a610 <sbus_callback+0xe0>)
 800a5b2:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 800a5b4:	4b16      	ldr	r3, [pc, #88]	; (800a610 <sbus_callback+0xe0>)
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b19      	cmp	r3, #25
 800a5ba:	d112      	bne.n	800a5e2 <sbus_callback+0xb2>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 800a5bc:	4b13      	ldr	r3, [pc, #76]	; (800a60c <sbus_callback+0xdc>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d005      	beq.n	800a5d0 <sbus_callback+0xa0>
 800a5c4:	4b11      	ldr	r3, [pc, #68]	; (800a60c <sbus_callback+0xdc>)
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	f003 030f 	and.w	r3, r3, #15
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d105      	bne.n	800a5dc <sbus_callback+0xac>
					_parserState = 0;
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <sbus_callback+0xe0>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	701a      	strb	r2, [r3, #0]
//					return true;
					sbus_decoding();
 800a5d6:	f7ff fe17 	bl	800a208 <sbus_decoding>
 800a5da:	e002      	b.n	800a5e2 <sbus_callback+0xb2>
				}
				else {
					_parserState = 0;
 800a5dc:	4b0c      	ldr	r3, [pc, #48]	; (800a610 <sbus_callback+0xe0>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	701a      	strb	r2, [r3, #0]
//					return false;
				}
			}
		}
		_prevByte = _curByte;
 800a5e2:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <sbus_callback+0xdc>)
 800a5e4:	781a      	ldrb	r2, [r3, #0]
 800a5e6:	4b0b      	ldr	r3, [pc, #44]	; (800a614 <sbus_callback+0xe4>)
 800a5e8:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 800a5ea:	4b06      	ldr	r3, [pc, #24]	; (800a604 <sbus_callback+0xd4>)
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	4b04      	ldr	r3, [pc, #16]	; (800a604 <sbus_callback+0xd4>)
 800a5f4:	701a      	strb	r2, [r3, #0]
 800a5f6:	4b03      	ldr	r3, [pc, #12]	; (800a604 <sbus_callback+0xd4>)
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	2b18      	cmp	r3, #24
 800a5fc:	d99e      	bls.n	800a53c <sbus_callback+0xc>
	}
}
 800a5fe:	bf00      	nop
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	20000399 	.word	0x20000399
 800a608:	20000324 	.word	0x20000324
 800a60c:	20000391 	.word	0x20000391
 800a610:	20000390 	.word	0x20000390
 800a614:	20000392 	.word	0x20000392
 800a618:	20000308 	.word	0x20000308

0800a61c <sbus_getHz>:
uint16_t sbus_getHz(){ // call this func 1hz
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
	uint16_t temp = sbus_hzcnt;
 800a622:	4b06      	ldr	r3, [pc, #24]	; (800a63c <sbus_getHz+0x20>)
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	80fb      	strh	r3, [r7, #6]
	sbus_hzcnt = 0;
 800a628:	4b04      	ldr	r3, [pc, #16]	; (800a63c <sbus_getHz+0x20>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	801a      	strh	r2, [r3, #0]
	return temp;
 800a62e:	88fb      	ldrh	r3, [r7, #6]
}
 800a630:	4618      	mov	r0, r3
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr
 800a63c:	2000038c 	.word	0x2000038c

0800a640 <sbus_getChannel>:
		printf("%d \t", sbus_comp_rcValue[i]);
	}
	printf("\r\n");
}

uint16_t sbus_getChannel(uint8_t chan) { // start from 1
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	71fb      	strb	r3, [r7, #7]
	return sbus_comp_rcValue[chan - 1];
 800a64a:	79fb      	ldrb	r3, [r7, #7]
 800a64c:	3b01      	subs	r3, #1
 800a64e:	4a04      	ldr	r2, [pc, #16]	; (800a660 <sbus_getChannel+0x20>)
 800a650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 800a654:	4618      	mov	r0, r3
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	20000364 	.word	0x20000364

0800a664 <motor_init>:
	TIM_HandleTypeDef* pTim;
	uint32_t Channel;
};


void motor_init(struct motor *m, TIM_HandleTypeDef *htim, uint32_t Channel){
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
	m->pTim = htim;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	601a      	str	r2, [r3, #0]
	m->Channel = Channel;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	605a      	str	r2, [r3, #4]
}
 800a67c:	bf00      	nop
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <motor_start>:

void motor_start(struct motor *m){
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(m->pTim, m->Channel);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	4619      	mov	r1, r3
 800a69a:	4610      	mov	r0, r2
 800a69c:	f7fc fcd8 	bl	8007050 <HAL_TIM_PWM_Start>
}
 800a6a0:	bf00      	nop
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <motor_write>:

void motor_write(struct motor *m, uint16_t pwm){
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	807b      	strh	r3, [r7, #2]
	if(pwm < MOTOR_PWM_MIN) pwm = MOTOR_PWM_MIN;
 800a6b4:	887b      	ldrh	r3, [r7, #2]
 800a6b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6ba:	d203      	bcs.n	800a6c4 <motor_write+0x1c>
 800a6bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a6c0:	807b      	strh	r3, [r7, #2]
 800a6c2:	e006      	b.n	800a6d2 <motor_write+0x2a>
	else if(pwm > MOTOR_PWM_MAX) pwm = MOTOR_PWM_MAX;
 800a6c4:	887b      	ldrh	r3, [r7, #2]
 800a6c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a6ca:	d902      	bls.n	800a6d2 <motor_write+0x2a>
 800a6cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a6d0:	807b      	strh	r3, [r7, #2]

	pwm *= 2; // scale the signal for time
 800a6d2:	887b      	ldrh	r3, [r7, #2]
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(m->pTim, m->Channel, pwm);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d105      	bne.n	800a6ec <motor_write+0x44>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	887a      	ldrh	r2, [r7, #2]
 800a6e8:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a6ea:	e018      	b.n	800a71e <motor_write+0x76>
	__HAL_TIM_SET_COMPARE(m->pTim, m->Channel, pwm);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	d105      	bne.n	800a700 <motor_write+0x58>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	887a      	ldrh	r2, [r7, #2]
 800a6fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a6fe:	e00e      	b.n	800a71e <motor_write+0x76>
	__HAL_TIM_SET_COMPARE(m->pTim, m->Channel, pwm);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	2b08      	cmp	r3, #8
 800a706:	d105      	bne.n	800a714 <motor_write+0x6c>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	887a      	ldrh	r2, [r7, #2]
 800a710:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a712:	e004      	b.n	800a71e <motor_write+0x76>
	__HAL_TIM_SET_COMPARE(m->pTim, m->Channel, pwm);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	887a      	ldrh	r2, [r7, #2]
 800a71c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800a71e:	bf00      	nop
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
	...

0800a72c <_write>:
//__IO ITStatus flagMpu = RESET;
//__IO ITStatus flagControl = RESET;

//we can use printf
int _write(int file, unsigned char* p, int len) // for debug through uart3
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	230a      	movs	r3, #10
 800a73e:	68b9      	ldr	r1, [r7, #8]
 800a740:	4803      	ldr	r0, [pc, #12]	; (800a750 <_write+0x24>)
 800a742:	f7fd fb5e 	bl	8007e02 <HAL_UART_Transmit>
	return len;
 800a746:	687b      	ldr	r3, [r7, #4]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	20000594 	.word	0x20000594

0800a754 <rt_OneStep>:


volatile int IsrOverrun = 0;
static boolean_T OverrunFlag = 0;
void rt_OneStep(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
  /* Check for overrun. Protect OverrunFlag against preemption */
  if (OverrunFlag++) {
 800a758:	4b0d      	ldr	r3, [pc, #52]	; (800a790 <rt_OneStep+0x3c>)
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	1c5a      	adds	r2, r3, #1
 800a75e:	b2d1      	uxtb	r1, r2
 800a760:	4a0b      	ldr	r2, [pc, #44]	; (800a790 <rt_OneStep+0x3c>)
 800a762:	7011      	strb	r1, [r2, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d009      	beq.n	800a77c <rt_OneStep+0x28>
    IsrOverrun = 1;
 800a768:	4b0a      	ldr	r3, [pc, #40]	; (800a794 <rt_OneStep+0x40>)
 800a76a:	2201      	movs	r2, #1
 800a76c:	601a      	str	r2, [r3, #0]
    OverrunFlag--;
 800a76e:	4b08      	ldr	r3, [pc, #32]	; (800a790 <rt_OneStep+0x3c>)
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	3b01      	subs	r3, #1
 800a774:	b2da      	uxtb	r2, r3
 800a776:	4b06      	ldr	r3, [pc, #24]	; (800a790 <rt_OneStep+0x3c>)
 800a778:	701a      	strb	r2, [r3, #0]
    return;
 800a77a:	e007      	b.n	800a78c <rt_OneStep+0x38>
  }

//  __enable_irq();
  Second_att_control_codeblock_step();
 800a77c:	f000 fa14 	bl	800aba8 <Second_att_control_codeblock_step>

  /* Get model outputs here */
//  __disable_irq();
  OverrunFlag--;
 800a780:	4b03      	ldr	r3, [pc, #12]	; (800a790 <rt_OneStep+0x3c>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	3b01      	subs	r3, #1
 800a786:	b2da      	uxtb	r2, r3
 800a788:	4b01      	ldr	r3, [pc, #4]	; (800a790 <rt_OneStep+0x3c>)
 800a78a:	701a      	strb	r2, [r3, #0]
}
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	20000398 	.word	0x20000398
 800a794:	20000394 	.word	0x20000394

0800a798 <userMain>:
}


//struct junTimer debugTimer = {0,};

void userMain(){
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
    setvbuf(stdout, NULL, _IONBF, 0);
 800a79c:	4b84      	ldr	r3, [pc, #528]	; (800a9b0 <userMain+0x218>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6898      	ldr	r0, [r3, #8]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	2202      	movs	r2, #2
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	f002 fc1a 	bl	800cfe0 <setvbuf>

    printf("boot complete\r\n");
 800a7ac:	4881      	ldr	r0, [pc, #516]	; (800a9b4 <userMain+0x21c>)
 800a7ae:	f002 fbff 	bl	800cfb0 <puts>
    MPU9250_init(&iMPU9250, &hi2c1);
 800a7b2:	4981      	ldr	r1, [pc, #516]	; (800a9b8 <userMain+0x220>)
 800a7b4:	4881      	ldr	r0, [pc, #516]	; (800a9bc <userMain+0x224>)
 800a7b6:	f7fe fda5 	bl	8009304 <MPU9250_init>


    sbus_start(&huart7);
 800a7ba:	4881      	ldr	r0, [pc, #516]	; (800a9c0 <userMain+0x228>)
 800a7bc:	f7ff fd10 	bl	800a1e0 <sbus_start>
    HAL_TIM_Base_Start_IT(&htim11); // start mpu9250 it
 800a7c0:	4880      	ldr	r0, [pc, #512]	; (800a9c4 <userMain+0x22c>)
 800a7c2:	f7fc fbec 	bl	8006f9e <HAL_TIM_Base_Start_IT>

    motor_init(&iMotor1, &htim4, TIM_CHANNEL_1);
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	497f      	ldr	r1, [pc, #508]	; (800a9c8 <userMain+0x230>)
 800a7ca:	4880      	ldr	r0, [pc, #512]	; (800a9cc <userMain+0x234>)
 800a7cc:	f7ff ff4a 	bl	800a664 <motor_init>
    motor_init(&iMotor2, &htim4, TIM_CHANNEL_2);
 800a7d0:	2204      	movs	r2, #4
 800a7d2:	497d      	ldr	r1, [pc, #500]	; (800a9c8 <userMain+0x230>)
 800a7d4:	487e      	ldr	r0, [pc, #504]	; (800a9d0 <userMain+0x238>)
 800a7d6:	f7ff ff45 	bl	800a664 <motor_init>
    motor_init(&iMotor3, &htim4, TIM_CHANNEL_3);
 800a7da:	2208      	movs	r2, #8
 800a7dc:	497a      	ldr	r1, [pc, #488]	; (800a9c8 <userMain+0x230>)
 800a7de:	487d      	ldr	r0, [pc, #500]	; (800a9d4 <userMain+0x23c>)
 800a7e0:	f7ff ff40 	bl	800a664 <motor_init>
    motor_init(&iMotor4, &htim4, TIM_CHANNEL_4);
 800a7e4:	220c      	movs	r2, #12
 800a7e6:	4978      	ldr	r1, [pc, #480]	; (800a9c8 <userMain+0x230>)
 800a7e8:	487b      	ldr	r0, [pc, #492]	; (800a9d8 <userMain+0x240>)
 800a7ea:	f7ff ff3b 	bl	800a664 <motor_init>
    motor_init(&iMotor5, &htim3, TIM_CHANNEL_1);
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	497a      	ldr	r1, [pc, #488]	; (800a9dc <userMain+0x244>)
 800a7f2:	487b      	ldr	r0, [pc, #492]	; (800a9e0 <userMain+0x248>)
 800a7f4:	f7ff ff36 	bl	800a664 <motor_init>
    motor_init(&iMotor6, &htim3, TIM_CHANNEL_2);
 800a7f8:	2204      	movs	r2, #4
 800a7fa:	4978      	ldr	r1, [pc, #480]	; (800a9dc <userMain+0x244>)
 800a7fc:	4879      	ldr	r0, [pc, #484]	; (800a9e4 <userMain+0x24c>)
 800a7fe:	f7ff ff31 	bl	800a664 <motor_init>

    motor_start(&iMotor1);
 800a802:	4872      	ldr	r0, [pc, #456]	; (800a9cc <userMain+0x234>)
 800a804:	f7ff ff40 	bl	800a688 <motor_start>
    motor_start(&iMotor2);
 800a808:	4871      	ldr	r0, [pc, #452]	; (800a9d0 <userMain+0x238>)
 800a80a:	f7ff ff3d 	bl	800a688 <motor_start>
    motor_start(&iMotor3);
 800a80e:	4871      	ldr	r0, [pc, #452]	; (800a9d4 <userMain+0x23c>)
 800a810:	f7ff ff3a 	bl	800a688 <motor_start>
    motor_start(&iMotor4);
 800a814:	4870      	ldr	r0, [pc, #448]	; (800a9d8 <userMain+0x240>)
 800a816:	f7ff ff37 	bl	800a688 <motor_start>
    motor_start(&iMotor5);
 800a81a:	4871      	ldr	r0, [pc, #452]	; (800a9e0 <userMain+0x248>)
 800a81c:	f7ff ff34 	bl	800a688 <motor_start>
    motor_start(&iMotor6);
 800a820:	4870      	ldr	r0, [pc, #448]	; (800a9e4 <userMain+0x24c>)
 800a822:	f7ff ff31 	bl	800a688 <motor_start>
//		sensorHz_print();
//		MPU9250_print(&iMPU9250,1);

	    static uint8_t cnt = 0;

	    if(SAFTY_SWITCH()){
 800a826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a82a:	486f      	ldr	r0, [pc, #444]	; (800a9e8 <userMain+0x250>)
 800a82c:	f7f9 f914 	bl	8003a58 <HAL_GPIO_ReadPin>
 800a830:	4603      	mov	r3, r0
 800a832:	2b01      	cmp	r3, #1
 800a834:	d102      	bne.n	800a83c <userMain+0xa4>
	    	printf("switch set\r\n");
 800a836:	486d      	ldr	r0, [pc, #436]	; (800a9ec <userMain+0x254>)
 800a838:	f002 fbba 	bl	800cfb0 <puts>
	    }
//		sbus_print();
		HAL_Delay(300);
 800a83c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a840:	f7f7 fe20 	bl	8002484 <HAL_Delay>
		//boot essential part
		if(iMPU9250.itSet == SET){
 800a844:	4b5d      	ldr	r3, [pc, #372]	; (800a9bc <userMain+0x224>)
 800a846:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d16b      	bne.n	800a928 <userMain+0x190>
			estimate_update(&iEstimate, &iMPU9250);
 800a850:	495a      	ldr	r1, [pc, #360]	; (800a9bc <userMain+0x224>)
 800a852:	4867      	ldr	r0, [pc, #412]	; (800a9f0 <userMain+0x258>)
 800a854:	f7ff f93a 	bl	8009acc <estimate_update>
//			estimate_print(&iEstimate);
			iMPU9250.itSet = RESET;
 800a858:	4b58      	ldr	r3, [pc, #352]	; (800a9bc <userMain+0x224>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			if(runModel){
 800a860:	4b64      	ldr	r3, [pc, #400]	; (800a9f4 <userMain+0x25c>)
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d05e      	beq.n	800a928 <userMain+0x190>
//				junTimer_tic(&debugTimer);
				Second_att_control_codeblock_U.Roll = iEstimate.roll;
 800a86a:	4b61      	ldr	r3, [pc, #388]	; (800a9f0 <userMain+0x258>)
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	4a62      	ldr	r2, [pc, #392]	; (800a9f8 <userMain+0x260>)
 800a870:	6013      	str	r3, [r2, #0]
				Second_att_control_codeblock_U.Pitch = iEstimate.pitch;
 800a872:	4b5f      	ldr	r3, [pc, #380]	; (800a9f0 <userMain+0x258>)
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	4a60      	ldr	r2, [pc, #384]	; (800a9f8 <userMain+0x260>)
 800a878:	6053      	str	r3, [r2, #4]
				Second_att_control_codeblock_U.p = iEstimate.p;
 800a87a:	4b5d      	ldr	r3, [pc, #372]	; (800a9f0 <userMain+0x258>)
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	4a5e      	ldr	r2, [pc, #376]	; (800a9f8 <userMain+0x260>)
 800a880:	6093      	str	r3, [r2, #8]
				Second_att_control_codeblock_U.q = iEstimate.q;
 800a882:	4b5b      	ldr	r3, [pc, #364]	; (800a9f0 <userMain+0x258>)
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	4a5c      	ldr	r2, [pc, #368]	; (800a9f8 <userMain+0x260>)
 800a888:	60d3      	str	r3, [r2, #12]
				Second_att_control_codeblock_U.r = iEstimate.r;
 800a88a:	4b59      	ldr	r3, [pc, #356]	; (800a9f0 <userMain+0x258>)
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88e:	4a5a      	ldr	r2, [pc, #360]	; (800a9f8 <userMain+0x260>)
 800a890:	6113      	str	r3, [r2, #16]
				Second_att_control_codeblock_U.set_thrust = sbus_getChannel(1);
 800a892:	2001      	movs	r0, #1
 800a894:	f7ff fed4 	bl	800a640 <sbus_getChannel>
 800a898:	4603      	mov	r3, r0
 800a89a:	461a      	mov	r2, r3
 800a89c:	4b56      	ldr	r3, [pc, #344]	; (800a9f8 <userMain+0x260>)
 800a89e:	829a      	strh	r2, [r3, #20]
				Second_att_control_codeblock_U.set_roll = sbus_getChannel(2);
 800a8a0:	2002      	movs	r0, #2
 800a8a2:	f7ff fecd 	bl	800a640 <sbus_getChannel>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	4b53      	ldr	r3, [pc, #332]	; (800a9f8 <userMain+0x260>)
 800a8ac:	82da      	strh	r2, [r3, #22]
				Second_att_control_codeblock_U.set_pitch = sbus_getChannel(3);
 800a8ae:	2003      	movs	r0, #3
 800a8b0:	f7ff fec6 	bl	800a640 <sbus_getChannel>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	4b4f      	ldr	r3, [pc, #316]	; (800a9f8 <userMain+0x260>)
 800a8ba:	831a      	strh	r2, [r3, #24]
				Second_att_control_codeblock_U.set_yaw = sbus_getChannel(4);
 800a8bc:	2004      	movs	r0, #4
 800a8be:	f7ff febf 	bl	800a640 <sbus_getChannel>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4b4c      	ldr	r3, [pc, #304]	; (800a9f8 <userMain+0x260>)
 800a8c8:	835a      	strh	r2, [r3, #26]
				Second_att_control_codeblock_U.Arm_cmd = sbus_getChannel(11);
 800a8ca:	200b      	movs	r0, #11
 800a8cc:	f7ff feb8 	bl	800a640 <sbus_getChannel>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	4b48      	ldr	r3, [pc, #288]	; (800a9f8 <userMain+0x260>)
 800a8d6:	839a      	strh	r2, [r3, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a8d8:	b672      	cpsid	i

				__disable_irq();
				rt_OneStep();
 800a8da:	f7ff ff3b 	bl	800a754 <rt_OneStep>
  __ASM volatile ("cpsie i" : : : "memory");
 800a8de:	b662      	cpsie	i
				__enable_irq();

				motor_write(&iMotor1, Second_att_control_codeblock_Y.PWM_OUT[0]);
 800a8e0:	4b46      	ldr	r3, [pc, #280]	; (800a9fc <userMain+0x264>)
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4839      	ldr	r0, [pc, #228]	; (800a9cc <userMain+0x234>)
 800a8e8:	f7ff fede 	bl	800a6a8 <motor_write>
				motor_write(&iMotor2, Second_att_control_codeblock_Y.PWM_OUT[1]);
 800a8ec:	4b43      	ldr	r3, [pc, #268]	; (800a9fc <userMain+0x264>)
 800a8ee:	885b      	ldrh	r3, [r3, #2]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	4837      	ldr	r0, [pc, #220]	; (800a9d0 <userMain+0x238>)
 800a8f4:	f7ff fed8 	bl	800a6a8 <motor_write>
				motor_write(&iMotor3, Second_att_control_codeblock_Y.PWM_OUT[2]);
 800a8f8:	4b40      	ldr	r3, [pc, #256]	; (800a9fc <userMain+0x264>)
 800a8fa:	889b      	ldrh	r3, [r3, #4]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	4835      	ldr	r0, [pc, #212]	; (800a9d4 <userMain+0x23c>)
 800a900:	f7ff fed2 	bl	800a6a8 <motor_write>
				motor_write(&iMotor4, Second_att_control_codeblock_Y.PWM_OUT[3]);
 800a904:	4b3d      	ldr	r3, [pc, #244]	; (800a9fc <userMain+0x264>)
 800a906:	88db      	ldrh	r3, [r3, #6]
 800a908:	4619      	mov	r1, r3
 800a90a:	4833      	ldr	r0, [pc, #204]	; (800a9d8 <userMain+0x240>)
 800a90c:	f7ff fecc 	bl	800a6a8 <motor_write>
				motor_write(&iMotor5, Second_att_control_codeblock_Y.PWM_OUT[4]);
 800a910:	4b3a      	ldr	r3, [pc, #232]	; (800a9fc <userMain+0x264>)
 800a912:	891b      	ldrh	r3, [r3, #8]
 800a914:	4619      	mov	r1, r3
 800a916:	4832      	ldr	r0, [pc, #200]	; (800a9e0 <userMain+0x248>)
 800a918:	f7ff fec6 	bl	800a6a8 <motor_write>
				motor_write(&iMotor6, Second_att_control_codeblock_Y.PWM_OUT[5]);
 800a91c:	4b37      	ldr	r3, [pc, #220]	; (800a9fc <userMain+0x264>)
 800a91e:	895b      	ldrh	r3, [r3, #10]
 800a920:	4619      	mov	r1, r3
 800a922:	4830      	ldr	r0, [pc, #192]	; (800a9e4 <userMain+0x24c>)
 800a924:	f7ff fec0 	bl	800a6a8 <motor_write>
			}
//			printIn(&Second_att_control_codeblock_U);
//			printOut(&Second_att_control_codeblock_Y);
		}

		if(vehicleState == VEHICLE_INIT){
 800a928:	4b35      	ldr	r3, [pc, #212]	; (800aa00 <userMain+0x268>)
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d126      	bne.n	800a97e <userMain+0x1e6>
			static struct junTimer init_timer = {0,};
			if(junTimer_toc(&init_timer)>3000 || !init_timer.start){
 800a930:	4834      	ldr	r0, [pc, #208]	; (800aa04 <userMain+0x26c>)
 800a932:	f7f6 fc08 	bl	8001146 <junTimer_toc>
 800a936:	4602      	mov	r2, r0
 800a938:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d803      	bhi.n	800a948 <userMain+0x1b0>
 800a940:	4b30      	ldr	r3, [pc, #192]	; (800aa04 <userMain+0x26c>)
 800a942:	791b      	ldrb	r3, [r3, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d107      	bne.n	800a958 <userMain+0x1c0>
				if(!imu_state){ // imu problem
 800a948:	4b2f      	ldr	r3, [pc, #188]	; (800aa08 <userMain+0x270>)
 800a94a:	881b      	ldrh	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d103      	bne.n	800a958 <userMain+0x1c0>
					MPU9250_init(&iMPU9250, &hi2c1);
 800a950:	4919      	ldr	r1, [pc, #100]	; (800a9b8 <userMain+0x220>)
 800a952:	481a      	ldr	r0, [pc, #104]	; (800a9bc <userMain+0x224>)
 800a954:	f7fe fcd6 	bl	8009304 <MPU9250_init>
				}
				if(!sbus_state){
					// must turn on RC
				}
			}
			if(imu_state && estimator_state && sbus_state){
 800a958:	4b2b      	ldr	r3, [pc, #172]	; (800aa08 <userMain+0x270>)
 800a95a:	881b      	ldrh	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f43f af62 	beq.w	800a826 <userMain+0x8e>
 800a962:	4b2a      	ldr	r3, [pc, #168]	; (800aa0c <userMain+0x274>)
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	f43f af5d 	beq.w	800a826 <userMain+0x8e>
 800a96c:	4b28      	ldr	r3, [pc, #160]	; (800aa10 <userMain+0x278>)
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	f43f af58 	beq.w	800a826 <userMain+0x8e>
				vehicleState = VEHICLE_PREARM;
 800a976:	4b22      	ldr	r3, [pc, #136]	; (800aa00 <userMain+0x268>)
 800a978:	2201      	movs	r2, #1
 800a97a:	701a      	strb	r2, [r3, #0]
 800a97c:	e753      	b.n	800a826 <userMain+0x8e>
			}
		}
		else if(vehicleState == VEHICLE_PREARM){
 800a97e:	4b20      	ldr	r3, [pc, #128]	; (800aa00 <userMain+0x268>)
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d110      	bne.n	800a9a8 <userMain+0x210>
			if(!(imu_state && estimator_state && sbus_state)){
 800a986:	4b20      	ldr	r3, [pc, #128]	; (800aa08 <userMain+0x270>)
 800a988:	881b      	ldrh	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d008      	beq.n	800a9a0 <userMain+0x208>
 800a98e:	4b1f      	ldr	r3, [pc, #124]	; (800aa0c <userMain+0x274>)
 800a990:	881b      	ldrh	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d004      	beq.n	800a9a0 <userMain+0x208>
 800a996:	4b1e      	ldr	r3, [pc, #120]	; (800aa10 <userMain+0x278>)
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f47f af43 	bne.w	800a826 <userMain+0x8e>
				vehicleState = VEHICLE_INIT;
 800a9a0:	4b17      	ldr	r3, [pc, #92]	; (800aa00 <userMain+0x268>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	701a      	strb	r2, [r3, #0]
 800a9a6:	e73e      	b.n	800a826 <userMain+0x8e>
			}
//			if();
		}
		else if(vehicleState == VEHICLE_DISARM){
 800a9a8:	4b15      	ldr	r3, [pc, #84]	; (800aa00 <userMain+0x268>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	2b02      	cmp	r3, #2
	while(1){
 800a9ae:	e73a      	b.n	800a826 <userMain+0x8e>
 800a9b0:	2000006c 	.word	0x2000006c
 800a9b4:	0800eaf8 	.word	0x0800eaf8
 800a9b8:	20000400 	.word	0x20000400
 800a9bc:	20000264 	.word	0x20000264
 800a9c0:	20000554 	.word	0x20000554
 800a9c4:	20000514 	.word	0x20000514
 800a9c8:	20000454 	.word	0x20000454
 800a9cc:	20000a98 	.word	0x20000a98
 800a9d0:	20000aa0 	.word	0x20000aa0
 800a9d4:	20000aa8 	.word	0x20000aa8
 800a9d8:	20000ab8 	.word	0x20000ab8
 800a9dc:	200004d4 	.word	0x200004d4
 800a9e0:	20000ac0 	.word	0x20000ac0
 800a9e4:	20000ab0 	.word	0x20000ab0
 800a9e8:	40020800 	.word	0x40020800
 800a9ec:	0800eb08 	.word	0x0800eb08
 800a9f0:	2000000c 	.word	0x2000000c
 800a9f4:	2000003c 	.word	0x2000003c
 800a9f8:	20000c08 	.word	0x20000c08
 800a9fc:	20000bf8 	.word	0x20000bf8
 800aa00:	200002fc 	.word	0x200002fc
 800aa04:	2000039c 	.word	0x2000039c
 800aa08:	20000a86 	.word	0x20000a86
 800aa0c:	20000a8c 	.word	0x20000a8c
 800aa10:	20000a92 	.word	0x20000a92

0800aa14 <HAL_I2C_MemRxCpltCallback>:
}



//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
	//mpu9250
	if(hi2c->Instance == I2C1){
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a0d      	ldr	r2, [pc, #52]	; (800aa58 <HAL_I2C_MemRxCpltCallback+0x44>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d113      	bne.n	800aa4e <HAL_I2C_MemRxCpltCallback+0x3a>
		uint8_t result = MPU9250_callbackMPU9250IT(&iMPU9250);
 800aa26:	480d      	ldr	r0, [pc, #52]	; (800aa5c <HAL_I2C_MemRxCpltCallback+0x48>)
 800aa28:	f7fe fd4a 	bl	80094c0 <MPU9250_callbackMPU9250IT>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]
		if(result){
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00b      	beq.n	800aa4e <HAL_I2C_MemRxCpltCallback+0x3a>
			iMPU9250.hzCnt++;
 800aa36:	4b09      	ldr	r3, [pc, #36]	; (800aa5c <HAL_I2C_MemRxCpltCallback+0x48>)
 800aa38:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	4b06      	ldr	r3, [pc, #24]	; (800aa5c <HAL_I2C_MemRxCpltCallback+0x48>)
 800aa42:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			iMPU9250.itSet = SET;
 800aa46:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <HAL_I2C_MemRxCpltCallback+0x48>)
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		}
	}
}
 800aa4e:	bf00      	nop
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	40005400 	.word	0x40005400
 800aa5c:	20000264 	.word	0x20000264

0800aa60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
	static uint8_t hz_update = 0;
	if(iMPU9250.itSet == RESET){// imu hz timer 100hz
 800aa68:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800aa6a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d102      	bne.n	800aa7a <HAL_TIM_PeriodElapsedCallback+0x1a>
		MPU9250_readMPU9250IT(&iMPU9250);
 800aa74:	480a      	ldr	r0, [pc, #40]	; (800aaa0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800aa76:	f7fe fd0e 	bl	8009496 <MPU9250_readMPU9250IT>
	}
	if(++hz_update > 99){
 800aa7a:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	4b08      	ldr	r3, [pc, #32]	; (800aaa4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800aa84:	701a      	strb	r2, [r3, #0]
 800aa86:	4b07      	ldr	r3, [pc, #28]	; (800aaa4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	2b63      	cmp	r3, #99	; 0x63
 800aa8c:	d904      	bls.n	800aa98 <HAL_TIM_PeriodElapsedCallback+0x38>
		sensorHz_update();
 800aa8e:	f7fe ffcb 	bl	8009a28 <sensorHz_update>
		hz_update = 0;
 800aa92:	4b04      	ldr	r3, [pc, #16]	; (800aaa4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	701a      	strb	r2, [r3, #0]
	}
}
 800aa98:	bf00      	nop
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	20000264 	.word	0x20000264
 800aaa4:	200003a4 	.word	0x200003a4

0800aaa8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART7){
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a04      	ldr	r2, [pc, #16]	; (800aac8 <HAL_UART_RxCpltCallback+0x20>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d101      	bne.n	800aabe <HAL_UART_RxCpltCallback+0x16>
//		sbus_parse();
		sbus_callback();
 800aaba:	f7ff fd39 	bl	800a530 <sbus_callback>
	}
	if(huart->Instance == USART2){
		// telemetry
	}
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	40007800 	.word	0x40007800

0800aacc <rt_roundf_snf>:
ExtU_Second_att_control_codeb_T Second_att_control_codeblock_U;

/* External outputs (root outports fed by signals with default storage) */
ExtY_Second_att_control_codeb_T Second_att_control_codeblock_Y;
real32_T rt_roundf_snf(real32_T u)
{
 800aacc:	b590      	push	{r4, r7, lr}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T y;
  if ((real32_T)fabs(u) < 8.388608E+6F) {
 800aad6:	edd7 7a01 	vldr	s15, [r7, #4]
 800aada:	eef0 7ae7 	vabs.f32	s15, s15
 800aade:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ab9c <rt_roundf_snf+0xd0>
 800aae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaea:	d54c      	bpl.n	800ab86 <rt_roundf_snf+0xba>
    if (u >= 0.5F) {
 800aaec:	edd7 7a01 	vldr	s15, [r7, #4]
 800aaf0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aaf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aafc:	db18      	blt.n	800ab30 <rt_roundf_snf+0x64>
      y = (real32_T)floor(u + 0.5F);
 800aafe:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ab06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab0a:	ee17 0a90 	vmov	r0, s15
 800ab0e:	f7f5 fcdb 	bl	80004c8 <__aeabi_f2d>
 800ab12:	4603      	mov	r3, r0
 800ab14:	460c      	mov	r4, r1
 800ab16:	ec44 3b10 	vmov	d0, r3, r4
 800ab1a:	f000 ff79 	bl	800ba10 <floor>
 800ab1e:	ec54 3b10 	vmov	r3, r4, d0
 800ab22:	4618      	mov	r0, r3
 800ab24:	4621      	mov	r1, r4
 800ab26:	f7f5 ffff 	bl	8000b28 <__aeabi_d2f>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	60fb      	str	r3, [r7, #12]
 800ab2e:	e02c      	b.n	800ab8a <rt_roundf_snf+0xbe>
    } else if (u > -0.5F) {
 800ab30:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab34:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800ab38:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab40:	dd08      	ble.n	800ab54 <rt_roundf_snf+0x88>
      y = u * 0.0F;
 800ab42:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab46:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800aba0 <rt_roundf_snf+0xd4>
 800ab4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab4e:	edc7 7a03 	vstr	s15, [r7, #12]
 800ab52:	e01a      	b.n	800ab8a <rt_roundf_snf+0xbe>
    } else {
      y = (real32_T)ceil(u - 0.5F);
 800ab54:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ab5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab60:	ee17 0a90 	vmov	r0, s15
 800ab64:	f7f5 fcb0 	bl	80004c8 <__aeabi_f2d>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	ec44 3b10 	vmov	d0, r3, r4
 800ab70:	f000 fece 	bl	800b910 <ceil>
 800ab74:	ec54 3b10 	vmov	r3, r4, d0
 800ab78:	4618      	mov	r0, r3
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	f7f5 ffd4 	bl	8000b28 <__aeabi_d2f>
 800ab80:	4603      	mov	r3, r0
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	e001      	b.n	800ab8a <rt_roundf_snf+0xbe>
    }
  } else {
    y = u;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	60fb      	str	r3, [r7, #12]
  }

  return y;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	ee07 3a90 	vmov	s15, r3
}
 800ab90:	eeb0 0a67 	vmov.f32	s0, s15
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd90      	pop	{r4, r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	4b000000 	.word	0x4b000000
	...

0800aba8 <Second_att_control_codeblock_step>:

/* Model step function */
void Second_att_control_codeblock_step(void)
{
 800aba8:	b5b0      	push	{r4, r5, r7, lr}
 800abaa:	ed2d 8b02 	vpush	{d8}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0

  /* DataTypeConversion: '<S4>/Data Type Conversion' incorporates:
   *  Inport: '<Root>/set_roll'
   */
  Second_att_control_codeblock_B.DataTypeConversion =
    Second_att_control_codeblock_U.set_roll;
 800abb2:	4b9c      	ldr	r3, [pc, #624]	; (800ae24 <Second_att_control_codeblock_step+0x27c>)
 800abb4:	8adb      	ldrh	r3, [r3, #22]
  Second_att_control_codeblock_B.DataTypeConversion =
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abbe:	4b9a      	ldr	r3, [pc, #616]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800abc0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  /* Fcn: '<S4>/Fcn2' */
  Second_att_control_codeblock_B.Fcn2 =
    (Second_att_control_codeblock_B.DataTypeConversion - 1500.0F) / 500.0F;
 800abc4:	4b98      	ldr	r3, [pc, #608]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800abc6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800abca:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800ae2c <Second_att_control_codeblock_step+0x284>
 800abce:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800abd2:	eddf 6a97 	vldr	s13, [pc, #604]	; 800ae30 <Second_att_control_codeblock_step+0x288>
 800abd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock_B.Fcn2 =
 800abda:	4b93      	ldr	r3, [pc, #588]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800abdc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  /* Saturate: '<S4>/Saturation9' */
  u0 = Second_att_control_codeblock_B.Fcn2;
 800abe0:	4b91      	ldr	r3, [pc, #580]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800abe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe4:	60fb      	str	r3, [r7, #12]
  if (u0 > 1.0F) {
 800abe6:	edd7 7a03 	vldr	s15, [r7, #12]
 800abea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abf6:	dd04      	ble.n	800ac02 <Second_att_control_codeblock_step+0x5a>
    Second_att_control_codeblock_B.Saturation9 = 1.0F;
 800abf8:	4b8b      	ldr	r3, [pc, #556]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800abfa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800abfe:	631a      	str	r2, [r3, #48]	; 0x30
 800ac00:	e00f      	b.n	800ac22 <Second_att_control_codeblock_step+0x7a>
  } else if (u0 < -1.0F) {
 800ac02:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac06:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ac0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac12:	d503      	bpl.n	800ac1c <Second_att_control_codeblock_step+0x74>
    Second_att_control_codeblock_B.Saturation9 = -1.0F;
 800ac14:	4b84      	ldr	r3, [pc, #528]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ac16:	4a87      	ldr	r2, [pc, #540]	; (800ae34 <Second_att_control_codeblock_step+0x28c>)
 800ac18:	631a      	str	r2, [r3, #48]	; 0x30
 800ac1a:	e002      	b.n	800ac22 <Second_att_control_codeblock_step+0x7a>
  } else {
    Second_att_control_codeblock_B.Saturation9 = u0;
 800ac1c:	4a82      	ldr	r2, [pc, #520]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6313      	str	r3, [r2, #48]	; 0x30

  /* DataTypeConversion: '<S4>/Data Type Conversion1' incorporates:
   *  Inport: '<Root>/set_pitch'
   */
  Second_att_control_codeblock_B.DataTypeConversion1 =
    Second_att_control_codeblock_U.set_pitch;
 800ac22:	4b80      	ldr	r3, [pc, #512]	; (800ae24 <Second_att_control_codeblock_step+0x27c>)
 800ac24:	8b1b      	ldrh	r3, [r3, #24]
  Second_att_control_codeblock_B.DataTypeConversion1 =
 800ac26:	ee07 3a90 	vmov	s15, r3
 800ac2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac2e:	4b7e      	ldr	r3, [pc, #504]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ac30:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  /* Fcn: '<S4>/Fcn5' */
  Second_att_control_codeblock_B.Fcn5 =
    (Second_att_control_codeblock_B.DataTypeConversion1 - 1500.0F) / 500.0F;
 800ac34:	4b7c      	ldr	r3, [pc, #496]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ac36:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ac3a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800ae2c <Second_att_control_codeblock_step+0x284>
 800ac3e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ac42:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800ae30 <Second_att_control_codeblock_step+0x288>
 800ac46:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock_B.Fcn5 =
 800ac4a:	4b77      	ldr	r3, [pc, #476]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ac4c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  /* Saturate: '<S4>/Saturation8' */
  u0 = Second_att_control_codeblock_B.Fcn5;
 800ac50:	4b75      	ldr	r3, [pc, #468]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ac52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac54:	60fb      	str	r3, [r7, #12]
  if (u0 > 1.0F) {
 800ac56:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac66:	dd04      	ble.n	800ac72 <Second_att_control_codeblock_step+0xca>
    Second_att_control_codeblock_B.Saturation8 = 1.0F;
 800ac68:	4b6f      	ldr	r3, [pc, #444]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ac6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ac6e:	63da      	str	r2, [r3, #60]	; 0x3c
 800ac70:	e00f      	b.n	800ac92 <Second_att_control_codeblock_step+0xea>
  } else if (u0 < -1.0F) {
 800ac72:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ac7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac82:	d503      	bpl.n	800ac8c <Second_att_control_codeblock_step+0xe4>
    Second_att_control_codeblock_B.Saturation8 = -1.0F;
 800ac84:	4b68      	ldr	r3, [pc, #416]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ac86:	4a6b      	ldr	r2, [pc, #428]	; (800ae34 <Second_att_control_codeblock_step+0x28c>)
 800ac88:	63da      	str	r2, [r3, #60]	; 0x3c
 800ac8a:	e002      	b.n	800ac92 <Second_att_control_codeblock_step+0xea>
  } else {
    Second_att_control_codeblock_B.Saturation8 = u0;
 800ac8c:	4a66      	ldr	r2, [pc, #408]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* End of Saturate: '<S4>/Saturation8' */

  /* Gain: '<S4>/Gain2' */
  Second_att_control_codeblock_B.Gain2[0] =
    Second_att_control_codeblock_B.Saturation9;
 800ac92:	4b65      	ldr	r3, [pc, #404]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ac94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  Second_att_control_codeblock_B.Gain2[0] =
 800ac96:	4a64      	ldr	r2, [pc, #400]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ac98:	6413      	str	r3, [r2, #64]	; 0x40
  Second_att_control_codeblock_B.Gain2[1] =
    -Second_att_control_codeblock_B.Saturation8;
 800ac9a:	4b63      	ldr	r3, [pc, #396]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ac9c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800aca0:	eef1 7a67 	vneg.f32	s15, s15
  Second_att_control_codeblock_B.Gain2[1] =
 800aca4:	4b60      	ldr	r3, [pc, #384]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800aca6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

  /* Gain: '<S4>/1//rad_max' */
  Second_att_control_codeblock_B.urad_max[0] = Max_angle_coef *
    Second_att_control_codeblock_B.Gain2[0];
 800acaa:	4b5f      	ldr	r3, [pc, #380]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800acac:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
  Second_att_control_codeblock_B.urad_max[0] = Max_angle_coef *
 800acb0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800acb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800acb8:	4b5b      	ldr	r3, [pc, #364]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800acba:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  Second_att_control_codeblock_B.urad_max[1] = Max_angle_coef *
    Second_att_control_codeblock_B.Gain2[1];
 800acbe:	4b5a      	ldr	r3, [pc, #360]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800acc0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
  Second_att_control_codeblock_B.urad_max[1] = Max_angle_coef *
 800acc4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800acc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800accc:	4b56      	ldr	r3, [pc, #344]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800acce:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

  /* Gain: '<S7>/FF_roll_gain' */
  Second_att_control_codeblock_B.FF_roll_gain = 0.0F *
    Second_att_control_codeblock_B.urad_max[0];
 800acd2:	4b55      	ldr	r3, [pc, #340]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800acd4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
  Second_att_control_codeblock_B.FF_roll_gain = 0.0F *
 800acd8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800ae38 <Second_att_control_codeblock_step+0x290>
 800acdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ace0:	4b51      	ldr	r3, [pc, #324]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ace2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  /* Sum: '<S7>/Sum' incorporates:
   *  Inport: '<Root>/Roll'
   */
  Second_att_control_codeblock_B.Sum_f =
    Second_att_control_codeblock_B.urad_max[0] -
 800ace6:	4b50      	ldr	r3, [pc, #320]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ace8:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    Second_att_control_codeblock_U.Roll;
 800acec:	4b4d      	ldr	r3, [pc, #308]	; (800ae24 <Second_att_control_codeblock_step+0x27c>)
 800acee:	edd3 7a00 	vldr	s15, [r3]
    Second_att_control_codeblock_B.urad_max[0] -
 800acf2:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_f =
 800acf6:	4b4c      	ldr	r3, [pc, #304]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800acf8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  /* Gain: '<S48>/Proportional Gain' */
  Second_att_control_codeblock_B.ProportionalGain = Angle_rate_roll_PI_kP *
    Second_att_control_codeblock_B.Sum_f;
 800acfc:	4b4a      	ldr	r3, [pc, #296]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800acfe:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
  Second_att_control_codeblock_B.ProportionalGain = Angle_rate_roll_PI_kP *
 800ad02:	4b4e      	ldr	r3, [pc, #312]	; (800ae3c <Second_att_control_codeblock_step+0x294>)
 800ad04:	edd3 7a00 	vldr	s15, [r3]
 800ad08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0c:	4b46      	ldr	r3, [pc, #280]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad0e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  /* DiscreteIntegrator: '<S43>/Integrator' */
  Second_att_control_codeblock_B.Integrator =
    Second_att_control_codeblock_DW.Integrator_DSTATE;
 800ad12:	4b4b      	ldr	r3, [pc, #300]	; (800ae40 <Second_att_control_codeblock_step+0x298>)
 800ad14:	691b      	ldr	r3, [r3, #16]
  Second_att_control_codeblock_B.Integrator =
 800ad16:	4a44      	ldr	r2, [pc, #272]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad18:	65d3      	str	r3, [r2, #92]	; 0x5c

  /* Sum: '<S52>/Sum' */
  Second_att_control_codeblock_B.Sum_j =
    Second_att_control_codeblock_B.ProportionalGain +
 800ad1a:	4b43      	ldr	r3, [pc, #268]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad1c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
    Second_att_control_codeblock_B.Integrator;
 800ad20:	4b41      	ldr	r3, [pc, #260]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad22:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
    Second_att_control_codeblock_B.ProportionalGain +
 800ad26:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_j =
 800ad2a:	4b3f      	ldr	r3, [pc, #252]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad2c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

  /* Sum: '<S7>/Sum1' */
  Second_att_control_codeblock_B.Sum1 =
    Second_att_control_codeblock_B.FF_roll_gain +
 800ad30:	4b3d      	ldr	r3, [pc, #244]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad32:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
    Second_att_control_codeblock_B.Sum_j;
 800ad36:	4b3c      	ldr	r3, [pc, #240]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad38:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
    Second_att_control_codeblock_B.FF_roll_gain +
 800ad3c:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum1 =
 800ad40:	4b39      	ldr	r3, [pc, #228]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad42:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

  /* Sum: '<S8>/Sum' incorporates:
   *  Inport: '<Root>/p'
   */
  Second_att_control_codeblock_B.Sum_c = Second_att_control_codeblock_B.Sum1 -
 800ad46:	4b38      	ldr	r3, [pc, #224]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad48:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
    Second_att_control_codeblock_U.p;
 800ad4c:	4b35      	ldr	r3, [pc, #212]	; (800ae24 <Second_att_control_codeblock_step+0x27c>)
 800ad4e:	edd3 7a02 	vldr	s15, [r3, #8]
  Second_att_control_codeblock_B.Sum_c = Second_att_control_codeblock_B.Sum1 -
 800ad52:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad56:	4b34      	ldr	r3, [pc, #208]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad58:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

  /* Gain: '<S194>/Proportional Gain' */
  Second_att_control_codeblock_B.ProportionalGain_b = kP_Roll_rate_PID *
    Second_att_control_codeblock_B.Sum_c;
 800ad5c:	4b32      	ldr	r3, [pc, #200]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad5e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
  Second_att_control_codeblock_B.ProportionalGain_b = kP_Roll_rate_PID *
 800ad62:	4b38      	ldr	r3, [pc, #224]	; (800ae44 <Second_att_control_codeblock_step+0x29c>)
 800ad64:	edd3 7a00 	vldr	s15, [r3]
 800ad68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6c:	4b2e      	ldr	r3, [pc, #184]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad6e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  /* DiscreteIntegrator: '<S189>/Integrator' */
  Second_att_control_codeblock_B.Integrator_b =
    Second_att_control_codeblock_DW.Integrator_DSTATE_n;
 800ad72:	4b33      	ldr	r3, [pc, #204]	; (800ae40 <Second_att_control_codeblock_step+0x298>)
 800ad74:	695b      	ldr	r3, [r3, #20]
  Second_att_control_codeblock_B.Integrator_b =
 800ad76:	4a2c      	ldr	r2, [pc, #176]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad78:	6713      	str	r3, [r2, #112]	; 0x70

  /* Gain: '<S183>/Derivative Gain' */
  Second_att_control_codeblock_B.DerivativeGain = kD_Roll_rate_PID *
    Second_att_control_codeblock_B.Sum_c;
 800ad7a:	4b2b      	ldr	r3, [pc, #172]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad7c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
  Second_att_control_codeblock_B.DerivativeGain = kD_Roll_rate_PID *
 800ad80:	4b31      	ldr	r3, [pc, #196]	; (800ae48 <Second_att_control_codeblock_step+0x2a0>)
 800ad82:	edd3 7a00 	vldr	s15, [r3]
 800ad86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad8a:	4b27      	ldr	r3, [pc, #156]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad8c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

  /* DiscreteIntegrator: '<S184>/Filter' */
  Second_att_control_codeblock_B.Filter_h =
    Second_att_control_codeblock_DW.Filter_DSTATE_n;
 800ad90:	4b2b      	ldr	r3, [pc, #172]	; (800ae40 <Second_att_control_codeblock_step+0x298>)
 800ad92:	699b      	ldr	r3, [r3, #24]
  Second_att_control_codeblock_B.Filter_h =
 800ad94:	4a24      	ldr	r2, [pc, #144]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad96:	6793      	str	r3, [r2, #120]	; 0x78

  /* Sum: '<S184>/SumD' */
  Second_att_control_codeblock_B.SumD_h =
    Second_att_control_codeblock_B.DerivativeGain -
 800ad98:	4b23      	ldr	r3, [pc, #140]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ad9a:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
    Second_att_control_codeblock_B.Filter_h;
 800ad9e:	4b22      	ldr	r3, [pc, #136]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ada0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
    Second_att_control_codeblock_B.DerivativeGain -
 800ada4:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.SumD_h =
 800ada8:	4b1f      	ldr	r3, [pc, #124]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800adaa:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

  /* Gain: '<S192>/Filter Coefficient' */
  Second_att_control_codeblock_B.FilterCoefficient_a = Hz_LPF_Roll_rate *
    Second_att_control_codeblock_B.SumD_h;
 800adae:	4b1e      	ldr	r3, [pc, #120]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800adb0:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
  Second_att_control_codeblock_B.FilterCoefficient_a = Hz_LPF_Roll_rate *
 800adb4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800adb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800adbc:	4b1a      	ldr	r3, [pc, #104]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800adbe:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

  /* Sum: '<S198>/Sum' */
  Second_att_control_codeblock_B.Sum_n =
    (Second_att_control_codeblock_B.ProportionalGain_b +
 800adc2:	4b19      	ldr	r3, [pc, #100]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800adc4:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
     Second_att_control_codeblock_B.Integrator_b) +
 800adc8:	4b17      	ldr	r3, [pc, #92]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800adca:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
    (Second_att_control_codeblock_B.ProportionalGain_b +
 800adce:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock_B.FilterCoefficient_a;
 800add2:	4b15      	ldr	r3, [pc, #84]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800add4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
     Second_att_control_codeblock_B.Integrator_b) +
 800add8:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_n =
 800addc:	4b12      	ldr	r3, [pc, #72]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800adde:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

  /* Saturate: '<S196>/Saturation' */
  u0 = Second_att_control_codeblock_B.Sum_n;
 800ade2:	4b11      	ldr	r3, [pc, #68]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ade4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ade8:	60fb      	str	r3, [r7, #12]
  if (u0 > 1.0F) {
 800adea:	edd7 7a03 	vldr	s15, [r7, #12]
 800adee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adfa:	dd05      	ble.n	800ae08 <Second_att_control_codeblock_step+0x260>
    Second_att_control_codeblock_B.Saturation_b = 1.0F;
 800adfc:	4b0a      	ldr	r3, [pc, #40]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800adfe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ae02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ae06:	e025      	b.n	800ae54 <Second_att_control_codeblock_step+0x2ac>
  } else if (u0 < -1.0F) {
 800ae08:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae0c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ae10:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae18:	d518      	bpl.n	800ae4c <Second_att_control_codeblock_step+0x2a4>
    Second_att_control_codeblock_B.Saturation_b = -1.0F;
 800ae1a:	4b03      	ldr	r3, [pc, #12]	; (800ae28 <Second_att_control_codeblock_step+0x280>)
 800ae1c:	4a05      	ldr	r2, [pc, #20]	; (800ae34 <Second_att_control_codeblock_step+0x28c>)
 800ae1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ae22:	e017      	b.n	800ae54 <Second_att_control_codeblock_step+0x2ac>
 800ae24:	20000c08 	.word	0x20000c08
 800ae28:	20000ac8 	.word	0x20000ac8
 800ae2c:	44bb8000 	.word	0x44bb8000
 800ae30:	43fa0000 	.word	0x43fa0000
 800ae34:	bf800000 	.word	0xbf800000
 800ae38:	00000000 	.word	0x00000000
 800ae3c:	2000004c 	.word	0x2000004c
 800ae40:	20000bd0 	.word	0x20000bd0
 800ae44:	20000060 	.word	0x20000060
 800ae48:	200003ac 	.word	0x200003ac
  } else {
    Second_att_control_codeblock_B.Saturation_b = u0;
 800ae4c:	4ab4      	ldr	r2, [pc, #720]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* End of Saturate: '<S196>/Saturation' */

  /* Gain: '<S7>/FF_pitch_gain' */
  Second_att_control_codeblock_B.FF_pitch_gain = 0.0F *
    Second_att_control_codeblock_B.urad_max[1];
 800ae54:	4bb2      	ldr	r3, [pc, #712]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800ae56:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
  Second_att_control_codeblock_B.FF_pitch_gain = 0.0F *
 800ae5a:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800b124 <Second_att_control_codeblock_step+0x57c>
 800ae5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae62:	4baf      	ldr	r3, [pc, #700]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800ae64:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

  /* Sum: '<S7>/Sum2' incorporates:
   *  Inport: '<Root>/Pitch'
   */
  Second_att_control_codeblock_B.Sum2 = Second_att_control_codeblock_B.urad_max
    [1] - Second_att_control_codeblock_U.Pitch;
 800ae68:	4bad      	ldr	r3, [pc, #692]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800ae6a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800ae6e:	4bae      	ldr	r3, [pc, #696]	; (800b128 <Second_att_control_codeblock_step+0x580>)
 800ae70:	edd3 7a01 	vldr	s15, [r3, #4]
 800ae74:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum2 = Second_att_control_codeblock_B.urad_max
 800ae78:	4ba9      	ldr	r3, [pc, #676]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800ae7a:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

  /* Gain: '<S96>/Proportional Gain' */
  Second_att_control_codeblock_B.ProportionalGain_l = Angle_rate_pitch_kP *
    Second_att_control_codeblock_B.Sum2;
 800ae7e:	4ba8      	ldr	r3, [pc, #672]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800ae80:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
  Second_att_control_codeblock_B.ProportionalGain_l = Angle_rate_pitch_kP *
 800ae84:	4ba9      	ldr	r3, [pc, #676]	; (800b12c <Second_att_control_codeblock_step+0x584>)
 800ae86:	edd3 7a00 	vldr	s15, [r3]
 800ae8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae8e:	4ba4      	ldr	r3, [pc, #656]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800ae90:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

  /* DiscreteIntegrator: '<S91>/Integrator' */
  Second_att_control_codeblock_B.Integrator_f =
    Second_att_control_codeblock_DW.Integrator_DSTATE_l;
 800ae94:	4ba6      	ldr	r3, [pc, #664]	; (800b130 <Second_att_control_codeblock_step+0x588>)
 800ae96:	69db      	ldr	r3, [r3, #28]
  Second_att_control_codeblock_B.Integrator_f =
 800ae98:	4aa1      	ldr	r2, [pc, #644]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800ae9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Sum: '<S100>/Sum' */
  Second_att_control_codeblock_B.Sum_l =
    Second_att_control_codeblock_B.ProportionalGain_l +
 800ae9e:	4ba0      	ldr	r3, [pc, #640]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800aea0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
    Second_att_control_codeblock_B.Integrator_f;
 800aea4:	4b9e      	ldr	r3, [pc, #632]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800aea6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
    Second_att_control_codeblock_B.ProportionalGain_l +
 800aeaa:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_l =
 800aeae:	4b9c      	ldr	r3, [pc, #624]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800aeb0:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

  /* Sum: '<S7>/Sum3' */
  Second_att_control_codeblock_B.Sum3 =
    Second_att_control_codeblock_B.FF_pitch_gain +
 800aeb4:	4b9a      	ldr	r3, [pc, #616]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800aeb6:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
    Second_att_control_codeblock_B.Sum_l;
 800aeba:	4b99      	ldr	r3, [pc, #612]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800aebc:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
    Second_att_control_codeblock_B.FF_pitch_gain +
 800aec0:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum3 =
 800aec4:	4b96      	ldr	r3, [pc, #600]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800aec6:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

  /* Sum: '<S8>/Sum1' incorporates:
   *  Inport: '<Root>/q'
   */
  Second_att_control_codeblock_B.Sum1_h = Second_att_control_codeblock_B.Sum3 -
 800aeca:	4b95      	ldr	r3, [pc, #596]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800aecc:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
    Second_att_control_codeblock_U.q;
 800aed0:	4b95      	ldr	r3, [pc, #596]	; (800b128 <Second_att_control_codeblock_step+0x580>)
 800aed2:	edd3 7a03 	vldr	s15, [r3, #12]
  Second_att_control_codeblock_B.Sum1_h = Second_att_control_codeblock_B.Sum3 -
 800aed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeda:	4b91      	ldr	r3, [pc, #580]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800aedc:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

  /* Gain: '<S146>/Proportional Gain' */
  Second_att_control_codeblock_B.ProportionalGain_b4 = kP_Pitch_rate_PID *
    Second_att_control_codeblock_B.Sum1_h;
 800aee0:	4b8f      	ldr	r3, [pc, #572]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800aee2:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
  Second_att_control_codeblock_B.ProportionalGain_b4 = kP_Pitch_rate_PID *
 800aee6:	4b93      	ldr	r3, [pc, #588]	; (800b134 <Second_att_control_codeblock_step+0x58c>)
 800aee8:	edd3 7a00 	vldr	s15, [r3]
 800aeec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aef0:	4b8b      	ldr	r3, [pc, #556]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800aef2:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

  /* DiscreteIntegrator: '<S141>/Integrator' */
  Second_att_control_codeblock_B.Integrator_a =
    Second_att_control_codeblock_DW.Integrator_DSTATE_d;
 800aef6:	4b8e      	ldr	r3, [pc, #568]	; (800b130 <Second_att_control_codeblock_step+0x588>)
 800aef8:	6a1b      	ldr	r3, [r3, #32]
  Second_att_control_codeblock_B.Integrator_a =
 800aefa:	4a89      	ldr	r2, [pc, #548]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800aefc:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Gain: '<S135>/Derivative Gain' */
  Second_att_control_codeblock_B.DerivativeGain_o = kD_Pitch_rate_PID *
    Second_att_control_codeblock_B.Sum1_h;
 800af00:	4b87      	ldr	r3, [pc, #540]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800af02:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
  Second_att_control_codeblock_B.DerivativeGain_o = kD_Pitch_rate_PID *
 800af06:	4b8c      	ldr	r3, [pc, #560]	; (800b138 <Second_att_control_codeblock_step+0x590>)
 800af08:	edd3 7a00 	vldr	s15, [r3]
 800af0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af10:	4b83      	ldr	r3, [pc, #524]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800af12:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

  /* DiscreteIntegrator: '<S136>/Filter' */
  Second_att_control_codeblock_B.Filter =
    Second_att_control_codeblock_DW.Filter_DSTATE;
 800af16:	4b86      	ldr	r3, [pc, #536]	; (800b130 <Second_att_control_codeblock_step+0x588>)
 800af18:	e9d3 3400 	ldrd	r3, r4, [r3]
  Second_att_control_codeblock_B.Filter =
 800af1c:	4a80      	ldr	r2, [pc, #512]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800af1e:	e9c2 3400 	strd	r3, r4, [r2]

  /* Sum: '<S136>/SumD' */
  Second_att_control_codeblock_B.SumD =
    Second_att_control_codeblock_B.DerivativeGain_o -
 800af22:	4b7f      	ldr	r3, [pc, #508]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800af24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af28:	4618      	mov	r0, r3
 800af2a:	f7f5 facd 	bl	80004c8 <__aeabi_f2d>
    Second_att_control_codeblock_B.Filter;
 800af2e:	4b7c      	ldr	r3, [pc, #496]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800af30:	e9d3 3400 	ldrd	r3, r4, [r3]
    Second_att_control_codeblock_B.DerivativeGain_o -
 800af34:	461a      	mov	r2, r3
 800af36:	4623      	mov	r3, r4
 800af38:	f7f5 f966 	bl	8000208 <__aeabi_dsub>
 800af3c:	4603      	mov	r3, r0
 800af3e:	460c      	mov	r4, r1
  Second_att_control_codeblock_B.SumD =
 800af40:	4a77      	ldr	r2, [pc, #476]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800af42:	e9c2 3402 	strd	r3, r4, [r2, #8]

  /* Gain: '<S144>/Filter Coefficient' */
  Second_att_control_codeblock_B.FilterCoefficient = Hz_LPF_Pitch_rate *
 800af46:	4b7d      	ldr	r3, [pc, #500]	; (800b13c <Second_att_control_codeblock_step+0x594>)
 800af48:	4618      	mov	r0, r3
 800af4a:	f7f5 fabd 	bl	80004c8 <__aeabi_f2d>
    Second_att_control_codeblock_B.SumD;
 800af4e:	4b74      	ldr	r3, [pc, #464]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800af50:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  Second_att_control_codeblock_B.FilterCoefficient = Hz_LPF_Pitch_rate *
 800af54:	461a      	mov	r2, r3
 800af56:	4623      	mov	r3, r4
 800af58:	f7f5 fb0e 	bl	8000578 <__aeabi_dmul>
 800af5c:	4603      	mov	r3, r0
 800af5e:	460c      	mov	r4, r1
 800af60:	4a6f      	ldr	r2, [pc, #444]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800af62:	e9c2 3404 	strd	r3, r4, [r2, #16]

  /* Sum: '<S150>/Sum' */
  Second_att_control_codeblock_B.Sum = ((real_T)
    Second_att_control_codeblock_B.ProportionalGain_b4 +
 800af66:	4b6e      	ldr	r3, [pc, #440]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800af68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
  Second_att_control_codeblock_B.Sum = ((real_T)
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7f5 faab 	bl	80004c8 <__aeabi_f2d>
 800af72:	4604      	mov	r4, r0
 800af74:	460d      	mov	r5, r1
    Second_att_control_codeblock_B.Integrator_a) +
 800af76:	4b6a      	ldr	r3, [pc, #424]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800af78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7f5 faa3 	bl	80004c8 <__aeabi_f2d>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
    Second_att_control_codeblock_B.ProportionalGain_b4 +
 800af86:	4620      	mov	r0, r4
 800af88:	4629      	mov	r1, r5
 800af8a:	f7f5 f93f 	bl	800020c <__adddf3>
 800af8e:	4603      	mov	r3, r0
 800af90:	460c      	mov	r4, r1
 800af92:	4618      	mov	r0, r3
 800af94:	4621      	mov	r1, r4
    Second_att_control_codeblock_B.FilterCoefficient;
 800af96:	4b62      	ldr	r3, [pc, #392]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800af98:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
    Second_att_control_codeblock_B.Integrator_a) +
 800af9c:	461a      	mov	r2, r3
 800af9e:	4623      	mov	r3, r4
 800afa0:	f7f5 f934 	bl	800020c <__adddf3>
 800afa4:	4603      	mov	r3, r0
 800afa6:	460c      	mov	r4, r1
  Second_att_control_codeblock_B.Sum = ((real_T)
 800afa8:	4a5d      	ldr	r2, [pc, #372]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800afaa:	e9c2 3406 	strd	r3, r4, [r2, #24]

  /* Saturate: '<S148>/Saturation' */
  u0_0 = Second_att_control_codeblock_B.Sum;
 800afae:	4b5c      	ldr	r3, [pc, #368]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800afb0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800afb4:	e9c7 3400 	strd	r3, r4, [r7]
  if (u0_0 > 1.0) {
 800afb8:	f04f 0200 	mov.w	r2, #0
 800afbc:	4b60      	ldr	r3, [pc, #384]	; (800b140 <Second_att_control_codeblock_step+0x598>)
 800afbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afc2:	f7f5 fd69 	bl	8000a98 <__aeabi_dcmpgt>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d006      	beq.n	800afda <Second_att_control_codeblock_step+0x432>
    Second_att_control_codeblock_B.Saturation = 1.0;
 800afcc:	4a54      	ldr	r2, [pc, #336]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800afce:	f04f 0300 	mov.w	r3, #0
 800afd2:	4c5b      	ldr	r4, [pc, #364]	; (800b140 <Second_att_control_codeblock_step+0x598>)
 800afd4:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800afd8:	e015      	b.n	800b006 <Second_att_control_codeblock_step+0x45e>
  } else if (u0_0 < -1.0) {
 800afda:	f04f 0200 	mov.w	r2, #0
 800afde:	4b59      	ldr	r3, [pc, #356]	; (800b144 <Second_att_control_codeblock_step+0x59c>)
 800afe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afe4:	f7f5 fd3a 	bl	8000a5c <__aeabi_dcmplt>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d006      	beq.n	800affc <Second_att_control_codeblock_step+0x454>
    Second_att_control_codeblock_B.Saturation = -1.0;
 800afee:	4a4c      	ldr	r2, [pc, #304]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800aff0:	f04f 0300 	mov.w	r3, #0
 800aff4:	4c53      	ldr	r4, [pc, #332]	; (800b144 <Second_att_control_codeblock_step+0x59c>)
 800aff6:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800affa:	e004      	b.n	800b006 <Second_att_control_codeblock_step+0x45e>
  } else {
    Second_att_control_codeblock_B.Saturation = u0_0;
 800affc:	4a48      	ldr	r2, [pc, #288]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800affe:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b002:	e9c2 3408 	strd	r3, r4, [r2, #32]

  /* DataTypeConversion: '<S4>/Data Type Conversion2' incorporates:
   *  Inport: '<Root>/set_yaw'
   */
  Second_att_control_codeblock_B.DataTypeConversion2 =
    Second_att_control_codeblock_U.set_yaw;
 800b006:	4b48      	ldr	r3, [pc, #288]	; (800b128 <Second_att_control_codeblock_step+0x580>)
 800b008:	8b5b      	ldrh	r3, [r3, #26]
  Second_att_control_codeblock_B.DataTypeConversion2 =
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b012:	4b43      	ldr	r3, [pc, #268]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b014:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

  /* Fcn: '<S4>/Fcn7' */
  Second_att_control_codeblock_B.Fcn7 =
    (Second_att_control_codeblock_B.DataTypeConversion2 - 1500.0F) / 500.0F;
 800b018:	4b41      	ldr	r3, [pc, #260]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b01a:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800b01e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b148 <Second_att_control_codeblock_step+0x5a0>
 800b022:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b026:	eddf 6a49 	vldr	s13, [pc, #292]	; 800b14c <Second_att_control_codeblock_step+0x5a4>
 800b02a:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock_B.Fcn7 =
 800b02e:	4b3c      	ldr	r3, [pc, #240]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b030:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8

  /* Saturate: '<S4>/Saturation7' */
  u0 = Second_att_control_codeblock_B.Fcn7;
 800b034:	4b3a      	ldr	r3, [pc, #232]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b036:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b03a:	60fb      	str	r3, [r7, #12]
  if (u0 > 1.0F) {
 800b03c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b044:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b04c:	dd05      	ble.n	800b05a <Second_att_control_codeblock_step+0x4b2>
    Second_att_control_codeblock_B.Saturation7 = 1.0F;
 800b04e:	4b34      	ldr	r3, [pc, #208]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b050:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b054:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800b058:	e011      	b.n	800b07e <Second_att_control_codeblock_step+0x4d6>
  } else if (u0 < -1.0F) {
 800b05a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b05e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b062:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06a:	d504      	bpl.n	800b076 <Second_att_control_codeblock_step+0x4ce>
    Second_att_control_codeblock_B.Saturation7 = -1.0F;
 800b06c:	4b2c      	ldr	r3, [pc, #176]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b06e:	4a38      	ldr	r2, [pc, #224]	; (800b150 <Second_att_control_codeblock_step+0x5a8>)
 800b070:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800b074:	e003      	b.n	800b07e <Second_att_control_codeblock_step+0x4d6>
  } else {
    Second_att_control_codeblock_B.Saturation7 = u0;
 800b076:	4a2a      	ldr	r2, [pc, #168]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

  /* Sum: '<S9>/Sum' incorporates:
   *  Inport: '<Root>/r'
   */
  Second_att_control_codeblock_B.Sum_m =
    Second_att_control_codeblock_B.Saturation7 -
 800b07e:	4b28      	ldr	r3, [pc, #160]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b080:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
    Second_att_control_codeblock_U.r;
 800b084:	4b28      	ldr	r3, [pc, #160]	; (800b128 <Second_att_control_codeblock_step+0x580>)
 800b086:	edd3 7a04 	vldr	s15, [r3, #16]
    Second_att_control_codeblock_B.Saturation7 -
 800b08a:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_m =
 800b08e:	4b24      	ldr	r3, [pc, #144]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b090:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0

  /* Gain: '<S9>/Gain' */
  Second_att_control_codeblock_B.Gain = Yaw_rate_max_rad *
    Second_att_control_codeblock_B.Sum_m;
 800b094:	4b22      	ldr	r3, [pc, #136]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b096:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
  Second_att_control_codeblock_B.Gain = Yaw_rate_max_rad *
 800b09a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800b154 <Second_att_control_codeblock_step+0x5ac>
 800b09e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0a2:	4b1f      	ldr	r3, [pc, #124]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b0a4:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

  /* Gain: '<S243>/Proportional Gain' */
  Second_att_control_codeblock_B.ProportionalGain_j = kP_Yaw_rate_PID *
    Second_att_control_codeblock_B.Gain;
 800b0a8:	4b1d      	ldr	r3, [pc, #116]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b0aa:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
  Second_att_control_codeblock_B.ProportionalGain_j = kP_Yaw_rate_PID *
 800b0ae:	4b2a      	ldr	r3, [pc, #168]	; (800b158 <Second_att_control_codeblock_step+0x5b0>)
 800b0b0:	edd3 7a00 	vldr	s15, [r3]
 800b0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b8:	4b19      	ldr	r3, [pc, #100]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b0ba:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8

  /* DiscreteIntegrator: '<S238>/Integrator' */
  Second_att_control_codeblock_B.Integrator_d =
    Second_att_control_codeblock_DW.Integrator_DSTATE_j;
 800b0be:	4b1c      	ldr	r3, [pc, #112]	; (800b130 <Second_att_control_codeblock_step+0x588>)
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  Second_att_control_codeblock_B.Integrator_d =
 800b0c2:	4a17      	ldr	r2, [pc, #92]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b0c4:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

  /* Sum: '<S247>/Sum' */
  Second_att_control_codeblock_B.Sum_f3 =
    Second_att_control_codeblock_B.ProportionalGain_j +
 800b0c8:	4b15      	ldr	r3, [pc, #84]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b0ca:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
    Second_att_control_codeblock_B.Integrator_d;
 800b0ce:	4b14      	ldr	r3, [pc, #80]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b0d0:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
    Second_att_control_codeblock_B.ProportionalGain_j +
 800b0d4:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_f3 =
 800b0d8:	4b11      	ldr	r3, [pc, #68]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b0da:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

  /* Saturate: '<S245>/Saturation' */
  u0 = Second_att_control_codeblock_B.Sum_f3;
 800b0de:	4b10      	ldr	r3, [pc, #64]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b0e0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800b0e4:	60fb      	str	r3, [r7, #12]
  if (u0 > 1.0F) {
 800b0e6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b0ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f6:	dd05      	ble.n	800b104 <Second_att_control_codeblock_step+0x55c>
    Second_att_control_codeblock_B.Saturation_o = 1.0F;
 800b0f8:	4b09      	ldr	r3, [pc, #36]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b0fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b0fe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800b102:	e02f      	b.n	800b164 <Second_att_control_codeblock_step+0x5bc>
  } else if (u0 < -1.0F) {
 800b104:	edd7 7a03 	vldr	s15, [r7, #12]
 800b108:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b10c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b114:	d522      	bpl.n	800b15c <Second_att_control_codeblock_step+0x5b4>
    Second_att_control_codeblock_B.Saturation_o = -1.0F;
 800b116:	4b02      	ldr	r3, [pc, #8]	; (800b120 <Second_att_control_codeblock_step+0x578>)
 800b118:	4a0d      	ldr	r2, [pc, #52]	; (800b150 <Second_att_control_codeblock_step+0x5a8>)
 800b11a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800b11e:	e021      	b.n	800b164 <Second_att_control_codeblock_step+0x5bc>
 800b120:	20000ac8 	.word	0x20000ac8
 800b124:	00000000 	.word	0x00000000
 800b128:	20000c08 	.word	0x20000c08
 800b12c:	20000044 	.word	0x20000044
 800b130:	20000bd0 	.word	0x20000bd0
 800b134:	2000005c 	.word	0x2000005c
 800b138:	200003a8 	.word	0x200003a8
 800b13c:	41a00000 	.word	0x41a00000
 800b140:	3ff00000 	.word	0x3ff00000
 800b144:	bff00000 	.word	0xbff00000
 800b148:	44bb8000 	.word	0x44bb8000
 800b14c:	43fa0000 	.word	0x43fa0000
 800b150:	bf800000 	.word	0xbf800000
 800b154:	3f860a90 	.word	0x3f860a90
 800b158:	20000064 	.word	0x20000064
  } else {
    Second_att_control_codeblock_B.Saturation_o = u0;
 800b15c:	4ac3      	ldr	r2, [pc, #780]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

  /* DataTypeConversion: '<S4>/Data Type Conversion3' incorporates:
   *  Inport: '<Root>/set_thrust'
   */
  Second_att_control_codeblock_B.DataTypeConversion3 =
    Second_att_control_codeblock_U.set_thrust;
 800b164:	4bc2      	ldr	r3, [pc, #776]	; (800b470 <Second_att_control_codeblock_step+0x8c8>)
 800b166:	8a9b      	ldrh	r3, [r3, #20]
  Second_att_control_codeblock_B.DataTypeConversion3 =
 800b168:	ee07 3a90 	vmov	s15, r3
 800b16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b170:	4bbe      	ldr	r3, [pc, #760]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b172:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8

  /* Fcn: '<S4>/Fcn6' */
  Second_att_control_codeblock_B.Fcn6 =
    (Second_att_control_codeblock_B.DataTypeConversion3 - 1000.0F) / 1000.0F;
 800b176:	4bbd      	ldr	r3, [pc, #756]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b178:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800b17c:	ed9f 7abd 	vldr	s14, [pc, #756]	; 800b474 <Second_att_control_codeblock_step+0x8cc>
 800b180:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b184:	eddf 6abb 	vldr	s13, [pc, #748]	; 800b474 <Second_att_control_codeblock_step+0x8cc>
 800b188:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock_B.Fcn6 =
 800b18c:	4bb7      	ldr	r3, [pc, #732]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b18e:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc

  /* Saturate: '<S4>/Saturation10' */
  u0 = Second_att_control_codeblock_B.Fcn6;
 800b192:	4bb6      	ldr	r3, [pc, #728]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b194:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b198:	60fb      	str	r3, [r7, #12]
  if (u0 > 1.0F) {
 800b19a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b19e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1aa:	dd05      	ble.n	800b1b8 <Second_att_control_codeblock_step+0x610>
    Second_att_control_codeblock_B.Saturation10 = 1.0F;
 800b1ac:	4baf      	ldr	r3, [pc, #700]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b1ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b1b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b1b6:	e010      	b.n	800b1da <Second_att_control_codeblock_step+0x632>
  } else if (u0 < 0.0F) {
 800b1b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c4:	d505      	bpl.n	800b1d2 <Second_att_control_codeblock_step+0x62a>
    Second_att_control_codeblock_B.Saturation10 = 0.0F;
 800b1c6:	4ba9      	ldr	r3, [pc, #676]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b1c8:	f04f 0200 	mov.w	r2, #0
 800b1cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b1d0:	e003      	b.n	800b1da <Second_att_control_codeblock_step+0x632>
  } else {
    Second_att_control_codeblock_B.Saturation10 = u0;
 800b1d2:	4aa6      	ldr	r2, [pc, #664]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /* End of Saturate: '<S4>/Saturation10' */

  /* MATLAB Function: '<S1>/pwm_out1' */
  u0 = rt_roundf_snf(((-Second_att_control_codeblock_B.Saturation_b -
 800b1da:	4ba4      	ldr	r3, [pc, #656]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b1dc:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800b1e0:	eeb1 7a67 	vneg.f32	s14, s15
                       Second_att_control_codeblock_B.Saturation_o) *
 800b1e4:	4ba1      	ldr	r3, [pc, #644]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b1e6:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
  u0 = rt_roundf_snf(((-Second_att_control_codeblock_B.Saturation_b -
 800b1ea:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b1ee:	4b9f      	ldr	r3, [pc, #636]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b1f0:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                       Second_att_control_codeblock_B.Saturation_o) *
 800b1f4:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b1f8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b1fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b200:	4b9a      	ldr	r3, [pc, #616]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b202:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b206:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((-Second_att_control_codeblock_B.Saturation_b -
 800b20a:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800b474 <Second_att_control_codeblock_step+0x8cc>
 800b20e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b212:	eeb0 0a67 	vmov.f32	s0, s15
 800b216:	f7ff fc59 	bl	800aacc <rt_roundf_snf>
 800b21a:	ed87 0a03 	vstr	s0, [r7, #12]
  if (u0 < 65536.0F) {
 800b21e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b222:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800b478 <Second_att_control_codeblock_step+0x8d0>
 800b226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b22e:	d511      	bpl.n	800b254 <Second_att_control_codeblock_step+0x6ac>
    if (u0 >= 0.0F) {
 800b230:	edd7 7a03 	vldr	s15, [r7, #12]
 800b234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23c:	db07      	blt.n	800b24e <Second_att_control_codeblock_step+0x6a6>
      y = (uint16_T)u0;
 800b23e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b246:	ee17 3a90 	vmov	r3, s15
 800b24a:	827b      	strh	r3, [r7, #18]
 800b24c:	e005      	b.n	800b25a <Second_att_control_codeblock_step+0x6b2>
    } else {
      y = 0U;
 800b24e:	2300      	movs	r3, #0
 800b250:	827b      	strh	r3, [r7, #18]
 800b252:	e002      	b.n	800b25a <Second_att_control_codeblock_step+0x6b2>
    }
  } else {
    y = MAX_uint16_T;
 800b254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b258:	827b      	strh	r3, [r7, #18]
  }

  tmp = y + 1000U;
 800b25a:	8a7b      	ldrh	r3, [r7, #18]
 800b25c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b260:	617b      	str	r3, [r7, #20]
  if (tmp > 65535U) {
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b268:	d302      	bcc.n	800b270 <Second_att_control_codeblock_step+0x6c8>
    tmp = 65535U;
 800b26a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b26e:	617b      	str	r3, [r7, #20]
  }

  Second_att_control_codeblock_B.M1 = (uint16_T)tmp;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	b29a      	uxth	r2, r3
 800b274:	4b7d      	ldr	r3, [pc, #500]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b276:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
  u0 = rt_roundf_snf(((Second_att_control_codeblock_B.Saturation_b +
 800b27a:	4b7c      	ldr	r3, [pc, #496]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b27c:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
                       Second_att_control_codeblock_B.Saturation_o) *
 800b280:	4b7a      	ldr	r3, [pc, #488]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b282:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
  u0 = rt_roundf_snf(((Second_att_control_codeblock_B.Saturation_b +
 800b286:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b28a:	4b78      	ldr	r3, [pc, #480]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b28c:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                       Second_att_control_codeblock_B.Saturation_o) *
 800b290:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b294:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b298:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b29c:	4b73      	ldr	r3, [pc, #460]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b29e:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b2a2:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((Second_att_control_codeblock_B.Saturation_b +
 800b2a6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b474 <Second_att_control_codeblock_step+0x8cc>
 800b2aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b2ae:	eeb0 0a67 	vmov.f32	s0, s15
 800b2b2:	f7ff fc0b 	bl	800aacc <rt_roundf_snf>
 800b2b6:	ed87 0a03 	vstr	s0, [r7, #12]
  if (u0 < 65536.0F) {
 800b2ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800b2be:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800b478 <Second_att_control_codeblock_step+0x8d0>
 800b2c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ca:	d511      	bpl.n	800b2f0 <Second_att_control_codeblock_step+0x748>
    if (u0 >= 0.0F) {
 800b2cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800b2d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d8:	db07      	blt.n	800b2ea <Second_att_control_codeblock_step+0x742>
      y = (uint16_T)u0;
 800b2da:	edd7 7a03 	vldr	s15, [r7, #12]
 800b2de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2e2:	ee17 3a90 	vmov	r3, s15
 800b2e6:	827b      	strh	r3, [r7, #18]
 800b2e8:	e005      	b.n	800b2f6 <Second_att_control_codeblock_step+0x74e>
    } else {
      y = 0U;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	827b      	strh	r3, [r7, #18]
 800b2ee:	e002      	b.n	800b2f6 <Second_att_control_codeblock_step+0x74e>
    }
  } else {
    y = MAX_uint16_T;
 800b2f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2f4:	827b      	strh	r3, [r7, #18]
  }

  tmp = y + 1000U;
 800b2f6:	8a7b      	ldrh	r3, [r7, #18]
 800b2f8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b2fc:	617b      	str	r3, [r7, #20]
  if (tmp > 65535U) {
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b304:	d302      	bcc.n	800b30c <Second_att_control_codeblock_step+0x764>
    tmp = 65535U;
 800b306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b30a:	617b      	str	r3, [r7, #20]
  }

  Second_att_control_codeblock_B.M2 = (uint16_T)tmp;
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	b29a      	uxth	r2, r3
 800b310:	4b56      	ldr	r3, [pc, #344]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b312:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Saturation_b / 2.0F +
 800b316:	4b55      	ldr	r3, [pc, #340]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b318:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800b31c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b320:	ee87 8a87 	vdiv.f32	s16, s15, s14
                        (real32_T)Second_att_control_codeblock_B.Saturation) -
 800b324:	4b51      	ldr	r3, [pc, #324]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b326:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800b32a:	4618      	mov	r0, r3
 800b32c:	4621      	mov	r1, r4
 800b32e:	f7f5 fbfb 	bl	8000b28 <__aeabi_d2f>
 800b332:	ee07 0a90 	vmov	s15, r0
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Saturation_b / 2.0F +
 800b336:	ee38 7a27 	vadd.f32	s14, s16, s15
                       Second_att_control_codeblock_B.Saturation_o) *
 800b33a:	4b4c      	ldr	r3, [pc, #304]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b33c:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
                        (real32_T)Second_att_control_codeblock_B.Saturation) -
 800b340:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b344:	4b49      	ldr	r3, [pc, #292]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b346:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                       Second_att_control_codeblock_B.Saturation_o) *
 800b34a:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b34e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b352:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b356:	4b45      	ldr	r3, [pc, #276]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b358:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b35c:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Saturation_b / 2.0F +
 800b360:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b474 <Second_att_control_codeblock_step+0x8cc>
 800b364:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b368:	eeb0 0a67 	vmov.f32	s0, s15
 800b36c:	f7ff fbae 	bl	800aacc <rt_roundf_snf>
 800b370:	ed87 0a03 	vstr	s0, [r7, #12]
  if (u0 < 65536.0F) {
 800b374:	edd7 7a03 	vldr	s15, [r7, #12]
 800b378:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800b478 <Second_att_control_codeblock_step+0x8d0>
 800b37c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b384:	d511      	bpl.n	800b3aa <Second_att_control_codeblock_step+0x802>
    if (u0 >= 0.0F) {
 800b386:	edd7 7a03 	vldr	s15, [r7, #12]
 800b38a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b392:	db07      	blt.n	800b3a4 <Second_att_control_codeblock_step+0x7fc>
      y = (uint16_T)u0;
 800b394:	edd7 7a03 	vldr	s15, [r7, #12]
 800b398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b39c:	ee17 3a90 	vmov	r3, s15
 800b3a0:	827b      	strh	r3, [r7, #18]
 800b3a2:	e005      	b.n	800b3b0 <Second_att_control_codeblock_step+0x808>
    } else {
      y = 0U;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	827b      	strh	r3, [r7, #18]
 800b3a8:	e002      	b.n	800b3b0 <Second_att_control_codeblock_step+0x808>
    }
  } else {
    y = MAX_uint16_T;
 800b3aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3ae:	827b      	strh	r3, [r7, #18]
  }

  tmp = y + 1000U;
 800b3b0:	8a7b      	ldrh	r3, [r7, #18]
 800b3b2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b3b6:	617b      	str	r3, [r7, #20]
  if (tmp > 65535U) {
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3be:	d302      	bcc.n	800b3c6 <Second_att_control_codeblock_step+0x81e>
    tmp = 65535U;
 800b3c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3c4:	617b      	str	r3, [r7, #20]
  }

  Second_att_control_codeblock_B.M3 = (uint16_T)tmp;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	4b28      	ldr	r3, [pc, #160]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b3cc:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  u0 = rt_roundf_snf(((((real32_T)-Second_att_control_codeblock_B.Saturation -
 800b3d0:	4b26      	ldr	r3, [pc, #152]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b3d2:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	4621      	mov	r1, r4
 800b3da:	f7f5 fba5 	bl	8000b28 <__aeabi_d2f>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	ee07 3a90 	vmov	s15, r3
 800b3e4:	eeb1 7a67 	vneg.f32	s14, s15
                        Second_att_control_codeblock_B.Saturation_b / 2.0F) +
 800b3e8:	4b20      	ldr	r3, [pc, #128]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b3ea:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 800b3ee:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800b3f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf(((((real32_T)-Second_att_control_codeblock_B.Saturation -
 800b3f6:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock_B.Saturation_o) *
 800b3fa:	4b1c      	ldr	r3, [pc, #112]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b3fc:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
                        Second_att_control_codeblock_B.Saturation_b / 2.0F) +
 800b400:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b404:	4b19      	ldr	r3, [pc, #100]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b406:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                       Second_att_control_codeblock_B.Saturation_o) *
 800b40a:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b40e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b412:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b416:	4b15      	ldr	r3, [pc, #84]	; (800b46c <Second_att_control_codeblock_step+0x8c4>)
 800b418:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b41c:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((((real32_T)-Second_att_control_codeblock_B.Saturation -
 800b420:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800b474 <Second_att_control_codeblock_step+0x8cc>
 800b424:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b428:	eeb0 0a67 	vmov.f32	s0, s15
 800b42c:	f7ff fb4e 	bl	800aacc <rt_roundf_snf>
 800b430:	ed87 0a03 	vstr	s0, [r7, #12]
  if (u0 < 65536.0F) {
 800b434:	edd7 7a03 	vldr	s15, [r7, #12]
 800b438:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800b478 <Second_att_control_codeblock_step+0x8d0>
 800b43c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b444:	d51a      	bpl.n	800b47c <Second_att_control_codeblock_step+0x8d4>
    if (u0 >= 0.0F) {
 800b446:	edd7 7a03 	vldr	s15, [r7, #12]
 800b44a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b452:	db07      	blt.n	800b464 <Second_att_control_codeblock_step+0x8bc>
      y = (uint16_T)u0;
 800b454:	edd7 7a03 	vldr	s15, [r7, #12]
 800b458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b45c:	ee17 3a90 	vmov	r3, s15
 800b460:	827b      	strh	r3, [r7, #18]
 800b462:	e00e      	b.n	800b482 <Second_att_control_codeblock_step+0x8da>
    } else {
      y = 0U;
 800b464:	2300      	movs	r3, #0
 800b466:	827b      	strh	r3, [r7, #18]
 800b468:	e00b      	b.n	800b482 <Second_att_control_codeblock_step+0x8da>
 800b46a:	bf00      	nop
 800b46c:	20000ac8 	.word	0x20000ac8
 800b470:	20000c08 	.word	0x20000c08
 800b474:	447a0000 	.word	0x447a0000
 800b478:	47800000 	.word	0x47800000
    }
  } else {
    y = MAX_uint16_T;
 800b47c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b480:	827b      	strh	r3, [r7, #18]
  }

  tmp = y + 1000U;
 800b482:	8a7b      	ldrh	r3, [r7, #18]
 800b484:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b488:	617b      	str	r3, [r7, #20]
  if (tmp > 65535U) {
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b490:	d302      	bcc.n	800b498 <Second_att_control_codeblock_step+0x8f0>
    tmp = 65535U;
 800b492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b496:	617b      	str	r3, [r7, #20]
  }

  Second_att_control_codeblock_B.M4 = (uint16_T)tmp;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	4bab      	ldr	r3, [pc, #684]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b49e:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
  u0 = rt_roundf_snf(((((real32_T)Second_att_control_codeblock_B.Saturation -
 800b4a2:	4baa      	ldr	r3, [pc, #680]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b4a4:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	f7f5 fb3c 	bl	8000b28 <__aeabi_d2f>
 800b4b0:	ee06 0a10 	vmov	s12, r0
                        Second_att_control_codeblock_B.Saturation_b / 2.0F) +
 800b4b4:	4ba5      	ldr	r3, [pc, #660]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b4b6:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800b4ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b4be:	eec7 7a26 	vdiv.f32	s15, s14, s13
  u0 = rt_roundf_snf(((((real32_T)Second_att_control_codeblock_B.Saturation -
 800b4c2:	ee36 7a67 	vsub.f32	s14, s12, s15
                       Second_att_control_codeblock_B.Saturation_o) *
 800b4c6:	4ba1      	ldr	r3, [pc, #644]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b4c8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
                        Second_att_control_codeblock_B.Saturation_b / 2.0F) +
 800b4cc:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b4d0:	4b9e      	ldr	r3, [pc, #632]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b4d2:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                       Second_att_control_codeblock_B.Saturation_o) *
 800b4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b4da:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b4de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b4e2:	4b9a      	ldr	r3, [pc, #616]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b4e4:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b4e8:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((((real32_T)Second_att_control_codeblock_B.Saturation -
 800b4ec:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800b750 <Second_att_control_codeblock_step+0xba8>
 800b4f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4f4:	eeb0 0a67 	vmov.f32	s0, s15
 800b4f8:	f7ff fae8 	bl	800aacc <rt_roundf_snf>
 800b4fc:	ed87 0a03 	vstr	s0, [r7, #12]
  if (u0 < 65536.0F) {
 800b500:	edd7 7a03 	vldr	s15, [r7, #12]
 800b504:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800b754 <Second_att_control_codeblock_step+0xbac>
 800b508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b510:	d511      	bpl.n	800b536 <Second_att_control_codeblock_step+0x98e>
    if (u0 >= 0.0F) {
 800b512:	edd7 7a03 	vldr	s15, [r7, #12]
 800b516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b51e:	db07      	blt.n	800b530 <Second_att_control_codeblock_step+0x988>
      y = (uint16_T)u0;
 800b520:	edd7 7a03 	vldr	s15, [r7, #12]
 800b524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b528:	ee17 3a90 	vmov	r3, s15
 800b52c:	827b      	strh	r3, [r7, #18]
 800b52e:	e005      	b.n	800b53c <Second_att_control_codeblock_step+0x994>
    } else {
      y = 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	827b      	strh	r3, [r7, #18]
 800b534:	e002      	b.n	800b53c <Second_att_control_codeblock_step+0x994>
    }
  } else {
    y = MAX_uint16_T;
 800b536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b53a:	827b      	strh	r3, [r7, #18]
  }

  tmp = y + 1000U;
 800b53c:	8a7b      	ldrh	r3, [r7, #18]
 800b53e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b542:	617b      	str	r3, [r7, #20]
  if (tmp > 65535U) {
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b54a:	d302      	bcc.n	800b552 <Second_att_control_codeblock_step+0x9aa>
    tmp = 65535U;
 800b54c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b550:	617b      	str	r3, [r7, #20]
  }

  Second_att_control_codeblock_B.M5 = (uint16_T)tmp;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	b29a      	uxth	r2, r3
 800b556:	4b7d      	ldr	r3, [pc, #500]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b558:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Saturation_b / 2.0F +
 800b55c:	4b7b      	ldr	r3, [pc, #492]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b55e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800b562:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b566:	ee87 8a87 	vdiv.f32	s16, s15, s14
                        (real32_T)-Second_att_control_codeblock_B.Saturation) -
 800b56a:	4b78      	ldr	r3, [pc, #480]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b56c:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800b570:	4618      	mov	r0, r3
 800b572:	4621      	mov	r1, r4
 800b574:	f7f5 fad8 	bl	8000b28 <__aeabi_d2f>
 800b578:	ee07 0a90 	vmov	s15, r0
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Saturation_b / 2.0F +
 800b57c:	ee38 7a67 	vsub.f32	s14, s16, s15
                       Second_att_control_codeblock_B.Saturation_o) *
 800b580:	4b72      	ldr	r3, [pc, #456]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b582:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
                        (real32_T)-Second_att_control_codeblock_B.Saturation) -
 800b586:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b58a:	4b70      	ldr	r3, [pc, #448]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b58c:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                       Second_att_control_codeblock_B.Saturation_o) *
 800b590:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b594:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b598:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b59c:	4b6b      	ldr	r3, [pc, #428]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b59e:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b5a2:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Saturation_b / 2.0F +
 800b5a6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b750 <Second_att_control_codeblock_step+0xba8>
 800b5aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5ae:	eeb0 0a67 	vmov.f32	s0, s15
 800b5b2:	f7ff fa8b 	bl	800aacc <rt_roundf_snf>
 800b5b6:	ed87 0a03 	vstr	s0, [r7, #12]
  if (u0 < 65536.0F) {
 800b5ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800b5be:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800b754 <Second_att_control_codeblock_step+0xbac>
 800b5c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ca:	d511      	bpl.n	800b5f0 <Second_att_control_codeblock_step+0xa48>
    if (u0 >= 0.0F) {
 800b5cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800b5d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d8:	db07      	blt.n	800b5ea <Second_att_control_codeblock_step+0xa42>
      y = (uint16_T)u0;
 800b5da:	edd7 7a03 	vldr	s15, [r7, #12]
 800b5de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5e2:	ee17 3a90 	vmov	r3, s15
 800b5e6:	827b      	strh	r3, [r7, #18]
 800b5e8:	e005      	b.n	800b5f6 <Second_att_control_codeblock_step+0xa4e>
    } else {
      y = 0U;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	827b      	strh	r3, [r7, #18]
 800b5ee:	e002      	b.n	800b5f6 <Second_att_control_codeblock_step+0xa4e>
    }
  } else {
    y = MAX_uint16_T;
 800b5f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5f4:	827b      	strh	r3, [r7, #18]
  }

  tmp = y + 1000U;
 800b5f6:	8a7b      	ldrh	r3, [r7, #18]
 800b5f8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b5fc:	617b      	str	r3, [r7, #20]
  if (tmp > 65535U) {
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b604:	d302      	bcc.n	800b60c <Second_att_control_codeblock_step+0xa64>
    tmp = 65535U;
 800b606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b60a:	617b      	str	r3, [r7, #20]
  }

  Second_att_control_codeblock_B.M6 = (uint16_T)tmp;
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	b29a      	uxth	r2, r3
 800b610:	4b4e      	ldr	r3, [pc, #312]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b612:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

  /* End of MATLAB Function: '<S1>/pwm_out1' */

  /* Saturate: '<S1>/Saturation' */
  if (Second_att_control_codeblock_B.M1 > 2000) {
 800b616:	4b4d      	ldr	r3, [pc, #308]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b618:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b61c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b620:	d903      	bls.n	800b62a <Second_att_control_codeblock_step+0xa82>
    y = 2000U;
 800b622:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b626:	827b      	strh	r3, [r7, #18]
 800b628:	e00d      	b.n	800b646 <Second_att_control_codeblock_step+0xa9e>
  } else if (Second_att_control_codeblock_B.M1 < 1000) {
 800b62a:	4b48      	ldr	r3, [pc, #288]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b62c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b630:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b634:	d203      	bcs.n	800b63e <Second_att_control_codeblock_step+0xa96>
    y = 1000U;
 800b636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b63a:	827b      	strh	r3, [r7, #18]
 800b63c:	e003      	b.n	800b646 <Second_att_control_codeblock_step+0xa9e>
  } else {
    y = Second_att_control_codeblock_B.M1;
 800b63e:	4b43      	ldr	r3, [pc, #268]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b640:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b644:	827b      	strh	r3, [r7, #18]
  }

  /* Outport: '<Root>/PWM_OUT' incorporates:
   *  Saturate: '<S1>/Saturation'
   */
  Second_att_control_codeblock_Y.PWM_OUT[0] = y;
 800b646:	4a44      	ldr	r2, [pc, #272]	; (800b758 <Second_att_control_codeblock_step+0xbb0>)
 800b648:	8a7b      	ldrh	r3, [r7, #18]
 800b64a:	8013      	strh	r3, [r2, #0]

  /* Saturate: '<S1>/Saturation' */
  if (Second_att_control_codeblock_B.M2 > 2000) {
 800b64c:	4b3f      	ldr	r3, [pc, #252]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b64e:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 800b652:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b656:	d903      	bls.n	800b660 <Second_att_control_codeblock_step+0xab8>
    y = 2000U;
 800b658:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b65c:	827b      	strh	r3, [r7, #18]
 800b65e:	e00d      	b.n	800b67c <Second_att_control_codeblock_step+0xad4>
  } else if (Second_att_control_codeblock_B.M2 < 1000) {
 800b660:	4b3a      	ldr	r3, [pc, #232]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b662:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 800b666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b66a:	d203      	bcs.n	800b674 <Second_att_control_codeblock_step+0xacc>
    y = 1000U;
 800b66c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b670:	827b      	strh	r3, [r7, #18]
 800b672:	e003      	b.n	800b67c <Second_att_control_codeblock_step+0xad4>
  } else {
    y = Second_att_control_codeblock_B.M2;
 800b674:	4b35      	ldr	r3, [pc, #212]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b676:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 800b67a:	827b      	strh	r3, [r7, #18]
  }

  /* Outport: '<Root>/PWM_OUT' incorporates:
   *  Saturate: '<S1>/Saturation'
   */
  Second_att_control_codeblock_Y.PWM_OUT[1] = y;
 800b67c:	4a36      	ldr	r2, [pc, #216]	; (800b758 <Second_att_control_codeblock_step+0xbb0>)
 800b67e:	8a7b      	ldrh	r3, [r7, #18]
 800b680:	8053      	strh	r3, [r2, #2]

  /* Saturate: '<S1>/Saturation' */
  if (Second_att_control_codeblock_B.M3 > 2000) {
 800b682:	4b32      	ldr	r3, [pc, #200]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b684:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800b688:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b68c:	d903      	bls.n	800b696 <Second_att_control_codeblock_step+0xaee>
    y = 2000U;
 800b68e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b692:	827b      	strh	r3, [r7, #18]
 800b694:	e00d      	b.n	800b6b2 <Second_att_control_codeblock_step+0xb0a>
  } else if (Second_att_control_codeblock_B.M3 < 1000) {
 800b696:	4b2d      	ldr	r3, [pc, #180]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b698:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800b69c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6a0:	d203      	bcs.n	800b6aa <Second_att_control_codeblock_step+0xb02>
    y = 1000U;
 800b6a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6a6:	827b      	strh	r3, [r7, #18]
 800b6a8:	e003      	b.n	800b6b2 <Second_att_control_codeblock_step+0xb0a>
  } else {
    y = Second_att_control_codeblock_B.M3;
 800b6aa:	4b28      	ldr	r3, [pc, #160]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b6ac:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800b6b0:	827b      	strh	r3, [r7, #18]
  }

  /* Outport: '<Root>/PWM_OUT' incorporates:
   *  Saturate: '<S1>/Saturation'
   */
  Second_att_control_codeblock_Y.PWM_OUT[2] = y;
 800b6b2:	4a29      	ldr	r2, [pc, #164]	; (800b758 <Second_att_control_codeblock_step+0xbb0>)
 800b6b4:	8a7b      	ldrh	r3, [r7, #18]
 800b6b6:	8093      	strh	r3, [r2, #4]

  /* Saturate: '<S1>/Saturation' */
  if (Second_att_control_codeblock_B.M4 > 2000) {
 800b6b8:	4b24      	ldr	r3, [pc, #144]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b6ba:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 800b6be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b6c2:	d903      	bls.n	800b6cc <Second_att_control_codeblock_step+0xb24>
    y = 2000U;
 800b6c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b6c8:	827b      	strh	r3, [r7, #18]
 800b6ca:	e00d      	b.n	800b6e8 <Second_att_control_codeblock_step+0xb40>
  } else if (Second_att_control_codeblock_B.M4 < 1000) {
 800b6cc:	4b1f      	ldr	r3, [pc, #124]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b6ce:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 800b6d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6d6:	d203      	bcs.n	800b6e0 <Second_att_control_codeblock_step+0xb38>
    y = 1000U;
 800b6d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6dc:	827b      	strh	r3, [r7, #18]
 800b6de:	e003      	b.n	800b6e8 <Second_att_control_codeblock_step+0xb40>
  } else {
    y = Second_att_control_codeblock_B.M4;
 800b6e0:	4b1a      	ldr	r3, [pc, #104]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b6e2:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 800b6e6:	827b      	strh	r3, [r7, #18]
  }

  /* Outport: '<Root>/PWM_OUT' incorporates:
   *  Saturate: '<S1>/Saturation'
   */
  Second_att_control_codeblock_Y.PWM_OUT[3] = y;
 800b6e8:	4a1b      	ldr	r2, [pc, #108]	; (800b758 <Second_att_control_codeblock_step+0xbb0>)
 800b6ea:	8a7b      	ldrh	r3, [r7, #18]
 800b6ec:	80d3      	strh	r3, [r2, #6]

  /* Saturate: '<S1>/Saturation' */
  if (Second_att_control_codeblock_B.M5 > 2000) {
 800b6ee:	4b17      	ldr	r3, [pc, #92]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b6f0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800b6f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b6f8:	d903      	bls.n	800b702 <Second_att_control_codeblock_step+0xb5a>
    y = 2000U;
 800b6fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b6fe:	827b      	strh	r3, [r7, #18]
 800b700:	e00d      	b.n	800b71e <Second_att_control_codeblock_step+0xb76>
  } else if (Second_att_control_codeblock_B.M5 < 1000) {
 800b702:	4b12      	ldr	r3, [pc, #72]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b704:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800b708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b70c:	d203      	bcs.n	800b716 <Second_att_control_codeblock_step+0xb6e>
    y = 1000U;
 800b70e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b712:	827b      	strh	r3, [r7, #18]
 800b714:	e003      	b.n	800b71e <Second_att_control_codeblock_step+0xb76>
  } else {
    y = Second_att_control_codeblock_B.M5;
 800b716:	4b0d      	ldr	r3, [pc, #52]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b718:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800b71c:	827b      	strh	r3, [r7, #18]
  }

  /* Outport: '<Root>/PWM_OUT' incorporates:
   *  Saturate: '<S1>/Saturation'
   */
  Second_att_control_codeblock_Y.PWM_OUT[4] = y;
 800b71e:	4a0e      	ldr	r2, [pc, #56]	; (800b758 <Second_att_control_codeblock_step+0xbb0>)
 800b720:	8a7b      	ldrh	r3, [r7, #18]
 800b722:	8113      	strh	r3, [r2, #8]

  /* Saturate: '<S1>/Saturation' */
  if (Second_att_control_codeblock_B.M6 > 2000) {
 800b724:	4b09      	ldr	r3, [pc, #36]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b726:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800b72a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b72e:	d903      	bls.n	800b738 <Second_att_control_codeblock_step+0xb90>
    y = 2000U;
 800b730:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b734:	827b      	strh	r3, [r7, #18]
 800b736:	e015      	b.n	800b764 <Second_att_control_codeblock_step+0xbbc>
  } else if (Second_att_control_codeblock_B.M6 < 1000) {
 800b738:	4b04      	ldr	r3, [pc, #16]	; (800b74c <Second_att_control_codeblock_step+0xba4>)
 800b73a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800b73e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b742:	d20b      	bcs.n	800b75c <Second_att_control_codeblock_step+0xbb4>
    y = 1000U;
 800b744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b748:	827b      	strh	r3, [r7, #18]
 800b74a:	e00b      	b.n	800b764 <Second_att_control_codeblock_step+0xbbc>
 800b74c:	20000ac8 	.word	0x20000ac8
 800b750:	447a0000 	.word	0x447a0000
 800b754:	47800000 	.word	0x47800000
 800b758:	20000bf8 	.word	0x20000bf8
  } else {
    y = Second_att_control_codeblock_B.M6;
 800b75c:	4b62      	ldr	r3, [pc, #392]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b75e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800b762:	827b      	strh	r3, [r7, #18]
  }

  /* Outport: '<Root>/PWM_OUT' incorporates:
   *  Saturate: '<S1>/Saturation'
   */
  Second_att_control_codeblock_Y.PWM_OUT[5] = y;
 800b764:	4a61      	ldr	r2, [pc, #388]	; (800b8ec <Second_att_control_codeblock_step+0xd44>)
 800b766:	8a7b      	ldrh	r3, [r7, #18]
 800b768:	8153      	strh	r3, [r2, #10]
   *  Constant: '<S6>/Constant'
   *  Inport: '<Root>/Arm_cmd'
   *  RelationalOperator: '<S6>/Compare'
   */
  Second_att_control_codeblock_Y.ARMControl =
    (Second_att_control_codeblock_U.Arm_cmd >= 1500);
 800b76a:	4b61      	ldr	r3, [pc, #388]	; (800b8f0 <Second_att_control_codeblock_step+0xd48>)
 800b76c:	8b9b      	ldrh	r3, [r3, #28]
 800b76e:	f240 52db 	movw	r2, #1499	; 0x5db
 800b772:	4293      	cmp	r3, r2
 800b774:	bf8c      	ite	hi
 800b776:	2301      	movhi	r3, #1
 800b778:	2300      	movls	r3, #0
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	461a      	mov	r2, r3
  Second_att_control_codeblock_Y.ARMControl =
 800b77e:	4b5b      	ldr	r3, [pc, #364]	; (800b8ec <Second_att_control_codeblock_step+0xd44>)
 800b780:	731a      	strb	r2, [r3, #12]

  /* Gain: '<S40>/Integral Gain' */
  Second_att_control_codeblock_B.IntegralGain = Angle_rate_roll_PI_kI *
    Second_att_control_codeblock_B.Sum_f;
 800b782:	4b59      	ldr	r3, [pc, #356]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b784:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
  Second_att_control_codeblock_B.IntegralGain = Angle_rate_roll_PI_kI *
 800b788:	4b5a      	ldr	r3, [pc, #360]	; (800b8f4 <Second_att_control_codeblock_step+0xd4c>)
 800b78a:	edd3 7a00 	vldr	s15, [r3]
 800b78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b792:	4b55      	ldr	r3, [pc, #340]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b794:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4

  /* Gain: '<S88>/Integral Gain' */
  Second_att_control_codeblock_B.IntegralGain_f = Angle_rate_pitch_kI *
    Second_att_control_codeblock_B.Sum2;
 800b798:	4b53      	ldr	r3, [pc, #332]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b79a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
  Second_att_control_codeblock_B.IntegralGain_f = Angle_rate_pitch_kI *
 800b79e:	4b56      	ldr	r3, [pc, #344]	; (800b8f8 <Second_att_control_codeblock_step+0xd50>)
 800b7a0:	edd3 7a00 	vldr	s15, [r3]
 800b7a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7a8:	4b4f      	ldr	r3, [pc, #316]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b7aa:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8

  /* Gain: '<S186>/Integral Gain' */
  Second_att_control_codeblock_B.IntegralGain_d = kI_Roll_rate_PID *
    Second_att_control_codeblock_B.Sum_c;
 800b7ae:	4b4e      	ldr	r3, [pc, #312]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b7b0:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
  Second_att_control_codeblock_B.IntegralGain_d = kI_Roll_rate_PID *
 800b7b4:	4b51      	ldr	r3, [pc, #324]	; (800b8fc <Second_att_control_codeblock_step+0xd54>)
 800b7b6:	edd3 7a00 	vldr	s15, [r3]
 800b7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7be:	4b4a      	ldr	r3, [pc, #296]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b7c0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec

  /* Gain: '<S138>/Integral Gain' */
  Second_att_control_codeblock_B.IntegralGain_e = kI_Pitch_rate_PID *
    Second_att_control_codeblock_B.Sum1_h;
 800b7c4:	4b48      	ldr	r3, [pc, #288]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b7c6:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
  Second_att_control_codeblock_B.IntegralGain_e = kI_Pitch_rate_PID *
 800b7ca:	4b4d      	ldr	r3, [pc, #308]	; (800b900 <Second_att_control_codeblock_step+0xd58>)
 800b7cc:	edd3 7a00 	vldr	s15, [r3]
 800b7d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7d4:	4b44      	ldr	r3, [pc, #272]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b7d6:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0

  /* Gain: '<S235>/Integral Gain' */
  Second_att_control_codeblock_B.IntegralGain_h = kI_Yaw_rate_PID *
    Second_att_control_codeblock_B.Gain;
 800b7da:	4b43      	ldr	r3, [pc, #268]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b7dc:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
  Second_att_control_codeblock_B.IntegralGain_h = kI_Yaw_rate_PID *
 800b7e0:	4b48      	ldr	r3, [pc, #288]	; (800b904 <Second_att_control_codeblock_step+0xd5c>)
 800b7e2:	edd3 7a00 	vldr	s15, [r3]
 800b7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ea:	4b3f      	ldr	r3, [pc, #252]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b7ec:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4

  /* Update for DiscreteIntegrator: '<S43>/Integrator' */
  Second_att_control_codeblock_DW.Integrator_DSTATE += 0.01F *
 800b7f0:	4b45      	ldr	r3, [pc, #276]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b7f2:	ed93 7a04 	vldr	s14, [r3, #16]
    Second_att_control_codeblock_B.IntegralGain;
 800b7f6:	4b3c      	ldr	r3, [pc, #240]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b7f8:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
  Second_att_control_codeblock_DW.Integrator_DSTATE += 0.01F *
 800b7fc:	eddf 6a43 	vldr	s13, [pc, #268]	; 800b90c <Second_att_control_codeblock_step+0xd64>
 800b800:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b804:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b808:	4b3f      	ldr	r3, [pc, #252]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b80a:	edc3 7a04 	vstr	s15, [r3, #16]

  /* Update for DiscreteIntegrator: '<S189>/Integrator' */
  Second_att_control_codeblock_DW.Integrator_DSTATE_n += 0.01F *
 800b80e:	4b3e      	ldr	r3, [pc, #248]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b810:	ed93 7a05 	vldr	s14, [r3, #20]
    Second_att_control_codeblock_B.IntegralGain_d;
 800b814:	4b34      	ldr	r3, [pc, #208]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b816:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
  Second_att_control_codeblock_DW.Integrator_DSTATE_n += 0.01F *
 800b81a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800b90c <Second_att_control_codeblock_step+0xd64>
 800b81e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b822:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b826:	4b38      	ldr	r3, [pc, #224]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b828:	edc3 7a05 	vstr	s15, [r3, #20]

  /* Update for DiscreteIntegrator: '<S184>/Filter' */
  Second_att_control_codeblock_DW.Filter_DSTATE_n += 0.01F *
 800b82c:	4b36      	ldr	r3, [pc, #216]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b82e:	ed93 7a06 	vldr	s14, [r3, #24]
    Second_att_control_codeblock_B.FilterCoefficient_a;
 800b832:	4b2d      	ldr	r3, [pc, #180]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b834:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
  Second_att_control_codeblock_DW.Filter_DSTATE_n += 0.01F *
 800b838:	eddf 6a34 	vldr	s13, [pc, #208]	; 800b90c <Second_att_control_codeblock_step+0xd64>
 800b83c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b840:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b844:	4b30      	ldr	r3, [pc, #192]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b846:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Update for DiscreteIntegrator: '<S91>/Integrator' */
  Second_att_control_codeblock_DW.Integrator_DSTATE_l += 0.01F *
 800b84a:	4b2f      	ldr	r3, [pc, #188]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b84c:	ed93 7a07 	vldr	s14, [r3, #28]
    Second_att_control_codeblock_B.IntegralGain_f;
 800b850:	4b25      	ldr	r3, [pc, #148]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b852:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
  Second_att_control_codeblock_DW.Integrator_DSTATE_l += 0.01F *
 800b856:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800b90c <Second_att_control_codeblock_step+0xd64>
 800b85a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b85e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b862:	4b29      	ldr	r3, [pc, #164]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b864:	edc3 7a07 	vstr	s15, [r3, #28]

  /* Update for DiscreteIntegrator: '<S141>/Integrator' */
  Second_att_control_codeblock_DW.Integrator_DSTATE_d += 0.01F *
 800b868:	4b27      	ldr	r3, [pc, #156]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b86a:	ed93 7a08 	vldr	s14, [r3, #32]
    Second_att_control_codeblock_B.IntegralGain_e;
 800b86e:	4b1e      	ldr	r3, [pc, #120]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b870:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
  Second_att_control_codeblock_DW.Integrator_DSTATE_d += 0.01F *
 800b874:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b90c <Second_att_control_codeblock_step+0xd64>
 800b878:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b87c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b880:	4b21      	ldr	r3, [pc, #132]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b882:	edc3 7a08 	vstr	s15, [r3, #32]

  /* Update for DiscreteIntegrator: '<S136>/Filter' */
  Second_att_control_codeblock_DW.Filter_DSTATE += 0.01 *
 800b886:	4b20      	ldr	r3, [pc, #128]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b888:	e9d3 4500 	ldrd	r4, r5, [r3]
    Second_att_control_codeblock_B.FilterCoefficient;
 800b88c:	4b16      	ldr	r3, [pc, #88]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b88e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
  Second_att_control_codeblock_DW.Filter_DSTATE += 0.01 *
 800b892:	a313      	add	r3, pc, #76	; (adr r3, 800b8e0 <Second_att_control_codeblock_step+0xd38>)
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	f7f4 fe6e 	bl	8000578 <__aeabi_dmul>
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	f7f4 fcb2 	bl	800020c <__adddf3>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	4a16      	ldr	r2, [pc, #88]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b8ae:	e9c2 3400 	strd	r3, r4, [r2]

  /* Update for DiscreteIntegrator: '<S238>/Integrator' */
  Second_att_control_codeblock_DW.Integrator_DSTATE_j += 0.01F *
 800b8b2:	4b15      	ldr	r3, [pc, #84]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b8b4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    Second_att_control_codeblock_B.IntegralGain_h;
 800b8b8:	4b0b      	ldr	r3, [pc, #44]	; (800b8e8 <Second_att_control_codeblock_step+0xd40>)
 800b8ba:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
  Second_att_control_codeblock_DW.Integrator_DSTATE_j += 0.01F *
 800b8be:	eddf 6a13 	vldr	s13, [pc, #76]	; 800b90c <Second_att_control_codeblock_step+0xd64>
 800b8c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b8c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8ca:	4b0f      	ldr	r3, [pc, #60]	; (800b908 <Second_att_control_codeblock_step+0xd60>)
 800b8cc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800b8d0:	bf00      	nop
 800b8d2:	3718      	adds	r7, #24
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	ecbd 8b02 	vpop	{d8}
 800b8da:	bdb0      	pop	{r4, r5, r7, pc}
 800b8dc:	f3af 8000 	nop.w
 800b8e0:	47ae147b 	.word	0x47ae147b
 800b8e4:	3f847ae1 	.word	0x3f847ae1
 800b8e8:	20000ac8 	.word	0x20000ac8
 800b8ec:	20000bf8 	.word	0x20000bf8
 800b8f0:	20000c08 	.word	0x20000c08
 800b8f4:	20000048 	.word	0x20000048
 800b8f8:	20000040 	.word	0x20000040
 800b8fc:	20000054 	.word	0x20000054
 800b900:	20000050 	.word	0x20000050
 800b904:	20000058 	.word	0x20000058
 800b908:	20000bd0 	.word	0x20000bd0
 800b90c:	3c23d70a 	.word	0x3c23d70a

0800b910 <ceil>:
 800b910:	ec51 0b10 	vmov	r0, r1, d0
 800b914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b918:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b91c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b920:	2e13      	cmp	r6, #19
 800b922:	460c      	mov	r4, r1
 800b924:	ee10 5a10 	vmov	r5, s0
 800b928:	4680      	mov	r8, r0
 800b92a:	dc30      	bgt.n	800b98e <ceil+0x7e>
 800b92c:	2e00      	cmp	r6, #0
 800b92e:	da12      	bge.n	800b956 <ceil+0x46>
 800b930:	a333      	add	r3, pc, #204	; (adr r3, 800ba00 <ceil+0xf0>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	f7f4 fc69 	bl	800020c <__adddf3>
 800b93a:	2200      	movs	r2, #0
 800b93c:	2300      	movs	r3, #0
 800b93e:	f7f5 f8ab 	bl	8000a98 <__aeabi_dcmpgt>
 800b942:	b128      	cbz	r0, 800b950 <ceil+0x40>
 800b944:	2c00      	cmp	r4, #0
 800b946:	db55      	blt.n	800b9f4 <ceil+0xe4>
 800b948:	432c      	orrs	r4, r5
 800b94a:	d057      	beq.n	800b9fc <ceil+0xec>
 800b94c:	4c2e      	ldr	r4, [pc, #184]	; (800ba08 <ceil+0xf8>)
 800b94e:	2500      	movs	r5, #0
 800b950:	4621      	mov	r1, r4
 800b952:	4628      	mov	r0, r5
 800b954:	e025      	b.n	800b9a2 <ceil+0x92>
 800b956:	4f2d      	ldr	r7, [pc, #180]	; (800ba0c <ceil+0xfc>)
 800b958:	4137      	asrs	r7, r6
 800b95a:	ea01 0307 	and.w	r3, r1, r7
 800b95e:	4303      	orrs	r3, r0
 800b960:	d01f      	beq.n	800b9a2 <ceil+0x92>
 800b962:	a327      	add	r3, pc, #156	; (adr r3, 800ba00 <ceil+0xf0>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 fc50 	bl	800020c <__adddf3>
 800b96c:	2200      	movs	r2, #0
 800b96e:	2300      	movs	r3, #0
 800b970:	f7f5 f892 	bl	8000a98 <__aeabi_dcmpgt>
 800b974:	2800      	cmp	r0, #0
 800b976:	d0eb      	beq.n	800b950 <ceil+0x40>
 800b978:	2c00      	cmp	r4, #0
 800b97a:	bfc2      	ittt	gt
 800b97c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800b980:	fa43 f606 	asrgt.w	r6, r3, r6
 800b984:	19a4      	addgt	r4, r4, r6
 800b986:	ea24 0407 	bic.w	r4, r4, r7
 800b98a:	2500      	movs	r5, #0
 800b98c:	e7e0      	b.n	800b950 <ceil+0x40>
 800b98e:	2e33      	cmp	r6, #51	; 0x33
 800b990:	dd0b      	ble.n	800b9aa <ceil+0x9a>
 800b992:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b996:	d104      	bne.n	800b9a2 <ceil+0x92>
 800b998:	ee10 2a10 	vmov	r2, s0
 800b99c:	460b      	mov	r3, r1
 800b99e:	f7f4 fc35 	bl	800020c <__adddf3>
 800b9a2:	ec41 0b10 	vmov	d0, r0, r1
 800b9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9aa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b2:	fa23 f707 	lsr.w	r7, r3, r7
 800b9b6:	4207      	tst	r7, r0
 800b9b8:	d0f3      	beq.n	800b9a2 <ceil+0x92>
 800b9ba:	a311      	add	r3, pc, #68	; (adr r3, 800ba00 <ceil+0xf0>)
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	f7f4 fc24 	bl	800020c <__adddf3>
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f7f5 f866 	bl	8000a98 <__aeabi_dcmpgt>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d0bf      	beq.n	800b950 <ceil+0x40>
 800b9d0:	2c00      	cmp	r4, #0
 800b9d2:	dd02      	ble.n	800b9da <ceil+0xca>
 800b9d4:	2e14      	cmp	r6, #20
 800b9d6:	d103      	bne.n	800b9e0 <ceil+0xd0>
 800b9d8:	3401      	adds	r4, #1
 800b9da:	ea25 0507 	bic.w	r5, r5, r7
 800b9de:	e7b7      	b.n	800b950 <ceil+0x40>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b9e6:	fa03 f606 	lsl.w	r6, r3, r6
 800b9ea:	4435      	add	r5, r6
 800b9ec:	4545      	cmp	r5, r8
 800b9ee:	bf38      	it	cc
 800b9f0:	18e4      	addcc	r4, r4, r3
 800b9f2:	e7f2      	b.n	800b9da <ceil+0xca>
 800b9f4:	2500      	movs	r5, #0
 800b9f6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b9fa:	e7a9      	b.n	800b950 <ceil+0x40>
 800b9fc:	4625      	mov	r5, r4
 800b9fe:	e7a7      	b.n	800b950 <ceil+0x40>
 800ba00:	8800759c 	.word	0x8800759c
 800ba04:	7e37e43c 	.word	0x7e37e43c
 800ba08:	3ff00000 	.word	0x3ff00000
 800ba0c:	000fffff 	.word	0x000fffff

0800ba10 <floor>:
 800ba10:	ec51 0b10 	vmov	r0, r1, d0
 800ba14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ba1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ba20:	2e13      	cmp	r6, #19
 800ba22:	460c      	mov	r4, r1
 800ba24:	ee10 5a10 	vmov	r5, s0
 800ba28:	4680      	mov	r8, r0
 800ba2a:	dc34      	bgt.n	800ba96 <floor+0x86>
 800ba2c:	2e00      	cmp	r6, #0
 800ba2e:	da16      	bge.n	800ba5e <floor+0x4e>
 800ba30:	a335      	add	r3, pc, #212	; (adr r3, 800bb08 <floor+0xf8>)
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	f7f4 fbe9 	bl	800020c <__adddf3>
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f7f5 f82b 	bl	8000a98 <__aeabi_dcmpgt>
 800ba42:	b148      	cbz	r0, 800ba58 <floor+0x48>
 800ba44:	2c00      	cmp	r4, #0
 800ba46:	da59      	bge.n	800bafc <floor+0xec>
 800ba48:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ba4c:	4a30      	ldr	r2, [pc, #192]	; (800bb10 <floor+0x100>)
 800ba4e:	432b      	orrs	r3, r5
 800ba50:	2500      	movs	r5, #0
 800ba52:	42ab      	cmp	r3, r5
 800ba54:	bf18      	it	ne
 800ba56:	4614      	movne	r4, r2
 800ba58:	4621      	mov	r1, r4
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	e025      	b.n	800baaa <floor+0x9a>
 800ba5e:	4f2d      	ldr	r7, [pc, #180]	; (800bb14 <floor+0x104>)
 800ba60:	4137      	asrs	r7, r6
 800ba62:	ea01 0307 	and.w	r3, r1, r7
 800ba66:	4303      	orrs	r3, r0
 800ba68:	d01f      	beq.n	800baaa <floor+0x9a>
 800ba6a:	a327      	add	r3, pc, #156	; (adr r3, 800bb08 <floor+0xf8>)
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	f7f4 fbcc 	bl	800020c <__adddf3>
 800ba74:	2200      	movs	r2, #0
 800ba76:	2300      	movs	r3, #0
 800ba78:	f7f5 f80e 	bl	8000a98 <__aeabi_dcmpgt>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d0eb      	beq.n	800ba58 <floor+0x48>
 800ba80:	2c00      	cmp	r4, #0
 800ba82:	bfbe      	ittt	lt
 800ba84:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ba88:	fa43 f606 	asrlt.w	r6, r3, r6
 800ba8c:	19a4      	addlt	r4, r4, r6
 800ba8e:	ea24 0407 	bic.w	r4, r4, r7
 800ba92:	2500      	movs	r5, #0
 800ba94:	e7e0      	b.n	800ba58 <floor+0x48>
 800ba96:	2e33      	cmp	r6, #51	; 0x33
 800ba98:	dd0b      	ble.n	800bab2 <floor+0xa2>
 800ba9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ba9e:	d104      	bne.n	800baaa <floor+0x9a>
 800baa0:	ee10 2a10 	vmov	r2, s0
 800baa4:	460b      	mov	r3, r1
 800baa6:	f7f4 fbb1 	bl	800020c <__adddf3>
 800baaa:	ec41 0b10 	vmov	d0, r0, r1
 800baae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bab6:	f04f 33ff 	mov.w	r3, #4294967295
 800baba:	fa23 f707 	lsr.w	r7, r3, r7
 800babe:	4207      	tst	r7, r0
 800bac0:	d0f3      	beq.n	800baaa <floor+0x9a>
 800bac2:	a311      	add	r3, pc, #68	; (adr r3, 800bb08 <floor+0xf8>)
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	f7f4 fba0 	bl	800020c <__adddf3>
 800bacc:	2200      	movs	r2, #0
 800bace:	2300      	movs	r3, #0
 800bad0:	f7f4 ffe2 	bl	8000a98 <__aeabi_dcmpgt>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d0bf      	beq.n	800ba58 <floor+0x48>
 800bad8:	2c00      	cmp	r4, #0
 800bada:	da02      	bge.n	800bae2 <floor+0xd2>
 800badc:	2e14      	cmp	r6, #20
 800bade:	d103      	bne.n	800bae8 <floor+0xd8>
 800bae0:	3401      	adds	r4, #1
 800bae2:	ea25 0507 	bic.w	r5, r5, r7
 800bae6:	e7b7      	b.n	800ba58 <floor+0x48>
 800bae8:	2301      	movs	r3, #1
 800baea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800baee:	fa03 f606 	lsl.w	r6, r3, r6
 800baf2:	4435      	add	r5, r6
 800baf4:	4545      	cmp	r5, r8
 800baf6:	bf38      	it	cc
 800baf8:	18e4      	addcc	r4, r4, r3
 800bafa:	e7f2      	b.n	800bae2 <floor+0xd2>
 800bafc:	2500      	movs	r5, #0
 800bafe:	462c      	mov	r4, r5
 800bb00:	e7aa      	b.n	800ba58 <floor+0x48>
 800bb02:	bf00      	nop
 800bb04:	f3af 8000 	nop.w
 800bb08:	8800759c 	.word	0x8800759c
 800bb0c:	7e37e43c 	.word	0x7e37e43c
 800bb10:	bff00000 	.word	0xbff00000
 800bb14:	000fffff 	.word	0x000fffff

0800bb18 <asin>:
 800bb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb1a:	ed2d 8b02 	vpush	{d8}
 800bb1e:	4e26      	ldr	r6, [pc, #152]	; (800bbb8 <asin+0xa0>)
 800bb20:	b08b      	sub	sp, #44	; 0x2c
 800bb22:	ec55 4b10 	vmov	r4, r5, d0
 800bb26:	f000 f853 	bl	800bbd0 <__ieee754_asin>
 800bb2a:	f996 3000 	ldrsb.w	r3, [r6]
 800bb2e:	eeb0 8a40 	vmov.f32	s16, s0
 800bb32:	eef0 8a60 	vmov.f32	s17, s1
 800bb36:	3301      	adds	r3, #1
 800bb38:	d036      	beq.n	800bba8 <asin+0x90>
 800bb3a:	4622      	mov	r2, r4
 800bb3c:	462b      	mov	r3, r5
 800bb3e:	4620      	mov	r0, r4
 800bb40:	4629      	mov	r1, r5
 800bb42:	f7f4 ffb3 	bl	8000aac <__aeabi_dcmpun>
 800bb46:	4607      	mov	r7, r0
 800bb48:	bb70      	cbnz	r0, 800bba8 <asin+0x90>
 800bb4a:	ec45 4b10 	vmov	d0, r4, r5
 800bb4e:	f000 fd7f 	bl	800c650 <fabs>
 800bb52:	2200      	movs	r2, #0
 800bb54:	4b19      	ldr	r3, [pc, #100]	; (800bbbc <asin+0xa4>)
 800bb56:	ec51 0b10 	vmov	r0, r1, d0
 800bb5a:	f7f4 ff9d 	bl	8000a98 <__aeabi_dcmpgt>
 800bb5e:	b318      	cbz	r0, 800bba8 <asin+0x90>
 800bb60:	2301      	movs	r3, #1
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	4816      	ldr	r0, [pc, #88]	; (800bbc0 <asin+0xa8>)
 800bb66:	4b17      	ldr	r3, [pc, #92]	; (800bbc4 <asin+0xac>)
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	9708      	str	r7, [sp, #32]
 800bb6c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800bb70:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bb74:	f000 fd78 	bl	800c668 <nan>
 800bb78:	f996 3000 	ldrsb.w	r3, [r6]
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800bb82:	d104      	bne.n	800bb8e <asin+0x76>
 800bb84:	f000 fd78 	bl	800c678 <__errno>
 800bb88:	2321      	movs	r3, #33	; 0x21
 800bb8a:	6003      	str	r3, [r0, #0]
 800bb8c:	e004      	b.n	800bb98 <asin+0x80>
 800bb8e:	4668      	mov	r0, sp
 800bb90:	f000 fd67 	bl	800c662 <matherr>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d0f5      	beq.n	800bb84 <asin+0x6c>
 800bb98:	9b08      	ldr	r3, [sp, #32]
 800bb9a:	b11b      	cbz	r3, 800bba4 <asin+0x8c>
 800bb9c:	f000 fd6c 	bl	800c678 <__errno>
 800bba0:	9b08      	ldr	r3, [sp, #32]
 800bba2:	6003      	str	r3, [r0, #0]
 800bba4:	ed9d 8b06 	vldr	d8, [sp, #24]
 800bba8:	eeb0 0a48 	vmov.f32	s0, s16
 800bbac:	eef0 0a68 	vmov.f32	s1, s17
 800bbb0:	b00b      	add	sp, #44	; 0x2c
 800bbb2:	ecbd 8b02 	vpop	{d8}
 800bbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb8:	20000068 	.word	0x20000068
 800bbbc:	3ff00000 	.word	0x3ff00000
 800bbc0:	0800ed0d 	.word	0x0800ed0d
 800bbc4:	0800eb34 	.word	0x0800eb34

0800bbc8 <atan2>:
 800bbc8:	f000 ba12 	b.w	800bff0 <__ieee754_atan2>
 800bbcc:	0000      	movs	r0, r0
	...

0800bbd0 <__ieee754_asin>:
 800bbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	ec55 4b10 	vmov	r4, r5, d0
 800bbd8:	4bcb      	ldr	r3, [pc, #812]	; (800bf08 <__ieee754_asin+0x338>)
 800bbda:	b087      	sub	sp, #28
 800bbdc:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800bbe0:	429f      	cmp	r7, r3
 800bbe2:	9501      	str	r5, [sp, #4]
 800bbe4:	dd31      	ble.n	800bc4a <__ieee754_asin+0x7a>
 800bbe6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800bbea:	ee10 3a10 	vmov	r3, s0
 800bbee:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800bbf2:	433b      	orrs	r3, r7
 800bbf4:	d117      	bne.n	800bc26 <__ieee754_asin+0x56>
 800bbf6:	a3aa      	add	r3, pc, #680	; (adr r3, 800bea0 <__ieee754_asin+0x2d0>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	ee10 0a10 	vmov	r0, s0
 800bc00:	4629      	mov	r1, r5
 800bc02:	f7f4 fcb9 	bl	8000578 <__aeabi_dmul>
 800bc06:	a3a8      	add	r3, pc, #672	; (adr r3, 800bea8 <__ieee754_asin+0x2d8>)
 800bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	460f      	mov	r7, r1
 800bc10:	4620      	mov	r0, r4
 800bc12:	4629      	mov	r1, r5
 800bc14:	f7f4 fcb0 	bl	8000578 <__aeabi_dmul>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	4639      	mov	r1, r7
 800bc20:	f7f4 faf4 	bl	800020c <__adddf3>
 800bc24:	e00a      	b.n	800bc3c <__ieee754_asin+0x6c>
 800bc26:	ee10 2a10 	vmov	r2, s0
 800bc2a:	462b      	mov	r3, r5
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	4629      	mov	r1, r5
 800bc30:	f7f4 faea 	bl	8000208 <__aeabi_dsub>
 800bc34:	4602      	mov	r2, r0
 800bc36:	460b      	mov	r3, r1
 800bc38:	f7f4 fdc8 	bl	80007cc <__aeabi_ddiv>
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	460d      	mov	r5, r1
 800bc40:	ec45 4b10 	vmov	d0, r4, r5
 800bc44:	b007      	add	sp, #28
 800bc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4a:	4bb0      	ldr	r3, [pc, #704]	; (800bf0c <__ieee754_asin+0x33c>)
 800bc4c:	429f      	cmp	r7, r3
 800bc4e:	dc11      	bgt.n	800bc74 <__ieee754_asin+0xa4>
 800bc50:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800bc54:	f280 80ae 	bge.w	800bdb4 <__ieee754_asin+0x1e4>
 800bc58:	a395      	add	r3, pc, #596	; (adr r3, 800beb0 <__ieee754_asin+0x2e0>)
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	ee10 0a10 	vmov	r0, s0
 800bc62:	4629      	mov	r1, r5
 800bc64:	f7f4 fad2 	bl	800020c <__adddf3>
 800bc68:	2200      	movs	r2, #0
 800bc6a:	4ba9      	ldr	r3, [pc, #676]	; (800bf10 <__ieee754_asin+0x340>)
 800bc6c:	f7f4 ff14 	bl	8000a98 <__aeabi_dcmpgt>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	d1e5      	bne.n	800bc40 <__ieee754_asin+0x70>
 800bc74:	ec45 4b10 	vmov	d0, r4, r5
 800bc78:	f000 fcea 	bl	800c650 <fabs>
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	ec53 2b10 	vmov	r2, r3, d0
 800bc82:	49a3      	ldr	r1, [pc, #652]	; (800bf10 <__ieee754_asin+0x340>)
 800bc84:	f7f4 fac0 	bl	8000208 <__aeabi_dsub>
 800bc88:	2200      	movs	r2, #0
 800bc8a:	4ba2      	ldr	r3, [pc, #648]	; (800bf14 <__ieee754_asin+0x344>)
 800bc8c:	f7f4 fc74 	bl	8000578 <__aeabi_dmul>
 800bc90:	a389      	add	r3, pc, #548	; (adr r3, 800beb8 <__ieee754_asin+0x2e8>)
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	4604      	mov	r4, r0
 800bc98:	460d      	mov	r5, r1
 800bc9a:	f7f4 fc6d 	bl	8000578 <__aeabi_dmul>
 800bc9e:	a388      	add	r3, pc, #544	; (adr r3, 800bec0 <__ieee754_asin+0x2f0>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	f7f4 fab2 	bl	800020c <__adddf3>
 800bca8:	4622      	mov	r2, r4
 800bcaa:	462b      	mov	r3, r5
 800bcac:	f7f4 fc64 	bl	8000578 <__aeabi_dmul>
 800bcb0:	a385      	add	r3, pc, #532	; (adr r3, 800bec8 <__ieee754_asin+0x2f8>)
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	f7f4 faa7 	bl	8000208 <__aeabi_dsub>
 800bcba:	4622      	mov	r2, r4
 800bcbc:	462b      	mov	r3, r5
 800bcbe:	f7f4 fc5b 	bl	8000578 <__aeabi_dmul>
 800bcc2:	a383      	add	r3, pc, #524	; (adr r3, 800bed0 <__ieee754_asin+0x300>)
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	f7f4 faa0 	bl	800020c <__adddf3>
 800bccc:	4622      	mov	r2, r4
 800bcce:	462b      	mov	r3, r5
 800bcd0:	f7f4 fc52 	bl	8000578 <__aeabi_dmul>
 800bcd4:	a380      	add	r3, pc, #512	; (adr r3, 800bed8 <__ieee754_asin+0x308>)
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	f7f4 fa95 	bl	8000208 <__aeabi_dsub>
 800bcde:	4622      	mov	r2, r4
 800bce0:	462b      	mov	r3, r5
 800bce2:	f7f4 fc49 	bl	8000578 <__aeabi_dmul>
 800bce6:	a37e      	add	r3, pc, #504	; (adr r3, 800bee0 <__ieee754_asin+0x310>)
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	f7f4 fa8e 	bl	800020c <__adddf3>
 800bcf0:	4622      	mov	r2, r4
 800bcf2:	462b      	mov	r3, r5
 800bcf4:	f7f4 fc40 	bl	8000578 <__aeabi_dmul>
 800bcf8:	a37b      	add	r3, pc, #492	; (adr r3, 800bee8 <__ieee754_asin+0x318>)
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	4680      	mov	r8, r0
 800bd00:	4689      	mov	r9, r1
 800bd02:	4620      	mov	r0, r4
 800bd04:	4629      	mov	r1, r5
 800bd06:	f7f4 fc37 	bl	8000578 <__aeabi_dmul>
 800bd0a:	a379      	add	r3, pc, #484	; (adr r3, 800bef0 <__ieee754_asin+0x320>)
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	f7f4 fa7a 	bl	8000208 <__aeabi_dsub>
 800bd14:	4622      	mov	r2, r4
 800bd16:	462b      	mov	r3, r5
 800bd18:	f7f4 fc2e 	bl	8000578 <__aeabi_dmul>
 800bd1c:	a376      	add	r3, pc, #472	; (adr r3, 800bef8 <__ieee754_asin+0x328>)
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	f7f4 fa73 	bl	800020c <__adddf3>
 800bd26:	4622      	mov	r2, r4
 800bd28:	462b      	mov	r3, r5
 800bd2a:	f7f4 fc25 	bl	8000578 <__aeabi_dmul>
 800bd2e:	a374      	add	r3, pc, #464	; (adr r3, 800bf00 <__ieee754_asin+0x330>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	f7f4 fa68 	bl	8000208 <__aeabi_dsub>
 800bd38:	4622      	mov	r2, r4
 800bd3a:	462b      	mov	r3, r5
 800bd3c:	f7f4 fc1c 	bl	8000578 <__aeabi_dmul>
 800bd40:	4b73      	ldr	r3, [pc, #460]	; (800bf10 <__ieee754_asin+0x340>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	f7f4 fa62 	bl	800020c <__adddf3>
 800bd48:	ec45 4b10 	vmov	d0, r4, r5
 800bd4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd50:	f000 fa2c 	bl	800c1ac <__ieee754_sqrt>
 800bd54:	4b70      	ldr	r3, [pc, #448]	; (800bf18 <__ieee754_asin+0x348>)
 800bd56:	429f      	cmp	r7, r3
 800bd58:	ec5b ab10 	vmov	sl, fp, d0
 800bd5c:	f340 80de 	ble.w	800bf1c <__ieee754_asin+0x34c>
 800bd60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd64:	4640      	mov	r0, r8
 800bd66:	4649      	mov	r1, r9
 800bd68:	f7f4 fd30 	bl	80007cc <__aeabi_ddiv>
 800bd6c:	4652      	mov	r2, sl
 800bd6e:	465b      	mov	r3, fp
 800bd70:	f7f4 fc02 	bl	8000578 <__aeabi_dmul>
 800bd74:	4652      	mov	r2, sl
 800bd76:	465b      	mov	r3, fp
 800bd78:	f7f4 fa48 	bl	800020c <__adddf3>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	460b      	mov	r3, r1
 800bd80:	f7f4 fa44 	bl	800020c <__adddf3>
 800bd84:	a348      	add	r3, pc, #288	; (adr r3, 800bea8 <__ieee754_asin+0x2d8>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	f7f4 fa3d 	bl	8000208 <__aeabi_dsub>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	a143      	add	r1, pc, #268	; (adr r1, 800bea0 <__ieee754_asin+0x2d0>)
 800bd94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd98:	f7f4 fa36 	bl	8000208 <__aeabi_dsub>
 800bd9c:	9b01      	ldr	r3, [sp, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	bfdc      	itt	le
 800bda2:	4602      	movle	r2, r0
 800bda4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800bda8:	4604      	mov	r4, r0
 800bdaa:	460d      	mov	r5, r1
 800bdac:	bfdc      	itt	le
 800bdae:	4614      	movle	r4, r2
 800bdb0:	461d      	movle	r5, r3
 800bdb2:	e745      	b.n	800bc40 <__ieee754_asin+0x70>
 800bdb4:	ee10 2a10 	vmov	r2, s0
 800bdb8:	ee10 0a10 	vmov	r0, s0
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	4629      	mov	r1, r5
 800bdc0:	f7f4 fbda 	bl	8000578 <__aeabi_dmul>
 800bdc4:	a33c      	add	r3, pc, #240	; (adr r3, 800beb8 <__ieee754_asin+0x2e8>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	4606      	mov	r6, r0
 800bdcc:	460f      	mov	r7, r1
 800bdce:	f7f4 fbd3 	bl	8000578 <__aeabi_dmul>
 800bdd2:	a33b      	add	r3, pc, #236	; (adr r3, 800bec0 <__ieee754_asin+0x2f0>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 fa18 	bl	800020c <__adddf3>
 800bddc:	4632      	mov	r2, r6
 800bdde:	463b      	mov	r3, r7
 800bde0:	f7f4 fbca 	bl	8000578 <__aeabi_dmul>
 800bde4:	a338      	add	r3, pc, #224	; (adr r3, 800bec8 <__ieee754_asin+0x2f8>)
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	f7f4 fa0d 	bl	8000208 <__aeabi_dsub>
 800bdee:	4632      	mov	r2, r6
 800bdf0:	463b      	mov	r3, r7
 800bdf2:	f7f4 fbc1 	bl	8000578 <__aeabi_dmul>
 800bdf6:	a336      	add	r3, pc, #216	; (adr r3, 800bed0 <__ieee754_asin+0x300>)
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f7f4 fa06 	bl	800020c <__adddf3>
 800be00:	4632      	mov	r2, r6
 800be02:	463b      	mov	r3, r7
 800be04:	f7f4 fbb8 	bl	8000578 <__aeabi_dmul>
 800be08:	a333      	add	r3, pc, #204	; (adr r3, 800bed8 <__ieee754_asin+0x308>)
 800be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0e:	f7f4 f9fb 	bl	8000208 <__aeabi_dsub>
 800be12:	4632      	mov	r2, r6
 800be14:	463b      	mov	r3, r7
 800be16:	f7f4 fbaf 	bl	8000578 <__aeabi_dmul>
 800be1a:	a331      	add	r3, pc, #196	; (adr r3, 800bee0 <__ieee754_asin+0x310>)
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f7f4 f9f4 	bl	800020c <__adddf3>
 800be24:	4632      	mov	r2, r6
 800be26:	463b      	mov	r3, r7
 800be28:	f7f4 fba6 	bl	8000578 <__aeabi_dmul>
 800be2c:	a32e      	add	r3, pc, #184	; (adr r3, 800bee8 <__ieee754_asin+0x318>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	4680      	mov	r8, r0
 800be34:	4689      	mov	r9, r1
 800be36:	4630      	mov	r0, r6
 800be38:	4639      	mov	r1, r7
 800be3a:	f7f4 fb9d 	bl	8000578 <__aeabi_dmul>
 800be3e:	a32c      	add	r3, pc, #176	; (adr r3, 800bef0 <__ieee754_asin+0x320>)
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	f7f4 f9e0 	bl	8000208 <__aeabi_dsub>
 800be48:	4632      	mov	r2, r6
 800be4a:	463b      	mov	r3, r7
 800be4c:	f7f4 fb94 	bl	8000578 <__aeabi_dmul>
 800be50:	a329      	add	r3, pc, #164	; (adr r3, 800bef8 <__ieee754_asin+0x328>)
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f7f4 f9d9 	bl	800020c <__adddf3>
 800be5a:	4632      	mov	r2, r6
 800be5c:	463b      	mov	r3, r7
 800be5e:	f7f4 fb8b 	bl	8000578 <__aeabi_dmul>
 800be62:	a327      	add	r3, pc, #156	; (adr r3, 800bf00 <__ieee754_asin+0x330>)
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	f7f4 f9ce 	bl	8000208 <__aeabi_dsub>
 800be6c:	4632      	mov	r2, r6
 800be6e:	463b      	mov	r3, r7
 800be70:	f7f4 fb82 	bl	8000578 <__aeabi_dmul>
 800be74:	2200      	movs	r2, #0
 800be76:	4b26      	ldr	r3, [pc, #152]	; (800bf10 <__ieee754_asin+0x340>)
 800be78:	f7f4 f9c8 	bl	800020c <__adddf3>
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	4640      	mov	r0, r8
 800be82:	4649      	mov	r1, r9
 800be84:	f7f4 fca2 	bl	80007cc <__aeabi_ddiv>
 800be88:	4622      	mov	r2, r4
 800be8a:	462b      	mov	r3, r5
 800be8c:	f7f4 fb74 	bl	8000578 <__aeabi_dmul>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	4620      	mov	r0, r4
 800be96:	4629      	mov	r1, r5
 800be98:	e6c2      	b.n	800bc20 <__ieee754_asin+0x50>
 800be9a:	bf00      	nop
 800be9c:	f3af 8000 	nop.w
 800bea0:	54442d18 	.word	0x54442d18
 800bea4:	3ff921fb 	.word	0x3ff921fb
 800bea8:	33145c07 	.word	0x33145c07
 800beac:	3c91a626 	.word	0x3c91a626
 800beb0:	8800759c 	.word	0x8800759c
 800beb4:	7e37e43c 	.word	0x7e37e43c
 800beb8:	0dfdf709 	.word	0x0dfdf709
 800bebc:	3f023de1 	.word	0x3f023de1
 800bec0:	7501b288 	.word	0x7501b288
 800bec4:	3f49efe0 	.word	0x3f49efe0
 800bec8:	b5688f3b 	.word	0xb5688f3b
 800becc:	3fa48228 	.word	0x3fa48228
 800bed0:	0e884455 	.word	0x0e884455
 800bed4:	3fc9c155 	.word	0x3fc9c155
 800bed8:	03eb6f7d 	.word	0x03eb6f7d
 800bedc:	3fd4d612 	.word	0x3fd4d612
 800bee0:	55555555 	.word	0x55555555
 800bee4:	3fc55555 	.word	0x3fc55555
 800bee8:	b12e9282 	.word	0xb12e9282
 800beec:	3fb3b8c5 	.word	0x3fb3b8c5
 800bef0:	1b8d0159 	.word	0x1b8d0159
 800bef4:	3fe6066c 	.word	0x3fe6066c
 800bef8:	9c598ac8 	.word	0x9c598ac8
 800befc:	40002ae5 	.word	0x40002ae5
 800bf00:	1c8a2d4b 	.word	0x1c8a2d4b
 800bf04:	40033a27 	.word	0x40033a27
 800bf08:	3fefffff 	.word	0x3fefffff
 800bf0c:	3fdfffff 	.word	0x3fdfffff
 800bf10:	3ff00000 	.word	0x3ff00000
 800bf14:	3fe00000 	.word	0x3fe00000
 800bf18:	3fef3332 	.word	0x3fef3332
 800bf1c:	ee10 2a10 	vmov	r2, s0
 800bf20:	ee10 0a10 	vmov	r0, s0
 800bf24:	465b      	mov	r3, fp
 800bf26:	4659      	mov	r1, fp
 800bf28:	f7f4 f970 	bl	800020c <__adddf3>
 800bf2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf34:	4640      	mov	r0, r8
 800bf36:	4649      	mov	r1, r9
 800bf38:	f7f4 fc48 	bl	80007cc <__aeabi_ddiv>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf44:	f7f4 fb18 	bl	8000578 <__aeabi_dmul>
 800bf48:	2600      	movs	r6, #0
 800bf4a:	4680      	mov	r8, r0
 800bf4c:	4689      	mov	r9, r1
 800bf4e:	4632      	mov	r2, r6
 800bf50:	465b      	mov	r3, fp
 800bf52:	4630      	mov	r0, r6
 800bf54:	4659      	mov	r1, fp
 800bf56:	f7f4 fb0f 	bl	8000578 <__aeabi_dmul>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4620      	mov	r0, r4
 800bf60:	4629      	mov	r1, r5
 800bf62:	f7f4 f951 	bl	8000208 <__aeabi_dsub>
 800bf66:	4632      	mov	r2, r6
 800bf68:	4604      	mov	r4, r0
 800bf6a:	460d      	mov	r5, r1
 800bf6c:	465b      	mov	r3, fp
 800bf6e:	4650      	mov	r0, sl
 800bf70:	4659      	mov	r1, fp
 800bf72:	f7f4 f94b 	bl	800020c <__adddf3>
 800bf76:	4602      	mov	r2, r0
 800bf78:	460b      	mov	r3, r1
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	f7f4 fc25 	bl	80007cc <__aeabi_ddiv>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	f7f4 f941 	bl	800020c <__adddf3>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	a114      	add	r1, pc, #80	; (adr r1, 800bfe0 <__ieee754_asin+0x410>)
 800bf90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf94:	f7f4 f938 	bl	8000208 <__aeabi_dsub>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4640      	mov	r0, r8
 800bf9e:	4649      	mov	r1, r9
 800bfa0:	f7f4 f932 	bl	8000208 <__aeabi_dsub>
 800bfa4:	465f      	mov	r7, fp
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	460d      	mov	r5, r1
 800bfaa:	4632      	mov	r2, r6
 800bfac:	465b      	mov	r3, fp
 800bfae:	4630      	mov	r0, r6
 800bfb0:	4639      	mov	r1, r7
 800bfb2:	f7f4 f92b 	bl	800020c <__adddf3>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	a10b      	add	r1, pc, #44	; (adr r1, 800bfe8 <__ieee754_asin+0x418>)
 800bfbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfc0:	f7f4 f922 	bl	8000208 <__aeabi_dsub>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4620      	mov	r0, r4
 800bfca:	4629      	mov	r1, r5
 800bfcc:	f7f4 f91c 	bl	8000208 <__aeabi_dsub>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	a104      	add	r1, pc, #16	; (adr r1, 800bfe8 <__ieee754_asin+0x418>)
 800bfd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfda:	e6dd      	b.n	800bd98 <__ieee754_asin+0x1c8>
 800bfdc:	f3af 8000 	nop.w
 800bfe0:	33145c07 	.word	0x33145c07
 800bfe4:	3c91a626 	.word	0x3c91a626
 800bfe8:	54442d18 	.word	0x54442d18
 800bfec:	3fe921fb 	.word	0x3fe921fb

0800bff0 <__ieee754_atan2>:
 800bff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bff4:	ec57 6b11 	vmov	r6, r7, d1
 800bff8:	4273      	negs	r3, r6
 800bffa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bffe:	4333      	orrs	r3, r6
 800c000:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800c1a8 <__ieee754_atan2+0x1b8>
 800c004:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c008:	4573      	cmp	r3, lr
 800c00a:	ec51 0b10 	vmov	r0, r1, d0
 800c00e:	ee11 8a10 	vmov	r8, s2
 800c012:	d80a      	bhi.n	800c02a <__ieee754_atan2+0x3a>
 800c014:	4244      	negs	r4, r0
 800c016:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c01a:	4304      	orrs	r4, r0
 800c01c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c020:	4574      	cmp	r4, lr
 800c022:	468c      	mov	ip, r1
 800c024:	ee10 9a10 	vmov	r9, s0
 800c028:	d907      	bls.n	800c03a <__ieee754_atan2+0x4a>
 800c02a:	4632      	mov	r2, r6
 800c02c:	463b      	mov	r3, r7
 800c02e:	f7f4 f8ed 	bl	800020c <__adddf3>
 800c032:	ec41 0b10 	vmov	d0, r0, r1
 800c036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c03a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c03e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c042:	4334      	orrs	r4, r6
 800c044:	d103      	bne.n	800c04e <__ieee754_atan2+0x5e>
 800c046:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c04a:	f000 b961 	b.w	800c310 <atan>
 800c04e:	17bc      	asrs	r4, r7, #30
 800c050:	f004 0402 	and.w	r4, r4, #2
 800c054:	ea53 0909 	orrs.w	r9, r3, r9
 800c058:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c05c:	d107      	bne.n	800c06e <__ieee754_atan2+0x7e>
 800c05e:	2c02      	cmp	r4, #2
 800c060:	d073      	beq.n	800c14a <__ieee754_atan2+0x15a>
 800c062:	2c03      	cmp	r4, #3
 800c064:	d1e5      	bne.n	800c032 <__ieee754_atan2+0x42>
 800c066:	a13e      	add	r1, pc, #248	; (adr r1, 800c160 <__ieee754_atan2+0x170>)
 800c068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c06c:	e7e1      	b.n	800c032 <__ieee754_atan2+0x42>
 800c06e:	ea52 0808 	orrs.w	r8, r2, r8
 800c072:	d106      	bne.n	800c082 <__ieee754_atan2+0x92>
 800c074:	f1bc 0f00 	cmp.w	ip, #0
 800c078:	da6b      	bge.n	800c152 <__ieee754_atan2+0x162>
 800c07a:	a13b      	add	r1, pc, #236	; (adr r1, 800c168 <__ieee754_atan2+0x178>)
 800c07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c080:	e7d7      	b.n	800c032 <__ieee754_atan2+0x42>
 800c082:	4572      	cmp	r2, lr
 800c084:	d120      	bne.n	800c0c8 <__ieee754_atan2+0xd8>
 800c086:	4293      	cmp	r3, r2
 800c088:	d111      	bne.n	800c0ae <__ieee754_atan2+0xbe>
 800c08a:	2c02      	cmp	r4, #2
 800c08c:	d007      	beq.n	800c09e <__ieee754_atan2+0xae>
 800c08e:	2c03      	cmp	r4, #3
 800c090:	d009      	beq.n	800c0a6 <__ieee754_atan2+0xb6>
 800c092:	2c01      	cmp	r4, #1
 800c094:	d155      	bne.n	800c142 <__ieee754_atan2+0x152>
 800c096:	a136      	add	r1, pc, #216	; (adr r1, 800c170 <__ieee754_atan2+0x180>)
 800c098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c09c:	e7c9      	b.n	800c032 <__ieee754_atan2+0x42>
 800c09e:	a136      	add	r1, pc, #216	; (adr r1, 800c178 <__ieee754_atan2+0x188>)
 800c0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0a4:	e7c5      	b.n	800c032 <__ieee754_atan2+0x42>
 800c0a6:	a136      	add	r1, pc, #216	; (adr r1, 800c180 <__ieee754_atan2+0x190>)
 800c0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0ac:	e7c1      	b.n	800c032 <__ieee754_atan2+0x42>
 800c0ae:	2c02      	cmp	r4, #2
 800c0b0:	d04b      	beq.n	800c14a <__ieee754_atan2+0x15a>
 800c0b2:	2c03      	cmp	r4, #3
 800c0b4:	d0d7      	beq.n	800c066 <__ieee754_atan2+0x76>
 800c0b6:	2c01      	cmp	r4, #1
 800c0b8:	f04f 0000 	mov.w	r0, #0
 800c0bc:	d102      	bne.n	800c0c4 <__ieee754_atan2+0xd4>
 800c0be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c0c2:	e7b6      	b.n	800c032 <__ieee754_atan2+0x42>
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	e7b4      	b.n	800c032 <__ieee754_atan2+0x42>
 800c0c8:	4573      	cmp	r3, lr
 800c0ca:	d0d3      	beq.n	800c074 <__ieee754_atan2+0x84>
 800c0cc:	1a9b      	subs	r3, r3, r2
 800c0ce:	151b      	asrs	r3, r3, #20
 800c0d0:	2b3c      	cmp	r3, #60	; 0x3c
 800c0d2:	dc1e      	bgt.n	800c112 <__ieee754_atan2+0x122>
 800c0d4:	2f00      	cmp	r7, #0
 800c0d6:	da01      	bge.n	800c0dc <__ieee754_atan2+0xec>
 800c0d8:	333c      	adds	r3, #60	; 0x3c
 800c0da:	db1e      	blt.n	800c11a <__ieee754_atan2+0x12a>
 800c0dc:	4632      	mov	r2, r6
 800c0de:	463b      	mov	r3, r7
 800c0e0:	f7f4 fb74 	bl	80007cc <__aeabi_ddiv>
 800c0e4:	ec41 0b10 	vmov	d0, r0, r1
 800c0e8:	f000 fab2 	bl	800c650 <fabs>
 800c0ec:	f000 f910 	bl	800c310 <atan>
 800c0f0:	ec51 0b10 	vmov	r0, r1, d0
 800c0f4:	2c01      	cmp	r4, #1
 800c0f6:	d013      	beq.n	800c120 <__ieee754_atan2+0x130>
 800c0f8:	2c02      	cmp	r4, #2
 800c0fa:	d015      	beq.n	800c128 <__ieee754_atan2+0x138>
 800c0fc:	2c00      	cmp	r4, #0
 800c0fe:	d098      	beq.n	800c032 <__ieee754_atan2+0x42>
 800c100:	a321      	add	r3, pc, #132	; (adr r3, 800c188 <__ieee754_atan2+0x198>)
 800c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c106:	f7f4 f87f 	bl	8000208 <__aeabi_dsub>
 800c10a:	a321      	add	r3, pc, #132	; (adr r3, 800c190 <__ieee754_atan2+0x1a0>)
 800c10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c110:	e014      	b.n	800c13c <__ieee754_atan2+0x14c>
 800c112:	a121      	add	r1, pc, #132	; (adr r1, 800c198 <__ieee754_atan2+0x1a8>)
 800c114:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c118:	e7ec      	b.n	800c0f4 <__ieee754_atan2+0x104>
 800c11a:	2000      	movs	r0, #0
 800c11c:	2100      	movs	r1, #0
 800c11e:	e7e9      	b.n	800c0f4 <__ieee754_atan2+0x104>
 800c120:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c124:	4619      	mov	r1, r3
 800c126:	e784      	b.n	800c032 <__ieee754_atan2+0x42>
 800c128:	a317      	add	r3, pc, #92	; (adr r3, 800c188 <__ieee754_atan2+0x198>)
 800c12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12e:	f7f4 f86b 	bl	8000208 <__aeabi_dsub>
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	a116      	add	r1, pc, #88	; (adr r1, 800c190 <__ieee754_atan2+0x1a0>)
 800c138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c13c:	f7f4 f864 	bl	8000208 <__aeabi_dsub>
 800c140:	e777      	b.n	800c032 <__ieee754_atan2+0x42>
 800c142:	a117      	add	r1, pc, #92	; (adr r1, 800c1a0 <__ieee754_atan2+0x1b0>)
 800c144:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c148:	e773      	b.n	800c032 <__ieee754_atan2+0x42>
 800c14a:	a111      	add	r1, pc, #68	; (adr r1, 800c190 <__ieee754_atan2+0x1a0>)
 800c14c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c150:	e76f      	b.n	800c032 <__ieee754_atan2+0x42>
 800c152:	a111      	add	r1, pc, #68	; (adr r1, 800c198 <__ieee754_atan2+0x1a8>)
 800c154:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c158:	e76b      	b.n	800c032 <__ieee754_atan2+0x42>
 800c15a:	bf00      	nop
 800c15c:	f3af 8000 	nop.w
 800c160:	54442d18 	.word	0x54442d18
 800c164:	c00921fb 	.word	0xc00921fb
 800c168:	54442d18 	.word	0x54442d18
 800c16c:	bff921fb 	.word	0xbff921fb
 800c170:	54442d18 	.word	0x54442d18
 800c174:	bfe921fb 	.word	0xbfe921fb
 800c178:	7f3321d2 	.word	0x7f3321d2
 800c17c:	4002d97c 	.word	0x4002d97c
 800c180:	7f3321d2 	.word	0x7f3321d2
 800c184:	c002d97c 	.word	0xc002d97c
 800c188:	33145c07 	.word	0x33145c07
 800c18c:	3ca1a626 	.word	0x3ca1a626
 800c190:	54442d18 	.word	0x54442d18
 800c194:	400921fb 	.word	0x400921fb
 800c198:	54442d18 	.word	0x54442d18
 800c19c:	3ff921fb 	.word	0x3ff921fb
 800c1a0:	54442d18 	.word	0x54442d18
 800c1a4:	3fe921fb 	.word	0x3fe921fb
 800c1a8:	7ff00000 	.word	0x7ff00000

0800c1ac <__ieee754_sqrt>:
 800c1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b0:	4955      	ldr	r1, [pc, #340]	; (800c308 <__ieee754_sqrt+0x15c>)
 800c1b2:	ec55 4b10 	vmov	r4, r5, d0
 800c1b6:	43a9      	bics	r1, r5
 800c1b8:	462b      	mov	r3, r5
 800c1ba:	462a      	mov	r2, r5
 800c1bc:	d112      	bne.n	800c1e4 <__ieee754_sqrt+0x38>
 800c1be:	ee10 2a10 	vmov	r2, s0
 800c1c2:	ee10 0a10 	vmov	r0, s0
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	f7f4 f9d6 	bl	8000578 <__aeabi_dmul>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	4629      	mov	r1, r5
 800c1d4:	f7f4 f81a 	bl	800020c <__adddf3>
 800c1d8:	4604      	mov	r4, r0
 800c1da:	460d      	mov	r5, r1
 800c1dc:	ec45 4b10 	vmov	d0, r4, r5
 800c1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e4:	2d00      	cmp	r5, #0
 800c1e6:	ee10 0a10 	vmov	r0, s0
 800c1ea:	4621      	mov	r1, r4
 800c1ec:	dc0f      	bgt.n	800c20e <__ieee754_sqrt+0x62>
 800c1ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c1f2:	4330      	orrs	r0, r6
 800c1f4:	d0f2      	beq.n	800c1dc <__ieee754_sqrt+0x30>
 800c1f6:	b155      	cbz	r5, 800c20e <__ieee754_sqrt+0x62>
 800c1f8:	ee10 2a10 	vmov	r2, s0
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	f7f4 f802 	bl	8000208 <__aeabi_dsub>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	f7f4 fae0 	bl	80007cc <__aeabi_ddiv>
 800c20c:	e7e4      	b.n	800c1d8 <__ieee754_sqrt+0x2c>
 800c20e:	151b      	asrs	r3, r3, #20
 800c210:	d073      	beq.n	800c2fa <__ieee754_sqrt+0x14e>
 800c212:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c216:	07dd      	lsls	r5, r3, #31
 800c218:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c21c:	bf48      	it	mi
 800c21e:	0fc8      	lsrmi	r0, r1, #31
 800c220:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c224:	bf44      	itt	mi
 800c226:	0049      	lslmi	r1, r1, #1
 800c228:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c22c:	2500      	movs	r5, #0
 800c22e:	1058      	asrs	r0, r3, #1
 800c230:	0fcb      	lsrs	r3, r1, #31
 800c232:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c236:	0049      	lsls	r1, r1, #1
 800c238:	2316      	movs	r3, #22
 800c23a:	462c      	mov	r4, r5
 800c23c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c240:	19a7      	adds	r7, r4, r6
 800c242:	4297      	cmp	r7, r2
 800c244:	bfde      	ittt	le
 800c246:	19bc      	addle	r4, r7, r6
 800c248:	1bd2      	suble	r2, r2, r7
 800c24a:	19ad      	addle	r5, r5, r6
 800c24c:	0fcf      	lsrs	r7, r1, #31
 800c24e:	3b01      	subs	r3, #1
 800c250:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c254:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c258:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c25c:	d1f0      	bne.n	800c240 <__ieee754_sqrt+0x94>
 800c25e:	f04f 0c20 	mov.w	ip, #32
 800c262:	469e      	mov	lr, r3
 800c264:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c268:	42a2      	cmp	r2, r4
 800c26a:	eb06 070e 	add.w	r7, r6, lr
 800c26e:	dc02      	bgt.n	800c276 <__ieee754_sqrt+0xca>
 800c270:	d112      	bne.n	800c298 <__ieee754_sqrt+0xec>
 800c272:	428f      	cmp	r7, r1
 800c274:	d810      	bhi.n	800c298 <__ieee754_sqrt+0xec>
 800c276:	2f00      	cmp	r7, #0
 800c278:	eb07 0e06 	add.w	lr, r7, r6
 800c27c:	da42      	bge.n	800c304 <__ieee754_sqrt+0x158>
 800c27e:	f1be 0f00 	cmp.w	lr, #0
 800c282:	db3f      	blt.n	800c304 <__ieee754_sqrt+0x158>
 800c284:	f104 0801 	add.w	r8, r4, #1
 800c288:	1b12      	subs	r2, r2, r4
 800c28a:	428f      	cmp	r7, r1
 800c28c:	bf88      	it	hi
 800c28e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c292:	1bc9      	subs	r1, r1, r7
 800c294:	4433      	add	r3, r6
 800c296:	4644      	mov	r4, r8
 800c298:	0052      	lsls	r2, r2, #1
 800c29a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c29e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c2a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c2a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c2aa:	d1dd      	bne.n	800c268 <__ieee754_sqrt+0xbc>
 800c2ac:	430a      	orrs	r2, r1
 800c2ae:	d006      	beq.n	800c2be <__ieee754_sqrt+0x112>
 800c2b0:	1c5c      	adds	r4, r3, #1
 800c2b2:	bf13      	iteet	ne
 800c2b4:	3301      	addne	r3, #1
 800c2b6:	3501      	addeq	r5, #1
 800c2b8:	4663      	moveq	r3, ip
 800c2ba:	f023 0301 	bicne.w	r3, r3, #1
 800c2be:	106a      	asrs	r2, r5, #1
 800c2c0:	085b      	lsrs	r3, r3, #1
 800c2c2:	07e9      	lsls	r1, r5, #31
 800c2c4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c2c8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c2cc:	bf48      	it	mi
 800c2ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c2d2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c2d6:	461c      	mov	r4, r3
 800c2d8:	e780      	b.n	800c1dc <__ieee754_sqrt+0x30>
 800c2da:	0aca      	lsrs	r2, r1, #11
 800c2dc:	3815      	subs	r0, #21
 800c2de:	0549      	lsls	r1, r1, #21
 800c2e0:	2a00      	cmp	r2, #0
 800c2e2:	d0fa      	beq.n	800c2da <__ieee754_sqrt+0x12e>
 800c2e4:	02d6      	lsls	r6, r2, #11
 800c2e6:	d50a      	bpl.n	800c2fe <__ieee754_sqrt+0x152>
 800c2e8:	f1c3 0420 	rsb	r4, r3, #32
 800c2ec:	fa21 f404 	lsr.w	r4, r1, r4
 800c2f0:	1e5d      	subs	r5, r3, #1
 800c2f2:	4099      	lsls	r1, r3
 800c2f4:	4322      	orrs	r2, r4
 800c2f6:	1b43      	subs	r3, r0, r5
 800c2f8:	e78b      	b.n	800c212 <__ieee754_sqrt+0x66>
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	e7f0      	b.n	800c2e0 <__ieee754_sqrt+0x134>
 800c2fe:	0052      	lsls	r2, r2, #1
 800c300:	3301      	adds	r3, #1
 800c302:	e7ef      	b.n	800c2e4 <__ieee754_sqrt+0x138>
 800c304:	46a0      	mov	r8, r4
 800c306:	e7bf      	b.n	800c288 <__ieee754_sqrt+0xdc>
 800c308:	7ff00000 	.word	0x7ff00000
 800c30c:	00000000 	.word	0x00000000

0800c310 <atan>:
 800c310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	ec55 4b10 	vmov	r4, r5, d0
 800c318:	4bc3      	ldr	r3, [pc, #780]	; (800c628 <atan+0x318>)
 800c31a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c31e:	429e      	cmp	r6, r3
 800c320:	46ab      	mov	fp, r5
 800c322:	dd18      	ble.n	800c356 <atan+0x46>
 800c324:	4bc1      	ldr	r3, [pc, #772]	; (800c62c <atan+0x31c>)
 800c326:	429e      	cmp	r6, r3
 800c328:	dc01      	bgt.n	800c32e <atan+0x1e>
 800c32a:	d109      	bne.n	800c340 <atan+0x30>
 800c32c:	b144      	cbz	r4, 800c340 <atan+0x30>
 800c32e:	4622      	mov	r2, r4
 800c330:	462b      	mov	r3, r5
 800c332:	4620      	mov	r0, r4
 800c334:	4629      	mov	r1, r5
 800c336:	f7f3 ff69 	bl	800020c <__adddf3>
 800c33a:	4604      	mov	r4, r0
 800c33c:	460d      	mov	r5, r1
 800c33e:	e006      	b.n	800c34e <atan+0x3e>
 800c340:	f1bb 0f00 	cmp.w	fp, #0
 800c344:	f340 8131 	ble.w	800c5aa <atan+0x29a>
 800c348:	a59b      	add	r5, pc, #620	; (adr r5, 800c5b8 <atan+0x2a8>)
 800c34a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c34e:	ec45 4b10 	vmov	d0, r4, r5
 800c352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c356:	4bb6      	ldr	r3, [pc, #728]	; (800c630 <atan+0x320>)
 800c358:	429e      	cmp	r6, r3
 800c35a:	dc14      	bgt.n	800c386 <atan+0x76>
 800c35c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c360:	429e      	cmp	r6, r3
 800c362:	dc0d      	bgt.n	800c380 <atan+0x70>
 800c364:	a396      	add	r3, pc, #600	; (adr r3, 800c5c0 <atan+0x2b0>)
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	ee10 0a10 	vmov	r0, s0
 800c36e:	4629      	mov	r1, r5
 800c370:	f7f3 ff4c 	bl	800020c <__adddf3>
 800c374:	2200      	movs	r2, #0
 800c376:	4baf      	ldr	r3, [pc, #700]	; (800c634 <atan+0x324>)
 800c378:	f7f4 fb8e 	bl	8000a98 <__aeabi_dcmpgt>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d1e6      	bne.n	800c34e <atan+0x3e>
 800c380:	f04f 3aff 	mov.w	sl, #4294967295
 800c384:	e02b      	b.n	800c3de <atan+0xce>
 800c386:	f000 f963 	bl	800c650 <fabs>
 800c38a:	4bab      	ldr	r3, [pc, #684]	; (800c638 <atan+0x328>)
 800c38c:	429e      	cmp	r6, r3
 800c38e:	ec55 4b10 	vmov	r4, r5, d0
 800c392:	f300 80bf 	bgt.w	800c514 <atan+0x204>
 800c396:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c39a:	429e      	cmp	r6, r3
 800c39c:	f300 80a0 	bgt.w	800c4e0 <atan+0x1d0>
 800c3a0:	ee10 2a10 	vmov	r2, s0
 800c3a4:	ee10 0a10 	vmov	r0, s0
 800c3a8:	462b      	mov	r3, r5
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	f7f3 ff2e 	bl	800020c <__adddf3>
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	4ba0      	ldr	r3, [pc, #640]	; (800c634 <atan+0x324>)
 800c3b4:	f7f3 ff28 	bl	8000208 <__aeabi_dsub>
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	4606      	mov	r6, r0
 800c3bc:	460f      	mov	r7, r1
 800c3be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	f7f3 ff21 	bl	800020c <__adddf3>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	4639      	mov	r1, r7
 800c3d2:	f7f4 f9fb 	bl	80007cc <__aeabi_ddiv>
 800c3d6:	f04f 0a00 	mov.w	sl, #0
 800c3da:	4604      	mov	r4, r0
 800c3dc:	460d      	mov	r5, r1
 800c3de:	4622      	mov	r2, r4
 800c3e0:	462b      	mov	r3, r5
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	f7f4 f8c7 	bl	8000578 <__aeabi_dmul>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	4680      	mov	r8, r0
 800c3f0:	4689      	mov	r9, r1
 800c3f2:	f7f4 f8c1 	bl	8000578 <__aeabi_dmul>
 800c3f6:	a374      	add	r3, pc, #464	; (adr r3, 800c5c8 <atan+0x2b8>)
 800c3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fc:	4606      	mov	r6, r0
 800c3fe:	460f      	mov	r7, r1
 800c400:	f7f4 f8ba 	bl	8000578 <__aeabi_dmul>
 800c404:	a372      	add	r3, pc, #456	; (adr r3, 800c5d0 <atan+0x2c0>)
 800c406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40a:	f7f3 feff 	bl	800020c <__adddf3>
 800c40e:	4632      	mov	r2, r6
 800c410:	463b      	mov	r3, r7
 800c412:	f7f4 f8b1 	bl	8000578 <__aeabi_dmul>
 800c416:	a370      	add	r3, pc, #448	; (adr r3, 800c5d8 <atan+0x2c8>)
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	f7f3 fef6 	bl	800020c <__adddf3>
 800c420:	4632      	mov	r2, r6
 800c422:	463b      	mov	r3, r7
 800c424:	f7f4 f8a8 	bl	8000578 <__aeabi_dmul>
 800c428:	a36d      	add	r3, pc, #436	; (adr r3, 800c5e0 <atan+0x2d0>)
 800c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42e:	f7f3 feed 	bl	800020c <__adddf3>
 800c432:	4632      	mov	r2, r6
 800c434:	463b      	mov	r3, r7
 800c436:	f7f4 f89f 	bl	8000578 <__aeabi_dmul>
 800c43a:	a36b      	add	r3, pc, #428	; (adr r3, 800c5e8 <atan+0x2d8>)
 800c43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c440:	f7f3 fee4 	bl	800020c <__adddf3>
 800c444:	4632      	mov	r2, r6
 800c446:	463b      	mov	r3, r7
 800c448:	f7f4 f896 	bl	8000578 <__aeabi_dmul>
 800c44c:	a368      	add	r3, pc, #416	; (adr r3, 800c5f0 <atan+0x2e0>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	f7f3 fedb 	bl	800020c <__adddf3>
 800c456:	4642      	mov	r2, r8
 800c458:	464b      	mov	r3, r9
 800c45a:	f7f4 f88d 	bl	8000578 <__aeabi_dmul>
 800c45e:	a366      	add	r3, pc, #408	; (adr r3, 800c5f8 <atan+0x2e8>)
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	4680      	mov	r8, r0
 800c466:	4689      	mov	r9, r1
 800c468:	4630      	mov	r0, r6
 800c46a:	4639      	mov	r1, r7
 800c46c:	f7f4 f884 	bl	8000578 <__aeabi_dmul>
 800c470:	a363      	add	r3, pc, #396	; (adr r3, 800c600 <atan+0x2f0>)
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	f7f3 fec7 	bl	8000208 <__aeabi_dsub>
 800c47a:	4632      	mov	r2, r6
 800c47c:	463b      	mov	r3, r7
 800c47e:	f7f4 f87b 	bl	8000578 <__aeabi_dmul>
 800c482:	a361      	add	r3, pc, #388	; (adr r3, 800c608 <atan+0x2f8>)
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	f7f3 febe 	bl	8000208 <__aeabi_dsub>
 800c48c:	4632      	mov	r2, r6
 800c48e:	463b      	mov	r3, r7
 800c490:	f7f4 f872 	bl	8000578 <__aeabi_dmul>
 800c494:	a35e      	add	r3, pc, #376	; (adr r3, 800c610 <atan+0x300>)
 800c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49a:	f7f3 feb5 	bl	8000208 <__aeabi_dsub>
 800c49e:	4632      	mov	r2, r6
 800c4a0:	463b      	mov	r3, r7
 800c4a2:	f7f4 f869 	bl	8000578 <__aeabi_dmul>
 800c4a6:	a35c      	add	r3, pc, #368	; (adr r3, 800c618 <atan+0x308>)
 800c4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ac:	f7f3 feac 	bl	8000208 <__aeabi_dsub>
 800c4b0:	4632      	mov	r2, r6
 800c4b2:	463b      	mov	r3, r7
 800c4b4:	f7f4 f860 	bl	8000578 <__aeabi_dmul>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	4640      	mov	r0, r8
 800c4be:	4649      	mov	r1, r9
 800c4c0:	f7f3 fea4 	bl	800020c <__adddf3>
 800c4c4:	4622      	mov	r2, r4
 800c4c6:	462b      	mov	r3, r5
 800c4c8:	f7f4 f856 	bl	8000578 <__aeabi_dmul>
 800c4cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	d14b      	bne.n	800c56e <atan+0x25e>
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	4629      	mov	r1, r5
 800c4da:	f7f3 fe95 	bl	8000208 <__aeabi_dsub>
 800c4de:	e72c      	b.n	800c33a <atan+0x2a>
 800c4e0:	ee10 0a10 	vmov	r0, s0
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	4b53      	ldr	r3, [pc, #332]	; (800c634 <atan+0x324>)
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	f7f3 fe8d 	bl	8000208 <__aeabi_dsub>
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	460f      	mov	r7, r1
 800c4f4:	4b4f      	ldr	r3, [pc, #316]	; (800c634 <atan+0x324>)
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	f7f3 fe87 	bl	800020c <__adddf3>
 800c4fe:	4602      	mov	r2, r0
 800c500:	460b      	mov	r3, r1
 800c502:	4630      	mov	r0, r6
 800c504:	4639      	mov	r1, r7
 800c506:	f7f4 f961 	bl	80007cc <__aeabi_ddiv>
 800c50a:	f04f 0a01 	mov.w	sl, #1
 800c50e:	4604      	mov	r4, r0
 800c510:	460d      	mov	r5, r1
 800c512:	e764      	b.n	800c3de <atan+0xce>
 800c514:	4b49      	ldr	r3, [pc, #292]	; (800c63c <atan+0x32c>)
 800c516:	429e      	cmp	r6, r3
 800c518:	dc1d      	bgt.n	800c556 <atan+0x246>
 800c51a:	ee10 0a10 	vmov	r0, s0
 800c51e:	2200      	movs	r2, #0
 800c520:	4b47      	ldr	r3, [pc, #284]	; (800c640 <atan+0x330>)
 800c522:	4629      	mov	r1, r5
 800c524:	f7f3 fe70 	bl	8000208 <__aeabi_dsub>
 800c528:	2200      	movs	r2, #0
 800c52a:	4606      	mov	r6, r0
 800c52c:	460f      	mov	r7, r1
 800c52e:	4b44      	ldr	r3, [pc, #272]	; (800c640 <atan+0x330>)
 800c530:	4620      	mov	r0, r4
 800c532:	4629      	mov	r1, r5
 800c534:	f7f4 f820 	bl	8000578 <__aeabi_dmul>
 800c538:	2200      	movs	r2, #0
 800c53a:	4b3e      	ldr	r3, [pc, #248]	; (800c634 <atan+0x324>)
 800c53c:	f7f3 fe66 	bl	800020c <__adddf3>
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	4630      	mov	r0, r6
 800c546:	4639      	mov	r1, r7
 800c548:	f7f4 f940 	bl	80007cc <__aeabi_ddiv>
 800c54c:	f04f 0a02 	mov.w	sl, #2
 800c550:	4604      	mov	r4, r0
 800c552:	460d      	mov	r5, r1
 800c554:	e743      	b.n	800c3de <atan+0xce>
 800c556:	462b      	mov	r3, r5
 800c558:	ee10 2a10 	vmov	r2, s0
 800c55c:	2000      	movs	r0, #0
 800c55e:	4939      	ldr	r1, [pc, #228]	; (800c644 <atan+0x334>)
 800c560:	f7f4 f934 	bl	80007cc <__aeabi_ddiv>
 800c564:	f04f 0a03 	mov.w	sl, #3
 800c568:	4604      	mov	r4, r0
 800c56a:	460d      	mov	r5, r1
 800c56c:	e737      	b.n	800c3de <atan+0xce>
 800c56e:	4b36      	ldr	r3, [pc, #216]	; (800c648 <atan+0x338>)
 800c570:	4e36      	ldr	r6, [pc, #216]	; (800c64c <atan+0x33c>)
 800c572:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c576:	4456      	add	r6, sl
 800c578:	449a      	add	sl, r3
 800c57a:	e9da 2300 	ldrd	r2, r3, [sl]
 800c57e:	f7f3 fe43 	bl	8000208 <__aeabi_dsub>
 800c582:	4622      	mov	r2, r4
 800c584:	462b      	mov	r3, r5
 800c586:	f7f3 fe3f 	bl	8000208 <__aeabi_dsub>
 800c58a:	4602      	mov	r2, r0
 800c58c:	460b      	mov	r3, r1
 800c58e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c592:	f7f3 fe39 	bl	8000208 <__aeabi_dsub>
 800c596:	f1bb 0f00 	cmp.w	fp, #0
 800c59a:	4604      	mov	r4, r0
 800c59c:	460d      	mov	r5, r1
 800c59e:	f6bf aed6 	bge.w	800c34e <atan+0x3e>
 800c5a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5a6:	461d      	mov	r5, r3
 800c5a8:	e6d1      	b.n	800c34e <atan+0x3e>
 800c5aa:	a51d      	add	r5, pc, #116	; (adr r5, 800c620 <atan+0x310>)
 800c5ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c5b0:	e6cd      	b.n	800c34e <atan+0x3e>
 800c5b2:	bf00      	nop
 800c5b4:	f3af 8000 	nop.w
 800c5b8:	54442d18 	.word	0x54442d18
 800c5bc:	3ff921fb 	.word	0x3ff921fb
 800c5c0:	8800759c 	.word	0x8800759c
 800c5c4:	7e37e43c 	.word	0x7e37e43c
 800c5c8:	e322da11 	.word	0xe322da11
 800c5cc:	3f90ad3a 	.word	0x3f90ad3a
 800c5d0:	24760deb 	.word	0x24760deb
 800c5d4:	3fa97b4b 	.word	0x3fa97b4b
 800c5d8:	a0d03d51 	.word	0xa0d03d51
 800c5dc:	3fb10d66 	.word	0x3fb10d66
 800c5e0:	c54c206e 	.word	0xc54c206e
 800c5e4:	3fb745cd 	.word	0x3fb745cd
 800c5e8:	920083ff 	.word	0x920083ff
 800c5ec:	3fc24924 	.word	0x3fc24924
 800c5f0:	5555550d 	.word	0x5555550d
 800c5f4:	3fd55555 	.word	0x3fd55555
 800c5f8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c5fc:	bfa2b444 	.word	0xbfa2b444
 800c600:	52defd9a 	.word	0x52defd9a
 800c604:	3fadde2d 	.word	0x3fadde2d
 800c608:	af749a6d 	.word	0xaf749a6d
 800c60c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c610:	fe231671 	.word	0xfe231671
 800c614:	3fbc71c6 	.word	0x3fbc71c6
 800c618:	9998ebc4 	.word	0x9998ebc4
 800c61c:	3fc99999 	.word	0x3fc99999
 800c620:	54442d18 	.word	0x54442d18
 800c624:	bff921fb 	.word	0xbff921fb
 800c628:	440fffff 	.word	0x440fffff
 800c62c:	7ff00000 	.word	0x7ff00000
 800c630:	3fdbffff 	.word	0x3fdbffff
 800c634:	3ff00000 	.word	0x3ff00000
 800c638:	3ff2ffff 	.word	0x3ff2ffff
 800c63c:	40037fff 	.word	0x40037fff
 800c640:	3ff80000 	.word	0x3ff80000
 800c644:	bff00000 	.word	0xbff00000
 800c648:	0800eb60 	.word	0x0800eb60
 800c64c:	0800eb40 	.word	0x0800eb40

0800c650 <fabs>:
 800c650:	ec51 0b10 	vmov	r0, r1, d0
 800c654:	ee10 2a10 	vmov	r2, s0
 800c658:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c65c:	ec43 2b10 	vmov	d0, r2, r3
 800c660:	4770      	bx	lr

0800c662 <matherr>:
 800c662:	2000      	movs	r0, #0
 800c664:	4770      	bx	lr
	...

0800c668 <nan>:
 800c668:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c670 <nan+0x8>
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	00000000 	.word	0x00000000
 800c674:	7ff80000 	.word	0x7ff80000

0800c678 <__errno>:
 800c678:	4b01      	ldr	r3, [pc, #4]	; (800c680 <__errno+0x8>)
 800c67a:	6818      	ldr	r0, [r3, #0]
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	2000006c 	.word	0x2000006c

0800c684 <__libc_init_array>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	4e0d      	ldr	r6, [pc, #52]	; (800c6bc <__libc_init_array+0x38>)
 800c688:	4c0d      	ldr	r4, [pc, #52]	; (800c6c0 <__libc_init_array+0x3c>)
 800c68a:	1ba4      	subs	r4, r4, r6
 800c68c:	10a4      	asrs	r4, r4, #2
 800c68e:	2500      	movs	r5, #0
 800c690:	42a5      	cmp	r5, r4
 800c692:	d109      	bne.n	800c6a8 <__libc_init_array+0x24>
 800c694:	4e0b      	ldr	r6, [pc, #44]	; (800c6c4 <__libc_init_array+0x40>)
 800c696:	4c0c      	ldr	r4, [pc, #48]	; (800c6c8 <__libc_init_array+0x44>)
 800c698:	f002 f9fa 	bl	800ea90 <_init>
 800c69c:	1ba4      	subs	r4, r4, r6
 800c69e:	10a4      	asrs	r4, r4, #2
 800c6a0:	2500      	movs	r5, #0
 800c6a2:	42a5      	cmp	r5, r4
 800c6a4:	d105      	bne.n	800c6b2 <__libc_init_array+0x2e>
 800c6a6:	bd70      	pop	{r4, r5, r6, pc}
 800c6a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6ac:	4798      	blx	r3
 800c6ae:	3501      	adds	r5, #1
 800c6b0:	e7ee      	b.n	800c690 <__libc_init_array+0xc>
 800c6b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6b6:	4798      	blx	r3
 800c6b8:	3501      	adds	r5, #1
 800c6ba:	e7f2      	b.n	800c6a2 <__libc_init_array+0x1e>
 800c6bc:	0800ee18 	.word	0x0800ee18
 800c6c0:	0800ee18 	.word	0x0800ee18
 800c6c4:	0800ee18 	.word	0x0800ee18
 800c6c8:	0800ee1c 	.word	0x0800ee1c

0800c6cc <malloc>:
 800c6cc:	4b02      	ldr	r3, [pc, #8]	; (800c6d8 <malloc+0xc>)
 800c6ce:	4601      	mov	r1, r0
 800c6d0:	6818      	ldr	r0, [r3, #0]
 800c6d2:	f000 b86d 	b.w	800c7b0 <_malloc_r>
 800c6d6:	bf00      	nop
 800c6d8:	2000006c 	.word	0x2000006c

0800c6dc <free>:
 800c6dc:	4b02      	ldr	r3, [pc, #8]	; (800c6e8 <free+0xc>)
 800c6de:	4601      	mov	r1, r0
 800c6e0:	6818      	ldr	r0, [r3, #0]
 800c6e2:	f000 b817 	b.w	800c714 <_free_r>
 800c6e6:	bf00      	nop
 800c6e8:	2000006c 	.word	0x2000006c

0800c6ec <memcpy>:
 800c6ec:	b510      	push	{r4, lr}
 800c6ee:	1e43      	subs	r3, r0, #1
 800c6f0:	440a      	add	r2, r1
 800c6f2:	4291      	cmp	r1, r2
 800c6f4:	d100      	bne.n	800c6f8 <memcpy+0xc>
 800c6f6:	bd10      	pop	{r4, pc}
 800c6f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c700:	e7f7      	b.n	800c6f2 <memcpy+0x6>

0800c702 <memset>:
 800c702:	4402      	add	r2, r0
 800c704:	4603      	mov	r3, r0
 800c706:	4293      	cmp	r3, r2
 800c708:	d100      	bne.n	800c70c <memset+0xa>
 800c70a:	4770      	bx	lr
 800c70c:	f803 1b01 	strb.w	r1, [r3], #1
 800c710:	e7f9      	b.n	800c706 <memset+0x4>
	...

0800c714 <_free_r>:
 800c714:	b538      	push	{r3, r4, r5, lr}
 800c716:	4605      	mov	r5, r0
 800c718:	2900      	cmp	r1, #0
 800c71a:	d045      	beq.n	800c7a8 <_free_r+0x94>
 800c71c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c720:	1f0c      	subs	r4, r1, #4
 800c722:	2b00      	cmp	r3, #0
 800c724:	bfb8      	it	lt
 800c726:	18e4      	addlt	r4, r4, r3
 800c728:	f001 fdfa 	bl	800e320 <__malloc_lock>
 800c72c:	4a1f      	ldr	r2, [pc, #124]	; (800c7ac <_free_r+0x98>)
 800c72e:	6813      	ldr	r3, [r2, #0]
 800c730:	4610      	mov	r0, r2
 800c732:	b933      	cbnz	r3, 800c742 <_free_r+0x2e>
 800c734:	6063      	str	r3, [r4, #4]
 800c736:	6014      	str	r4, [r2, #0]
 800c738:	4628      	mov	r0, r5
 800c73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c73e:	f001 bdf0 	b.w	800e322 <__malloc_unlock>
 800c742:	42a3      	cmp	r3, r4
 800c744:	d90c      	bls.n	800c760 <_free_r+0x4c>
 800c746:	6821      	ldr	r1, [r4, #0]
 800c748:	1862      	adds	r2, r4, r1
 800c74a:	4293      	cmp	r3, r2
 800c74c:	bf04      	itt	eq
 800c74e:	681a      	ldreq	r2, [r3, #0]
 800c750:	685b      	ldreq	r3, [r3, #4]
 800c752:	6063      	str	r3, [r4, #4]
 800c754:	bf04      	itt	eq
 800c756:	1852      	addeq	r2, r2, r1
 800c758:	6022      	streq	r2, [r4, #0]
 800c75a:	6004      	str	r4, [r0, #0]
 800c75c:	e7ec      	b.n	800c738 <_free_r+0x24>
 800c75e:	4613      	mov	r3, r2
 800c760:	685a      	ldr	r2, [r3, #4]
 800c762:	b10a      	cbz	r2, 800c768 <_free_r+0x54>
 800c764:	42a2      	cmp	r2, r4
 800c766:	d9fa      	bls.n	800c75e <_free_r+0x4a>
 800c768:	6819      	ldr	r1, [r3, #0]
 800c76a:	1858      	adds	r0, r3, r1
 800c76c:	42a0      	cmp	r0, r4
 800c76e:	d10b      	bne.n	800c788 <_free_r+0x74>
 800c770:	6820      	ldr	r0, [r4, #0]
 800c772:	4401      	add	r1, r0
 800c774:	1858      	adds	r0, r3, r1
 800c776:	4282      	cmp	r2, r0
 800c778:	6019      	str	r1, [r3, #0]
 800c77a:	d1dd      	bne.n	800c738 <_free_r+0x24>
 800c77c:	6810      	ldr	r0, [r2, #0]
 800c77e:	6852      	ldr	r2, [r2, #4]
 800c780:	605a      	str	r2, [r3, #4]
 800c782:	4401      	add	r1, r0
 800c784:	6019      	str	r1, [r3, #0]
 800c786:	e7d7      	b.n	800c738 <_free_r+0x24>
 800c788:	d902      	bls.n	800c790 <_free_r+0x7c>
 800c78a:	230c      	movs	r3, #12
 800c78c:	602b      	str	r3, [r5, #0]
 800c78e:	e7d3      	b.n	800c738 <_free_r+0x24>
 800c790:	6820      	ldr	r0, [r4, #0]
 800c792:	1821      	adds	r1, r4, r0
 800c794:	428a      	cmp	r2, r1
 800c796:	bf04      	itt	eq
 800c798:	6811      	ldreq	r1, [r2, #0]
 800c79a:	6852      	ldreq	r2, [r2, #4]
 800c79c:	6062      	str	r2, [r4, #4]
 800c79e:	bf04      	itt	eq
 800c7a0:	1809      	addeq	r1, r1, r0
 800c7a2:	6021      	streq	r1, [r4, #0]
 800c7a4:	605c      	str	r4, [r3, #4]
 800c7a6:	e7c7      	b.n	800c738 <_free_r+0x24>
 800c7a8:	bd38      	pop	{r3, r4, r5, pc}
 800c7aa:	bf00      	nop
 800c7ac:	200003b0 	.word	0x200003b0

0800c7b0 <_malloc_r>:
 800c7b0:	b570      	push	{r4, r5, r6, lr}
 800c7b2:	1ccd      	adds	r5, r1, #3
 800c7b4:	f025 0503 	bic.w	r5, r5, #3
 800c7b8:	3508      	adds	r5, #8
 800c7ba:	2d0c      	cmp	r5, #12
 800c7bc:	bf38      	it	cc
 800c7be:	250c      	movcc	r5, #12
 800c7c0:	2d00      	cmp	r5, #0
 800c7c2:	4606      	mov	r6, r0
 800c7c4:	db01      	blt.n	800c7ca <_malloc_r+0x1a>
 800c7c6:	42a9      	cmp	r1, r5
 800c7c8:	d903      	bls.n	800c7d2 <_malloc_r+0x22>
 800c7ca:	230c      	movs	r3, #12
 800c7cc:	6033      	str	r3, [r6, #0]
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	bd70      	pop	{r4, r5, r6, pc}
 800c7d2:	f001 fda5 	bl	800e320 <__malloc_lock>
 800c7d6:	4a21      	ldr	r2, [pc, #132]	; (800c85c <_malloc_r+0xac>)
 800c7d8:	6814      	ldr	r4, [r2, #0]
 800c7da:	4621      	mov	r1, r4
 800c7dc:	b991      	cbnz	r1, 800c804 <_malloc_r+0x54>
 800c7de:	4c20      	ldr	r4, [pc, #128]	; (800c860 <_malloc_r+0xb0>)
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	b91b      	cbnz	r3, 800c7ec <_malloc_r+0x3c>
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	f000 fbeb 	bl	800cfc0 <_sbrk_r>
 800c7ea:	6020      	str	r0, [r4, #0]
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f000 fbe6 	bl	800cfc0 <_sbrk_r>
 800c7f4:	1c43      	adds	r3, r0, #1
 800c7f6:	d124      	bne.n	800c842 <_malloc_r+0x92>
 800c7f8:	230c      	movs	r3, #12
 800c7fa:	6033      	str	r3, [r6, #0]
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	f001 fd90 	bl	800e322 <__malloc_unlock>
 800c802:	e7e4      	b.n	800c7ce <_malloc_r+0x1e>
 800c804:	680b      	ldr	r3, [r1, #0]
 800c806:	1b5b      	subs	r3, r3, r5
 800c808:	d418      	bmi.n	800c83c <_malloc_r+0x8c>
 800c80a:	2b0b      	cmp	r3, #11
 800c80c:	d90f      	bls.n	800c82e <_malloc_r+0x7e>
 800c80e:	600b      	str	r3, [r1, #0]
 800c810:	50cd      	str	r5, [r1, r3]
 800c812:	18cc      	adds	r4, r1, r3
 800c814:	4630      	mov	r0, r6
 800c816:	f001 fd84 	bl	800e322 <__malloc_unlock>
 800c81a:	f104 000b 	add.w	r0, r4, #11
 800c81e:	1d23      	adds	r3, r4, #4
 800c820:	f020 0007 	bic.w	r0, r0, #7
 800c824:	1ac3      	subs	r3, r0, r3
 800c826:	d0d3      	beq.n	800c7d0 <_malloc_r+0x20>
 800c828:	425a      	negs	r2, r3
 800c82a:	50e2      	str	r2, [r4, r3]
 800c82c:	e7d0      	b.n	800c7d0 <_malloc_r+0x20>
 800c82e:	428c      	cmp	r4, r1
 800c830:	684b      	ldr	r3, [r1, #4]
 800c832:	bf16      	itet	ne
 800c834:	6063      	strne	r3, [r4, #4]
 800c836:	6013      	streq	r3, [r2, #0]
 800c838:	460c      	movne	r4, r1
 800c83a:	e7eb      	b.n	800c814 <_malloc_r+0x64>
 800c83c:	460c      	mov	r4, r1
 800c83e:	6849      	ldr	r1, [r1, #4]
 800c840:	e7cc      	b.n	800c7dc <_malloc_r+0x2c>
 800c842:	1cc4      	adds	r4, r0, #3
 800c844:	f024 0403 	bic.w	r4, r4, #3
 800c848:	42a0      	cmp	r0, r4
 800c84a:	d005      	beq.n	800c858 <_malloc_r+0xa8>
 800c84c:	1a21      	subs	r1, r4, r0
 800c84e:	4630      	mov	r0, r6
 800c850:	f000 fbb6 	bl	800cfc0 <_sbrk_r>
 800c854:	3001      	adds	r0, #1
 800c856:	d0cf      	beq.n	800c7f8 <_malloc_r+0x48>
 800c858:	6025      	str	r5, [r4, #0]
 800c85a:	e7db      	b.n	800c814 <_malloc_r+0x64>
 800c85c:	200003b0 	.word	0x200003b0
 800c860:	200003b4 	.word	0x200003b4

0800c864 <__cvt>:
 800c864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c868:	ec55 4b10 	vmov	r4, r5, d0
 800c86c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c86e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c872:	2d00      	cmp	r5, #0
 800c874:	460e      	mov	r6, r1
 800c876:	4691      	mov	r9, r2
 800c878:	4619      	mov	r1, r3
 800c87a:	bfb8      	it	lt
 800c87c:	4622      	movlt	r2, r4
 800c87e:	462b      	mov	r3, r5
 800c880:	f027 0720 	bic.w	r7, r7, #32
 800c884:	bfbb      	ittet	lt
 800c886:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c88a:	461d      	movlt	r5, r3
 800c88c:	2300      	movge	r3, #0
 800c88e:	232d      	movlt	r3, #45	; 0x2d
 800c890:	bfb8      	it	lt
 800c892:	4614      	movlt	r4, r2
 800c894:	2f46      	cmp	r7, #70	; 0x46
 800c896:	700b      	strb	r3, [r1, #0]
 800c898:	d004      	beq.n	800c8a4 <__cvt+0x40>
 800c89a:	2f45      	cmp	r7, #69	; 0x45
 800c89c:	d100      	bne.n	800c8a0 <__cvt+0x3c>
 800c89e:	3601      	adds	r6, #1
 800c8a0:	2102      	movs	r1, #2
 800c8a2:	e000      	b.n	800c8a6 <__cvt+0x42>
 800c8a4:	2103      	movs	r1, #3
 800c8a6:	ab03      	add	r3, sp, #12
 800c8a8:	9301      	str	r3, [sp, #4]
 800c8aa:	ab02      	add	r3, sp, #8
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	4632      	mov	r2, r6
 800c8b0:	4653      	mov	r3, sl
 800c8b2:	ec45 4b10 	vmov	d0, r4, r5
 800c8b6:	f000 fd8f 	bl	800d3d8 <_dtoa_r>
 800c8ba:	2f47      	cmp	r7, #71	; 0x47
 800c8bc:	4680      	mov	r8, r0
 800c8be:	d102      	bne.n	800c8c6 <__cvt+0x62>
 800c8c0:	f019 0f01 	tst.w	r9, #1
 800c8c4:	d026      	beq.n	800c914 <__cvt+0xb0>
 800c8c6:	2f46      	cmp	r7, #70	; 0x46
 800c8c8:	eb08 0906 	add.w	r9, r8, r6
 800c8cc:	d111      	bne.n	800c8f2 <__cvt+0x8e>
 800c8ce:	f898 3000 	ldrb.w	r3, [r8]
 800c8d2:	2b30      	cmp	r3, #48	; 0x30
 800c8d4:	d10a      	bne.n	800c8ec <__cvt+0x88>
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	2300      	movs	r3, #0
 800c8da:	4620      	mov	r0, r4
 800c8dc:	4629      	mov	r1, r5
 800c8de:	f7f4 f8b3 	bl	8000a48 <__aeabi_dcmpeq>
 800c8e2:	b918      	cbnz	r0, 800c8ec <__cvt+0x88>
 800c8e4:	f1c6 0601 	rsb	r6, r6, #1
 800c8e8:	f8ca 6000 	str.w	r6, [sl]
 800c8ec:	f8da 3000 	ldr.w	r3, [sl]
 800c8f0:	4499      	add	r9, r3
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	4629      	mov	r1, r5
 800c8fa:	f7f4 f8a5 	bl	8000a48 <__aeabi_dcmpeq>
 800c8fe:	b938      	cbnz	r0, 800c910 <__cvt+0xac>
 800c900:	2230      	movs	r2, #48	; 0x30
 800c902:	9b03      	ldr	r3, [sp, #12]
 800c904:	454b      	cmp	r3, r9
 800c906:	d205      	bcs.n	800c914 <__cvt+0xb0>
 800c908:	1c59      	adds	r1, r3, #1
 800c90a:	9103      	str	r1, [sp, #12]
 800c90c:	701a      	strb	r2, [r3, #0]
 800c90e:	e7f8      	b.n	800c902 <__cvt+0x9e>
 800c910:	f8cd 900c 	str.w	r9, [sp, #12]
 800c914:	9b03      	ldr	r3, [sp, #12]
 800c916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c918:	eba3 0308 	sub.w	r3, r3, r8
 800c91c:	4640      	mov	r0, r8
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	b004      	add	sp, #16
 800c922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c926 <__exponent>:
 800c926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c928:	2900      	cmp	r1, #0
 800c92a:	4604      	mov	r4, r0
 800c92c:	bfba      	itte	lt
 800c92e:	4249      	neglt	r1, r1
 800c930:	232d      	movlt	r3, #45	; 0x2d
 800c932:	232b      	movge	r3, #43	; 0x2b
 800c934:	2909      	cmp	r1, #9
 800c936:	f804 2b02 	strb.w	r2, [r4], #2
 800c93a:	7043      	strb	r3, [r0, #1]
 800c93c:	dd20      	ble.n	800c980 <__exponent+0x5a>
 800c93e:	f10d 0307 	add.w	r3, sp, #7
 800c942:	461f      	mov	r7, r3
 800c944:	260a      	movs	r6, #10
 800c946:	fb91 f5f6 	sdiv	r5, r1, r6
 800c94a:	fb06 1115 	mls	r1, r6, r5, r1
 800c94e:	3130      	adds	r1, #48	; 0x30
 800c950:	2d09      	cmp	r5, #9
 800c952:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c956:	f103 32ff 	add.w	r2, r3, #4294967295
 800c95a:	4629      	mov	r1, r5
 800c95c:	dc09      	bgt.n	800c972 <__exponent+0x4c>
 800c95e:	3130      	adds	r1, #48	; 0x30
 800c960:	3b02      	subs	r3, #2
 800c962:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c966:	42bb      	cmp	r3, r7
 800c968:	4622      	mov	r2, r4
 800c96a:	d304      	bcc.n	800c976 <__exponent+0x50>
 800c96c:	1a10      	subs	r0, r2, r0
 800c96e:	b003      	add	sp, #12
 800c970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c972:	4613      	mov	r3, r2
 800c974:	e7e7      	b.n	800c946 <__exponent+0x20>
 800c976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c97a:	f804 2b01 	strb.w	r2, [r4], #1
 800c97e:	e7f2      	b.n	800c966 <__exponent+0x40>
 800c980:	2330      	movs	r3, #48	; 0x30
 800c982:	4419      	add	r1, r3
 800c984:	7083      	strb	r3, [r0, #2]
 800c986:	1d02      	adds	r2, r0, #4
 800c988:	70c1      	strb	r1, [r0, #3]
 800c98a:	e7ef      	b.n	800c96c <__exponent+0x46>

0800c98c <_printf_float>:
 800c98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c990:	b08d      	sub	sp, #52	; 0x34
 800c992:	460c      	mov	r4, r1
 800c994:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c998:	4616      	mov	r6, r2
 800c99a:	461f      	mov	r7, r3
 800c99c:	4605      	mov	r5, r0
 800c99e:	f001 fc4d 	bl	800e23c <_localeconv_r>
 800c9a2:	6803      	ldr	r3, [r0, #0]
 800c9a4:	9304      	str	r3, [sp, #16]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7f3 fc22 	bl	80001f0 <strlen>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c9b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c9b4:	9005      	str	r0, [sp, #20]
 800c9b6:	3307      	adds	r3, #7
 800c9b8:	f023 0307 	bic.w	r3, r3, #7
 800c9bc:	f103 0208 	add.w	r2, r3, #8
 800c9c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c9c4:	f8d4 b000 	ldr.w	fp, [r4]
 800c9c8:	f8c8 2000 	str.w	r2, [r8]
 800c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c9d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c9d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9dc:	9307      	str	r3, [sp, #28]
 800c9de:	f8cd 8018 	str.w	r8, [sp, #24]
 800c9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e6:	4ba7      	ldr	r3, [pc, #668]	; (800cc84 <_printf_float+0x2f8>)
 800c9e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9ec:	f7f4 f85e 	bl	8000aac <__aeabi_dcmpun>
 800c9f0:	bb70      	cbnz	r0, 800ca50 <_printf_float+0xc4>
 800c9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f6:	4ba3      	ldr	r3, [pc, #652]	; (800cc84 <_printf_float+0x2f8>)
 800c9f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9fc:	f7f4 f838 	bl	8000a70 <__aeabi_dcmple>
 800ca00:	bb30      	cbnz	r0, 800ca50 <_printf_float+0xc4>
 800ca02:	2200      	movs	r2, #0
 800ca04:	2300      	movs	r3, #0
 800ca06:	4640      	mov	r0, r8
 800ca08:	4649      	mov	r1, r9
 800ca0a:	f7f4 f827 	bl	8000a5c <__aeabi_dcmplt>
 800ca0e:	b110      	cbz	r0, 800ca16 <_printf_float+0x8a>
 800ca10:	232d      	movs	r3, #45	; 0x2d
 800ca12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca16:	4a9c      	ldr	r2, [pc, #624]	; (800cc88 <_printf_float+0x2fc>)
 800ca18:	4b9c      	ldr	r3, [pc, #624]	; (800cc8c <_printf_float+0x300>)
 800ca1a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ca1e:	bf8c      	ite	hi
 800ca20:	4690      	movhi	r8, r2
 800ca22:	4698      	movls	r8, r3
 800ca24:	2303      	movs	r3, #3
 800ca26:	f02b 0204 	bic.w	r2, fp, #4
 800ca2a:	6123      	str	r3, [r4, #16]
 800ca2c:	6022      	str	r2, [r4, #0]
 800ca2e:	f04f 0900 	mov.w	r9, #0
 800ca32:	9700      	str	r7, [sp, #0]
 800ca34:	4633      	mov	r3, r6
 800ca36:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f000 f9e6 	bl	800ce0c <_printf_common>
 800ca40:	3001      	adds	r0, #1
 800ca42:	f040 808d 	bne.w	800cb60 <_printf_float+0x1d4>
 800ca46:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4a:	b00d      	add	sp, #52	; 0x34
 800ca4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca50:	4642      	mov	r2, r8
 800ca52:	464b      	mov	r3, r9
 800ca54:	4640      	mov	r0, r8
 800ca56:	4649      	mov	r1, r9
 800ca58:	f7f4 f828 	bl	8000aac <__aeabi_dcmpun>
 800ca5c:	b110      	cbz	r0, 800ca64 <_printf_float+0xd8>
 800ca5e:	4a8c      	ldr	r2, [pc, #560]	; (800cc90 <_printf_float+0x304>)
 800ca60:	4b8c      	ldr	r3, [pc, #560]	; (800cc94 <_printf_float+0x308>)
 800ca62:	e7da      	b.n	800ca1a <_printf_float+0x8e>
 800ca64:	6861      	ldr	r1, [r4, #4]
 800ca66:	1c4b      	adds	r3, r1, #1
 800ca68:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ca6c:	a80a      	add	r0, sp, #40	; 0x28
 800ca6e:	d13e      	bne.n	800caee <_printf_float+0x162>
 800ca70:	2306      	movs	r3, #6
 800ca72:	6063      	str	r3, [r4, #4]
 800ca74:	2300      	movs	r3, #0
 800ca76:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ca7a:	ab09      	add	r3, sp, #36	; 0x24
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	ec49 8b10 	vmov	d0, r8, r9
 800ca82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca86:	6022      	str	r2, [r4, #0]
 800ca88:	f8cd a004 	str.w	sl, [sp, #4]
 800ca8c:	6861      	ldr	r1, [r4, #4]
 800ca8e:	4628      	mov	r0, r5
 800ca90:	f7ff fee8 	bl	800c864 <__cvt>
 800ca94:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ca98:	2b47      	cmp	r3, #71	; 0x47
 800ca9a:	4680      	mov	r8, r0
 800ca9c:	d109      	bne.n	800cab2 <_printf_float+0x126>
 800ca9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa0:	1cd8      	adds	r0, r3, #3
 800caa2:	db02      	blt.n	800caaa <_printf_float+0x11e>
 800caa4:	6862      	ldr	r2, [r4, #4]
 800caa6:	4293      	cmp	r3, r2
 800caa8:	dd47      	ble.n	800cb3a <_printf_float+0x1ae>
 800caaa:	f1aa 0a02 	sub.w	sl, sl, #2
 800caae:	fa5f fa8a 	uxtb.w	sl, sl
 800cab2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cab6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cab8:	d824      	bhi.n	800cb04 <_printf_float+0x178>
 800caba:	3901      	subs	r1, #1
 800cabc:	4652      	mov	r2, sl
 800cabe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cac2:	9109      	str	r1, [sp, #36]	; 0x24
 800cac4:	f7ff ff2f 	bl	800c926 <__exponent>
 800cac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800caca:	1813      	adds	r3, r2, r0
 800cacc:	2a01      	cmp	r2, #1
 800cace:	4681      	mov	r9, r0
 800cad0:	6123      	str	r3, [r4, #16]
 800cad2:	dc02      	bgt.n	800cada <_printf_float+0x14e>
 800cad4:	6822      	ldr	r2, [r4, #0]
 800cad6:	07d1      	lsls	r1, r2, #31
 800cad8:	d501      	bpl.n	800cade <_printf_float+0x152>
 800cada:	3301      	adds	r3, #1
 800cadc:	6123      	str	r3, [r4, #16]
 800cade:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d0a5      	beq.n	800ca32 <_printf_float+0xa6>
 800cae6:	232d      	movs	r3, #45	; 0x2d
 800cae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caec:	e7a1      	b.n	800ca32 <_printf_float+0xa6>
 800caee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800caf2:	f000 8177 	beq.w	800cde4 <_printf_float+0x458>
 800caf6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cafa:	d1bb      	bne.n	800ca74 <_printf_float+0xe8>
 800cafc:	2900      	cmp	r1, #0
 800cafe:	d1b9      	bne.n	800ca74 <_printf_float+0xe8>
 800cb00:	2301      	movs	r3, #1
 800cb02:	e7b6      	b.n	800ca72 <_printf_float+0xe6>
 800cb04:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800cb08:	d119      	bne.n	800cb3e <_printf_float+0x1b2>
 800cb0a:	2900      	cmp	r1, #0
 800cb0c:	6863      	ldr	r3, [r4, #4]
 800cb0e:	dd0c      	ble.n	800cb2a <_printf_float+0x19e>
 800cb10:	6121      	str	r1, [r4, #16]
 800cb12:	b913      	cbnz	r3, 800cb1a <_printf_float+0x18e>
 800cb14:	6822      	ldr	r2, [r4, #0]
 800cb16:	07d2      	lsls	r2, r2, #31
 800cb18:	d502      	bpl.n	800cb20 <_printf_float+0x194>
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	440b      	add	r3, r1
 800cb1e:	6123      	str	r3, [r4, #16]
 800cb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb22:	65a3      	str	r3, [r4, #88]	; 0x58
 800cb24:	f04f 0900 	mov.w	r9, #0
 800cb28:	e7d9      	b.n	800cade <_printf_float+0x152>
 800cb2a:	b913      	cbnz	r3, 800cb32 <_printf_float+0x1a6>
 800cb2c:	6822      	ldr	r2, [r4, #0]
 800cb2e:	07d0      	lsls	r0, r2, #31
 800cb30:	d501      	bpl.n	800cb36 <_printf_float+0x1aa>
 800cb32:	3302      	adds	r3, #2
 800cb34:	e7f3      	b.n	800cb1e <_printf_float+0x192>
 800cb36:	2301      	movs	r3, #1
 800cb38:	e7f1      	b.n	800cb1e <_printf_float+0x192>
 800cb3a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800cb3e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cb42:	4293      	cmp	r3, r2
 800cb44:	db05      	blt.n	800cb52 <_printf_float+0x1c6>
 800cb46:	6822      	ldr	r2, [r4, #0]
 800cb48:	6123      	str	r3, [r4, #16]
 800cb4a:	07d1      	lsls	r1, r2, #31
 800cb4c:	d5e8      	bpl.n	800cb20 <_printf_float+0x194>
 800cb4e:	3301      	adds	r3, #1
 800cb50:	e7e5      	b.n	800cb1e <_printf_float+0x192>
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	bfd4      	ite	le
 800cb56:	f1c3 0302 	rsble	r3, r3, #2
 800cb5a:	2301      	movgt	r3, #1
 800cb5c:	4413      	add	r3, r2
 800cb5e:	e7de      	b.n	800cb1e <_printf_float+0x192>
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	055a      	lsls	r2, r3, #21
 800cb64:	d407      	bmi.n	800cb76 <_printf_float+0x1ea>
 800cb66:	6923      	ldr	r3, [r4, #16]
 800cb68:	4642      	mov	r2, r8
 800cb6a:	4631      	mov	r1, r6
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	47b8      	blx	r7
 800cb70:	3001      	adds	r0, #1
 800cb72:	d12b      	bne.n	800cbcc <_printf_float+0x240>
 800cb74:	e767      	b.n	800ca46 <_printf_float+0xba>
 800cb76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cb7a:	f240 80dc 	bls.w	800cd36 <_printf_float+0x3aa>
 800cb7e:	2200      	movs	r2, #0
 800cb80:	2300      	movs	r3, #0
 800cb82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb86:	f7f3 ff5f 	bl	8000a48 <__aeabi_dcmpeq>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d033      	beq.n	800cbf6 <_printf_float+0x26a>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	4a41      	ldr	r2, [pc, #260]	; (800cc98 <_printf_float+0x30c>)
 800cb92:	4631      	mov	r1, r6
 800cb94:	4628      	mov	r0, r5
 800cb96:	47b8      	blx	r7
 800cb98:	3001      	adds	r0, #1
 800cb9a:	f43f af54 	beq.w	800ca46 <_printf_float+0xba>
 800cb9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cba2:	429a      	cmp	r2, r3
 800cba4:	db02      	blt.n	800cbac <_printf_float+0x220>
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	07d8      	lsls	r0, r3, #31
 800cbaa:	d50f      	bpl.n	800cbcc <_printf_float+0x240>
 800cbac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbb0:	4631      	mov	r1, r6
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	47b8      	blx	r7
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	f43f af45 	beq.w	800ca46 <_printf_float+0xba>
 800cbbc:	f04f 0800 	mov.w	r8, #0
 800cbc0:	f104 091a 	add.w	r9, r4, #26
 800cbc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	4543      	cmp	r3, r8
 800cbca:	dc09      	bgt.n	800cbe0 <_printf_float+0x254>
 800cbcc:	6823      	ldr	r3, [r4, #0]
 800cbce:	079b      	lsls	r3, r3, #30
 800cbd0:	f100 8103 	bmi.w	800cdda <_printf_float+0x44e>
 800cbd4:	68e0      	ldr	r0, [r4, #12]
 800cbd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbd8:	4298      	cmp	r0, r3
 800cbda:	bfb8      	it	lt
 800cbdc:	4618      	movlt	r0, r3
 800cbde:	e734      	b.n	800ca4a <_printf_float+0xbe>
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	464a      	mov	r2, r9
 800cbe4:	4631      	mov	r1, r6
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	47b8      	blx	r7
 800cbea:	3001      	adds	r0, #1
 800cbec:	f43f af2b 	beq.w	800ca46 <_printf_float+0xba>
 800cbf0:	f108 0801 	add.w	r8, r8, #1
 800cbf4:	e7e6      	b.n	800cbc4 <_printf_float+0x238>
 800cbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	dc2b      	bgt.n	800cc54 <_printf_float+0x2c8>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	4a26      	ldr	r2, [pc, #152]	; (800cc98 <_printf_float+0x30c>)
 800cc00:	4631      	mov	r1, r6
 800cc02:	4628      	mov	r0, r5
 800cc04:	47b8      	blx	r7
 800cc06:	3001      	adds	r0, #1
 800cc08:	f43f af1d 	beq.w	800ca46 <_printf_float+0xba>
 800cc0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc0e:	b923      	cbnz	r3, 800cc1a <_printf_float+0x28e>
 800cc10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc12:	b913      	cbnz	r3, 800cc1a <_printf_float+0x28e>
 800cc14:	6823      	ldr	r3, [r4, #0]
 800cc16:	07d9      	lsls	r1, r3, #31
 800cc18:	d5d8      	bpl.n	800cbcc <_printf_float+0x240>
 800cc1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc1e:	4631      	mov	r1, r6
 800cc20:	4628      	mov	r0, r5
 800cc22:	47b8      	blx	r7
 800cc24:	3001      	adds	r0, #1
 800cc26:	f43f af0e 	beq.w	800ca46 <_printf_float+0xba>
 800cc2a:	f04f 0900 	mov.w	r9, #0
 800cc2e:	f104 0a1a 	add.w	sl, r4, #26
 800cc32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc34:	425b      	negs	r3, r3
 800cc36:	454b      	cmp	r3, r9
 800cc38:	dc01      	bgt.n	800cc3e <_printf_float+0x2b2>
 800cc3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc3c:	e794      	b.n	800cb68 <_printf_float+0x1dc>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	4652      	mov	r2, sl
 800cc42:	4631      	mov	r1, r6
 800cc44:	4628      	mov	r0, r5
 800cc46:	47b8      	blx	r7
 800cc48:	3001      	adds	r0, #1
 800cc4a:	f43f aefc 	beq.w	800ca46 <_printf_float+0xba>
 800cc4e:	f109 0901 	add.w	r9, r9, #1
 800cc52:	e7ee      	b.n	800cc32 <_printf_float+0x2a6>
 800cc54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	bfa8      	it	ge
 800cc5c:	461a      	movge	r2, r3
 800cc5e:	2a00      	cmp	r2, #0
 800cc60:	4691      	mov	r9, r2
 800cc62:	dd07      	ble.n	800cc74 <_printf_float+0x2e8>
 800cc64:	4613      	mov	r3, r2
 800cc66:	4631      	mov	r1, r6
 800cc68:	4642      	mov	r2, r8
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	47b8      	blx	r7
 800cc6e:	3001      	adds	r0, #1
 800cc70:	f43f aee9 	beq.w	800ca46 <_printf_float+0xba>
 800cc74:	f104 031a 	add.w	r3, r4, #26
 800cc78:	f04f 0b00 	mov.w	fp, #0
 800cc7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc80:	9306      	str	r3, [sp, #24]
 800cc82:	e015      	b.n	800ccb0 <_printf_float+0x324>
 800cc84:	7fefffff 	.word	0x7fefffff
 800cc88:	0800eb88 	.word	0x0800eb88
 800cc8c:	0800eb84 	.word	0x0800eb84
 800cc90:	0800eb90 	.word	0x0800eb90
 800cc94:	0800eb8c 	.word	0x0800eb8c
 800cc98:	0800eb94 	.word	0x0800eb94
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	9a06      	ldr	r2, [sp, #24]
 800cca0:	4631      	mov	r1, r6
 800cca2:	4628      	mov	r0, r5
 800cca4:	47b8      	blx	r7
 800cca6:	3001      	adds	r0, #1
 800cca8:	f43f aecd 	beq.w	800ca46 <_printf_float+0xba>
 800ccac:	f10b 0b01 	add.w	fp, fp, #1
 800ccb0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ccb4:	ebaa 0309 	sub.w	r3, sl, r9
 800ccb8:	455b      	cmp	r3, fp
 800ccba:	dcef      	bgt.n	800cc9c <_printf_float+0x310>
 800ccbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	44d0      	add	r8, sl
 800ccc4:	db15      	blt.n	800ccf2 <_printf_float+0x366>
 800ccc6:	6823      	ldr	r3, [r4, #0]
 800ccc8:	07da      	lsls	r2, r3, #31
 800ccca:	d412      	bmi.n	800ccf2 <_printf_float+0x366>
 800cccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccd0:	eba3 020a 	sub.w	r2, r3, sl
 800ccd4:	eba3 0a01 	sub.w	sl, r3, r1
 800ccd8:	4592      	cmp	sl, r2
 800ccda:	bfa8      	it	ge
 800ccdc:	4692      	movge	sl, r2
 800ccde:	f1ba 0f00 	cmp.w	sl, #0
 800cce2:	dc0e      	bgt.n	800cd02 <_printf_float+0x376>
 800cce4:	f04f 0800 	mov.w	r8, #0
 800cce8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccec:	f104 091a 	add.w	r9, r4, #26
 800ccf0:	e019      	b.n	800cd26 <_printf_float+0x39a>
 800ccf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccf6:	4631      	mov	r1, r6
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	47b8      	blx	r7
 800ccfc:	3001      	adds	r0, #1
 800ccfe:	d1e5      	bne.n	800cccc <_printf_float+0x340>
 800cd00:	e6a1      	b.n	800ca46 <_printf_float+0xba>
 800cd02:	4653      	mov	r3, sl
 800cd04:	4642      	mov	r2, r8
 800cd06:	4631      	mov	r1, r6
 800cd08:	4628      	mov	r0, r5
 800cd0a:	47b8      	blx	r7
 800cd0c:	3001      	adds	r0, #1
 800cd0e:	d1e9      	bne.n	800cce4 <_printf_float+0x358>
 800cd10:	e699      	b.n	800ca46 <_printf_float+0xba>
 800cd12:	2301      	movs	r3, #1
 800cd14:	464a      	mov	r2, r9
 800cd16:	4631      	mov	r1, r6
 800cd18:	4628      	mov	r0, r5
 800cd1a:	47b8      	blx	r7
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	f43f ae92 	beq.w	800ca46 <_printf_float+0xba>
 800cd22:	f108 0801 	add.w	r8, r8, #1
 800cd26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd2a:	1a9b      	subs	r3, r3, r2
 800cd2c:	eba3 030a 	sub.w	r3, r3, sl
 800cd30:	4543      	cmp	r3, r8
 800cd32:	dcee      	bgt.n	800cd12 <_printf_float+0x386>
 800cd34:	e74a      	b.n	800cbcc <_printf_float+0x240>
 800cd36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd38:	2a01      	cmp	r2, #1
 800cd3a:	dc01      	bgt.n	800cd40 <_printf_float+0x3b4>
 800cd3c:	07db      	lsls	r3, r3, #31
 800cd3e:	d53a      	bpl.n	800cdb6 <_printf_float+0x42a>
 800cd40:	2301      	movs	r3, #1
 800cd42:	4642      	mov	r2, r8
 800cd44:	4631      	mov	r1, r6
 800cd46:	4628      	mov	r0, r5
 800cd48:	47b8      	blx	r7
 800cd4a:	3001      	adds	r0, #1
 800cd4c:	f43f ae7b 	beq.w	800ca46 <_printf_float+0xba>
 800cd50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd54:	4631      	mov	r1, r6
 800cd56:	4628      	mov	r0, r5
 800cd58:	47b8      	blx	r7
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	f108 0801 	add.w	r8, r8, #1
 800cd60:	f43f ae71 	beq.w	800ca46 <_printf_float+0xba>
 800cd64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd66:	2200      	movs	r2, #0
 800cd68:	f103 3aff 	add.w	sl, r3, #4294967295
 800cd6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd70:	2300      	movs	r3, #0
 800cd72:	f7f3 fe69 	bl	8000a48 <__aeabi_dcmpeq>
 800cd76:	b9c8      	cbnz	r0, 800cdac <_printf_float+0x420>
 800cd78:	4653      	mov	r3, sl
 800cd7a:	4642      	mov	r2, r8
 800cd7c:	4631      	mov	r1, r6
 800cd7e:	4628      	mov	r0, r5
 800cd80:	47b8      	blx	r7
 800cd82:	3001      	adds	r0, #1
 800cd84:	d10e      	bne.n	800cda4 <_printf_float+0x418>
 800cd86:	e65e      	b.n	800ca46 <_printf_float+0xba>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	4652      	mov	r2, sl
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4628      	mov	r0, r5
 800cd90:	47b8      	blx	r7
 800cd92:	3001      	adds	r0, #1
 800cd94:	f43f ae57 	beq.w	800ca46 <_printf_float+0xba>
 800cd98:	f108 0801 	add.w	r8, r8, #1
 800cd9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	4543      	cmp	r3, r8
 800cda2:	dcf1      	bgt.n	800cd88 <_printf_float+0x3fc>
 800cda4:	464b      	mov	r3, r9
 800cda6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cdaa:	e6de      	b.n	800cb6a <_printf_float+0x1de>
 800cdac:	f04f 0800 	mov.w	r8, #0
 800cdb0:	f104 0a1a 	add.w	sl, r4, #26
 800cdb4:	e7f2      	b.n	800cd9c <_printf_float+0x410>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e7df      	b.n	800cd7a <_printf_float+0x3ee>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	464a      	mov	r2, r9
 800cdbe:	4631      	mov	r1, r6
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	47b8      	blx	r7
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	f43f ae3e 	beq.w	800ca46 <_printf_float+0xba>
 800cdca:	f108 0801 	add.w	r8, r8, #1
 800cdce:	68e3      	ldr	r3, [r4, #12]
 800cdd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cdd2:	1a9b      	subs	r3, r3, r2
 800cdd4:	4543      	cmp	r3, r8
 800cdd6:	dcf0      	bgt.n	800cdba <_printf_float+0x42e>
 800cdd8:	e6fc      	b.n	800cbd4 <_printf_float+0x248>
 800cdda:	f04f 0800 	mov.w	r8, #0
 800cdde:	f104 0919 	add.w	r9, r4, #25
 800cde2:	e7f4      	b.n	800cdce <_printf_float+0x442>
 800cde4:	2900      	cmp	r1, #0
 800cde6:	f43f ae8b 	beq.w	800cb00 <_printf_float+0x174>
 800cdea:	2300      	movs	r3, #0
 800cdec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cdf0:	ab09      	add	r3, sp, #36	; 0x24
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	ec49 8b10 	vmov	d0, r8, r9
 800cdf8:	6022      	str	r2, [r4, #0]
 800cdfa:	f8cd a004 	str.w	sl, [sp, #4]
 800cdfe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ce02:	4628      	mov	r0, r5
 800ce04:	f7ff fd2e 	bl	800c864 <__cvt>
 800ce08:	4680      	mov	r8, r0
 800ce0a:	e648      	b.n	800ca9e <_printf_float+0x112>

0800ce0c <_printf_common>:
 800ce0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce10:	4691      	mov	r9, r2
 800ce12:	461f      	mov	r7, r3
 800ce14:	688a      	ldr	r2, [r1, #8]
 800ce16:	690b      	ldr	r3, [r1, #16]
 800ce18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	bfb8      	it	lt
 800ce20:	4613      	movlt	r3, r2
 800ce22:	f8c9 3000 	str.w	r3, [r9]
 800ce26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	460c      	mov	r4, r1
 800ce2e:	b112      	cbz	r2, 800ce36 <_printf_common+0x2a>
 800ce30:	3301      	adds	r3, #1
 800ce32:	f8c9 3000 	str.w	r3, [r9]
 800ce36:	6823      	ldr	r3, [r4, #0]
 800ce38:	0699      	lsls	r1, r3, #26
 800ce3a:	bf42      	ittt	mi
 800ce3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ce40:	3302      	addmi	r3, #2
 800ce42:	f8c9 3000 	strmi.w	r3, [r9]
 800ce46:	6825      	ldr	r5, [r4, #0]
 800ce48:	f015 0506 	ands.w	r5, r5, #6
 800ce4c:	d107      	bne.n	800ce5e <_printf_common+0x52>
 800ce4e:	f104 0a19 	add.w	sl, r4, #25
 800ce52:	68e3      	ldr	r3, [r4, #12]
 800ce54:	f8d9 2000 	ldr.w	r2, [r9]
 800ce58:	1a9b      	subs	r3, r3, r2
 800ce5a:	42ab      	cmp	r3, r5
 800ce5c:	dc28      	bgt.n	800ceb0 <_printf_common+0xa4>
 800ce5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ce62:	6822      	ldr	r2, [r4, #0]
 800ce64:	3300      	adds	r3, #0
 800ce66:	bf18      	it	ne
 800ce68:	2301      	movne	r3, #1
 800ce6a:	0692      	lsls	r2, r2, #26
 800ce6c:	d42d      	bmi.n	800ceca <_printf_common+0xbe>
 800ce6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce72:	4639      	mov	r1, r7
 800ce74:	4630      	mov	r0, r6
 800ce76:	47c0      	blx	r8
 800ce78:	3001      	adds	r0, #1
 800ce7a:	d020      	beq.n	800cebe <_printf_common+0xb2>
 800ce7c:	6823      	ldr	r3, [r4, #0]
 800ce7e:	68e5      	ldr	r5, [r4, #12]
 800ce80:	f8d9 2000 	ldr.w	r2, [r9]
 800ce84:	f003 0306 	and.w	r3, r3, #6
 800ce88:	2b04      	cmp	r3, #4
 800ce8a:	bf08      	it	eq
 800ce8c:	1aad      	subeq	r5, r5, r2
 800ce8e:	68a3      	ldr	r3, [r4, #8]
 800ce90:	6922      	ldr	r2, [r4, #16]
 800ce92:	bf0c      	ite	eq
 800ce94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce98:	2500      	movne	r5, #0
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	bfc4      	itt	gt
 800ce9e:	1a9b      	subgt	r3, r3, r2
 800cea0:	18ed      	addgt	r5, r5, r3
 800cea2:	f04f 0900 	mov.w	r9, #0
 800cea6:	341a      	adds	r4, #26
 800cea8:	454d      	cmp	r5, r9
 800ceaa:	d11a      	bne.n	800cee2 <_printf_common+0xd6>
 800ceac:	2000      	movs	r0, #0
 800ceae:	e008      	b.n	800cec2 <_printf_common+0xb6>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	4652      	mov	r2, sl
 800ceb4:	4639      	mov	r1, r7
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	47c0      	blx	r8
 800ceba:	3001      	adds	r0, #1
 800cebc:	d103      	bne.n	800cec6 <_printf_common+0xba>
 800cebe:	f04f 30ff 	mov.w	r0, #4294967295
 800cec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cec6:	3501      	adds	r5, #1
 800cec8:	e7c3      	b.n	800ce52 <_printf_common+0x46>
 800ceca:	18e1      	adds	r1, r4, r3
 800cecc:	1c5a      	adds	r2, r3, #1
 800cece:	2030      	movs	r0, #48	; 0x30
 800ced0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ced4:	4422      	add	r2, r4
 800ced6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ceda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cede:	3302      	adds	r3, #2
 800cee0:	e7c5      	b.n	800ce6e <_printf_common+0x62>
 800cee2:	2301      	movs	r3, #1
 800cee4:	4622      	mov	r2, r4
 800cee6:	4639      	mov	r1, r7
 800cee8:	4630      	mov	r0, r6
 800ceea:	47c0      	blx	r8
 800ceec:	3001      	adds	r0, #1
 800ceee:	d0e6      	beq.n	800cebe <_printf_common+0xb2>
 800cef0:	f109 0901 	add.w	r9, r9, #1
 800cef4:	e7d8      	b.n	800cea8 <_printf_common+0x9c>
	...

0800cef8 <_puts_r>:
 800cef8:	b570      	push	{r4, r5, r6, lr}
 800cefa:	460e      	mov	r6, r1
 800cefc:	4605      	mov	r5, r0
 800cefe:	b118      	cbz	r0, 800cf08 <_puts_r+0x10>
 800cf00:	6983      	ldr	r3, [r0, #24]
 800cf02:	b90b      	cbnz	r3, 800cf08 <_puts_r+0x10>
 800cf04:	f001 f910 	bl	800e128 <__sinit>
 800cf08:	69ab      	ldr	r3, [r5, #24]
 800cf0a:	68ac      	ldr	r4, [r5, #8]
 800cf0c:	b913      	cbnz	r3, 800cf14 <_puts_r+0x1c>
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f001 f90a 	bl	800e128 <__sinit>
 800cf14:	4b23      	ldr	r3, [pc, #140]	; (800cfa4 <_puts_r+0xac>)
 800cf16:	429c      	cmp	r4, r3
 800cf18:	d117      	bne.n	800cf4a <_puts_r+0x52>
 800cf1a:	686c      	ldr	r4, [r5, #4]
 800cf1c:	89a3      	ldrh	r3, [r4, #12]
 800cf1e:	071b      	lsls	r3, r3, #28
 800cf20:	d51d      	bpl.n	800cf5e <_puts_r+0x66>
 800cf22:	6923      	ldr	r3, [r4, #16]
 800cf24:	b1db      	cbz	r3, 800cf5e <_puts_r+0x66>
 800cf26:	3e01      	subs	r6, #1
 800cf28:	68a3      	ldr	r3, [r4, #8]
 800cf2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	60a3      	str	r3, [r4, #8]
 800cf32:	b9e9      	cbnz	r1, 800cf70 <_puts_r+0x78>
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	da2e      	bge.n	800cf96 <_puts_r+0x9e>
 800cf38:	4622      	mov	r2, r4
 800cf3a:	210a      	movs	r1, #10
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	f000 f8fd 	bl	800d13c <__swbuf_r>
 800cf42:	3001      	adds	r0, #1
 800cf44:	d011      	beq.n	800cf6a <_puts_r+0x72>
 800cf46:	200a      	movs	r0, #10
 800cf48:	e011      	b.n	800cf6e <_puts_r+0x76>
 800cf4a:	4b17      	ldr	r3, [pc, #92]	; (800cfa8 <_puts_r+0xb0>)
 800cf4c:	429c      	cmp	r4, r3
 800cf4e:	d101      	bne.n	800cf54 <_puts_r+0x5c>
 800cf50:	68ac      	ldr	r4, [r5, #8]
 800cf52:	e7e3      	b.n	800cf1c <_puts_r+0x24>
 800cf54:	4b15      	ldr	r3, [pc, #84]	; (800cfac <_puts_r+0xb4>)
 800cf56:	429c      	cmp	r4, r3
 800cf58:	bf08      	it	eq
 800cf5a:	68ec      	ldreq	r4, [r5, #12]
 800cf5c:	e7de      	b.n	800cf1c <_puts_r+0x24>
 800cf5e:	4621      	mov	r1, r4
 800cf60:	4628      	mov	r0, r5
 800cf62:	f000 f93d 	bl	800d1e0 <__swsetup_r>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	d0dd      	beq.n	800cf26 <_puts_r+0x2e>
 800cf6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6e:	bd70      	pop	{r4, r5, r6, pc}
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	da04      	bge.n	800cf7e <_puts_r+0x86>
 800cf74:	69a2      	ldr	r2, [r4, #24]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	dc06      	bgt.n	800cf88 <_puts_r+0x90>
 800cf7a:	290a      	cmp	r1, #10
 800cf7c:	d004      	beq.n	800cf88 <_puts_r+0x90>
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	6022      	str	r2, [r4, #0]
 800cf84:	7019      	strb	r1, [r3, #0]
 800cf86:	e7cf      	b.n	800cf28 <_puts_r+0x30>
 800cf88:	4622      	mov	r2, r4
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	f000 f8d6 	bl	800d13c <__swbuf_r>
 800cf90:	3001      	adds	r0, #1
 800cf92:	d1c9      	bne.n	800cf28 <_puts_r+0x30>
 800cf94:	e7e9      	b.n	800cf6a <_puts_r+0x72>
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	200a      	movs	r0, #10
 800cf9a:	1c5a      	adds	r2, r3, #1
 800cf9c:	6022      	str	r2, [r4, #0]
 800cf9e:	7018      	strb	r0, [r3, #0]
 800cfa0:	e7e5      	b.n	800cf6e <_puts_r+0x76>
 800cfa2:	bf00      	nop
 800cfa4:	0800ebc4 	.word	0x0800ebc4
 800cfa8:	0800ebe4 	.word	0x0800ebe4
 800cfac:	0800eba4 	.word	0x0800eba4

0800cfb0 <puts>:
 800cfb0:	4b02      	ldr	r3, [pc, #8]	; (800cfbc <puts+0xc>)
 800cfb2:	4601      	mov	r1, r0
 800cfb4:	6818      	ldr	r0, [r3, #0]
 800cfb6:	f7ff bf9f 	b.w	800cef8 <_puts_r>
 800cfba:	bf00      	nop
 800cfbc:	2000006c 	.word	0x2000006c

0800cfc0 <_sbrk_r>:
 800cfc0:	b538      	push	{r3, r4, r5, lr}
 800cfc2:	4c06      	ldr	r4, [pc, #24]	; (800cfdc <_sbrk_r+0x1c>)
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	4608      	mov	r0, r1
 800cfca:	6023      	str	r3, [r4, #0]
 800cfcc:	f7f4 fcce 	bl	800196c <_sbrk>
 800cfd0:	1c43      	adds	r3, r0, #1
 800cfd2:	d102      	bne.n	800cfda <_sbrk_r+0x1a>
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	b103      	cbz	r3, 800cfda <_sbrk_r+0x1a>
 800cfd8:	602b      	str	r3, [r5, #0]
 800cfda:	bd38      	pop	{r3, r4, r5, pc}
 800cfdc:	20000c28 	.word	0x20000c28

0800cfe0 <setvbuf>:
 800cfe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfe4:	461d      	mov	r5, r3
 800cfe6:	4b51      	ldr	r3, [pc, #324]	; (800d12c <setvbuf+0x14c>)
 800cfe8:	681e      	ldr	r6, [r3, #0]
 800cfea:	4604      	mov	r4, r0
 800cfec:	460f      	mov	r7, r1
 800cfee:	4690      	mov	r8, r2
 800cff0:	b126      	cbz	r6, 800cffc <setvbuf+0x1c>
 800cff2:	69b3      	ldr	r3, [r6, #24]
 800cff4:	b913      	cbnz	r3, 800cffc <setvbuf+0x1c>
 800cff6:	4630      	mov	r0, r6
 800cff8:	f001 f896 	bl	800e128 <__sinit>
 800cffc:	4b4c      	ldr	r3, [pc, #304]	; (800d130 <setvbuf+0x150>)
 800cffe:	429c      	cmp	r4, r3
 800d000:	d152      	bne.n	800d0a8 <setvbuf+0xc8>
 800d002:	6874      	ldr	r4, [r6, #4]
 800d004:	f1b8 0f02 	cmp.w	r8, #2
 800d008:	d006      	beq.n	800d018 <setvbuf+0x38>
 800d00a:	f1b8 0f01 	cmp.w	r8, #1
 800d00e:	f200 8089 	bhi.w	800d124 <setvbuf+0x144>
 800d012:	2d00      	cmp	r5, #0
 800d014:	f2c0 8086 	blt.w	800d124 <setvbuf+0x144>
 800d018:	4621      	mov	r1, r4
 800d01a:	4630      	mov	r0, r6
 800d01c:	f001 f81a 	bl	800e054 <_fflush_r>
 800d020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d022:	b141      	cbz	r1, 800d036 <setvbuf+0x56>
 800d024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d028:	4299      	cmp	r1, r3
 800d02a:	d002      	beq.n	800d032 <setvbuf+0x52>
 800d02c:	4630      	mov	r0, r6
 800d02e:	f7ff fb71 	bl	800c714 <_free_r>
 800d032:	2300      	movs	r3, #0
 800d034:	6363      	str	r3, [r4, #52]	; 0x34
 800d036:	2300      	movs	r3, #0
 800d038:	61a3      	str	r3, [r4, #24]
 800d03a:	6063      	str	r3, [r4, #4]
 800d03c:	89a3      	ldrh	r3, [r4, #12]
 800d03e:	061b      	lsls	r3, r3, #24
 800d040:	d503      	bpl.n	800d04a <setvbuf+0x6a>
 800d042:	6921      	ldr	r1, [r4, #16]
 800d044:	4630      	mov	r0, r6
 800d046:	f7ff fb65 	bl	800c714 <_free_r>
 800d04a:	89a3      	ldrh	r3, [r4, #12]
 800d04c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d050:	f023 0303 	bic.w	r3, r3, #3
 800d054:	f1b8 0f02 	cmp.w	r8, #2
 800d058:	81a3      	strh	r3, [r4, #12]
 800d05a:	d05d      	beq.n	800d118 <setvbuf+0x138>
 800d05c:	ab01      	add	r3, sp, #4
 800d05e:	466a      	mov	r2, sp
 800d060:	4621      	mov	r1, r4
 800d062:	4630      	mov	r0, r6
 800d064:	f001 f8f8 	bl	800e258 <__swhatbuf_r>
 800d068:	89a3      	ldrh	r3, [r4, #12]
 800d06a:	4318      	orrs	r0, r3
 800d06c:	81a0      	strh	r0, [r4, #12]
 800d06e:	bb2d      	cbnz	r5, 800d0bc <setvbuf+0xdc>
 800d070:	9d00      	ldr	r5, [sp, #0]
 800d072:	4628      	mov	r0, r5
 800d074:	f7ff fb2a 	bl	800c6cc <malloc>
 800d078:	4607      	mov	r7, r0
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d14e      	bne.n	800d11c <setvbuf+0x13c>
 800d07e:	f8dd 9000 	ldr.w	r9, [sp]
 800d082:	45a9      	cmp	r9, r5
 800d084:	d13c      	bne.n	800d100 <setvbuf+0x120>
 800d086:	f04f 30ff 	mov.w	r0, #4294967295
 800d08a:	89a3      	ldrh	r3, [r4, #12]
 800d08c:	f043 0302 	orr.w	r3, r3, #2
 800d090:	81a3      	strh	r3, [r4, #12]
 800d092:	2300      	movs	r3, #0
 800d094:	60a3      	str	r3, [r4, #8]
 800d096:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d09a:	6023      	str	r3, [r4, #0]
 800d09c:	6123      	str	r3, [r4, #16]
 800d09e:	2301      	movs	r3, #1
 800d0a0:	6163      	str	r3, [r4, #20]
 800d0a2:	b003      	add	sp, #12
 800d0a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0a8:	4b22      	ldr	r3, [pc, #136]	; (800d134 <setvbuf+0x154>)
 800d0aa:	429c      	cmp	r4, r3
 800d0ac:	d101      	bne.n	800d0b2 <setvbuf+0xd2>
 800d0ae:	68b4      	ldr	r4, [r6, #8]
 800d0b0:	e7a8      	b.n	800d004 <setvbuf+0x24>
 800d0b2:	4b21      	ldr	r3, [pc, #132]	; (800d138 <setvbuf+0x158>)
 800d0b4:	429c      	cmp	r4, r3
 800d0b6:	bf08      	it	eq
 800d0b8:	68f4      	ldreq	r4, [r6, #12]
 800d0ba:	e7a3      	b.n	800d004 <setvbuf+0x24>
 800d0bc:	2f00      	cmp	r7, #0
 800d0be:	d0d8      	beq.n	800d072 <setvbuf+0x92>
 800d0c0:	69b3      	ldr	r3, [r6, #24]
 800d0c2:	b913      	cbnz	r3, 800d0ca <setvbuf+0xea>
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f001 f82f 	bl	800e128 <__sinit>
 800d0ca:	f1b8 0f01 	cmp.w	r8, #1
 800d0ce:	bf08      	it	eq
 800d0d0:	89a3      	ldrheq	r3, [r4, #12]
 800d0d2:	6027      	str	r7, [r4, #0]
 800d0d4:	bf04      	itt	eq
 800d0d6:	f043 0301 	orreq.w	r3, r3, #1
 800d0da:	81a3      	strheq	r3, [r4, #12]
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	f013 0008 	ands.w	r0, r3, #8
 800d0e2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800d0e6:	d01b      	beq.n	800d120 <setvbuf+0x140>
 800d0e8:	f013 0001 	ands.w	r0, r3, #1
 800d0ec:	bf18      	it	ne
 800d0ee:	426d      	negne	r5, r5
 800d0f0:	f04f 0300 	mov.w	r3, #0
 800d0f4:	bf1d      	ittte	ne
 800d0f6:	60a3      	strne	r3, [r4, #8]
 800d0f8:	61a5      	strne	r5, [r4, #24]
 800d0fa:	4618      	movne	r0, r3
 800d0fc:	60a5      	streq	r5, [r4, #8]
 800d0fe:	e7d0      	b.n	800d0a2 <setvbuf+0xc2>
 800d100:	4648      	mov	r0, r9
 800d102:	f7ff fae3 	bl	800c6cc <malloc>
 800d106:	4607      	mov	r7, r0
 800d108:	2800      	cmp	r0, #0
 800d10a:	d0bc      	beq.n	800d086 <setvbuf+0xa6>
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d112:	81a3      	strh	r3, [r4, #12]
 800d114:	464d      	mov	r5, r9
 800d116:	e7d3      	b.n	800d0c0 <setvbuf+0xe0>
 800d118:	2000      	movs	r0, #0
 800d11a:	e7b6      	b.n	800d08a <setvbuf+0xaa>
 800d11c:	46a9      	mov	r9, r5
 800d11e:	e7f5      	b.n	800d10c <setvbuf+0x12c>
 800d120:	60a0      	str	r0, [r4, #8]
 800d122:	e7be      	b.n	800d0a2 <setvbuf+0xc2>
 800d124:	f04f 30ff 	mov.w	r0, #4294967295
 800d128:	e7bb      	b.n	800d0a2 <setvbuf+0xc2>
 800d12a:	bf00      	nop
 800d12c:	2000006c 	.word	0x2000006c
 800d130:	0800ebc4 	.word	0x0800ebc4
 800d134:	0800ebe4 	.word	0x0800ebe4
 800d138:	0800eba4 	.word	0x0800eba4

0800d13c <__swbuf_r>:
 800d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13e:	460e      	mov	r6, r1
 800d140:	4614      	mov	r4, r2
 800d142:	4605      	mov	r5, r0
 800d144:	b118      	cbz	r0, 800d14e <__swbuf_r+0x12>
 800d146:	6983      	ldr	r3, [r0, #24]
 800d148:	b90b      	cbnz	r3, 800d14e <__swbuf_r+0x12>
 800d14a:	f000 ffed 	bl	800e128 <__sinit>
 800d14e:	4b21      	ldr	r3, [pc, #132]	; (800d1d4 <__swbuf_r+0x98>)
 800d150:	429c      	cmp	r4, r3
 800d152:	d12a      	bne.n	800d1aa <__swbuf_r+0x6e>
 800d154:	686c      	ldr	r4, [r5, #4]
 800d156:	69a3      	ldr	r3, [r4, #24]
 800d158:	60a3      	str	r3, [r4, #8]
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	071a      	lsls	r2, r3, #28
 800d15e:	d52e      	bpl.n	800d1be <__swbuf_r+0x82>
 800d160:	6923      	ldr	r3, [r4, #16]
 800d162:	b363      	cbz	r3, 800d1be <__swbuf_r+0x82>
 800d164:	6923      	ldr	r3, [r4, #16]
 800d166:	6820      	ldr	r0, [r4, #0]
 800d168:	1ac0      	subs	r0, r0, r3
 800d16a:	6963      	ldr	r3, [r4, #20]
 800d16c:	b2f6      	uxtb	r6, r6
 800d16e:	4283      	cmp	r3, r0
 800d170:	4637      	mov	r7, r6
 800d172:	dc04      	bgt.n	800d17e <__swbuf_r+0x42>
 800d174:	4621      	mov	r1, r4
 800d176:	4628      	mov	r0, r5
 800d178:	f000 ff6c 	bl	800e054 <_fflush_r>
 800d17c:	bb28      	cbnz	r0, 800d1ca <__swbuf_r+0x8e>
 800d17e:	68a3      	ldr	r3, [r4, #8]
 800d180:	3b01      	subs	r3, #1
 800d182:	60a3      	str	r3, [r4, #8]
 800d184:	6823      	ldr	r3, [r4, #0]
 800d186:	1c5a      	adds	r2, r3, #1
 800d188:	6022      	str	r2, [r4, #0]
 800d18a:	701e      	strb	r6, [r3, #0]
 800d18c:	6963      	ldr	r3, [r4, #20]
 800d18e:	3001      	adds	r0, #1
 800d190:	4283      	cmp	r3, r0
 800d192:	d004      	beq.n	800d19e <__swbuf_r+0x62>
 800d194:	89a3      	ldrh	r3, [r4, #12]
 800d196:	07db      	lsls	r3, r3, #31
 800d198:	d519      	bpl.n	800d1ce <__swbuf_r+0x92>
 800d19a:	2e0a      	cmp	r6, #10
 800d19c:	d117      	bne.n	800d1ce <__swbuf_r+0x92>
 800d19e:	4621      	mov	r1, r4
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	f000 ff57 	bl	800e054 <_fflush_r>
 800d1a6:	b190      	cbz	r0, 800d1ce <__swbuf_r+0x92>
 800d1a8:	e00f      	b.n	800d1ca <__swbuf_r+0x8e>
 800d1aa:	4b0b      	ldr	r3, [pc, #44]	; (800d1d8 <__swbuf_r+0x9c>)
 800d1ac:	429c      	cmp	r4, r3
 800d1ae:	d101      	bne.n	800d1b4 <__swbuf_r+0x78>
 800d1b0:	68ac      	ldr	r4, [r5, #8]
 800d1b2:	e7d0      	b.n	800d156 <__swbuf_r+0x1a>
 800d1b4:	4b09      	ldr	r3, [pc, #36]	; (800d1dc <__swbuf_r+0xa0>)
 800d1b6:	429c      	cmp	r4, r3
 800d1b8:	bf08      	it	eq
 800d1ba:	68ec      	ldreq	r4, [r5, #12]
 800d1bc:	e7cb      	b.n	800d156 <__swbuf_r+0x1a>
 800d1be:	4621      	mov	r1, r4
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	f000 f80d 	bl	800d1e0 <__swsetup_r>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d0cc      	beq.n	800d164 <__swbuf_r+0x28>
 800d1ca:	f04f 37ff 	mov.w	r7, #4294967295
 800d1ce:	4638      	mov	r0, r7
 800d1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	0800ebc4 	.word	0x0800ebc4
 800d1d8:	0800ebe4 	.word	0x0800ebe4
 800d1dc:	0800eba4 	.word	0x0800eba4

0800d1e0 <__swsetup_r>:
 800d1e0:	4b32      	ldr	r3, [pc, #200]	; (800d2ac <__swsetup_r+0xcc>)
 800d1e2:	b570      	push	{r4, r5, r6, lr}
 800d1e4:	681d      	ldr	r5, [r3, #0]
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	460c      	mov	r4, r1
 800d1ea:	b125      	cbz	r5, 800d1f6 <__swsetup_r+0x16>
 800d1ec:	69ab      	ldr	r3, [r5, #24]
 800d1ee:	b913      	cbnz	r3, 800d1f6 <__swsetup_r+0x16>
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	f000 ff99 	bl	800e128 <__sinit>
 800d1f6:	4b2e      	ldr	r3, [pc, #184]	; (800d2b0 <__swsetup_r+0xd0>)
 800d1f8:	429c      	cmp	r4, r3
 800d1fa:	d10f      	bne.n	800d21c <__swsetup_r+0x3c>
 800d1fc:	686c      	ldr	r4, [r5, #4]
 800d1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d202:	b29a      	uxth	r2, r3
 800d204:	0715      	lsls	r5, r2, #28
 800d206:	d42c      	bmi.n	800d262 <__swsetup_r+0x82>
 800d208:	06d0      	lsls	r0, r2, #27
 800d20a:	d411      	bmi.n	800d230 <__swsetup_r+0x50>
 800d20c:	2209      	movs	r2, #9
 800d20e:	6032      	str	r2, [r6, #0]
 800d210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d214:	81a3      	strh	r3, [r4, #12]
 800d216:	f04f 30ff 	mov.w	r0, #4294967295
 800d21a:	e03e      	b.n	800d29a <__swsetup_r+0xba>
 800d21c:	4b25      	ldr	r3, [pc, #148]	; (800d2b4 <__swsetup_r+0xd4>)
 800d21e:	429c      	cmp	r4, r3
 800d220:	d101      	bne.n	800d226 <__swsetup_r+0x46>
 800d222:	68ac      	ldr	r4, [r5, #8]
 800d224:	e7eb      	b.n	800d1fe <__swsetup_r+0x1e>
 800d226:	4b24      	ldr	r3, [pc, #144]	; (800d2b8 <__swsetup_r+0xd8>)
 800d228:	429c      	cmp	r4, r3
 800d22a:	bf08      	it	eq
 800d22c:	68ec      	ldreq	r4, [r5, #12]
 800d22e:	e7e6      	b.n	800d1fe <__swsetup_r+0x1e>
 800d230:	0751      	lsls	r1, r2, #29
 800d232:	d512      	bpl.n	800d25a <__swsetup_r+0x7a>
 800d234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d236:	b141      	cbz	r1, 800d24a <__swsetup_r+0x6a>
 800d238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d23c:	4299      	cmp	r1, r3
 800d23e:	d002      	beq.n	800d246 <__swsetup_r+0x66>
 800d240:	4630      	mov	r0, r6
 800d242:	f7ff fa67 	bl	800c714 <_free_r>
 800d246:	2300      	movs	r3, #0
 800d248:	6363      	str	r3, [r4, #52]	; 0x34
 800d24a:	89a3      	ldrh	r3, [r4, #12]
 800d24c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d250:	81a3      	strh	r3, [r4, #12]
 800d252:	2300      	movs	r3, #0
 800d254:	6063      	str	r3, [r4, #4]
 800d256:	6923      	ldr	r3, [r4, #16]
 800d258:	6023      	str	r3, [r4, #0]
 800d25a:	89a3      	ldrh	r3, [r4, #12]
 800d25c:	f043 0308 	orr.w	r3, r3, #8
 800d260:	81a3      	strh	r3, [r4, #12]
 800d262:	6923      	ldr	r3, [r4, #16]
 800d264:	b94b      	cbnz	r3, 800d27a <__swsetup_r+0x9a>
 800d266:	89a3      	ldrh	r3, [r4, #12]
 800d268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d26c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d270:	d003      	beq.n	800d27a <__swsetup_r+0x9a>
 800d272:	4621      	mov	r1, r4
 800d274:	4630      	mov	r0, r6
 800d276:	f001 f813 	bl	800e2a0 <__smakebuf_r>
 800d27a:	89a2      	ldrh	r2, [r4, #12]
 800d27c:	f012 0301 	ands.w	r3, r2, #1
 800d280:	d00c      	beq.n	800d29c <__swsetup_r+0xbc>
 800d282:	2300      	movs	r3, #0
 800d284:	60a3      	str	r3, [r4, #8]
 800d286:	6963      	ldr	r3, [r4, #20]
 800d288:	425b      	negs	r3, r3
 800d28a:	61a3      	str	r3, [r4, #24]
 800d28c:	6923      	ldr	r3, [r4, #16]
 800d28e:	b953      	cbnz	r3, 800d2a6 <__swsetup_r+0xc6>
 800d290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d294:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d298:	d1ba      	bne.n	800d210 <__swsetup_r+0x30>
 800d29a:	bd70      	pop	{r4, r5, r6, pc}
 800d29c:	0792      	lsls	r2, r2, #30
 800d29e:	bf58      	it	pl
 800d2a0:	6963      	ldrpl	r3, [r4, #20]
 800d2a2:	60a3      	str	r3, [r4, #8]
 800d2a4:	e7f2      	b.n	800d28c <__swsetup_r+0xac>
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	e7f7      	b.n	800d29a <__swsetup_r+0xba>
 800d2aa:	bf00      	nop
 800d2ac:	2000006c 	.word	0x2000006c
 800d2b0:	0800ebc4 	.word	0x0800ebc4
 800d2b4:	0800ebe4 	.word	0x0800ebe4
 800d2b8:	0800eba4 	.word	0x0800eba4

0800d2bc <quorem>:
 800d2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c0:	6903      	ldr	r3, [r0, #16]
 800d2c2:	690c      	ldr	r4, [r1, #16]
 800d2c4:	42a3      	cmp	r3, r4
 800d2c6:	4680      	mov	r8, r0
 800d2c8:	f2c0 8082 	blt.w	800d3d0 <quorem+0x114>
 800d2cc:	3c01      	subs	r4, #1
 800d2ce:	f101 0714 	add.w	r7, r1, #20
 800d2d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d2d6:	f100 0614 	add.w	r6, r0, #20
 800d2da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d2de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d2e2:	eb06 030c 	add.w	r3, r6, ip
 800d2e6:	3501      	adds	r5, #1
 800d2e8:	eb07 090c 	add.w	r9, r7, ip
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	fbb0 f5f5 	udiv	r5, r0, r5
 800d2f2:	b395      	cbz	r5, 800d35a <quorem+0x9e>
 800d2f4:	f04f 0a00 	mov.w	sl, #0
 800d2f8:	4638      	mov	r0, r7
 800d2fa:	46b6      	mov	lr, r6
 800d2fc:	46d3      	mov	fp, sl
 800d2fe:	f850 2b04 	ldr.w	r2, [r0], #4
 800d302:	b293      	uxth	r3, r2
 800d304:	fb05 a303 	mla	r3, r5, r3, sl
 800d308:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	ebab 0303 	sub.w	r3, fp, r3
 800d312:	0c12      	lsrs	r2, r2, #16
 800d314:	f8de b000 	ldr.w	fp, [lr]
 800d318:	fb05 a202 	mla	r2, r5, r2, sl
 800d31c:	fa13 f38b 	uxtah	r3, r3, fp
 800d320:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d324:	fa1f fb82 	uxth.w	fp, r2
 800d328:	f8de 2000 	ldr.w	r2, [lr]
 800d32c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d334:	b29b      	uxth	r3, r3
 800d336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d33a:	4581      	cmp	r9, r0
 800d33c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d340:	f84e 3b04 	str.w	r3, [lr], #4
 800d344:	d2db      	bcs.n	800d2fe <quorem+0x42>
 800d346:	f856 300c 	ldr.w	r3, [r6, ip]
 800d34a:	b933      	cbnz	r3, 800d35a <quorem+0x9e>
 800d34c:	9b01      	ldr	r3, [sp, #4]
 800d34e:	3b04      	subs	r3, #4
 800d350:	429e      	cmp	r6, r3
 800d352:	461a      	mov	r2, r3
 800d354:	d330      	bcc.n	800d3b8 <quorem+0xfc>
 800d356:	f8c8 4010 	str.w	r4, [r8, #16]
 800d35a:	4640      	mov	r0, r8
 800d35c:	f001 f9f8 	bl	800e750 <__mcmp>
 800d360:	2800      	cmp	r0, #0
 800d362:	db25      	blt.n	800d3b0 <quorem+0xf4>
 800d364:	3501      	adds	r5, #1
 800d366:	4630      	mov	r0, r6
 800d368:	f04f 0c00 	mov.w	ip, #0
 800d36c:	f857 2b04 	ldr.w	r2, [r7], #4
 800d370:	f8d0 e000 	ldr.w	lr, [r0]
 800d374:	b293      	uxth	r3, r2
 800d376:	ebac 0303 	sub.w	r3, ip, r3
 800d37a:	0c12      	lsrs	r2, r2, #16
 800d37c:	fa13 f38e 	uxtah	r3, r3, lr
 800d380:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d388:	b29b      	uxth	r3, r3
 800d38a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d38e:	45b9      	cmp	r9, r7
 800d390:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d394:	f840 3b04 	str.w	r3, [r0], #4
 800d398:	d2e8      	bcs.n	800d36c <quorem+0xb0>
 800d39a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d39e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d3a2:	b92a      	cbnz	r2, 800d3b0 <quorem+0xf4>
 800d3a4:	3b04      	subs	r3, #4
 800d3a6:	429e      	cmp	r6, r3
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	d30b      	bcc.n	800d3c4 <quorem+0x108>
 800d3ac:	f8c8 4010 	str.w	r4, [r8, #16]
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	b003      	add	sp, #12
 800d3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b8:	6812      	ldr	r2, [r2, #0]
 800d3ba:	3b04      	subs	r3, #4
 800d3bc:	2a00      	cmp	r2, #0
 800d3be:	d1ca      	bne.n	800d356 <quorem+0x9a>
 800d3c0:	3c01      	subs	r4, #1
 800d3c2:	e7c5      	b.n	800d350 <quorem+0x94>
 800d3c4:	6812      	ldr	r2, [r2, #0]
 800d3c6:	3b04      	subs	r3, #4
 800d3c8:	2a00      	cmp	r2, #0
 800d3ca:	d1ef      	bne.n	800d3ac <quorem+0xf0>
 800d3cc:	3c01      	subs	r4, #1
 800d3ce:	e7ea      	b.n	800d3a6 <quorem+0xea>
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	e7ee      	b.n	800d3b2 <quorem+0xf6>
 800d3d4:	0000      	movs	r0, r0
	...

0800d3d8 <_dtoa_r>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	ec57 6b10 	vmov	r6, r7, d0
 800d3e0:	b097      	sub	sp, #92	; 0x5c
 800d3e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d3e4:	9106      	str	r1, [sp, #24]
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	920b      	str	r2, [sp, #44]	; 0x2c
 800d3ea:	9312      	str	r3, [sp, #72]	; 0x48
 800d3ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d3f0:	e9cd 6700 	strd	r6, r7, [sp]
 800d3f4:	b93d      	cbnz	r5, 800d406 <_dtoa_r+0x2e>
 800d3f6:	2010      	movs	r0, #16
 800d3f8:	f7ff f968 	bl	800c6cc <malloc>
 800d3fc:	6260      	str	r0, [r4, #36]	; 0x24
 800d3fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d402:	6005      	str	r5, [r0, #0]
 800d404:	60c5      	str	r5, [r0, #12]
 800d406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d408:	6819      	ldr	r1, [r3, #0]
 800d40a:	b151      	cbz	r1, 800d422 <_dtoa_r+0x4a>
 800d40c:	685a      	ldr	r2, [r3, #4]
 800d40e:	604a      	str	r2, [r1, #4]
 800d410:	2301      	movs	r3, #1
 800d412:	4093      	lsls	r3, r2
 800d414:	608b      	str	r3, [r1, #8]
 800d416:	4620      	mov	r0, r4
 800d418:	f000 ffb8 	bl	800e38c <_Bfree>
 800d41c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d41e:	2200      	movs	r2, #0
 800d420:	601a      	str	r2, [r3, #0]
 800d422:	1e3b      	subs	r3, r7, #0
 800d424:	bfbb      	ittet	lt
 800d426:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d42a:	9301      	strlt	r3, [sp, #4]
 800d42c:	2300      	movge	r3, #0
 800d42e:	2201      	movlt	r2, #1
 800d430:	bfac      	ite	ge
 800d432:	f8c8 3000 	strge.w	r3, [r8]
 800d436:	f8c8 2000 	strlt.w	r2, [r8]
 800d43a:	4baf      	ldr	r3, [pc, #700]	; (800d6f8 <_dtoa_r+0x320>)
 800d43c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d440:	ea33 0308 	bics.w	r3, r3, r8
 800d444:	d114      	bne.n	800d470 <_dtoa_r+0x98>
 800d446:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d448:	f242 730f 	movw	r3, #9999	; 0x270f
 800d44c:	6013      	str	r3, [r2, #0]
 800d44e:	9b00      	ldr	r3, [sp, #0]
 800d450:	b923      	cbnz	r3, 800d45c <_dtoa_r+0x84>
 800d452:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d456:	2800      	cmp	r0, #0
 800d458:	f000 8542 	beq.w	800dee0 <_dtoa_r+0xb08>
 800d45c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d45e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d70c <_dtoa_r+0x334>
 800d462:	2b00      	cmp	r3, #0
 800d464:	f000 8544 	beq.w	800def0 <_dtoa_r+0xb18>
 800d468:	f10b 0303 	add.w	r3, fp, #3
 800d46c:	f000 bd3e 	b.w	800deec <_dtoa_r+0xb14>
 800d470:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d474:	2200      	movs	r2, #0
 800d476:	2300      	movs	r3, #0
 800d478:	4630      	mov	r0, r6
 800d47a:	4639      	mov	r1, r7
 800d47c:	f7f3 fae4 	bl	8000a48 <__aeabi_dcmpeq>
 800d480:	4681      	mov	r9, r0
 800d482:	b168      	cbz	r0, 800d4a0 <_dtoa_r+0xc8>
 800d484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d486:	2301      	movs	r3, #1
 800d488:	6013      	str	r3, [r2, #0]
 800d48a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f000 8524 	beq.w	800deda <_dtoa_r+0xb02>
 800d492:	4b9a      	ldr	r3, [pc, #616]	; (800d6fc <_dtoa_r+0x324>)
 800d494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d496:	f103 3bff 	add.w	fp, r3, #4294967295
 800d49a:	6013      	str	r3, [r2, #0]
 800d49c:	f000 bd28 	b.w	800def0 <_dtoa_r+0xb18>
 800d4a0:	aa14      	add	r2, sp, #80	; 0x50
 800d4a2:	a915      	add	r1, sp, #84	; 0x54
 800d4a4:	ec47 6b10 	vmov	d0, r6, r7
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f001 f9c8 	bl	800e83e <__d2b>
 800d4ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d4b2:	9004      	str	r0, [sp, #16]
 800d4b4:	2d00      	cmp	r5, #0
 800d4b6:	d07c      	beq.n	800d5b2 <_dtoa_r+0x1da>
 800d4b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d4bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d4c0:	46b2      	mov	sl, r6
 800d4c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d4c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d4ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	4b8b      	ldr	r3, [pc, #556]	; (800d700 <_dtoa_r+0x328>)
 800d4d2:	4650      	mov	r0, sl
 800d4d4:	4659      	mov	r1, fp
 800d4d6:	f7f2 fe97 	bl	8000208 <__aeabi_dsub>
 800d4da:	a381      	add	r3, pc, #516	; (adr r3, 800d6e0 <_dtoa_r+0x308>)
 800d4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e0:	f7f3 f84a 	bl	8000578 <__aeabi_dmul>
 800d4e4:	a380      	add	r3, pc, #512	; (adr r3, 800d6e8 <_dtoa_r+0x310>)
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	f7f2 fe8f 	bl	800020c <__adddf3>
 800d4ee:	4606      	mov	r6, r0
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	460f      	mov	r7, r1
 800d4f4:	f7f2 ffd6 	bl	80004a4 <__aeabi_i2d>
 800d4f8:	a37d      	add	r3, pc, #500	; (adr r3, 800d6f0 <_dtoa_r+0x318>)
 800d4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fe:	f7f3 f83b 	bl	8000578 <__aeabi_dmul>
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	4630      	mov	r0, r6
 800d508:	4639      	mov	r1, r7
 800d50a:	f7f2 fe7f 	bl	800020c <__adddf3>
 800d50e:	4606      	mov	r6, r0
 800d510:	460f      	mov	r7, r1
 800d512:	f7f3 fae1 	bl	8000ad8 <__aeabi_d2iz>
 800d516:	2200      	movs	r2, #0
 800d518:	4682      	mov	sl, r0
 800d51a:	2300      	movs	r3, #0
 800d51c:	4630      	mov	r0, r6
 800d51e:	4639      	mov	r1, r7
 800d520:	f7f3 fa9c 	bl	8000a5c <__aeabi_dcmplt>
 800d524:	b148      	cbz	r0, 800d53a <_dtoa_r+0x162>
 800d526:	4650      	mov	r0, sl
 800d528:	f7f2 ffbc 	bl	80004a4 <__aeabi_i2d>
 800d52c:	4632      	mov	r2, r6
 800d52e:	463b      	mov	r3, r7
 800d530:	f7f3 fa8a 	bl	8000a48 <__aeabi_dcmpeq>
 800d534:	b908      	cbnz	r0, 800d53a <_dtoa_r+0x162>
 800d536:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d53a:	f1ba 0f16 	cmp.w	sl, #22
 800d53e:	d859      	bhi.n	800d5f4 <_dtoa_r+0x21c>
 800d540:	4970      	ldr	r1, [pc, #448]	; (800d704 <_dtoa_r+0x32c>)
 800d542:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d54a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d54e:	f7f3 faa3 	bl	8000a98 <__aeabi_dcmpgt>
 800d552:	2800      	cmp	r0, #0
 800d554:	d050      	beq.n	800d5f8 <_dtoa_r+0x220>
 800d556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d55a:	2300      	movs	r3, #0
 800d55c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d55e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d560:	1b5d      	subs	r5, r3, r5
 800d562:	f1b5 0801 	subs.w	r8, r5, #1
 800d566:	bf49      	itett	mi
 800d568:	f1c5 0301 	rsbmi	r3, r5, #1
 800d56c:	2300      	movpl	r3, #0
 800d56e:	9305      	strmi	r3, [sp, #20]
 800d570:	f04f 0800 	movmi.w	r8, #0
 800d574:	bf58      	it	pl
 800d576:	9305      	strpl	r3, [sp, #20]
 800d578:	f1ba 0f00 	cmp.w	sl, #0
 800d57c:	db3e      	blt.n	800d5fc <_dtoa_r+0x224>
 800d57e:	2300      	movs	r3, #0
 800d580:	44d0      	add	r8, sl
 800d582:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d586:	9307      	str	r3, [sp, #28]
 800d588:	9b06      	ldr	r3, [sp, #24]
 800d58a:	2b09      	cmp	r3, #9
 800d58c:	f200 8090 	bhi.w	800d6b0 <_dtoa_r+0x2d8>
 800d590:	2b05      	cmp	r3, #5
 800d592:	bfc4      	itt	gt
 800d594:	3b04      	subgt	r3, #4
 800d596:	9306      	strgt	r3, [sp, #24]
 800d598:	9b06      	ldr	r3, [sp, #24]
 800d59a:	f1a3 0302 	sub.w	r3, r3, #2
 800d59e:	bfcc      	ite	gt
 800d5a0:	2500      	movgt	r5, #0
 800d5a2:	2501      	movle	r5, #1
 800d5a4:	2b03      	cmp	r3, #3
 800d5a6:	f200 808f 	bhi.w	800d6c8 <_dtoa_r+0x2f0>
 800d5aa:	e8df f003 	tbb	[pc, r3]
 800d5ae:	7f7d      	.short	0x7f7d
 800d5b0:	7131      	.short	0x7131
 800d5b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d5b6:	441d      	add	r5, r3
 800d5b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d5bc:	2820      	cmp	r0, #32
 800d5be:	dd13      	ble.n	800d5e8 <_dtoa_r+0x210>
 800d5c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d5c4:	9b00      	ldr	r3, [sp, #0]
 800d5c6:	fa08 f800 	lsl.w	r8, r8, r0
 800d5ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d5ce:	fa23 f000 	lsr.w	r0, r3, r0
 800d5d2:	ea48 0000 	orr.w	r0, r8, r0
 800d5d6:	f7f2 ff55 	bl	8000484 <__aeabi_ui2d>
 800d5da:	2301      	movs	r3, #1
 800d5dc:	4682      	mov	sl, r0
 800d5de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d5e2:	3d01      	subs	r5, #1
 800d5e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d5e6:	e772      	b.n	800d4ce <_dtoa_r+0xf6>
 800d5e8:	9b00      	ldr	r3, [sp, #0]
 800d5ea:	f1c0 0020 	rsb	r0, r0, #32
 800d5ee:	fa03 f000 	lsl.w	r0, r3, r0
 800d5f2:	e7f0      	b.n	800d5d6 <_dtoa_r+0x1fe>
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	e7b1      	b.n	800d55c <_dtoa_r+0x184>
 800d5f8:	900f      	str	r0, [sp, #60]	; 0x3c
 800d5fa:	e7b0      	b.n	800d55e <_dtoa_r+0x186>
 800d5fc:	9b05      	ldr	r3, [sp, #20]
 800d5fe:	eba3 030a 	sub.w	r3, r3, sl
 800d602:	9305      	str	r3, [sp, #20]
 800d604:	f1ca 0300 	rsb	r3, sl, #0
 800d608:	9307      	str	r3, [sp, #28]
 800d60a:	2300      	movs	r3, #0
 800d60c:	930e      	str	r3, [sp, #56]	; 0x38
 800d60e:	e7bb      	b.n	800d588 <_dtoa_r+0x1b0>
 800d610:	2301      	movs	r3, #1
 800d612:	930a      	str	r3, [sp, #40]	; 0x28
 800d614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d616:	2b00      	cmp	r3, #0
 800d618:	dd59      	ble.n	800d6ce <_dtoa_r+0x2f6>
 800d61a:	9302      	str	r3, [sp, #8]
 800d61c:	4699      	mov	r9, r3
 800d61e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d620:	2200      	movs	r2, #0
 800d622:	6072      	str	r2, [r6, #4]
 800d624:	2204      	movs	r2, #4
 800d626:	f102 0014 	add.w	r0, r2, #20
 800d62a:	4298      	cmp	r0, r3
 800d62c:	6871      	ldr	r1, [r6, #4]
 800d62e:	d953      	bls.n	800d6d8 <_dtoa_r+0x300>
 800d630:	4620      	mov	r0, r4
 800d632:	f000 fe77 	bl	800e324 <_Balloc>
 800d636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d638:	6030      	str	r0, [r6, #0]
 800d63a:	f1b9 0f0e 	cmp.w	r9, #14
 800d63e:	f8d3 b000 	ldr.w	fp, [r3]
 800d642:	f200 80e6 	bhi.w	800d812 <_dtoa_r+0x43a>
 800d646:	2d00      	cmp	r5, #0
 800d648:	f000 80e3 	beq.w	800d812 <_dtoa_r+0x43a>
 800d64c:	ed9d 7b00 	vldr	d7, [sp]
 800d650:	f1ba 0f00 	cmp.w	sl, #0
 800d654:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d658:	dd74      	ble.n	800d744 <_dtoa_r+0x36c>
 800d65a:	4a2a      	ldr	r2, [pc, #168]	; (800d704 <_dtoa_r+0x32c>)
 800d65c:	f00a 030f 	and.w	r3, sl, #15
 800d660:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d664:	ed93 7b00 	vldr	d7, [r3]
 800d668:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d66c:	06f0      	lsls	r0, r6, #27
 800d66e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d672:	d565      	bpl.n	800d740 <_dtoa_r+0x368>
 800d674:	4b24      	ldr	r3, [pc, #144]	; (800d708 <_dtoa_r+0x330>)
 800d676:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d67a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d67e:	f7f3 f8a5 	bl	80007cc <__aeabi_ddiv>
 800d682:	e9cd 0100 	strd	r0, r1, [sp]
 800d686:	f006 060f 	and.w	r6, r6, #15
 800d68a:	2503      	movs	r5, #3
 800d68c:	4f1e      	ldr	r7, [pc, #120]	; (800d708 <_dtoa_r+0x330>)
 800d68e:	e04c      	b.n	800d72a <_dtoa_r+0x352>
 800d690:	2301      	movs	r3, #1
 800d692:	930a      	str	r3, [sp, #40]	; 0x28
 800d694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d696:	4453      	add	r3, sl
 800d698:	f103 0901 	add.w	r9, r3, #1
 800d69c:	9302      	str	r3, [sp, #8]
 800d69e:	464b      	mov	r3, r9
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	bfb8      	it	lt
 800d6a4:	2301      	movlt	r3, #1
 800d6a6:	e7ba      	b.n	800d61e <_dtoa_r+0x246>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	e7b2      	b.n	800d612 <_dtoa_r+0x23a>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	e7f0      	b.n	800d692 <_dtoa_r+0x2ba>
 800d6b0:	2501      	movs	r5, #1
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	9306      	str	r3, [sp, #24]
 800d6b6:	950a      	str	r5, [sp, #40]	; 0x28
 800d6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6bc:	9302      	str	r3, [sp, #8]
 800d6be:	4699      	mov	r9, r3
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	2312      	movs	r3, #18
 800d6c4:	920b      	str	r2, [sp, #44]	; 0x2c
 800d6c6:	e7aa      	b.n	800d61e <_dtoa_r+0x246>
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	930a      	str	r3, [sp, #40]	; 0x28
 800d6cc:	e7f4      	b.n	800d6b8 <_dtoa_r+0x2e0>
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	9302      	str	r3, [sp, #8]
 800d6d2:	4699      	mov	r9, r3
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	e7f5      	b.n	800d6c4 <_dtoa_r+0x2ec>
 800d6d8:	3101      	adds	r1, #1
 800d6da:	6071      	str	r1, [r6, #4]
 800d6dc:	0052      	lsls	r2, r2, #1
 800d6de:	e7a2      	b.n	800d626 <_dtoa_r+0x24e>
 800d6e0:	636f4361 	.word	0x636f4361
 800d6e4:	3fd287a7 	.word	0x3fd287a7
 800d6e8:	8b60c8b3 	.word	0x8b60c8b3
 800d6ec:	3fc68a28 	.word	0x3fc68a28
 800d6f0:	509f79fb 	.word	0x509f79fb
 800d6f4:	3fd34413 	.word	0x3fd34413
 800d6f8:	7ff00000 	.word	0x7ff00000
 800d6fc:	0800eb95 	.word	0x0800eb95
 800d700:	3ff80000 	.word	0x3ff80000
 800d704:	0800ec30 	.word	0x0800ec30
 800d708:	0800ec08 	.word	0x0800ec08
 800d70c:	0800eb9f 	.word	0x0800eb9f
 800d710:	07f1      	lsls	r1, r6, #31
 800d712:	d508      	bpl.n	800d726 <_dtoa_r+0x34e>
 800d714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d71c:	f7f2 ff2c 	bl	8000578 <__aeabi_dmul>
 800d720:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d724:	3501      	adds	r5, #1
 800d726:	1076      	asrs	r6, r6, #1
 800d728:	3708      	adds	r7, #8
 800d72a:	2e00      	cmp	r6, #0
 800d72c:	d1f0      	bne.n	800d710 <_dtoa_r+0x338>
 800d72e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d732:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d736:	f7f3 f849 	bl	80007cc <__aeabi_ddiv>
 800d73a:	e9cd 0100 	strd	r0, r1, [sp]
 800d73e:	e01a      	b.n	800d776 <_dtoa_r+0x39e>
 800d740:	2502      	movs	r5, #2
 800d742:	e7a3      	b.n	800d68c <_dtoa_r+0x2b4>
 800d744:	f000 80a0 	beq.w	800d888 <_dtoa_r+0x4b0>
 800d748:	f1ca 0600 	rsb	r6, sl, #0
 800d74c:	4b9f      	ldr	r3, [pc, #636]	; (800d9cc <_dtoa_r+0x5f4>)
 800d74e:	4fa0      	ldr	r7, [pc, #640]	; (800d9d0 <_dtoa_r+0x5f8>)
 800d750:	f006 020f 	and.w	r2, r6, #15
 800d754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d760:	f7f2 ff0a 	bl	8000578 <__aeabi_dmul>
 800d764:	e9cd 0100 	strd	r0, r1, [sp]
 800d768:	1136      	asrs	r6, r6, #4
 800d76a:	2300      	movs	r3, #0
 800d76c:	2502      	movs	r5, #2
 800d76e:	2e00      	cmp	r6, #0
 800d770:	d17f      	bne.n	800d872 <_dtoa_r+0x49a>
 800d772:	2b00      	cmp	r3, #0
 800d774:	d1e1      	bne.n	800d73a <_dtoa_r+0x362>
 800d776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 8087 	beq.w	800d88c <_dtoa_r+0x4b4>
 800d77e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d782:	2200      	movs	r2, #0
 800d784:	4b93      	ldr	r3, [pc, #588]	; (800d9d4 <_dtoa_r+0x5fc>)
 800d786:	4630      	mov	r0, r6
 800d788:	4639      	mov	r1, r7
 800d78a:	f7f3 f967 	bl	8000a5c <__aeabi_dcmplt>
 800d78e:	2800      	cmp	r0, #0
 800d790:	d07c      	beq.n	800d88c <_dtoa_r+0x4b4>
 800d792:	f1b9 0f00 	cmp.w	r9, #0
 800d796:	d079      	beq.n	800d88c <_dtoa_r+0x4b4>
 800d798:	9b02      	ldr	r3, [sp, #8]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	dd35      	ble.n	800d80a <_dtoa_r+0x432>
 800d79e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d7a2:	9308      	str	r3, [sp, #32]
 800d7a4:	4639      	mov	r1, r7
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	4b8b      	ldr	r3, [pc, #556]	; (800d9d8 <_dtoa_r+0x600>)
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	f7f2 fee4 	bl	8000578 <__aeabi_dmul>
 800d7b0:	e9cd 0100 	strd	r0, r1, [sp]
 800d7b4:	9f02      	ldr	r7, [sp, #8]
 800d7b6:	3501      	adds	r5, #1
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	f7f2 fe73 	bl	80004a4 <__aeabi_i2d>
 800d7be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7c2:	f7f2 fed9 	bl	8000578 <__aeabi_dmul>
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	4b84      	ldr	r3, [pc, #528]	; (800d9dc <_dtoa_r+0x604>)
 800d7ca:	f7f2 fd1f 	bl	800020c <__adddf3>
 800d7ce:	4605      	mov	r5, r0
 800d7d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d7d4:	2f00      	cmp	r7, #0
 800d7d6:	d15d      	bne.n	800d894 <_dtoa_r+0x4bc>
 800d7d8:	2200      	movs	r2, #0
 800d7da:	4b81      	ldr	r3, [pc, #516]	; (800d9e0 <_dtoa_r+0x608>)
 800d7dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7e0:	f7f2 fd12 	bl	8000208 <__aeabi_dsub>
 800d7e4:	462a      	mov	r2, r5
 800d7e6:	4633      	mov	r3, r6
 800d7e8:	e9cd 0100 	strd	r0, r1, [sp]
 800d7ec:	f7f3 f954 	bl	8000a98 <__aeabi_dcmpgt>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	f040 8288 	bne.w	800dd06 <_dtoa_r+0x92e>
 800d7f6:	462a      	mov	r2, r5
 800d7f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d7fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d800:	f7f3 f92c 	bl	8000a5c <__aeabi_dcmplt>
 800d804:	2800      	cmp	r0, #0
 800d806:	f040 827c 	bne.w	800dd02 <_dtoa_r+0x92a>
 800d80a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d80e:	e9cd 2300 	strd	r2, r3, [sp]
 800d812:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d814:	2b00      	cmp	r3, #0
 800d816:	f2c0 8150 	blt.w	800daba <_dtoa_r+0x6e2>
 800d81a:	f1ba 0f0e 	cmp.w	sl, #14
 800d81e:	f300 814c 	bgt.w	800daba <_dtoa_r+0x6e2>
 800d822:	4b6a      	ldr	r3, [pc, #424]	; (800d9cc <_dtoa_r+0x5f4>)
 800d824:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d828:	ed93 7b00 	vldr	d7, [r3]
 800d82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d82e:	2b00      	cmp	r3, #0
 800d830:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d834:	f280 80d8 	bge.w	800d9e8 <_dtoa_r+0x610>
 800d838:	f1b9 0f00 	cmp.w	r9, #0
 800d83c:	f300 80d4 	bgt.w	800d9e8 <_dtoa_r+0x610>
 800d840:	f040 825e 	bne.w	800dd00 <_dtoa_r+0x928>
 800d844:	2200      	movs	r2, #0
 800d846:	4b66      	ldr	r3, [pc, #408]	; (800d9e0 <_dtoa_r+0x608>)
 800d848:	ec51 0b17 	vmov	r0, r1, d7
 800d84c:	f7f2 fe94 	bl	8000578 <__aeabi_dmul>
 800d850:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d854:	f7f3 f916 	bl	8000a84 <__aeabi_dcmpge>
 800d858:	464f      	mov	r7, r9
 800d85a:	464e      	mov	r6, r9
 800d85c:	2800      	cmp	r0, #0
 800d85e:	f040 8234 	bne.w	800dcca <_dtoa_r+0x8f2>
 800d862:	2331      	movs	r3, #49	; 0x31
 800d864:	f10b 0501 	add.w	r5, fp, #1
 800d868:	f88b 3000 	strb.w	r3, [fp]
 800d86c:	f10a 0a01 	add.w	sl, sl, #1
 800d870:	e22f      	b.n	800dcd2 <_dtoa_r+0x8fa>
 800d872:	07f2      	lsls	r2, r6, #31
 800d874:	d505      	bpl.n	800d882 <_dtoa_r+0x4aa>
 800d876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d87a:	f7f2 fe7d 	bl	8000578 <__aeabi_dmul>
 800d87e:	3501      	adds	r5, #1
 800d880:	2301      	movs	r3, #1
 800d882:	1076      	asrs	r6, r6, #1
 800d884:	3708      	adds	r7, #8
 800d886:	e772      	b.n	800d76e <_dtoa_r+0x396>
 800d888:	2502      	movs	r5, #2
 800d88a:	e774      	b.n	800d776 <_dtoa_r+0x39e>
 800d88c:	f8cd a020 	str.w	sl, [sp, #32]
 800d890:	464f      	mov	r7, r9
 800d892:	e791      	b.n	800d7b8 <_dtoa_r+0x3e0>
 800d894:	4b4d      	ldr	r3, [pc, #308]	; (800d9cc <_dtoa_r+0x5f4>)
 800d896:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d89a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d047      	beq.n	800d934 <_dtoa_r+0x55c>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	2000      	movs	r0, #0
 800d8aa:	494e      	ldr	r1, [pc, #312]	; (800d9e4 <_dtoa_r+0x60c>)
 800d8ac:	f7f2 ff8e 	bl	80007cc <__aeabi_ddiv>
 800d8b0:	462a      	mov	r2, r5
 800d8b2:	4633      	mov	r3, r6
 800d8b4:	f7f2 fca8 	bl	8000208 <__aeabi_dsub>
 800d8b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d8bc:	465d      	mov	r5, fp
 800d8be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8c2:	f7f3 f909 	bl	8000ad8 <__aeabi_d2iz>
 800d8c6:	4606      	mov	r6, r0
 800d8c8:	f7f2 fdec 	bl	80004a4 <__aeabi_i2d>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8d4:	f7f2 fc98 	bl	8000208 <__aeabi_dsub>
 800d8d8:	3630      	adds	r6, #48	; 0x30
 800d8da:	f805 6b01 	strb.w	r6, [r5], #1
 800d8de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d8e2:	e9cd 0100 	strd	r0, r1, [sp]
 800d8e6:	f7f3 f8b9 	bl	8000a5c <__aeabi_dcmplt>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	d163      	bne.n	800d9b6 <_dtoa_r+0x5de>
 800d8ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	4937      	ldr	r1, [pc, #220]	; (800d9d4 <_dtoa_r+0x5fc>)
 800d8f6:	f7f2 fc87 	bl	8000208 <__aeabi_dsub>
 800d8fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d8fe:	f7f3 f8ad 	bl	8000a5c <__aeabi_dcmplt>
 800d902:	2800      	cmp	r0, #0
 800d904:	f040 80b7 	bne.w	800da76 <_dtoa_r+0x69e>
 800d908:	eba5 030b 	sub.w	r3, r5, fp
 800d90c:	429f      	cmp	r7, r3
 800d90e:	f77f af7c 	ble.w	800d80a <_dtoa_r+0x432>
 800d912:	2200      	movs	r2, #0
 800d914:	4b30      	ldr	r3, [pc, #192]	; (800d9d8 <_dtoa_r+0x600>)
 800d916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d91a:	f7f2 fe2d 	bl	8000578 <__aeabi_dmul>
 800d91e:	2200      	movs	r2, #0
 800d920:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d924:	4b2c      	ldr	r3, [pc, #176]	; (800d9d8 <_dtoa_r+0x600>)
 800d926:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d92a:	f7f2 fe25 	bl	8000578 <__aeabi_dmul>
 800d92e:	e9cd 0100 	strd	r0, r1, [sp]
 800d932:	e7c4      	b.n	800d8be <_dtoa_r+0x4e6>
 800d934:	462a      	mov	r2, r5
 800d936:	4633      	mov	r3, r6
 800d938:	f7f2 fe1e 	bl	8000578 <__aeabi_dmul>
 800d93c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d940:	eb0b 0507 	add.w	r5, fp, r7
 800d944:	465e      	mov	r6, fp
 800d946:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d94a:	f7f3 f8c5 	bl	8000ad8 <__aeabi_d2iz>
 800d94e:	4607      	mov	r7, r0
 800d950:	f7f2 fda8 	bl	80004a4 <__aeabi_i2d>
 800d954:	3730      	adds	r7, #48	; 0x30
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d95e:	f7f2 fc53 	bl	8000208 <__aeabi_dsub>
 800d962:	f806 7b01 	strb.w	r7, [r6], #1
 800d966:	42ae      	cmp	r6, r5
 800d968:	e9cd 0100 	strd	r0, r1, [sp]
 800d96c:	f04f 0200 	mov.w	r2, #0
 800d970:	d126      	bne.n	800d9c0 <_dtoa_r+0x5e8>
 800d972:	4b1c      	ldr	r3, [pc, #112]	; (800d9e4 <_dtoa_r+0x60c>)
 800d974:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d978:	f7f2 fc48 	bl	800020c <__adddf3>
 800d97c:	4602      	mov	r2, r0
 800d97e:	460b      	mov	r3, r1
 800d980:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d984:	f7f3 f888 	bl	8000a98 <__aeabi_dcmpgt>
 800d988:	2800      	cmp	r0, #0
 800d98a:	d174      	bne.n	800da76 <_dtoa_r+0x69e>
 800d98c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d990:	2000      	movs	r0, #0
 800d992:	4914      	ldr	r1, [pc, #80]	; (800d9e4 <_dtoa_r+0x60c>)
 800d994:	f7f2 fc38 	bl	8000208 <__aeabi_dsub>
 800d998:	4602      	mov	r2, r0
 800d99a:	460b      	mov	r3, r1
 800d99c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9a0:	f7f3 f85c 	bl	8000a5c <__aeabi_dcmplt>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	f43f af30 	beq.w	800d80a <_dtoa_r+0x432>
 800d9aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d9ae:	2b30      	cmp	r3, #48	; 0x30
 800d9b0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d9b4:	d002      	beq.n	800d9bc <_dtoa_r+0x5e4>
 800d9b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d9ba:	e04a      	b.n	800da52 <_dtoa_r+0x67a>
 800d9bc:	4615      	mov	r5, r2
 800d9be:	e7f4      	b.n	800d9aa <_dtoa_r+0x5d2>
 800d9c0:	4b05      	ldr	r3, [pc, #20]	; (800d9d8 <_dtoa_r+0x600>)
 800d9c2:	f7f2 fdd9 	bl	8000578 <__aeabi_dmul>
 800d9c6:	e9cd 0100 	strd	r0, r1, [sp]
 800d9ca:	e7bc      	b.n	800d946 <_dtoa_r+0x56e>
 800d9cc:	0800ec30 	.word	0x0800ec30
 800d9d0:	0800ec08 	.word	0x0800ec08
 800d9d4:	3ff00000 	.word	0x3ff00000
 800d9d8:	40240000 	.word	0x40240000
 800d9dc:	401c0000 	.word	0x401c0000
 800d9e0:	40140000 	.word	0x40140000
 800d9e4:	3fe00000 	.word	0x3fe00000
 800d9e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d9ec:	465d      	mov	r5, fp
 800d9ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	4639      	mov	r1, r7
 800d9f6:	f7f2 fee9 	bl	80007cc <__aeabi_ddiv>
 800d9fa:	f7f3 f86d 	bl	8000ad8 <__aeabi_d2iz>
 800d9fe:	4680      	mov	r8, r0
 800da00:	f7f2 fd50 	bl	80004a4 <__aeabi_i2d>
 800da04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da08:	f7f2 fdb6 	bl	8000578 <__aeabi_dmul>
 800da0c:	4602      	mov	r2, r0
 800da0e:	460b      	mov	r3, r1
 800da10:	4630      	mov	r0, r6
 800da12:	4639      	mov	r1, r7
 800da14:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800da18:	f7f2 fbf6 	bl	8000208 <__aeabi_dsub>
 800da1c:	f805 6b01 	strb.w	r6, [r5], #1
 800da20:	eba5 060b 	sub.w	r6, r5, fp
 800da24:	45b1      	cmp	r9, r6
 800da26:	4602      	mov	r2, r0
 800da28:	460b      	mov	r3, r1
 800da2a:	d139      	bne.n	800daa0 <_dtoa_r+0x6c8>
 800da2c:	f7f2 fbee 	bl	800020c <__adddf3>
 800da30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da34:	4606      	mov	r6, r0
 800da36:	460f      	mov	r7, r1
 800da38:	f7f3 f82e 	bl	8000a98 <__aeabi_dcmpgt>
 800da3c:	b9c8      	cbnz	r0, 800da72 <_dtoa_r+0x69a>
 800da3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da42:	4630      	mov	r0, r6
 800da44:	4639      	mov	r1, r7
 800da46:	f7f2 ffff 	bl	8000a48 <__aeabi_dcmpeq>
 800da4a:	b110      	cbz	r0, 800da52 <_dtoa_r+0x67a>
 800da4c:	f018 0f01 	tst.w	r8, #1
 800da50:	d10f      	bne.n	800da72 <_dtoa_r+0x69a>
 800da52:	9904      	ldr	r1, [sp, #16]
 800da54:	4620      	mov	r0, r4
 800da56:	f000 fc99 	bl	800e38c <_Bfree>
 800da5a:	2300      	movs	r3, #0
 800da5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800da5e:	702b      	strb	r3, [r5, #0]
 800da60:	f10a 0301 	add.w	r3, sl, #1
 800da64:	6013      	str	r3, [r2, #0]
 800da66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f000 8241 	beq.w	800def0 <_dtoa_r+0xb18>
 800da6e:	601d      	str	r5, [r3, #0]
 800da70:	e23e      	b.n	800def0 <_dtoa_r+0xb18>
 800da72:	f8cd a020 	str.w	sl, [sp, #32]
 800da76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800da7a:	2a39      	cmp	r2, #57	; 0x39
 800da7c:	f105 33ff 	add.w	r3, r5, #4294967295
 800da80:	d108      	bne.n	800da94 <_dtoa_r+0x6bc>
 800da82:	459b      	cmp	fp, r3
 800da84:	d10a      	bne.n	800da9c <_dtoa_r+0x6c4>
 800da86:	9b08      	ldr	r3, [sp, #32]
 800da88:	3301      	adds	r3, #1
 800da8a:	9308      	str	r3, [sp, #32]
 800da8c:	2330      	movs	r3, #48	; 0x30
 800da8e:	f88b 3000 	strb.w	r3, [fp]
 800da92:	465b      	mov	r3, fp
 800da94:	781a      	ldrb	r2, [r3, #0]
 800da96:	3201      	adds	r2, #1
 800da98:	701a      	strb	r2, [r3, #0]
 800da9a:	e78c      	b.n	800d9b6 <_dtoa_r+0x5de>
 800da9c:	461d      	mov	r5, r3
 800da9e:	e7ea      	b.n	800da76 <_dtoa_r+0x69e>
 800daa0:	2200      	movs	r2, #0
 800daa2:	4b9b      	ldr	r3, [pc, #620]	; (800dd10 <_dtoa_r+0x938>)
 800daa4:	f7f2 fd68 	bl	8000578 <__aeabi_dmul>
 800daa8:	2200      	movs	r2, #0
 800daaa:	2300      	movs	r3, #0
 800daac:	4606      	mov	r6, r0
 800daae:	460f      	mov	r7, r1
 800dab0:	f7f2 ffca 	bl	8000a48 <__aeabi_dcmpeq>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d09a      	beq.n	800d9ee <_dtoa_r+0x616>
 800dab8:	e7cb      	b.n	800da52 <_dtoa_r+0x67a>
 800daba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dabc:	2a00      	cmp	r2, #0
 800dabe:	f000 808b 	beq.w	800dbd8 <_dtoa_r+0x800>
 800dac2:	9a06      	ldr	r2, [sp, #24]
 800dac4:	2a01      	cmp	r2, #1
 800dac6:	dc6e      	bgt.n	800dba6 <_dtoa_r+0x7ce>
 800dac8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800daca:	2a00      	cmp	r2, #0
 800dacc:	d067      	beq.n	800db9e <_dtoa_r+0x7c6>
 800dace:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dad2:	9f07      	ldr	r7, [sp, #28]
 800dad4:	9d05      	ldr	r5, [sp, #20]
 800dad6:	9a05      	ldr	r2, [sp, #20]
 800dad8:	2101      	movs	r1, #1
 800dada:	441a      	add	r2, r3
 800dadc:	4620      	mov	r0, r4
 800dade:	9205      	str	r2, [sp, #20]
 800dae0:	4498      	add	r8, r3
 800dae2:	f000 fcf3 	bl	800e4cc <__i2b>
 800dae6:	4606      	mov	r6, r0
 800dae8:	2d00      	cmp	r5, #0
 800daea:	dd0c      	ble.n	800db06 <_dtoa_r+0x72e>
 800daec:	f1b8 0f00 	cmp.w	r8, #0
 800daf0:	dd09      	ble.n	800db06 <_dtoa_r+0x72e>
 800daf2:	4545      	cmp	r5, r8
 800daf4:	9a05      	ldr	r2, [sp, #20]
 800daf6:	462b      	mov	r3, r5
 800daf8:	bfa8      	it	ge
 800dafa:	4643      	movge	r3, r8
 800dafc:	1ad2      	subs	r2, r2, r3
 800dafe:	9205      	str	r2, [sp, #20]
 800db00:	1aed      	subs	r5, r5, r3
 800db02:	eba8 0803 	sub.w	r8, r8, r3
 800db06:	9b07      	ldr	r3, [sp, #28]
 800db08:	b1eb      	cbz	r3, 800db46 <_dtoa_r+0x76e>
 800db0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d067      	beq.n	800dbe0 <_dtoa_r+0x808>
 800db10:	b18f      	cbz	r7, 800db36 <_dtoa_r+0x75e>
 800db12:	4631      	mov	r1, r6
 800db14:	463a      	mov	r2, r7
 800db16:	4620      	mov	r0, r4
 800db18:	f000 fd78 	bl	800e60c <__pow5mult>
 800db1c:	9a04      	ldr	r2, [sp, #16]
 800db1e:	4601      	mov	r1, r0
 800db20:	4606      	mov	r6, r0
 800db22:	4620      	mov	r0, r4
 800db24:	f000 fcdb 	bl	800e4de <__multiply>
 800db28:	9904      	ldr	r1, [sp, #16]
 800db2a:	9008      	str	r0, [sp, #32]
 800db2c:	4620      	mov	r0, r4
 800db2e:	f000 fc2d 	bl	800e38c <_Bfree>
 800db32:	9b08      	ldr	r3, [sp, #32]
 800db34:	9304      	str	r3, [sp, #16]
 800db36:	9b07      	ldr	r3, [sp, #28]
 800db38:	1bda      	subs	r2, r3, r7
 800db3a:	d004      	beq.n	800db46 <_dtoa_r+0x76e>
 800db3c:	9904      	ldr	r1, [sp, #16]
 800db3e:	4620      	mov	r0, r4
 800db40:	f000 fd64 	bl	800e60c <__pow5mult>
 800db44:	9004      	str	r0, [sp, #16]
 800db46:	2101      	movs	r1, #1
 800db48:	4620      	mov	r0, r4
 800db4a:	f000 fcbf 	bl	800e4cc <__i2b>
 800db4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db50:	4607      	mov	r7, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	f000 81d0 	beq.w	800def8 <_dtoa_r+0xb20>
 800db58:	461a      	mov	r2, r3
 800db5a:	4601      	mov	r1, r0
 800db5c:	4620      	mov	r0, r4
 800db5e:	f000 fd55 	bl	800e60c <__pow5mult>
 800db62:	9b06      	ldr	r3, [sp, #24]
 800db64:	2b01      	cmp	r3, #1
 800db66:	4607      	mov	r7, r0
 800db68:	dc40      	bgt.n	800dbec <_dtoa_r+0x814>
 800db6a:	9b00      	ldr	r3, [sp, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d139      	bne.n	800dbe4 <_dtoa_r+0x80c>
 800db70:	9b01      	ldr	r3, [sp, #4]
 800db72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db76:	2b00      	cmp	r3, #0
 800db78:	d136      	bne.n	800dbe8 <_dtoa_r+0x810>
 800db7a:	9b01      	ldr	r3, [sp, #4]
 800db7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db80:	0d1b      	lsrs	r3, r3, #20
 800db82:	051b      	lsls	r3, r3, #20
 800db84:	b12b      	cbz	r3, 800db92 <_dtoa_r+0x7ba>
 800db86:	9b05      	ldr	r3, [sp, #20]
 800db88:	3301      	adds	r3, #1
 800db8a:	9305      	str	r3, [sp, #20]
 800db8c:	f108 0801 	add.w	r8, r8, #1
 800db90:	2301      	movs	r3, #1
 800db92:	9307      	str	r3, [sp, #28]
 800db94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db96:	2b00      	cmp	r3, #0
 800db98:	d12a      	bne.n	800dbf0 <_dtoa_r+0x818>
 800db9a:	2001      	movs	r0, #1
 800db9c:	e030      	b.n	800dc00 <_dtoa_r+0x828>
 800db9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dba0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dba4:	e795      	b.n	800dad2 <_dtoa_r+0x6fa>
 800dba6:	9b07      	ldr	r3, [sp, #28]
 800dba8:	f109 37ff 	add.w	r7, r9, #4294967295
 800dbac:	42bb      	cmp	r3, r7
 800dbae:	bfbf      	itttt	lt
 800dbb0:	9b07      	ldrlt	r3, [sp, #28]
 800dbb2:	9707      	strlt	r7, [sp, #28]
 800dbb4:	1afa      	sublt	r2, r7, r3
 800dbb6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800dbb8:	bfbb      	ittet	lt
 800dbba:	189b      	addlt	r3, r3, r2
 800dbbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800dbbe:	1bdf      	subge	r7, r3, r7
 800dbc0:	2700      	movlt	r7, #0
 800dbc2:	f1b9 0f00 	cmp.w	r9, #0
 800dbc6:	bfb5      	itete	lt
 800dbc8:	9b05      	ldrlt	r3, [sp, #20]
 800dbca:	9d05      	ldrge	r5, [sp, #20]
 800dbcc:	eba3 0509 	sublt.w	r5, r3, r9
 800dbd0:	464b      	movge	r3, r9
 800dbd2:	bfb8      	it	lt
 800dbd4:	2300      	movlt	r3, #0
 800dbd6:	e77e      	b.n	800dad6 <_dtoa_r+0x6fe>
 800dbd8:	9f07      	ldr	r7, [sp, #28]
 800dbda:	9d05      	ldr	r5, [sp, #20]
 800dbdc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800dbde:	e783      	b.n	800dae8 <_dtoa_r+0x710>
 800dbe0:	9a07      	ldr	r2, [sp, #28]
 800dbe2:	e7ab      	b.n	800db3c <_dtoa_r+0x764>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	e7d4      	b.n	800db92 <_dtoa_r+0x7ba>
 800dbe8:	9b00      	ldr	r3, [sp, #0]
 800dbea:	e7d2      	b.n	800db92 <_dtoa_r+0x7ba>
 800dbec:	2300      	movs	r3, #0
 800dbee:	9307      	str	r3, [sp, #28]
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800dbf6:	6918      	ldr	r0, [r3, #16]
 800dbf8:	f000 fc1a 	bl	800e430 <__hi0bits>
 800dbfc:	f1c0 0020 	rsb	r0, r0, #32
 800dc00:	4440      	add	r0, r8
 800dc02:	f010 001f 	ands.w	r0, r0, #31
 800dc06:	d047      	beq.n	800dc98 <_dtoa_r+0x8c0>
 800dc08:	f1c0 0320 	rsb	r3, r0, #32
 800dc0c:	2b04      	cmp	r3, #4
 800dc0e:	dd3b      	ble.n	800dc88 <_dtoa_r+0x8b0>
 800dc10:	9b05      	ldr	r3, [sp, #20]
 800dc12:	f1c0 001c 	rsb	r0, r0, #28
 800dc16:	4403      	add	r3, r0
 800dc18:	9305      	str	r3, [sp, #20]
 800dc1a:	4405      	add	r5, r0
 800dc1c:	4480      	add	r8, r0
 800dc1e:	9b05      	ldr	r3, [sp, #20]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	dd05      	ble.n	800dc30 <_dtoa_r+0x858>
 800dc24:	461a      	mov	r2, r3
 800dc26:	9904      	ldr	r1, [sp, #16]
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f000 fd3d 	bl	800e6a8 <__lshift>
 800dc2e:	9004      	str	r0, [sp, #16]
 800dc30:	f1b8 0f00 	cmp.w	r8, #0
 800dc34:	dd05      	ble.n	800dc42 <_dtoa_r+0x86a>
 800dc36:	4639      	mov	r1, r7
 800dc38:	4642      	mov	r2, r8
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f000 fd34 	bl	800e6a8 <__lshift>
 800dc40:	4607      	mov	r7, r0
 800dc42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc44:	b353      	cbz	r3, 800dc9c <_dtoa_r+0x8c4>
 800dc46:	4639      	mov	r1, r7
 800dc48:	9804      	ldr	r0, [sp, #16]
 800dc4a:	f000 fd81 	bl	800e750 <__mcmp>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	da24      	bge.n	800dc9c <_dtoa_r+0x8c4>
 800dc52:	2300      	movs	r3, #0
 800dc54:	220a      	movs	r2, #10
 800dc56:	9904      	ldr	r1, [sp, #16]
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f000 fbae 	bl	800e3ba <__multadd>
 800dc5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc60:	9004      	str	r0, [sp, #16]
 800dc62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f000 814d 	beq.w	800df06 <_dtoa_r+0xb2e>
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	4631      	mov	r1, r6
 800dc70:	220a      	movs	r2, #10
 800dc72:	4620      	mov	r0, r4
 800dc74:	f000 fba1 	bl	800e3ba <__multadd>
 800dc78:	9b02      	ldr	r3, [sp, #8]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	4606      	mov	r6, r0
 800dc7e:	dc4f      	bgt.n	800dd20 <_dtoa_r+0x948>
 800dc80:	9b06      	ldr	r3, [sp, #24]
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	dd4c      	ble.n	800dd20 <_dtoa_r+0x948>
 800dc86:	e011      	b.n	800dcac <_dtoa_r+0x8d4>
 800dc88:	d0c9      	beq.n	800dc1e <_dtoa_r+0x846>
 800dc8a:	9a05      	ldr	r2, [sp, #20]
 800dc8c:	331c      	adds	r3, #28
 800dc8e:	441a      	add	r2, r3
 800dc90:	9205      	str	r2, [sp, #20]
 800dc92:	441d      	add	r5, r3
 800dc94:	4498      	add	r8, r3
 800dc96:	e7c2      	b.n	800dc1e <_dtoa_r+0x846>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	e7f6      	b.n	800dc8a <_dtoa_r+0x8b2>
 800dc9c:	f1b9 0f00 	cmp.w	r9, #0
 800dca0:	dc38      	bgt.n	800dd14 <_dtoa_r+0x93c>
 800dca2:	9b06      	ldr	r3, [sp, #24]
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	dd35      	ble.n	800dd14 <_dtoa_r+0x93c>
 800dca8:	f8cd 9008 	str.w	r9, [sp, #8]
 800dcac:	9b02      	ldr	r3, [sp, #8]
 800dcae:	b963      	cbnz	r3, 800dcca <_dtoa_r+0x8f2>
 800dcb0:	4639      	mov	r1, r7
 800dcb2:	2205      	movs	r2, #5
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f000 fb80 	bl	800e3ba <__multadd>
 800dcba:	4601      	mov	r1, r0
 800dcbc:	4607      	mov	r7, r0
 800dcbe:	9804      	ldr	r0, [sp, #16]
 800dcc0:	f000 fd46 	bl	800e750 <__mcmp>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	f73f adcc 	bgt.w	800d862 <_dtoa_r+0x48a>
 800dcca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dccc:	465d      	mov	r5, fp
 800dcce:	ea6f 0a03 	mvn.w	sl, r3
 800dcd2:	f04f 0900 	mov.w	r9, #0
 800dcd6:	4639      	mov	r1, r7
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f000 fb57 	bl	800e38c <_Bfree>
 800dcde:	2e00      	cmp	r6, #0
 800dce0:	f43f aeb7 	beq.w	800da52 <_dtoa_r+0x67a>
 800dce4:	f1b9 0f00 	cmp.w	r9, #0
 800dce8:	d005      	beq.n	800dcf6 <_dtoa_r+0x91e>
 800dcea:	45b1      	cmp	r9, r6
 800dcec:	d003      	beq.n	800dcf6 <_dtoa_r+0x91e>
 800dcee:	4649      	mov	r1, r9
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f000 fb4b 	bl	800e38c <_Bfree>
 800dcf6:	4631      	mov	r1, r6
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	f000 fb47 	bl	800e38c <_Bfree>
 800dcfe:	e6a8      	b.n	800da52 <_dtoa_r+0x67a>
 800dd00:	2700      	movs	r7, #0
 800dd02:	463e      	mov	r6, r7
 800dd04:	e7e1      	b.n	800dcca <_dtoa_r+0x8f2>
 800dd06:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dd0a:	463e      	mov	r6, r7
 800dd0c:	e5a9      	b.n	800d862 <_dtoa_r+0x48a>
 800dd0e:	bf00      	nop
 800dd10:	40240000 	.word	0x40240000
 800dd14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd16:	f8cd 9008 	str.w	r9, [sp, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	f000 80fa 	beq.w	800df14 <_dtoa_r+0xb3c>
 800dd20:	2d00      	cmp	r5, #0
 800dd22:	dd05      	ble.n	800dd30 <_dtoa_r+0x958>
 800dd24:	4631      	mov	r1, r6
 800dd26:	462a      	mov	r2, r5
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f000 fcbd 	bl	800e6a8 <__lshift>
 800dd2e:	4606      	mov	r6, r0
 800dd30:	9b07      	ldr	r3, [sp, #28]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d04c      	beq.n	800ddd0 <_dtoa_r+0x9f8>
 800dd36:	6871      	ldr	r1, [r6, #4]
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f000 faf3 	bl	800e324 <_Balloc>
 800dd3e:	6932      	ldr	r2, [r6, #16]
 800dd40:	3202      	adds	r2, #2
 800dd42:	4605      	mov	r5, r0
 800dd44:	0092      	lsls	r2, r2, #2
 800dd46:	f106 010c 	add.w	r1, r6, #12
 800dd4a:	300c      	adds	r0, #12
 800dd4c:	f7fe fcce 	bl	800c6ec <memcpy>
 800dd50:	2201      	movs	r2, #1
 800dd52:	4629      	mov	r1, r5
 800dd54:	4620      	mov	r0, r4
 800dd56:	f000 fca7 	bl	800e6a8 <__lshift>
 800dd5a:	9b00      	ldr	r3, [sp, #0]
 800dd5c:	f8cd b014 	str.w	fp, [sp, #20]
 800dd60:	f003 0301 	and.w	r3, r3, #1
 800dd64:	46b1      	mov	r9, r6
 800dd66:	9307      	str	r3, [sp, #28]
 800dd68:	4606      	mov	r6, r0
 800dd6a:	4639      	mov	r1, r7
 800dd6c:	9804      	ldr	r0, [sp, #16]
 800dd6e:	f7ff faa5 	bl	800d2bc <quorem>
 800dd72:	4649      	mov	r1, r9
 800dd74:	4605      	mov	r5, r0
 800dd76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dd7a:	9804      	ldr	r0, [sp, #16]
 800dd7c:	f000 fce8 	bl	800e750 <__mcmp>
 800dd80:	4632      	mov	r2, r6
 800dd82:	9000      	str	r0, [sp, #0]
 800dd84:	4639      	mov	r1, r7
 800dd86:	4620      	mov	r0, r4
 800dd88:	f000 fcfc 	bl	800e784 <__mdiff>
 800dd8c:	68c3      	ldr	r3, [r0, #12]
 800dd8e:	4602      	mov	r2, r0
 800dd90:	bb03      	cbnz	r3, 800ddd4 <_dtoa_r+0x9fc>
 800dd92:	4601      	mov	r1, r0
 800dd94:	9008      	str	r0, [sp, #32]
 800dd96:	9804      	ldr	r0, [sp, #16]
 800dd98:	f000 fcda 	bl	800e750 <__mcmp>
 800dd9c:	9a08      	ldr	r2, [sp, #32]
 800dd9e:	4603      	mov	r3, r0
 800dda0:	4611      	mov	r1, r2
 800dda2:	4620      	mov	r0, r4
 800dda4:	9308      	str	r3, [sp, #32]
 800dda6:	f000 faf1 	bl	800e38c <_Bfree>
 800ddaa:	9b08      	ldr	r3, [sp, #32]
 800ddac:	b9a3      	cbnz	r3, 800ddd8 <_dtoa_r+0xa00>
 800ddae:	9a06      	ldr	r2, [sp, #24]
 800ddb0:	b992      	cbnz	r2, 800ddd8 <_dtoa_r+0xa00>
 800ddb2:	9a07      	ldr	r2, [sp, #28]
 800ddb4:	b982      	cbnz	r2, 800ddd8 <_dtoa_r+0xa00>
 800ddb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ddba:	d029      	beq.n	800de10 <_dtoa_r+0xa38>
 800ddbc:	9b00      	ldr	r3, [sp, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	dd01      	ble.n	800ddc6 <_dtoa_r+0x9ee>
 800ddc2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ddc6:	9b05      	ldr	r3, [sp, #20]
 800ddc8:	1c5d      	adds	r5, r3, #1
 800ddca:	f883 8000 	strb.w	r8, [r3]
 800ddce:	e782      	b.n	800dcd6 <_dtoa_r+0x8fe>
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	e7c2      	b.n	800dd5a <_dtoa_r+0x982>
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e7e3      	b.n	800dda0 <_dtoa_r+0x9c8>
 800ddd8:	9a00      	ldr	r2, [sp, #0]
 800ddda:	2a00      	cmp	r2, #0
 800dddc:	db04      	blt.n	800dde8 <_dtoa_r+0xa10>
 800ddde:	d125      	bne.n	800de2c <_dtoa_r+0xa54>
 800dde0:	9a06      	ldr	r2, [sp, #24]
 800dde2:	bb1a      	cbnz	r2, 800de2c <_dtoa_r+0xa54>
 800dde4:	9a07      	ldr	r2, [sp, #28]
 800dde6:	bb0a      	cbnz	r2, 800de2c <_dtoa_r+0xa54>
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	ddec      	ble.n	800ddc6 <_dtoa_r+0x9ee>
 800ddec:	2201      	movs	r2, #1
 800ddee:	9904      	ldr	r1, [sp, #16]
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	f000 fc59 	bl	800e6a8 <__lshift>
 800ddf6:	4639      	mov	r1, r7
 800ddf8:	9004      	str	r0, [sp, #16]
 800ddfa:	f000 fca9 	bl	800e750 <__mcmp>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	dc03      	bgt.n	800de0a <_dtoa_r+0xa32>
 800de02:	d1e0      	bne.n	800ddc6 <_dtoa_r+0x9ee>
 800de04:	f018 0f01 	tst.w	r8, #1
 800de08:	d0dd      	beq.n	800ddc6 <_dtoa_r+0x9ee>
 800de0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800de0e:	d1d8      	bne.n	800ddc2 <_dtoa_r+0x9ea>
 800de10:	9b05      	ldr	r3, [sp, #20]
 800de12:	9a05      	ldr	r2, [sp, #20]
 800de14:	1c5d      	adds	r5, r3, #1
 800de16:	2339      	movs	r3, #57	; 0x39
 800de18:	7013      	strb	r3, [r2, #0]
 800de1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de1e:	2b39      	cmp	r3, #57	; 0x39
 800de20:	f105 32ff 	add.w	r2, r5, #4294967295
 800de24:	d04f      	beq.n	800dec6 <_dtoa_r+0xaee>
 800de26:	3301      	adds	r3, #1
 800de28:	7013      	strb	r3, [r2, #0]
 800de2a:	e754      	b.n	800dcd6 <_dtoa_r+0x8fe>
 800de2c:	9a05      	ldr	r2, [sp, #20]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f102 0501 	add.w	r5, r2, #1
 800de34:	dd06      	ble.n	800de44 <_dtoa_r+0xa6c>
 800de36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800de3a:	d0e9      	beq.n	800de10 <_dtoa_r+0xa38>
 800de3c:	f108 0801 	add.w	r8, r8, #1
 800de40:	9b05      	ldr	r3, [sp, #20]
 800de42:	e7c2      	b.n	800ddca <_dtoa_r+0x9f2>
 800de44:	9a02      	ldr	r2, [sp, #8]
 800de46:	f805 8c01 	strb.w	r8, [r5, #-1]
 800de4a:	eba5 030b 	sub.w	r3, r5, fp
 800de4e:	4293      	cmp	r3, r2
 800de50:	d021      	beq.n	800de96 <_dtoa_r+0xabe>
 800de52:	2300      	movs	r3, #0
 800de54:	220a      	movs	r2, #10
 800de56:	9904      	ldr	r1, [sp, #16]
 800de58:	4620      	mov	r0, r4
 800de5a:	f000 faae 	bl	800e3ba <__multadd>
 800de5e:	45b1      	cmp	r9, r6
 800de60:	9004      	str	r0, [sp, #16]
 800de62:	f04f 0300 	mov.w	r3, #0
 800de66:	f04f 020a 	mov.w	r2, #10
 800de6a:	4649      	mov	r1, r9
 800de6c:	4620      	mov	r0, r4
 800de6e:	d105      	bne.n	800de7c <_dtoa_r+0xaa4>
 800de70:	f000 faa3 	bl	800e3ba <__multadd>
 800de74:	4681      	mov	r9, r0
 800de76:	4606      	mov	r6, r0
 800de78:	9505      	str	r5, [sp, #20]
 800de7a:	e776      	b.n	800dd6a <_dtoa_r+0x992>
 800de7c:	f000 fa9d 	bl	800e3ba <__multadd>
 800de80:	4631      	mov	r1, r6
 800de82:	4681      	mov	r9, r0
 800de84:	2300      	movs	r3, #0
 800de86:	220a      	movs	r2, #10
 800de88:	4620      	mov	r0, r4
 800de8a:	f000 fa96 	bl	800e3ba <__multadd>
 800de8e:	4606      	mov	r6, r0
 800de90:	e7f2      	b.n	800de78 <_dtoa_r+0xaa0>
 800de92:	f04f 0900 	mov.w	r9, #0
 800de96:	2201      	movs	r2, #1
 800de98:	9904      	ldr	r1, [sp, #16]
 800de9a:	4620      	mov	r0, r4
 800de9c:	f000 fc04 	bl	800e6a8 <__lshift>
 800dea0:	4639      	mov	r1, r7
 800dea2:	9004      	str	r0, [sp, #16]
 800dea4:	f000 fc54 	bl	800e750 <__mcmp>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	dcb6      	bgt.n	800de1a <_dtoa_r+0xa42>
 800deac:	d102      	bne.n	800deb4 <_dtoa_r+0xadc>
 800deae:	f018 0f01 	tst.w	r8, #1
 800deb2:	d1b2      	bne.n	800de1a <_dtoa_r+0xa42>
 800deb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800deb8:	2b30      	cmp	r3, #48	; 0x30
 800deba:	f105 32ff 	add.w	r2, r5, #4294967295
 800debe:	f47f af0a 	bne.w	800dcd6 <_dtoa_r+0x8fe>
 800dec2:	4615      	mov	r5, r2
 800dec4:	e7f6      	b.n	800deb4 <_dtoa_r+0xadc>
 800dec6:	4593      	cmp	fp, r2
 800dec8:	d105      	bne.n	800ded6 <_dtoa_r+0xafe>
 800deca:	2331      	movs	r3, #49	; 0x31
 800decc:	f10a 0a01 	add.w	sl, sl, #1
 800ded0:	f88b 3000 	strb.w	r3, [fp]
 800ded4:	e6ff      	b.n	800dcd6 <_dtoa_r+0x8fe>
 800ded6:	4615      	mov	r5, r2
 800ded8:	e79f      	b.n	800de1a <_dtoa_r+0xa42>
 800deda:	f8df b064 	ldr.w	fp, [pc, #100]	; 800df40 <_dtoa_r+0xb68>
 800dede:	e007      	b.n	800def0 <_dtoa_r+0xb18>
 800dee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dee2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800df44 <_dtoa_r+0xb6c>
 800dee6:	b11b      	cbz	r3, 800def0 <_dtoa_r+0xb18>
 800dee8:	f10b 0308 	add.w	r3, fp, #8
 800deec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800deee:	6013      	str	r3, [r2, #0]
 800def0:	4658      	mov	r0, fp
 800def2:	b017      	add	sp, #92	; 0x5c
 800def4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def8:	9b06      	ldr	r3, [sp, #24]
 800defa:	2b01      	cmp	r3, #1
 800defc:	f77f ae35 	ble.w	800db6a <_dtoa_r+0x792>
 800df00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df02:	9307      	str	r3, [sp, #28]
 800df04:	e649      	b.n	800db9a <_dtoa_r+0x7c2>
 800df06:	9b02      	ldr	r3, [sp, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	dc03      	bgt.n	800df14 <_dtoa_r+0xb3c>
 800df0c:	9b06      	ldr	r3, [sp, #24]
 800df0e:	2b02      	cmp	r3, #2
 800df10:	f73f aecc 	bgt.w	800dcac <_dtoa_r+0x8d4>
 800df14:	465d      	mov	r5, fp
 800df16:	4639      	mov	r1, r7
 800df18:	9804      	ldr	r0, [sp, #16]
 800df1a:	f7ff f9cf 	bl	800d2bc <quorem>
 800df1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800df22:	f805 8b01 	strb.w	r8, [r5], #1
 800df26:	9a02      	ldr	r2, [sp, #8]
 800df28:	eba5 030b 	sub.w	r3, r5, fp
 800df2c:	429a      	cmp	r2, r3
 800df2e:	ddb0      	ble.n	800de92 <_dtoa_r+0xaba>
 800df30:	2300      	movs	r3, #0
 800df32:	220a      	movs	r2, #10
 800df34:	9904      	ldr	r1, [sp, #16]
 800df36:	4620      	mov	r0, r4
 800df38:	f000 fa3f 	bl	800e3ba <__multadd>
 800df3c:	9004      	str	r0, [sp, #16]
 800df3e:	e7ea      	b.n	800df16 <_dtoa_r+0xb3e>
 800df40:	0800eb94 	.word	0x0800eb94
 800df44:	0800eb96 	.word	0x0800eb96

0800df48 <__sflush_r>:
 800df48:	898a      	ldrh	r2, [r1, #12]
 800df4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4e:	4605      	mov	r5, r0
 800df50:	0710      	lsls	r0, r2, #28
 800df52:	460c      	mov	r4, r1
 800df54:	d458      	bmi.n	800e008 <__sflush_r+0xc0>
 800df56:	684b      	ldr	r3, [r1, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	dc05      	bgt.n	800df68 <__sflush_r+0x20>
 800df5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df5e:	2b00      	cmp	r3, #0
 800df60:	dc02      	bgt.n	800df68 <__sflush_r+0x20>
 800df62:	2000      	movs	r0, #0
 800df64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df6a:	2e00      	cmp	r6, #0
 800df6c:	d0f9      	beq.n	800df62 <__sflush_r+0x1a>
 800df6e:	2300      	movs	r3, #0
 800df70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df74:	682f      	ldr	r7, [r5, #0]
 800df76:	6a21      	ldr	r1, [r4, #32]
 800df78:	602b      	str	r3, [r5, #0]
 800df7a:	d032      	beq.n	800dfe2 <__sflush_r+0x9a>
 800df7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	075a      	lsls	r2, r3, #29
 800df82:	d505      	bpl.n	800df90 <__sflush_r+0x48>
 800df84:	6863      	ldr	r3, [r4, #4]
 800df86:	1ac0      	subs	r0, r0, r3
 800df88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df8a:	b10b      	cbz	r3, 800df90 <__sflush_r+0x48>
 800df8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df8e:	1ac0      	subs	r0, r0, r3
 800df90:	2300      	movs	r3, #0
 800df92:	4602      	mov	r2, r0
 800df94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df96:	6a21      	ldr	r1, [r4, #32]
 800df98:	4628      	mov	r0, r5
 800df9a:	47b0      	blx	r6
 800df9c:	1c43      	adds	r3, r0, #1
 800df9e:	89a3      	ldrh	r3, [r4, #12]
 800dfa0:	d106      	bne.n	800dfb0 <__sflush_r+0x68>
 800dfa2:	6829      	ldr	r1, [r5, #0]
 800dfa4:	291d      	cmp	r1, #29
 800dfa6:	d848      	bhi.n	800e03a <__sflush_r+0xf2>
 800dfa8:	4a29      	ldr	r2, [pc, #164]	; (800e050 <__sflush_r+0x108>)
 800dfaa:	40ca      	lsrs	r2, r1
 800dfac:	07d6      	lsls	r6, r2, #31
 800dfae:	d544      	bpl.n	800e03a <__sflush_r+0xf2>
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	6062      	str	r2, [r4, #4]
 800dfb4:	04d9      	lsls	r1, r3, #19
 800dfb6:	6922      	ldr	r2, [r4, #16]
 800dfb8:	6022      	str	r2, [r4, #0]
 800dfba:	d504      	bpl.n	800dfc6 <__sflush_r+0x7e>
 800dfbc:	1c42      	adds	r2, r0, #1
 800dfbe:	d101      	bne.n	800dfc4 <__sflush_r+0x7c>
 800dfc0:	682b      	ldr	r3, [r5, #0]
 800dfc2:	b903      	cbnz	r3, 800dfc6 <__sflush_r+0x7e>
 800dfc4:	6560      	str	r0, [r4, #84]	; 0x54
 800dfc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfc8:	602f      	str	r7, [r5, #0]
 800dfca:	2900      	cmp	r1, #0
 800dfcc:	d0c9      	beq.n	800df62 <__sflush_r+0x1a>
 800dfce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfd2:	4299      	cmp	r1, r3
 800dfd4:	d002      	beq.n	800dfdc <__sflush_r+0x94>
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	f7fe fb9c 	bl	800c714 <_free_r>
 800dfdc:	2000      	movs	r0, #0
 800dfde:	6360      	str	r0, [r4, #52]	; 0x34
 800dfe0:	e7c0      	b.n	800df64 <__sflush_r+0x1c>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	47b0      	blx	r6
 800dfe8:	1c41      	adds	r1, r0, #1
 800dfea:	d1c8      	bne.n	800df7e <__sflush_r+0x36>
 800dfec:	682b      	ldr	r3, [r5, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d0c5      	beq.n	800df7e <__sflush_r+0x36>
 800dff2:	2b1d      	cmp	r3, #29
 800dff4:	d001      	beq.n	800dffa <__sflush_r+0xb2>
 800dff6:	2b16      	cmp	r3, #22
 800dff8:	d101      	bne.n	800dffe <__sflush_r+0xb6>
 800dffa:	602f      	str	r7, [r5, #0]
 800dffc:	e7b1      	b.n	800df62 <__sflush_r+0x1a>
 800dffe:	89a3      	ldrh	r3, [r4, #12]
 800e000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e004:	81a3      	strh	r3, [r4, #12]
 800e006:	e7ad      	b.n	800df64 <__sflush_r+0x1c>
 800e008:	690f      	ldr	r7, [r1, #16]
 800e00a:	2f00      	cmp	r7, #0
 800e00c:	d0a9      	beq.n	800df62 <__sflush_r+0x1a>
 800e00e:	0793      	lsls	r3, r2, #30
 800e010:	680e      	ldr	r6, [r1, #0]
 800e012:	bf08      	it	eq
 800e014:	694b      	ldreq	r3, [r1, #20]
 800e016:	600f      	str	r7, [r1, #0]
 800e018:	bf18      	it	ne
 800e01a:	2300      	movne	r3, #0
 800e01c:	eba6 0807 	sub.w	r8, r6, r7
 800e020:	608b      	str	r3, [r1, #8]
 800e022:	f1b8 0f00 	cmp.w	r8, #0
 800e026:	dd9c      	ble.n	800df62 <__sflush_r+0x1a>
 800e028:	4643      	mov	r3, r8
 800e02a:	463a      	mov	r2, r7
 800e02c:	6a21      	ldr	r1, [r4, #32]
 800e02e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e030:	4628      	mov	r0, r5
 800e032:	47b0      	blx	r6
 800e034:	2800      	cmp	r0, #0
 800e036:	dc06      	bgt.n	800e046 <__sflush_r+0xfe>
 800e038:	89a3      	ldrh	r3, [r4, #12]
 800e03a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e03e:	81a3      	strh	r3, [r4, #12]
 800e040:	f04f 30ff 	mov.w	r0, #4294967295
 800e044:	e78e      	b.n	800df64 <__sflush_r+0x1c>
 800e046:	4407      	add	r7, r0
 800e048:	eba8 0800 	sub.w	r8, r8, r0
 800e04c:	e7e9      	b.n	800e022 <__sflush_r+0xda>
 800e04e:	bf00      	nop
 800e050:	20400001 	.word	0x20400001

0800e054 <_fflush_r>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	690b      	ldr	r3, [r1, #16]
 800e058:	4605      	mov	r5, r0
 800e05a:	460c      	mov	r4, r1
 800e05c:	b1db      	cbz	r3, 800e096 <_fflush_r+0x42>
 800e05e:	b118      	cbz	r0, 800e068 <_fflush_r+0x14>
 800e060:	6983      	ldr	r3, [r0, #24]
 800e062:	b90b      	cbnz	r3, 800e068 <_fflush_r+0x14>
 800e064:	f000 f860 	bl	800e128 <__sinit>
 800e068:	4b0c      	ldr	r3, [pc, #48]	; (800e09c <_fflush_r+0x48>)
 800e06a:	429c      	cmp	r4, r3
 800e06c:	d109      	bne.n	800e082 <_fflush_r+0x2e>
 800e06e:	686c      	ldr	r4, [r5, #4]
 800e070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e074:	b17b      	cbz	r3, 800e096 <_fflush_r+0x42>
 800e076:	4621      	mov	r1, r4
 800e078:	4628      	mov	r0, r5
 800e07a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e07e:	f7ff bf63 	b.w	800df48 <__sflush_r>
 800e082:	4b07      	ldr	r3, [pc, #28]	; (800e0a0 <_fflush_r+0x4c>)
 800e084:	429c      	cmp	r4, r3
 800e086:	d101      	bne.n	800e08c <_fflush_r+0x38>
 800e088:	68ac      	ldr	r4, [r5, #8]
 800e08a:	e7f1      	b.n	800e070 <_fflush_r+0x1c>
 800e08c:	4b05      	ldr	r3, [pc, #20]	; (800e0a4 <_fflush_r+0x50>)
 800e08e:	429c      	cmp	r4, r3
 800e090:	bf08      	it	eq
 800e092:	68ec      	ldreq	r4, [r5, #12]
 800e094:	e7ec      	b.n	800e070 <_fflush_r+0x1c>
 800e096:	2000      	movs	r0, #0
 800e098:	bd38      	pop	{r3, r4, r5, pc}
 800e09a:	bf00      	nop
 800e09c:	0800ebc4 	.word	0x0800ebc4
 800e0a0:	0800ebe4 	.word	0x0800ebe4
 800e0a4:	0800eba4 	.word	0x0800eba4

0800e0a8 <std>:
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	b510      	push	{r4, lr}
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	e9c0 3300 	strd	r3, r3, [r0]
 800e0b2:	6083      	str	r3, [r0, #8]
 800e0b4:	8181      	strh	r1, [r0, #12]
 800e0b6:	6643      	str	r3, [r0, #100]	; 0x64
 800e0b8:	81c2      	strh	r2, [r0, #14]
 800e0ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0be:	6183      	str	r3, [r0, #24]
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	2208      	movs	r2, #8
 800e0c4:	305c      	adds	r0, #92	; 0x5c
 800e0c6:	f7fe fb1c 	bl	800c702 <memset>
 800e0ca:	4b05      	ldr	r3, [pc, #20]	; (800e0e0 <std+0x38>)
 800e0cc:	6263      	str	r3, [r4, #36]	; 0x24
 800e0ce:	4b05      	ldr	r3, [pc, #20]	; (800e0e4 <std+0x3c>)
 800e0d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e0d2:	4b05      	ldr	r3, [pc, #20]	; (800e0e8 <std+0x40>)
 800e0d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e0d6:	4b05      	ldr	r3, [pc, #20]	; (800e0ec <std+0x44>)
 800e0d8:	6224      	str	r4, [r4, #32]
 800e0da:	6323      	str	r3, [r4, #48]	; 0x30
 800e0dc:	bd10      	pop	{r4, pc}
 800e0de:	bf00      	nop
 800e0e0:	0800e8f9 	.word	0x0800e8f9
 800e0e4:	0800e91b 	.word	0x0800e91b
 800e0e8:	0800e953 	.word	0x0800e953
 800e0ec:	0800e977 	.word	0x0800e977

0800e0f0 <_cleanup_r>:
 800e0f0:	4901      	ldr	r1, [pc, #4]	; (800e0f8 <_cleanup_r+0x8>)
 800e0f2:	f000 b885 	b.w	800e200 <_fwalk_reent>
 800e0f6:	bf00      	nop
 800e0f8:	0800e055 	.word	0x0800e055

0800e0fc <__sfmoreglue>:
 800e0fc:	b570      	push	{r4, r5, r6, lr}
 800e0fe:	1e4a      	subs	r2, r1, #1
 800e100:	2568      	movs	r5, #104	; 0x68
 800e102:	4355      	muls	r5, r2
 800e104:	460e      	mov	r6, r1
 800e106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e10a:	f7fe fb51 	bl	800c7b0 <_malloc_r>
 800e10e:	4604      	mov	r4, r0
 800e110:	b140      	cbz	r0, 800e124 <__sfmoreglue+0x28>
 800e112:	2100      	movs	r1, #0
 800e114:	e9c0 1600 	strd	r1, r6, [r0]
 800e118:	300c      	adds	r0, #12
 800e11a:	60a0      	str	r0, [r4, #8]
 800e11c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e120:	f7fe faef 	bl	800c702 <memset>
 800e124:	4620      	mov	r0, r4
 800e126:	bd70      	pop	{r4, r5, r6, pc}

0800e128 <__sinit>:
 800e128:	6983      	ldr	r3, [r0, #24]
 800e12a:	b510      	push	{r4, lr}
 800e12c:	4604      	mov	r4, r0
 800e12e:	bb33      	cbnz	r3, 800e17e <__sinit+0x56>
 800e130:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e134:	6503      	str	r3, [r0, #80]	; 0x50
 800e136:	4b12      	ldr	r3, [pc, #72]	; (800e180 <__sinit+0x58>)
 800e138:	4a12      	ldr	r2, [pc, #72]	; (800e184 <__sinit+0x5c>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	6282      	str	r2, [r0, #40]	; 0x28
 800e13e:	4298      	cmp	r0, r3
 800e140:	bf04      	itt	eq
 800e142:	2301      	moveq	r3, #1
 800e144:	6183      	streq	r3, [r0, #24]
 800e146:	f000 f81f 	bl	800e188 <__sfp>
 800e14a:	6060      	str	r0, [r4, #4]
 800e14c:	4620      	mov	r0, r4
 800e14e:	f000 f81b 	bl	800e188 <__sfp>
 800e152:	60a0      	str	r0, [r4, #8]
 800e154:	4620      	mov	r0, r4
 800e156:	f000 f817 	bl	800e188 <__sfp>
 800e15a:	2200      	movs	r2, #0
 800e15c:	60e0      	str	r0, [r4, #12]
 800e15e:	2104      	movs	r1, #4
 800e160:	6860      	ldr	r0, [r4, #4]
 800e162:	f7ff ffa1 	bl	800e0a8 <std>
 800e166:	2201      	movs	r2, #1
 800e168:	2109      	movs	r1, #9
 800e16a:	68a0      	ldr	r0, [r4, #8]
 800e16c:	f7ff ff9c 	bl	800e0a8 <std>
 800e170:	2202      	movs	r2, #2
 800e172:	2112      	movs	r1, #18
 800e174:	68e0      	ldr	r0, [r4, #12]
 800e176:	f7ff ff97 	bl	800e0a8 <std>
 800e17a:	2301      	movs	r3, #1
 800e17c:	61a3      	str	r3, [r4, #24]
 800e17e:	bd10      	pop	{r4, pc}
 800e180:	0800eb80 	.word	0x0800eb80
 800e184:	0800e0f1 	.word	0x0800e0f1

0800e188 <__sfp>:
 800e188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18a:	4b1b      	ldr	r3, [pc, #108]	; (800e1f8 <__sfp+0x70>)
 800e18c:	681e      	ldr	r6, [r3, #0]
 800e18e:	69b3      	ldr	r3, [r6, #24]
 800e190:	4607      	mov	r7, r0
 800e192:	b913      	cbnz	r3, 800e19a <__sfp+0x12>
 800e194:	4630      	mov	r0, r6
 800e196:	f7ff ffc7 	bl	800e128 <__sinit>
 800e19a:	3648      	adds	r6, #72	; 0x48
 800e19c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	d503      	bpl.n	800e1ac <__sfp+0x24>
 800e1a4:	6833      	ldr	r3, [r6, #0]
 800e1a6:	b133      	cbz	r3, 800e1b6 <__sfp+0x2e>
 800e1a8:	6836      	ldr	r6, [r6, #0]
 800e1aa:	e7f7      	b.n	800e19c <__sfp+0x14>
 800e1ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e1b0:	b16d      	cbz	r5, 800e1ce <__sfp+0x46>
 800e1b2:	3468      	adds	r4, #104	; 0x68
 800e1b4:	e7f4      	b.n	800e1a0 <__sfp+0x18>
 800e1b6:	2104      	movs	r1, #4
 800e1b8:	4638      	mov	r0, r7
 800e1ba:	f7ff ff9f 	bl	800e0fc <__sfmoreglue>
 800e1be:	6030      	str	r0, [r6, #0]
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d1f1      	bne.n	800e1a8 <__sfp+0x20>
 800e1c4:	230c      	movs	r3, #12
 800e1c6:	603b      	str	r3, [r7, #0]
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ce:	4b0b      	ldr	r3, [pc, #44]	; (800e1fc <__sfp+0x74>)
 800e1d0:	6665      	str	r5, [r4, #100]	; 0x64
 800e1d2:	e9c4 5500 	strd	r5, r5, [r4]
 800e1d6:	60a5      	str	r5, [r4, #8]
 800e1d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e1dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e1e0:	2208      	movs	r2, #8
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e1e8:	f7fe fa8b 	bl	800c702 <memset>
 800e1ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e1f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e1f4:	e7e9      	b.n	800e1ca <__sfp+0x42>
 800e1f6:	bf00      	nop
 800e1f8:	0800eb80 	.word	0x0800eb80
 800e1fc:	ffff0001 	.word	0xffff0001

0800e200 <_fwalk_reent>:
 800e200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e204:	4680      	mov	r8, r0
 800e206:	4689      	mov	r9, r1
 800e208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e20c:	2600      	movs	r6, #0
 800e20e:	b914      	cbnz	r4, 800e216 <_fwalk_reent+0x16>
 800e210:	4630      	mov	r0, r6
 800e212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e216:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e21a:	3f01      	subs	r7, #1
 800e21c:	d501      	bpl.n	800e222 <_fwalk_reent+0x22>
 800e21e:	6824      	ldr	r4, [r4, #0]
 800e220:	e7f5      	b.n	800e20e <_fwalk_reent+0xe>
 800e222:	89ab      	ldrh	r3, [r5, #12]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d907      	bls.n	800e238 <_fwalk_reent+0x38>
 800e228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e22c:	3301      	adds	r3, #1
 800e22e:	d003      	beq.n	800e238 <_fwalk_reent+0x38>
 800e230:	4629      	mov	r1, r5
 800e232:	4640      	mov	r0, r8
 800e234:	47c8      	blx	r9
 800e236:	4306      	orrs	r6, r0
 800e238:	3568      	adds	r5, #104	; 0x68
 800e23a:	e7ee      	b.n	800e21a <_fwalk_reent+0x1a>

0800e23c <_localeconv_r>:
 800e23c:	4b04      	ldr	r3, [pc, #16]	; (800e250 <_localeconv_r+0x14>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	6a18      	ldr	r0, [r3, #32]
 800e242:	4b04      	ldr	r3, [pc, #16]	; (800e254 <_localeconv_r+0x18>)
 800e244:	2800      	cmp	r0, #0
 800e246:	bf08      	it	eq
 800e248:	4618      	moveq	r0, r3
 800e24a:	30f0      	adds	r0, #240	; 0xf0
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	2000006c 	.word	0x2000006c
 800e254:	200000d0 	.word	0x200000d0

0800e258 <__swhatbuf_r>:
 800e258:	b570      	push	{r4, r5, r6, lr}
 800e25a:	460e      	mov	r6, r1
 800e25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e260:	2900      	cmp	r1, #0
 800e262:	b096      	sub	sp, #88	; 0x58
 800e264:	4614      	mov	r4, r2
 800e266:	461d      	mov	r5, r3
 800e268:	da07      	bge.n	800e27a <__swhatbuf_r+0x22>
 800e26a:	2300      	movs	r3, #0
 800e26c:	602b      	str	r3, [r5, #0]
 800e26e:	89b3      	ldrh	r3, [r6, #12]
 800e270:	061a      	lsls	r2, r3, #24
 800e272:	d410      	bmi.n	800e296 <__swhatbuf_r+0x3e>
 800e274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e278:	e00e      	b.n	800e298 <__swhatbuf_r+0x40>
 800e27a:	466a      	mov	r2, sp
 800e27c:	f000 fba2 	bl	800e9c4 <_fstat_r>
 800e280:	2800      	cmp	r0, #0
 800e282:	dbf2      	blt.n	800e26a <__swhatbuf_r+0x12>
 800e284:	9a01      	ldr	r2, [sp, #4]
 800e286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e28a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e28e:	425a      	negs	r2, r3
 800e290:	415a      	adcs	r2, r3
 800e292:	602a      	str	r2, [r5, #0]
 800e294:	e7ee      	b.n	800e274 <__swhatbuf_r+0x1c>
 800e296:	2340      	movs	r3, #64	; 0x40
 800e298:	2000      	movs	r0, #0
 800e29a:	6023      	str	r3, [r4, #0]
 800e29c:	b016      	add	sp, #88	; 0x58
 800e29e:	bd70      	pop	{r4, r5, r6, pc}

0800e2a0 <__smakebuf_r>:
 800e2a0:	898b      	ldrh	r3, [r1, #12]
 800e2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2a4:	079d      	lsls	r5, r3, #30
 800e2a6:	4606      	mov	r6, r0
 800e2a8:	460c      	mov	r4, r1
 800e2aa:	d507      	bpl.n	800e2bc <__smakebuf_r+0x1c>
 800e2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	6123      	str	r3, [r4, #16]
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	6163      	str	r3, [r4, #20]
 800e2b8:	b002      	add	sp, #8
 800e2ba:	bd70      	pop	{r4, r5, r6, pc}
 800e2bc:	ab01      	add	r3, sp, #4
 800e2be:	466a      	mov	r2, sp
 800e2c0:	f7ff ffca 	bl	800e258 <__swhatbuf_r>
 800e2c4:	9900      	ldr	r1, [sp, #0]
 800e2c6:	4605      	mov	r5, r0
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	f7fe fa71 	bl	800c7b0 <_malloc_r>
 800e2ce:	b948      	cbnz	r0, 800e2e4 <__smakebuf_r+0x44>
 800e2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2d4:	059a      	lsls	r2, r3, #22
 800e2d6:	d4ef      	bmi.n	800e2b8 <__smakebuf_r+0x18>
 800e2d8:	f023 0303 	bic.w	r3, r3, #3
 800e2dc:	f043 0302 	orr.w	r3, r3, #2
 800e2e0:	81a3      	strh	r3, [r4, #12]
 800e2e2:	e7e3      	b.n	800e2ac <__smakebuf_r+0xc>
 800e2e4:	4b0d      	ldr	r3, [pc, #52]	; (800e31c <__smakebuf_r+0x7c>)
 800e2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e2e8:	89a3      	ldrh	r3, [r4, #12]
 800e2ea:	6020      	str	r0, [r4, #0]
 800e2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2f0:	81a3      	strh	r3, [r4, #12]
 800e2f2:	9b00      	ldr	r3, [sp, #0]
 800e2f4:	6163      	str	r3, [r4, #20]
 800e2f6:	9b01      	ldr	r3, [sp, #4]
 800e2f8:	6120      	str	r0, [r4, #16]
 800e2fa:	b15b      	cbz	r3, 800e314 <__smakebuf_r+0x74>
 800e2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e300:	4630      	mov	r0, r6
 800e302:	f000 fb71 	bl	800e9e8 <_isatty_r>
 800e306:	b128      	cbz	r0, 800e314 <__smakebuf_r+0x74>
 800e308:	89a3      	ldrh	r3, [r4, #12]
 800e30a:	f023 0303 	bic.w	r3, r3, #3
 800e30e:	f043 0301 	orr.w	r3, r3, #1
 800e312:	81a3      	strh	r3, [r4, #12]
 800e314:	89a3      	ldrh	r3, [r4, #12]
 800e316:	431d      	orrs	r5, r3
 800e318:	81a5      	strh	r5, [r4, #12]
 800e31a:	e7cd      	b.n	800e2b8 <__smakebuf_r+0x18>
 800e31c:	0800e0f1 	.word	0x0800e0f1

0800e320 <__malloc_lock>:
 800e320:	4770      	bx	lr

0800e322 <__malloc_unlock>:
 800e322:	4770      	bx	lr

0800e324 <_Balloc>:
 800e324:	b570      	push	{r4, r5, r6, lr}
 800e326:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e328:	4604      	mov	r4, r0
 800e32a:	460e      	mov	r6, r1
 800e32c:	b93d      	cbnz	r5, 800e33e <_Balloc+0x1a>
 800e32e:	2010      	movs	r0, #16
 800e330:	f7fe f9cc 	bl	800c6cc <malloc>
 800e334:	6260      	str	r0, [r4, #36]	; 0x24
 800e336:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e33a:	6005      	str	r5, [r0, #0]
 800e33c:	60c5      	str	r5, [r0, #12]
 800e33e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e340:	68eb      	ldr	r3, [r5, #12]
 800e342:	b183      	cbz	r3, 800e366 <_Balloc+0x42>
 800e344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e34c:	b9b8      	cbnz	r0, 800e37e <_Balloc+0x5a>
 800e34e:	2101      	movs	r1, #1
 800e350:	fa01 f506 	lsl.w	r5, r1, r6
 800e354:	1d6a      	adds	r2, r5, #5
 800e356:	0092      	lsls	r2, r2, #2
 800e358:	4620      	mov	r0, r4
 800e35a:	f000 fabf 	bl	800e8dc <_calloc_r>
 800e35e:	b160      	cbz	r0, 800e37a <_Balloc+0x56>
 800e360:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e364:	e00e      	b.n	800e384 <_Balloc+0x60>
 800e366:	2221      	movs	r2, #33	; 0x21
 800e368:	2104      	movs	r1, #4
 800e36a:	4620      	mov	r0, r4
 800e36c:	f000 fab6 	bl	800e8dc <_calloc_r>
 800e370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e372:	60e8      	str	r0, [r5, #12]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1e4      	bne.n	800e344 <_Balloc+0x20>
 800e37a:	2000      	movs	r0, #0
 800e37c:	bd70      	pop	{r4, r5, r6, pc}
 800e37e:	6802      	ldr	r2, [r0, #0]
 800e380:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e384:	2300      	movs	r3, #0
 800e386:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e38a:	e7f7      	b.n	800e37c <_Balloc+0x58>

0800e38c <_Bfree>:
 800e38c:	b570      	push	{r4, r5, r6, lr}
 800e38e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e390:	4606      	mov	r6, r0
 800e392:	460d      	mov	r5, r1
 800e394:	b93c      	cbnz	r4, 800e3a6 <_Bfree+0x1a>
 800e396:	2010      	movs	r0, #16
 800e398:	f7fe f998 	bl	800c6cc <malloc>
 800e39c:	6270      	str	r0, [r6, #36]	; 0x24
 800e39e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e3a2:	6004      	str	r4, [r0, #0]
 800e3a4:	60c4      	str	r4, [r0, #12]
 800e3a6:	b13d      	cbz	r5, 800e3b8 <_Bfree+0x2c>
 800e3a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e3aa:	686a      	ldr	r2, [r5, #4]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3b2:	6029      	str	r1, [r5, #0]
 800e3b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e3b8:	bd70      	pop	{r4, r5, r6, pc}

0800e3ba <__multadd>:
 800e3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3be:	690d      	ldr	r5, [r1, #16]
 800e3c0:	461f      	mov	r7, r3
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	460c      	mov	r4, r1
 800e3c6:	f101 0c14 	add.w	ip, r1, #20
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f8dc 0000 	ldr.w	r0, [ip]
 800e3d0:	b281      	uxth	r1, r0
 800e3d2:	fb02 7101 	mla	r1, r2, r1, r7
 800e3d6:	0c0f      	lsrs	r7, r1, #16
 800e3d8:	0c00      	lsrs	r0, r0, #16
 800e3da:	fb02 7000 	mla	r0, r2, r0, r7
 800e3de:	b289      	uxth	r1, r1
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e3e6:	429d      	cmp	r5, r3
 800e3e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e3ec:	f84c 1b04 	str.w	r1, [ip], #4
 800e3f0:	dcec      	bgt.n	800e3cc <__multadd+0x12>
 800e3f2:	b1d7      	cbz	r7, 800e42a <__multadd+0x70>
 800e3f4:	68a3      	ldr	r3, [r4, #8]
 800e3f6:	42ab      	cmp	r3, r5
 800e3f8:	dc12      	bgt.n	800e420 <__multadd+0x66>
 800e3fa:	6861      	ldr	r1, [r4, #4]
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	3101      	adds	r1, #1
 800e400:	f7ff ff90 	bl	800e324 <_Balloc>
 800e404:	6922      	ldr	r2, [r4, #16]
 800e406:	3202      	adds	r2, #2
 800e408:	f104 010c 	add.w	r1, r4, #12
 800e40c:	4680      	mov	r8, r0
 800e40e:	0092      	lsls	r2, r2, #2
 800e410:	300c      	adds	r0, #12
 800e412:	f7fe f96b 	bl	800c6ec <memcpy>
 800e416:	4621      	mov	r1, r4
 800e418:	4630      	mov	r0, r6
 800e41a:	f7ff ffb7 	bl	800e38c <_Bfree>
 800e41e:	4644      	mov	r4, r8
 800e420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e424:	3501      	adds	r5, #1
 800e426:	615f      	str	r7, [r3, #20]
 800e428:	6125      	str	r5, [r4, #16]
 800e42a:	4620      	mov	r0, r4
 800e42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e430 <__hi0bits>:
 800e430:	0c02      	lsrs	r2, r0, #16
 800e432:	0412      	lsls	r2, r2, #16
 800e434:	4603      	mov	r3, r0
 800e436:	b9b2      	cbnz	r2, 800e466 <__hi0bits+0x36>
 800e438:	0403      	lsls	r3, r0, #16
 800e43a:	2010      	movs	r0, #16
 800e43c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e440:	bf04      	itt	eq
 800e442:	021b      	lsleq	r3, r3, #8
 800e444:	3008      	addeq	r0, #8
 800e446:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e44a:	bf04      	itt	eq
 800e44c:	011b      	lsleq	r3, r3, #4
 800e44e:	3004      	addeq	r0, #4
 800e450:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e454:	bf04      	itt	eq
 800e456:	009b      	lsleq	r3, r3, #2
 800e458:	3002      	addeq	r0, #2
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	db06      	blt.n	800e46c <__hi0bits+0x3c>
 800e45e:	005b      	lsls	r3, r3, #1
 800e460:	d503      	bpl.n	800e46a <__hi0bits+0x3a>
 800e462:	3001      	adds	r0, #1
 800e464:	4770      	bx	lr
 800e466:	2000      	movs	r0, #0
 800e468:	e7e8      	b.n	800e43c <__hi0bits+0xc>
 800e46a:	2020      	movs	r0, #32
 800e46c:	4770      	bx	lr

0800e46e <__lo0bits>:
 800e46e:	6803      	ldr	r3, [r0, #0]
 800e470:	f013 0207 	ands.w	r2, r3, #7
 800e474:	4601      	mov	r1, r0
 800e476:	d00b      	beq.n	800e490 <__lo0bits+0x22>
 800e478:	07da      	lsls	r2, r3, #31
 800e47a:	d423      	bmi.n	800e4c4 <__lo0bits+0x56>
 800e47c:	0798      	lsls	r0, r3, #30
 800e47e:	bf49      	itett	mi
 800e480:	085b      	lsrmi	r3, r3, #1
 800e482:	089b      	lsrpl	r3, r3, #2
 800e484:	2001      	movmi	r0, #1
 800e486:	600b      	strmi	r3, [r1, #0]
 800e488:	bf5c      	itt	pl
 800e48a:	600b      	strpl	r3, [r1, #0]
 800e48c:	2002      	movpl	r0, #2
 800e48e:	4770      	bx	lr
 800e490:	b298      	uxth	r0, r3
 800e492:	b9a8      	cbnz	r0, 800e4c0 <__lo0bits+0x52>
 800e494:	0c1b      	lsrs	r3, r3, #16
 800e496:	2010      	movs	r0, #16
 800e498:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e49c:	bf04      	itt	eq
 800e49e:	0a1b      	lsreq	r3, r3, #8
 800e4a0:	3008      	addeq	r0, #8
 800e4a2:	071a      	lsls	r2, r3, #28
 800e4a4:	bf04      	itt	eq
 800e4a6:	091b      	lsreq	r3, r3, #4
 800e4a8:	3004      	addeq	r0, #4
 800e4aa:	079a      	lsls	r2, r3, #30
 800e4ac:	bf04      	itt	eq
 800e4ae:	089b      	lsreq	r3, r3, #2
 800e4b0:	3002      	addeq	r0, #2
 800e4b2:	07da      	lsls	r2, r3, #31
 800e4b4:	d402      	bmi.n	800e4bc <__lo0bits+0x4e>
 800e4b6:	085b      	lsrs	r3, r3, #1
 800e4b8:	d006      	beq.n	800e4c8 <__lo0bits+0x5a>
 800e4ba:	3001      	adds	r0, #1
 800e4bc:	600b      	str	r3, [r1, #0]
 800e4be:	4770      	bx	lr
 800e4c0:	4610      	mov	r0, r2
 800e4c2:	e7e9      	b.n	800e498 <__lo0bits+0x2a>
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	4770      	bx	lr
 800e4c8:	2020      	movs	r0, #32
 800e4ca:	4770      	bx	lr

0800e4cc <__i2b>:
 800e4cc:	b510      	push	{r4, lr}
 800e4ce:	460c      	mov	r4, r1
 800e4d0:	2101      	movs	r1, #1
 800e4d2:	f7ff ff27 	bl	800e324 <_Balloc>
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	6144      	str	r4, [r0, #20]
 800e4da:	6102      	str	r2, [r0, #16]
 800e4dc:	bd10      	pop	{r4, pc}

0800e4de <__multiply>:
 800e4de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e2:	4614      	mov	r4, r2
 800e4e4:	690a      	ldr	r2, [r1, #16]
 800e4e6:	6923      	ldr	r3, [r4, #16]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	bfb8      	it	lt
 800e4ec:	460b      	movlt	r3, r1
 800e4ee:	4688      	mov	r8, r1
 800e4f0:	bfbc      	itt	lt
 800e4f2:	46a0      	movlt	r8, r4
 800e4f4:	461c      	movlt	r4, r3
 800e4f6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e4fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e4fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e502:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e506:	eb07 0609 	add.w	r6, r7, r9
 800e50a:	42b3      	cmp	r3, r6
 800e50c:	bfb8      	it	lt
 800e50e:	3101      	addlt	r1, #1
 800e510:	f7ff ff08 	bl	800e324 <_Balloc>
 800e514:	f100 0514 	add.w	r5, r0, #20
 800e518:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e51c:	462b      	mov	r3, r5
 800e51e:	2200      	movs	r2, #0
 800e520:	4573      	cmp	r3, lr
 800e522:	d316      	bcc.n	800e552 <__multiply+0x74>
 800e524:	f104 0214 	add.w	r2, r4, #20
 800e528:	f108 0114 	add.w	r1, r8, #20
 800e52c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e530:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	9b00      	ldr	r3, [sp, #0]
 800e538:	9201      	str	r2, [sp, #4]
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d80c      	bhi.n	800e558 <__multiply+0x7a>
 800e53e:	2e00      	cmp	r6, #0
 800e540:	dd03      	ble.n	800e54a <__multiply+0x6c>
 800e542:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e546:	2b00      	cmp	r3, #0
 800e548:	d05d      	beq.n	800e606 <__multiply+0x128>
 800e54a:	6106      	str	r6, [r0, #16]
 800e54c:	b003      	add	sp, #12
 800e54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e552:	f843 2b04 	str.w	r2, [r3], #4
 800e556:	e7e3      	b.n	800e520 <__multiply+0x42>
 800e558:	f8b2 b000 	ldrh.w	fp, [r2]
 800e55c:	f1bb 0f00 	cmp.w	fp, #0
 800e560:	d023      	beq.n	800e5aa <__multiply+0xcc>
 800e562:	4689      	mov	r9, r1
 800e564:	46ac      	mov	ip, r5
 800e566:	f04f 0800 	mov.w	r8, #0
 800e56a:	f859 4b04 	ldr.w	r4, [r9], #4
 800e56e:	f8dc a000 	ldr.w	sl, [ip]
 800e572:	b2a3      	uxth	r3, r4
 800e574:	fa1f fa8a 	uxth.w	sl, sl
 800e578:	fb0b a303 	mla	r3, fp, r3, sl
 800e57c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e580:	f8dc 4000 	ldr.w	r4, [ip]
 800e584:	4443      	add	r3, r8
 800e586:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e58a:	fb0b 840a 	mla	r4, fp, sl, r8
 800e58e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e592:	46e2      	mov	sl, ip
 800e594:	b29b      	uxth	r3, r3
 800e596:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e59a:	454f      	cmp	r7, r9
 800e59c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e5a0:	f84a 3b04 	str.w	r3, [sl], #4
 800e5a4:	d82b      	bhi.n	800e5fe <__multiply+0x120>
 800e5a6:	f8cc 8004 	str.w	r8, [ip, #4]
 800e5aa:	9b01      	ldr	r3, [sp, #4]
 800e5ac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e5b0:	3204      	adds	r2, #4
 800e5b2:	f1ba 0f00 	cmp.w	sl, #0
 800e5b6:	d020      	beq.n	800e5fa <__multiply+0x11c>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	4689      	mov	r9, r1
 800e5bc:	46a8      	mov	r8, r5
 800e5be:	f04f 0b00 	mov.w	fp, #0
 800e5c2:	f8b9 c000 	ldrh.w	ip, [r9]
 800e5c6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e5ca:	fb0a 440c 	mla	r4, sl, ip, r4
 800e5ce:	445c      	add	r4, fp
 800e5d0:	46c4      	mov	ip, r8
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e5d8:	f84c 3b04 	str.w	r3, [ip], #4
 800e5dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800e5e0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e5e4:	0c1b      	lsrs	r3, r3, #16
 800e5e6:	fb0a b303 	mla	r3, sl, r3, fp
 800e5ea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e5ee:	454f      	cmp	r7, r9
 800e5f0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e5f4:	d805      	bhi.n	800e602 <__multiply+0x124>
 800e5f6:	f8c8 3004 	str.w	r3, [r8, #4]
 800e5fa:	3504      	adds	r5, #4
 800e5fc:	e79b      	b.n	800e536 <__multiply+0x58>
 800e5fe:	46d4      	mov	ip, sl
 800e600:	e7b3      	b.n	800e56a <__multiply+0x8c>
 800e602:	46e0      	mov	r8, ip
 800e604:	e7dd      	b.n	800e5c2 <__multiply+0xe4>
 800e606:	3e01      	subs	r6, #1
 800e608:	e799      	b.n	800e53e <__multiply+0x60>
	...

0800e60c <__pow5mult>:
 800e60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e610:	4615      	mov	r5, r2
 800e612:	f012 0203 	ands.w	r2, r2, #3
 800e616:	4606      	mov	r6, r0
 800e618:	460f      	mov	r7, r1
 800e61a:	d007      	beq.n	800e62c <__pow5mult+0x20>
 800e61c:	3a01      	subs	r2, #1
 800e61e:	4c21      	ldr	r4, [pc, #132]	; (800e6a4 <__pow5mult+0x98>)
 800e620:	2300      	movs	r3, #0
 800e622:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e626:	f7ff fec8 	bl	800e3ba <__multadd>
 800e62a:	4607      	mov	r7, r0
 800e62c:	10ad      	asrs	r5, r5, #2
 800e62e:	d035      	beq.n	800e69c <__pow5mult+0x90>
 800e630:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e632:	b93c      	cbnz	r4, 800e644 <__pow5mult+0x38>
 800e634:	2010      	movs	r0, #16
 800e636:	f7fe f849 	bl	800c6cc <malloc>
 800e63a:	6270      	str	r0, [r6, #36]	; 0x24
 800e63c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e640:	6004      	str	r4, [r0, #0]
 800e642:	60c4      	str	r4, [r0, #12]
 800e644:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e64c:	b94c      	cbnz	r4, 800e662 <__pow5mult+0x56>
 800e64e:	f240 2171 	movw	r1, #625	; 0x271
 800e652:	4630      	mov	r0, r6
 800e654:	f7ff ff3a 	bl	800e4cc <__i2b>
 800e658:	2300      	movs	r3, #0
 800e65a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e65e:	4604      	mov	r4, r0
 800e660:	6003      	str	r3, [r0, #0]
 800e662:	f04f 0800 	mov.w	r8, #0
 800e666:	07eb      	lsls	r3, r5, #31
 800e668:	d50a      	bpl.n	800e680 <__pow5mult+0x74>
 800e66a:	4639      	mov	r1, r7
 800e66c:	4622      	mov	r2, r4
 800e66e:	4630      	mov	r0, r6
 800e670:	f7ff ff35 	bl	800e4de <__multiply>
 800e674:	4639      	mov	r1, r7
 800e676:	4681      	mov	r9, r0
 800e678:	4630      	mov	r0, r6
 800e67a:	f7ff fe87 	bl	800e38c <_Bfree>
 800e67e:	464f      	mov	r7, r9
 800e680:	106d      	asrs	r5, r5, #1
 800e682:	d00b      	beq.n	800e69c <__pow5mult+0x90>
 800e684:	6820      	ldr	r0, [r4, #0]
 800e686:	b938      	cbnz	r0, 800e698 <__pow5mult+0x8c>
 800e688:	4622      	mov	r2, r4
 800e68a:	4621      	mov	r1, r4
 800e68c:	4630      	mov	r0, r6
 800e68e:	f7ff ff26 	bl	800e4de <__multiply>
 800e692:	6020      	str	r0, [r4, #0]
 800e694:	f8c0 8000 	str.w	r8, [r0]
 800e698:	4604      	mov	r4, r0
 800e69a:	e7e4      	b.n	800e666 <__pow5mult+0x5a>
 800e69c:	4638      	mov	r0, r7
 800e69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6a2:	bf00      	nop
 800e6a4:	0800ecf8 	.word	0x0800ecf8

0800e6a8 <__lshift>:
 800e6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6ac:	460c      	mov	r4, r1
 800e6ae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6b2:	6923      	ldr	r3, [r4, #16]
 800e6b4:	6849      	ldr	r1, [r1, #4]
 800e6b6:	eb0a 0903 	add.w	r9, sl, r3
 800e6ba:	68a3      	ldr	r3, [r4, #8]
 800e6bc:	4607      	mov	r7, r0
 800e6be:	4616      	mov	r6, r2
 800e6c0:	f109 0501 	add.w	r5, r9, #1
 800e6c4:	42ab      	cmp	r3, r5
 800e6c6:	db32      	blt.n	800e72e <__lshift+0x86>
 800e6c8:	4638      	mov	r0, r7
 800e6ca:	f7ff fe2b 	bl	800e324 <_Balloc>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	4680      	mov	r8, r0
 800e6d2:	f100 0114 	add.w	r1, r0, #20
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	4553      	cmp	r3, sl
 800e6da:	db2b      	blt.n	800e734 <__lshift+0x8c>
 800e6dc:	6920      	ldr	r0, [r4, #16]
 800e6de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6e2:	f104 0314 	add.w	r3, r4, #20
 800e6e6:	f016 021f 	ands.w	r2, r6, #31
 800e6ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6ee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e6f2:	d025      	beq.n	800e740 <__lshift+0x98>
 800e6f4:	f1c2 0e20 	rsb	lr, r2, #32
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	681e      	ldr	r6, [r3, #0]
 800e6fc:	468a      	mov	sl, r1
 800e6fe:	4096      	lsls	r6, r2
 800e700:	4330      	orrs	r0, r6
 800e702:	f84a 0b04 	str.w	r0, [sl], #4
 800e706:	f853 0b04 	ldr.w	r0, [r3], #4
 800e70a:	459c      	cmp	ip, r3
 800e70c:	fa20 f00e 	lsr.w	r0, r0, lr
 800e710:	d814      	bhi.n	800e73c <__lshift+0x94>
 800e712:	6048      	str	r0, [r1, #4]
 800e714:	b108      	cbz	r0, 800e71a <__lshift+0x72>
 800e716:	f109 0502 	add.w	r5, r9, #2
 800e71a:	3d01      	subs	r5, #1
 800e71c:	4638      	mov	r0, r7
 800e71e:	f8c8 5010 	str.w	r5, [r8, #16]
 800e722:	4621      	mov	r1, r4
 800e724:	f7ff fe32 	bl	800e38c <_Bfree>
 800e728:	4640      	mov	r0, r8
 800e72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e72e:	3101      	adds	r1, #1
 800e730:	005b      	lsls	r3, r3, #1
 800e732:	e7c7      	b.n	800e6c4 <__lshift+0x1c>
 800e734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e738:	3301      	adds	r3, #1
 800e73a:	e7cd      	b.n	800e6d8 <__lshift+0x30>
 800e73c:	4651      	mov	r1, sl
 800e73e:	e7dc      	b.n	800e6fa <__lshift+0x52>
 800e740:	3904      	subs	r1, #4
 800e742:	f853 2b04 	ldr.w	r2, [r3], #4
 800e746:	f841 2f04 	str.w	r2, [r1, #4]!
 800e74a:	459c      	cmp	ip, r3
 800e74c:	d8f9      	bhi.n	800e742 <__lshift+0x9a>
 800e74e:	e7e4      	b.n	800e71a <__lshift+0x72>

0800e750 <__mcmp>:
 800e750:	6903      	ldr	r3, [r0, #16]
 800e752:	690a      	ldr	r2, [r1, #16]
 800e754:	1a9b      	subs	r3, r3, r2
 800e756:	b530      	push	{r4, r5, lr}
 800e758:	d10c      	bne.n	800e774 <__mcmp+0x24>
 800e75a:	0092      	lsls	r2, r2, #2
 800e75c:	3014      	adds	r0, #20
 800e75e:	3114      	adds	r1, #20
 800e760:	1884      	adds	r4, r0, r2
 800e762:	4411      	add	r1, r2
 800e764:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e768:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e76c:	4295      	cmp	r5, r2
 800e76e:	d003      	beq.n	800e778 <__mcmp+0x28>
 800e770:	d305      	bcc.n	800e77e <__mcmp+0x2e>
 800e772:	2301      	movs	r3, #1
 800e774:	4618      	mov	r0, r3
 800e776:	bd30      	pop	{r4, r5, pc}
 800e778:	42a0      	cmp	r0, r4
 800e77a:	d3f3      	bcc.n	800e764 <__mcmp+0x14>
 800e77c:	e7fa      	b.n	800e774 <__mcmp+0x24>
 800e77e:	f04f 33ff 	mov.w	r3, #4294967295
 800e782:	e7f7      	b.n	800e774 <__mcmp+0x24>

0800e784 <__mdiff>:
 800e784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e788:	460d      	mov	r5, r1
 800e78a:	4607      	mov	r7, r0
 800e78c:	4611      	mov	r1, r2
 800e78e:	4628      	mov	r0, r5
 800e790:	4614      	mov	r4, r2
 800e792:	f7ff ffdd 	bl	800e750 <__mcmp>
 800e796:	1e06      	subs	r6, r0, #0
 800e798:	d108      	bne.n	800e7ac <__mdiff+0x28>
 800e79a:	4631      	mov	r1, r6
 800e79c:	4638      	mov	r0, r7
 800e79e:	f7ff fdc1 	bl	800e324 <_Balloc>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ac:	bfa4      	itt	ge
 800e7ae:	4623      	movge	r3, r4
 800e7b0:	462c      	movge	r4, r5
 800e7b2:	4638      	mov	r0, r7
 800e7b4:	6861      	ldr	r1, [r4, #4]
 800e7b6:	bfa6      	itte	ge
 800e7b8:	461d      	movge	r5, r3
 800e7ba:	2600      	movge	r6, #0
 800e7bc:	2601      	movlt	r6, #1
 800e7be:	f7ff fdb1 	bl	800e324 <_Balloc>
 800e7c2:	692b      	ldr	r3, [r5, #16]
 800e7c4:	60c6      	str	r6, [r0, #12]
 800e7c6:	6926      	ldr	r6, [r4, #16]
 800e7c8:	f105 0914 	add.w	r9, r5, #20
 800e7cc:	f104 0214 	add.w	r2, r4, #20
 800e7d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e7d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e7d8:	f100 0514 	add.w	r5, r0, #20
 800e7dc:	f04f 0e00 	mov.w	lr, #0
 800e7e0:	f852 ab04 	ldr.w	sl, [r2], #4
 800e7e4:	f859 4b04 	ldr.w	r4, [r9], #4
 800e7e8:	fa1e f18a 	uxtah	r1, lr, sl
 800e7ec:	b2a3      	uxth	r3, r4
 800e7ee:	1ac9      	subs	r1, r1, r3
 800e7f0:	0c23      	lsrs	r3, r4, #16
 800e7f2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e7f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e7fa:	b289      	uxth	r1, r1
 800e7fc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e800:	45c8      	cmp	r8, r9
 800e802:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e806:	4694      	mov	ip, r2
 800e808:	f845 3b04 	str.w	r3, [r5], #4
 800e80c:	d8e8      	bhi.n	800e7e0 <__mdiff+0x5c>
 800e80e:	45bc      	cmp	ip, r7
 800e810:	d304      	bcc.n	800e81c <__mdiff+0x98>
 800e812:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e816:	b183      	cbz	r3, 800e83a <__mdiff+0xb6>
 800e818:	6106      	str	r6, [r0, #16]
 800e81a:	e7c5      	b.n	800e7a8 <__mdiff+0x24>
 800e81c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e820:	fa1e f381 	uxtah	r3, lr, r1
 800e824:	141a      	asrs	r2, r3, #16
 800e826:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e830:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e834:	f845 3b04 	str.w	r3, [r5], #4
 800e838:	e7e9      	b.n	800e80e <__mdiff+0x8a>
 800e83a:	3e01      	subs	r6, #1
 800e83c:	e7e9      	b.n	800e812 <__mdiff+0x8e>

0800e83e <__d2b>:
 800e83e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e842:	460e      	mov	r6, r1
 800e844:	2101      	movs	r1, #1
 800e846:	ec59 8b10 	vmov	r8, r9, d0
 800e84a:	4615      	mov	r5, r2
 800e84c:	f7ff fd6a 	bl	800e324 <_Balloc>
 800e850:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e854:	4607      	mov	r7, r0
 800e856:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e85a:	bb34      	cbnz	r4, 800e8aa <__d2b+0x6c>
 800e85c:	9301      	str	r3, [sp, #4]
 800e85e:	f1b8 0300 	subs.w	r3, r8, #0
 800e862:	d027      	beq.n	800e8b4 <__d2b+0x76>
 800e864:	a802      	add	r0, sp, #8
 800e866:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e86a:	f7ff fe00 	bl	800e46e <__lo0bits>
 800e86e:	9900      	ldr	r1, [sp, #0]
 800e870:	b1f0      	cbz	r0, 800e8b0 <__d2b+0x72>
 800e872:	9a01      	ldr	r2, [sp, #4]
 800e874:	f1c0 0320 	rsb	r3, r0, #32
 800e878:	fa02 f303 	lsl.w	r3, r2, r3
 800e87c:	430b      	orrs	r3, r1
 800e87e:	40c2      	lsrs	r2, r0
 800e880:	617b      	str	r3, [r7, #20]
 800e882:	9201      	str	r2, [sp, #4]
 800e884:	9b01      	ldr	r3, [sp, #4]
 800e886:	61bb      	str	r3, [r7, #24]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	bf14      	ite	ne
 800e88c:	2102      	movne	r1, #2
 800e88e:	2101      	moveq	r1, #1
 800e890:	6139      	str	r1, [r7, #16]
 800e892:	b1c4      	cbz	r4, 800e8c6 <__d2b+0x88>
 800e894:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e898:	4404      	add	r4, r0
 800e89a:	6034      	str	r4, [r6, #0]
 800e89c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e8a0:	6028      	str	r0, [r5, #0]
 800e8a2:	4638      	mov	r0, r7
 800e8a4:	b003      	add	sp, #12
 800e8a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8ae:	e7d5      	b.n	800e85c <__d2b+0x1e>
 800e8b0:	6179      	str	r1, [r7, #20]
 800e8b2:	e7e7      	b.n	800e884 <__d2b+0x46>
 800e8b4:	a801      	add	r0, sp, #4
 800e8b6:	f7ff fdda 	bl	800e46e <__lo0bits>
 800e8ba:	9b01      	ldr	r3, [sp, #4]
 800e8bc:	617b      	str	r3, [r7, #20]
 800e8be:	2101      	movs	r1, #1
 800e8c0:	6139      	str	r1, [r7, #16]
 800e8c2:	3020      	adds	r0, #32
 800e8c4:	e7e5      	b.n	800e892 <__d2b+0x54>
 800e8c6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e8ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e8ce:	6030      	str	r0, [r6, #0]
 800e8d0:	6918      	ldr	r0, [r3, #16]
 800e8d2:	f7ff fdad 	bl	800e430 <__hi0bits>
 800e8d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e8da:	e7e1      	b.n	800e8a0 <__d2b+0x62>

0800e8dc <_calloc_r>:
 800e8dc:	b538      	push	{r3, r4, r5, lr}
 800e8de:	fb02 f401 	mul.w	r4, r2, r1
 800e8e2:	4621      	mov	r1, r4
 800e8e4:	f7fd ff64 	bl	800c7b0 <_malloc_r>
 800e8e8:	4605      	mov	r5, r0
 800e8ea:	b118      	cbz	r0, 800e8f4 <_calloc_r+0x18>
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	f7fd ff07 	bl	800c702 <memset>
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	bd38      	pop	{r3, r4, r5, pc}

0800e8f8 <__sread>:
 800e8f8:	b510      	push	{r4, lr}
 800e8fa:	460c      	mov	r4, r1
 800e8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e900:	f000 f8a6 	bl	800ea50 <_read_r>
 800e904:	2800      	cmp	r0, #0
 800e906:	bfab      	itete	ge
 800e908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e90a:	89a3      	ldrhlt	r3, [r4, #12]
 800e90c:	181b      	addge	r3, r3, r0
 800e90e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e912:	bfac      	ite	ge
 800e914:	6563      	strge	r3, [r4, #84]	; 0x54
 800e916:	81a3      	strhlt	r3, [r4, #12]
 800e918:	bd10      	pop	{r4, pc}

0800e91a <__swrite>:
 800e91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e91e:	461f      	mov	r7, r3
 800e920:	898b      	ldrh	r3, [r1, #12]
 800e922:	05db      	lsls	r3, r3, #23
 800e924:	4605      	mov	r5, r0
 800e926:	460c      	mov	r4, r1
 800e928:	4616      	mov	r6, r2
 800e92a:	d505      	bpl.n	800e938 <__swrite+0x1e>
 800e92c:	2302      	movs	r3, #2
 800e92e:	2200      	movs	r2, #0
 800e930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e934:	f000 f868 	bl	800ea08 <_lseek_r>
 800e938:	89a3      	ldrh	r3, [r4, #12]
 800e93a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e93e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e942:	81a3      	strh	r3, [r4, #12]
 800e944:	4632      	mov	r2, r6
 800e946:	463b      	mov	r3, r7
 800e948:	4628      	mov	r0, r5
 800e94a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e94e:	f000 b817 	b.w	800e980 <_write_r>

0800e952 <__sseek>:
 800e952:	b510      	push	{r4, lr}
 800e954:	460c      	mov	r4, r1
 800e956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e95a:	f000 f855 	bl	800ea08 <_lseek_r>
 800e95e:	1c43      	adds	r3, r0, #1
 800e960:	89a3      	ldrh	r3, [r4, #12]
 800e962:	bf15      	itete	ne
 800e964:	6560      	strne	r0, [r4, #84]	; 0x54
 800e966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e96a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e96e:	81a3      	strheq	r3, [r4, #12]
 800e970:	bf18      	it	ne
 800e972:	81a3      	strhne	r3, [r4, #12]
 800e974:	bd10      	pop	{r4, pc}

0800e976 <__sclose>:
 800e976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e97a:	f000 b813 	b.w	800e9a4 <_close_r>
	...

0800e980 <_write_r>:
 800e980:	b538      	push	{r3, r4, r5, lr}
 800e982:	4c07      	ldr	r4, [pc, #28]	; (800e9a0 <_write_r+0x20>)
 800e984:	4605      	mov	r5, r0
 800e986:	4608      	mov	r0, r1
 800e988:	4611      	mov	r1, r2
 800e98a:	2200      	movs	r2, #0
 800e98c:	6022      	str	r2, [r4, #0]
 800e98e:	461a      	mov	r2, r3
 800e990:	f7fb fecc 	bl	800a72c <_write>
 800e994:	1c43      	adds	r3, r0, #1
 800e996:	d102      	bne.n	800e99e <_write_r+0x1e>
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	b103      	cbz	r3, 800e99e <_write_r+0x1e>
 800e99c:	602b      	str	r3, [r5, #0]
 800e99e:	bd38      	pop	{r3, r4, r5, pc}
 800e9a0:	20000c28 	.word	0x20000c28

0800e9a4 <_close_r>:
 800e9a4:	b538      	push	{r3, r4, r5, lr}
 800e9a6:	4c06      	ldr	r4, [pc, #24]	; (800e9c0 <_close_r+0x1c>)
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	4608      	mov	r0, r1
 800e9ae:	6023      	str	r3, [r4, #0]
 800e9b0:	f7f2 ffa7 	bl	8001902 <_close>
 800e9b4:	1c43      	adds	r3, r0, #1
 800e9b6:	d102      	bne.n	800e9be <_close_r+0x1a>
 800e9b8:	6823      	ldr	r3, [r4, #0]
 800e9ba:	b103      	cbz	r3, 800e9be <_close_r+0x1a>
 800e9bc:	602b      	str	r3, [r5, #0]
 800e9be:	bd38      	pop	{r3, r4, r5, pc}
 800e9c0:	20000c28 	.word	0x20000c28

0800e9c4 <_fstat_r>:
 800e9c4:	b538      	push	{r3, r4, r5, lr}
 800e9c6:	4c07      	ldr	r4, [pc, #28]	; (800e9e4 <_fstat_r+0x20>)
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	4605      	mov	r5, r0
 800e9cc:	4608      	mov	r0, r1
 800e9ce:	4611      	mov	r1, r2
 800e9d0:	6023      	str	r3, [r4, #0]
 800e9d2:	f7f2 ffa2 	bl	800191a <_fstat>
 800e9d6:	1c43      	adds	r3, r0, #1
 800e9d8:	d102      	bne.n	800e9e0 <_fstat_r+0x1c>
 800e9da:	6823      	ldr	r3, [r4, #0]
 800e9dc:	b103      	cbz	r3, 800e9e0 <_fstat_r+0x1c>
 800e9de:	602b      	str	r3, [r5, #0]
 800e9e0:	bd38      	pop	{r3, r4, r5, pc}
 800e9e2:	bf00      	nop
 800e9e4:	20000c28 	.word	0x20000c28

0800e9e8 <_isatty_r>:
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	4c06      	ldr	r4, [pc, #24]	; (800ea04 <_isatty_r+0x1c>)
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	4605      	mov	r5, r0
 800e9f0:	4608      	mov	r0, r1
 800e9f2:	6023      	str	r3, [r4, #0]
 800e9f4:	f7f2 ffa1 	bl	800193a <_isatty>
 800e9f8:	1c43      	adds	r3, r0, #1
 800e9fa:	d102      	bne.n	800ea02 <_isatty_r+0x1a>
 800e9fc:	6823      	ldr	r3, [r4, #0]
 800e9fe:	b103      	cbz	r3, 800ea02 <_isatty_r+0x1a>
 800ea00:	602b      	str	r3, [r5, #0]
 800ea02:	bd38      	pop	{r3, r4, r5, pc}
 800ea04:	20000c28 	.word	0x20000c28

0800ea08 <_lseek_r>:
 800ea08:	b538      	push	{r3, r4, r5, lr}
 800ea0a:	4c07      	ldr	r4, [pc, #28]	; (800ea28 <_lseek_r+0x20>)
 800ea0c:	4605      	mov	r5, r0
 800ea0e:	4608      	mov	r0, r1
 800ea10:	4611      	mov	r1, r2
 800ea12:	2200      	movs	r2, #0
 800ea14:	6022      	str	r2, [r4, #0]
 800ea16:	461a      	mov	r2, r3
 800ea18:	f7f2 ff9a 	bl	8001950 <_lseek>
 800ea1c:	1c43      	adds	r3, r0, #1
 800ea1e:	d102      	bne.n	800ea26 <_lseek_r+0x1e>
 800ea20:	6823      	ldr	r3, [r4, #0]
 800ea22:	b103      	cbz	r3, 800ea26 <_lseek_r+0x1e>
 800ea24:	602b      	str	r3, [r5, #0]
 800ea26:	bd38      	pop	{r3, r4, r5, pc}
 800ea28:	20000c28 	.word	0x20000c28

0800ea2c <__ascii_mbtowc>:
 800ea2c:	b082      	sub	sp, #8
 800ea2e:	b901      	cbnz	r1, 800ea32 <__ascii_mbtowc+0x6>
 800ea30:	a901      	add	r1, sp, #4
 800ea32:	b142      	cbz	r2, 800ea46 <__ascii_mbtowc+0x1a>
 800ea34:	b14b      	cbz	r3, 800ea4a <__ascii_mbtowc+0x1e>
 800ea36:	7813      	ldrb	r3, [r2, #0]
 800ea38:	600b      	str	r3, [r1, #0]
 800ea3a:	7812      	ldrb	r2, [r2, #0]
 800ea3c:	1c10      	adds	r0, r2, #0
 800ea3e:	bf18      	it	ne
 800ea40:	2001      	movne	r0, #1
 800ea42:	b002      	add	sp, #8
 800ea44:	4770      	bx	lr
 800ea46:	4610      	mov	r0, r2
 800ea48:	e7fb      	b.n	800ea42 <__ascii_mbtowc+0x16>
 800ea4a:	f06f 0001 	mvn.w	r0, #1
 800ea4e:	e7f8      	b.n	800ea42 <__ascii_mbtowc+0x16>

0800ea50 <_read_r>:
 800ea50:	b538      	push	{r3, r4, r5, lr}
 800ea52:	4c07      	ldr	r4, [pc, #28]	; (800ea70 <_read_r+0x20>)
 800ea54:	4605      	mov	r5, r0
 800ea56:	4608      	mov	r0, r1
 800ea58:	4611      	mov	r1, r2
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	6022      	str	r2, [r4, #0]
 800ea5e:	461a      	mov	r2, r3
 800ea60:	f7f2 ff32 	bl	80018c8 <_read>
 800ea64:	1c43      	adds	r3, r0, #1
 800ea66:	d102      	bne.n	800ea6e <_read_r+0x1e>
 800ea68:	6823      	ldr	r3, [r4, #0]
 800ea6a:	b103      	cbz	r3, 800ea6e <_read_r+0x1e>
 800ea6c:	602b      	str	r3, [r5, #0]
 800ea6e:	bd38      	pop	{r3, r4, r5, pc}
 800ea70:	20000c28 	.word	0x20000c28

0800ea74 <__ascii_wctomb>:
 800ea74:	b149      	cbz	r1, 800ea8a <__ascii_wctomb+0x16>
 800ea76:	2aff      	cmp	r2, #255	; 0xff
 800ea78:	bf85      	ittet	hi
 800ea7a:	238a      	movhi	r3, #138	; 0x8a
 800ea7c:	6003      	strhi	r3, [r0, #0]
 800ea7e:	700a      	strbls	r2, [r1, #0]
 800ea80:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea84:	bf98      	it	ls
 800ea86:	2001      	movls	r0, #1
 800ea88:	4770      	bx	lr
 800ea8a:	4608      	mov	r0, r1
 800ea8c:	4770      	bx	lr
	...

0800ea90 <_init>:
 800ea90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea92:	bf00      	nop
 800ea94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea96:	bc08      	pop	{r3}
 800ea98:	469e      	mov	lr, r3
 800ea9a:	4770      	bx	lr

0800ea9c <_fini>:
 800ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9e:	bf00      	nop
 800eaa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaa2:	bc08      	pop	{r3}
 800eaa4:	469e      	mov	lr, r3
 800eaa6:	4770      	bx	lr
