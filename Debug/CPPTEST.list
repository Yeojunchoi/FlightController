
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f358  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800f508  0800f508  0001f508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8a0  0800f8a0  000202e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8a0  0800f8a0  0001f8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8a8  0800f8a8  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8a8  0800f8a8  0001f8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8ac  0800f8ac  0001f8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0800f8b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c8  200002e4  0800fb94  000202e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cac  0800fb94  00020cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204b0  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041bb  00000000  00000000  000407c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001690  00000000  00000000  00044980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001490  00000000  00000000  00046010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000283a5  00000000  00000000  000474a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000159e2  00000000  00000000  0006f845  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9430  00000000  00000000  00085227  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016e657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d84  00000000  00000000  0016e6d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f4f0 	.word	0x0800f4f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002e8 	.word	0x200002e8
 80001ec:	0800f4f0 	.word	0x0800f4f0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <invSqrt>:
#include "algorithmCollection.h"
#include <math.h>

#define DEG2PI 0.01745329251F

float invSqrt(float x) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	105a      	asrs	r2, r3, #1
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <invSqrt+0x74>)
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000fa0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fac:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000fb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd2:	371c      	adds	r7, #28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	5f3759df 	.word	0x5f3759df

08000fe0 <quat2eul>:

void quat2eul(float* q, float* roll, float* pitch, float* yaw){
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
	*roll = atan2(2*(q[0]*q[1] + q[2]* q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	ed93 7a00 	vldr	s14, [r3]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	edd3 7a00 	vldr	s15, [r3]
 8000ffc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3308      	adds	r3, #8
 8001004:	edd3 6a00 	vldr	s13, [r3]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	330c      	adds	r3, #12
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800101c:	ee17 0a90 	vmov	r0, s15
 8001020:	f7ff faa2 	bl	8000568 <__aeabi_f2d>
 8001024:	4604      	mov	r4, r0
 8001026:	460d      	mov	r5, r1
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	ed93 7a00 	vldr	s14, [r3]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3304      	adds	r3, #4
 800103c:	edd3 6a00 	vldr	s13, [r3]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3304      	adds	r3, #4
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800104c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3308      	adds	r3, #8
 8001054:	edd3 6a00 	vldr	s13, [r3]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3308      	adds	r3, #8
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001064:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	330c      	adds	r3, #12
 800106c:	edd3 6a00 	vldr	s13, [r3]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	330c      	adds	r3, #12
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800107c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001080:	ee17 0a90 	vmov	r0, s15
 8001084:	f7ff fa70 	bl	8000568 <__aeabi_f2d>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	ec43 2b11 	vmov	d1, r2, r3
 8001090:	ec45 4b10 	vmov	d0, r4, r5
 8001094:	f00b f868 	bl	800c168 <atan2>
 8001098:	ec54 3b10 	vmov	r3, r4, d0
 800109c:	4618      	mov	r0, r3
 800109e:	4621      	mov	r1, r4
 80010a0:	f7ff fd92 	bl	8000bc8 <__aeabi_d2f>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	601a      	str	r2, [r3, #0]
	*pitch = asin(-2*(q[1]*q[3] - q[0]*q[2]));
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3304      	adds	r3, #4
 80010ae:	ed93 7a00 	vldr	s14, [r3]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	330c      	adds	r3, #12
 80010b6:	edd3 7a00 	vldr	s15, [r3]
 80010ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	edd3 6a00 	vldr	s13, [r3]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3308      	adds	r3, #8
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80010d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010dc:	ee17 0a90 	vmov	r0, s15
 80010e0:	f7ff fa42 	bl	8000568 <__aeabi_f2d>
 80010e4:	4603      	mov	r3, r0
 80010e6:	460c      	mov	r4, r1
 80010e8:	ec44 3b10 	vmov	d0, r3, r4
 80010ec:	f00a ffe4 	bl	800c0b8 <asin>
 80010f0:	ec54 3b10 	vmov	r3, r4, d0
 80010f4:	4618      	mov	r0, r3
 80010f6:	4621      	mov	r1, r4
 80010f8:	f7ff fd66 	bl	8000bc8 <__aeabi_d2f>
 80010fc:	4602      	mov	r2, r0
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	601a      	str	r2, [r3, #0]
	*yaw = atan2(2*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3304      	adds	r3, #4
 8001106:	ed93 7a00 	vldr	s14, [r3]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3308      	adds	r3, #8
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	edd3 6a00 	vldr	s13, [r3]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	330c      	adds	r3, #12
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001130:	ee17 0a90 	vmov	r0, s15
 8001134:	f7ff fa18 	bl	8000568 <__aeabi_f2d>
 8001138:	4604      	mov	r4, r0
 800113a:	460d      	mov	r5, r1
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3304      	adds	r3, #4
 8001150:	edd3 6a00 	vldr	s13, [r3]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3304      	adds	r3, #4
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001160:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3308      	adds	r3, #8
 8001168:	edd3 6a00 	vldr	s13, [r3]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3308      	adds	r3, #8
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001178:	ee37 7a67 	vsub.f32	s14, s14, s15
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	330c      	adds	r3, #12
 8001180:	edd3 6a00 	vldr	s13, [r3]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	330c      	adds	r3, #12
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001194:	ee17 0a90 	vmov	r0, s15
 8001198:	f7ff f9e6 	bl	8000568 <__aeabi_f2d>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	ec43 2b11 	vmov	d1, r2, r3
 80011a4:	ec45 4b10 	vmov	d0, r4, r5
 80011a8:	f00a ffde 	bl	800c168 <atan2>
 80011ac:	ec54 3b10 	vmov	r3, r4, d0
 80011b0:	4618      	mov	r0, r3
 80011b2:	4621      	mov	r1, r4
 80011b4:	f7ff fd08 	bl	8000bc8 <__aeabi_d2f>
 80011b8:	4602      	mov	r2, r0
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	601a      	str	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bdb0      	pop	{r4, r5, r7, pc}

080011c6 <junTimer_tic>:

void junTimer_tic(struct junTimer* t){
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   t->last_time = HAL_GetTick();
 80011ce:	f001 f99d 	bl	800250c <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	601a      	str	r2, [r3, #0]
   t->start = 1;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	711a      	strb	r2, [r3, #4]
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <junTimer_toc>:

uint32_t junTimer_toc(struct junTimer* t){
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return HAL_GetTick() - t->last_time;
 80011ee:	f001 f98d 	bl	800250c <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1ad3      	subs	r3, r2, r3
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_DMA_Init+0x3c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <MX_DMA_Init+0x3c>)
 8001214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_DMA_Init+0x3c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	200e      	movs	r0, #14
 800122c:	f001 fa77 	bl	800271e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001230:	200e      	movs	r0, #14
 8001232:	f001 fa90 	bl	8002756 <HAL_NVIC_EnableIRQ>

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_ETH_Init+0x78>)
 800124a:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <MX_ETH_Init+0x7c>)
 800124c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_ETH_Init+0x78>)
 8001250:	2201      	movs	r2, #1
 8001252:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <MX_ETH_Init+0x78>)
 8001256:	2200      	movs	r2, #0
 8001258:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_ETH_Init+0x78>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_ETH_Init+0x78>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	3301      	adds	r3, #1
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <MX_ETH_Init+0x78>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	3302      	adds	r3, #2
 8001272:	22e1      	movs	r2, #225	; 0xe1
 8001274:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_ETH_Init+0x78>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	3303      	adds	r3, #3
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_ETH_Init+0x78>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	3304      	adds	r3, #4
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_ETH_Init+0x78>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	3305      	adds	r3, #5
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_ETH_Init+0x78>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_ETH_Init+0x78>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_ETH_Init+0x78>)
 80012a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012a6:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_ETH_Init+0x78>)
 80012aa:	f001 fe0d 	bl	8002ec8 <HAL_ETH_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80012b4:	f000 fac8 	bl	8001848 <Error_Handler>
  }

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000444 	.word	0x20000444
 80012c0:	40028000 	.word	0x40028000

080012c4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08e      	sub	sp, #56	; 0x38
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a55      	ldr	r2, [pc, #340]	; (8001438 <HAL_ETH_MspInit+0x174>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	f040 80a4 	bne.w	8001430 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
 80012ec:	4b53      	ldr	r3, [pc, #332]	; (800143c <HAL_ETH_MspInit+0x178>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a52      	ldr	r2, [pc, #328]	; (800143c <HAL_ETH_MspInit+0x178>)
 80012f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b50      	ldr	r3, [pc, #320]	; (800143c <HAL_ETH_MspInit+0x178>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001300:	623b      	str	r3, [r7, #32]
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	4b4c      	ldr	r3, [pc, #304]	; (800143c <HAL_ETH_MspInit+0x178>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	4a4b      	ldr	r2, [pc, #300]	; (800143c <HAL_ETH_MspInit+0x178>)
 800130e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001312:	6313      	str	r3, [r2, #48]	; 0x30
 8001314:	4b49      	ldr	r3, [pc, #292]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	4b45      	ldr	r3, [pc, #276]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	4a44      	ldr	r2, [pc, #272]	; (800143c <HAL_ETH_MspInit+0x178>)
 800132a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800132e:	6313      	str	r3, [r2, #48]	; 0x30
 8001330:	4b42      	ldr	r3, [pc, #264]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	4b3e      	ldr	r3, [pc, #248]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a3d      	ldr	r2, [pc, #244]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <HAL_ETH_MspInit+0x178>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	4b37      	ldr	r3, [pc, #220]	; (800143c <HAL_ETH_MspInit+0x178>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a36      	ldr	r2, [pc, #216]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <HAL_ETH_MspInit+0x178>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <HAL_ETH_MspInit+0x178>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	4a2f      	ldr	r2, [pc, #188]	; (800143c <HAL_ETH_MspInit+0x178>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	6313      	str	r3, [r2, #48]	; 0x30
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	4b29      	ldr	r3, [pc, #164]	; (800143c <HAL_ETH_MspInit+0x178>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	4a28      	ldr	r2, [pc, #160]	; (800143c <HAL_ETH_MspInit+0x178>)
 800139a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
 80013a0:	4b26      	ldr	r3, [pc, #152]	; (800143c <HAL_ETH_MspInit+0x178>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013ac:	2332      	movs	r3, #50	; 0x32
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013bc:	230b      	movs	r3, #11
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	481e      	ldr	r0, [pc, #120]	; (8001440 <HAL_ETH_MspInit+0x17c>)
 80013c8:	f002 f9ec 	bl	80037a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013cc:	2386      	movs	r3, #134	; 0x86
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013dc:	230b      	movs	r3, #11
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	4817      	ldr	r0, [pc, #92]	; (8001444 <HAL_ETH_MspInit+0x180>)
 80013e8:	f002 f9dc 	bl	80037a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013fe:	230b      	movs	r3, #11
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	480f      	ldr	r0, [pc, #60]	; (8001448 <HAL_ETH_MspInit+0x184>)
 800140a:	f002 f9cb 	bl	80037a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800140e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001420:	230b      	movs	r3, #11
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <HAL_ETH_MspInit+0x188>)
 800142c:	f002 f9ba 	bl	80037a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001430:	bf00      	nop
 8001432:	3738      	adds	r7, #56	; 0x38
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40028000 	.word	0x40028000
 800143c:	40023800 	.word	0x40023800
 8001440:	40020800 	.word	0x40020800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40021800 	.word	0x40021800

08001450 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08e      	sub	sp, #56	; 0x38
 8001454:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <MX_GPIO_Init+0x180>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a58      	ldr	r2, [pc, #352]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b56      	ldr	r3, [pc, #344]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	4b52      	ldr	r3, [pc, #328]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a51      	ldr	r2, [pc, #324]	; (80015d0 <MX_GPIO_Init+0x180>)
 800148c:	f043 0320 	orr.w	r3, r3, #32
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b4f      	ldr	r3, [pc, #316]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0320 	and.w	r3, r3, #32
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a4a      	ldr	r2, [pc, #296]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a43      	ldr	r2, [pc, #268]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a3c      	ldr	r2, [pc, #240]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a35      	ldr	r2, [pc, #212]	; (80015d0 <MX_GPIO_Init+0x180>)
 80014fc:	f043 0310 	orr.w	r3, r3, #16
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a27      	ldr	r2, [pc, #156]	; (80015d0 <MX_GPIO_Init+0x180>)
 8001534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <MX_GPIO_Init+0x180>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f244 0181 	movw	r1, #16513	; 0x4081
 800154c:	4821      	ldr	r0, [pc, #132]	; (80015d4 <MX_GPIO_Init+0x184>)
 800154e:	f002 fad3 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2140      	movs	r1, #64	; 0x40
 8001556:	4820      	ldr	r0, [pc, #128]	; (80015d8 <MX_GPIO_Init+0x188>)
 8001558:	f002 face 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800155c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <MX_GPIO_Init+0x18c>)
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	481b      	ldr	r0, [pc, #108]	; (80015e0 <MX_GPIO_Init+0x190>)
 8001572:	f002 f917 	bl	80037a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001576:	f244 0381 	movw	r3, #16513	; 0x4081
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	4811      	ldr	r0, [pc, #68]	; (80015d4 <MX_GPIO_Init+0x184>)
 8001590:	f002 f908 	bl	80037a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001594:	2340      	movs	r3, #64	; 0x40
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a8:	4619      	mov	r1, r3
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <MX_GPIO_Init+0x188>)
 80015ac:	f002 f8fa 	bl	80037a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_GPIO_Init+0x188>)
 80015c4:	f002 f8ee 	bl	80037a4 <HAL_GPIO_Init>

}
 80015c8:	bf00      	nop
 80015ca:	3738      	adds	r7, #56	; 0x38
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	10110000 	.word	0x10110000
 80015e0:	40020800 	.word	0x40020800

080015e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_I2C1_Init+0x74>)
 80015ea:	4a1c      	ldr	r2, [pc, #112]	; (800165c <MX_I2C1_Init+0x78>)
 80015ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_I2C1_Init+0x74>)
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <MX_I2C1_Init+0x7c>)
 80015f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_I2C1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_I2C1_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_I2C1_Init+0x74>)
 8001602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_I2C1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MX_I2C1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_I2C1_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_I2C1_Init+0x74>)
 8001622:	f002 fa83 	bl	8003b2c <HAL_I2C_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800162c:	f000 f90c 	bl	8001848 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001630:	2100      	movs	r1, #0
 8001632:	4809      	ldr	r0, [pc, #36]	; (8001658 <MX_I2C1_Init+0x74>)
 8001634:	f004 feed 	bl	8006412 <HAL_I2CEx_ConfigAnalogFilter>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800163e:	f000 f903 	bl	8001848 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001642:	2100      	movs	r1, #0
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_I2C1_Init+0x74>)
 8001646:	f004 ff20 	bl	800648a <HAL_I2CEx_ConfigDigitalFilter>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001650:	f000 f8fa 	bl	8001848 <Error_Handler>
  }

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2000048c 	.word	0x2000048c
 800165c:	40005400 	.word	0x40005400
 8001660:	00061a80 	.word	0x00061a80

08001664 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <HAL_I2C_MspInit+0x84>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d12c      	bne.n	80016e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_I2C_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a17      	ldr	r2, [pc, #92]	; (80016ec <HAL_I2C_MspInit+0x88>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_I2C_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80016a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a8:	2312      	movs	r3, #18
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b4:	2304      	movs	r3, #4
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	480c      	ldr	r0, [pc, #48]	; (80016f0 <HAL_I2C_MspInit+0x8c>)
 80016c0:	f002 f870 	bl	80037a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_I2C_MspInit+0x88>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_I2C_MspInit+0x88>)
 80016ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d2:	6413      	str	r3, [r2, #64]	; 0x40
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_I2C_MspInit+0x88>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40005400 	.word	0x40005400
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020400 	.word	0x40020400

080016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f8:	f000 fea2 	bl	8002440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fc:	f000 f81e 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001700:	f7ff fea6 	bl	8001450 <MX_GPIO_Init>
  MX_DMA_Init();
 8001704:	f7ff fd7e 	bl	8001204 <MX_DMA_Init>
  MX_ETH_Init();
 8001708:	f7ff fd9c 	bl	8001244 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800170c:	f000 fcb6 	bl	800207c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001710:	f000 fde4 	bl	80022dc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001714:	f7ff ff66 	bl	80015e4 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001718:	f000 fad4 	bl	8001cc4 <MX_TIM10_Init>
  MX_TIM11_Init();
 800171c:	f000 fb1e 	bl	8001d5c <MX_TIM11_Init>
  MX_TIM3_Init();
 8001720:	f000 f9b6 	bl	8001a90 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001724:	f000 fa36 	bl	8001b94 <MX_TIM4_Init>
  MX_UART7_Init();
 8001728:	f000 fc50 	bl	8001fcc <MX_UART7_Init>
  MX_USART2_UART_Init();
 800172c:	f000 fc7c 	bl	8002028 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001730:	f000 f86e 	bl	8001810 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    userMain();
 8001734:	f009 fb42 	bl	800adbc <userMain>
 8001738:	e7fc      	b.n	8001734 <main+0x40>
	...

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	; 0x50
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2230      	movs	r2, #48	; 0x30
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f00b faa1 	bl	800cc92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <SystemClock_Config+0xcc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <SystemClock_Config+0xcc>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	; 0x40
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <SystemClock_Config+0xcc>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <SystemClock_Config+0xd0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <SystemClock_Config+0xd0>)
 8001786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <SystemClock_Config+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001798:	2301      	movs	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a2:	2302      	movs	r3, #2
 80017a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ac:	2308      	movs	r3, #8
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017ba:	2307      	movs	r3, #7
 80017bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 ffbe 	bl	8006744 <HAL_RCC_OscConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017ce:	f000 f83b 	bl	8001848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d2:	230f      	movs	r3, #15
 80017d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d6:	2302      	movs	r3, #2
 80017d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	2105      	movs	r1, #5
 80017f0:	4618      	mov	r0, r3
 80017f2:	f005 fa17 	bl	8006c24 <HAL_RCC_ClockConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017fc:	f000 f824 	bl	8001848 <Error_Handler>
  }
}
 8001800:	bf00      	nop
 8001802:	3750      	adds	r7, #80	; 0x50
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000

08001810 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	201f      	movs	r0, #31
 800181a:	f000 ff80 	bl	800271e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800181e:	201f      	movs	r0, #31
 8001820:	f000 ff99 	bl	8002756 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	2020      	movs	r0, #32
 800182a:	f000 ff78 	bl	800271e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800182e:	2020      	movs	r0, #32
 8001830:	f000 ff91 	bl	8002756 <HAL_NVIC_EnableIRQ>
  /* UART7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2052      	movs	r0, #82	; 0x52
 800183a:	f000 ff70 	bl	800271e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART7_IRQn);
 800183e:	2052      	movs	r0, #82	; 0x52
 8001840:	f000 ff89 	bl	8002756 <HAL_NVIC_EnableIRQ>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <HAL_MspInit+0x4c>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_MspInit+0x4c>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fc:	f000 fdf2 	bl	80024e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA1_Stream3_IRQHandler+0x10>)
 800190a:	f001 f867 	bl	80029dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000660 	.word	0x20000660

08001918 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800191e:	f005 fc35 	bl	800718c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200005a0 	.word	0x200005a0

0800192c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <I2C1_EV_IRQHandler+0x10>)
 8001932:	f002 fe11 	bl	8004558 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000048c 	.word	0x2000048c

08001940 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <I2C1_ER_IRQHandler+0x10>)
 8001946:	f002 ff6d 	bl	8004824 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000048c 	.word	0x2000048c

08001954 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <UART7_IRQHandler+0x10>)
 800195a:	f006 fbcb 	bl	80080f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200005e0 	.word	0x200005e0

08001968 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e00a      	b.n	8001990 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800197a:	f3af 8000 	nop.w
 800197e:	4601      	mov	r1, r0
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	b2ca      	uxtb	r2, r1
 8001988:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf0      	blt.n	800197a <_read+0x12>
	}

return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	return -1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ca:	605a      	str	r2, [r3, #4]
	return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_isatty>:

int _isatty(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	return 1;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
	return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x50>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x16>
		heap_end = &end;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <_sbrk+0x50>)
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <_sbrk+0x54>)
 8001a20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <_sbrk+0x50>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <_sbrk+0x50>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	466a      	mov	r2, sp
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d907      	bls.n	8001a46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a36:	f00b f8ef 	bl	800cc18 <__errno>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
 8001a44:	e006      	b.n	8001a54 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <_sbrk+0x50>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <_sbrk+0x50>)
 8001a50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000300 	.word	0x20000300
 8001a60:	20000cb0 	.word	0x20000cb0

08001a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <SystemInit+0x28>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <SystemInit+0x28>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SystemInit+0x28>)
 8001a7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a7e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08e      	sub	sp, #56	; 0x38
 8001a94:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	f107 0320 	add.w	r3, r7, #32
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001ac2:	4a33      	ldr	r2, [pc, #204]	; (8001b90 <MX_TIM3_Init+0x100>)
 8001ac4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8001ac6:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001ac8:	2229      	movs	r2, #41	; 0x29
 8001aca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001ad4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001ad8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ae6:	4829      	ldr	r0, [pc, #164]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001ae8:	f005 fa8e 	bl	8007008 <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001af2:	f7ff fea9 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b00:	4619      	mov	r1, r3
 8001b02:	4822      	ldr	r0, [pc, #136]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001b04:	f005 fd10 	bl	8007528 <HAL_TIM_ConfigClockSource>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b0e:	f7ff fe9b 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b12:	481e      	ldr	r0, [pc, #120]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001b14:	f005 fac7 	bl	80070a6 <HAL_TIM_PWM_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b1e:	f7ff fe93 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b2a:	f107 0320 	add.w	r3, r7, #32
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4816      	ldr	r0, [pc, #88]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001b32:	f006 f8e9 	bl	8007d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b3c:	f7ff fe84 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b40:	2360      	movs	r3, #96	; 0x60
 8001b42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001b58:	f005 fc20 	bl	800739c <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b62:	f7ff fe71 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2204      	movs	r2, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4807      	ldr	r0, [pc, #28]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001b6e:	f005 fc15 	bl	800739c <HAL_TIM_PWM_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b78:	f7ff fe66 	bl	8001848 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <MX_TIM3_Init+0xfc>)
 8001b7e:	f000 f97b 	bl	8001e78 <HAL_TIM_MspPostInit>

}
 8001b82:	bf00      	nop
 8001b84:	3738      	adds	r7, #56	; 0x38
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000560 	.word	0x20000560
 8001b90:	40000400 	.word	0x40000400

08001b94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08e      	sub	sp, #56	; 0x38
 8001b98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba8:	f107 0320 	add.w	r3, r7, #32
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
 8001bc0:	615a      	str	r2, [r3, #20]
 8001bc2:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001bc4:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001bc6:	4a3e      	ldr	r2, [pc, #248]	; (8001cc0 <MX_TIM4_Init+0x12c>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8001bca:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001bcc:	2229      	movs	r2, #41	; 0x29
 8001bce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 8001bd6:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001bd8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001bdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bea:	4834      	ldr	r0, [pc, #208]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001bec:	f005 fa0c 	bl	8007008 <HAL_TIM_Base_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001bf6:	f7ff fe27 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c04:	4619      	mov	r1, r3
 8001c06:	482d      	ldr	r0, [pc, #180]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c08:	f005 fc8e 	bl	8007528 <HAL_TIM_ConfigClockSource>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001c12:	f7ff fe19 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c16:	4829      	ldr	r0, [pc, #164]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c18:	f005 fa45 	bl	80070a6 <HAL_TIM_PWM_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001c22:	f7ff fe11 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c2e:	f107 0320 	add.w	r3, r7, #32
 8001c32:	4619      	mov	r1, r3
 8001c34:	4821      	ldr	r0, [pc, #132]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c36:	f006 f867 	bl	8007d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001c40:	f7ff fe02 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c44:	2360      	movs	r3, #96	; 0x60
 8001c46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2200      	movs	r2, #0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4818      	ldr	r0, [pc, #96]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c5c:	f005 fb9e 	bl	800739c <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001c66:	f7ff fdef 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4812      	ldr	r0, [pc, #72]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c72:	f005 fb93 	bl	800739c <HAL_TIM_PWM_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001c7c:	f7ff fde4 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2208      	movs	r2, #8
 8001c84:	4619      	mov	r1, r3
 8001c86:	480d      	ldr	r0, [pc, #52]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c88:	f005 fb88 	bl	800739c <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001c92:	f7ff fdd9 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	220c      	movs	r2, #12
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4807      	ldr	r0, [pc, #28]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001c9e:	f005 fb7d 	bl	800739c <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001ca8:	f7ff fdce 	bl	8001848 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <MX_TIM4_Init+0x128>)
 8001cae:	f000 f8e3 	bl	8001e78 <HAL_TIM_MspPostInit>

}
 8001cb2:	bf00      	nop
 8001cb4:	3738      	adds	r7, #56	; 0x38
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200004e0 	.word	0x200004e0
 8001cc0:	40000800 	.word	0x40000800

08001cc4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
 8001cd8:	615a      	str	r2, [r3, #20]
 8001cda:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001cde:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <MX_TIM10_Init+0x94>)
 8001ce0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001d00:	4814      	ldr	r0, [pc, #80]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001d02:	f005 f981 	bl	8007008 <HAL_TIM_Base_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001d0c:	f7ff fd9c 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001d10:	4810      	ldr	r0, [pc, #64]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001d12:	f005 f9c8 	bl	80070a6 <HAL_TIM_PWM_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8001d1c:	f7ff fd94 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d20:	2360      	movs	r3, #96	; 0x60
 8001d22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2200      	movs	r2, #0
 8001d34:	4619      	mov	r1, r3
 8001d36:	4807      	ldr	r0, [pc, #28]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001d38:	f005 fb30 	bl	800739c <HAL_TIM_PWM_ConfigChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8001d42:	f7ff fd81 	bl	8001848 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <MX_TIM10_Init+0x90>)
 8001d48:	f000 f896 	bl	8001e78 <HAL_TIM_MspPostInit>

}
 8001d4c:	bf00      	nop
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000520 	.word	0x20000520
 8001d58:	40014400 	.word	0x40014400

08001d5c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d62:	4a0f      	ldr	r2, [pc, #60]	; (8001da0 <MX_TIM11_Init+0x44>)
 8001d64:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 840-1;
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d68:	f240 3247 	movw	r2, #839	; 0x347
 8001d6c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d7a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_TIM11_Init+0x40>)
 8001d8a:	f005 f93d 	bl	8007008 <HAL_TIM_Base_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001d94:	f7ff fd58 	bl	8001848 <Error_Handler>
  }

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200005a0 	.word	0x200005a0
 8001da0:	40014800 	.word	0x40014800

08001da4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <HAL_TIM_Base_MspInit+0xc0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10e      	bne.n	8001dd4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a2a      	ldr	r2, [pc, #168]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001dd2:	e042      	b.n	8001e5a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <HAL_TIM_Base_MspInit+0xc8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10e      	bne.n	8001dfc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a20      	ldr	r2, [pc, #128]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
}
 8001dfa:	e02e      	b.n	8001e5a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_TIM_Base_MspInit+0xcc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a16      	ldr	r2, [pc, #88]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
}
 8001e22:	e01a      	b.n	8001e5a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <HAL_TIM_Base_MspInit+0xd0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d115      	bne.n	8001e5a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_TIM_Base_MspInit+0xc4>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	201a      	movs	r0, #26
 8001e50:	f000 fc65 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e54:	201a      	movs	r0, #26
 8001e56:	f000 fc7e 	bl	8002756 <HAL_NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40000400 	.word	0x40000400
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	40014400 	.word	0x40014400
 8001e74:	40014800 	.word	0x40014800

08001e78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a45      	ldr	r2, [pc, #276]	; (8001fac <HAL_TIM_MspPostInit+0x134>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d13c      	bne.n	8001f14 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a43      	ldr	r2, [pc, #268]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a3c      	ldr	r2, [pc, #240]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ed2:	2340      	movs	r3, #64	; 0x40
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	4831      	ldr	r0, [pc, #196]	; (8001fb4 <HAL_TIM_MspPostInit+0x13c>)
 8001eee:	f001 fc59 	bl	80037a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f02:	2302      	movs	r3, #2
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	482a      	ldr	r0, [pc, #168]	; (8001fb8 <HAL_TIM_MspPostInit+0x140>)
 8001f0e:	f001 fc49 	bl	80037a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001f12:	e047      	b.n	8001fa4 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a28      	ldr	r2, [pc, #160]	; (8001fbc <HAL_TIM_MspPostInit+0x144>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d11f      	bne.n	8001f5e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f3a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	4619      	mov	r1, r3
 8001f56:	481a      	ldr	r0, [pc, #104]	; (8001fc0 <HAL_TIM_MspPostInit+0x148>)
 8001f58:	f001 fc24 	bl	80037a4 <HAL_GPIO_Init>
}
 8001f5c:	e022      	b.n	8001fa4 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM10)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a18      	ldr	r2, [pc, #96]	; (8001fc4 <HAL_TIM_MspPostInit+0x14c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d11d      	bne.n	8001fa4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001f72:	f043 0320 	orr.w	r3, r3, #32
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_TIM_MspPostInit+0x138>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f84:	2340      	movs	r3, #64	; 0x40
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001f94:	2303      	movs	r3, #3
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <HAL_TIM_MspPostInit+0x150>)
 8001fa0:	f001 fc00 	bl	80037a4 <HAL_GPIO_Init>
}
 8001fa4:	bf00      	nop
 8001fa6:	3730      	adds	r7, #48	; 0x30
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40000400 	.word	0x40000400
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40000800 	.word	0x40000800
 8001fc0:	40020c00 	.word	0x40020c00
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40021400 	.word	0x40021400

08001fcc <MX_UART7_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart7_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <MX_UART7_Init+0x50>)
 8001fd2:	4a13      	ldr	r2, [pc, #76]	; (8002020 <MX_UART7_Init+0x54>)
 8001fd4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_UART7_Init+0x50>)
 8001fd8:	4a12      	ldr	r2, [pc, #72]	; (8002024 <MX_UART7_Init+0x58>)
 8001fda:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_UART7_Init+0x50>)
 8001fde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fe2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <MX_UART7_Init+0x50>)
 8001fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fea:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_UART7_Init+0x50>)
 8001fee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_UART7_Init+0x50>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_UART7_Init+0x50>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_UART7_Init+0x50>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_UART7_Init+0x50>)
 8002008:	f005 ff0e 	bl	8007e28 <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 8002012:	f7ff fc19 	bl	8001848 <Error_Handler>
  }

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200005e0 	.word	0x200005e0
 8002020:	40007800 	.word	0x40007800
 8002024:	000186a0 	.word	0x000186a0

08002028 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <MX_USART2_UART_Init+0x50>)
 8002030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 8002034:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 800204e:	220c      	movs	r2, #12
 8002050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 8002054:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002058:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002060:	4804      	ldr	r0, [pc, #16]	; (8002074 <MX_USART2_UART_Init+0x4c>)
 8002062:	f005 fee1 	bl	8007e28 <HAL_UART_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800206c:	f7ff fbec 	bl	8001848 <Error_Handler>
  }

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200006c0 	.word	0x200006c0
 8002078:	40004400 	.word	0x40004400

0800207c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <MX_USART3_UART_Init+0x50>)
 8002084:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 8002088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800208c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 80020a2:	220c      	movs	r2, #12
 80020a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_USART3_UART_Init+0x4c>)
 80020b4:	f005 feb8 	bl	8007e28 <HAL_UART_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020be:	f7ff fbc3 	bl	8001848 <Error_Handler>
  }

}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000620 	.word	0x20000620
 80020cc:	40004800 	.word	0x40004800

080020d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08e      	sub	sp, #56	; 0x38
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a72      	ldr	r2, [pc, #456]	; (80022b8 <HAL_UART_MspInit+0x1e8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d15c      	bne.n	80021ac <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
 80020f6:	4b71      	ldr	r3, [pc, #452]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a70      	ldr	r2, [pc, #448]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80020fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b6e      	ldr	r3, [pc, #440]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800210a:	623b      	str	r3, [r7, #32]
 800210c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a69      	ldr	r2, [pc, #420]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002118:	f043 0310 	orr.w	r3, r3, #16
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800212a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002134:	2301      	movs	r3, #1
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800213c:	2308      	movs	r3, #8
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002144:	4619      	mov	r1, r3
 8002146:	485e      	ldr	r0, [pc, #376]	; (80022c0 <HAL_UART_MspInit+0x1f0>)
 8002148:	f001 fb2c 	bl	80037a4 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 800214c:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 800214e:	4a5e      	ldr	r2, [pc, #376]	; (80022c8 <HAL_UART_MspInit+0x1f8>)
 8002150:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8002152:	4b5c      	ldr	r3, [pc, #368]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002154:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002158:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800215a:	4b5a      	ldr	r3, [pc, #360]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002160:	4b58      	ldr	r3, [pc, #352]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002166:	4b57      	ldr	r3, [pc, #348]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800216c:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800216e:	4b55      	ldr	r3, [pc, #340]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002170:	2200      	movs	r2, #0
 8002172:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 800217a:	4b52      	ldr	r3, [pc, #328]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 800217c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002180:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002182:	4b50      	ldr	r3, [pc, #320]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002184:	2200      	movs	r2, #0
 8002186:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002188:	4b4e      	ldr	r3, [pc, #312]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 800218a:	2200      	movs	r2, #0
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800218e:	484d      	ldr	r0, [pc, #308]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 8002190:	f000 fafc 	bl	800278c <HAL_DMA_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800219a:	f7ff fb55 	bl	8001848 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a48      	ldr	r2, [pc, #288]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34
 80021a4:	4a47      	ldr	r2, [pc, #284]	; (80022c4 <HAL_UART_MspInit+0x1f4>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021aa:	e081      	b.n	80022b0 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a46      	ldr	r2, [pc, #280]	; (80022cc <HAL_UART_MspInit+0x1fc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d14a      	bne.n	800224c <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	4b40      	ldr	r3, [pc, #256]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a3f      	ldr	r2, [pc, #252]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a38      	ldr	r2, [pc, #224]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a31      	ldr	r2, [pc, #196]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800220a:	2309      	movs	r3, #9
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800221a:	2307      	movs	r3, #7
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002222:	4619      	mov	r1, r3
 8002224:	482a      	ldr	r0, [pc, #168]	; (80022d0 <HAL_UART_MspInit+0x200>)
 8002226:	f001 fabd 	bl	80037a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800222a:	2330      	movs	r3, #48	; 0x30
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800223a:	2307      	movs	r3, #7
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	4619      	mov	r1, r3
 8002244:	4823      	ldr	r0, [pc, #140]	; (80022d4 <HAL_UART_MspInit+0x204>)
 8002246:	f001 faad 	bl	80037a4 <HAL_GPIO_Init>
}
 800224a:	e031      	b.n	80022b0 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <HAL_UART_MspInit+0x208>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d12c      	bne.n	80022b0 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a17      	ldr	r2, [pc, #92]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_UART_MspInit+0x1ec>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800228e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022a0:	2307      	movs	r3, #7
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	480a      	ldr	r0, [pc, #40]	; (80022d4 <HAL_UART_MspInit+0x204>)
 80022ac:	f001 fa7a 	bl	80037a4 <HAL_GPIO_Init>
}
 80022b0:	bf00      	nop
 80022b2:	3738      	adds	r7, #56	; 0x38
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40007800 	.word	0x40007800
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40021000 	.word	0x40021000
 80022c4:	20000660 	.word	0x20000660
 80022c8:	40026058 	.word	0x40026058
 80022cc:	40004400 	.word	0x40004400
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40020c00 	.word	0x40020c00
 80022d8:	40004800 	.word	0x40004800

080022dc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80022e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ea:	2204      	movs	r2, #4
 80022ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022f0:	2202      	movs	r2, #2
 80022f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022fc:	2202      	movs	r2, #2
 80022fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002302:	2201      	movs	r2, #1
 8002304:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002314:	2201      	movs	r2, #1
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800231a:	2200      	movs	r2, #0
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002320:	f004 f8f2 	bl	8006508 <HAL_PCD_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800232a:	f7ff fa8d 	bl	8001848 <Error_Handler>
  }

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000700 	.word	0x20000700

08002338 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002358:	d13f      	bne.n	80023da <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002376:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002388:	230a      	movs	r3, #10
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4619      	mov	r1, r3
 8002392:	4815      	ldr	r0, [pc, #84]	; (80023e8 <HAL_PCD_MspInit+0xb0>)
 8002394:	f001 fa06 	bl	80037a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	480e      	ldr	r0, [pc, #56]	; (80023e8 <HAL_PCD_MspInit+0xb0>)
 80023ae:	f001 f9f9 	bl	80037a4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b6:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 80023b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023bc:	6353      	str	r3, [r2, #52]	; 0x34
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	; 0x44
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_PCD_MspInit+0xac>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80023da:	bf00      	nop
 80023dc:	3728      	adds	r7, #40	; 0x28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020000 	.word	0x40020000

080023ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002424 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023f2:	e003      	b.n	80023fc <LoopCopyDataInit>

080023f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023fa:	3104      	adds	r1, #4

080023fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023fc:	480b      	ldr	r0, [pc, #44]	; (800242c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002400:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002402:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002404:	d3f6      	bcc.n	80023f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002408:	e002      	b.n	8002410 <LoopFillZerobss>

0800240a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800240a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800240c:	f842 3b04 	str.w	r3, [r2], #4

08002410 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002412:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002414:	d3f9      	bcc.n	800240a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002416:	f7ff fb25 	bl	8001a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241a:	f00a fc03 	bl	800cc24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800241e:	f7ff f969 	bl	80016f4 <main>
  bx  lr    
 8002422:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002424:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002428:	0800f8b0 	.word	0x0800f8b0
  ldr  r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002430:	200002e4 	.word	0x200002e4
  ldr  r2, =_sbss
 8002434:	200002e4 	.word	0x200002e4
  ldr  r3, = _ebss
 8002438:	20000cac 	.word	0x20000cac

0800243c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800243c:	e7fe      	b.n	800243c <ADC_IRQHandler>
	...

08002440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <HAL_Init+0x40>)
 800244a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800244e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_Init+0x40>)
 8002456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_Init+0x40>)
 8002462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002468:	2003      	movs	r0, #3
 800246a:	f000 f94d 	bl	8002708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246e:	2000      	movs	r0, #0
 8002470:	f000 f808 	bl	8002484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002474:	f7ff f9f0 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00

08002484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_InitTick+0x54>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_InitTick+0x58>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249a:	fbb3 f3f1 	udiv	r3, r3, r1
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f965 	bl	8002772 <HAL_SYSTICK_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00e      	b.n	80024d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b0f      	cmp	r3, #15
 80024b6:	d80a      	bhi.n	80024ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b8:	2200      	movs	r2, #0
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f000 f92d 	bl	800271e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <HAL_InitTick+0x5c>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000000 	.word	0x20000000
 80024dc:	20000008 	.word	0x20000008
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_IncTick+0x20>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_IncTick+0x24>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_IncTick+0x24>)
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000008 	.word	0x20000008
 8002508:	20000b08 	.word	0x20000b08

0800250c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return uwTick;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_GetTick+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000b08 	.word	0x20000b08

08002524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff ffee 	bl	800250c <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d005      	beq.n	800254a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_Delay+0x40>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800254a:	bf00      	nop
 800254c:	f7ff ffde 	bl	800250c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	429a      	cmp	r2, r3
 800255a:	d8f7      	bhi.n	800254c <HAL_Delay+0x28>
  {
  }
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000008 	.word	0x20000008

08002568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002584:	4013      	ands	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259a:	4a04      	ldr	r2, [pc, #16]	; (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	60d3      	str	r3, [r2, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <__NVIC_GetPriorityGrouping+0x18>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0307 	and.w	r3, r3, #7
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	db0b      	blt.n	80025f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4907      	ldr	r1, [pc, #28]	; (8002604 <__NVIC_EnableIRQ+0x38>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2001      	movs	r0, #1
 80025ee:	fa00 f202 	lsl.w	r2, r0, r2
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000e100 	.word	0xe000e100

08002608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	2b00      	cmp	r3, #0
 800261a:	db0a      	blt.n	8002632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	490c      	ldr	r1, [pc, #48]	; (8002654 <__NVIC_SetPriority+0x4c>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	0112      	lsls	r2, r2, #4
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	440b      	add	r3, r1
 800262c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002630:	e00a      	b.n	8002648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4908      	ldr	r1, [pc, #32]	; (8002658 <__NVIC_SetPriority+0x50>)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	3b04      	subs	r3, #4
 8002640:	0112      	lsls	r2, r2, #4
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	440b      	add	r3, r1
 8002646:	761a      	strb	r2, [r3, #24]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000e100 	.word	0xe000e100
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	; 0x24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f1c3 0307 	rsb	r3, r3, #7
 8002676:	2b04      	cmp	r3, #4
 8002678:	bf28      	it	cs
 800267a:	2304      	movcs	r3, #4
 800267c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3304      	adds	r3, #4
 8002682:	2b06      	cmp	r3, #6
 8002684:	d902      	bls.n	800268c <NVIC_EncodePriority+0x30>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3b03      	subs	r3, #3
 800268a:	e000      	b.n	800268e <NVIC_EncodePriority+0x32>
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	f04f 32ff 	mov.w	r2, #4294967295
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	401a      	ands	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a4:	f04f 31ff 	mov.w	r1, #4294967295
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43d9      	mvns	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	4313      	orrs	r3, r2
         );
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3724      	adds	r7, #36	; 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d4:	d301      	bcc.n	80026da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00f      	b.n	80026fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <SysTick_Config+0x40>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e2:	210f      	movs	r1, #15
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f7ff ff8e 	bl	8002608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <SysTick_Config+0x40>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <SysTick_Config+0x40>)
 80026f4:	2207      	movs	r2, #7
 80026f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	e000e010 	.word	0xe000e010

08002708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff29 	bl	8002568 <__NVIC_SetPriorityGrouping>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002730:	f7ff ff3e 	bl	80025b0 <__NVIC_GetPriorityGrouping>
 8002734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7ff ff8e 	bl	800265c <NVIC_EncodePriority>
 8002740:	4602      	mov	r2, r0
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff5d 	bl	8002608 <__NVIC_SetPriority>
}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff31 	bl	80025cc <__NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ffa2 	bl	80026c4 <SysTick_Config>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002798:	f7ff feb8 	bl	800250c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e099      	b.n	80028dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c8:	e00f      	b.n	80027ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ca:	f7ff fe9f 	bl	800250c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d908      	bls.n	80027ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2203      	movs	r2, #3
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e078      	b.n	80028dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e8      	bne.n	80027ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <HAL_DMA_Init+0x158>)
 8002804:	4013      	ands	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002816:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2b04      	cmp	r3, #4
 8002842:	d107      	bne.n	8002854 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	4313      	orrs	r3, r2
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f023 0307 	bic.w	r3, r3, #7
 800286a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	2b04      	cmp	r3, #4
 800287c:	d117      	bne.n	80028ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00e      	beq.n	80028ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fa9f 	bl	8002dd4 <DMA_CheckFifoParam>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2240      	movs	r2, #64	; 0x40
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028aa:	2301      	movs	r3, #1
 80028ac:	e016      	b.n	80028dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fa56 	bl	8002d68 <DMA_CalcBaseAndBitshift>
 80028bc:	4603      	mov	r3, r0
 80028be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	223f      	movs	r2, #63	; 0x3f
 80028c6:	409a      	lsls	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	f010803f 	.word	0xf010803f

080028e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_DMA_Start_IT+0x26>
 800290a:	2302      	movs	r3, #2
 800290c:	e040      	b.n	8002990 <HAL_DMA_Start_IT+0xa8>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d12f      	bne.n	8002982 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2202      	movs	r2, #2
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f9e8 	bl	8002d0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	223f      	movs	r2, #63	; 0x3f
 8002942:	409a      	lsls	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0216 	orr.w	r2, r2, #22
 8002956:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0208 	orr.w	r2, r2, #8
 800296e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e005      	b.n	800298e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800298a:	2302      	movs	r3, #2
 800298c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800298e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d004      	beq.n	80029b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00c      	b.n	80029d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2205      	movs	r2, #5
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0201 	bic.w	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029e8:	4b92      	ldr	r3, [pc, #584]	; (8002c34 <HAL_DMA_IRQHandler+0x258>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a92      	ldr	r2, [pc, #584]	; (8002c38 <HAL_DMA_IRQHandler+0x25c>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0a9b      	lsrs	r3, r3, #10
 80029f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	2208      	movs	r2, #8
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01a      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0204 	bic.w	r2, r2, #4
 8002a2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	2208      	movs	r2, #8
 8002a36:	409a      	lsls	r2, r3
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d012      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a76:	f043 0202 	orr.w	r2, r3, #2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	2204      	movs	r2, #4
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d012      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	f043 0204 	orr.w	r2, r3, #4
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	2210      	movs	r2, #16
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d043      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d03c      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d018      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d108      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d024      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
 8002b0a:	e01f      	b.n	8002b4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01b      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
 8002b1c:	e016      	b.n	8002b4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d107      	bne.n	8002b3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0208 	bic.w	r2, r2, #8
 8002b3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2220      	movs	r2, #32
 8002b52:	409a      	lsls	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 808e 	beq.w	8002c7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8086 	beq.w	8002c7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	2220      	movs	r2, #32
 8002b74:	409a      	lsls	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d136      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0216 	bic.w	r2, r2, #22
 8002b94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0x1da>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0208 	bic.w	r2, r2, #8
 8002bc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	223f      	movs	r2, #63	; 0x3f
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d07d      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4798      	blx	r3
        }
        return;
 8002bf2:	e078      	b.n	8002ce6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d01c      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d108      	bne.n	8002c22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d030      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
 8002c20:	e02b      	b.n	8002c7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d027      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
 8002c32:	e022      	b.n	8002c7a <HAL_DMA_IRQHandler+0x29e>
 8002c34:	20000000 	.word	0x20000000
 8002c38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10f      	bne.n	8002c6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0210 	bic.w	r2, r2, #16
 8002c58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d032      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d022      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2205      	movs	r2, #5
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d307      	bcc.n	8002cc2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f2      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x2ca>
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cc2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
 8002ce4:	e000      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ce6:	bf00      	nop
    }
  }
}
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop

08002cf0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cfe:	b2db      	uxtb	r3, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d108      	bne.n	8002d4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d4a:	e007      	b.n	8002d5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	3b10      	subs	r3, #16
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <DMA_CalcBaseAndBitshift+0x64>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d909      	bls.n	8002daa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	1d1a      	adds	r2, r3, #4
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	659a      	str	r2, [r3, #88]	; 0x58
 8002da8:	e007      	b.n	8002dba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	aaaaaaab 	.word	0xaaaaaaab
 8002dd0:	0800f590 	.word	0x0800f590

08002dd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11f      	bne.n	8002e2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d855      	bhi.n	8002ea0 <DMA_CheckFifoParam+0xcc>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <DMA_CheckFifoParam+0x28>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e1f 	.word	0x08002e1f
 8002e04:	08002e0d 	.word	0x08002e0d
 8002e08:	08002ea1 	.word	0x08002ea1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d045      	beq.n	8002ea4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1c:	e042      	b.n	8002ea4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e26:	d13f      	bne.n	8002ea8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2c:	e03c      	b.n	8002ea8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e36:	d121      	bne.n	8002e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d836      	bhi.n	8002eac <DMA_CheckFifoParam+0xd8>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <DMA_CheckFifoParam+0x70>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e55 	.word	0x08002e55
 8002e48:	08002e5b 	.word	0x08002e5b
 8002e4c:	08002e55 	.word	0x08002e55
 8002e50:	08002e6d 	.word	0x08002e6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
      break;
 8002e58:	e02f      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d024      	beq.n	8002eb0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6a:	e021      	b.n	8002eb0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e74:	d11e      	bne.n	8002eb4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e7a:	e01b      	b.n	8002eb4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d902      	bls.n	8002e88 <DMA_CheckFifoParam+0xb4>
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d003      	beq.n	8002e8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e86:	e018      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8c:	e015      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00e      	beq.n	8002eb8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9e:	e00b      	b.n	8002eb8 <DMA_CheckFifoParam+0xe4>
      break;
 8002ea0:	bf00      	nop
 8002ea2:	e00a      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;
 8002ea4:	bf00      	nop
 8002ea6:	e008      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;
 8002ea8:	bf00      	nop
 8002eaa:	e006      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;
 8002eac:	bf00      	nop
 8002eae:	e004      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;
 8002eb0:	bf00      	nop
 8002eb2:	e002      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;   
 8002eb4:	bf00      	nop
 8002eb6:	e000      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;
 8002eb8:	bf00      	nop
    }
  } 
  
  return status; 
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002ed8:	4baa      	ldr	r3, [pc, #680]	; (8003184 <HAL_ETH_Init+0x2bc>)
 8002eda:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e185      	b.n	80031fa <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fe f9de 	bl	80012c4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	4b9e      	ldr	r3, [pc, #632]	; (8003188 <HAL_ETH_Init+0x2c0>)
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	4a9d      	ldr	r2, [pc, #628]	; (8003188 <HAL_ETH_Init+0x2c0>)
 8002f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f16:	6453      	str	r3, [r2, #68]	; 0x44
 8002f18:	4b9b      	ldr	r3, [pc, #620]	; (8003188 <HAL_ETH_Init+0x2c0>)
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002f24:	4b99      	ldr	r3, [pc, #612]	; (800318c <HAL_ETH_Init+0x2c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a98      	ldr	r2, [pc, #608]	; (800318c <HAL_ETH_Init+0x2c4>)
 8002f2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f2e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002f30:	4b96      	ldr	r3, [pc, #600]	; (800318c <HAL_ETH_Init+0x2c4>)
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4994      	ldr	r1, [pc, #592]	; (800318c <HAL_ETH_Init+0x2c4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f54:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f56:	f7ff fad9 	bl	800250c <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f5c:	e011      	b.n	8002f82 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002f5e:	f7ff fad5 	bl	800250c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f6c:	d909      	bls.n	8002f82 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2203      	movs	r2, #3
 8002f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e13b      	b.n	80031fa <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1e4      	bne.n	8002f5e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f023 031c 	bic.w	r3, r3, #28
 8002fa2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002fa4:	f003 fffc 	bl	8006fa0 <HAL_RCC_GetHCLKFreq>
 8002fa8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4a78      	ldr	r2, [pc, #480]	; (8003190 <HAL_ETH_Init+0x2c8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d908      	bls.n	8002fc4 <HAL_ETH_Init+0xfc>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4a77      	ldr	r2, [pc, #476]	; (8003194 <HAL_ETH_Init+0x2cc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d804      	bhi.n	8002fc4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e027      	b.n	8003014 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	4a73      	ldr	r2, [pc, #460]	; (8003194 <HAL_ETH_Init+0x2cc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d908      	bls.n	8002fde <HAL_ETH_Init+0x116>
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	4a72      	ldr	r2, [pc, #456]	; (8003198 <HAL_ETH_Init+0x2d0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d804      	bhi.n	8002fde <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f043 030c 	orr.w	r3, r3, #12
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	e01a      	b.n	8003014 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4a6d      	ldr	r2, [pc, #436]	; (8003198 <HAL_ETH_Init+0x2d0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d903      	bls.n	8002fee <HAL_ETH_Init+0x126>
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4a6c      	ldr	r2, [pc, #432]	; (800319c <HAL_ETH_Init+0x2d4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d911      	bls.n	8003012 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	4a6a      	ldr	r2, [pc, #424]	; (800319c <HAL_ETH_Init+0x2d4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d908      	bls.n	8003008 <HAL_ETH_Init+0x140>
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4a69      	ldr	r2, [pc, #420]	; (80031a0 <HAL_ETH_Init+0x2d8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d804      	bhi.n	8003008 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e005      	b.n	8003014 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f043 0310 	orr.w	r3, r3, #16
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	e000      	b.n	8003014 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003012:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800301c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003020:	2100      	movs	r1, #0
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f956 	bl	80032d4 <HAL_ETH_WritePHYRegister>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003032:	6939      	ldr	r1, [r7, #16]
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f9b3 	bl	80033a0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e0d9      	b.n	80031fa <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003046:	20ff      	movs	r0, #255	; 0xff
 8003048:	f7ff fa6c 	bl	8002524 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a7 	beq.w	80031a4 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003056:	f7ff fa59 	bl	800250c <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800305c:	f107 030c 	add.w	r3, r7, #12
 8003060:	461a      	mov	r2, r3
 8003062:	2101      	movs	r1, #1
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f8cd 	bl	8003204 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800306a:	f7ff fa4f 	bl	800250c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d90f      	bls.n	800309c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003080:	6939      	ldr	r1, [r7, #16]
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f98c 	bl	80033a0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e0ae      	b.n	80031fa <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0da      	beq.n	800305c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80030a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030aa:	2100      	movs	r1, #0
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f911 	bl	80032d4 <HAL_ETH_WritePHYRegister>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80030bc:	6939      	ldr	r1, [r7, #16]
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f96e 	bl	80033a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80030cc:	2301      	movs	r3, #1
 80030ce:	e094      	b.n	80031fa <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80030d0:	f7ff fa1c 	bl	800250c <HAL_GetTick>
 80030d4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80030d6:	f107 030c 	add.w	r3, r7, #12
 80030da:	461a      	mov	r2, r3
 80030dc:	2101      	movs	r1, #1
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f890 	bl	8003204 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80030e4:	f7ff fa12 	bl	800250c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d90f      	bls.n	8003116 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80030fa:	6939      	ldr	r1, [r7, #16]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f94f 	bl	80033a0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e071      	b.n	80031fa <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0da      	beq.n	80030d6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003120:	f107 030c 	add.w	r3, r7, #12
 8003124:	461a      	mov	r2, r3
 8003126:	211f      	movs	r1, #31
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f86b 	bl	8003204 <HAL_ETH_ReadPHYRegister>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003138:	6939      	ldr	r1, [r7, #16]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f930 	bl	80033a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003148:	2301      	movs	r3, #1
 800314a:	e056      	b.n	80031fa <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	e002      	b.n	8003166 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	e037      	b.n	80031e8 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	e032      	b.n	80031e8 <HAL_ETH_Init+0x320>
 8003182:	bf00      	nop
 8003184:	03938700 	.word	0x03938700
 8003188:	40023800 	.word	0x40023800
 800318c:	40013800 	.word	0x40013800
 8003190:	01312cff 	.word	0x01312cff
 8003194:	02160ebf 	.word	0x02160ebf
 8003198:	039386ff 	.word	0x039386ff
 800319c:	05f5e0ff 	.word	0x05f5e0ff
 80031a0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80031b4:	4313      	orrs	r3, r2
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	2100      	movs	r1, #0
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f889 	bl	80032d4 <HAL_ETH_WritePHYRegister>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00b      	beq.n	80031e0 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80031cc:	6939      	ldr	r1, [r7, #16]
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f8e6 	bl	80033a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e00c      	b.n	80031fa <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80031e0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80031e4:	f7ff f99e 	bl	8002524 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80031e8:	6939      	ldr	r1, [r7, #16]
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8d8 	bl	80033a0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop

08003204 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	460b      	mov	r3, r1
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b82      	cmp	r3, #130	; 0x82
 8003224:	d101      	bne.n	800322a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003226:	2302      	movs	r3, #2
 8003228:	e050      	b.n	80032cc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2282      	movs	r2, #130	; 0x82
 800322e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f003 031c 	and.w	r3, r3, #28
 8003240:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8a1b      	ldrh	r3, [r3, #16]
 8003246:	02db      	lsls	r3, r3, #11
 8003248:	b29b      	uxth	r3, r3
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003250:	897b      	ldrh	r3, [r7, #10]
 8003252:	019b      	lsls	r3, r3, #6
 8003254:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f023 0302 	bic.w	r3, r3, #2
 8003264:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003276:	f7ff f949 	bl	800250c <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800327c:	e015      	b.n	80032aa <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800327e:	f7ff f945 	bl	800250c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328c:	d309      	bcc.n	80032a2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e014      	b.n	80032cc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e4      	bne.n	800327e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	460b      	mov	r3, r1
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b42      	cmp	r3, #66	; 0x42
 80032f4:	d101      	bne.n	80032fa <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	e04e      	b.n	8003398 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2242      	movs	r2, #66	; 0x42
 80032fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 031c 	and.w	r3, r3, #28
 8003310:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8a1b      	ldrh	r3, [r3, #16]
 8003316:	02db      	lsls	r3, r3, #11
 8003318:	b29b      	uxth	r3, r3
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003320:	897b      	ldrh	r3, [r7, #10]
 8003322:	019b      	lsls	r3, r3, #6
 8003324:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003350:	f7ff f8dc 	bl	800250c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003356:	e015      	b.n	8003384 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003358:	f7ff f8d8 	bl	800250c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003366:	d309      	bcc.n	800337c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e00d      	b.n	8003398 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e4      	bne.n	8003358 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b0b0      	sub	sp, #192	; 0xc0
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033bc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80033ce:	2300      	movs	r3, #0
 80033d0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80033da:	2300      	movs	r3, #0
 80033dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80033e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ea:	663b      	str	r3, [r7, #96]	; 0x60
 80033ec:	e001      	b.n	80033f2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80033f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033f6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80033fc:	2300      	movs	r3, #0
 80033fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003400:	2300      	movs	r3, #0
 8003402:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003404:	2300      	movs	r3, #0
 8003406:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003408:	2300      	movs	r3, #0
 800340a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800340c:	2340      	movs	r3, #64	; 0x40
 800340e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003416:	2300      	movs	r3, #0
 8003418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800341c:	2300      	movs	r3, #0
 800341e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003422:	2300      	movs	r3, #0
 8003424:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800342e:	2300      	movs	r3, #0
 8003430:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003446:	2300      	movs	r3, #0
 8003448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003452:	2300      	movs	r3, #0
 8003454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800345e:	2300      	movs	r3, #0
 8003460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003474:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003478:	4bac      	ldr	r3, [pc, #688]	; (800372c <ETH_MACDMAConfig+0x38c>)
 800347a:	4013      	ands	r3, r2
 800347c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003480:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003484:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003488:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800348a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800348c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003492:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003496:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800349a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80034a0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80034a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80034a4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80034a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80034a8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80034aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80034ac:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80034b0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80034b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80034b4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80034b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034c8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034d4:	2001      	movs	r0, #1
 80034d6:	f7ff f825 	bl	8002524 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034e2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80034e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80034e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80034e8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80034ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80034ec:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80034ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80034f2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80034f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80034f8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80034fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80034fe:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003504:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003508:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003510:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003512:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800351e:	2001      	movs	r0, #1
 8003520:	f7ff f800 	bl	8002524 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800352c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003536:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003540:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800354c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003550:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003554:	4013      	ands	r3, r2
 8003556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800355a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800355e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003560:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003564:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800356a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800356c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003570:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003576:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003578:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800357c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800357e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003590:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800359c:	2001      	movs	r0, #1
 800359e:	f7fe ffc1 	bl	8002524 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035aa:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80035ac:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80035b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80035c6:	2001      	movs	r0, #1
 80035c8:	f7fe ffac 	bl	8002524 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035d4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80035da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035de:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80035e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035e8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80035fa:	2304      	movs	r3, #4
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80035fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003608:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800360a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800360e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003614:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800361a:	2300      	movs	r3, #0
 800361c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800361e:	2300      	movs	r3, #0
 8003620:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800362a:	3318      	adds	r3, #24
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003632:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003636:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <ETH_MACDMAConfig+0x390>)
 8003638:	4013      	ands	r3, r2
 800363a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800363e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003640:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003642:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003644:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003646:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003648:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800364a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800364c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800364e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003650:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003652:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003654:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003656:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800365a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800365e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003660:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003672:	3318      	adds	r3, #24
 8003674:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003678:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003682:	3318      	adds	r3, #24
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800368a:	2001      	movs	r0, #1
 800368c:	f7fe ff4a 	bl	8002524 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003698:	3318      	adds	r3, #24
 800369a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800369e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80036a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80036a4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80036a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80036a8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80036ac:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80036ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80036b0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80036b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80036b6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80036b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80036ba:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80036c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80036d8:	2001      	movs	r0, #1
 80036da:	f7fe ff23 	bl	8002524 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036ea:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d10f      	bne.n	8003714 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fc:	331c      	adds	r3, #28
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800370c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003710:	331c      	adds	r3, #28
 8003712:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	461a      	mov	r2, r3
 800371a:	2100      	movs	r1, #0
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f809 	bl	8003734 <ETH_MACAddressConfig>
}
 8003722:	bf00      	nop
 8003724:	37c0      	adds	r7, #192	; 0xc0
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	ff20810f 	.word	0xff20810f
 8003730:	f8de3f23 	.word	0xf8de3f23

08003734 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3305      	adds	r3, #5
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	3204      	adds	r2, #4
 800374c:	7812      	ldrb	r2, [r2, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <ETH_MACAddressConfig+0x68>)
 8003756:	4413      	add	r3, r2
 8003758:	461a      	mov	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3303      	adds	r3, #3
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	061a      	lsls	r2, r3, #24
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3302      	adds	r3, #2
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3301      	adds	r3, #1
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	4313      	orrs	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	7812      	ldrb	r2, [r2, #0]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <ETH_MACAddressConfig+0x6c>)
 8003786:	4413      	add	r3, r2
 8003788:	461a      	mov	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	6013      	str	r3, [r2, #0]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40028040 	.word	0x40028040
 80037a0:	40028044 	.word	0x40028044

080037a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e177      	b.n	8003ab0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037c0:	2201      	movs	r2, #1
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	429a      	cmp	r2, r3
 80037da:	f040 8166 	bne.w	8003aaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d00b      	beq.n	80037fe <HAL_GPIO_Init+0x5a>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d007      	beq.n	80037fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037f2:	2b11      	cmp	r3, #17
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b12      	cmp	r3, #18
 80037fc:	d130      	bne.n	8003860 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	2203      	movs	r2, #3
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003834:	2201      	movs	r2, #1
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 0201 	and.w	r2, r3, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0xfc>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b12      	cmp	r3, #18
 800389e:	d123      	bne.n	80038e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	08da      	lsrs	r2, r3, #3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3208      	adds	r2, #8
 80038a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	220f      	movs	r2, #15
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	08da      	lsrs	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3208      	adds	r2, #8
 80038e2:	69b9      	ldr	r1, [r7, #24]
 80038e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	2203      	movs	r2, #3
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0203 	and.w	r2, r3, #3
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80c0 	beq.w	8003aaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4b65      	ldr	r3, [pc, #404]	; (8003ac4 <HAL_GPIO_Init+0x320>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	4a64      	ldr	r2, [pc, #400]	; (8003ac4 <HAL_GPIO_Init+0x320>)
 8003934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003938:	6453      	str	r3, [r2, #68]	; 0x44
 800393a:	4b62      	ldr	r3, [pc, #392]	; (8003ac4 <HAL_GPIO_Init+0x320>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003946:	4a60      	ldr	r2, [pc, #384]	; (8003ac8 <HAL_GPIO_Init+0x324>)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	3302      	adds	r3, #2
 800394e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	220f      	movs	r2, #15
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a57      	ldr	r2, [pc, #348]	; (8003acc <HAL_GPIO_Init+0x328>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d037      	beq.n	80039e2 <HAL_GPIO_Init+0x23e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a56      	ldr	r2, [pc, #344]	; (8003ad0 <HAL_GPIO_Init+0x32c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d031      	beq.n	80039de <HAL_GPIO_Init+0x23a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a55      	ldr	r2, [pc, #340]	; (8003ad4 <HAL_GPIO_Init+0x330>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d02b      	beq.n	80039da <HAL_GPIO_Init+0x236>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a54      	ldr	r2, [pc, #336]	; (8003ad8 <HAL_GPIO_Init+0x334>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d025      	beq.n	80039d6 <HAL_GPIO_Init+0x232>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a53      	ldr	r2, [pc, #332]	; (8003adc <HAL_GPIO_Init+0x338>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01f      	beq.n	80039d2 <HAL_GPIO_Init+0x22e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a52      	ldr	r2, [pc, #328]	; (8003ae0 <HAL_GPIO_Init+0x33c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d019      	beq.n	80039ce <HAL_GPIO_Init+0x22a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a51      	ldr	r2, [pc, #324]	; (8003ae4 <HAL_GPIO_Init+0x340>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <HAL_GPIO_Init+0x226>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a50      	ldr	r2, [pc, #320]	; (8003ae8 <HAL_GPIO_Init+0x344>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00d      	beq.n	80039c6 <HAL_GPIO_Init+0x222>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a4f      	ldr	r2, [pc, #316]	; (8003aec <HAL_GPIO_Init+0x348>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <HAL_GPIO_Init+0x21e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a4e      	ldr	r2, [pc, #312]	; (8003af0 <HAL_GPIO_Init+0x34c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_GPIO_Init+0x21a>
 80039ba:	2309      	movs	r3, #9
 80039bc:	e012      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039be:	230a      	movs	r3, #10
 80039c0:	e010      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039c2:	2308      	movs	r3, #8
 80039c4:	e00e      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039c6:	2307      	movs	r3, #7
 80039c8:	e00c      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039ca:	2306      	movs	r3, #6
 80039cc:	e00a      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039ce:	2305      	movs	r3, #5
 80039d0:	e008      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039d2:	2304      	movs	r3, #4
 80039d4:	e006      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039d6:	2303      	movs	r3, #3
 80039d8:	e004      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039da:	2302      	movs	r3, #2
 80039dc:	e002      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_GPIO_Init+0x240>
 80039e2:	2300      	movs	r3, #0
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	f002 0203 	and.w	r2, r2, #3
 80039ea:	0092      	lsls	r2, r2, #2
 80039ec:	4093      	lsls	r3, r2
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f4:	4934      	ldr	r1, [pc, #208]	; (8003ac8 <HAL_GPIO_Init+0x324>)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	3302      	adds	r3, #2
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a02:	4b3c      	ldr	r3, [pc, #240]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a26:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a2c:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a50:	4a28      	ldr	r2, [pc, #160]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a56:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a80:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aa4:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <HAL_GPIO_Init+0x350>)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3301      	adds	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b0f      	cmp	r3, #15
 8003ab4:	f67f ae84 	bls.w	80037c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab8:	bf00      	nop
 8003aba:	3724      	adds	r7, #36	; 0x24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40013800 	.word	0x40013800
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	40020400 	.word	0x40020400
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	40020c00 	.word	0x40020c00
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40021400 	.word	0x40021400
 8003ae4:	40021800 	.word	0x40021800
 8003ae8:	40021c00 	.word	0x40021c00
 8003aec:	40022000 	.word	0x40022000
 8003af0:	40022400 	.word	0x40022400
 8003af4:	40013c00 	.word	0x40013c00

08003af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
 8003b04:	4613      	mov	r3, r2
 8003b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b08:	787b      	ldrb	r3, [r7, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b14:	e003      	b.n	8003b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b16:	887b      	ldrh	r3, [r7, #2]
 8003b18:	041a      	lsls	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	619a      	str	r2, [r3, #24]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e11f      	b.n	8003d7e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fd86 	bl	8001664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2224      	movs	r2, #36	; 0x24
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b90:	f003 fa12 	bl	8006fb8 <HAL_RCC_GetPCLK1Freq>
 8003b94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4a7b      	ldr	r2, [pc, #492]	; (8003d88 <HAL_I2C_Init+0x25c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d807      	bhi.n	8003bb0 <HAL_I2C_Init+0x84>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a7a      	ldr	r2, [pc, #488]	; (8003d8c <HAL_I2C_Init+0x260>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bf94      	ite	ls
 8003ba8:	2301      	movls	r3, #1
 8003baa:	2300      	movhi	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e006      	b.n	8003bbe <HAL_I2C_Init+0x92>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a77      	ldr	r2, [pc, #476]	; (8003d90 <HAL_I2C_Init+0x264>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	bf94      	ite	ls
 8003bb8:	2301      	movls	r3, #1
 8003bba:	2300      	movhi	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0db      	b.n	8003d7e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a72      	ldr	r2, [pc, #456]	; (8003d94 <HAL_I2C_Init+0x268>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	0c9b      	lsrs	r3, r3, #18
 8003bd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a64      	ldr	r2, [pc, #400]	; (8003d88 <HAL_I2C_Init+0x25c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d802      	bhi.n	8003c00 <HAL_I2C_Init+0xd4>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	e009      	b.n	8003c14 <HAL_I2C_Init+0xe8>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	4a63      	ldr	r2, [pc, #396]	; (8003d98 <HAL_I2C_Init+0x26c>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	3301      	adds	r3, #1
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4956      	ldr	r1, [pc, #344]	; (8003d88 <HAL_I2C_Init+0x25c>)
 8003c30:	428b      	cmp	r3, r1
 8003c32:	d80d      	bhi.n	8003c50 <HAL_I2C_Init+0x124>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e59      	subs	r1, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c42:	3301      	adds	r3, #1
 8003c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	bf38      	it	cc
 8003c4c:	2304      	movcc	r3, #4
 8003c4e:	e04f      	b.n	8003cf0 <HAL_I2C_Init+0x1c4>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d111      	bne.n	8003c7c <HAL_I2C_Init+0x150>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e58      	subs	r0, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	440b      	add	r3, r1
 8003c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e012      	b.n	8003ca2 <HAL_I2C_Init+0x176>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1e58      	subs	r0, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	0099      	lsls	r1, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_Init+0x17e>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e022      	b.n	8003cf0 <HAL_I2C_Init+0x1c4>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_I2C_Init+0x1a4>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1e58      	subs	r0, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6859      	ldr	r1, [r3, #4]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	440b      	add	r3, r1
 8003cc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cce:	e00f      	b.n	8003cf0 <HAL_I2C_Init+0x1c4>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1e58      	subs	r0, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	0099      	lsls	r1, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	6809      	ldr	r1, [r1, #0]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6911      	ldr	r1, [r2, #16]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	4311      	orrs	r1, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	000186a0 	.word	0x000186a0
 8003d8c:	001e847f 	.word	0x001e847f
 8003d90:	003d08ff 	.word	0x003d08ff
 8003d94:	431bde83 	.word	0x431bde83
 8003d98:	10624dd3 	.word	0x10624dd3

08003d9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	4608      	mov	r0, r1
 8003da6:	4611      	mov	r1, r2
 8003da8:	461a      	mov	r2, r3
 8003daa:	4603      	mov	r3, r0
 8003dac:	817b      	strh	r3, [r7, #10]
 8003dae:	460b      	mov	r3, r1
 8003db0:	813b      	strh	r3, [r7, #8]
 8003db2:	4613      	mov	r3, r2
 8003db4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003db6:	f7fe fba9 	bl	800250c <HAL_GetTick>
 8003dba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	f040 80d9 	bne.w	8003f7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	2319      	movs	r3, #25
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	496d      	ldr	r1, [pc, #436]	; (8003f88 <HAL_I2C_Mem_Write+0x1ec>)
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f002 f924 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
 8003de2:	e0cc      	b.n	8003f7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_I2C_Mem_Write+0x56>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e0c5      	b.n	8003f7e <HAL_I2C_Mem_Write+0x1e2>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d007      	beq.n	8003e18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2221      	movs	r2, #33	; 0x21
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2240      	movs	r2, #64	; 0x40
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a3a      	ldr	r2, [r7, #32]
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a4d      	ldr	r2, [pc, #308]	; (8003f8c <HAL_I2C_Mem_Write+0x1f0>)
 8003e58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e5a:	88f8      	ldrh	r0, [r7, #6]
 8003e5c:	893a      	ldrh	r2, [r7, #8]
 8003e5e:	8979      	ldrh	r1, [r7, #10]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	4603      	mov	r3, r0
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f001 fee0 	bl	8005c30 <I2C_RequestMemoryWrite>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d052      	beq.n	8003f1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e081      	b.n	8003f7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f002 f9a5 	bl	80061ce <I2C_WaitOnTXEFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d107      	bne.n	8003ea2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e06b      	b.n	8003f7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	781a      	ldrb	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d11b      	bne.n	8003f1c <HAL_I2C_Mem_Write+0x180>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d017      	beq.n	8003f1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1aa      	bne.n	8003e7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f002 f991 	bl	8006250 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00d      	beq.n	8003f50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d107      	bne.n	8003f4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e016      	b.n	8003f7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e000      	b.n	8003f7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
  }
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	00100002 	.word	0x00100002
 8003f8c:	ffff0000 	.word	0xffff0000

08003f90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08c      	sub	sp, #48	; 0x30
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	4608      	mov	r0, r1
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	817b      	strh	r3, [r7, #10]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	813b      	strh	r3, [r7, #8]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003faa:	f7fe faaf 	bl	800250c <HAL_GetTick>
 8003fae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	f040 8208 	bne.w	80043ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	2319      	movs	r3, #25
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	497b      	ldr	r1, [pc, #492]	; (80041b4 <HAL_I2C_Mem_Read+0x224>)
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f002 f82a 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e1fb      	b.n	80043d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_I2C_Mem_Read+0x56>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e1f4      	b.n	80043d0 <HAL_I2C_Mem_Read+0x440>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d007      	beq.n	800400c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800401a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2222      	movs	r2, #34	; 0x22
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2240      	movs	r2, #64	; 0x40
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004036:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800403c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4a5b      	ldr	r2, [pc, #364]	; (80041b8 <HAL_I2C_Mem_Read+0x228>)
 800404c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800404e:	88f8      	ldrh	r0, [r7, #6]
 8004050:	893a      	ldrh	r2, [r7, #8]
 8004052:	8979      	ldrh	r1, [r7, #10]
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4603      	mov	r3, r0
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f001 fe7a 	bl	8005d58 <I2C_RequestMemoryRead>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e1b0      	b.n	80043d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d113      	bne.n	800409e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004076:	2300      	movs	r3, #0
 8004078:	623b      	str	r3, [r7, #32]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	e184      	b.n	80043a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d11b      	bne.n	80040de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	e164      	b.n	80043a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d11b      	bne.n	800411e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	e144      	b.n	80043a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004134:	e138      	b.n	80043a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	2b03      	cmp	r3, #3
 800413c:	f200 80f1 	bhi.w	8004322 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004144:	2b01      	cmp	r3, #1
 8004146:	d123      	bne.n	8004190 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f002 f8c0 	bl	80062d2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e139      	b.n	80043d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800418e:	e10b      	b.n	80043a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004194:	2b02      	cmp	r3, #2
 8004196:	d14e      	bne.n	8004236 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	2200      	movs	r2, #0
 80041a0:	4906      	ldr	r1, [pc, #24]	; (80041bc <HAL_I2C_Mem_Read+0x22c>)
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f001 ff3d 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e10e      	b.n	80043d0 <HAL_I2C_Mem_Read+0x440>
 80041b2:	bf00      	nop
 80041b4:	00100002 	.word	0x00100002
 80041b8:	ffff0000 	.word	0xffff0000
 80041bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004234:	e0b8      	b.n	80043a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423c:	2200      	movs	r2, #0
 800423e:	4966      	ldr	r1, [pc, #408]	; (80043d8 <HAL_I2C_Mem_Read+0x448>)
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f001 feee 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0bf      	b.n	80043d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	2200      	movs	r2, #0
 800429a:	494f      	ldr	r1, [pc, #316]	; (80043d8 <HAL_I2C_Mem_Read+0x448>)
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f001 fec0 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e091      	b.n	80043d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004320:	e042      	b.n	80043a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004324:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f001 ffd3 	bl	80062d2 <I2C_WaitOnRXNEFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e04c      	b.n	80043d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b04      	cmp	r3, #4
 8004374:	d118      	bne.n	80043a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f47f aec2 	bne.w	8004136 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e000      	b.n	80043d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043ce:	2302      	movs	r3, #2
  }
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3728      	adds	r7, #40	; 0x28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	00010004 	.word	0x00010004

080043dc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	4608      	mov	r0, r1
 80043e6:	4611      	mov	r1, r2
 80043e8:	461a      	mov	r2, r3
 80043ea:	4603      	mov	r3, r0
 80043ec:	817b      	strh	r3, [r7, #10]
 80043ee:	460b      	mov	r3, r1
 80043f0:	813b      	strh	r3, [r7, #8]
 80043f2:	4613      	mov	r3, r2
 80043f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b20      	cmp	r3, #32
 8004404:	f040 809a 	bne.w	800453c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004408:	4b50      	ldr	r3, [pc, #320]	; (800454c <HAL_I2C_Mem_Read_IT+0x170>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	08db      	lsrs	r3, r3, #3
 800440e:	4a50      	ldr	r2, [pc, #320]	; (8004550 <HAL_I2C_Mem_Read_IT+0x174>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	0a1a      	lsrs	r2, r3, #8
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	009a      	lsls	r2, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	3b01      	subs	r3, #1
 8004426:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d116      	bne.n	800445c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f043 0220 	orr.w	r2, r3, #32
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e070      	b.n	800453e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b02      	cmp	r3, #2
 8004468:	d0db      	beq.n	8004422 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_I2C_Mem_Read_IT+0x9c>
 8004474:	2302      	movs	r3, #2
 8004476:	e062      	b.n	800453e <HAL_I2C_Mem_Read_IT+0x162>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d007      	beq.n	800449e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2222      	movs	r2, #34	; 0x22
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2240      	movs	r2, #64	; 0x40
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a3a      	ldr	r2, [r7, #32]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a1d      	ldr	r2, [pc, #116]	; (8004554 <HAL_I2C_Mem_Read_IT+0x178>)
 80044de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80044e0:	897a      	ldrh	r2, [r7, #10]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80044e6:	893a      	ldrh	r2, [r7, #8]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80044ec:	88fa      	ldrh	r2, [r7, #6]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004506:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004516:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004536:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	20000000 	.word	0x20000000
 8004550:	14f8b589 	.word	0x14f8b589
 8004554:	ffff0000 	.word	0xffff0000

08004558 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004578:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	2b10      	cmp	r3, #16
 8004586:	d003      	beq.n	8004590 <HAL_I2C_EV_IRQHandler+0x38>
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	f040 80b6 	bne.w	80046fc <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10d      	bne.n	80045c6 <HAL_I2C_EV_IRQHandler+0x6e>
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80045b0:	d003      	beq.n	80045ba <HAL_I2C_EV_IRQHandler+0x62>
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80045b8:	d101      	bne.n	80045be <HAL_I2C_EV_IRQHandler+0x66>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <HAL_I2C_EV_IRQHandler+0x68>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	f000 8127 	beq.w	8004814 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00c      	beq.n	80045ea <HAL_I2C_EV_IRQHandler+0x92>
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	0a5b      	lsrs	r3, r3, #9
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d006      	beq.n	80045ea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 fefd 	bl	80063dc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fd12 	bl	800500c <I2C_Master_SB>
 80045e8:	e087      	b.n	80046fa <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	08db      	lsrs	r3, r3, #3
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0xb2>
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	0a5b      	lsrs	r3, r3, #9
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fd88 	bl	8005118 <I2C_Master_ADD10>
 8004608:	e077      	b.n	80046fa <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_I2C_EV_IRQHandler+0xd2>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	0a5b      	lsrs	r3, r3, #9
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fda2 	bl	800516c <I2C_Master_ADDR>
 8004628:	e067      	b.n	80046fa <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d030      	beq.n	8004698 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004644:	f000 80e8 	beq.w	8004818 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	09db      	lsrs	r3, r3, #7
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00f      	beq.n	8004674 <HAL_I2C_EV_IRQHandler+0x11c>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	0a9b      	lsrs	r3, r3, #10
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <HAL_I2C_EV_IRQHandler+0x11c>
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	089b      	lsrs	r3, r3, #2
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d103      	bne.n	8004674 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f9de 	bl	8004a2e <I2C_MasterTransmit_TXE>
 8004672:	e042      	b.n	80046fa <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	089b      	lsrs	r3, r3, #2
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80cb 	beq.w	8004818 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	0a5b      	lsrs	r3, r3, #9
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80c4 	beq.w	8004818 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fa68 	bl	8004b66 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004696:	e0bf      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a6:	f000 80b7 	beq.w	8004818 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	099b      	lsrs	r3, r3, #6
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00f      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0x17e>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	0a9b      	lsrs	r3, r3, #10
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0x17e>
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	089b      	lsrs	r3, r3, #2
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d103      	bne.n	80046d6 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fb30 	bl	8004d34 <I2C_MasterReceive_RXNE>
 80046d4:	e011      	b.n	80046fa <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 809a 	beq.w	8004818 <HAL_I2C_EV_IRQHandler+0x2c0>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	0a5b      	lsrs	r3, r3, #9
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8093 	beq.w	8004818 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fba0 	bl	8004e38 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046f8:	e08e      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x2c0>
 80046fa:	e08d      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d004      	beq.n	800470e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	e007      	b.n	800471e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	085b      	lsrs	r3, r3, #1
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d012      	beq.n	8004750 <HAL_I2C_EV_IRQHandler+0x1f8>
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	0a5b      	lsrs	r3, r3, #9
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00c      	beq.n	8004750 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004746:	69b9      	ldr	r1, [r7, #24]
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 ff5e 	bl	800560a <I2C_Slave_ADDR>
 800474e:	e066      	b.n	800481e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d009      	beq.n	8004770 <HAL_I2C_EV_IRQHandler+0x218>
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	0a5b      	lsrs	r3, r3, #9
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 ff93 	bl	8005694 <I2C_Slave_STOPF>
 800476e:	e056      	b.n	800481e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004770:	7bbb      	ldrb	r3, [r7, #14]
 8004772:	2b21      	cmp	r3, #33	; 0x21
 8004774:	d002      	beq.n	800477c <HAL_I2C_EV_IRQHandler+0x224>
 8004776:	7bbb      	ldrb	r3, [r7, #14]
 8004778:	2b29      	cmp	r3, #41	; 0x29
 800477a:	d125      	bne.n	80047c8 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	09db      	lsrs	r3, r3, #7
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00f      	beq.n	80047a8 <HAL_I2C_EV_IRQHandler+0x250>
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	0a9b      	lsrs	r3, r3, #10
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <HAL_I2C_EV_IRQHandler+0x250>
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d103      	bne.n	80047a8 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fe74 	bl	800548e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047a6:	e039      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d033      	beq.n	800481c <HAL_I2C_EV_IRQHandler+0x2c4>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	0a5b      	lsrs	r3, r3, #9
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d02d      	beq.n	800481c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fea1 	bl	8005508 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047c6:	e029      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00f      	beq.n	80047f4 <HAL_I2C_EV_IRQHandler+0x29c>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	0a9b      	lsrs	r3, r3, #10
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <HAL_I2C_EV_IRQHandler+0x29c>
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d103      	bne.n	80047f4 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 feac 	bl	800554a <I2C_SlaveReceive_RXNE>
 80047f2:	e014      	b.n	800481e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00e      	beq.n	800481e <HAL_I2C_EV_IRQHandler+0x2c6>
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	0a5b      	lsrs	r3, r3, #9
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 feda 	bl	80055c6 <I2C_SlaveReceive_BTF>
 8004812:	e004      	b.n	800481e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004814:	bf00      	nop
 8004816:	e002      	b.n	800481e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004818:	bf00      	nop
 800481a:	e000      	b.n	800481e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800481c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08a      	sub	sp, #40	; 0x28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800483c:	2300      	movs	r3, #0
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004846:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00e      	beq.n	8004872 <HAL_I2C_ER_IRQHandler+0x4e>
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004870:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	0a5b      	lsrs	r3, r3, #9
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00e      	beq.n	800489c <HAL_I2C_ER_IRQHandler+0x78>
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	0a1b      	lsrs	r3, r3, #8
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800489a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	0a9b      	lsrs	r3, r3, #10
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d03f      	beq.n	8004928 <HAL_I2C_ER_IRQHandler+0x104>
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	0a1b      	lsrs	r3, r3, #8
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d039      	beq.n	8004928 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80048b4:	7efb      	ldrb	r3, [r7, #27]
 80048b6:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80048ce:	7ebb      	ldrb	r3, [r7, #26]
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d112      	bne.n	80048fa <HAL_I2C_ER_IRQHandler+0xd6>
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10f      	bne.n	80048fa <HAL_I2C_ER_IRQHandler+0xd6>
 80048da:	7cfb      	ldrb	r3, [r7, #19]
 80048dc:	2b21      	cmp	r3, #33	; 0x21
 80048de:	d008      	beq.n	80048f2 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	2b29      	cmp	r3, #41	; 0x29
 80048e4:	d005      	beq.n	80048f2 <HAL_I2C_ER_IRQHandler+0xce>
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	2b28      	cmp	r3, #40	; 0x28
 80048ea:	d106      	bne.n	80048fa <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b21      	cmp	r3, #33	; 0x21
 80048f0:	d103      	bne.n	80048fa <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fffe 	bl	80058f4 <I2C_Slave_AF>
 80048f8:	e016      	b.n	8004928 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004902:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	f043 0304 	orr.w	r3, r3, #4
 800490a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800490c:	7efb      	ldrb	r3, [r7, #27]
 800490e:	2b10      	cmp	r3, #16
 8004910:	d002      	beq.n	8004918 <HAL_I2C_ER_IRQHandler+0xf4>
 8004912:	7efb      	ldrb	r3, [r7, #27]
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d107      	bne.n	8004928 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004926:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	0adb      	lsrs	r3, r3, #11
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00e      	beq.n	8004952 <HAL_I2C_ER_IRQHandler+0x12e>
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	f043 0308 	orr.w	r3, r3, #8
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004950:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f001 f835 	bl	80059d4 <I2C_ITError>
  }
}
 800496a:	bf00      	nop
 800496c:	3728      	adds	r7, #40	; 0x28
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	70fb      	strb	r3, [r7, #3]
 80049ce:	4613      	mov	r3, r2
 80049d0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a44:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d150      	bne.n	8004af6 <I2C_MasterTransmit_TXE+0xc8>
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b21      	cmp	r3, #33	; 0x21
 8004a58:	d14d      	bne.n	8004af6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d01d      	beq.n	8004a9c <I2C_MasterTransmit_TXE+0x6e>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d01a      	beq.n	8004a9c <I2C_MasterTransmit_TXE+0x6e>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a6c:	d016      	beq.n	8004a9c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a7c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2211      	movs	r2, #17
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ff6c 	bl	8004972 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a9a:	e060      	b.n	8004b5e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aaa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aba:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d107      	bne.n	8004ae6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff ff87 	bl	80049f2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ae4:	e03b      	b.n	8004b5e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff ff3f 	bl	8004972 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004af4:	e033      	b.n	8004b5e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	2b21      	cmp	r3, #33	; 0x21
 8004afa:	d005      	beq.n	8004b08 <I2C_MasterTransmit_TXE+0xda>
 8004afc:	7bbb      	ldrb	r3, [r7, #14]
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d12d      	bne.n	8004b5e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2b22      	cmp	r3, #34	; 0x22
 8004b06:	d12a      	bne.n	8004b5e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d108      	bne.n	8004b24 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b20:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b22:	e01c      	b.n	8004b5e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d103      	bne.n	8004b38 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f898 	bl	8004c66 <I2C_MemoryTransmit_TXE_BTF>
}
 8004b36:	e012      	b.n	8004b5e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b5c:	e7ff      	b.n	8004b5e <I2C_MasterTransmit_TXE+0x130>
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b21      	cmp	r3, #33	; 0x21
 8004b7e:	d165      	bne.n	8004c4c <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d012      	beq.n	8004bb0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	781a      	ldrb	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004bae:	e056      	b.n	8004c5e <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d01d      	beq.n	8004bf2 <I2C_MasterTransmit_BTF+0x8c>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d01a      	beq.n	8004bf2 <I2C_MasterTransmit_BTF+0x8c>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bc2:	d016      	beq.n	8004bf2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bd2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2211      	movs	r2, #17
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fec1 	bl	8004972 <HAL_I2C_MasterTxCpltCallback>
}
 8004bf0:	e035      	b.n	8004c5e <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c00:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c10:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	d107      	bne.n	8004c3c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff fedc 	bl	80049f2 <HAL_I2C_MemTxCpltCallback>
}
 8004c3a:	e010      	b.n	8004c5e <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fe94 	bl	8004972 <HAL_I2C_MasterTxCpltCallback>
}
 8004c4a:	e008      	b.n	8004c5e <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	d102      	bne.n	8004c5e <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f804 	bl	8004c66 <I2C_MemoryTransmit_TXE_BTF>
}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d11d      	bne.n	8004cb2 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10b      	bne.n	8004c96 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8e:	1c9a      	adds	r2, r3, #2
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004c94:	e048      	b.n	8004d28 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	121b      	asrs	r3, r3, #8
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cb0:	e03a      	b.n	8004d28 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10b      	bne.n	8004cd2 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cd0:	e02a      	b.n	8004d28 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d126      	bne.n	8004d28 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b22      	cmp	r3, #34	; 0x22
 8004ce4:	d108      	bne.n	8004cf8 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cf4:	601a      	str	r2, [r3, #0]
}
 8004cf6:	e017      	b.n	8004d28 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b21      	cmp	r3, #33	; 0x21
 8004d02:	d111      	bne.n	8004d28 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b22      	cmp	r3, #34	; 0x22
 8004d46:	d173      	bne.n	8004e30 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d920      	bls.n	8004d98 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d154      	bne.n	8004e30 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d94:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004d96:	e04b      	b.n	8004e30 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d047      	beq.n	8004e30 <I2C_MasterReceive_RXNE+0xfc>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d002      	beq.n	8004dac <I2C_MasterReceive_RXNE+0x78>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d141      	bne.n	8004e30 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dba:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dca:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d10a      	bne.n	8004e1c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f006 f8bb 	bl	800af90 <HAL_I2C_MemRxCpltCallback>
}
 8004e1a:	e009      	b.n	8004e30 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2212      	movs	r2, #18
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff fdab 	bl	8004986 <HAL_I2C_MasterRxCpltCallback>
}
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d11b      	bne.n	8004e88 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e86:	e0bd      	b.n	8005004 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d129      	bne.n	8004ee6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d00a      	beq.n	8004ebe <I2C_MasterReceive_BTF+0x86>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d007      	beq.n	8004ebe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ebc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ee4:	e08e      	b.n	8005004 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d176      	bne.n	8004fde <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d002      	beq.n	8004efc <I2C_MasterReceive_BTF+0xc4>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d108      	bne.n	8004f0e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e019      	b.n	8004f42 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d002      	beq.n	8004f1a <I2C_MasterReceive_BTF+0xe2>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d108      	bne.n	8004f2c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e00a      	b.n	8004f42 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	d007      	beq.n	8004f42 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f9c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d10a      	bne.n	8004fc8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f005 ffe5 	bl	800af90 <HAL_I2C_MemRxCpltCallback>
}
 8004fc6:	e01d      	b.n	8005004 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2212      	movs	r2, #18
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff fcd5 	bl	8004986 <HAL_I2C_MasterRxCpltCallback>
}
 8004fdc:	e012      	b.n	8005004 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005004:	bf00      	nop
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b40      	cmp	r3, #64	; 0x40
 800501e:	d117      	bne.n	8005050 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	b2db      	uxtb	r3, r3
 800502e:	461a      	mov	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005038:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800503a:	e067      	b.n	800510c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005040:	b2db      	uxtb	r3, r3
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	b2da      	uxtb	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	611a      	str	r2, [r3, #16]
}
 800504e:	e05d      	b.n	800510c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005058:	d133      	bne.n	80050c2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b21      	cmp	r3, #33	; 0x21
 8005064:	d109      	bne.n	800507a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005076:	611a      	str	r2, [r3, #16]
 8005078:	e008      	b.n	800508c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	b2da      	uxtb	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005090:	2b00      	cmp	r3, #0
 8005092:	d004      	beq.n	800509e <I2C_Master_SB+0x92>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d108      	bne.n	80050b0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d032      	beq.n	800510c <I2C_Master_SB+0x100>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02d      	beq.n	800510c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050be:	605a      	str	r2, [r3, #4]
}
 80050c0:	e024      	b.n	800510c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10e      	bne.n	80050e8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	11db      	asrs	r3, r3, #7
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f003 0306 	and.w	r3, r3, #6
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f063 030f 	orn	r3, r3, #15
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	611a      	str	r2, [r3, #16]
}
 80050e6:	e011      	b.n	800510c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d10d      	bne.n	800510c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	11db      	asrs	r3, r3, #7
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f003 0306 	and.w	r3, r3, #6
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f063 030e 	orn	r3, r3, #14
 8005104:	b2da      	uxtb	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	611a      	str	r2, [r3, #16]
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005124:	b2da      	uxtb	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005130:	2b00      	cmp	r3, #0
 8005132:	d103      	bne.n	800513c <I2C_Master_ADD10+0x24>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	2b00      	cmp	r3, #0
 800513a:	d011      	beq.n	8005160 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <I2C_Master_ADD10+0x38>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800516c:	b480      	push	{r7}
 800516e:	b091      	sub	sp, #68	; 0x44
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800517a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b22      	cmp	r3, #34	; 0x22
 8005194:	f040 8169 	bne.w	800546a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10f      	bne.n	80051c0 <I2C_Master_ADDR+0x54>
 80051a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051a4:	2b40      	cmp	r3, #64	; 0x40
 80051a6:	d10b      	bne.n	80051c0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a8:	2300      	movs	r3, #0
 80051aa:	633b      	str	r3, [r7, #48]	; 0x30
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	633b      	str	r3, [r7, #48]	; 0x30
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	e160      	b.n	8005482 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11d      	bne.n	8005204 <I2C_Master_ADDR+0x98>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051d0:	d118      	bne.n	8005204 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d2:	2300      	movs	r3, #0
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	651a      	str	r2, [r3, #80]	; 0x50
 8005202:	e13e      	b.n	8005482 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d113      	bne.n	8005236 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520e:	2300      	movs	r3, #0
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	62bb      	str	r3, [r7, #40]	; 0x28
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e115      	b.n	8005462 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	f040 808a 	bne.w	8005356 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005248:	d137      	bne.n	80052ba <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005258:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005268:	d113      	bne.n	8005292 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005278:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527a:	2300      	movs	r3, #0
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	e0e7      	b.n	8005462 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005292:	2300      	movs	r3, #0
 8005294:	623b      	str	r3, [r7, #32]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	623b      	str	r3, [r7, #32]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	e0d3      	b.n	8005462 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d02e      	beq.n	800531e <I2C_Master_ADDR+0x1b2>
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d02b      	beq.n	800531e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c8:	2b12      	cmp	r3, #18
 80052ca:	d102      	bne.n	80052d2 <I2C_Master_ADDR+0x166>
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d125      	bne.n	800531e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d00e      	beq.n	80052f6 <I2C_Master_ADDR+0x18a>
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d00b      	beq.n	80052f6 <I2C_Master_ADDR+0x18a>
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d008      	beq.n	80052f6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e007      	b.n	8005306 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005304:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005306:	2300      	movs	r3, #0
 8005308:	61fb      	str	r3, [r7, #28]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	e0a1      	b.n	8005462 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	e085      	b.n	8005462 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d14d      	bne.n	80053fc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	2b04      	cmp	r3, #4
 8005364:	d016      	beq.n	8005394 <I2C_Master_ADDR+0x228>
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	2b02      	cmp	r3, #2
 800536a:	d013      	beq.n	8005394 <I2C_Master_ADDR+0x228>
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	2b10      	cmp	r3, #16
 8005370:	d010      	beq.n	8005394 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005380:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e007      	b.n	80053a4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053a2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b2:	d117      	bne.n	80053e4 <I2C_Master_ADDR+0x278>
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053ba:	d00b      	beq.n	80053d4 <I2C_Master_ADDR+0x268>
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d008      	beq.n	80053d4 <I2C_Master_ADDR+0x268>
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d005      	beq.n	80053d4 <I2C_Master_ADDR+0x268>
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d002      	beq.n	80053d4 <I2C_Master_ADDR+0x268>
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d107      	bne.n	80053e4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053e2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	e032      	b.n	8005462 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800540a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541a:	d117      	bne.n	800544c <I2C_Master_ADDR+0x2e0>
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005422:	d00b      	beq.n	800543c <I2C_Master_ADDR+0x2d0>
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	2b01      	cmp	r3, #1
 8005428:	d008      	beq.n	800543c <I2C_Master_ADDR+0x2d0>
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	2b08      	cmp	r3, #8
 800542e:	d005      	beq.n	800543c <I2C_Master_ADDR+0x2d0>
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	2b10      	cmp	r3, #16
 8005434:	d002      	beq.n	800543c <I2C_Master_ADDR+0x2d0>
 8005436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005438:	2b20      	cmp	r3, #32
 800543a:	d107      	bne.n	800544c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800544a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005468:	e00b      	b.n	8005482 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]
}
 8005480:	e7ff      	b.n	8005482 <I2C_Master_ADDR+0x316>
 8005482:	bf00      	nop
 8005484:	3744      	adds	r7, #68	; 0x44
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d02b      	beq.n	8005500 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	781a      	ldrb	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d114      	bne.n	8005500 <I2C_SlaveTransmit_TXE+0x72>
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	2b29      	cmp	r3, #41	; 0x29
 80054da:	d111      	bne.n	8005500 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2221      	movs	r2, #33	; 0x21
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2228      	movs	r2, #40	; 0x28
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff fa4d 	bl	800499a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d011      	beq.n	800553e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	781a      	ldrb	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d02c      	beq.n	80055be <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d114      	bne.n	80055be <I2C_SlaveReceive_RXNE+0x74>
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	2b2a      	cmp	r3, #42	; 0x2a
 8005598:	d111      	bne.n	80055be <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2222      	movs	r2, #34	; 0x22
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2228      	movs	r2, #40	; 0x28
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff f9f8 	bl	80049ae <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d012      	beq.n	80055fe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005624:	2b28      	cmp	r3, #40	; 0x28
 8005626:	d127      	bne.n	8005678 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005636:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	089b      	lsrs	r3, r3, #2
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005644:	2301      	movs	r3, #1
 8005646:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	09db      	lsrs	r3, r3, #7
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d103      	bne.n	800565c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	81bb      	strh	r3, [r7, #12]
 800565a:	e002      	b.n	8005662 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800566a:	89ba      	ldrh	r2, [r7, #12]
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff f9a6 	bl	80049c2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005676:	e008      	b.n	800568a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0202 	mvn.w	r2, #2
 8005680:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800568a:	bf00      	nop
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80056b4:	2300      	movs	r3, #0
 80056b6:	60bb      	str	r3, [r7, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f0:	d172      	bne.n	80057d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	2b22      	cmp	r3, #34	; 0x22
 80056f6:	d002      	beq.n	80056fe <I2C_Slave_STOPF+0x6a>
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b2a      	cmp	r3, #42	; 0x2a
 80056fc:	d135      	bne.n	800576a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	b29a      	uxth	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f043 0204 	orr.w	r2, r3, #4
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005730:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	4618      	mov	r0, r3
 8005738:	f7fd fada 	bl	8002cf0 <HAL_DMA_GetState>
 800573c:	4603      	mov	r3, r0
 800573e:	2b01      	cmp	r3, #1
 8005740:	d049      	beq.n	80057d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	4a69      	ldr	r2, [pc, #420]	; (80058ec <I2C_Slave_STOPF+0x258>)
 8005748:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	4618      	mov	r0, r3
 8005750:	f7fd f922 	bl	8002998 <HAL_DMA_Abort_IT>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d03d      	beq.n	80057d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005764:	4610      	mov	r0, r2
 8005766:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005768:	e035      	b.n	80057d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	b29a      	uxth	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f043 0204 	orr.w	r2, r3, #4
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800579c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fd faa4 	bl	8002cf0 <HAL_DMA_GetState>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d014      	beq.n	80057d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	4a4e      	ldr	r2, [pc, #312]	; (80058ec <I2C_Slave_STOPF+0x258>)
 80057b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fd f8ec 	bl	8002998 <HAL_DMA_Abort_IT>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d008      	beq.n	80057d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057d0:	4610      	mov	r0, r2
 80057d2:	4798      	blx	r3
 80057d4:	e000      	b.n	80057d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d03e      	beq.n	8005860 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d112      	bne.n	8005816 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d112      	bne.n	800584a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005840:	b29b      	uxth	r3, r3
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	f043 0204 	orr.w	r2, r3, #4
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f8b3 	bl	80059d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800586e:	e039      	b.n	80058e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	2b2a      	cmp	r3, #42	; 0x2a
 8005874:	d109      	bne.n	800588a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2228      	movs	r2, #40	; 0x28
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff f892 	bl	80049ae <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b28      	cmp	r3, #40	; 0x28
 8005894:	d111      	bne.n	80058ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <I2C_Slave_STOPF+0x25c>)
 800589a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff f893 	bl	80049de <HAL_I2C_ListenCpltCallback>
}
 80058b8:	e014      	b.n	80058e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	2b22      	cmp	r3, #34	; 0x22
 80058c0:	d002      	beq.n	80058c8 <I2C_Slave_STOPF+0x234>
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2b22      	cmp	r3, #34	; 0x22
 80058c6:	d10d      	bne.n	80058e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff f865 	bl	80049ae <HAL_I2C_SlaveRxCpltCallback>
}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	08005f25 	.word	0x08005f25
 80058f0:	ffff0000 	.word	0xffff0000

080058f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005902:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d002      	beq.n	8005916 <I2C_Slave_AF+0x22>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b20      	cmp	r3, #32
 8005914:	d129      	bne.n	800596a <I2C_Slave_AF+0x76>
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	2b28      	cmp	r3, #40	; 0x28
 800591a:	d126      	bne.n	800596a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a2c      	ldr	r2, [pc, #176]	; (80059d0 <I2C_Slave_AF+0xdc>)
 8005920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005930:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800593a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff f83b 	bl	80049de <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005968:	e02e      	b.n	80059c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b21      	cmp	r3, #33	; 0x21
 800596e:	d126      	bne.n	80059be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <I2C_Slave_AF+0xdc>)
 8005974:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2221      	movs	r2, #33	; 0x21
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800599a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fe ffef 	bl	800499a <HAL_I2C_SlaveTxCpltCallback>
}
 80059bc:	e004      	b.n	80059c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059c6:	615a      	str	r2, [r3, #20]
}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	ffff0000 	.word	0xffff0000

080059d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d10a      	bne.n	8005a06 <I2C_ITError+0x32>
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	2b22      	cmp	r3, #34	; 0x22
 80059f4:	d107      	bne.n	8005a06 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a0c:	2b28      	cmp	r3, #40	; 0x28
 8005a0e:	d107      	bne.n	8005a20 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2228      	movs	r2, #40	; 0x28
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a1e:	e015      	b.n	8005a4c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a2e:	d006      	beq.n	8005a3e <I2C_ITError+0x6a>
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	2b60      	cmp	r3, #96	; 0x60
 8005a34:	d003      	beq.n	8005a3e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5a:	d162      	bne.n	8005b22 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d020      	beq.n	8005abc <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7e:	4a6a      	ldr	r2, [pc, #424]	; (8005c28 <I2C_ITError+0x254>)
 8005a80:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fc ff86 	bl	8002998 <HAL_DMA_Abort_IT>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8089 	beq.w	8005ba6 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0201 	bic.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4798      	blx	r3
 8005aba:	e074      	b.n	8005ba6 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	4a59      	ldr	r2, [pc, #356]	; (8005c28 <I2C_ITError+0x254>)
 8005ac2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fc ff65 	bl	8002998 <HAL_DMA_Abort_IT>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d068      	beq.n	8005ba6 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b40      	cmp	r3, #64	; 0x40
 8005ae0:	d10b      	bne.n	8005afa <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4798      	blx	r3
 8005b20:	e041      	b.n	8005ba6 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b60      	cmp	r3, #96	; 0x60
 8005b2c:	d125      	bne.n	8005b7a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d10b      	bne.n	8005b62 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0201 	bic.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fe ff51 	bl	8004a1a <HAL_I2C_AbortCpltCallback>
 8005b78:	e015      	b.n	8005ba6 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b84:	2b40      	cmp	r3, #64	; 0x40
 8005b86:	d10b      	bne.n	8005ba0 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7fe ff30 	bl	8004a06 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10e      	bne.n	8005bd4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d007      	beq.n	8005be4 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005be2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d113      	bne.n	8005c20 <I2C_ITError+0x24c>
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	2b28      	cmp	r3, #40	; 0x28
 8005bfc:	d110      	bne.n	8005c20 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a0a      	ldr	r2, [pc, #40]	; (8005c2c <I2C_ITError+0x258>)
 8005c02:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fe fedf 	bl	80049de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c20:	bf00      	nop
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	08005f25 	.word	0x08005f25
 8005c2c:	ffff0000 	.word	0xffff0000

08005c30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	4608      	mov	r0, r1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4603      	mov	r3, r0
 8005c40:	817b      	strh	r3, [r7, #10]
 8005c42:	460b      	mov	r3, r1
 8005c44:	813b      	strh	r3, [r7, #8]
 8005c46:	4613      	mov	r3, r2
 8005c48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f9db 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00c      	beq.n	8005c8c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e05f      	b.n	8005d4c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c8c:	897b      	ldrh	r3, [r7, #10]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	6a3a      	ldr	r2, [r7, #32]
 8005ca0:	492c      	ldr	r1, [pc, #176]	; (8005d54 <I2C_RequestMemoryWrite+0x124>)
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fa14 	bl	80060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e04c      	b.n	8005d4c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cca:	6a39      	ldr	r1, [r7, #32]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fa7e 	bl	80061ce <I2C_WaitOnTXEFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00d      	beq.n	8005cf4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d107      	bne.n	8005cf0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e02b      	b.n	8005d4c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d105      	bne.n	8005d06 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cfa:	893b      	ldrh	r3, [r7, #8]
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	611a      	str	r2, [r3, #16]
 8005d04:	e021      	b.n	8005d4a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d06:	893b      	ldrh	r3, [r7, #8]
 8005d08:	0a1b      	lsrs	r3, r3, #8
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d16:	6a39      	ldr	r1, [r7, #32]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fa58 	bl	80061ce <I2C_WaitOnTXEFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00d      	beq.n	8005d40 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d107      	bne.n	8005d3c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e005      	b.n	8005d4c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d40:	893b      	ldrh	r3, [r7, #8]
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	00010002 	.word	0x00010002

08005d58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	4608      	mov	r0, r1
 8005d62:	4611      	mov	r1, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	4603      	mov	r3, r0
 8005d68:	817b      	strh	r3, [r7, #10]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	813b      	strh	r3, [r7, #8]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 f93f 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00c      	beq.n	8005dc4 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e0a9      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dc4:	897b      	ldrh	r3, [r7, #10]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005dd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	6a3a      	ldr	r2, [r7, #32]
 8005dd8:	4951      	ldr	r1, [pc, #324]	; (8005f20 <I2C_RequestMemoryRead+0x1c8>)
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f978 	bl	80060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e096      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e02:	6a39      	ldr	r1, [r7, #32]
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f9e2 	bl	80061ce <I2C_WaitOnTXEFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00d      	beq.n	8005e2c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d107      	bne.n	8005e28 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e075      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d105      	bne.n	8005e3e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e32:	893b      	ldrh	r3, [r7, #8]
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	611a      	str	r2, [r3, #16]
 8005e3c:	e021      	b.n	8005e82 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e3e:	893b      	ldrh	r3, [r7, #8]
 8005e40:	0a1b      	lsrs	r3, r3, #8
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4e:	6a39      	ldr	r1, [r7, #32]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f9bc 	bl	80061ce <I2C_WaitOnTXEFlagUntilTimeout>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00d      	beq.n	8005e78 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d107      	bne.n	8005e74 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e04f      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e78:	893b      	ldrh	r3, [r7, #8]
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e84:	6a39      	ldr	r1, [r7, #32]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f9a1 	bl	80061ce <I2C_WaitOnTXEFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00d      	beq.n	8005eae <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d107      	bne.n	8005eaa <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e034      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 f8a9 	bl	8006022 <I2C_WaitOnFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00c      	beq.n	8005ef0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e013      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ef0:	897b      	ldrh	r3, [r7, #10]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f043 0301 	orr.w	r3, r3, #1
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	6a3a      	ldr	r2, [r7, #32]
 8005f04:	4906      	ldr	r1, [pc, #24]	; (8005f20 <I2C_RequestMemoryRead+0x1c8>)
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 f8e2 	bl	80060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	00010002 	.word	0x00010002

08005f24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f38:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	2200      	movs	r2, #0
 8005f48:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	2200      	movs	r2, #0
 8005f58:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f68:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0201 	bic.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b60      	cmp	r3, #96	; 0x60
 8005faa:	d10e      	bne.n	8005fca <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7fe fd29 	bl	8004a1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fc8:	e027      	b.n	800601a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fca:	7afb      	ldrb	r3, [r7, #11]
 8005fcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fd0:	2b28      	cmp	r3, #40	; 0x28
 8005fd2:	d117      	bne.n	8006004 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0201 	orr.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ff2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2228      	movs	r2, #40	; 0x28
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006002:	e007      	b.n	8006014 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7fe fcf6 	bl	8004a06 <HAL_I2C_ErrorCallback>
}
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	603b      	str	r3, [r7, #0]
 800602e:	4613      	mov	r3, r2
 8006030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006032:	e025      	b.n	8006080 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d021      	beq.n	8006080 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603c:	f7fc fa66 	bl	800250c <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d302      	bcc.n	8006052 <I2C_WaitOnFlagUntilTimeout+0x30>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d116      	bne.n	8006080 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	f043 0220 	orr.w	r2, r3, #32
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e023      	b.n	80060c8 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	0c1b      	lsrs	r3, r3, #16
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b01      	cmp	r3, #1
 8006088:	d10d      	bne.n	80060a6 <I2C_WaitOnFlagUntilTimeout+0x84>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	43da      	mvns	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf0c      	ite	eq
 800609c:	2301      	moveq	r3, #1
 800609e:	2300      	movne	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	e00c      	b.n	80060c0 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	43da      	mvns	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4013      	ands	r3, r2
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	bf0c      	ite	eq
 80060b8:	2301      	moveq	r3, #1
 80060ba:	2300      	movne	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d0b6      	beq.n	8006034 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060de:	e051      	b.n	8006184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ee:	d123      	bne.n	8006138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006108:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	f043 0204 	orr.w	r2, r3, #4
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e046      	b.n	80061c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d021      	beq.n	8006184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006140:	f7fc f9e4 	bl	800250c <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	429a      	cmp	r2, r3
 800614e:	d302      	bcc.n	8006156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d116      	bne.n	8006184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	f043 0220 	orr.w	r2, r3, #32
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e020      	b.n	80061c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	0c1b      	lsrs	r3, r3, #16
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b01      	cmp	r3, #1
 800618c:	d10c      	bne.n	80061a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	43da      	mvns	r2, r3
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	4013      	ands	r3, r2
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	bf14      	ite	ne
 80061a0:	2301      	movne	r3, #1
 80061a2:	2300      	moveq	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	e00b      	b.n	80061c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	43da      	mvns	r2, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4013      	ands	r3, r2
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	bf14      	ite	ne
 80061ba:	2301      	movne	r3, #1
 80061bc:	2300      	moveq	r3, #0
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d18d      	bne.n	80060e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061da:	e02d      	b.n	8006238 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f8ce 	bl	800637e <I2C_IsAcknowledgeFailed>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e02d      	b.n	8006248 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d021      	beq.n	8006238 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f4:	f7fc f98a 	bl	800250c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	429a      	cmp	r2, r3
 8006202:	d302      	bcc.n	800620a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d116      	bne.n	8006238 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	f043 0220 	orr.w	r2, r3, #32
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e007      	b.n	8006248 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006242:	2b80      	cmp	r3, #128	; 0x80
 8006244:	d1ca      	bne.n	80061dc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800625c:	e02d      	b.n	80062ba <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f88d 	bl	800637e <I2C_IsAcknowledgeFailed>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e02d      	b.n	80062ca <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d021      	beq.n	80062ba <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006276:	f7fc f949 	bl	800250c <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d116      	bne.n	80062ba <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	f043 0220 	orr.w	r2, r3, #32
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e007      	b.n	80062ca <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d1ca      	bne.n	800625e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062de:	e042      	b.n	8006366 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b10      	cmp	r3, #16
 80062ec:	d119      	bne.n	8006322 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f06f 0210 	mvn.w	r2, #16
 80062f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e029      	b.n	8006376 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006322:	f7fc f8f3 	bl	800250c <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	429a      	cmp	r2, r3
 8006330:	d302      	bcc.n	8006338 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d116      	bne.n	8006366 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	f043 0220 	orr.w	r2, r3, #32
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e007      	b.n	8006376 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	d1b5      	bne.n	80062e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006394:	d11b      	bne.n	80063ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800639e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	f043 0204 	orr.w	r2, r3, #4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80063ec:	d103      	bne.n	80063f6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80063f4:	e007      	b.n	8006406 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063fe:	d102      	bne.n	8006406 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2208      	movs	r2, #8
 8006404:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b20      	cmp	r3, #32
 8006426:	d129      	bne.n	800647c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2224      	movs	r2, #36	; 0x24
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0201 	bic.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0210 	bic.w	r2, r2, #16
 800644e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2220      	movs	r2, #32
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e000      	b.n	800647e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b20      	cmp	r3, #32
 80064a2:	d12a      	bne.n	80064fa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2224      	movs	r2, #36	; 0x24
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0201 	bic.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80064c4:	89fb      	ldrh	r3, [r7, #14]
 80064c6:	f023 030f 	bic.w	r3, r3, #15
 80064ca:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	89fb      	ldrh	r3, [r7, #14]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	89fa      	ldrh	r2, [r7, #14]
 80064dc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0201 	orr.w	r2, r2, #1
 80064ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e000      	b.n	80064fc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80064fa:	2302      	movs	r3, #2
  }
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800650a:	b08f      	sub	sp, #60	; 0x3c
 800650c:	af0a      	add	r7, sp, #40	; 0x28
 800650e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e10f      	b.n	800673a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fb feff 	bl	8002338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2203      	movs	r2, #3
 800653e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4618      	mov	r0, r3
 800655a:	f002 fcd4 	bl	8008f06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	687e      	ldr	r6, [r7, #4]
 8006566:	466d      	mov	r5, sp
 8006568:	f106 0410 	add.w	r4, r6, #16
 800656c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800656e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006574:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006578:	e885 0003 	stmia.w	r5, {r0, r1}
 800657c:	1d33      	adds	r3, r6, #4
 800657e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006580:	6838      	ldr	r0, [r7, #0]
 8006582:	f002 fc5f 	bl	8008e44 <USB_CoreInit>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e0d0      	b.n	800673a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2100      	movs	r1, #0
 800659e:	4618      	mov	r0, r3
 80065a0:	f002 fcc2 	bl	8008f28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]
 80065a8:	e04a      	b.n	8006640 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80065aa:	7bfa      	ldrb	r2, [r7, #15]
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	333d      	adds	r3, #61	; 0x3d
 80065ba:	2201      	movs	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80065be:	7bfa      	ldrb	r2, [r7, #15]
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	00db      	lsls	r3, r3, #3
 80065c6:	1a9b      	subs	r3, r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	333c      	adds	r3, #60	; 0x3c
 80065ce:	7bfa      	ldrb	r2, [r7, #15]
 80065d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80065d2:	7bfa      	ldrb	r2, [r7, #15]
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	b298      	uxth	r0, r3
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	4613      	mov	r3, r2
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	1a9b      	subs	r3, r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	440b      	add	r3, r1
 80065e4:	3342      	adds	r3, #66	; 0x42
 80065e6:	4602      	mov	r2, r0
 80065e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80065ea:	7bfa      	ldrb	r2, [r7, #15]
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	1a9b      	subs	r3, r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	333f      	adds	r3, #63	; 0x3f
 80065fa:	2200      	movs	r2, #0
 80065fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80065fe:	7bfa      	ldrb	r2, [r7, #15]
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	4613      	mov	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	3344      	adds	r3, #68	; 0x44
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006612:	7bfa      	ldrb	r2, [r7, #15]
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	4613      	mov	r3, r2
 8006618:	00db      	lsls	r3, r3, #3
 800661a:	1a9b      	subs	r3, r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	440b      	add	r3, r1
 8006620:	3348      	adds	r3, #72	; 0x48
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006626:	7bfa      	ldrb	r2, [r7, #15]
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	1a9b      	subs	r3, r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	440b      	add	r3, r1
 8006634:	3350      	adds	r3, #80	; 0x50
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800663a:	7bfb      	ldrb	r3, [r7, #15]
 800663c:	3301      	adds	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
 8006640:	7bfa      	ldrb	r2, [r7, #15]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d3af      	bcc.n	80065aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
 800664e:	e044      	b.n	80066da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006650:	7bfa      	ldrb	r2, [r7, #15]
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	4613      	mov	r3, r2
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	1a9b      	subs	r3, r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006662:	2200      	movs	r2, #0
 8006664:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006666:	7bfa      	ldrb	r2, [r7, #15]
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006678:	7bfa      	ldrb	r2, [r7, #15]
 800667a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800667c:	7bfa      	ldrb	r2, [r7, #15]
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800668e:	2200      	movs	r2, #0
 8006690:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006692:	7bfa      	ldrb	r2, [r7, #15]
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	4613      	mov	r3, r2
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	1a9b      	subs	r3, r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	440b      	add	r3, r1
 80066a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80066a8:	7bfa      	ldrb	r2, [r7, #15]
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	4613      	mov	r3, r2
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	440b      	add	r3, r1
 80066b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80066be:	7bfa      	ldrb	r2, [r7, #15]
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	1a9b      	subs	r3, r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	440b      	add	r3, r1
 80066cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	3301      	adds	r3, #1
 80066d8:	73fb      	strb	r3, [r7, #15]
 80066da:	7bfa      	ldrb	r2, [r7, #15]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d3b5      	bcc.n	8006650 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	687e      	ldr	r6, [r7, #4]
 80066ec:	466d      	mov	r5, sp
 80066ee:	f106 0410 	add.w	r4, r6, #16
 80066f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8006702:	1d33      	adds	r3, r6, #4
 8006704:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006706:	6838      	ldr	r0, [r7, #0]
 8006708:	f002 fc38 	bl	8008f7c <USB_DevInit>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d005      	beq.n	800671e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e00d      	b.n	800673a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f002 fde7 	bl	8009306 <USB_DevDisconnect>

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e25b      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d075      	beq.n	800684e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006762:	4ba3      	ldr	r3, [pc, #652]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 030c 	and.w	r3, r3, #12
 800676a:	2b04      	cmp	r3, #4
 800676c:	d00c      	beq.n	8006788 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800676e:	4ba0      	ldr	r3, [pc, #640]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006776:	2b08      	cmp	r3, #8
 8006778:	d112      	bne.n	80067a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800677a:	4b9d      	ldr	r3, [pc, #628]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006786:	d10b      	bne.n	80067a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006788:	4b99      	ldr	r3, [pc, #612]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d05b      	beq.n	800684c <HAL_RCC_OscConfig+0x108>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d157      	bne.n	800684c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e236      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a8:	d106      	bne.n	80067b8 <HAL_RCC_OscConfig+0x74>
 80067aa:	4b91      	ldr	r3, [pc, #580]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a90      	ldr	r2, [pc, #576]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80067b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e01d      	b.n	80067f4 <HAL_RCC_OscConfig+0xb0>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067c0:	d10c      	bne.n	80067dc <HAL_RCC_OscConfig+0x98>
 80067c2:	4b8b      	ldr	r3, [pc, #556]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a8a      	ldr	r2, [pc, #552]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80067c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	4b88      	ldr	r3, [pc, #544]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a87      	ldr	r2, [pc, #540]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80067d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	e00b      	b.n	80067f4 <HAL_RCC_OscConfig+0xb0>
 80067dc:	4b84      	ldr	r3, [pc, #528]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a83      	ldr	r2, [pc, #524]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80067e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	4b81      	ldr	r3, [pc, #516]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a80      	ldr	r2, [pc, #512]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80067ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d013      	beq.n	8006824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067fc:	f7fb fe86 	bl	800250c <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006804:	f7fb fe82 	bl	800250c <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b64      	cmp	r3, #100	; 0x64
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e1fb      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006816:	4b76      	ldr	r3, [pc, #472]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0f0      	beq.n	8006804 <HAL_RCC_OscConfig+0xc0>
 8006822:	e014      	b.n	800684e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006824:	f7fb fe72 	bl	800250c <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800682c:	f7fb fe6e 	bl	800250c <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b64      	cmp	r3, #100	; 0x64
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e1e7      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800683e:	4b6c      	ldr	r3, [pc, #432]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <HAL_RCC_OscConfig+0xe8>
 800684a:	e000      	b.n	800684e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800684c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d063      	beq.n	8006922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800685a:	4b65      	ldr	r3, [pc, #404]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 030c 	and.w	r3, r3, #12
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00b      	beq.n	800687e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006866:	4b62      	ldr	r3, [pc, #392]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800686e:	2b08      	cmp	r3, #8
 8006870:	d11c      	bne.n	80068ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006872:	4b5f      	ldr	r3, [pc, #380]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d116      	bne.n	80068ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800687e:	4b5c      	ldr	r3, [pc, #368]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_RCC_OscConfig+0x152>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d001      	beq.n	8006896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e1bb      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006896:	4b56      	ldr	r3, [pc, #344]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	4952      	ldr	r1, [pc, #328]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068aa:	e03a      	b.n	8006922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d020      	beq.n	80068f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068b4:	4b4f      	ldr	r3, [pc, #316]	; (80069f4 <HAL_RCC_OscConfig+0x2b0>)
 80068b6:	2201      	movs	r2, #1
 80068b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ba:	f7fb fe27 	bl	800250c <HAL_GetTick>
 80068be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068c2:	f7fb fe23 	bl	800250c <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e19c      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d4:	4b46      	ldr	r3, [pc, #280]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0f0      	beq.n	80068c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e0:	4b43      	ldr	r3, [pc, #268]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	4940      	ldr	r1, [pc, #256]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	600b      	str	r3, [r1, #0]
 80068f4:	e015      	b.n	8006922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068f6:	4b3f      	ldr	r3, [pc, #252]	; (80069f4 <HAL_RCC_OscConfig+0x2b0>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fc:	f7fb fe06 	bl	800250c <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006904:	f7fb fe02 	bl	800250c <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e17b      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006916:	4b36      	ldr	r3, [pc, #216]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f0      	bne.n	8006904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d030      	beq.n	8006990 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d016      	beq.n	8006964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006936:	4b30      	ldr	r3, [pc, #192]	; (80069f8 <HAL_RCC_OscConfig+0x2b4>)
 8006938:	2201      	movs	r2, #1
 800693a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800693c:	f7fb fde6 	bl	800250c <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006944:	f7fb fde2 	bl	800250c <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e15b      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006956:	4b26      	ldr	r3, [pc, #152]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 8006958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0f0      	beq.n	8006944 <HAL_RCC_OscConfig+0x200>
 8006962:	e015      	b.n	8006990 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006964:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <HAL_RCC_OscConfig+0x2b4>)
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800696a:	f7fb fdcf 	bl	800250c <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006972:	f7fb fdcb 	bl	800250c <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e144      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006984:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 8006986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f0      	bne.n	8006972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 80a0 	beq.w	8006ade <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800699e:	2300      	movs	r3, #0
 80069a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069a2:	4b13      	ldr	r3, [pc, #76]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10f      	bne.n	80069ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ae:	2300      	movs	r3, #0
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	4a0e      	ldr	r2, [pc, #56]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80069b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069bc:	6413      	str	r3, [r2, #64]	; 0x40
 80069be:	4b0c      	ldr	r3, [pc, #48]	; (80069f0 <HAL_RCC_OscConfig+0x2ac>)
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069c6:	60bb      	str	r3, [r7, #8]
 80069c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069ca:	2301      	movs	r3, #1
 80069cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ce:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <HAL_RCC_OscConfig+0x2b8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d121      	bne.n	8006a1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069da:	4b08      	ldr	r3, [pc, #32]	; (80069fc <HAL_RCC_OscConfig+0x2b8>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a07      	ldr	r2, [pc, #28]	; (80069fc <HAL_RCC_OscConfig+0x2b8>)
 80069e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069e6:	f7fb fd91 	bl	800250c <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ec:	e011      	b.n	8006a12 <HAL_RCC_OscConfig+0x2ce>
 80069ee:	bf00      	nop
 80069f0:	40023800 	.word	0x40023800
 80069f4:	42470000 	.word	0x42470000
 80069f8:	42470e80 	.word	0x42470e80
 80069fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a00:	f7fb fd84 	bl	800250c <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e0fd      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a12:	4b81      	ldr	r3, [pc, #516]	; (8006c18 <HAL_RCC_OscConfig+0x4d4>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d106      	bne.n	8006a34 <HAL_RCC_OscConfig+0x2f0>
 8006a26:	4b7d      	ldr	r3, [pc, #500]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	4a7c      	ldr	r2, [pc, #496]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	6713      	str	r3, [r2, #112]	; 0x70
 8006a32:	e01c      	b.n	8006a6e <HAL_RCC_OscConfig+0x32a>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b05      	cmp	r3, #5
 8006a3a:	d10c      	bne.n	8006a56 <HAL_RCC_OscConfig+0x312>
 8006a3c:	4b77      	ldr	r3, [pc, #476]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a40:	4a76      	ldr	r2, [pc, #472]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006a42:	f043 0304 	orr.w	r3, r3, #4
 8006a46:	6713      	str	r3, [r2, #112]	; 0x70
 8006a48:	4b74      	ldr	r3, [pc, #464]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4c:	4a73      	ldr	r2, [pc, #460]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006a4e:	f043 0301 	orr.w	r3, r3, #1
 8006a52:	6713      	str	r3, [r2, #112]	; 0x70
 8006a54:	e00b      	b.n	8006a6e <HAL_RCC_OscConfig+0x32a>
 8006a56:	4b71      	ldr	r3, [pc, #452]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5a:	4a70      	ldr	r2, [pc, #448]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006a5c:	f023 0301 	bic.w	r3, r3, #1
 8006a60:	6713      	str	r3, [r2, #112]	; 0x70
 8006a62:	4b6e      	ldr	r3, [pc, #440]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a66:	4a6d      	ldr	r2, [pc, #436]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006a68:	f023 0304 	bic.w	r3, r3, #4
 8006a6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d015      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a76:	f7fb fd49 	bl	800250c <HAL_GetTick>
 8006a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a7c:	e00a      	b.n	8006a94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a7e:	f7fb fd45 	bl	800250c <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e0bc      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a94:	4b61      	ldr	r3, [pc, #388]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0ee      	beq.n	8006a7e <HAL_RCC_OscConfig+0x33a>
 8006aa0:	e014      	b.n	8006acc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aa2:	f7fb fd33 	bl	800250c <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aa8:	e00a      	b.n	8006ac0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aaa:	f7fb fd2f 	bl	800250c <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e0a6      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ac0:	4b56      	ldr	r3, [pc, #344]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1ee      	bne.n	8006aaa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d105      	bne.n	8006ade <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ad2:	4b52      	ldr	r3, [pc, #328]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	4a51      	ldr	r2, [pc, #324]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006adc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 8092 	beq.w	8006c0c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ae8:	4b4c      	ldr	r3, [pc, #304]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f003 030c 	and.w	r3, r3, #12
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d05c      	beq.n	8006bae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d141      	bne.n	8006b80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006afc:	4b48      	ldr	r3, [pc, #288]	; (8006c20 <HAL_RCC_OscConfig+0x4dc>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b02:	f7fb fd03 	bl	800250c <HAL_GetTick>
 8006b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b08:	e008      	b.n	8006b1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b0a:	f7fb fcff 	bl	800250c <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e078      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b1c:	4b3f      	ldr	r3, [pc, #252]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f0      	bne.n	8006b0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	019b      	lsls	r3, r3, #6
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3e:	085b      	lsrs	r3, r3, #1
 8006b40:	3b01      	subs	r3, #1
 8006b42:	041b      	lsls	r3, r3, #16
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	061b      	lsls	r3, r3, #24
 8006b4c:	4933      	ldr	r1, [pc, #204]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b52:	4b33      	ldr	r3, [pc, #204]	; (8006c20 <HAL_RCC_OscConfig+0x4dc>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b58:	f7fb fcd8 	bl	800250c <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b60:	f7fb fcd4 	bl	800250c <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e04d      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b72:	4b2a      	ldr	r3, [pc, #168]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0f0      	beq.n	8006b60 <HAL_RCC_OscConfig+0x41c>
 8006b7e:	e045      	b.n	8006c0c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b80:	4b27      	ldr	r3, [pc, #156]	; (8006c20 <HAL_RCC_OscConfig+0x4dc>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b86:	f7fb fcc1 	bl	800250c <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b8e:	f7fb fcbd 	bl	800250c <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e036      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ba0:	4b1e      	ldr	r3, [pc, #120]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1f0      	bne.n	8006b8e <HAL_RCC_OscConfig+0x44a>
 8006bac:	e02e      	b.n	8006c0c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e029      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bba:	4b18      	ldr	r3, [pc, #96]	; (8006c1c <HAL_RCC_OscConfig+0x4d8>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d11c      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d115      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006be2:	4013      	ands	r3, r2
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d10d      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d106      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d001      	beq.n	8006c0c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	40007000 	.word	0x40007000
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	42470060 	.word	0x42470060

08006c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e0cc      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c38:	4b68      	ldr	r3, [pc, #416]	; (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 030f 	and.w	r3, r3, #15
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d90c      	bls.n	8006c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c46:	4b65      	ldr	r3, [pc, #404]	; (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c4e:	4b63      	ldr	r3, [pc, #396]	; (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d001      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0b8      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d020      	beq.n	8006cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c78:	4b59      	ldr	r3, [pc, #356]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4a58      	ldr	r2, [pc, #352]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c90:	4b53      	ldr	r3, [pc, #332]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	4a52      	ldr	r2, [pc, #328]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c9c:	4b50      	ldr	r3, [pc, #320]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	494d      	ldr	r1, [pc, #308]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d044      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d107      	bne.n	8006cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cc2:	4b47      	ldr	r3, [pc, #284]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d119      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e07f      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d003      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d107      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ce2:	4b3f      	ldr	r3, [pc, #252]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e06f      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf2:	4b3b      	ldr	r3, [pc, #236]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e067      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d02:	4b37      	ldr	r3, [pc, #220]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f023 0203 	bic.w	r2, r3, #3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4934      	ldr	r1, [pc, #208]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d14:	f7fb fbfa 	bl	800250c <HAL_GetTick>
 8006d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1a:	e00a      	b.n	8006d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d1c:	f7fb fbf6 	bl	800250c <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e04f      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d32:	4b2b      	ldr	r3, [pc, #172]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 020c 	and.w	r2, r3, #12
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d1eb      	bne.n	8006d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d44:	4b25      	ldr	r3, [pc, #148]	; (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d20c      	bcs.n	8006d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d52:	4b22      	ldr	r3, [pc, #136]	; (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d5a:	4b20      	ldr	r3, [pc, #128]	; (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d001      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e032      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d78:	4b19      	ldr	r3, [pc, #100]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	4916      	ldr	r1, [pc, #88]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0308 	and.w	r3, r3, #8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d96:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	490e      	ldr	r1, [pc, #56]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006daa:	f000 f821 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 8006dae:	4601      	mov	r1, r0
 8006db0:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	091b      	lsrs	r3, r3, #4
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	4a0a      	ldr	r2, [pc, #40]	; (8006de4 <HAL_RCC_ClockConfig+0x1c0>)
 8006dbc:	5cd3      	ldrb	r3, [r2, r3]
 8006dbe:	fa21 f303 	lsr.w	r3, r1, r3
 8006dc2:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <HAL_RCC_ClockConfig+0x1c8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fb fb5a 	bl	8002484 <HAL_InitTick>

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40023c00 	.word	0x40023c00
 8006de0:	40023800 	.word	0x40023800
 8006de4:	0800f578 	.word	0x0800f578
 8006de8:	20000000 	.word	0x20000000
 8006dec:	20000004 	.word	0x20000004

08006df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	607b      	str	r3, [r7, #4]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e06:	4b63      	ldr	r3, [pc, #396]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 030c 	and.w	r3, r3, #12
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d007      	beq.n	8006e22 <HAL_RCC_GetSysClockFreq+0x32>
 8006e12:	2b08      	cmp	r3, #8
 8006e14:	d008      	beq.n	8006e28 <HAL_RCC_GetSysClockFreq+0x38>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 80b4 	bne.w	8006f84 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e1c:	4b5e      	ldr	r3, [pc, #376]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006e1e:	60bb      	str	r3, [r7, #8]
       break;
 8006e20:	e0b3      	b.n	8006f8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e22:	4b5e      	ldr	r3, [pc, #376]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006e24:	60bb      	str	r3, [r7, #8]
      break;
 8006e26:	e0b0      	b.n	8006f8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e28:	4b5a      	ldr	r3, [pc, #360]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e32:	4b58      	ldr	r3, [pc, #352]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d04a      	beq.n	8006ed4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e3e:	4b55      	ldr	r3, [pc, #340]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	099b      	lsrs	r3, r3, #6
 8006e44:	f04f 0400 	mov.w	r4, #0
 8006e48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e4c:	f04f 0200 	mov.w	r2, #0
 8006e50:	ea03 0501 	and.w	r5, r3, r1
 8006e54:	ea04 0602 	and.w	r6, r4, r2
 8006e58:	4629      	mov	r1, r5
 8006e5a:	4632      	mov	r2, r6
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	f04f 0400 	mov.w	r4, #0
 8006e64:	0154      	lsls	r4, r2, #5
 8006e66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e6a:	014b      	lsls	r3, r1, #5
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	4622      	mov	r2, r4
 8006e70:	1b49      	subs	r1, r1, r5
 8006e72:	eb62 0206 	sbc.w	r2, r2, r6
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	f04f 0400 	mov.w	r4, #0
 8006e7e:	0194      	lsls	r4, r2, #6
 8006e80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e84:	018b      	lsls	r3, r1, #6
 8006e86:	1a5b      	subs	r3, r3, r1
 8006e88:	eb64 0402 	sbc.w	r4, r4, r2
 8006e8c:	f04f 0100 	mov.w	r1, #0
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	00e2      	lsls	r2, r4, #3
 8006e96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e9a:	00d9      	lsls	r1, r3, #3
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	195b      	adds	r3, r3, r5
 8006ea2:	eb44 0406 	adc.w	r4, r4, r6
 8006ea6:	f04f 0100 	mov.w	r1, #0
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	0262      	lsls	r2, r4, #9
 8006eb0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006eb4:	0259      	lsls	r1, r3, #9
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4614      	mov	r4, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f04f 0400 	mov.w	r4, #0
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	f7f9 fece 	bl	8000c68 <__aeabi_uldivmod>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	e049      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ed4:	4b2f      	ldr	r3, [pc, #188]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	099b      	lsrs	r3, r3, #6
 8006eda:	f04f 0400 	mov.w	r4, #0
 8006ede:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ee2:	f04f 0200 	mov.w	r2, #0
 8006ee6:	ea03 0501 	and.w	r5, r3, r1
 8006eea:	ea04 0602 	and.w	r6, r4, r2
 8006eee:	4629      	mov	r1, r5
 8006ef0:	4632      	mov	r2, r6
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	f04f 0400 	mov.w	r4, #0
 8006efa:	0154      	lsls	r4, r2, #5
 8006efc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f00:	014b      	lsls	r3, r1, #5
 8006f02:	4619      	mov	r1, r3
 8006f04:	4622      	mov	r2, r4
 8006f06:	1b49      	subs	r1, r1, r5
 8006f08:	eb62 0206 	sbc.w	r2, r2, r6
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	f04f 0400 	mov.w	r4, #0
 8006f14:	0194      	lsls	r4, r2, #6
 8006f16:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006f1a:	018b      	lsls	r3, r1, #6
 8006f1c:	1a5b      	subs	r3, r3, r1
 8006f1e:	eb64 0402 	sbc.w	r4, r4, r2
 8006f22:	f04f 0100 	mov.w	r1, #0
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	00e2      	lsls	r2, r4, #3
 8006f2c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006f30:	00d9      	lsls	r1, r3, #3
 8006f32:	460b      	mov	r3, r1
 8006f34:	4614      	mov	r4, r2
 8006f36:	195b      	adds	r3, r3, r5
 8006f38:	eb44 0406 	adc.w	r4, r4, r6
 8006f3c:	f04f 0100 	mov.w	r1, #0
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	02a2      	lsls	r2, r4, #10
 8006f46:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006f4a:	0299      	lsls	r1, r3, #10
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4614      	mov	r4, r2
 8006f50:	4618      	mov	r0, r3
 8006f52:	4621      	mov	r1, r4
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f04f 0400 	mov.w	r4, #0
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4623      	mov	r3, r4
 8006f5e:	f7f9 fe83 	bl	8000c68 <__aeabi_uldivmod>
 8006f62:	4603      	mov	r3, r0
 8006f64:	460c      	mov	r4, r1
 8006f66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f68:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	0c1b      	lsrs	r3, r3, #16
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	3301      	adds	r3, #1
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f80:	60bb      	str	r3, [r7, #8]
      break;
 8006f82:	e002      	b.n	8006f8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006f86:	60bb      	str	r3, [r7, #8]
      break;
 8006f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f94:	40023800 	.word	0x40023800
 8006f98:	00f42400 	.word	0x00f42400
 8006f9c:	007a1200 	.word	0x007a1200

08006fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fa4:	4b03      	ldr	r3, [pc, #12]	; (8006fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20000000 	.word	0x20000000

08006fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fbc:	f7ff fff0 	bl	8006fa0 <HAL_RCC_GetHCLKFreq>
 8006fc0:	4601      	mov	r1, r0
 8006fc2:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	0a9b      	lsrs	r3, r3, #10
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	4a03      	ldr	r2, [pc, #12]	; (8006fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fce:	5cd3      	ldrb	r3, [r2, r3]
 8006fd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	0800f588 	.word	0x0800f588

08006fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fe4:	f7ff ffdc 	bl	8006fa0 <HAL_RCC_GetHCLKFreq>
 8006fe8:	4601      	mov	r1, r0
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	0b5b      	lsrs	r3, r3, #13
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	4a03      	ldr	r2, [pc, #12]	; (8007004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ff6:	5cd3      	ldrb	r3, [r2, r3]
 8006ff8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	40023800 	.word	0x40023800
 8007004:	0800f588 	.word	0x0800f588

08007008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e01d      	b.n	8007056 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d106      	bne.n	8007034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fa feb8 	bl	8001da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f000 fb4e 	bl	80076e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800705e:	b480      	push	{r7}
 8007060:	b085      	sub	sp, #20
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0201 	orr.w	r2, r2, #1
 8007074:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b06      	cmp	r3, #6
 8007086:	d007      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0201 	orr.w	r2, r2, #1
 8007096:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e01d      	b.n	80070f4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f815 	bl	80070fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3304      	adds	r3, #4
 80070e2:	4619      	mov	r1, r3
 80070e4:	4610      	mov	r0, r2
 80070e6:	f000 faff 	bl	80076e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2201      	movs	r2, #1
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fdca 	bl	8007cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a15      	ldr	r2, [pc, #84]	; (8007184 <HAL_TIM_PWM_Start+0x74>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d004      	beq.n	800713c <HAL_TIM_PWM_Start+0x2c>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a14      	ldr	r2, [pc, #80]	; (8007188 <HAL_TIM_PWM_Start+0x78>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d101      	bne.n	8007140 <HAL_TIM_PWM_Start+0x30>
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <HAL_TIM_PWM_Start+0x32>
 8007140:	2300      	movs	r3, #0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d007      	beq.n	8007156 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007154:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f003 0307 	and.w	r3, r3, #7
 8007160:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b06      	cmp	r3, #6
 8007166:	d007      	beq.n	8007178 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40010000 	.word	0x40010000
 8007188:	40010400 	.word	0x40010400

0800718c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d122      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d11b      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f06f 0202 	mvn.w	r2, #2
 80071b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa6b 	bl	80076aa <HAL_TIM_IC_CaptureCallback>
 80071d4:	e005      	b.n	80071e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa5d 	bl	8007696 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fa6e 	bl	80076be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d122      	bne.n	800723c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b04      	cmp	r3, #4
 8007202:	d11b      	bne.n	800723c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f06f 0204 	mvn.w	r2, #4
 800720c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2202      	movs	r2, #2
 8007212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa41 	bl	80076aa <HAL_TIM_IC_CaptureCallback>
 8007228:	e005      	b.n	8007236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fa33 	bl	8007696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fa44 	bl	80076be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0308 	and.w	r3, r3, #8
 8007246:	2b08      	cmp	r3, #8
 8007248:	d122      	bne.n	8007290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0308 	and.w	r3, r3, #8
 8007254:	2b08      	cmp	r3, #8
 8007256:	d11b      	bne.n	8007290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0208 	mvn.w	r2, #8
 8007260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2204      	movs	r2, #4
 8007266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa17 	bl	80076aa <HAL_TIM_IC_CaptureCallback>
 800727c:	e005      	b.n	800728a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fa09 	bl	8007696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fa1a 	bl	80076be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0310 	and.w	r3, r3, #16
 800729a:	2b10      	cmp	r3, #16
 800729c:	d122      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	d11b      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0210 	mvn.w	r2, #16
 80072b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2208      	movs	r2, #8
 80072ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f9ed 	bl	80076aa <HAL_TIM_IC_CaptureCallback>
 80072d0:	e005      	b.n	80072de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f9df 	bl	8007696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f9f0 	bl	80076be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d10e      	bne.n	8007310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d107      	bne.n	8007310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0201 	mvn.w	r2, #1
 8007308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f003 fe66 	bl	800afdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731a:	2b80      	cmp	r3, #128	; 0x80
 800731c:	d10e      	bne.n	800733c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007328:	2b80      	cmp	r3, #128	; 0x80
 800732a:	d107      	bne.n	800733c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fd6c 	bl	8007e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d10e      	bne.n	8007368 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007354:	2b40      	cmp	r3, #64	; 0x40
 8007356:	d107      	bne.n	8007368 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9b5 	bl	80076d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b20      	cmp	r3, #32
 8007374:	d10e      	bne.n	8007394 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	f003 0320 	and.w	r3, r3, #32
 8007380:	2b20      	cmp	r3, #32
 8007382:	d107      	bne.n	8007394 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f06f 0220 	mvn.w	r2, #32
 800738c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fd36 	bl	8007e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007394:	bf00      	nop
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e0b4      	b.n	8007520 <HAL_TIM_PWM_ConfigChannel+0x184>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2202      	movs	r2, #2
 80073c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b0c      	cmp	r3, #12
 80073ca:	f200 809f 	bhi.w	800750c <HAL_TIM_PWM_ConfigChannel+0x170>
 80073ce:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80073d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d4:	08007409 	.word	0x08007409
 80073d8:	0800750d 	.word	0x0800750d
 80073dc:	0800750d 	.word	0x0800750d
 80073e0:	0800750d 	.word	0x0800750d
 80073e4:	08007449 	.word	0x08007449
 80073e8:	0800750d 	.word	0x0800750d
 80073ec:	0800750d 	.word	0x0800750d
 80073f0:	0800750d 	.word	0x0800750d
 80073f4:	0800748b 	.word	0x0800748b
 80073f8:	0800750d 	.word	0x0800750d
 80073fc:	0800750d 	.word	0x0800750d
 8007400:	0800750d 	.word	0x0800750d
 8007404:	080074cb 	.word	0x080074cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fa0a 	bl	8007828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0208 	orr.w	r2, r2, #8
 8007422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0204 	bic.w	r2, r2, #4
 8007432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6999      	ldr	r1, [r3, #24]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	619a      	str	r2, [r3, #24]
      break;
 8007446:	e062      	b.n	800750e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fa5a 	bl	8007908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699a      	ldr	r2, [r3, #24]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6999      	ldr	r1, [r3, #24]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	021a      	lsls	r2, r3, #8
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	619a      	str	r2, [r3, #24]
      break;
 8007488:	e041      	b.n	800750e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	4618      	mov	r0, r3
 8007492:	f000 faaf 	bl	80079f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69da      	ldr	r2, [r3, #28]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f042 0208 	orr.w	r2, r2, #8
 80074a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69da      	ldr	r2, [r3, #28]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0204 	bic.w	r2, r2, #4
 80074b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69d9      	ldr	r1, [r3, #28]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	61da      	str	r2, [r3, #28]
      break;
 80074c8:	e021      	b.n	800750e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68b9      	ldr	r1, [r7, #8]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fb03 	bl	8007adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69da      	ldr	r2, [r3, #28]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69da      	ldr	r2, [r3, #28]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69d9      	ldr	r1, [r3, #28]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	021a      	lsls	r2, r3, #8
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	61da      	str	r2, [r3, #28]
      break;
 800750a:	e000      	b.n	800750e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800750c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007538:	2b01      	cmp	r3, #1
 800753a:	d101      	bne.n	8007540 <HAL_TIM_ConfigClockSource+0x18>
 800753c:	2302      	movs	r3, #2
 800753e:	e0a6      	b.n	800768e <HAL_TIM_ConfigClockSource+0x166>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800755e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007566:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b40      	cmp	r3, #64	; 0x40
 8007576:	d067      	beq.n	8007648 <HAL_TIM_ConfigClockSource+0x120>
 8007578:	2b40      	cmp	r3, #64	; 0x40
 800757a:	d80b      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x6c>
 800757c:	2b10      	cmp	r3, #16
 800757e:	d073      	beq.n	8007668 <HAL_TIM_ConfigClockSource+0x140>
 8007580:	2b10      	cmp	r3, #16
 8007582:	d802      	bhi.n	800758a <HAL_TIM_ConfigClockSource+0x62>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d06f      	beq.n	8007668 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007588:	e078      	b.n	800767c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800758a:	2b20      	cmp	r3, #32
 800758c:	d06c      	beq.n	8007668 <HAL_TIM_ConfigClockSource+0x140>
 800758e:	2b30      	cmp	r3, #48	; 0x30
 8007590:	d06a      	beq.n	8007668 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007592:	e073      	b.n	800767c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007594:	2b70      	cmp	r3, #112	; 0x70
 8007596:	d00d      	beq.n	80075b4 <HAL_TIM_ConfigClockSource+0x8c>
 8007598:	2b70      	cmp	r3, #112	; 0x70
 800759a:	d804      	bhi.n	80075a6 <HAL_TIM_ConfigClockSource+0x7e>
 800759c:	2b50      	cmp	r3, #80	; 0x50
 800759e:	d033      	beq.n	8007608 <HAL_TIM_ConfigClockSource+0xe0>
 80075a0:	2b60      	cmp	r3, #96	; 0x60
 80075a2:	d041      	beq.n	8007628 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80075a4:	e06a      	b.n	800767c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80075a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075aa:	d066      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x152>
 80075ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075b0:	d017      	beq.n	80075e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80075b2:	e063      	b.n	800767c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	6899      	ldr	r1, [r3, #8]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f000 fb5a 	bl	8007c7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	609a      	str	r2, [r3, #8]
      break;
 80075e0:	e04c      	b.n	800767c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6818      	ldr	r0, [r3, #0]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	6899      	ldr	r1, [r3, #8]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f000 fb43 	bl	8007c7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007604:	609a      	str	r2, [r3, #8]
      break;
 8007606:	e039      	b.n	800767c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	6859      	ldr	r1, [r3, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	461a      	mov	r2, r3
 8007616:	f000 fab7 	bl	8007b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2150      	movs	r1, #80	; 0x50
 8007620:	4618      	mov	r0, r3
 8007622:	f000 fb10 	bl	8007c46 <TIM_ITRx_SetConfig>
      break;
 8007626:	e029      	b.n	800767c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	6859      	ldr	r1, [r3, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	461a      	mov	r2, r3
 8007636:	f000 fad6 	bl	8007be6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2160      	movs	r1, #96	; 0x60
 8007640:	4618      	mov	r0, r3
 8007642:	f000 fb00 	bl	8007c46 <TIM_ITRx_SetConfig>
      break;
 8007646:	e019      	b.n	800767c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	6859      	ldr	r1, [r3, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	461a      	mov	r2, r3
 8007656:	f000 fa97 	bl	8007b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2140      	movs	r1, #64	; 0x40
 8007660:	4618      	mov	r0, r3
 8007662:	f000 faf0 	bl	8007c46 <TIM_ITRx_SetConfig>
      break;
 8007666:	e009      	b.n	800767c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f000 fae7 	bl	8007c46 <TIM_ITRx_SetConfig>
      break;
 8007678:	e000      	b.n	800767c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800767a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007696:	b480      	push	{r7}
 8007698:	b083      	sub	sp, #12
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800769e:	bf00      	nop
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076b2:	bf00      	nop
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
	...

080076e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a40      	ldr	r2, [pc, #256]	; (80077fc <TIM_Base_SetConfig+0x114>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d013      	beq.n	8007728 <TIM_Base_SetConfig+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007706:	d00f      	beq.n	8007728 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a3d      	ldr	r2, [pc, #244]	; (8007800 <TIM_Base_SetConfig+0x118>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00b      	beq.n	8007728 <TIM_Base_SetConfig+0x40>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a3c      	ldr	r2, [pc, #240]	; (8007804 <TIM_Base_SetConfig+0x11c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d007      	beq.n	8007728 <TIM_Base_SetConfig+0x40>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a3b      	ldr	r2, [pc, #236]	; (8007808 <TIM_Base_SetConfig+0x120>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d003      	beq.n	8007728 <TIM_Base_SetConfig+0x40>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a3a      	ldr	r2, [pc, #232]	; (800780c <TIM_Base_SetConfig+0x124>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d108      	bne.n	800773a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a2f      	ldr	r2, [pc, #188]	; (80077fc <TIM_Base_SetConfig+0x114>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d02b      	beq.n	800779a <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007748:	d027      	beq.n	800779a <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a2c      	ldr	r2, [pc, #176]	; (8007800 <TIM_Base_SetConfig+0x118>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d023      	beq.n	800779a <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a2b      	ldr	r2, [pc, #172]	; (8007804 <TIM_Base_SetConfig+0x11c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d01f      	beq.n	800779a <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2a      	ldr	r2, [pc, #168]	; (8007808 <TIM_Base_SetConfig+0x120>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d01b      	beq.n	800779a <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a29      	ldr	r2, [pc, #164]	; (800780c <TIM_Base_SetConfig+0x124>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d017      	beq.n	800779a <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a28      	ldr	r2, [pc, #160]	; (8007810 <TIM_Base_SetConfig+0x128>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d013      	beq.n	800779a <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a27      	ldr	r2, [pc, #156]	; (8007814 <TIM_Base_SetConfig+0x12c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d00f      	beq.n	800779a <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a26      	ldr	r2, [pc, #152]	; (8007818 <TIM_Base_SetConfig+0x130>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00b      	beq.n	800779a <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a25      	ldr	r2, [pc, #148]	; (800781c <TIM_Base_SetConfig+0x134>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d007      	beq.n	800779a <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a24      	ldr	r2, [pc, #144]	; (8007820 <TIM_Base_SetConfig+0x138>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d003      	beq.n	800779a <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a23      	ldr	r2, [pc, #140]	; (8007824 <TIM_Base_SetConfig+0x13c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d108      	bne.n	80077ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <TIM_Base_SetConfig+0x114>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d003      	beq.n	80077e0 <TIM_Base_SetConfig+0xf8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a0c      	ldr	r2, [pc, #48]	; (800780c <TIM_Base_SetConfig+0x124>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d103      	bne.n	80077e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	691a      	ldr	r2, [r3, #16]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	615a      	str	r2, [r3, #20]
}
 80077ee:	bf00      	nop
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40010000 	.word	0x40010000
 8007800:	40000400 	.word	0x40000400
 8007804:	40000800 	.word	0x40000800
 8007808:	40000c00 	.word	0x40000c00
 800780c:	40010400 	.word	0x40010400
 8007810:	40014000 	.word	0x40014000
 8007814:	40014400 	.word	0x40014400
 8007818:	40014800 	.word	0x40014800
 800781c:	40001800 	.word	0x40001800
 8007820:	40001c00 	.word	0x40001c00
 8007824:	40002000 	.word	0x40002000

08007828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	f023 0201 	bic.w	r2, r3, #1
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f023 0302 	bic.w	r3, r3, #2
 8007870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	4313      	orrs	r3, r2
 800787a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a20      	ldr	r2, [pc, #128]	; (8007900 <TIM_OC1_SetConfig+0xd8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d003      	beq.n	800788c <TIM_OC1_SetConfig+0x64>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a1f      	ldr	r2, [pc, #124]	; (8007904 <TIM_OC1_SetConfig+0xdc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d10c      	bne.n	80078a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f023 0308 	bic.w	r3, r3, #8
 8007892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f023 0304 	bic.w	r3, r3, #4
 80078a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a15      	ldr	r2, [pc, #84]	; (8007900 <TIM_OC1_SetConfig+0xd8>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d003      	beq.n	80078b6 <TIM_OC1_SetConfig+0x8e>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a14      	ldr	r2, [pc, #80]	; (8007904 <TIM_OC1_SetConfig+0xdc>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d111      	bne.n	80078da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	621a      	str	r2, [r3, #32]
}
 80078f4:	bf00      	nop
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	40010000 	.word	0x40010000
 8007904:	40010400 	.word	0x40010400

08007908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	f023 0210 	bic.w	r2, r3, #16
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800793e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	021b      	lsls	r3, r3, #8
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	4313      	orrs	r3, r2
 800794a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f023 0320 	bic.w	r3, r3, #32
 8007952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	011b      	lsls	r3, r3, #4
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4313      	orrs	r3, r2
 800795e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a22      	ldr	r2, [pc, #136]	; (80079ec <TIM_OC2_SetConfig+0xe4>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d003      	beq.n	8007970 <TIM_OC2_SetConfig+0x68>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a21      	ldr	r2, [pc, #132]	; (80079f0 <TIM_OC2_SetConfig+0xe8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10d      	bne.n	800798c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	4313      	orrs	r3, r2
 8007982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800798a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a17      	ldr	r2, [pc, #92]	; (80079ec <TIM_OC2_SetConfig+0xe4>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d003      	beq.n	800799c <TIM_OC2_SetConfig+0x94>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a16      	ldr	r2, [pc, #88]	; (80079f0 <TIM_OC2_SetConfig+0xe8>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d113      	bne.n	80079c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	621a      	str	r2, [r3, #32]
}
 80079de:	bf00      	nop
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40010000 	.word	0x40010000
 80079f0:	40010400 	.word	0x40010400

080079f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0303 	bic.w	r3, r3, #3
 8007a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	021b      	lsls	r3, r3, #8
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a21      	ldr	r2, [pc, #132]	; (8007ad4 <TIM_OC3_SetConfig+0xe0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d003      	beq.n	8007a5a <TIM_OC3_SetConfig+0x66>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a20      	ldr	r2, [pc, #128]	; (8007ad8 <TIM_OC3_SetConfig+0xe4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d10d      	bne.n	8007a76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a16      	ldr	r2, [pc, #88]	; (8007ad4 <TIM_OC3_SetConfig+0xe0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d003      	beq.n	8007a86 <TIM_OC3_SetConfig+0x92>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <TIM_OC3_SetConfig+0xe4>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d113      	bne.n	8007aae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	011b      	lsls	r3, r3, #4
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	621a      	str	r2, [r3, #32]
}
 8007ac8:	bf00      	nop
 8007aca:	371c      	adds	r7, #28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	40010000 	.word	0x40010000
 8007ad8:	40010400 	.word	0x40010400

08007adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	021b      	lsls	r3, r3, #8
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	031b      	lsls	r3, r3, #12
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a12      	ldr	r2, [pc, #72]	; (8007b80 <TIM_OC4_SetConfig+0xa4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d003      	beq.n	8007b44 <TIM_OC4_SetConfig+0x68>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a11      	ldr	r2, [pc, #68]	; (8007b84 <TIM_OC4_SetConfig+0xa8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d109      	bne.n	8007b58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	019b      	lsls	r3, r3, #6
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	621a      	str	r2, [r3, #32]
}
 8007b72:	bf00      	nop
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	40010000 	.word	0x40010000
 8007b84:	40010400 	.word	0x40010400

08007b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	f023 0201 	bic.w	r2, r3, #1
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f023 030a 	bic.w	r3, r3, #10
 8007bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	621a      	str	r2, [r3, #32]
}
 8007bda:	bf00      	nop
 8007bdc:	371c      	adds	r7, #28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b087      	sub	sp, #28
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f023 0210 	bic.w	r2, r3, #16
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6a1b      	ldr	r3, [r3, #32]
 8007c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	031b      	lsls	r3, r3, #12
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	011b      	lsls	r3, r3, #4
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	621a      	str	r2, [r3, #32]
}
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	f043 0307 	orr.w	r3, r3, #7
 8007c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	609a      	str	r2, [r3, #8]
}
 8007c70:	bf00      	nop
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	021a      	lsls	r2, r3, #8
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	609a      	str	r2, [r3, #8]
}
 8007cb0:	bf00      	nop
 8007cb2:	371c      	adds	r7, #28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f003 031f 	and.w	r3, r3, #31
 8007cce:	2201      	movs	r2, #1
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1a      	ldr	r2, [r3, #32]
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	401a      	ands	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a1a      	ldr	r2, [r3, #32]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f003 031f 	and.w	r3, r3, #31
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	621a      	str	r2, [r3, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
	...

08007d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e05a      	b.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a21      	ldr	r2, [pc, #132]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d022      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6c:	d01d      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a1d      	ldr	r2, [pc, #116]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d018      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a1b      	ldr	r2, [pc, #108]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d013      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a1a      	ldr	r2, [pc, #104]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00e      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a18      	ldr	r2, [pc, #96]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d009      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a17      	ldr	r2, [pc, #92]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d004      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a15      	ldr	r2, [pc, #84]	; (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d10c      	bne.n	8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	40010000 	.word	0x40010000
 8007de8:	40000400 	.word	0x40000400
 8007dec:	40000800 	.word	0x40000800
 8007df0:	40000c00 	.word	0x40000c00
 8007df4:	40010400 	.word	0x40010400
 8007df8:	40014000 	.word	0x40014000
 8007dfc:	40001800 	.word	0x40001800

08007e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e03f      	b.n	8007eba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fa f93e 	bl	80020d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2224      	movs	r2, #36	; 0x24
 8007e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fc6d 	bl	800874c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691a      	ldr	r2, [r3, #16]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	695a      	ldr	r2, [r3, #20]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68da      	ldr	r2, [r3, #12]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b088      	sub	sp, #32
 8007ec6:	af02      	add	r7, sp, #8
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	603b      	str	r3, [r7, #0]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	f040 8083 	bne.w	8007fea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_UART_Transmit+0x2e>
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e07b      	b.n	8007fec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <HAL_UART_Transmit+0x40>
 8007efe:	2302      	movs	r3, #2
 8007f00:	e074      	b.n	8007fec <HAL_UART_Transmit+0x12a>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2221      	movs	r2, #33	; 0x21
 8007f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007f18:	f7fa faf8 	bl	800250c <HAL_GetTick>
 8007f1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	88fa      	ldrh	r2, [r7, #6]
 8007f22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	88fa      	ldrh	r2, [r7, #6]
 8007f28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007f32:	e042      	b.n	8007fba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4a:	d122      	bne.n	8007f92 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2200      	movs	r2, #0
 8007f54:	2180      	movs	r1, #128	; 0x80
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 fa76 	bl	8008448 <UART_WaitOnFlagUntilTimeout>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e042      	b.n	8007fec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f78:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d103      	bne.n	8007f8a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	3302      	adds	r3, #2
 8007f86:	60bb      	str	r3, [r7, #8]
 8007f88:	e017      	b.n	8007fba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	60bb      	str	r3, [r7, #8]
 8007f90:	e013      	b.n	8007fba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2180      	movs	r1, #128	; 0x80
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 fa53 	bl	8008448 <UART_WaitOnFlagUntilTimeout>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e01f      	b.n	8007fec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	60ba      	str	r2, [r7, #8]
 8007fb2:	781a      	ldrb	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1b7      	bne.n	8007f34 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	2140      	movs	r1, #64	; 0x40
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 fa3a 	bl	8008448 <UART_WaitOnFlagUntilTimeout>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e006      	b.n	8007fec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e000      	b.n	8007fec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007fea:	2302      	movs	r3, #2
  }
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b20      	cmp	r3, #32
 800800c:	d166      	bne.n	80080dc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <HAL_UART_Receive_DMA+0x26>
 8008014:	88fb      	ldrh	r3, [r7, #6]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e05f      	b.n	80080de <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_UART_Receive_DMA+0x38>
 8008028:	2302      	movs	r3, #2
 800802a:	e058      	b.n	80080de <HAL_UART_Receive_DMA+0xea>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	88fa      	ldrh	r2, [r7, #6]
 800803e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2222      	movs	r2, #34	; 0x22
 800804a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008052:	4a25      	ldr	r2, [pc, #148]	; (80080e8 <HAL_UART_Receive_DMA+0xf4>)
 8008054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805a:	4a24      	ldr	r2, [pc, #144]	; (80080ec <HAL_UART_Receive_DMA+0xf8>)
 800805c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008062:	4a23      	ldr	r2, [pc, #140]	; (80080f0 <HAL_UART_Receive_DMA+0xfc>)
 8008064:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806a:	2200      	movs	r2, #0
 800806c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800806e:	f107 0308 	add.w	r3, r7, #8
 8008072:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3304      	adds	r3, #4
 800807e:	4619      	mov	r1, r3
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	88fb      	ldrh	r3, [r7, #6]
 8008086:	f7fa fc2f 	bl	80028e8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800808a:	2300      	movs	r3, #0
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	613b      	str	r3, [r7, #16]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080b6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695a      	ldr	r2, [r3, #20]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	695a      	ldr	r2, [r3, #20]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080d6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	e000      	b.n	80080de <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80080dc:	2302      	movs	r3, #2
  }
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	08008331 	.word	0x08008331
 80080ec:	08008399 	.word	0x08008399
 80080f0:	080083b5 	.word	0x080083b5

080080f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008114:	2300      	movs	r3, #0
 8008116:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	f003 030f 	and.w	r3, r3, #15
 8008122:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10d      	bne.n	8008146 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	f003 0320 	and.w	r3, r3, #32
 8008130:	2b00      	cmp	r3, #0
 8008132:	d008      	beq.n	8008146 <HAL_UART_IRQHandler+0x52>
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	f003 0320 	and.w	r3, r3, #32
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fa82 	bl	8008648 <UART_Receive_IT>
      return;
 8008144:	e0d1      	b.n	80082ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 80b0 	beq.w	80082ae <HAL_UART_IRQHandler+0x1ba>
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d105      	bne.n	8008164 <HAL_UART_IRQHandler+0x70>
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 80a5 	beq.w	80082ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <HAL_UART_IRQHandler+0x90>
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008174:	2b00      	cmp	r3, #0
 8008176:	d005      	beq.n	8008184 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817c:	f043 0201 	orr.w	r2, r3, #1
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00a      	beq.n	80081a4 <HAL_UART_IRQHandler+0xb0>
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d005      	beq.n	80081a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819c:	f043 0202 	orr.w	r2, r3, #2
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00a      	beq.n	80081c4 <HAL_UART_IRQHandler+0xd0>
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081bc:	f043 0204 	orr.w	r2, r3, #4
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00f      	beq.n	80081ee <HAL_UART_IRQHandler+0xfa>
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d104      	bne.n	80081e2 <HAL_UART_IRQHandler+0xee>
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d005      	beq.n	80081ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e6:	f043 0208 	orr.w	r2, r3, #8
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d078      	beq.n	80082e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d007      	beq.n	8008210 <HAL_UART_IRQHandler+0x11c>
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	f003 0320 	and.w	r3, r3, #32
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa1c 	bl	8008648 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	bf0c      	ite	eq
 800821e:	2301      	moveq	r3, #1
 8008220:	2300      	movne	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822a:	f003 0308 	and.w	r3, r3, #8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d102      	bne.n	8008238 <HAL_UART_IRQHandler+0x144>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d031      	beq.n	800829c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f965 	bl	8008508 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008248:	2b40      	cmp	r3, #64	; 0x40
 800824a:	d123      	bne.n	8008294 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	695a      	ldr	r2, [r3, #20]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800825a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008260:	2b00      	cmp	r3, #0
 8008262:	d013      	beq.n	800828c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008268:	4a21      	ldr	r2, [pc, #132]	; (80082f0 <HAL_UART_IRQHandler+0x1fc>)
 800826a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008270:	4618      	mov	r0, r3
 8008272:	f7fa fb91 	bl	8002998 <HAL_DMA_Abort_IT>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d016      	beq.n	80082aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008286:	4610      	mov	r0, r2
 8008288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828a:	e00e      	b.n	80082aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f845 	bl	800831c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008292:	e00a      	b.n	80082aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f841 	bl	800831c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800829a:	e006      	b.n	80082aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f83d 	bl	800831c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80082a8:	e01e      	b.n	80082e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082aa:	bf00      	nop
    return;
 80082ac:	e01c      	b.n	80082e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d008      	beq.n	80082ca <HAL_UART_IRQHandler+0x1d6>
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f952 	bl	800856c <UART_Transmit_IT>
    return;
 80082c8:	e00f      	b.n	80082ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00a      	beq.n	80082ea <HAL_UART_IRQHandler+0x1f6>
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d005      	beq.n	80082ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f99a 	bl	8008618 <UART_EndTransmit_IT>
    return;
 80082e4:	bf00      	nop
 80082e6:	e000      	b.n	80082ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80082e8:	bf00      	nop
  }
}
 80082ea:	3720      	adds	r7, #32
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	08008545 	.word	0x08008545

080082f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008348:	2b00      	cmp	r3, #0
 800834a:	d11e      	bne.n	800838a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008360:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695a      	ldr	r2, [r3, #20]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0201 	bic.w	r2, r2, #1
 8008370:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	695a      	ldr	r2, [r3, #20]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008380:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2220      	movs	r2, #32
 8008386:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f002 fe52 	bl	800b034 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008390:	bf00      	nop
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7ff ffae 	bl	8008308 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ac:	bf00      	nop
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d0:	2b80      	cmp	r3, #128	; 0x80
 80083d2:	bf0c      	ite	eq
 80083d4:	2301      	moveq	r3, #1
 80083d6:	2300      	movne	r3, #0
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b21      	cmp	r3, #33	; 0x21
 80083e6:	d108      	bne.n	80083fa <UART_DMAError+0x46>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2200      	movs	r2, #0
 80083f2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80083f4:	68b8      	ldr	r0, [r7, #8]
 80083f6:	f000 f871 	bl	80084dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008404:	2b40      	cmp	r3, #64	; 0x40
 8008406:	bf0c      	ite	eq
 8008408:	2301      	moveq	r3, #1
 800840a:	2300      	movne	r3, #0
 800840c:	b2db      	uxtb	r3, r3
 800840e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b22      	cmp	r3, #34	; 0x22
 800841a:	d108      	bne.n	800842e <UART_DMAError+0x7a>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d005      	beq.n	800842e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2200      	movs	r2, #0
 8008426:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008428:	68b8      	ldr	r0, [r7, #8]
 800842a:	f000 f86d 	bl	8008508 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008432:	f043 0210 	orr.w	r2, r3, #16
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800843a:	68b8      	ldr	r0, [r7, #8]
 800843c:	f7ff ff6e 	bl	800831c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008440:	bf00      	nop
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	603b      	str	r3, [r7, #0]
 8008454:	4613      	mov	r3, r2
 8008456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008458:	e02c      	b.n	80084b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008460:	d028      	beq.n	80084b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d007      	beq.n	8008478 <UART_WaitOnFlagUntilTimeout+0x30>
 8008468:	f7fa f850 	bl	800250c <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	429a      	cmp	r2, r3
 8008476:	d21d      	bcs.n	80084b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008486:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	695a      	ldr	r2, [r3, #20]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 0201 	bic.w	r2, r2, #1
 8008496:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2220      	movs	r2, #32
 80084a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e00f      	b.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	4013      	ands	r3, r2
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	bf0c      	ite	eq
 80084c4:	2301      	moveq	r3, #1
 80084c6:	2300      	movne	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	461a      	mov	r2, r3
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d0c3      	beq.n	800845a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80084f2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800851e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	695a      	ldr	r2, [r3, #20]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0201 	bic.w	r2, r2, #1
 800852e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2220      	movs	r2, #32
 8008534:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008550:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f7ff fedc 	bl	800831c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008564:	bf00      	nop
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b21      	cmp	r3, #33	; 0x21
 800857e:	d144      	bne.n	800860a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008588:	d11a      	bne.n	80085c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800859e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a1b      	ldr	r3, [r3, #32]
 80085ac:	1c9a      	adds	r2, r3, #2
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	621a      	str	r2, [r3, #32]
 80085b2:	e00e      	b.n	80085d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	621a      	str	r2, [r3, #32]
 80085be:	e008      	b.n	80085d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	1c59      	adds	r1, r3, #1
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	6211      	str	r1, [r2, #32]
 80085ca:	781a      	ldrb	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	3b01      	subs	r3, #1
 80085da:	b29b      	uxth	r3, r3
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	4619      	mov	r1, r3
 80085e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10f      	bne.n	8008606 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008604:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	e000      	b.n	800860c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800860a:	2302      	movs	r3, #2
  }
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68da      	ldr	r2, [r3, #12]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800862e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2220      	movs	r2, #32
 8008634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7ff fe5b 	bl	80082f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b22      	cmp	r3, #34	; 0x22
 800865a:	d171      	bne.n	8008740 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008664:	d123      	bne.n	80086ae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10e      	bne.n	8008692 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	b29b      	uxth	r3, r3
 800867c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008680:	b29a      	uxth	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868a:	1c9a      	adds	r2, r3, #2
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	629a      	str	r2, [r3, #40]	; 0x28
 8008690:	e029      	b.n	80086e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	b29b      	uxth	r3, r3
 800869a:	b2db      	uxtb	r3, r3
 800869c:	b29a      	uxth	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	1c5a      	adds	r2, r3, #1
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	629a      	str	r2, [r3, #40]	; 0x28
 80086ac:	e01b      	b.n	80086e6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10a      	bne.n	80086cc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6858      	ldr	r0, [r3, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c0:	1c59      	adds	r1, r3, #1
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	6291      	str	r1, [r2, #40]	; 0x28
 80086c6:	b2c2      	uxtb	r2, r0
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	e00c      	b.n	80086e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d8:	1c58      	adds	r0, r3, #1
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	6288      	str	r0, [r1, #40]	; 0x28
 80086de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	3b01      	subs	r3, #1
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	4619      	mov	r1, r3
 80086f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d120      	bne.n	800873c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0220 	bic.w	r2, r2, #32
 8008708:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68da      	ldr	r2, [r3, #12]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008718:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	695a      	ldr	r2, [r3, #20]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0201 	bic.w	r2, r2, #1
 8008728:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2220      	movs	r2, #32
 800872e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f002 fc7e 	bl	800b034 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	e002      	b.n	8008742 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	e000      	b.n	8008742 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008740:	2302      	movs	r3, #2
  }
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	b085      	sub	sp, #20
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68da      	ldr	r2, [r3, #12]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	431a      	orrs	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800878e:	f023 030c 	bic.w	r3, r3, #12
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	68f9      	ldr	r1, [r7, #12]
 8008798:	430b      	orrs	r3, r1
 800879a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ba:	f040 818b 	bne.w	8008ad4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4ac1      	ldr	r2, [pc, #772]	; (8008ac8 <UART_SetConfig+0x37c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d005      	beq.n	80087d4 <UART_SetConfig+0x88>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4abf      	ldr	r2, [pc, #764]	; (8008acc <UART_SetConfig+0x380>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	f040 80bd 	bne.w	800894e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087d4:	f7fe fc04 	bl	8006fe0 <HAL_RCC_GetPCLK2Freq>
 80087d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	461d      	mov	r5, r3
 80087de:	f04f 0600 	mov.w	r6, #0
 80087e2:	46a8      	mov	r8, r5
 80087e4:	46b1      	mov	r9, r6
 80087e6:	eb18 0308 	adds.w	r3, r8, r8
 80087ea:	eb49 0409 	adc.w	r4, r9, r9
 80087ee:	4698      	mov	r8, r3
 80087f0:	46a1      	mov	r9, r4
 80087f2:	eb18 0805 	adds.w	r8, r8, r5
 80087f6:	eb49 0906 	adc.w	r9, r9, r6
 80087fa:	f04f 0100 	mov.w	r1, #0
 80087fe:	f04f 0200 	mov.w	r2, #0
 8008802:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008806:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800880a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800880e:	4688      	mov	r8, r1
 8008810:	4691      	mov	r9, r2
 8008812:	eb18 0005 	adds.w	r0, r8, r5
 8008816:	eb49 0106 	adc.w	r1, r9, r6
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	461d      	mov	r5, r3
 8008820:	f04f 0600 	mov.w	r6, #0
 8008824:	196b      	adds	r3, r5, r5
 8008826:	eb46 0406 	adc.w	r4, r6, r6
 800882a:	461a      	mov	r2, r3
 800882c:	4623      	mov	r3, r4
 800882e:	f7f8 fa1b 	bl	8000c68 <__aeabi_uldivmod>
 8008832:	4603      	mov	r3, r0
 8008834:	460c      	mov	r4, r1
 8008836:	461a      	mov	r2, r3
 8008838:	4ba5      	ldr	r3, [pc, #660]	; (8008ad0 <UART_SetConfig+0x384>)
 800883a:	fba3 2302 	umull	r2, r3, r3, r2
 800883e:	095b      	lsrs	r3, r3, #5
 8008840:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	461d      	mov	r5, r3
 8008848:	f04f 0600 	mov.w	r6, #0
 800884c:	46a9      	mov	r9, r5
 800884e:	46b2      	mov	sl, r6
 8008850:	eb19 0309 	adds.w	r3, r9, r9
 8008854:	eb4a 040a 	adc.w	r4, sl, sl
 8008858:	4699      	mov	r9, r3
 800885a:	46a2      	mov	sl, r4
 800885c:	eb19 0905 	adds.w	r9, r9, r5
 8008860:	eb4a 0a06 	adc.w	sl, sl, r6
 8008864:	f04f 0100 	mov.w	r1, #0
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008870:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008874:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008878:	4689      	mov	r9, r1
 800887a:	4692      	mov	sl, r2
 800887c:	eb19 0005 	adds.w	r0, r9, r5
 8008880:	eb4a 0106 	adc.w	r1, sl, r6
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	461d      	mov	r5, r3
 800888a:	f04f 0600 	mov.w	r6, #0
 800888e:	196b      	adds	r3, r5, r5
 8008890:	eb46 0406 	adc.w	r4, r6, r6
 8008894:	461a      	mov	r2, r3
 8008896:	4623      	mov	r3, r4
 8008898:	f7f8 f9e6 	bl	8000c68 <__aeabi_uldivmod>
 800889c:	4603      	mov	r3, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	461a      	mov	r2, r3
 80088a2:	4b8b      	ldr	r3, [pc, #556]	; (8008ad0 <UART_SetConfig+0x384>)
 80088a4:	fba3 1302 	umull	r1, r3, r3, r2
 80088a8:	095b      	lsrs	r3, r3, #5
 80088aa:	2164      	movs	r1, #100	; 0x64
 80088ac:	fb01 f303 	mul.w	r3, r1, r3
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	3332      	adds	r3, #50	; 0x32
 80088b6:	4a86      	ldr	r2, [pc, #536]	; (8008ad0 <UART_SetConfig+0x384>)
 80088b8:	fba2 2303 	umull	r2, r3, r2, r3
 80088bc:	095b      	lsrs	r3, r3, #5
 80088be:	005b      	lsls	r3, r3, #1
 80088c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088c4:	4498      	add	r8, r3
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	461d      	mov	r5, r3
 80088ca:	f04f 0600 	mov.w	r6, #0
 80088ce:	46a9      	mov	r9, r5
 80088d0:	46b2      	mov	sl, r6
 80088d2:	eb19 0309 	adds.w	r3, r9, r9
 80088d6:	eb4a 040a 	adc.w	r4, sl, sl
 80088da:	4699      	mov	r9, r3
 80088dc:	46a2      	mov	sl, r4
 80088de:	eb19 0905 	adds.w	r9, r9, r5
 80088e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80088e6:	f04f 0100 	mov.w	r1, #0
 80088ea:	f04f 0200 	mov.w	r2, #0
 80088ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088fa:	4689      	mov	r9, r1
 80088fc:	4692      	mov	sl, r2
 80088fe:	eb19 0005 	adds.w	r0, r9, r5
 8008902:	eb4a 0106 	adc.w	r1, sl, r6
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	461d      	mov	r5, r3
 800890c:	f04f 0600 	mov.w	r6, #0
 8008910:	196b      	adds	r3, r5, r5
 8008912:	eb46 0406 	adc.w	r4, r6, r6
 8008916:	461a      	mov	r2, r3
 8008918:	4623      	mov	r3, r4
 800891a:	f7f8 f9a5 	bl	8000c68 <__aeabi_uldivmod>
 800891e:	4603      	mov	r3, r0
 8008920:	460c      	mov	r4, r1
 8008922:	461a      	mov	r2, r3
 8008924:	4b6a      	ldr	r3, [pc, #424]	; (8008ad0 <UART_SetConfig+0x384>)
 8008926:	fba3 1302 	umull	r1, r3, r3, r2
 800892a:	095b      	lsrs	r3, r3, #5
 800892c:	2164      	movs	r1, #100	; 0x64
 800892e:	fb01 f303 	mul.w	r3, r1, r3
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	3332      	adds	r3, #50	; 0x32
 8008938:	4a65      	ldr	r2, [pc, #404]	; (8008ad0 <UART_SetConfig+0x384>)
 800893a:	fba2 2303 	umull	r2, r3, r2, r3
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	f003 0207 	and.w	r2, r3, #7
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4442      	add	r2, r8
 800894a:	609a      	str	r2, [r3, #8]
 800894c:	e26f      	b.n	8008e2e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800894e:	f7fe fb33 	bl	8006fb8 <HAL_RCC_GetPCLK1Freq>
 8008952:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	461d      	mov	r5, r3
 8008958:	f04f 0600 	mov.w	r6, #0
 800895c:	46a8      	mov	r8, r5
 800895e:	46b1      	mov	r9, r6
 8008960:	eb18 0308 	adds.w	r3, r8, r8
 8008964:	eb49 0409 	adc.w	r4, r9, r9
 8008968:	4698      	mov	r8, r3
 800896a:	46a1      	mov	r9, r4
 800896c:	eb18 0805 	adds.w	r8, r8, r5
 8008970:	eb49 0906 	adc.w	r9, r9, r6
 8008974:	f04f 0100 	mov.w	r1, #0
 8008978:	f04f 0200 	mov.w	r2, #0
 800897c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008980:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008984:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008988:	4688      	mov	r8, r1
 800898a:	4691      	mov	r9, r2
 800898c:	eb18 0005 	adds.w	r0, r8, r5
 8008990:	eb49 0106 	adc.w	r1, r9, r6
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	461d      	mov	r5, r3
 800899a:	f04f 0600 	mov.w	r6, #0
 800899e:	196b      	adds	r3, r5, r5
 80089a0:	eb46 0406 	adc.w	r4, r6, r6
 80089a4:	461a      	mov	r2, r3
 80089a6:	4623      	mov	r3, r4
 80089a8:	f7f8 f95e 	bl	8000c68 <__aeabi_uldivmod>
 80089ac:	4603      	mov	r3, r0
 80089ae:	460c      	mov	r4, r1
 80089b0:	461a      	mov	r2, r3
 80089b2:	4b47      	ldr	r3, [pc, #284]	; (8008ad0 <UART_SetConfig+0x384>)
 80089b4:	fba3 2302 	umull	r2, r3, r3, r2
 80089b8:	095b      	lsrs	r3, r3, #5
 80089ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	461d      	mov	r5, r3
 80089c2:	f04f 0600 	mov.w	r6, #0
 80089c6:	46a9      	mov	r9, r5
 80089c8:	46b2      	mov	sl, r6
 80089ca:	eb19 0309 	adds.w	r3, r9, r9
 80089ce:	eb4a 040a 	adc.w	r4, sl, sl
 80089d2:	4699      	mov	r9, r3
 80089d4:	46a2      	mov	sl, r4
 80089d6:	eb19 0905 	adds.w	r9, r9, r5
 80089da:	eb4a 0a06 	adc.w	sl, sl, r6
 80089de:	f04f 0100 	mov.w	r1, #0
 80089e2:	f04f 0200 	mov.w	r2, #0
 80089e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089f2:	4689      	mov	r9, r1
 80089f4:	4692      	mov	sl, r2
 80089f6:	eb19 0005 	adds.w	r0, r9, r5
 80089fa:	eb4a 0106 	adc.w	r1, sl, r6
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	461d      	mov	r5, r3
 8008a04:	f04f 0600 	mov.w	r6, #0
 8008a08:	196b      	adds	r3, r5, r5
 8008a0a:	eb46 0406 	adc.w	r4, r6, r6
 8008a0e:	461a      	mov	r2, r3
 8008a10:	4623      	mov	r3, r4
 8008a12:	f7f8 f929 	bl	8000c68 <__aeabi_uldivmod>
 8008a16:	4603      	mov	r3, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	4b2c      	ldr	r3, [pc, #176]	; (8008ad0 <UART_SetConfig+0x384>)
 8008a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8008a22:	095b      	lsrs	r3, r3, #5
 8008a24:	2164      	movs	r1, #100	; 0x64
 8008a26:	fb01 f303 	mul.w	r3, r1, r3
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	00db      	lsls	r3, r3, #3
 8008a2e:	3332      	adds	r3, #50	; 0x32
 8008a30:	4a27      	ldr	r2, [pc, #156]	; (8008ad0 <UART_SetConfig+0x384>)
 8008a32:	fba2 2303 	umull	r2, r3, r2, r3
 8008a36:	095b      	lsrs	r3, r3, #5
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a3e:	4498      	add	r8, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	461d      	mov	r5, r3
 8008a44:	f04f 0600 	mov.w	r6, #0
 8008a48:	46a9      	mov	r9, r5
 8008a4a:	46b2      	mov	sl, r6
 8008a4c:	eb19 0309 	adds.w	r3, r9, r9
 8008a50:	eb4a 040a 	adc.w	r4, sl, sl
 8008a54:	4699      	mov	r9, r3
 8008a56:	46a2      	mov	sl, r4
 8008a58:	eb19 0905 	adds.w	r9, r9, r5
 8008a5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a60:	f04f 0100 	mov.w	r1, #0
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a74:	4689      	mov	r9, r1
 8008a76:	4692      	mov	sl, r2
 8008a78:	eb19 0005 	adds.w	r0, r9, r5
 8008a7c:	eb4a 0106 	adc.w	r1, sl, r6
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	461d      	mov	r5, r3
 8008a86:	f04f 0600 	mov.w	r6, #0
 8008a8a:	196b      	adds	r3, r5, r5
 8008a8c:	eb46 0406 	adc.w	r4, r6, r6
 8008a90:	461a      	mov	r2, r3
 8008a92:	4623      	mov	r3, r4
 8008a94:	f7f8 f8e8 	bl	8000c68 <__aeabi_uldivmod>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	4b0c      	ldr	r3, [pc, #48]	; (8008ad0 <UART_SetConfig+0x384>)
 8008aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8008aa4:	095b      	lsrs	r3, r3, #5
 8008aa6:	2164      	movs	r1, #100	; 0x64
 8008aa8:	fb01 f303 	mul.w	r3, r1, r3
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	3332      	adds	r3, #50	; 0x32
 8008ab2:	4a07      	ldr	r2, [pc, #28]	; (8008ad0 <UART_SetConfig+0x384>)
 8008ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab8:	095b      	lsrs	r3, r3, #5
 8008aba:	f003 0207 	and.w	r2, r3, #7
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4442      	add	r2, r8
 8008ac4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008ac6:	e1b2      	b.n	8008e2e <UART_SetConfig+0x6e2>
 8008ac8:	40011000 	.word	0x40011000
 8008acc:	40011400 	.word	0x40011400
 8008ad0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4ad7      	ldr	r2, [pc, #860]	; (8008e38 <UART_SetConfig+0x6ec>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d005      	beq.n	8008aea <UART_SetConfig+0x39e>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4ad6      	ldr	r2, [pc, #856]	; (8008e3c <UART_SetConfig+0x6f0>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	f040 80d1 	bne.w	8008c8c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008aea:	f7fe fa79 	bl	8006fe0 <HAL_RCC_GetPCLK2Freq>
 8008aee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	469a      	mov	sl, r3
 8008af4:	f04f 0b00 	mov.w	fp, #0
 8008af8:	46d0      	mov	r8, sl
 8008afa:	46d9      	mov	r9, fp
 8008afc:	eb18 0308 	adds.w	r3, r8, r8
 8008b00:	eb49 0409 	adc.w	r4, r9, r9
 8008b04:	4698      	mov	r8, r3
 8008b06:	46a1      	mov	r9, r4
 8008b08:	eb18 080a 	adds.w	r8, r8, sl
 8008b0c:	eb49 090b 	adc.w	r9, r9, fp
 8008b10:	f04f 0100 	mov.w	r1, #0
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b24:	4688      	mov	r8, r1
 8008b26:	4691      	mov	r9, r2
 8008b28:	eb1a 0508 	adds.w	r5, sl, r8
 8008b2c:	eb4b 0609 	adc.w	r6, fp, r9
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	4619      	mov	r1, r3
 8008b36:	f04f 0200 	mov.w	r2, #0
 8008b3a:	f04f 0300 	mov.w	r3, #0
 8008b3e:	f04f 0400 	mov.w	r4, #0
 8008b42:	0094      	lsls	r4, r2, #2
 8008b44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b48:	008b      	lsls	r3, r1, #2
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	4628      	mov	r0, r5
 8008b50:	4631      	mov	r1, r6
 8008b52:	f7f8 f889 	bl	8000c68 <__aeabi_uldivmod>
 8008b56:	4603      	mov	r3, r0
 8008b58:	460c      	mov	r4, r1
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	4bb8      	ldr	r3, [pc, #736]	; (8008e40 <UART_SetConfig+0x6f4>)
 8008b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b62:	095b      	lsrs	r3, r3, #5
 8008b64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	469b      	mov	fp, r3
 8008b6c:	f04f 0c00 	mov.w	ip, #0
 8008b70:	46d9      	mov	r9, fp
 8008b72:	46e2      	mov	sl, ip
 8008b74:	eb19 0309 	adds.w	r3, r9, r9
 8008b78:	eb4a 040a 	adc.w	r4, sl, sl
 8008b7c:	4699      	mov	r9, r3
 8008b7e:	46a2      	mov	sl, r4
 8008b80:	eb19 090b 	adds.w	r9, r9, fp
 8008b84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b88:	f04f 0100 	mov.w	r1, #0
 8008b8c:	f04f 0200 	mov.w	r2, #0
 8008b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b9c:	4689      	mov	r9, r1
 8008b9e:	4692      	mov	sl, r2
 8008ba0:	eb1b 0509 	adds.w	r5, fp, r9
 8008ba4:	eb4c 060a 	adc.w	r6, ip, sl
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	4619      	mov	r1, r3
 8008bae:	f04f 0200 	mov.w	r2, #0
 8008bb2:	f04f 0300 	mov.w	r3, #0
 8008bb6:	f04f 0400 	mov.w	r4, #0
 8008bba:	0094      	lsls	r4, r2, #2
 8008bbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008bc0:	008b      	lsls	r3, r1, #2
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	4623      	mov	r3, r4
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	4631      	mov	r1, r6
 8008bca:	f7f8 f84d 	bl	8000c68 <__aeabi_uldivmod>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	4b9a      	ldr	r3, [pc, #616]	; (8008e40 <UART_SetConfig+0x6f4>)
 8008bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8008bda:	095b      	lsrs	r3, r3, #5
 8008bdc:	2164      	movs	r1, #100	; 0x64
 8008bde:	fb01 f303 	mul.w	r3, r1, r3
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	011b      	lsls	r3, r3, #4
 8008be6:	3332      	adds	r3, #50	; 0x32
 8008be8:	4a95      	ldr	r2, [pc, #596]	; (8008e40 <UART_SetConfig+0x6f4>)
 8008bea:	fba2 2303 	umull	r2, r3, r2, r3
 8008bee:	095b      	lsrs	r3, r3, #5
 8008bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bf4:	4498      	add	r8, r3
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	469b      	mov	fp, r3
 8008bfa:	f04f 0c00 	mov.w	ip, #0
 8008bfe:	46d9      	mov	r9, fp
 8008c00:	46e2      	mov	sl, ip
 8008c02:	eb19 0309 	adds.w	r3, r9, r9
 8008c06:	eb4a 040a 	adc.w	r4, sl, sl
 8008c0a:	4699      	mov	r9, r3
 8008c0c:	46a2      	mov	sl, r4
 8008c0e:	eb19 090b 	adds.w	r9, r9, fp
 8008c12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008c16:	f04f 0100 	mov.w	r1, #0
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c2a:	4689      	mov	r9, r1
 8008c2c:	4692      	mov	sl, r2
 8008c2e:	eb1b 0509 	adds.w	r5, fp, r9
 8008c32:	eb4c 060a 	adc.w	r6, ip, sl
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	f04f 0300 	mov.w	r3, #0
 8008c44:	f04f 0400 	mov.w	r4, #0
 8008c48:	0094      	lsls	r4, r2, #2
 8008c4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c4e:	008b      	lsls	r3, r1, #2
 8008c50:	461a      	mov	r2, r3
 8008c52:	4623      	mov	r3, r4
 8008c54:	4628      	mov	r0, r5
 8008c56:	4631      	mov	r1, r6
 8008c58:	f7f8 f806 	bl	8000c68 <__aeabi_uldivmod>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	460c      	mov	r4, r1
 8008c60:	461a      	mov	r2, r3
 8008c62:	4b77      	ldr	r3, [pc, #476]	; (8008e40 <UART_SetConfig+0x6f4>)
 8008c64:	fba3 1302 	umull	r1, r3, r3, r2
 8008c68:	095b      	lsrs	r3, r3, #5
 8008c6a:	2164      	movs	r1, #100	; 0x64
 8008c6c:	fb01 f303 	mul.w	r3, r1, r3
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	3332      	adds	r3, #50	; 0x32
 8008c76:	4a72      	ldr	r2, [pc, #456]	; (8008e40 <UART_SetConfig+0x6f4>)
 8008c78:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7c:	095b      	lsrs	r3, r3, #5
 8008c7e:	f003 020f 	and.w	r2, r3, #15
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4442      	add	r2, r8
 8008c88:	609a      	str	r2, [r3, #8]
 8008c8a:	e0d0      	b.n	8008e2e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c8c:	f7fe f994 	bl	8006fb8 <HAL_RCC_GetPCLK1Freq>
 8008c90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	469a      	mov	sl, r3
 8008c96:	f04f 0b00 	mov.w	fp, #0
 8008c9a:	46d0      	mov	r8, sl
 8008c9c:	46d9      	mov	r9, fp
 8008c9e:	eb18 0308 	adds.w	r3, r8, r8
 8008ca2:	eb49 0409 	adc.w	r4, r9, r9
 8008ca6:	4698      	mov	r8, r3
 8008ca8:	46a1      	mov	r9, r4
 8008caa:	eb18 080a 	adds.w	r8, r8, sl
 8008cae:	eb49 090b 	adc.w	r9, r9, fp
 8008cb2:	f04f 0100 	mov.w	r1, #0
 8008cb6:	f04f 0200 	mov.w	r2, #0
 8008cba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008cbe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008cc2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008cc6:	4688      	mov	r8, r1
 8008cc8:	4691      	mov	r9, r2
 8008cca:	eb1a 0508 	adds.w	r5, sl, r8
 8008cce:	eb4b 0609 	adc.w	r6, fp, r9
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	f04f 0200 	mov.w	r2, #0
 8008cdc:	f04f 0300 	mov.w	r3, #0
 8008ce0:	f04f 0400 	mov.w	r4, #0
 8008ce4:	0094      	lsls	r4, r2, #2
 8008ce6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008cea:	008b      	lsls	r3, r1, #2
 8008cec:	461a      	mov	r2, r3
 8008cee:	4623      	mov	r3, r4
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	f7f7 ffb8 	bl	8000c68 <__aeabi_uldivmod>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	4b50      	ldr	r3, [pc, #320]	; (8008e40 <UART_SetConfig+0x6f4>)
 8008d00:	fba3 2302 	umull	r2, r3, r3, r2
 8008d04:	095b      	lsrs	r3, r3, #5
 8008d06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	469b      	mov	fp, r3
 8008d0e:	f04f 0c00 	mov.w	ip, #0
 8008d12:	46d9      	mov	r9, fp
 8008d14:	46e2      	mov	sl, ip
 8008d16:	eb19 0309 	adds.w	r3, r9, r9
 8008d1a:	eb4a 040a 	adc.w	r4, sl, sl
 8008d1e:	4699      	mov	r9, r3
 8008d20:	46a2      	mov	sl, r4
 8008d22:	eb19 090b 	adds.w	r9, r9, fp
 8008d26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008d2a:	f04f 0100 	mov.w	r1, #0
 8008d2e:	f04f 0200 	mov.w	r2, #0
 8008d32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d3e:	4689      	mov	r9, r1
 8008d40:	4692      	mov	sl, r2
 8008d42:	eb1b 0509 	adds.w	r5, fp, r9
 8008d46:	eb4c 060a 	adc.w	r6, ip, sl
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	f04f 0200 	mov.w	r2, #0
 8008d54:	f04f 0300 	mov.w	r3, #0
 8008d58:	f04f 0400 	mov.w	r4, #0
 8008d5c:	0094      	lsls	r4, r2, #2
 8008d5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d62:	008b      	lsls	r3, r1, #2
 8008d64:	461a      	mov	r2, r3
 8008d66:	4623      	mov	r3, r4
 8008d68:	4628      	mov	r0, r5
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	f7f7 ff7c 	bl	8000c68 <__aeabi_uldivmod>
 8008d70:	4603      	mov	r3, r0
 8008d72:	460c      	mov	r4, r1
 8008d74:	461a      	mov	r2, r3
 8008d76:	4b32      	ldr	r3, [pc, #200]	; (8008e40 <UART_SetConfig+0x6f4>)
 8008d78:	fba3 1302 	umull	r1, r3, r3, r2
 8008d7c:	095b      	lsrs	r3, r3, #5
 8008d7e:	2164      	movs	r1, #100	; 0x64
 8008d80:	fb01 f303 	mul.w	r3, r1, r3
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	011b      	lsls	r3, r3, #4
 8008d88:	3332      	adds	r3, #50	; 0x32
 8008d8a:	4a2d      	ldr	r2, [pc, #180]	; (8008e40 <UART_SetConfig+0x6f4>)
 8008d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d90:	095b      	lsrs	r3, r3, #5
 8008d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d96:	4498      	add	r8, r3
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	469b      	mov	fp, r3
 8008d9c:	f04f 0c00 	mov.w	ip, #0
 8008da0:	46d9      	mov	r9, fp
 8008da2:	46e2      	mov	sl, ip
 8008da4:	eb19 0309 	adds.w	r3, r9, r9
 8008da8:	eb4a 040a 	adc.w	r4, sl, sl
 8008dac:	4699      	mov	r9, r3
 8008dae:	46a2      	mov	sl, r4
 8008db0:	eb19 090b 	adds.w	r9, r9, fp
 8008db4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008db8:	f04f 0100 	mov.w	r1, #0
 8008dbc:	f04f 0200 	mov.w	r2, #0
 8008dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008dcc:	4689      	mov	r9, r1
 8008dce:	4692      	mov	sl, r2
 8008dd0:	eb1b 0509 	adds.w	r5, fp, r9
 8008dd4:	eb4c 060a 	adc.w	r6, ip, sl
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f04f 0200 	mov.w	r2, #0
 8008de2:	f04f 0300 	mov.w	r3, #0
 8008de6:	f04f 0400 	mov.w	r4, #0
 8008dea:	0094      	lsls	r4, r2, #2
 8008dec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008df0:	008b      	lsls	r3, r1, #2
 8008df2:	461a      	mov	r2, r3
 8008df4:	4623      	mov	r3, r4
 8008df6:	4628      	mov	r0, r5
 8008df8:	4631      	mov	r1, r6
 8008dfa:	f7f7 ff35 	bl	8000c68 <__aeabi_uldivmod>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	460c      	mov	r4, r1
 8008e02:	461a      	mov	r2, r3
 8008e04:	4b0e      	ldr	r3, [pc, #56]	; (8008e40 <UART_SetConfig+0x6f4>)
 8008e06:	fba3 1302 	umull	r1, r3, r3, r2
 8008e0a:	095b      	lsrs	r3, r3, #5
 8008e0c:	2164      	movs	r1, #100	; 0x64
 8008e0e:	fb01 f303 	mul.w	r3, r1, r3
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	3332      	adds	r3, #50	; 0x32
 8008e18:	4a09      	ldr	r2, [pc, #36]	; (8008e40 <UART_SetConfig+0x6f4>)
 8008e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e1e:	095b      	lsrs	r3, r3, #5
 8008e20:	f003 020f 	and.w	r2, r3, #15
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4442      	add	r2, r8
 8008e2a:	609a      	str	r2, [r3, #8]
}
 8008e2c:	e7ff      	b.n	8008e2e <UART_SetConfig+0x6e2>
 8008e2e:	bf00      	nop
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e38:	40011000 	.word	0x40011000
 8008e3c:	40011400 	.word	0x40011400
 8008e40:	51eb851f 	.word	0x51eb851f

08008e44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e44:	b084      	sub	sp, #16
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	f107 001c 	add.w	r0, r7, #28
 8008e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d122      	bne.n	8008ea2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d105      	bne.n	8008e96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fa4e 	bl	8009338 <USB_CoreReset>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	73fb      	strb	r3, [r7, #15]
 8008ea0:	e01a      	b.n	8008ed8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fa42 	bl	8009338 <USB_CoreReset>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d106      	bne.n	8008ecc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
 8008eca:	e005      	b.n	8008ed8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d10b      	bne.n	8008ef6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f043 0206 	orr.w	r2, r3, #6
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f043 0220 	orr.w	r2, r3, #32
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f02:	b004      	add	sp, #16
 8008f04:	4770      	bx	lr

08008f06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f023 0201 	bic.w	r2, r3, #1
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d106      	bne.n	8008f54 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	60da      	str	r2, [r3, #12]
 8008f52:	e00b      	b.n	8008f6c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d106      	bne.n	8008f68 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	60da      	str	r2, [r3, #12]
 8008f66:	e001      	b.n	8008f6c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e003      	b.n	8008f74 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008f6c:	2032      	movs	r0, #50	; 0x32
 8008f6e:	f7f9 fad9 	bl	8002524 <HAL_Delay>

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b086      	sub	sp, #24
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f96:	2300      	movs	r3, #0
 8008f98:	613b      	str	r3, [r7, #16]
 8008f9a:	e009      	b.n	8008fb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	3340      	adds	r3, #64	; 0x40
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4413      	add	r3, r2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	3301      	adds	r3, #1
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2b0e      	cmp	r3, #14
 8008fb4:	d9f2      	bls.n	8008f9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d11c      	bne.n	8008ff6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fca:	f043 0302 	orr.w	r3, r3, #2
 8008fce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	639a      	str	r2, [r3, #56]	; 0x38
 8008ff4:	e00b      	b.n	800900e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009006:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009014:	461a      	mov	r2, r3
 8009016:	2300      	movs	r3, #0
 8009018:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009020:	4619      	mov	r1, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009028:	461a      	mov	r2, r3
 800902a:	680b      	ldr	r3, [r1, #0]
 800902c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	2b01      	cmp	r3, #1
 8009032:	d10c      	bne.n	800904e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800903a:	2100      	movs	r1, #0
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f949 	bl	80092d4 <USB_SetDevSpeed>
 8009042:	e008      	b.n	8009056 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009044:	2101      	movs	r1, #1
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f944 	bl	80092d4 <USB_SetDevSpeed>
 800904c:	e003      	b.n	8009056 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800904e:	2103      	movs	r1, #3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f93f 	bl	80092d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009056:	2110      	movs	r1, #16
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f8f3 	bl	8009244 <USB_FlushTxFifo>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f911 	bl	8009290 <USB_FlushRxFifo>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907e:	461a      	mov	r2, r3
 8009080:	2300      	movs	r3, #0
 8009082:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908a:	461a      	mov	r2, r3
 800908c:	2300      	movs	r3, #0
 800908e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009096:	461a      	mov	r2, r3
 8009098:	2300      	movs	r3, #0
 800909a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800909c:	2300      	movs	r3, #0
 800909e:	613b      	str	r3, [r7, #16]
 80090a0:	e043      	b.n	800912a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090b8:	d118      	bne.n	80090ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10a      	bne.n	80090d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090cc:	461a      	mov	r2, r3
 80090ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	e013      	b.n	80090fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e2:	461a      	mov	r2, r3
 80090e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	e008      	b.n	80090fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f8:	461a      	mov	r2, r3
 80090fa:	2300      	movs	r3, #0
 80090fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	015a      	lsls	r2, r3, #5
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	4413      	add	r3, r2
 8009106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800910a:	461a      	mov	r2, r3
 800910c:	2300      	movs	r3, #0
 800910e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911c:	461a      	mov	r2, r3
 800911e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009122:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	3301      	adds	r3, #1
 8009128:	613b      	str	r3, [r7, #16]
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	429a      	cmp	r2, r3
 8009130:	d3b7      	bcc.n	80090a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009132:	2300      	movs	r3, #0
 8009134:	613b      	str	r3, [r7, #16]
 8009136:	e043      	b.n	80091c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	015a      	lsls	r2, r3, #5
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4413      	add	r3, r2
 8009140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800914a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800914e:	d118      	bne.n	8009182 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10a      	bne.n	800916c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009162:	461a      	mov	r2, r3
 8009164:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	e013      	b.n	8009194 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009178:	461a      	mov	r2, r3
 800917a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	e008      	b.n	8009194 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918e:	461a      	mov	r2, r3
 8009190:	2300      	movs	r3, #0
 8009192:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a0:	461a      	mov	r2, r3
 80091a2:	2300      	movs	r3, #0
 80091a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b2:	461a      	mov	r2, r3
 80091b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3301      	adds	r3, #1
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d3b7      	bcc.n	8009138 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80091e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d105      	bne.n	80091fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	f043 0210 	orr.w	r2, r3, #16
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	699a      	ldr	r2, [r3, #24]
 8009200:	4b0f      	ldr	r3, [pc, #60]	; (8009240 <USB_DevInit+0x2c4>)
 8009202:	4313      	orrs	r3, r2
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d005      	beq.n	800921a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	f043 0208 	orr.w	r2, r3, #8
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800921a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800921c:	2b01      	cmp	r3, #1
 800921e:	d107      	bne.n	8009230 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009228:	f043 0304 	orr.w	r3, r3, #4
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009230:	7dfb      	ldrb	r3, [r7, #23]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800923c:	b004      	add	sp, #16
 800923e:	4770      	bx	lr
 8009240:	803c3800 	.word	0x803c3800

08009244 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	019b      	lsls	r3, r3, #6
 8009256:	f043 0220 	orr.w	r2, r3, #32
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3301      	adds	r3, #1
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4a09      	ldr	r2, [pc, #36]	; (800928c <USB_FlushTxFifo+0x48>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d901      	bls.n	8009270 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e006      	b.n	800927e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f003 0320 	and.w	r3, r3, #32
 8009278:	2b20      	cmp	r3, #32
 800927a:	d0f0      	beq.n	800925e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	00030d40 	.word	0x00030d40

08009290 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2210      	movs	r2, #16
 80092a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3301      	adds	r3, #1
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4a09      	ldr	r2, [pc, #36]	; (80092d0 <USB_FlushRxFifo+0x40>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d901      	bls.n	80092b4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e006      	b.n	80092c2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	f003 0310 	and.w	r3, r3, #16
 80092bc:	2b10      	cmp	r3, #16
 80092be:	d0f0      	beq.n	80092a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	00030d40 	.word	0x00030d40

080092d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	78fb      	ldrb	r3, [r7, #3]
 80092ee:	68f9      	ldr	r1, [r7, #12]
 80092f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092f4:	4313      	orrs	r3, r2
 80092f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009320:	f043 0302 	orr.w	r3, r3, #2
 8009324:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009326:	2003      	movs	r0, #3
 8009328:	f7f9 f8fc 	bl	8002524 <HAL_Delay>

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3301      	adds	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	4a13      	ldr	r2, [pc, #76]	; (800939c <USB_CoreReset+0x64>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d901      	bls.n	8009356 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e01b      	b.n	800938e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	daf2      	bge.n	8009344 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	f043 0201 	orr.w	r2, r3, #1
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3301      	adds	r3, #1
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4a09      	ldr	r2, [pc, #36]	; (800939c <USB_CoreReset+0x64>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d901      	bls.n	8009380 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e006      	b.n	800938e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b01      	cmp	r3, #1
 800938a:	d0f0      	beq.n	800936e <USB_CoreReset+0x36>

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	00030d40 	.word	0x00030d40

080093a0 <MPU9250_getHz>:

// mpu global instance
struct MPU9250 iMPU9250 = {0, };


uint16_t MPU9250_getHz(){ // call this func 1hz
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
	uint16_t temp = MPU9250_hzcnt;
 80093a6:	4b06      	ldr	r3, [pc, #24]	; (80093c0 <MPU9250_getHz+0x20>)
 80093a8:	881b      	ldrh	r3, [r3, #0]
 80093aa:	80fb      	strh	r3, [r7, #6]
	MPU9250_hzcnt = 0;
 80093ac:	4b04      	ldr	r3, [pc, #16]	; (80093c0 <MPU9250_getHz+0x20>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	801a      	strh	r2, [r3, #0]
	return temp;
 80093b2:	88fb      	ldrh	r3, [r7, #6]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	20000304 	.word	0x20000304

080093c4 <MPU9250_init>:

void MPU9250_init(struct MPU9250* obj, I2C_HandleTypeDef *phi2c){
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
//	obj->gyroBias[3] = {0, 0, 0}
//	obj->accelBias[3] = {0, 0, 0}; // Bias corrections for gyro and accelerometer

	obj->phi2c = phi2c;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	601a      	str	r2, [r3, #0]

	obj->Ascale = AFS_2G;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	711a      	strb	r2, [r3, #4]
	obj->Gscale = GFS_500DPS;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	715a      	strb	r2, [r3, #5]
	obj->Mscale = MFS_14BITS;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	719a      	strb	r2, [r3, #6]
	obj->Mmode = 0x06;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2206      	movs	r2, #6
 80093ea:	71da      	strb	r2, [r3, #7]

	obj->initQ[0] = 1;//initial value
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80093f2:	675a      	str	r2, [r3, #116]	; 0x74
	obj->initQ[1] = 0;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f04f 0200 	mov.w	r2, #0
 80093fa:	679a      	str	r2, [r3, #120]	; 0x78
	obj->initQ[2] = 0;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	67da      	str	r2, [r3, #124]	; 0x7c
	obj->initQ[3] = 0;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f04f 0200 	mov.w	r2, #0
 800940a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	MPU9250_getMres(obj);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f9c0 	bl	8009794 <MPU9250_getMres>
	MPU9250_getGres(obj);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f9db 	bl	80097d0 <MPU9250_getGres>
	MPU9250_getAres(obj);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa0a 	bl	8009834 <MPU9250_getAres>

	obj->status = MPU9250_disable;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	MPU9250_resetMPU9250(obj);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fa31 	bl	8009890 <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250(obj);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fb30 	bl	8009a94 <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250(obj); // calculate ay, ac bias
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fab1 	bl	800999c <MPU9250_initMPU9250>
	MPU9250_initAK8963(obj);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fa3a 	bl	80098b4 <MPU9250_initAK8963>

	obj->itSet = RESET;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
}
 8009448:	bf00      	nop
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <MPU9250_writeByte>:

uint16_t MPU9250_writeByte(struct MPU9250* obj, uint8_t address, uint8_t subAddress, uint8_t data)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af04      	add	r7, sp, #16
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	4608      	mov	r0, r1
 800945a:	4611      	mov	r1, r2
 800945c:	461a      	mov	r2, r3
 800945e:	4603      	mov	r3, r0
 8009460:	70fb      	strb	r3, [r7, #3]
 8009462:	460b      	mov	r3, r1
 8009464:	70bb      	strb	r3, [r7, #2]
 8009466:	4613      	mov	r3, r2
 8009468:	707b      	strb	r3, [r7, #1]
//	memcpy(dynBuffer+1, &data, sizeof(uint8_t) * SIZE);
//
//	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(obj->phi2c, address, dynBuffer, SIZE+1, DEFAULT_TIMEOUT);
//	free(dynBuffer);
//	return status == HAL_OK;
	HAL_I2C_Mem_Write(obj->phi2c, address, subAddress, 1, &data, 1, DEFAULT_TIMEOUT);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6818      	ldr	r0, [r3, #0]
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	b299      	uxth	r1, r3
 8009472:	78bb      	ldrb	r3, [r7, #2]
 8009474:	b29a      	uxth	r2, r3
 8009476:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800947a:	9302      	str	r3, [sp, #8]
 800947c:	2301      	movs	r3, #1
 800947e:	9301      	str	r3, [sp, #4]
 8009480:	1c7b      	adds	r3, r7, #1
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	2301      	movs	r3, #1
 8009486:	f7fa fc89 	bl	8003d9c <HAL_I2C_Mem_Write>
}
 800948a:	bf00      	nop
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <MPU9250_readBytes>:



void MPU9250_readBytes(struct MPU9250* obj, uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 8009494:	b590      	push	{r4, r7, lr}
 8009496:	b087      	sub	sp, #28
 8009498:	af04      	add	r7, sp, #16
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	4608      	mov	r0, r1
 800949e:	4611      	mov	r1, r2
 80094a0:	461a      	mov	r2, r3
 80094a2:	4603      	mov	r3, r0
 80094a4:	70fb      	strb	r3, [r7, #3]
 80094a6:	460b      	mov	r3, r1
 80094a8:	70bb      	strb	r3, [r7, #2]
 80094aa:	4613      	mov	r3, r2
 80094ac:	707b      	strb	r3, [r7, #1]
//	HAL_I2C_Master_Transmit(obj->phi2c, address, (uint8_t*)data_write, 1, DEFAULT_TIMEOUT);
//	HAL_I2C_Master_Receive(obj->phi2c, address, (uint8_t*)data, count, DEFAULT_TIMEOUT);
//	for(int ii = 0; ii < count; ii++) {
//		dest[ii] = data[ii];
//	}
	HAL_I2C_Mem_Read(obj->phi2c, address, subAddress, 1, dest, count, DEFAULT_TIMEOUT);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	b299      	uxth	r1, r3
 80094b6:	78bb      	ldrb	r3, [r7, #2]
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	787b      	ldrb	r3, [r7, #1]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 80094c2:	9402      	str	r4, [sp, #8]
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	2301      	movs	r3, #1
 80094cc:	f7fa fd60 	bl	8003f90 <HAL_I2C_Mem_Read>
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd90      	pop	{r4, r7, pc}

080094d8 <MPU9250_readByte>:

char MPU9250_readByte(struct MPU9250* obj, uint8_t address, uint8_t subAddress)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af02      	add	r7, sp, #8
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	70fb      	strb	r3, [r7, #3]
 80094e4:	4613      	mov	r3, r2
 80094e6:	70bb      	strb	r3, [r7, #2]
	char data[1]; // `data` will store the register data
	MPU9250_readBytes(obj, address, subAddress, 1, (uint8_t*)data);
 80094e8:	78ba      	ldrb	r2, [r7, #2]
 80094ea:	78f9      	ldrb	r1, [r7, #3]
 80094ec:	f107 030c 	add.w	r3, r7, #12
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	2301      	movs	r3, #1
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff ffcd 	bl	8009494 <MPU9250_readBytes>
	return data[1];
 80094fa:	7b7b      	ldrb	r3, [r7, #13]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <MPU9250_readMPU9250IT>:

void MPU9250_readMPU9250IT(struct MPU9250* obj){
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af02      	add	r7, sp, #8
 800950a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(obj->phi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, obj->agtBuffer, 14);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6818      	ldr	r0, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3388      	adds	r3, #136	; 0x88
 8009514:	220e      	movs	r2, #14
 8009516:	9201      	str	r2, [sp, #4]
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	2301      	movs	r3, #1
 800951c:	223b      	movs	r2, #59	; 0x3b
 800951e:	21d0      	movs	r1, #208	; 0xd0
 8009520:	f7fa ff5c 	bl	80043dc <HAL_I2C_Mem_Read_IT>
}
 8009524:	bf00      	nop
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <MPU9250_callbackMPU9250IT>:

uint8_t MPU9250_callbackMPU9250IT(struct MPU9250* obj){
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
	obj->accelCount[0] = (((int16_t)obj->agtBuffer[0]) << 8) | obj->agtBuffer[1];
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800953a:	021b      	lsls	r3, r3, #8
 800953c:	b21a      	sxth	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009544:	b21b      	sxth	r3, r3
 8009546:	4313      	orrs	r3, r2
 8009548:	b21a      	sxth	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	829a      	strh	r2, [r3, #20]
	obj->accelCount[1] = (((int16_t)obj->agtBuffer[2]) << 8) | obj->agtBuffer[3];
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8009554:	021b      	lsls	r3, r3, #8
 8009556:	b21a      	sxth	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800955e:	b21b      	sxth	r3, r3
 8009560:	4313      	orrs	r3, r2
 8009562:	b21a      	sxth	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	82da      	strh	r2, [r3, #22]
	obj->accelCount[2] = (((int16_t)obj->agtBuffer[4]) << 8) | obj->agtBuffer[5];
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800956e:	021b      	lsls	r3, r3, #8
 8009570:	b21a      	sxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009578:	b21b      	sxth	r3, r3
 800957a:	4313      	orrs	r3, r2
 800957c:	b21a      	sxth	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	831a      	strh	r2, [r3, #24]
	obj->tmpCount = (int16_t) (obj->agtBuffer[6] << 8 | obj->agtBuffer[7]);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8009588:	021b      	lsls	r3, r3, #8
 800958a:	b21a      	sxth	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8009592:	b21b      	sxth	r3, r3
 8009594:	4313      	orrs	r3, r2
 8009596:	b21a      	sxth	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	84da      	strh	r2, [r3, #38]	; 0x26
	obj->gyroCount[0] = (((int16_t)obj->agtBuffer[8]) << 8) | obj->agtBuffer[9];
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80095a2:	021b      	lsls	r3, r3, #8
 80095a4:	b21a      	sxth	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80095ac:	b21b      	sxth	r3, r3
 80095ae:	4313      	orrs	r3, r2
 80095b0:	b21a      	sxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	835a      	strh	r2, [r3, #26]
	obj->gyroCount[1] = (((int16_t)obj->agtBuffer[10]) << 8) | obj->agtBuffer[11];
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80095bc:	021b      	lsls	r3, r3, #8
 80095be:	b21a      	sxth	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80095c6:	b21b      	sxth	r3, r3
 80095c8:	4313      	orrs	r3, r2
 80095ca:	b21a      	sxth	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	839a      	strh	r2, [r3, #28]
	obj->gyroCount[2] = (((int16_t)obj->agtBuffer[12]) << 8) | obj->agtBuffer[13];
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80095d6:	021b      	lsls	r3, r3, #8
 80095d8:	b21a      	sxth	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80095e0:	b21b      	sxth	r3, r3
 80095e2:	4313      	orrs	r3, r2
 80095e4:	b21a      	sxth	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	83da      	strh	r2, [r3, #30]

	if((!(obj->accelCount[0])&!(obj->accelCount[1])&!(obj->accelCount[2]))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	b21a      	sxth	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009600:	4313      	orrs	r3, r2
 8009602:	b21b      	sxth	r3, r3
	   |(!(obj->gyroCount[0])&!(obj->gyroCount[1])&!(obj->gyroCount[2]))){
 8009604:	2b00      	cmp	r3, #0
 8009606:	bf0c      	ite	eq
 8009608:	2301      	moveq	r3, #1
 800960a:	2300      	movne	r3, #0
 800960c:	b2da      	uxtb	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800961a:	430b      	orrs	r3, r1
 800961c:	b219      	sxth	r1, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009624:	430b      	orrs	r3, r1
 8009626:	b21b      	sxth	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	bf0c      	ite	eq
 800962c:	2301      	moveq	r3, #1
 800962e:	2300      	movne	r3, #0
 8009630:	b2db      	uxtb	r3, r3
 8009632:	4313      	orrs	r3, r2
 8009634:	b2db      	uxtb	r3, r3
	if((!(obj->accelCount[0])&!(obj->accelCount[1])&!(obj->accelCount[2]))
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <MPU9250_callbackMPU9250IT+0x112>
		return 0;
 800963a:	2300      	movs	r3, #0
 800963c:	e09c      	b.n	8009778 <MPU9250_callbackMPU9250IT+0x24c>
//	Gx = (rawGx-baseGyX) / 131.0;
//	Gy = (rawGy-baseGyY) / 131.0;
//	Gz = (rawGz-baseGyZ) / 131.0;

	// Now we'll calculate the accleration value into actual g's
	obj->ax = ((float)obj->accelCount[0]*obj->aRes - obj->accelBias[0]);  // get actual g value, this depends on scale being set
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009644:	ee07 3a90 	vmov	s15, r3
 8009648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800965c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	obj->ay = ((float)obj->accelCount[1]*obj->aRes - obj->accelBias[1]);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800966c:	ee07 3a90 	vmov	s15, r3
 8009670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	edd3 7a02 	vldr	s15, [r3, #8]
 800967a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	obj->az = ((float)obj->accelCount[2]*obj->aRes - obj->accelBias[2]);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009694:	ee07 3a90 	vmov	s15, r3
 8009698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	edd3 7a02 	vldr	s15, [r3, #8]
 80096a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80096ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	obj->tmp = (float) ((int16_t) obj->tmpCount / (float) 340.0 + (float) 36.53);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80096bc:	ee07 3a90 	vmov	s15, r3
 80096c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096c4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009784 <MPU9250_callbackMPU9250IT+0x258>
 80096c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80096cc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8009788 <MPU9250_callbackMPU9250IT+0x25c>
 80096d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	// Calculate the gyro value into actual degrees per second
	obj->gx = MPU9250_DEG2RAD*((float)obj->gyroCount[0]*obj->gRes - obj->gyroBias[0]);  // get actual gyro value, this depends on scale being set
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80096e0:	ee07 3a90 	vmov	s15, r3
 80096e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80096ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80096f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096fc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800978c <MPU9250_callbackMPU9250IT+0x260>
 8009700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	obj->gy = MPU9250_DEG2RAD*((float)obj->gyroCount[1]*obj->gRes - obj->gyroBias[1]);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009710:	ee07 3a90 	vmov	s15, r3
 8009714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	edd3 7a03 	vldr	s15, [r3, #12]
 800971e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800972c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800978c <MPU9250_callbackMPU9250IT+0x260>
 8009730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	obj->gz = MPU9250_DEG2RAD*((float)obj->gyroCount[2]*obj->gRes - obj->gyroBias[2]);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009740:	ee07 3a90 	vmov	s15, r3
 8009744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	edd3 7a03 	vldr	s15, [r3, #12]
 800974e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800975c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800978c <MPU9250_callbackMPU9250IT+0x260>
 8009760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

	MPU9250_hzcnt++;
 800976a:	4b09      	ldr	r3, [pc, #36]	; (8009790 <MPU9250_callbackMPU9250IT+0x264>)
 800976c:	881b      	ldrh	r3, [r3, #0]
 800976e:	3301      	adds	r3, #1
 8009770:	b29a      	uxth	r2, r3
 8009772:	4b07      	ldr	r3, [pc, #28]	; (8009790 <MPU9250_callbackMPU9250IT+0x264>)
 8009774:	801a      	strh	r2, [r3, #0]
	return 1;
 8009776:	2301      	movs	r3, #1
}
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	43aa0000 	.word	0x43aa0000
 8009788:	42121eb8 	.word	0x42121eb8
 800978c:	3c8efa35 	.word	0x3c8efa35
 8009790:	20000304 	.word	0x20000304

08009794 <MPU9250_getMres>:

void MPU9250_getMres(struct MPU9250* obj) {
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
	switch (obj->Mscale)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	799b      	ldrb	r3, [r3, #6]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <MPU9250_getMres+0x16>
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d004      	beq.n	80097b2 <MPU9250_getMres+0x1e>
		  break;
	case MFS_16BITS:
		  obj->mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 80097a8:	e007      	b.n	80097ba <MPU9250_getMres+0x26>
		  obj->mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a06      	ldr	r2, [pc, #24]	; (80097c8 <MPU9250_getMres+0x34>)
 80097ae:	611a      	str	r2, [r3, #16]
		  break;
 80097b0:	e003      	b.n	80097ba <MPU9250_getMres+0x26>
		  obj->mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a05      	ldr	r2, [pc, #20]	; (80097cc <MPU9250_getMres+0x38>)
 80097b6:	611a      	str	r2, [r3, #16]
		  break;
 80097b8:	bf00      	nop
}
 80097ba:	bf00      	nop
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	40bfebff 	.word	0x40bfebff
 80097cc:	3fbfebff 	.word	0x3fbfebff

080097d0 <MPU9250_getGres>:

void MPU9250_getGres(struct MPU9250* obj) {
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  switch (obj->Gscale)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	795b      	ldrb	r3, [r3, #5]
 80097dc:	2b03      	cmp	r3, #3
 80097de:	d81b      	bhi.n	8009818 <MPU9250_getGres+0x48>
 80097e0:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <MPU9250_getGres+0x18>)
 80097e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e6:	bf00      	nop
 80097e8:	080097f9 	.word	0x080097f9
 80097ec:	08009801 	.word	0x08009801
 80097f0:	08009809 	.word	0x08009809
 80097f4:	08009811 	.word	0x08009811
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
    	  obj->gRes = 250.0/32768.0;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a0a      	ldr	r2, [pc, #40]	; (8009824 <MPU9250_getGres+0x54>)
 80097fc:	60da      	str	r2, [r3, #12]
          break;
 80097fe:	e00b      	b.n	8009818 <MPU9250_getGres+0x48>
    case GFS_500DPS:
    	  obj->gRes = 500.0/32768.0;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a09      	ldr	r2, [pc, #36]	; (8009828 <MPU9250_getGres+0x58>)
 8009804:	60da      	str	r2, [r3, #12]
          break;
 8009806:	e007      	b.n	8009818 <MPU9250_getGres+0x48>
    case GFS_1000DPS:
    	  obj->gRes = 1000.0/32768.0;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a08      	ldr	r2, [pc, #32]	; (800982c <MPU9250_getGres+0x5c>)
 800980c:	60da      	str	r2, [r3, #12]
          break;
 800980e:	e003      	b.n	8009818 <MPU9250_getGres+0x48>
    case GFS_2000DPS:
    	  obj->gRes = 2000.0/32768.0;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a07      	ldr	r2, [pc, #28]	; (8009830 <MPU9250_getGres+0x60>)
 8009814:	60da      	str	r2, [r3, #12]
          break;
 8009816:	bf00      	nop
  }
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	3bfa0000 	.word	0x3bfa0000
 8009828:	3c7a0000 	.word	0x3c7a0000
 800982c:	3cfa0000 	.word	0x3cfa0000
 8009830:	3d7a0000 	.word	0x3d7a0000

08009834 <MPU9250_getAres>:


void MPU9250_getAres(struct MPU9250* obj) {
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  switch (obj->Ascale)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	791b      	ldrb	r3, [r3, #4]
 8009840:	2b03      	cmp	r3, #3
 8009842:	d81f      	bhi.n	8009884 <MPU9250_getAres+0x50>
 8009844:	a201      	add	r2, pc, #4	; (adr r2, 800984c <MPU9250_getAres+0x18>)
 8009846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984a:	bf00      	nop
 800984c:	0800985d 	.word	0x0800985d
 8009850:	08009867 	.word	0x08009867
 8009854:	08009871 	.word	0x08009871
 8009858:	0800987b 	.word	0x0800987b
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	  obj->aRes = 2.0/32768.0;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8009862:	609a      	str	r2, [r3, #8]
          break;
 8009864:	e00e      	b.n	8009884 <MPU9250_getAres+0x50>
    case AFS_4G:
    	  obj->aRes = 4.0/32768.0;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800986c:	609a      	str	r2, [r3, #8]
          break;
 800986e:	e009      	b.n	8009884 <MPU9250_getAres+0x50>
    case AFS_8G:
    	  obj->aRes = 8.0/32768.0;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8009876:	609a      	str	r2, [r3, #8]
          break;
 8009878:	e004      	b.n	8009884 <MPU9250_getAres+0x50>
    case AFS_16G:
    	  obj->aRes = 16.0/32768.0;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8009880:	609a      	str	r2, [r3, #8]
          break;
 8009882:	bf00      	nop
  }
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <MPU9250_resetMPU9250>:
  obj->tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return obj->tmpCount;
}


void MPU9250_resetMPU9250(struct MPU9250* obj) {
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
    // reset device
    MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8009898:	2380      	movs	r3, #128	; 0x80
 800989a:	226b      	movs	r2, #107	; 0x6b
 800989c:	21d0      	movs	r1, #208	; 0xd0
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7ff fdd6 	bl	8009450 <MPU9250_writeByte>
    HAL_Delay(10);
 80098a4:	200a      	movs	r0, #10
 80098a6:	f7f8 fe3d 	bl	8002524 <HAL_Delay>
}
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <MPU9250_initAK8963>:

void MPU9250_initAK8963(struct MPU9250* obj)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 80098bc:	2300      	movs	r3, #0
 80098be:	220a      	movs	r2, #10
 80098c0:	2118      	movs	r1, #24
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7ff fdc4 	bl	8009450 <MPU9250_writeByte>
	HAL_Delay(10);
 80098c8:	200a      	movs	r0, #10
 80098ca:	f7f8 fe2b 	bl	8002524 <HAL_Delay>
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 80098ce:	230f      	movs	r3, #15
 80098d0:	220a      	movs	r2, #10
 80098d2:	2118      	movs	r1, #24
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7ff fdbb 	bl	8009450 <MPU9250_writeByte>
	HAL_Delay(10);
 80098da:	200a      	movs	r0, #10
 80098dc:	f7f8 fe22 	bl	8002524 <HAL_Delay>
	MPU9250_readBytes(obj, AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 80098e0:	f107 030c 	add.w	r3, r7, #12
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	2303      	movs	r3, #3
 80098e8:	2210      	movs	r2, #16
 80098ea:	2118      	movs	r1, #24
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7ff fdd1 	bl	8009494 <MPU9250_readBytes>
	obj->magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 80098f2:	7b3b      	ldrb	r3, [r7, #12]
 80098f4:	3b80      	subs	r3, #128	; 0x80
 80098f6:	ee07 3a90 	vmov	s15, r3
 80098fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098fe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009998 <MPU9250_initAK8963+0xe4>
 8009902:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800990a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	obj->magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8009914:	7b7b      	ldrb	r3, [r7, #13]
 8009916:	3b80      	subs	r3, #128	; 0x80
 8009918:	ee07 3a90 	vmov	s15, r3
 800991c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009920:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8009998 <MPU9250_initAK8963+0xe4>
 8009924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800992c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	obj->magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8009936:	7bbb      	ldrb	r3, [r7, #14]
 8009938:	3b80      	subs	r3, #128	; 0x80
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009942:	eddf 6a15 	vldr	s13, [pc, #84]	; 8009998 <MPU9250_initAK8963+0xe4>
 8009946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800994a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800994e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8009958:	2300      	movs	r3, #0
 800995a:	220a      	movs	r2, #10
 800995c:	2118      	movs	r1, #24
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7ff fd76 	bl	8009450 <MPU9250_writeByte>
	HAL_Delay(10);
 8009964:	200a      	movs	r0, #10
 8009966:	f7f8 fddd 	bl	8002524 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, obj->Mscale << 4 | obj->Mmode); // Set magnetometer data resolution and sample ODR
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	799b      	ldrb	r3, [r3, #6]
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	b25a      	sxtb	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	79db      	ldrb	r3, [r3, #7]
 8009976:	b25b      	sxtb	r3, r3
 8009978:	4313      	orrs	r3, r2
 800997a:	b25b      	sxtb	r3, r3
 800997c:	b2db      	uxtb	r3, r3
 800997e:	220a      	movs	r2, #10
 8009980:	2118      	movs	r1, #24
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7ff fd64 	bl	8009450 <MPU9250_writeByte>
	HAL_Delay(10);
 8009988:	200a      	movs	r0, #10
 800998a:	f7f8 fdcb 	bl	8002524 <HAL_Delay>
}
 800998e:	bf00      	nop
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	43800000 	.word	0x43800000

0800999c <MPU9250_initMPU9250>:


void MPU9250_initMPU9250(struct MPU9250* obj)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80099a4:	2300      	movs	r3, #0
 80099a6:	226b      	movs	r2, #107	; 0x6b
 80099a8:	21d0      	movs	r1, #208	; 0xd0
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff fd50 	bl	8009450 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80099b0:	2064      	movs	r0, #100	; 0x64
 80099b2:	f7f8 fdb7 	bl	8002524 <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80099b6:	2301      	movs	r3, #1
 80099b8:	226b      	movs	r2, #107	; 0x6b
 80099ba:	21d0      	movs	r1, #208	; 0xd0
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff fd47 	bl	8009450 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(obj, MPU9250_ADDRESS, CONFIG, 0x03);
 80099c2:	2303      	movs	r3, #3
 80099c4:	221a      	movs	r2, #26
 80099c6:	21d0      	movs	r1, #208	; 0xd0
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7ff fd41 	bl	8009450 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(obj, MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 80099ce:	2304      	movs	r3, #4
 80099d0:	2219      	movs	r2, #25
 80099d2:	21d0      	movs	r1, #208	; 0xd0
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7ff fd3b 	bl	8009450 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(obj, MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 80099da:	221b      	movs	r2, #27
 80099dc:	21d0      	movs	r1, #208	; 0xd0
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7ff fd7a 	bl	80094d8 <MPU9250_readByte>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73fb      	strb	r3, [r7, #15]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	f023 0302 	bic.w	r3, r3, #2
 80099ee:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x18; // Clear AFS bits [4:3]
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	f023 0318 	bic.w	r3, r3, #24
 80099f6:	73fb      	strb	r3, [r7, #15]
  c = c | obj->Gscale << 3; // Set full scale range for the gyro
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	795b      	ldrb	r3, [r3, #5]
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	b25a      	sxtb	r2, r3
 8009a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	b25b      	sxtb	r3, r3
 8009a08:	73fb      	strb	r3, [r7, #15]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  MPU9250_writeByte(obj, MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
 8009a0c:	221b      	movs	r2, #27
 8009a0e:	21d0      	movs	r1, #208	; 0xd0
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7ff fd1d 	bl	8009450 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8009a16:	221c      	movs	r2, #28
 8009a18:	21d0      	movs	r1, #208	; 0xd0
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff fd5c 	bl	80094d8 <MPU9250_readByte>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
 8009a26:	f023 0318 	bic.w	r3, r3, #24
 8009a2a:	73fb      	strb	r3, [r7, #15]
  c = c | obj->Ascale << 3; // Set full scale range for the accelerometer
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	791b      	ldrb	r3, [r3, #4]
 8009a30:	00db      	lsls	r3, r3, #3
 8009a32:	b25a      	sxtb	r2, r3
 8009a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	b25b      	sxtb	r3, r3
 8009a3c:	73fb      	strb	r3, [r7, #15]
  MPU9250_writeByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	221c      	movs	r2, #28
 8009a42:	21d0      	movs	r1, #208	; 0xd0
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff fd03 	bl	8009450 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8009a4a:	221d      	movs	r2, #29
 8009a4c:	21d0      	movs	r1, #208	; 0xd0
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7ff fd42 	bl	80094d8 <MPU9250_readByte>
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	f023 030f 	bic.w	r3, r3, #15
 8009a5e:	73fb      	strb	r3, [r7, #15]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	f043 0303 	orr.w	r3, r3, #3
 8009a66:	73fb      	strb	r3, [r7, #15]
  MPU9250_writeByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	221d      	movs	r2, #29
 8009a6c:	21d0      	movs	r1, #208	; 0xd0
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7ff fcee 	bl	8009450 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(obj, MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8009a74:	2322      	movs	r3, #34	; 0x22
 8009a76:	2237      	movs	r2, #55	; 0x37
 8009a78:	21d0      	movs	r1, #208	; 0xd0
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff fce8 	bl	8009450 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8009a80:	2301      	movs	r3, #1
 8009a82:	2238      	movs	r2, #56	; 0x38
 8009a84:	21d0      	movs	r1, #208	; 0xd0
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff fce2 	bl	8009450 <MPU9250_writeByte>
}
 8009a8c:	bf00      	nop
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250(struct MPU9250* obj)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b09a      	sub	sp, #104	; 0x68
 8009a98:	af02      	add	r7, sp, #8
 8009a9a:	6078      	str	r0, [r7, #4]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8009aac:	2300      	movs	r3, #0
 8009aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	633b      	str	r3, [r7, #48]	; 0x30

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8009ab4:	2380      	movs	r3, #128	; 0x80
 8009ab6:	226b      	movs	r2, #107	; 0x6b
 8009ab8:	21d0      	movs	r1, #208	; 0xd0
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7ff fcc8 	bl	8009450 <MPU9250_writeByte>
  HAL_Delay(100);
 8009ac0:	2064      	movs	r0, #100	; 0x64
 8009ac2:	f7f8 fd2f 	bl	8002524 <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	226b      	movs	r2, #107	; 0x6b
 8009aca:	21d0      	movs	r1, #208	; 0xd0
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff fcbf 	bl	8009450 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	226c      	movs	r2, #108	; 0x6c
 8009ad6:	21d0      	movs	r1, #208	; 0xd0
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff fcb9 	bl	8009450 <MPU9250_writeByte>
  HAL_Delay(200);
 8009ade:	20c8      	movs	r0, #200	; 0xc8
 8009ae0:	f7f8 fd20 	bl	8002524 <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(obj, MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	2238      	movs	r2, #56	; 0x38
 8009ae8:	21d0      	movs	r1, #208	; 0xd0
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff fcb0 	bl	8009450 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8009af0:	2300      	movs	r3, #0
 8009af2:	2223      	movs	r2, #35	; 0x23
 8009af4:	21d0      	movs	r1, #208	; 0xd0
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff fcaa 	bl	8009450 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8009afc:	2300      	movs	r3, #0
 8009afe:	226b      	movs	r2, #107	; 0x6b
 8009b00:	21d0      	movs	r1, #208	; 0xd0
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7ff fca4 	bl	8009450 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8009b08:	2300      	movs	r3, #0
 8009b0a:	2224      	movs	r2, #36	; 0x24
 8009b0c:	21d0      	movs	r1, #208	; 0xd0
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff fc9e 	bl	8009450 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8009b14:	2300      	movs	r3, #0
 8009b16:	226a      	movs	r2, #106	; 0x6a
 8009b18:	21d0      	movs	r1, #208	; 0xd0
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff fc98 	bl	8009450 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8009b20:	230c      	movs	r3, #12
 8009b22:	226a      	movs	r2, #106	; 0x6a
 8009b24:	21d0      	movs	r1, #208	; 0xd0
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7ff fc92 	bl	8009450 <MPU9250_writeByte>
  HAL_Delay(15);
 8009b2c:	200f      	movs	r0, #15
 8009b2e:	f7f8 fcf9 	bl	8002524 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(obj, MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8009b32:	2301      	movs	r3, #1
 8009b34:	221a      	movs	r2, #26
 8009b36:	21d0      	movs	r1, #208	; 0xd0
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff fc89 	bl	8009450 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8009b3e:	2300      	movs	r3, #0
 8009b40:	2219      	movs	r2, #25
 8009b42:	21d0      	movs	r1, #208	; 0xd0
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7ff fc83 	bl	8009450 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	221b      	movs	r2, #27
 8009b4e:	21d0      	movs	r1, #208	; 0xd0
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff fc7d 	bl	8009450 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8009b56:	2300      	movs	r3, #0
 8009b58:	221c      	movs	r2, #28
 8009b5a:	21d0      	movs	r1, #208	; 0xd0
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff fc77 	bl	8009450 <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(obj, MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8009b62:	2340      	movs	r3, #64	; 0x40
 8009b64:	226a      	movs	r2, #106	; 0x6a
 8009b66:	21d0      	movs	r1, #208	; 0xd0
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff fc71 	bl	8009450 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8009b6e:	2378      	movs	r3, #120	; 0x78
 8009b70:	2223      	movs	r2, #35	; 0x23
 8009b72:	21d0      	movs	r1, #208	; 0xd0
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff fc6b 	bl	8009450 <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8009b7a:	2028      	movs	r0, #40	; 0x28
 8009b7c:	f7f8 fcd2 	bl	8002524 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(obj, MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8009b80:	2300      	movs	r3, #0
 8009b82:	2223      	movs	r2, #35	; 0x23
 8009b84:	21d0      	movs	r1, #208	; 0xd0
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff fc62 	bl	8009450 <MPU9250_writeByte>
  MPU9250_readBytes(obj, MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8009b8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	2302      	movs	r3, #2
 8009b94:	2272      	movs	r2, #114	; 0x72
 8009b96:	21d0      	movs	r1, #208	; 0xd0
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff fc7b 	bl	8009494 <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8009b9e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009ba2:	021b      	lsls	r3, r3, #8
 8009ba4:	b21a      	sxth	r2, r3
 8009ba6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009baa:	b21b      	sxth	r3, r3
 8009bac:	4313      	orrs	r3, r2
 8009bae:	b21b      	sxth	r3, r3
 8009bb0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8009bb4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009bb8:	4aba      	ldr	r2, [pc, #744]	; (8009ea4 <MPU9250_calibrateMPU9250+0x410>)
 8009bba:	fba2 2303 	umull	r2, r3, r2, r3
 8009bbe:	08db      	lsrs	r3, r3, #3
 8009bc0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

  for (ii = 0; ii < packet_count; ii++) {
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009bca:	e073      	b.n	8009cb4 <MPU9250_calibrateMPU9250+0x220>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8009bcc:	2300      	movs	r3, #0
 8009bce:	823b      	strh	r3, [r7, #16]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	827b      	strh	r3, [r7, #18]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	82bb      	strh	r3, [r7, #20]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	813b      	strh	r3, [r7, #8]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	817b      	strh	r3, [r7, #10]
 8009be0:	2300      	movs	r3, #0
 8009be2:	81bb      	strh	r3, [r7, #12]
    MPU9250_readBytes(obj, MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 8009be4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	230c      	movs	r3, #12
 8009bec:	2274      	movs	r2, #116	; 0x74
 8009bee:	21d0      	movs	r1, #208	; 0xd0
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7ff fc4f 	bl	8009494 <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8009bf6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009bfa:	021b      	lsls	r3, r3, #8
 8009bfc:	b21a      	sxth	r2, r3
 8009bfe:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009c02:	b21b      	sxth	r3, r3
 8009c04:	4313      	orrs	r3, r2
 8009c06:	b21b      	sxth	r3, r3
 8009c08:	823b      	strh	r3, [r7, #16]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8009c0a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009c0e:	021b      	lsls	r3, r3, #8
 8009c10:	b21a      	sxth	r2, r3
 8009c12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c16:	b21b      	sxth	r3, r3
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	b21b      	sxth	r3, r3
 8009c1c:	827b      	strh	r3, [r7, #18]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8009c1e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009c22:	021b      	lsls	r3, r3, #8
 8009c24:	b21a      	sxth	r2, r3
 8009c26:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009c2a:	b21b      	sxth	r3, r3
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	b21b      	sxth	r3, r3
 8009c30:	82bb      	strh	r3, [r7, #20]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8009c32:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	b21a      	sxth	r2, r3
 8009c3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009c3e:	b21b      	sxth	r3, r3
 8009c40:	4313      	orrs	r3, r2
 8009c42:	b21b      	sxth	r3, r3
 8009c44:	813b      	strh	r3, [r7, #8]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8009c46:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8009c4a:	021b      	lsls	r3, r3, #8
 8009c4c:	b21a      	sxth	r2, r3
 8009c4e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8009c52:	b21b      	sxth	r3, r3
 8009c54:	4313      	orrs	r3, r2
 8009c56:	b21b      	sxth	r3, r3
 8009c58:	817b      	strh	r3, [r7, #10]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8009c5a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8009c5e:	021b      	lsls	r3, r3, #8
 8009c60:	b21a      	sxth	r2, r3
 8009c62:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009c66:	b21b      	sxth	r3, r3
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	b21b      	sxth	r3, r3
 8009c6c:	81bb      	strh	r3, [r7, #12]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009c74:	4413      	add	r3, r2
 8009c76:	62bb      	str	r3, [r7, #40]	; 0x28
    accel_bias[1] += (int32_t) accel_temp[1];
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009c7e:	4413      	add	r3, r2
 8009c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[2] += (int32_t) accel_temp[2];
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8009c88:	4413      	add	r3, r2
 8009c8a:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8009c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009c92:	4413      	add	r3, r2
 8009c94:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8009c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c98:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8009ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  for (ii = 0; ii < packet_count; ii++) {
 8009caa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009cae:	3301      	adds	r3, #1
 8009cb0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009cb4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009cb8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d385      	bcc.n	8009bcc <MPU9250_calibrateMPU9250+0x138>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8009cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cc2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009cc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8009cca:	62bb      	str	r3, [r7, #40]	; 0x28
    accel_bias[1] /= (int32_t) packet_count;
 8009ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009cd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8009cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[2] /= (int32_t) packet_count;
 8009cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cda:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009cde:	fb92 f3f3 	sdiv	r3, r2, r3
 8009ce2:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[0]  /= (int32_t) packet_count;
 8009ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ce6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009cea:	fb92 f3f3 	sdiv	r3, r2, r3
 8009cee:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[1]  /= (int32_t) packet_count;
 8009cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cf2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009cf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8009cfa:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[2]  /= (int32_t) packet_count;
 8009cfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009cfe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009d02:	fb92 f3f3 	sdiv	r3, r2, r3
 8009d06:	63fb      	str	r3, [r7, #60]	; 0x3c
    float accelsensitivity = 1/obj->aRes;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8009d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d16:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float gyrosensitivity = 1/obj->gRes;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8009d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d28:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	dd09      	ble.n	8009d46 <MPU9250_calibrateMPU9250+0x2b2>
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d3c:	ee17 2a90 	vmov	r2, s15
 8009d40:	1a9b      	subs	r3, r3, r2
 8009d42:	633b      	str	r3, [r7, #48]	; 0x30
 8009d44:	e008      	b.n	8009d58 <MPU9250_calibrateMPU9250+0x2c4>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8009d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d48:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d50:	ee17 2a90 	vmov	r2, s15
 8009d54:	4413      	add	r3, r2
 8009d56:	633b      	str	r3, [r7, #48]	; 0x30

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8009d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5a:	425b      	negs	r3, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	da00      	bge.n	8009d62 <MPU9250_calibrateMPU9250+0x2ce>
 8009d60:	3303      	adds	r3, #3
 8009d62:	109b      	asrs	r3, r3, #2
 8009d64:	121b      	asrs	r3, r3, #8
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8009d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6e:	425b      	negs	r3, r3
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	da00      	bge.n	8009d76 <MPU9250_calibrateMPU9250+0x2e2>
 8009d74:	3303      	adds	r3, #3
 8009d76:	109b      	asrs	r3, r3, #2
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d80:	425b      	negs	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	da00      	bge.n	8009d88 <MPU9250_calibrateMPU9250+0x2f4>
 8009d86:	3303      	adds	r3, #3
 8009d88:	109b      	asrs	r3, r3, #2
 8009d8a:	121b      	asrs	r3, r3, #8
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8009d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d94:	425b      	negs	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	da00      	bge.n	8009d9c <MPU9250_calibrateMPU9250+0x308>
 8009d9a:	3303      	adds	r3, #3
 8009d9c:	109b      	asrs	r3, r3, #2
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8009da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da6:	425b      	negs	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	da00      	bge.n	8009dae <MPU9250_calibrateMPU9250+0x31a>
 8009dac:	3303      	adds	r3, #3
 8009dae:	109b      	asrs	r3, r3, #2
 8009db0:	121b      	asrs	r3, r3, #8
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8009db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dba:	425b      	negs	r3, r3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	da00      	bge.n	8009dc2 <MPU9250_calibrateMPU9250+0x32e>
 8009dc0:	3303      	adds	r3, #3
 8009dc2:	109b      	asrs	r3, r3, #2
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
  writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
*/
  obj->gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8009dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dcc:	ee07 3a90 	vmov	s15, r3
 8009dd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009dd4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  obj->gyroBias[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8009de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de4:	ee07 3a90 	vmov	s15, r3
 8009de8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009dec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  obj->gyroBias[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8009dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfc:	ee07 3a90 	vmov	s15, r3
 8009e00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009e04:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8009e12:	2300      	movs	r3, #0
 8009e14:	61fb      	str	r3, [r7, #28]
 8009e16:	2300      	movs	r3, #0
 8009e18:	623b      	str	r3, [r7, #32]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24
  MPU9250_readBytes(obj, MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8009e1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	2302      	movs	r3, #2
 8009e26:	2277      	movs	r2, #119	; 0x77
 8009e28:	21d0      	movs	r1, #208	; 0xd0
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff fb32 	bl	8009494 <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8009e30:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009e34:	021b      	lsls	r3, r3, #8
 8009e36:	b21b      	sxth	r3, r3
 8009e38:	461a      	mov	r2, r3
 8009e3a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(obj, MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 8009e42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	2302      	movs	r3, #2
 8009e4a:	227a      	movs	r2, #122	; 0x7a
 8009e4c:	21d0      	movs	r1, #208	; 0xd0
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff fb20 	bl	8009494 <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8009e54:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009e58:	021b      	lsls	r3, r3, #8
 8009e5a:	b21b      	sxth	r3, r3
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009e62:	4313      	orrs	r3, r2
 8009e64:	623b      	str	r3, [r7, #32]
  MPU9250_readBytes(obj, MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 8009e66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	227d      	movs	r2, #125	; 0x7d
 8009e70:	21d0      	movs	r1, #208	; 0xd0
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7ff fb0e 	bl	8009494 <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8009e78:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	b21b      	sxth	r3, r3
 8009e80:	461a      	mov	r2, r3
 8009e82:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009e86:	4313      	orrs	r3, r2
 8009e88:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8009e8e:	2300      	movs	r3, #0
 8009e90:	763b      	strb	r3, [r7, #24]
 8009e92:	2300      	movs	r3, #0
 8009e94:	767b      	strb	r3, [r7, #25]
 8009e96:	2300      	movs	r3, #0
 8009e98:	76bb      	strb	r3, [r7, #26]

  for(ii = 0; ii < 3; ii++) {
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009ea0:	e01c      	b.n	8009edc <MPU9250_calibrateMPU9250+0x448>
 8009ea2:	bf00      	nop
 8009ea4:	aaaaaaab 	.word	0xaaaaaaab
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8009ea8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d007      	beq.n	8009ed2 <MPU9250_calibrateMPU9250+0x43e>
 8009ec2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009ec6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009eca:	4413      	add	r3, r2
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f803 2c48 	strb.w	r2, [r3, #-72]
  for(ii = 0; ii < 3; ii++) {
 8009ed2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009edc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d9e1      	bls.n	8009ea8 <MPU9250_calibrateMPU9250+0x414>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8009ee4:	69fa      	ldr	r2, [r7, #28]
 8009ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	da00      	bge.n	8009eee <MPU9250_calibrateMPU9250+0x45a>
 8009eec:	3307      	adds	r3, #7
 8009eee:	10db      	asrs	r3, r3, #3
 8009ef0:	425b      	negs	r3, r3
 8009ef2:	4413      	add	r3, r2
 8009ef4:	61fb      	str	r3, [r7, #28]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8009ef6:	6a3a      	ldr	r2, [r7, #32]
 8009ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	da00      	bge.n	8009f00 <MPU9250_calibrateMPU9250+0x46c>
 8009efe:	3307      	adds	r3, #7
 8009f00:	10db      	asrs	r3, r3, #3
 8009f02:	425b      	negs	r3, r3
 8009f04:	4413      	add	r3, r2
 8009f06:	623b      	str	r3, [r7, #32]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8009f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	da00      	bge.n	8009f12 <MPU9250_calibrateMPU9250+0x47e>
 8009f10:	3307      	adds	r3, #7
 8009f12:	10db      	asrs	r3, r3, #3
 8009f14:	425b      	negs	r3, r3
 8009f16:	4413      	add	r3, r2
 8009f18:	627b      	str	r3, [r7, #36]	; 0x24

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	121b      	asrs	r3, r3, #8
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8009f2c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8009f30:	7e3b      	ldrb	r3, [r7, #24]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	121b      	asrs	r3, r3, #8
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8009f4c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009f50:	7e7b      	ldrb	r3, [r7, #25]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	121b      	asrs	r3, r3, #8
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8009f6c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f70:	7ebb      	ldrb	r3, [r7, #26]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
  writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
  writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
*/
// Output scaled accelerometer biases for manual subtraction in the main program
    obj->accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	ee07 3a90 	vmov	s15, r3
 8009f80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009f84:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    obj->accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8009f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f94:	ee07 3a90 	vmov	s15, r3
 8009f98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009f9c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    obj->accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	ee07 3a90 	vmov	s15, r3
 8009fb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009fb4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8009fc2:	bf00      	nop
 8009fc4:	3760      	adds	r7, #96	; 0x60
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop

08009fcc <sensorHz_update>:
struct bootState iBootState;


// hz check
uint16_t imu_hz, mag_hz, sbus_hz, gps_hz, estimator_hz;
void sensorHz_update(){
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	af00      	add	r7, sp, #0
	imu_hz = MPU9250_getHz();
 8009fd0:	f7ff f9e6 	bl	80093a0 <MPU9250_getHz>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	4b08      	ldr	r3, [pc, #32]	; (8009ffc <sensorHz_update+0x30>)
 8009fda:	801a      	strh	r2, [r3, #0]
	estimator_hz = estimate_getHz(&iEstimate);
 8009fdc:	4808      	ldr	r0, [pc, #32]	; (800a000 <sensorHz_update+0x34>)
 8009fde:	f000 f815 	bl	800a00c <estimate_getHz>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	4b07      	ldr	r3, [pc, #28]	; (800a004 <sensorHz_update+0x38>)
 8009fe8:	801a      	strh	r2, [r3, #0]
	sbus_hz = sbus_getHz();
 8009fea:	f000 fe29 	bl	800ac40 <sbus_getHz>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	4b05      	ldr	r3, [pc, #20]	; (800a008 <sensorHz_update+0x3c>)
 8009ff4:	801a      	strh	r2, [r3, #0]
}
 8009ff6:	bf00      	nop
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20000b14 	.word	0x20000b14
 800a000:	2000000c 	.word	0x2000000c
 800a004:	20000b1e 	.word	0x20000b1e
 800a008:	20000b16 	.word	0x20000b16

0800a00c <estimate_getHz>:
#include "estimate.h"
#include "algorithmCollection.h"

struct estimate iEstimate = {{1, 0, 0, 0}, 0, 0, 0, 0, 0, 0};

uint16_t estimate_getHz(struct estimate* e){ // call this func 1hz
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
	uint16_t temp = e->estimate_hzcnt;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a018:	81fb      	strh	r3, [r7, #14]
	e->estimate_hzcnt = 0;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	869a      	strh	r2, [r3, #52]	; 0x34
	return temp;
 800a020:	89fb      	ldrh	r3, [r7, #14]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
	...

0800a030 <estimate_update>:
//---------------------------------------------------------------------------------------------------
// Variable definitions

volatile float beta = betaDef;

void estimate_update(struct estimate* e, struct MPU9250* mpu9250){
 800a030:	b590      	push	{r4, r7, lr}
 800a032:	ed2d 8b06 	vpush	{d8-d10}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
	static struct junTimer timer;
	if(!timer.start){
 800a03e:	4b3b      	ldr	r3, [pc, #236]	; (800a12c <estimate_update+0xfc>)
 800a040:	791b      	ldrb	r3, [r3, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d103      	bne.n	800a04e <estimate_update+0x1e>
		junTimer_tic(&timer);
 800a046:	4839      	ldr	r0, [pc, #228]	; (800a12c <estimate_update+0xfc>)
 800a048:	f7f7 f8bd 	bl	80011c6 <junTimer_tic>
 800a04c:	e068      	b.n	800a120 <estimate_update+0xf0>
		return;
	}

	MadgwickAHRSupdateIMU(e, mpu9250->gx, mpu9250->gy, mpu9250->gz
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	ed93 8a16 	vldr	s16, [r3, #88]	; 0x58
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	edd3 8a17 	vldr	s17, [r3, #92]	; 0x5c
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	ed93 9a18 	vldr	s18, [r3, #96]	; 0x60
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	edd3 9a13 	vldr	s19, [r3, #76]	; 0x4c
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	ed93 aa14 	vldr	s20, [r3, #80]	; 0x50
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	edd3 aa15 	vldr	s21, [r3, #84]	; 0x54
						, mpu9250->ax, mpu9250->ay, mpu9250->az, junTimer_toc(&timer)/1000.0);
 800a072:	482e      	ldr	r0, [pc, #184]	; (800a12c <estimate_update+0xfc>)
 800a074:	f7f7 f8b7 	bl	80011e6 <junTimer_toc>
 800a078:	4603      	mov	r3, r0
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7f6 fa52 	bl	8000524 <__aeabi_ui2d>
 800a080:	f04f 0200 	mov.w	r2, #0
 800a084:	4b2a      	ldr	r3, [pc, #168]	; (800a130 <estimate_update+0x100>)
 800a086:	f7f6 fbf1 	bl	800086c <__aeabi_ddiv>
 800a08a:	4603      	mov	r3, r0
 800a08c:	460c      	mov	r4, r1
	MadgwickAHRSupdateIMU(e, mpu9250->gx, mpu9250->gy, mpu9250->gz
 800a08e:	4618      	mov	r0, r3
 800a090:	4621      	mov	r1, r4
 800a092:	f7f6 fd99 	bl	8000bc8 <__aeabi_d2f>
 800a096:	4603      	mov	r3, r0
 800a098:	ee03 3a10 	vmov	s6, r3
 800a09c:	eef0 2a6a 	vmov.f32	s5, s21
 800a0a0:	eeb0 2a4a 	vmov.f32	s4, s20
 800a0a4:	eef0 1a69 	vmov.f32	s3, s19
 800a0a8:	eeb0 1a49 	vmov.f32	s2, s18
 800a0ac:	eef0 0a68 	vmov.f32	s1, s17
 800a0b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f8a5 	bl	800a204 <MadgwickAHRSupdateIMU>

	float roll, pitch, yaw;
	quat2eul(e->bodyQ, &roll, &pitch, &yaw);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f107 030c 	add.w	r3, r7, #12
 800a0c0:	f107 0210 	add.w	r2, r7, #16
 800a0c4:	f107 0114 	add.w	r1, r7, #20
 800a0c8:	f7f6 ff8a 	bl	8000fe0 <quat2eul>
	e->roll = roll;//rpy vector
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	611a      	str	r2, [r3, #16]
	e->pitch = pitch;
 800a0d2:	693a      	ldr	r2, [r7, #16]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	615a      	str	r2, [r3, #20]
	e->yaw = yaw;
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	619a      	str	r2, [r3, #24]

	e->p = mpu9250->gx;
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	61da      	str	r2, [r3, #28]
	e->q = mpu9250->gy;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	621a      	str	r2, [r3, #32]
	e->r = mpu9250->gz;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	625a      	str	r2, [r3, #36]	; 0x24
	e->ax= mpu9250->ax;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	629a      	str	r2, [r3, #40]	; 0x28
	e->ay= mpu9250->ay;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	62da      	str	r2, [r3, #44]	; 0x2c
	e->az= mpu9250->az;
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	631a      	str	r2, [r3, #48]	; 0x30


	e->estimate_hzcnt++;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a112:	3301      	adds	r3, #1
 800a114:	b29a      	uxth	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	869a      	strh	r2, [r3, #52]	; 0x34
	junTimer_tic(&timer);
 800a11a:	4804      	ldr	r0, [pc, #16]	; (800a12c <estimate_update+0xfc>)
 800a11c:	f7f7 f853 	bl	80011c6 <junTimer_tic>
}
 800a120:	371c      	adds	r7, #28
 800a122:	46bd      	mov	sp, r7
 800a124:	ecbd 8b06 	vpop	{d8-d10}
 800a128:	bd90      	pop	{r4, r7, pc}
 800a12a:	bf00      	nop
 800a12c:	200003a0 	.word	0x200003a0
 800a130:	408f4000 	.word	0x408f4000

0800a134 <estimate_print>:

void estimate_print(struct estimate* e){
 800a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a138:	b09d      	sub	sp, #116	; 0x74
 800a13a:	af10      	add	r7, sp, #64	; 0x40
 800a13c:	62f8      	str	r0, [r7, #44]	; 0x2c
	printf("%f %f %f %f %f %f %f %f %f\r\n", e->roll, e->pitch, e->yaw, e->p,e->q,e->r,e->ax,e->ay,e->az);
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	4618      	mov	r0, r3
 800a144:	f7f6 fa10 	bl	8000568 <__aeabi_f2d>
 800a148:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800a14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	4618      	mov	r0, r3
 800a152:	f7f6 fa09 	bl	8000568 <__aeabi_f2d>
 800a156:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	4618      	mov	r0, r3
 800a160:	f7f6 fa02 	bl	8000568 <__aeabi_f2d>
 800a164:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800a168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7f6 f9fb 	bl	8000568 <__aeabi_f2d>
 800a172:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7f6 f9f4 	bl	8000568 <__aeabi_f2d>
 800a180:	e9c7 0100 	strd	r0, r1, [r7]
 800a184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a188:	4618      	mov	r0, r3
 800a18a:	f7f6 f9ed 	bl	8000568 <__aeabi_f2d>
 800a18e:	4682      	mov	sl, r0
 800a190:	468b      	mov	fp, r1
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a196:	4618      	mov	r0, r3
 800a198:	f7f6 f9e6 	bl	8000568 <__aeabi_f2d>
 800a19c:	4680      	mov	r8, r0
 800a19e:	4689      	mov	r9, r1
 800a1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7f6 f9df 	bl	8000568 <__aeabi_f2d>
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	460e      	mov	r6, r1
 800a1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7f6 f9d8 	bl	8000568 <__aeabi_f2d>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 800a1c0:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
 800a1c4:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800a1c8:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a1cc:	ed97 7b00 	vldr	d7, [r7]
 800a1d0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a1d4:	ed97 7b02 	vldr	d7, [r7, #8]
 800a1d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a1dc:	ed97 7b04 	vldr	d7, [r7, #16]
 800a1e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1e4:	ed97 7b06 	vldr	d7, [r7, #24]
 800a1e8:	ed8d 7b00 	vstr	d7, [sp]
 800a1ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a1f0:	4803      	ldr	r0, [pc, #12]	; (800a200 <estimate_print+0xcc>)
 800a1f2:	f003 fa5b 	bl	800d6ac <iprintf>
}
 800a1f6:	bf00      	nop
 800a1f8:	3734      	adds	r7, #52	; 0x34
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a200:	0800f508 	.word	0x0800f508

0800a204 <MadgwickAHRSupdateIMU>:
void MadgwickAHRSupdateIMU(struct estimate* e, float gx, float gy, float gz, float ax, float ay, float az , float dt) { // dt : second
 800a204:	b580      	push	{r7, lr}
 800a206:	b0a2      	sub	sp, #136	; 0x88
 800a208:	af00      	add	r7, sp, #0
 800a20a:	61f8      	str	r0, [r7, #28]
 800a20c:	ed87 0a06 	vstr	s0, [r7, #24]
 800a210:	edc7 0a05 	vstr	s1, [r7, #20]
 800a214:	ed87 1a04 	vstr	s2, [r7, #16]
 800a218:	edc7 1a03 	vstr	s3, [r7, #12]
 800a21c:	ed87 2a02 	vstr	s4, [r7, #8]
 800a220:	edc7 2a01 	vstr	s5, [r7, #4]
 800a224:	ed87 3a00 	vstr	s6, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	float q0 = e->bodyQ[0];
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	677b      	str	r3, [r7, #116]	; 0x74
	float q1 = e->bodyQ[1];
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	673b      	str	r3, [r7, #112]	; 0x70
	float q2 = e->bodyQ[2];
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	66fb      	str	r3, [r7, #108]	; 0x6c
	float q3 = e->bodyQ[3];
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	66bb      	str	r3, [r7, #104]	; 0x68

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800a240:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a244:	eeb1 7a67 	vneg.f32	s14, s15
 800a248:	edd7 7a06 	vldr	s15, [r7, #24]
 800a24c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a250:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800a254:	edd7 7a05 	vldr	s15, [r7, #20]
 800a258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a25c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a260:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800a264:	edd7 7a04 	vldr	s15, [r7, #16]
 800a268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a26c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a270:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a274:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a278:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800a27c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a280:	edd7 7a06 	vldr	s15, [r7, #24]
 800a284:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a288:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800a28c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a294:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a298:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800a29c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a2a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a2ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2b0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800a2b4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a2b8:	edd7 7a05 	vldr	s15, [r7, #20]
 800a2bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2c0:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800a2c4:	edd7 7a04 	vldr	s15, [r7, #16]
 800a2c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a2d0:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800a2d4:	edd7 7a06 	vldr	s15, [r7, #24]
 800a2d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a2e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2e8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800a2ec:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a2f0:	edd7 7a04 	vldr	s15, [r7, #16]
 800a2f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2f8:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800a2fc:	edd7 7a05 	vldr	s15, [r7, #20]
 800a300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a304:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a308:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800a30c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a314:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a318:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a31c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a320:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800a324:	edd7 7a03 	vldr	s15, [r7, #12]
 800a328:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a330:	d10e      	bne.n	800a350 <MadgwickAHRSupdateIMU+0x14c>
 800a332:	edd7 7a02 	vldr	s15, [r7, #8]
 800a336:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a33e:	d107      	bne.n	800a350 <MadgwickAHRSupdateIMU+0x14c>
 800a340:	edd7 7a01 	vldr	s15, [r7, #4]
 800a344:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34c:	f000 81d4 	beq.w	800a6f8 <MadgwickAHRSupdateIMU+0x4f4>
		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800a350:	ed97 7a03 	vldr	s14, [r7, #12]
 800a354:	edd7 7a03 	vldr	s15, [r7, #12]
 800a358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a35c:	edd7 6a02 	vldr	s13, [r7, #8]
 800a360:	edd7 7a02 	vldr	s15, [r7, #8]
 800a364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a368:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a36c:	edd7 6a01 	vldr	s13, [r7, #4]
 800a370:	edd7 7a01 	vldr	s15, [r7, #4]
 800a374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a37c:	eeb0 0a67 	vmov.f32	s0, s15
 800a380:	f7f6 fdf2 	bl	8000f68 <invSqrt>
 800a384:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 800a388:	ed97 7a03 	vldr	s14, [r7, #12]
 800a38c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a390:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a394:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 800a398:	ed97 7a02 	vldr	s14, [r7, #8]
 800a39c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a3a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a4:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 800a3a8:	ed97 7a01 	vldr	s14, [r7, #4]
 800a3ac:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a3b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3b4:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800a3b8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a3bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a3c0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 800a3c4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a3c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a3cc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 800a3d0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a3d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a3d8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 800a3dc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a3e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a3e4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 800a3e8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a3ec:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a3f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3f4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 800a3f8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a3fc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a400:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a404:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 800a408:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a40c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a410:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a414:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 800a418:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a41c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a420:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a424:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 800a428:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a42c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a430:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a434:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 800a438:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a43c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a440:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a444:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 800a448:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a44c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a450:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a454:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 800a458:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a45c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a464:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 800a468:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800a46c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a470:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a474:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800a478:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a47c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a480:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a484:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800a488:	edd7 7a03 	vldr	s15, [r7, #12]
 800a48c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a490:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a494:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800a498:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a49c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4a4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800a4a8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a4ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800a4b8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a4bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a4c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4c4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800a4c8:	edd7 7a03 	vldr	s15, [r7, #12]
 800a4cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a4d8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a4dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a4e0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a4e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4ec:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800a4f0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a4f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4fc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a500:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a504:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800a508:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a50c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a510:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a514:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800a518:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a51c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a520:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a524:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800a528:	edd7 7a01 	vldr	s15, [r7, #4]
 800a52c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a530:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a534:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800a538:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a53c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a540:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a544:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a54c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800a550:	edd7 7a03 	vldr	s15, [r7, #12]
 800a554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a55c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800a560:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a56c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800a570:	edd7 7a02 	vldr	s15, [r7, #8]
 800a574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a578:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a57c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a580:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a584:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a588:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a58c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a590:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a594:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a598:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a59c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5a4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800a5a8:	edd7 7a01 	vldr	s15, [r7, #4]
 800a5ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800a5b8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a5bc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a5c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a5c4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a5c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5cc:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800a5d0:	edd7 7a03 	vldr	s15, [r7, #12]
 800a5d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a5e0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a5e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a5e8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a5ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5f4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800a5f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a5fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a600:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a604:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800a608:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a60c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a610:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a614:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a618:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a61c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a620:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a624:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a628:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a62c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a630:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a634:	edd7 6a08 	vldr	s13, [r7, #32]
 800a638:	edd7 7a08 	vldr	s15, [r7, #32]
 800a63c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a640:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a644:	eeb0 0a67 	vmov.f32	s0, s15
 800a648:	f7f6 fc8e 	bl	8000f68 <invSqrt>
 800a64c:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 800a650:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a654:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 800a660:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a664:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 800a670:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a674:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a67c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 800a680:	ed97 7a08 	vldr	s14, [r7, #32]
 800a684:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a68c:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 800a690:	4b5b      	ldr	r3, [pc, #364]	; (800a800 <MadgwickAHRSupdateIMU+0x5fc>)
 800a692:	ed93 7a00 	vldr	s14, [r3]
 800a696:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a69e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800a6a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6a6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		qDot2 -= beta * s1;
 800a6aa:	4b55      	ldr	r3, [pc, #340]	; (800a800 <MadgwickAHRSupdateIMU+0x5fc>)
 800a6ac:	ed93 7a00 	vldr	s14, [r3]
 800a6b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a6b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a6bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6c0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		qDot3 -= beta * s2;
 800a6c4:	4b4e      	ldr	r3, [pc, #312]	; (800a800 <MadgwickAHRSupdateIMU+0x5fc>)
 800a6c6:	ed93 7a00 	vldr	s14, [r3]
 800a6ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a6ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6d2:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a6d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6da:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		qDot4 -= beta * s3;
 800a6de:	4b48      	ldr	r3, [pc, #288]	; (800a800 <MadgwickAHRSupdateIMU+0x5fc>)
 800a6e0:	ed93 7a00 	vldr	s14, [r3]
 800a6e4:	edd7 7a08 	vldr	s15, [r7, #32]
 800a6e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ec:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800a6f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6f4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
//	q0 += qDot1 * (1.0f / sampleFreq);
//	q1 += qDot2 * (1.0f / sampleFreq);
//	q2 += qDot3 * (1.0f / sampleFreq);
//	q3 += qDot4 * (1.0f / sampleFreq);

	q0 += qDot1 * (dt);
 800a6f8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800a6fc:	edd7 7a00 	vldr	s15, [r7]
 800a700:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a704:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a70c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q1 += qDot2 * (dt);
 800a710:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a714:	edd7 7a00 	vldr	s15, [r7]
 800a718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a720:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a724:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q2 += qDot3 * (dt);
 800a728:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a72c:	edd7 7a00 	vldr	s15, [r7]
 800a730:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a734:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a73c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q3 += qDot4 * (dt);
 800a740:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800a744:	edd7 7a00 	vldr	s15, [r7]
 800a748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a74c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800a750:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a754:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800a758:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a75c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a760:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a764:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800a768:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a76c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a770:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a774:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800a778:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a77c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a780:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a784:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800a788:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a78c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a790:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a794:	eeb0 0a67 	vmov.f32	s0, s15
 800a798:	f7f6 fbe6 	bl	8000f68 <invSqrt>
 800a79c:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 800a7a0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a7a4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a7a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ac:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q1 *= recipNorm;
 800a7b0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a7b4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a7b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7bc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q2 *= recipNorm;
 800a7c0:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a7c4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a7c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7cc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q3 *= recipNorm;
 800a7d0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800a7d4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a7d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7dc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


	e->bodyQ[0] = q0;
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a7e4:	601a      	str	r2, [r3, #0]
	e->bodyQ[1] = q1;
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a7ea:	605a      	str	r2, [r3, #4]
	e->bodyQ[2] = q2;
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a7f0:	609a      	str	r2, [r3, #8]
	e->bodyQ[3] = q3;
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7f6:	60da      	str	r2, [r3, #12]
}
 800a7f8:	bf00      	nop
 800a7fa:	3788      	adds	r7, #136	; 0x88
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20000044 	.word	0x20000044

0800a804 <sbus_start>:
uint16_t sbus_errcnt = 0;

static uint8_t _parserState = 0;      //for parsing
static uint8_t _curByte, _prevByte;

void sbus_start(UART_HandleTypeDef *huart) {
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
   sbus_phuart = huart;
 800a80c:	4a05      	ldr	r2, [pc, #20]	; (800a824 <sbus_start+0x20>)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6013      	str	r3, [r2, #0]
//   HAL_UART_Receive_DMA(huart, sbus_rxBuf, SBUS_BUF_SIZE);
   HAL_UART_Receive_DMA(huart, sbus_dmaBuf, SBUS_DMA_BUF_SIZE);
 800a812:	2219      	movs	r2, #25
 800a814:	4904      	ldr	r1, [pc, #16]	; (800a828 <sbus_start+0x24>)
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7fd fbec 	bl	8007ff4 <HAL_UART_Receive_DMA>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	20000428 	.word	0x20000428
 800a828:	200003c4 	.word	0x200003c4

0800a82c <sbus_decoding>:

void sbus_reset(UART_HandleTypeDef *huart){
   HAL_UART_Receive_DMA(huart, sbus_dmaBuf, SBUS_DMA_BUF_SIZE);
}

void sbus_decoding() { // input to HAL_UART_RxCpltCallback
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
   if(sbus_rxBuf[23] & SBUS_LOST_FRAME || sbus_rxBuf[23] & SBUS_FAIL_SAFE){//failsafe frame
 800a832:	4b09      	ldr	r3, [pc, #36]	; (800a858 <sbus_decoding+0x2c>)
 800a834:	7ddb      	ldrb	r3, [r3, #23]
 800a836:	f003 0304 	and.w	r3, r3, #4
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d105      	bne.n	800a84a <sbus_decoding+0x1e>
 800a83e:	4b06      	ldr	r3, [pc, #24]	; (800a858 <sbus_decoding+0x2c>)
 800a840:	7ddb      	ldrb	r3, [r3, #23]
 800a842:	f003 0308 	and.w	r3, r3, #8
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00a      	beq.n	800a860 <sbus_decoding+0x34>
//      printf("fail safe\r\n");
      sbus_errcnt++;
 800a84a:	4b04      	ldr	r3, [pc, #16]	; (800a85c <sbus_decoding+0x30>)
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	3301      	adds	r3, #1
 800a850:	b29a      	uxth	r2, r3
 800a852:	4b02      	ldr	r3, [pc, #8]	; (800a85c <sbus_decoding+0x30>)
 800a854:	801a      	strh	r2, [r3, #0]
      return;
 800a856:	e170      	b.n	800ab3a <sbus_decoding+0x30e>
 800a858:	200003a8 	.word	0x200003a8
 800a85c:	2000042e 	.word	0x2000042e
   }

   sbus_rcValue[0] = ((uint16_t)sbus_rxBuf[1] >> 0 | ((uint16_t)sbus_rxBuf[2] << 8)) & 0x07FF;
 800a860:	4b95      	ldr	r3, [pc, #596]	; (800aab8 <sbus_decoding+0x28c>)
 800a862:	785b      	ldrb	r3, [r3, #1]
 800a864:	b21a      	sxth	r2, r3
 800a866:	4b94      	ldr	r3, [pc, #592]	; (800aab8 <sbus_decoding+0x28c>)
 800a868:	789b      	ldrb	r3, [r3, #2]
 800a86a:	021b      	lsls	r3, r3, #8
 800a86c:	b21b      	sxth	r3, r3
 800a86e:	4313      	orrs	r3, r2
 800a870:	b21b      	sxth	r3, r3
 800a872:	b29b      	uxth	r3, r3
 800a874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a878:	b29a      	uxth	r2, r3
 800a87a:	4b90      	ldr	r3, [pc, #576]	; (800aabc <sbus_decoding+0x290>)
 800a87c:	801a      	strh	r2, [r3, #0]
   sbus_rcValue[1] = ((uint16_t)sbus_rxBuf[2] >> 3 | ((uint16_t)sbus_rxBuf[3] << 5)) & 0x07FF;
 800a87e:	4b8e      	ldr	r3, [pc, #568]	; (800aab8 <sbus_decoding+0x28c>)
 800a880:	789b      	ldrb	r3, [r3, #2]
 800a882:	08db      	lsrs	r3, r3, #3
 800a884:	b2db      	uxtb	r3, r3
 800a886:	b21a      	sxth	r2, r3
 800a888:	4b8b      	ldr	r3, [pc, #556]	; (800aab8 <sbus_decoding+0x28c>)
 800a88a:	78db      	ldrb	r3, [r3, #3]
 800a88c:	015b      	lsls	r3, r3, #5
 800a88e:	b21b      	sxth	r3, r3
 800a890:	4313      	orrs	r3, r2
 800a892:	b21b      	sxth	r3, r3
 800a894:	b29b      	uxth	r3, r3
 800a896:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	4b87      	ldr	r3, [pc, #540]	; (800aabc <sbus_decoding+0x290>)
 800a89e:	805a      	strh	r2, [r3, #2]
   sbus_rcValue[2] = ((uint16_t)sbus_rxBuf[3] >> 6 | ((uint16_t)sbus_rxBuf[4] << 2) | (uint16_t)sbus_rxBuf[5] << 10) & 0x07FF;
 800a8a0:	4b85      	ldr	r3, [pc, #532]	; (800aab8 <sbus_decoding+0x28c>)
 800a8a2:	78db      	ldrb	r3, [r3, #3]
 800a8a4:	099b      	lsrs	r3, r3, #6
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	b21a      	sxth	r2, r3
 800a8aa:	4b83      	ldr	r3, [pc, #524]	; (800aab8 <sbus_decoding+0x28c>)
 800a8ac:	791b      	ldrb	r3, [r3, #4]
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	b21b      	sxth	r3, r3
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	b21a      	sxth	r2, r3
 800a8b6:	4b80      	ldr	r3, [pc, #512]	; (800aab8 <sbus_decoding+0x28c>)
 800a8b8:	795b      	ldrb	r3, [r3, #5]
 800a8ba:	029b      	lsls	r3, r3, #10
 800a8bc:	b21b      	sxth	r3, r3
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	b21b      	sxth	r3, r3
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	4b7c      	ldr	r3, [pc, #496]	; (800aabc <sbus_decoding+0x290>)
 800a8cc:	809a      	strh	r2, [r3, #4]
   sbus_rcValue[3] = ((uint16_t)sbus_rxBuf[5] >> 1 | ((uint16_t)sbus_rxBuf[6] << 7)) & 0x07FF;
 800a8ce:	4b7a      	ldr	r3, [pc, #488]	; (800aab8 <sbus_decoding+0x28c>)
 800a8d0:	795b      	ldrb	r3, [r3, #5]
 800a8d2:	085b      	lsrs	r3, r3, #1
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	b21a      	sxth	r2, r3
 800a8d8:	4b77      	ldr	r3, [pc, #476]	; (800aab8 <sbus_decoding+0x28c>)
 800a8da:	799b      	ldrb	r3, [r3, #6]
 800a8dc:	01db      	lsls	r3, r3, #7
 800a8de:	b21b      	sxth	r3, r3
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	b21b      	sxth	r3, r3
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	4b73      	ldr	r3, [pc, #460]	; (800aabc <sbus_decoding+0x290>)
 800a8ee:	80da      	strh	r2, [r3, #6]
   sbus_rcValue[4] = ((uint16_t)sbus_rxBuf[6] >> 4 | ((uint16_t)sbus_rxBuf[7] << 4)) & 0x07FF;
 800a8f0:	4b71      	ldr	r3, [pc, #452]	; (800aab8 <sbus_decoding+0x28c>)
 800a8f2:	799b      	ldrb	r3, [r3, #6]
 800a8f4:	091b      	lsrs	r3, r3, #4
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	b21a      	sxth	r2, r3
 800a8fa:	4b6f      	ldr	r3, [pc, #444]	; (800aab8 <sbus_decoding+0x28c>)
 800a8fc:	79db      	ldrb	r3, [r3, #7]
 800a8fe:	011b      	lsls	r3, r3, #4
 800a900:	b21b      	sxth	r3, r3
 800a902:	4313      	orrs	r3, r2
 800a904:	b21b      	sxth	r3, r3
 800a906:	b29b      	uxth	r3, r3
 800a908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a90c:	b29a      	uxth	r2, r3
 800a90e:	4b6b      	ldr	r3, [pc, #428]	; (800aabc <sbus_decoding+0x290>)
 800a910:	811a      	strh	r2, [r3, #8]
   sbus_rcValue[5] = ((uint16_t)sbus_rxBuf[7] >> 7 | ((uint16_t)sbus_rxBuf[8] << 1) | (uint16_t)sbus_rxBuf[9] << 9) & 0x07FF;
 800a912:	4b69      	ldr	r3, [pc, #420]	; (800aab8 <sbus_decoding+0x28c>)
 800a914:	79db      	ldrb	r3, [r3, #7]
 800a916:	09db      	lsrs	r3, r3, #7
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	b21a      	sxth	r2, r3
 800a91c:	4b66      	ldr	r3, [pc, #408]	; (800aab8 <sbus_decoding+0x28c>)
 800a91e:	7a1b      	ldrb	r3, [r3, #8]
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	b21b      	sxth	r3, r3
 800a924:	4313      	orrs	r3, r2
 800a926:	b21a      	sxth	r2, r3
 800a928:	4b63      	ldr	r3, [pc, #396]	; (800aab8 <sbus_decoding+0x28c>)
 800a92a:	7a5b      	ldrb	r3, [r3, #9]
 800a92c:	025b      	lsls	r3, r3, #9
 800a92e:	b21b      	sxth	r3, r3
 800a930:	4313      	orrs	r3, r2
 800a932:	b21b      	sxth	r3, r3
 800a934:	b29b      	uxth	r3, r3
 800a936:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	4b5f      	ldr	r3, [pc, #380]	; (800aabc <sbus_decoding+0x290>)
 800a93e:	815a      	strh	r2, [r3, #10]
   sbus_rcValue[6] = ((uint16_t)sbus_rxBuf[9] >> 2 | ((uint16_t)sbus_rxBuf[10] << 6)) & 0x07FF;
 800a940:	4b5d      	ldr	r3, [pc, #372]	; (800aab8 <sbus_decoding+0x28c>)
 800a942:	7a5b      	ldrb	r3, [r3, #9]
 800a944:	089b      	lsrs	r3, r3, #2
 800a946:	b2db      	uxtb	r3, r3
 800a948:	b21a      	sxth	r2, r3
 800a94a:	4b5b      	ldr	r3, [pc, #364]	; (800aab8 <sbus_decoding+0x28c>)
 800a94c:	7a9b      	ldrb	r3, [r3, #10]
 800a94e:	019b      	lsls	r3, r3, #6
 800a950:	b21b      	sxth	r3, r3
 800a952:	4313      	orrs	r3, r2
 800a954:	b21b      	sxth	r3, r3
 800a956:	b29b      	uxth	r3, r3
 800a958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	4b57      	ldr	r3, [pc, #348]	; (800aabc <sbus_decoding+0x290>)
 800a960:	819a      	strh	r2, [r3, #12]
   sbus_rcValue[7] = ((uint16_t)sbus_rxBuf[10] >> 5 | ((uint16_t)sbus_rxBuf[11] << 3)) & 0x07FF;
 800a962:	4b55      	ldr	r3, [pc, #340]	; (800aab8 <sbus_decoding+0x28c>)
 800a964:	7a9b      	ldrb	r3, [r3, #10]
 800a966:	095b      	lsrs	r3, r3, #5
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	b21a      	sxth	r2, r3
 800a96c:	4b52      	ldr	r3, [pc, #328]	; (800aab8 <sbus_decoding+0x28c>)
 800a96e:	7adb      	ldrb	r3, [r3, #11]
 800a970:	00db      	lsls	r3, r3, #3
 800a972:	b21b      	sxth	r3, r3
 800a974:	4313      	orrs	r3, r2
 800a976:	b21b      	sxth	r3, r3
 800a978:	b29b      	uxth	r3, r3
 800a97a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a97e:	b29a      	uxth	r2, r3
 800a980:	4b4e      	ldr	r3, [pc, #312]	; (800aabc <sbus_decoding+0x290>)
 800a982:	81da      	strh	r2, [r3, #14]

   sbus_rcValue[8] = ((uint16_t)sbus_rxBuf[12] << 0 | ((uint16_t)sbus_rxBuf[13] << 8)) & 0x07FF;
 800a984:	4b4c      	ldr	r3, [pc, #304]	; (800aab8 <sbus_decoding+0x28c>)
 800a986:	7b1b      	ldrb	r3, [r3, #12]
 800a988:	b21a      	sxth	r2, r3
 800a98a:	4b4b      	ldr	r3, [pc, #300]	; (800aab8 <sbus_decoding+0x28c>)
 800a98c:	7b5b      	ldrb	r3, [r3, #13]
 800a98e:	021b      	lsls	r3, r3, #8
 800a990:	b21b      	sxth	r3, r3
 800a992:	4313      	orrs	r3, r2
 800a994:	b21b      	sxth	r3, r3
 800a996:	b29b      	uxth	r3, r3
 800a998:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	4b47      	ldr	r3, [pc, #284]	; (800aabc <sbus_decoding+0x290>)
 800a9a0:	821a      	strh	r2, [r3, #16]
   sbus_rcValue[9] = ((uint16_t)sbus_rxBuf[13] >> 3 | ((uint16_t)sbus_rxBuf[14] << 5)) & 0x07FF;
 800a9a2:	4b45      	ldr	r3, [pc, #276]	; (800aab8 <sbus_decoding+0x28c>)
 800a9a4:	7b5b      	ldrb	r3, [r3, #13]
 800a9a6:	08db      	lsrs	r3, r3, #3
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	b21a      	sxth	r2, r3
 800a9ac:	4b42      	ldr	r3, [pc, #264]	; (800aab8 <sbus_decoding+0x28c>)
 800a9ae:	7b9b      	ldrb	r3, [r3, #14]
 800a9b0:	015b      	lsls	r3, r3, #5
 800a9b2:	b21b      	sxth	r3, r3
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	b21b      	sxth	r3, r3
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	4b3e      	ldr	r3, [pc, #248]	; (800aabc <sbus_decoding+0x290>)
 800a9c2:	825a      	strh	r2, [r3, #18]
   sbus_rcValue[10] = ((uint16_t)sbus_rxBuf[14] >> 6 | ((uint16_t)sbus_rxBuf[15] << 2) | (uint16_t)sbus_rxBuf[16] << 10) & 0x07FF;
 800a9c4:	4b3c      	ldr	r3, [pc, #240]	; (800aab8 <sbus_decoding+0x28c>)
 800a9c6:	7b9b      	ldrb	r3, [r3, #14]
 800a9c8:	099b      	lsrs	r3, r3, #6
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	b21a      	sxth	r2, r3
 800a9ce:	4b3a      	ldr	r3, [pc, #232]	; (800aab8 <sbus_decoding+0x28c>)
 800a9d0:	7bdb      	ldrb	r3, [r3, #15]
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	b21b      	sxth	r3, r3
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	b21a      	sxth	r2, r3
 800a9da:	4b37      	ldr	r3, [pc, #220]	; (800aab8 <sbus_decoding+0x28c>)
 800a9dc:	7c1b      	ldrb	r3, [r3, #16]
 800a9de:	029b      	lsls	r3, r3, #10
 800a9e0:	b21b      	sxth	r3, r3
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	b21b      	sxth	r3, r3
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	4b33      	ldr	r3, [pc, #204]	; (800aabc <sbus_decoding+0x290>)
 800a9f0:	829a      	strh	r2, [r3, #20]
   sbus_rcValue[11] = ((uint16_t)sbus_rxBuf[16] >> 1 | ((uint16_t)sbus_rxBuf[17] << 7)) & 0x07FF;
 800a9f2:	4b31      	ldr	r3, [pc, #196]	; (800aab8 <sbus_decoding+0x28c>)
 800a9f4:	7c1b      	ldrb	r3, [r3, #16]
 800a9f6:	085b      	lsrs	r3, r3, #1
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	b21a      	sxth	r2, r3
 800a9fc:	4b2e      	ldr	r3, [pc, #184]	; (800aab8 <sbus_decoding+0x28c>)
 800a9fe:	7c5b      	ldrb	r3, [r3, #17]
 800aa00:	01db      	lsls	r3, r3, #7
 800aa02:	b21b      	sxth	r3, r3
 800aa04:	4313      	orrs	r3, r2
 800aa06:	b21b      	sxth	r3, r3
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	4b2a      	ldr	r3, [pc, #168]	; (800aabc <sbus_decoding+0x290>)
 800aa12:	82da      	strh	r2, [r3, #22]
   sbus_rcValue[12] = ((uint16_t)sbus_rxBuf[17] >> 4 | ((uint16_t)sbus_rxBuf[18] << 4)) & 0x07FF;
 800aa14:	4b28      	ldr	r3, [pc, #160]	; (800aab8 <sbus_decoding+0x28c>)
 800aa16:	7c5b      	ldrb	r3, [r3, #17]
 800aa18:	091b      	lsrs	r3, r3, #4
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	b21a      	sxth	r2, r3
 800aa1e:	4b26      	ldr	r3, [pc, #152]	; (800aab8 <sbus_decoding+0x28c>)
 800aa20:	7c9b      	ldrb	r3, [r3, #18]
 800aa22:	011b      	lsls	r3, r3, #4
 800aa24:	b21b      	sxth	r3, r3
 800aa26:	4313      	orrs	r3, r2
 800aa28:	b21b      	sxth	r3, r3
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	4b22      	ldr	r3, [pc, #136]	; (800aabc <sbus_decoding+0x290>)
 800aa34:	831a      	strh	r2, [r3, #24]
   sbus_rcValue[13] = ((uint16_t)sbus_rxBuf[18] >> 7 | ((uint16_t)sbus_rxBuf[19] << 1) | (uint16_t)sbus_rxBuf[21] << 9) & 0x07FF;
 800aa36:	4b20      	ldr	r3, [pc, #128]	; (800aab8 <sbus_decoding+0x28c>)
 800aa38:	7c9b      	ldrb	r3, [r3, #18]
 800aa3a:	09db      	lsrs	r3, r3, #7
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	b21a      	sxth	r2, r3
 800aa40:	4b1d      	ldr	r3, [pc, #116]	; (800aab8 <sbus_decoding+0x28c>)
 800aa42:	7cdb      	ldrb	r3, [r3, #19]
 800aa44:	005b      	lsls	r3, r3, #1
 800aa46:	b21b      	sxth	r3, r3
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	b21a      	sxth	r2, r3
 800aa4c:	4b1a      	ldr	r3, [pc, #104]	; (800aab8 <sbus_decoding+0x28c>)
 800aa4e:	7d5b      	ldrb	r3, [r3, #21]
 800aa50:	025b      	lsls	r3, r3, #9
 800aa52:	b21b      	sxth	r3, r3
 800aa54:	4313      	orrs	r3, r2
 800aa56:	b21b      	sxth	r3, r3
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	4b16      	ldr	r3, [pc, #88]	; (800aabc <sbus_decoding+0x290>)
 800aa62:	835a      	strh	r2, [r3, #26]
   sbus_rcValue[14] = ((uint16_t)sbus_rxBuf[20] >> 2 | ((uint16_t)sbus_rxBuf[21] << 6)) & 0x07FF;
 800aa64:	4b14      	ldr	r3, [pc, #80]	; (800aab8 <sbus_decoding+0x28c>)
 800aa66:	7d1b      	ldrb	r3, [r3, #20]
 800aa68:	089b      	lsrs	r3, r3, #2
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	b21a      	sxth	r2, r3
 800aa6e:	4b12      	ldr	r3, [pc, #72]	; (800aab8 <sbus_decoding+0x28c>)
 800aa70:	7d5b      	ldrb	r3, [r3, #21]
 800aa72:	019b      	lsls	r3, r3, #6
 800aa74:	b21b      	sxth	r3, r3
 800aa76:	4313      	orrs	r3, r2
 800aa78:	b21b      	sxth	r3, r3
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	4b0e      	ldr	r3, [pc, #56]	; (800aabc <sbus_decoding+0x290>)
 800aa84:	839a      	strh	r2, [r3, #28]
   sbus_rcValue[15] = ((uint16_t)sbus_rxBuf[21] >> 5 | ((uint16_t)sbus_rxBuf[22] << 3)) & 0x07FF;
 800aa86:	4b0c      	ldr	r3, [pc, #48]	; (800aab8 <sbus_decoding+0x28c>)
 800aa88:	7d5b      	ldrb	r3, [r3, #21]
 800aa8a:	095b      	lsrs	r3, r3, #5
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	b21a      	sxth	r2, r3
 800aa90:	4b09      	ldr	r3, [pc, #36]	; (800aab8 <sbus_decoding+0x28c>)
 800aa92:	7d9b      	ldrb	r3, [r3, #22]
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	b21b      	sxth	r3, r3
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	b21b      	sxth	r3, r3
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	4b05      	ldr	r3, [pc, #20]	; (800aabc <sbus_decoding+0x290>)
 800aaa6:	83da      	strh	r2, [r3, #30]


   if (((uint16_t)sbus_rxBuf[23]) & 0x0001)       sbus_rcValue[16] = 2000; else sbus_rcValue[16] = 1000;
 800aaa8:	4b03      	ldr	r3, [pc, #12]	; (800aab8 <sbus_decoding+0x28c>)
 800aaaa:	7ddb      	ldrb	r3, [r3, #23]
 800aaac:	f003 0301 	and.w	r3, r3, #1
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00a      	beq.n	800aaca <sbus_decoding+0x29e>
 800aab4:	e004      	b.n	800aac0 <sbus_decoding+0x294>
 800aab6:	bf00      	nop
 800aab8:	200003a8 	.word	0x200003a8
 800aabc:	200003e0 	.word	0x200003e0
 800aac0:	4b20      	ldr	r3, [pc, #128]	; (800ab44 <sbus_decoding+0x318>)
 800aac2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aac6:	841a      	strh	r2, [r3, #32]
 800aac8:	e003      	b.n	800aad2 <sbus_decoding+0x2a6>
 800aaca:	4b1e      	ldr	r3, [pc, #120]	; (800ab44 <sbus_decoding+0x318>)
 800aacc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aad0:	841a      	strh	r2, [r3, #32]
   if (((uint16_t)sbus_rxBuf[23] >> 1) & 0x0001)  sbus_rcValue[17] = 2000; else sbus_rcValue[17] = 1000;
 800aad2:	4b1d      	ldr	r3, [pc, #116]	; (800ab48 <sbus_decoding+0x31c>)
 800aad4:	7ddb      	ldrb	r3, [r3, #23]
 800aad6:	085b      	lsrs	r3, r3, #1
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	f003 0301 	and.w	r3, r3, #1
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d004      	beq.n	800aaec <sbus_decoding+0x2c0>
 800aae2:	4b18      	ldr	r3, [pc, #96]	; (800ab44 <sbus_decoding+0x318>)
 800aae4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aae8:	845a      	strh	r2, [r3, #34]	; 0x22
 800aaea:	e003      	b.n	800aaf4 <sbus_decoding+0x2c8>
 800aaec:	4b15      	ldr	r3, [pc, #84]	; (800ab44 <sbus_decoding+0x318>)
 800aaee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aaf2:	845a      	strh	r2, [r3, #34]	; 0x22

   for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	607b      	str	r3, [r7, #4]
 800aaf8:	e016      	b.n	800ab28 <sbus_decoding+0x2fc>
      sbus_comp_rcValue[i] = (sbus_rcValue[i]) * 5 / 8 + 880;
 800aafa:	4a12      	ldr	r2, [pc, #72]	; (800ab44 <sbus_decoding+0x318>)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab02:	461a      	mov	r2, r3
 800ab04:	4613      	mov	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	da00      	bge.n	800ab10 <sbus_decoding+0x2e4>
 800ab0e:	3307      	adds	r3, #7
 800ab10:	10db      	asrs	r3, r3, #3
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800ab18:	b299      	uxth	r1, r3
 800ab1a:	4a0c      	ldr	r2, [pc, #48]	; (800ab4c <sbus_decoding+0x320>)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	3301      	adds	r3, #1
 800ab26:	607b      	str	r3, [r7, #4]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b11      	cmp	r3, #17
 800ab2c:	dde5      	ble.n	800aafa <sbus_decoding+0x2ce>
   }

//   if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//   && sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe

   sbus_hzcnt++;
 800ab2e:	4b08      	ldr	r3, [pc, #32]	; (800ab50 <sbus_decoding+0x324>)
 800ab30:	881b      	ldrh	r3, [r3, #0]
 800ab32:	3301      	adds	r3, #1
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	4b06      	ldr	r3, [pc, #24]	; (800ab50 <sbus_decoding+0x324>)
 800ab38:	801a      	strh	r2, [r3, #0]
}
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	200003e0 	.word	0x200003e0
 800ab48:	200003a8 	.word	0x200003a8
 800ab4c:	20000404 	.word	0x20000404
 800ab50:	2000042c 	.word	0x2000042c

0800ab54 <sbus_callback>:


void sbus_callback(){
 800ab54:	b580      	push	{r7, lr}
 800ab56:	af00      	add	r7, sp, #0
   static uint8_t i=0;
   for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 800ab58:	4b33      	ldr	r3, [pc, #204]	; (800ac28 <sbus_callback+0xd4>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	701a      	strb	r2, [r3, #0]
 800ab5e:	e05c      	b.n	800ac1a <sbus_callback+0xc6>
      _curByte = sbus_dmaBuf[i];
 800ab60:	4b31      	ldr	r3, [pc, #196]	; (800ac28 <sbus_callback+0xd4>)
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	461a      	mov	r2, r3
 800ab66:	4b31      	ldr	r3, [pc, #196]	; (800ac2c <sbus_callback+0xd8>)
 800ab68:	5c9a      	ldrb	r2, [r3, r2]
 800ab6a:	4b31      	ldr	r3, [pc, #196]	; (800ac30 <sbus_callback+0xdc>)
 800ab6c:	701a      	strb	r2, [r3, #0]
      if (_parserState == 0) {
 800ab6e:	4b31      	ldr	r3, [pc, #196]	; (800ac34 <sbus_callback+0xe0>)
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d11f      	bne.n	800abb6 <sbus_callback+0x62>
            if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 800ab76:	4b2e      	ldr	r3, [pc, #184]	; (800ac30 <sbus_callback+0xdc>)
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	2b0f      	cmp	r3, #15
 800ab7c:	d117      	bne.n	800abae <sbus_callback+0x5a>
 800ab7e:	4b2e      	ldr	r3, [pc, #184]	; (800ac38 <sbus_callback+0xe4>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d005      	beq.n	800ab92 <sbus_callback+0x3e>
 800ab86:	4b2c      	ldr	r3, [pc, #176]	; (800ac38 <sbus_callback+0xe4>)
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	f003 030f 	and.w	r3, r3, #15
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10d      	bne.n	800abae <sbus_callback+0x5a>
               sbus_rxBuf[_parserState] = _curByte;
 800ab92:	4b28      	ldr	r3, [pc, #160]	; (800ac34 <sbus_callback+0xe0>)
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	4b25      	ldr	r3, [pc, #148]	; (800ac30 <sbus_callback+0xdc>)
 800ab9a:	7819      	ldrb	r1, [r3, #0]
 800ab9c:	4b27      	ldr	r3, [pc, #156]	; (800ac3c <sbus_callback+0xe8>)
 800ab9e:	5499      	strb	r1, [r3, r2]
               _parserState++;
 800aba0:	4b24      	ldr	r3, [pc, #144]	; (800ac34 <sbus_callback+0xe0>)
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	3301      	adds	r3, #1
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	4b22      	ldr	r3, [pc, #136]	; (800ac34 <sbus_callback+0xe0>)
 800abaa:	701a      	strb	r2, [r3, #0]
 800abac:	e02b      	b.n	800ac06 <sbus_callback+0xb2>
            } else {
               _parserState = 0;
 800abae:	4b21      	ldr	r3, [pc, #132]	; (800ac34 <sbus_callback+0xe0>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	701a      	strb	r2, [r3, #0]
 800abb4:	e027      	b.n	800ac06 <sbus_callback+0xb2>
            }
      }
      else {
         // strip off the data
         if ((_parserState) < SBUS_BUF_SIZE) {
 800abb6:	4b1f      	ldr	r3, [pc, #124]	; (800ac34 <sbus_callback+0xe0>)
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	2b18      	cmp	r3, #24
 800abbc:	d80c      	bhi.n	800abd8 <sbus_callback+0x84>
            sbus_rxBuf[_parserState] = _curByte;
 800abbe:	4b1d      	ldr	r3, [pc, #116]	; (800ac34 <sbus_callback+0xe0>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	4b1a      	ldr	r3, [pc, #104]	; (800ac30 <sbus_callback+0xdc>)
 800abc6:	7819      	ldrb	r1, [r3, #0]
 800abc8:	4b1c      	ldr	r3, [pc, #112]	; (800ac3c <sbus_callback+0xe8>)
 800abca:	5499      	strb	r1, [r3, r2]
            _parserState++;
 800abcc:	4b19      	ldr	r3, [pc, #100]	; (800ac34 <sbus_callback+0xe0>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	3301      	adds	r3, #1
 800abd2:	b2da      	uxtb	r2, r3
 800abd4:	4b17      	ldr	r3, [pc, #92]	; (800ac34 <sbus_callback+0xe0>)
 800abd6:	701a      	strb	r2, [r3, #0]
         }
         // check the end byte
         if ((_parserState) == SBUS_BUF_SIZE) {
 800abd8:	4b16      	ldr	r3, [pc, #88]	; (800ac34 <sbus_callback+0xe0>)
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	2b19      	cmp	r3, #25
 800abde:	d112      	bne.n	800ac06 <sbus_callback+0xb2>
            if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 800abe0:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <sbus_callback+0xdc>)
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d005      	beq.n	800abf4 <sbus_callback+0xa0>
 800abe8:	4b11      	ldr	r3, [pc, #68]	; (800ac30 <sbus_callback+0xdc>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	f003 030f 	and.w	r3, r3, #15
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d105      	bne.n	800ac00 <sbus_callback+0xac>
               _parserState = 0;
 800abf4:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <sbus_callback+0xe0>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	701a      	strb	r2, [r3, #0]
//               return true;
               sbus_decoding();
 800abfa:	f7ff fe17 	bl	800a82c <sbus_decoding>
 800abfe:	e002      	b.n	800ac06 <sbus_callback+0xb2>
            }
            else {
               _parserState = 0;
 800ac00:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <sbus_callback+0xe0>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	701a      	strb	r2, [r3, #0]
//               return false;
            }
         }
      }
      _prevByte = _curByte;
 800ac06:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <sbus_callback+0xdc>)
 800ac08:	781a      	ldrb	r2, [r3, #0]
 800ac0a:	4b0b      	ldr	r3, [pc, #44]	; (800ac38 <sbus_callback+0xe4>)
 800ac0c:	701a      	strb	r2, [r3, #0]
   for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 800ac0e:	4b06      	ldr	r3, [pc, #24]	; (800ac28 <sbus_callback+0xd4>)
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	3301      	adds	r3, #1
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	4b04      	ldr	r3, [pc, #16]	; (800ac28 <sbus_callback+0xd4>)
 800ac18:	701a      	strb	r2, [r3, #0]
 800ac1a:	4b03      	ldr	r3, [pc, #12]	; (800ac28 <sbus_callback+0xd4>)
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	2b18      	cmp	r3, #24
 800ac20:	d99e      	bls.n	800ab60 <sbus_callback+0xc>
   }
}
 800ac22:	bf00      	nop
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	20000439 	.word	0x20000439
 800ac2c:	200003c4 	.word	0x200003c4
 800ac30:	20000431 	.word	0x20000431
 800ac34:	20000430 	.word	0x20000430
 800ac38:	20000432 	.word	0x20000432
 800ac3c:	200003a8 	.word	0x200003a8

0800ac40 <sbus_getHz>:
uint16_t sbus_getHz(){ // call this func 1hz
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
   uint16_t temp = sbus_hzcnt;
 800ac46:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <sbus_getHz+0x20>)
 800ac48:	881b      	ldrh	r3, [r3, #0]
 800ac4a:	80fb      	strh	r3, [r7, #6]
   sbus_hzcnt = 0;
 800ac4c:	4b04      	ldr	r3, [pc, #16]	; (800ac60 <sbus_getHz+0x20>)
 800ac4e:	2200      	movs	r2, #0
 800ac50:	801a      	strh	r2, [r3, #0]
   return temp;
 800ac52:	88fb      	ldrh	r3, [r7, #6]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	2000042c 	.word	0x2000042c

0800ac64 <sbus_getChannel>:
      printf("%d \t", sbus_comp_rcValue[i]);
   }
   printf("\r\n");
}

uint16_t sbus_getChannel(uint8_t chan) { // start from 1
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	71fb      	strb	r3, [r7, #7]
   return sbus_comp_rcValue[chan - 1];
 800ac6e:	79fb      	ldrb	r3, [r7, #7]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	4a04      	ldr	r2, [pc, #16]	; (800ac84 <sbus_getChannel+0x20>)
 800ac74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr
 800ac84:	20000404 	.word	0x20000404

0800ac88 <motor_init>:
	TIM_HandleTypeDef* pTim;
	uint32_t Channel;
};


void motor_init(struct motor *m, TIM_HandleTypeDef *htim, uint32_t Channel){
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
	m->pTim = htim;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	601a      	str	r2, [r3, #0]
	m->Channel = Channel;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	605a      	str	r2, [r3, #4]
}
 800aca0:	bf00      	nop
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <motor_start>:

void motor_start(struct motor *m){
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(m->pTim, m->Channel);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	4619      	mov	r1, r3
 800acbe:	4610      	mov	r0, r2
 800acc0:	f7fc fa26 	bl	8007110 <HAL_TIM_PWM_Start>
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <motor_write>:

void motor_write(struct motor *m, uint16_t pwm){
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	807b      	strh	r3, [r7, #2]
	if(pwm < MOTOR_PWM_MIN) pwm = MOTOR_PWM_MIN;
 800acd8:	887b      	ldrh	r3, [r7, #2]
 800acda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acde:	d203      	bcs.n	800ace8 <motor_write+0x1c>
 800ace0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ace4:	807b      	strh	r3, [r7, #2]
 800ace6:	e006      	b.n	800acf6 <motor_write+0x2a>
	else if(pwm > MOTOR_PWM_MAX) pwm = MOTOR_PWM_MAX;
 800ace8:	887b      	ldrh	r3, [r7, #2]
 800acea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800acee:	d902      	bls.n	800acf6 <motor_write+0x2a>
 800acf0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800acf4:	807b      	strh	r3, [r7, #2]

	pwm *= 2; // scale the signal for time
 800acf6:	887b      	ldrh	r3, [r7, #2]
 800acf8:	005b      	lsls	r3, r3, #1
 800acfa:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(m->pTim, m->Channel, pwm);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d105      	bne.n	800ad10 <motor_write+0x44>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	887a      	ldrh	r2, [r7, #2]
 800ad0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800ad0e:	e018      	b.n	800ad42 <motor_write+0x76>
	__HAL_TIM_SET_COMPARE(m->pTim, m->Channel, pwm);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	d105      	bne.n	800ad24 <motor_write+0x58>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	887a      	ldrh	r2, [r7, #2]
 800ad20:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ad22:	e00e      	b.n	800ad42 <motor_write+0x76>
	__HAL_TIM_SET_COMPARE(m->pTim, m->Channel, pwm);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	2b08      	cmp	r3, #8
 800ad2a:	d105      	bne.n	800ad38 <motor_write+0x6c>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	887a      	ldrh	r2, [r7, #2]
 800ad34:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ad36:	e004      	b.n	800ad42 <motor_write+0x76>
	__HAL_TIM_SET_COMPARE(m->pTim, m->Channel, pwm);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	887a      	ldrh	r2, [r7, #2]
 800ad40:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ad42:	bf00      	nop
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
	...

0800ad50 <_write>:
//__IO ITStatus flagMpu = RESET;
//__IO ITStatus flagControl = RESET;

//we can use printf
int _write(int file, unsigned char* p, int len) // for debug through uart3
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	230a      	movs	r3, #10
 800ad62:	68b9      	ldr	r1, [r7, #8]
 800ad64:	4803      	ldr	r0, [pc, #12]	; (800ad74 <_write+0x24>)
 800ad66:	f7fd f8ac 	bl	8007ec2 <HAL_UART_Transmit>
	return len;
 800ad6a:	687b      	ldr	r3, [r7, #4]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20000620 	.word	0x20000620

0800ad78 <rt_OneStep>:

volatile int IsrOverrun = 0;
static boolean_T OverrunFlag = 0;
void rt_OneStep(void)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	af00      	add	r7, sp, #0
  /* Check for overrun. Protect OverrunFlag against preemption */
  if (OverrunFlag++) {
 800ad7c:	4b0d      	ldr	r3, [pc, #52]	; (800adb4 <rt_OneStep+0x3c>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	1c5a      	adds	r2, r3, #1
 800ad82:	b2d1      	uxtb	r1, r2
 800ad84:	4a0b      	ldr	r2, [pc, #44]	; (800adb4 <rt_OneStep+0x3c>)
 800ad86:	7011      	strb	r1, [r2, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d009      	beq.n	800ada0 <rt_OneStep+0x28>
    IsrOverrun = 1;
 800ad8c:	4b0a      	ldr	r3, [pc, #40]	; (800adb8 <rt_OneStep+0x40>)
 800ad8e:	2201      	movs	r2, #1
 800ad90:	601a      	str	r2, [r3, #0]
    OverrunFlag--;
 800ad92:	4b08      	ldr	r3, [pc, #32]	; (800adb4 <rt_OneStep+0x3c>)
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	3b01      	subs	r3, #1
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	4b06      	ldr	r3, [pc, #24]	; (800adb4 <rt_OneStep+0x3c>)
 800ad9c:	701a      	strb	r2, [r3, #0]
    return;
 800ad9e:	e007      	b.n	800adb0 <rt_OneStep+0x38>
  }

//  __enable_irq();
  Second_att_control_codeblock_step();
 800ada0:	f000 f9c6 	bl	800b130 <Second_att_control_codeblock_step>

  /* Get model outputs here */
//  __disable_irq();
  OverrunFlag--;
 800ada4:	4b03      	ldr	r3, [pc, #12]	; (800adb4 <rt_OneStep+0x3c>)
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	4b01      	ldr	r3, [pc, #4]	; (800adb4 <rt_OneStep+0x3c>)
 800adae:	701a      	strb	r2, [r3, #0]
}
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20000438 	.word	0x20000438
 800adb8:	20000434 	.word	0x20000434

0800adbc <userMain>:
}


//struct junTimer debugTimer = {0,};

void userMain(){
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0

    setvbuf(stdout, NULL, _IONBF, 0);
 800adc2:	4b60      	ldr	r3, [pc, #384]	; (800af44 <userMain+0x188>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6898      	ldr	r0, [r3, #8]
 800adc8:	2300      	movs	r3, #0
 800adca:	2202      	movs	r2, #2
 800adcc:	2100      	movs	r1, #0
 800adce:	f002 fcf9 	bl	800d7c4 <setvbuf>

    printf("boot complete\r\n");
 800add2:	485d      	ldr	r0, [pc, #372]	; (800af48 <userMain+0x18c>)
 800add4:	f002 fcde 	bl	800d794 <puts>
    MPU9250_init(&iMPU9250, &hi2c1);
 800add8:	495c      	ldr	r1, [pc, #368]	; (800af4c <userMain+0x190>)
 800adda:	485d      	ldr	r0, [pc, #372]	; (800af50 <userMain+0x194>)
 800addc:	f7fe faf2 	bl	80093c4 <MPU9250_init>

    sbus_start(&huart7);
 800ade0:	485c      	ldr	r0, [pc, #368]	; (800af54 <userMain+0x198>)
 800ade2:	f7ff fd0f 	bl	800a804 <sbus_start>
//    HAL_Delay(10);


    motor_init(&iMotor1, &htim4, TIM_CHANNEL_1);
 800ade6:	2200      	movs	r2, #0
 800ade8:	495b      	ldr	r1, [pc, #364]	; (800af58 <userMain+0x19c>)
 800adea:	485c      	ldr	r0, [pc, #368]	; (800af5c <userMain+0x1a0>)
 800adec:	f7ff ff4c 	bl	800ac88 <motor_init>
    motor_init(&iMotor2, &htim4, TIM_CHANNEL_2);
 800adf0:	2204      	movs	r2, #4
 800adf2:	4959      	ldr	r1, [pc, #356]	; (800af58 <userMain+0x19c>)
 800adf4:	485a      	ldr	r0, [pc, #360]	; (800af60 <userMain+0x1a4>)
 800adf6:	f7ff ff47 	bl	800ac88 <motor_init>
    motor_init(&iMotor3, &htim4, TIM_CHANNEL_3);
 800adfa:	2208      	movs	r2, #8
 800adfc:	4956      	ldr	r1, [pc, #344]	; (800af58 <userMain+0x19c>)
 800adfe:	4859      	ldr	r0, [pc, #356]	; (800af64 <userMain+0x1a8>)
 800ae00:	f7ff ff42 	bl	800ac88 <motor_init>
    motor_init(&iMotor4, &htim4, TIM_CHANNEL_4);
 800ae04:	220c      	movs	r2, #12
 800ae06:	4954      	ldr	r1, [pc, #336]	; (800af58 <userMain+0x19c>)
 800ae08:	4857      	ldr	r0, [pc, #348]	; (800af68 <userMain+0x1ac>)
 800ae0a:	f7ff ff3d 	bl	800ac88 <motor_init>
    motor_init(&iMotor5, &htim3, TIM_CHANNEL_1);
 800ae0e:	2200      	movs	r2, #0
 800ae10:	4956      	ldr	r1, [pc, #344]	; (800af6c <userMain+0x1b0>)
 800ae12:	4857      	ldr	r0, [pc, #348]	; (800af70 <userMain+0x1b4>)
 800ae14:	f7ff ff38 	bl	800ac88 <motor_init>
    motor_init(&iMotor6, &htim3, TIM_CHANNEL_2);
 800ae18:	2204      	movs	r2, #4
 800ae1a:	4954      	ldr	r1, [pc, #336]	; (800af6c <userMain+0x1b0>)
 800ae1c:	4855      	ldr	r0, [pc, #340]	; (800af74 <userMain+0x1b8>)
 800ae1e:	f7ff ff33 	bl	800ac88 <motor_init>

    motor_start(&iMotor1);
 800ae22:	484e      	ldr	r0, [pc, #312]	; (800af5c <userMain+0x1a0>)
 800ae24:	f7ff ff42 	bl	800acac <motor_start>
    motor_start(&iMotor2);
 800ae28:	484d      	ldr	r0, [pc, #308]	; (800af60 <userMain+0x1a4>)
 800ae2a:	f7ff ff3f 	bl	800acac <motor_start>
    motor_start(&iMotor3);
 800ae2e:	484d      	ldr	r0, [pc, #308]	; (800af64 <userMain+0x1a8>)
 800ae30:	f7ff ff3c 	bl	800acac <motor_start>
    motor_start(&iMotor4);
 800ae34:	484c      	ldr	r0, [pc, #304]	; (800af68 <userMain+0x1ac>)
 800ae36:	f7ff ff39 	bl	800acac <motor_start>
    motor_start(&iMotor5);
 800ae3a:	484d      	ldr	r0, [pc, #308]	; (800af70 <userMain+0x1b4>)
 800ae3c:	f7ff ff36 	bl	800acac <motor_start>
    motor_start(&iMotor6);
 800ae40:	484c      	ldr	r0, [pc, #304]	; (800af74 <userMain+0x1b8>)
 800ae42:	f7ff ff33 	bl	800acac <motor_start>

    HAL_TIM_Base_Start_IT(&htim11); // start mpu9250 it
 800ae46:	484c      	ldr	r0, [pc, #304]	; (800af78 <userMain+0x1bc>)
 800ae48:	f7fc f909 	bl	800705e <HAL_TIM_Base_Start_IT>
//    HAL_Delay(10);
    printf("mpu set\r\n");
 800ae4c:	484b      	ldr	r0, [pc, #300]	; (800af7c <userMain+0x1c0>)
 800ae4e:	f002 fca1 	bl	800d794 <puts>
	while(1){
//		sensorHz_print();
		//boot essential part
//		MPU9250_print(&iMPU9250,1);
		if(iMPU9250.itSet == SET){
 800ae52:	4b3f      	ldr	r3, [pc, #252]	; (800af50 <userMain+0x194>)
 800ae54:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d1f9      	bne.n	800ae52 <userMain+0x96>
			estimate_update(&iEstimate, &iMPU9250);
 800ae5e:	493c      	ldr	r1, [pc, #240]	; (800af50 <userMain+0x194>)
 800ae60:	4847      	ldr	r0, [pc, #284]	; (800af80 <userMain+0x1c4>)
 800ae62:	f7ff f8e5 	bl	800a030 <estimate_update>
			uint32_t cur_time=HAL_GetTick();
 800ae66:	f7f7 fb51 	bl	800250c <HAL_GetTick>
 800ae6a:	6078      	str	r0, [r7, #4]

	        estimate_print(&iEstimate);
 800ae6c:	4844      	ldr	r0, [pc, #272]	; (800af80 <userMain+0x1c4>)
 800ae6e:	f7ff f961 	bl	800a134 <estimate_print>
//			printf("R:%f SR:%f P:%f SP:%f T:%lu\r\n",iEstimate.roll,Second_att_control_codeblock_B.urad_max[0], iEstimate.pitch, Second_att_control_codeblock_B.urad_max[1],cur_time);
//			printf("R:%f SR:%f T:%lu\r\n",iEstimate.roll,Second_att_control_codeblock_B.Gain[0],cur_time);

			if(runModel){
 800ae72:	4b44      	ldr	r3, [pc, #272]	; (800af84 <userMain+0x1c8>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d05e      	beq.n	800af3a <userMain+0x17e>
//				junTimer_tic(&debugTimer);
				Second_att_control_codeblock_U.Roll = iEstimate.roll;
 800ae7c:	4b40      	ldr	r3, [pc, #256]	; (800af80 <userMain+0x1c4>)
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	4a41      	ldr	r2, [pc, #260]	; (800af88 <userMain+0x1cc>)
 800ae82:	6013      	str	r3, [r2, #0]
				Second_att_control_codeblock_U.Pitch = iEstimate.pitch;
 800ae84:	4b3e      	ldr	r3, [pc, #248]	; (800af80 <userMain+0x1c4>)
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	4a3f      	ldr	r2, [pc, #252]	; (800af88 <userMain+0x1cc>)
 800ae8a:	6053      	str	r3, [r2, #4]
				Second_att_control_codeblock_U.p = iEstimate.p;
 800ae8c:	4b3c      	ldr	r3, [pc, #240]	; (800af80 <userMain+0x1c4>)
 800ae8e:	69db      	ldr	r3, [r3, #28]
 800ae90:	4a3d      	ldr	r2, [pc, #244]	; (800af88 <userMain+0x1cc>)
 800ae92:	6093      	str	r3, [r2, #8]
				Second_att_control_codeblock_U.q = iEstimate.q;
 800ae94:	4b3a      	ldr	r3, [pc, #232]	; (800af80 <userMain+0x1c4>)
 800ae96:	6a1b      	ldr	r3, [r3, #32]
 800ae98:	4a3b      	ldr	r2, [pc, #236]	; (800af88 <userMain+0x1cc>)
 800ae9a:	60d3      	str	r3, [r2, #12]
				Second_att_control_codeblock_U.r = iEstimate.r;
 800ae9c:	4b38      	ldr	r3, [pc, #224]	; (800af80 <userMain+0x1c4>)
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	4a39      	ldr	r2, [pc, #228]	; (800af88 <userMain+0x1cc>)
 800aea2:	6113      	str	r3, [r2, #16]
				Second_att_control_codeblock_U.set_thrust = sbus_getChannel(1);
 800aea4:	2001      	movs	r0, #1
 800aea6:	f7ff fedd 	bl	800ac64 <sbus_getChannel>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	461a      	mov	r2, r3
 800aeae:	4b36      	ldr	r3, [pc, #216]	; (800af88 <userMain+0x1cc>)
 800aeb0:	829a      	strh	r2, [r3, #20]
				Second_att_control_codeblock_U.set_roll = sbus_getChannel(2);
 800aeb2:	2002      	movs	r0, #2
 800aeb4:	f7ff fed6 	bl	800ac64 <sbus_getChannel>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	461a      	mov	r2, r3
 800aebc:	4b32      	ldr	r3, [pc, #200]	; (800af88 <userMain+0x1cc>)
 800aebe:	82da      	strh	r2, [r3, #22]
				Second_att_control_codeblock_U.set_pitch = sbus_getChannel(3);
 800aec0:	2003      	movs	r0, #3
 800aec2:	f7ff fecf 	bl	800ac64 <sbus_getChannel>
 800aec6:	4603      	mov	r3, r0
 800aec8:	461a      	mov	r2, r3
 800aeca:	4b2f      	ldr	r3, [pc, #188]	; (800af88 <userMain+0x1cc>)
 800aecc:	831a      	strh	r2, [r3, #24]
				Second_att_control_codeblock_U.set_yaw = sbus_getChannel(4);
 800aece:	2004      	movs	r0, #4
 800aed0:	f7ff fec8 	bl	800ac64 <sbus_getChannel>
 800aed4:	4603      	mov	r3, r0
 800aed6:	461a      	mov	r2, r3
 800aed8:	4b2b      	ldr	r3, [pc, #172]	; (800af88 <userMain+0x1cc>)
 800aeda:	835a      	strh	r2, [r3, #26]
				Second_att_control_codeblock_U.Arm_cmd = sbus_getChannel(11);
 800aedc:	200b      	movs	r0, #11
 800aede:	f7ff fec1 	bl	800ac64 <sbus_getChannel>
 800aee2:	4603      	mov	r3, r0
 800aee4:	461a      	mov	r2, r3
 800aee6:	4b28      	ldr	r3, [pc, #160]	; (800af88 <userMain+0x1cc>)
 800aee8:	839a      	strh	r2, [r3, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800aeea:	b672      	cpsid	i

				__disable_irq();
				rt_OneStep();
 800aeec:	f7ff ff44 	bl	800ad78 <rt_OneStep>
  __ASM volatile ("cpsie i" : : : "memory");
 800aef0:	b662      	cpsie	i
				__enable_irq();

				motor_write(&iMotor1, Second_att_control_codeblock_Y.PWM_OUT[0]);
 800aef2:	4b26      	ldr	r3, [pc, #152]	; (800af8c <userMain+0x1d0>)
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	4619      	mov	r1, r3
 800aef8:	4818      	ldr	r0, [pc, #96]	; (800af5c <userMain+0x1a0>)
 800aefa:	f7ff fee7 	bl	800accc <motor_write>
				motor_write(&iMotor2, Second_att_control_codeblock_Y.PWM_OUT[1]);
 800aefe:	4b23      	ldr	r3, [pc, #140]	; (800af8c <userMain+0x1d0>)
 800af00:	885b      	ldrh	r3, [r3, #2]
 800af02:	4619      	mov	r1, r3
 800af04:	4816      	ldr	r0, [pc, #88]	; (800af60 <userMain+0x1a4>)
 800af06:	f7ff fee1 	bl	800accc <motor_write>
				motor_write(&iMotor3, Second_att_control_codeblock_Y.PWM_OUT[2]);
 800af0a:	4b20      	ldr	r3, [pc, #128]	; (800af8c <userMain+0x1d0>)
 800af0c:	889b      	ldrh	r3, [r3, #4]
 800af0e:	4619      	mov	r1, r3
 800af10:	4814      	ldr	r0, [pc, #80]	; (800af64 <userMain+0x1a8>)
 800af12:	f7ff fedb 	bl	800accc <motor_write>
				motor_write(&iMotor4, Second_att_control_codeblock_Y.PWM_OUT[3]);
 800af16:	4b1d      	ldr	r3, [pc, #116]	; (800af8c <userMain+0x1d0>)
 800af18:	88db      	ldrh	r3, [r3, #6]
 800af1a:	4619      	mov	r1, r3
 800af1c:	4812      	ldr	r0, [pc, #72]	; (800af68 <userMain+0x1ac>)
 800af1e:	f7ff fed5 	bl	800accc <motor_write>
				motor_write(&iMotor5, Second_att_control_codeblock_Y.PWM_OUT[4]);
 800af22:	4b1a      	ldr	r3, [pc, #104]	; (800af8c <userMain+0x1d0>)
 800af24:	891b      	ldrh	r3, [r3, #8]
 800af26:	4619      	mov	r1, r3
 800af28:	4811      	ldr	r0, [pc, #68]	; (800af70 <userMain+0x1b4>)
 800af2a:	f7ff fecf 	bl	800accc <motor_write>
				motor_write(&iMotor6, Second_att_control_codeblock_Y.PWM_OUT[5]);
 800af2e:	4b17      	ldr	r3, [pc, #92]	; (800af8c <userMain+0x1d0>)
 800af30:	895b      	ldrh	r3, [r3, #10]
 800af32:	4619      	mov	r1, r3
 800af34:	480f      	ldr	r0, [pc, #60]	; (800af74 <userMain+0x1b8>)
 800af36:	f7ff fec9 	bl	800accc <motor_write>
			}
//			printIn(&Second_att_control_codeblock_U);
			iMPU9250.itSet = RESET;
 800af3a:	4b05      	ldr	r3, [pc, #20]	; (800af50 <userMain+0x194>)
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		if(iMPU9250.itSet == SET){
 800af42:	e786      	b.n	800ae52 <userMain+0x96>
 800af44:	20000114 	.word	0x20000114
 800af48:	0800f55c 	.word	0x0800f55c
 800af4c:	2000048c 	.word	0x2000048c
 800af50:	20000308 	.word	0x20000308
 800af54:	200005e0 	.word	0x200005e0
 800af58:	200004e0 	.word	0x200004e0
 800af5c:	20000b20 	.word	0x20000b20
 800af60:	20000b28 	.word	0x20000b28
 800af64:	20000b30 	.word	0x20000b30
 800af68:	20000b40 	.word	0x20000b40
 800af6c:	20000560 	.word	0x20000560
 800af70:	20000b48 	.word	0x20000b48
 800af74:	20000b38 	.word	0x20000b38
 800af78:	200005a0 	.word	0x200005a0
 800af7c:	0800f56c 	.word	0x0800f56c
 800af80:	2000000c 	.word	0x2000000c
 800af84:	20000048 	.word	0x20000048
 800af88:	20000c88 	.word	0x20000c88
 800af8c:	20000c7c 	.word	0x20000c7c

0800af90 <HAL_I2C_MemRxCpltCallback>:
}



//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
	//mpu9250
	if(hi2c->Instance == I2C1){
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a0d      	ldr	r2, [pc, #52]	; (800afd4 <HAL_I2C_MemRxCpltCallback+0x44>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d113      	bne.n	800afca <HAL_I2C_MemRxCpltCallback+0x3a>
		uint8_t result = MPU9250_callbackMPU9250IT(&iMPU9250);
 800afa2:	480d      	ldr	r0, [pc, #52]	; (800afd8 <HAL_I2C_MemRxCpltCallback+0x48>)
 800afa4:	f7fe fac2 	bl	800952c <MPU9250_callbackMPU9250IT>
 800afa8:	4603      	mov	r3, r0
 800afaa:	73fb      	strb	r3, [r7, #15]
		if(result){
 800afac:	7bfb      	ldrb	r3, [r7, #15]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00b      	beq.n	800afca <HAL_I2C_MemRxCpltCallback+0x3a>
			iMPU9250.hzCnt++;
 800afb2:	4b09      	ldr	r3, [pc, #36]	; (800afd8 <HAL_I2C_MemRxCpltCallback+0x48>)
 800afb4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800afb8:	3301      	adds	r3, #1
 800afba:	b29a      	uxth	r2, r3
 800afbc:	4b06      	ldr	r3, [pc, #24]	; (800afd8 <HAL_I2C_MemRxCpltCallback+0x48>)
 800afbe:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			iMPU9250.itSet = SET;
 800afc2:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <HAL_I2C_MemRxCpltCallback+0x48>)
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		}

	}
}
 800afca:	bf00      	nop
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	40005400 	.word	0x40005400
 800afd8:	20000308 	.word	0x20000308

0800afdc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11){
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a0f      	ldr	r2, [pc, #60]	; (800b028 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d117      	bne.n	800b01e <HAL_TIM_PeriodElapsedCallback+0x42>
		static uint8_t hz_update = 0;
		if(iMPU9250.itSet == RESET){// imu hz timer 100hz
 800afee:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800aff0:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d102      	bne.n	800b000 <HAL_TIM_PeriodElapsedCallback+0x24>
			MPU9250_readMPU9250IT(&iMPU9250);
 800affa:	480c      	ldr	r0, [pc, #48]	; (800b02c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800affc:	f7fe fa82 	bl	8009504 <MPU9250_readMPU9250IT>
		}
		if(++hz_update > 199){
 800b000:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	3301      	adds	r3, #1
 800b006:	b2da      	uxtb	r2, r3
 800b008:	4b09      	ldr	r3, [pc, #36]	; (800b030 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800b00a:	701a      	strb	r2, [r3, #0]
 800b00c:	4b08      	ldr	r3, [pc, #32]	; (800b030 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2bc7      	cmp	r3, #199	; 0xc7
 800b012:	d904      	bls.n	800b01e <HAL_TIM_PeriodElapsedCallback+0x42>
			sensorHz_update();
 800b014:	f7fe ffda 	bl	8009fcc <sensorHz_update>
			hz_update = 0;
 800b018:	4b05      	ldr	r3, [pc, #20]	; (800b030 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800b01a:	2200      	movs	r2, #0
 800b01c:	701a      	strb	r2, [r3, #0]
//			sensorHz_print();
		}
	}
}
 800b01e:	bf00      	nop
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	40014800 	.word	0x40014800
 800b02c:	20000308 	.word	0x20000308
 800b030:	2000043a 	.word	0x2000043a

0800b034 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART7){
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a04      	ldr	r2, [pc, #16]	; (800b054 <HAL_UART_RxCpltCallback+0x20>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d101      	bne.n	800b04a <HAL_UART_RxCpltCallback+0x16>
		sbus_callback();
 800b046:	f7ff fd85 	bl	800ab54 <sbus_callback>
	}
	if(huart->Instance == USART2){
		// telemetry
	}
}
 800b04a:	bf00      	nop
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	40007800 	.word	0x40007800

0800b058 <rt_roundf_snf>:
ExtU_Second_att_control_codeb_T Second_att_control_codeblock_U;

/* External outputs (root outports fed by signals with default storage) */
ExtY_Second_att_control_codeb_T Second_att_control_codeblock_Y;
real32_T rt_roundf_snf(real32_T u)
{
 800b058:	b590      	push	{r4, r7, lr}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T y;
  if ((real32_T)fabs(u) < 8.388608E+6F) {
 800b062:	edd7 7a01 	vldr	s15, [r7, #4]
 800b066:	eef0 7ae7 	vabs.f32	s15, s15
 800b06a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b128 <rt_roundf_snf+0xd0>
 800b06e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b076:	d54c      	bpl.n	800b112 <rt_roundf_snf+0xba>
    if (u >= 0.5F) {
 800b078:	edd7 7a01 	vldr	s15, [r7, #4]
 800b07c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b080:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b088:	db18      	blt.n	800b0bc <rt_roundf_snf+0x64>
      y = (real32_T)floor(u + 0.5F);
 800b08a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b08e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b092:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b096:	ee17 0a90 	vmov	r0, s15
 800b09a:	f7f5 fa65 	bl	8000568 <__aeabi_f2d>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	ec44 3b10 	vmov	d0, r3, r4
 800b0a6:	f000 ff83 	bl	800bfb0 <floor>
 800b0aa:	ec54 3b10 	vmov	r3, r4, d0
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	f7f5 fd89 	bl	8000bc8 <__aeabi_d2f>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	e02c      	b.n	800b116 <rt_roundf_snf+0xbe>
    } else if (u > -0.5F) {
 800b0bc:	edd7 7a01 	vldr	s15, [r7, #4]
 800b0c0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800b0c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0cc:	dd08      	ble.n	800b0e0 <rt_roundf_snf+0x88>
      y = u * 0.0F;
 800b0ce:	edd7 7a01 	vldr	s15, [r7, #4]
 800b0d2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800b12c <rt_roundf_snf+0xd4>
 800b0d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0da:	edc7 7a03 	vstr	s15, [r7, #12]
 800b0de:	e01a      	b.n	800b116 <rt_roundf_snf+0xbe>
    } else {
      y = (real32_T)ceil(u - 0.5F);
 800b0e0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b0e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b0e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0ec:	ee17 0a90 	vmov	r0, s15
 800b0f0:	f7f5 fa3a 	bl	8000568 <__aeabi_f2d>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	ec44 3b10 	vmov	d0, r3, r4
 800b0fc:	f000 fed8 	bl	800beb0 <ceil>
 800b100:	ec54 3b10 	vmov	r3, r4, d0
 800b104:	4618      	mov	r0, r3
 800b106:	4621      	mov	r1, r4
 800b108:	f7f5 fd5e 	bl	8000bc8 <__aeabi_d2f>
 800b10c:	4603      	mov	r3, r0
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	e001      	b.n	800b116 <rt_roundf_snf+0xbe>
    }
  } else {
    y = u;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	60fb      	str	r3, [r7, #12]
  }

  return y;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	ee07 3a90 	vmov	s15, r3
}
 800b11c:	eeb0 0a67 	vmov.f32	s0, s15
 800b120:	3714      	adds	r7, #20
 800b122:	46bd      	mov	sp, r7
 800b124:	bd90      	pop	{r4, r7, pc}
 800b126:	bf00      	nop
 800b128:	4b000000 	.word	0x4b000000
 800b12c:	00000000 	.word	0x00000000

0800b130 <Second_att_control_codeblock_step>:

/* Model step function */
void Second_att_control_codeblock_step(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0

  /* DataTypeConversion: '<S3>/Data Type Conversion' incorporates:
   *  Inport: '<Root>/set_roll'
   */
  Second_att_control_codeblock_B.DataTypeConversion =
    Second_att_control_codeblock_U.set_roll;
 800b136:	4ba8      	ldr	r3, [pc, #672]	; (800b3d8 <Second_att_control_codeblock_step+0x2a8>)
 800b138:	8adb      	ldrh	r3, [r3, #22]
  Second_att_control_codeblock_B.DataTypeConversion =
 800b13a:	ee07 3a90 	vmov	s15, r3
 800b13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b142:	4ba6      	ldr	r3, [pc, #664]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b144:	edc3 7a00 	vstr	s15, [r3]

  /* Fcn: '<S3>/Fcn2' */
  Second_att_control_codeblock_B.Fcn2 =
    (Second_att_control_codeblock_B.DataTypeConversion - 1500.0F) / 500.0F;
 800b148:	4ba4      	ldr	r3, [pc, #656]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b14a:	edd3 7a00 	vldr	s15, [r3]
 800b14e:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800b3e0 <Second_att_control_codeblock_step+0x2b0>
 800b152:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b156:	eddf 6aa3 	vldr	s13, [pc, #652]	; 800b3e4 <Second_att_control_codeblock_step+0x2b4>
 800b15a:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock_B.Fcn2 =
 800b15e:	4b9f      	ldr	r3, [pc, #636]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b160:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Saturate: '<S3>/Saturation9' */
  u0 = Second_att_control_codeblock_B.Fcn2;
 800b164:	4b9d      	ldr	r3, [pc, #628]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	60bb      	str	r3, [r7, #8]
  u1 = Second_att_control_codeblock_P.Saturation9_LowerSat;
 800b16a:	4b9f      	ldr	r3, [pc, #636]	; (800b3e8 <Second_att_control_codeblock_step+0x2b8>)
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	607b      	str	r3, [r7, #4]
  u2 = Second_att_control_codeblock_P.Saturation9_UpperSat;
 800b170:	4b9d      	ldr	r3, [pc, #628]	; (800b3e8 <Second_att_control_codeblock_step+0x2b8>)
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	603b      	str	r3, [r7, #0]
  if (u0 > u2) {
 800b176:	ed97 7a02 	vldr	s14, [r7, #8]
 800b17a:	edd7 7a00 	vldr	s15, [r7]
 800b17e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b186:	dd03      	ble.n	800b190 <Second_att_control_codeblock_step+0x60>
    Second_att_control_codeblock_B.Saturation9 = u2;
 800b188:	4a94      	ldr	r2, [pc, #592]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	6093      	str	r3, [r2, #8]
 800b18e:	e00f      	b.n	800b1b0 <Second_att_control_codeblock_step+0x80>
  } else if (u0 < u1) {
 800b190:	ed97 7a02 	vldr	s14, [r7, #8]
 800b194:	edd7 7a01 	vldr	s15, [r7, #4]
 800b198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a0:	d503      	bpl.n	800b1aa <Second_att_control_codeblock_step+0x7a>
    Second_att_control_codeblock_B.Saturation9 = u1;
 800b1a2:	4a8e      	ldr	r2, [pc, #568]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6093      	str	r3, [r2, #8]
 800b1a8:	e002      	b.n	800b1b0 <Second_att_control_codeblock_step+0x80>
  } else {
    Second_att_control_codeblock_B.Saturation9 = u0;
 800b1aa:	4a8c      	ldr	r2, [pc, #560]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	6093      	str	r3, [r2, #8]

  /* DataTypeConversion: '<S3>/Data Type Conversion1' incorporates:
   *  Inport: '<Root>/set_pitch'
   */
  Second_att_control_codeblock_B.DataTypeConversion1 =
    Second_att_control_codeblock_U.set_pitch;
 800b1b0:	4b89      	ldr	r3, [pc, #548]	; (800b3d8 <Second_att_control_codeblock_step+0x2a8>)
 800b1b2:	8b1b      	ldrh	r3, [r3, #24]
  Second_att_control_codeblock_B.DataTypeConversion1 =
 800b1b4:	ee07 3a90 	vmov	s15, r3
 800b1b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1bc:	4b87      	ldr	r3, [pc, #540]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b1be:	edc3 7a03 	vstr	s15, [r3, #12]

  /* Fcn: '<S3>/Fcn5' */
  Second_att_control_codeblock_B.Fcn5 =
    (Second_att_control_codeblock_B.DataTypeConversion1 - 1500.0F) / 500.0F;
 800b1c2:	4b86      	ldr	r3, [pc, #536]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b1c4:	edd3 7a03 	vldr	s15, [r3, #12]
 800b1c8:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800b3e0 <Second_att_control_codeblock_step+0x2b0>
 800b1cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b1d0:	eddf 6a84 	vldr	s13, [pc, #528]	; 800b3e4 <Second_att_control_codeblock_step+0x2b4>
 800b1d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock_B.Fcn5 =
 800b1d8:	4b80      	ldr	r3, [pc, #512]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b1da:	edc3 7a04 	vstr	s15, [r3, #16]

  /* Saturate: '<S3>/Saturation8' */
  u0 = Second_att_control_codeblock_B.Fcn5;
 800b1de:	4b7f      	ldr	r3, [pc, #508]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	60bb      	str	r3, [r7, #8]
  u1 = Second_att_control_codeblock_P.Saturation8_LowerSat;
 800b1e4:	4b80      	ldr	r3, [pc, #512]	; (800b3e8 <Second_att_control_codeblock_step+0x2b8>)
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	607b      	str	r3, [r7, #4]
  u2 = Second_att_control_codeblock_P.Saturation8_UpperSat;
 800b1ea:	4b7f      	ldr	r3, [pc, #508]	; (800b3e8 <Second_att_control_codeblock_step+0x2b8>)
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	603b      	str	r3, [r7, #0]
  if (u0 > u2) {
 800b1f0:	ed97 7a02 	vldr	s14, [r7, #8]
 800b1f4:	edd7 7a00 	vldr	s15, [r7]
 800b1f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b200:	dd03      	ble.n	800b20a <Second_att_control_codeblock_step+0xda>
    Second_att_control_codeblock_B.Saturation8 = u2;
 800b202:	4a76      	ldr	r2, [pc, #472]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	6153      	str	r3, [r2, #20]
 800b208:	e00f      	b.n	800b22a <Second_att_control_codeblock_step+0xfa>
  } else if (u0 < u1) {
 800b20a:	ed97 7a02 	vldr	s14, [r7, #8]
 800b20e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b212:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b21a:	d503      	bpl.n	800b224 <Second_att_control_codeblock_step+0xf4>
    Second_att_control_codeblock_B.Saturation8 = u1;
 800b21c:	4a6f      	ldr	r2, [pc, #444]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6153      	str	r3, [r2, #20]
 800b222:	e002      	b.n	800b22a <Second_att_control_codeblock_step+0xfa>
  } else {
    Second_att_control_codeblock_B.Saturation8 = u0;
 800b224:	4a6d      	ldr	r2, [pc, #436]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	6153      	str	r3, [r2, #20]

  /* End of Saturate: '<S3>/Saturation8' */

  /* Gain: '<S3>/Gain2' */
  Second_att_control_codeblock_B.Gain2[0] =
    Second_att_control_codeblock_P.Gain2_Gain[0] *
 800b22a:	4b6f      	ldr	r3, [pc, #444]	; (800b3e8 <Second_att_control_codeblock_step+0x2b8>)
 800b22c:	ed93 7a07 	vldr	s14, [r3, #28]
    Second_att_control_codeblock_B.Saturation9;
 800b230:	4b6a      	ldr	r3, [pc, #424]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b232:	edd3 7a02 	vldr	s15, [r3, #8]
    Second_att_control_codeblock_P.Gain2_Gain[0] *
 800b236:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock_B.Gain2[0] =
 800b23a:	4b68      	ldr	r3, [pc, #416]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b23c:	edc3 7a06 	vstr	s15, [r3, #24]
  Second_att_control_codeblock_B.Gain2[1] =
    Second_att_control_codeblock_P.Gain2_Gain[1] *
 800b240:	4b69      	ldr	r3, [pc, #420]	; (800b3e8 <Second_att_control_codeblock_step+0x2b8>)
 800b242:	ed93 7a08 	vldr	s14, [r3, #32]
    Second_att_control_codeblock_B.Saturation8;
 800b246:	4b65      	ldr	r3, [pc, #404]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b248:	edd3 7a05 	vldr	s15, [r3, #20]
    Second_att_control_codeblock_P.Gain2_Gain[1] *
 800b24c:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock_B.Gain2[1] =
 800b250:	4b62      	ldr	r3, [pc, #392]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b252:	edc3 7a07 	vstr	s15, [r3, #28]

  /* Gain: '<S3>/Gain' */
  Second_att_control_codeblock_B.Gain[0] = Max_angle_coef *
    Second_att_control_codeblock_B.Gain2[0];
 800b256:	4b61      	ldr	r3, [pc, #388]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b258:	edd3 7a06 	vldr	s15, [r3, #24]
  Second_att_control_codeblock_B.Gain[0] = Max_angle_coef *
 800b25c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b260:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b264:	4b5d      	ldr	r3, [pc, #372]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b266:	edc3 7a08 	vstr	s15, [r3, #32]
  Second_att_control_codeblock_B.Gain[1] = Max_angle_coef *
    Second_att_control_codeblock_B.Gain2[1];
 800b26a:	4b5c      	ldr	r3, [pc, #368]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b26c:	edd3 7a07 	vldr	s15, [r3, #28]
  Second_att_control_codeblock_B.Gain[1] = Max_angle_coef *
 800b270:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b274:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b278:	4b58      	ldr	r3, [pc, #352]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b27a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  /* Sum: '<S5>/Sum' incorporates:
   *  Inport: '<Root>/Roll'
   */
  Second_att_control_codeblock_B.pitchrollerror =
    Second_att_control_codeblock_B.Gain[0] - Second_att_control_codeblock_U.Roll;
 800b27e:	4b57      	ldr	r3, [pc, #348]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b280:	ed93 7a08 	vldr	s14, [r3, #32]
 800b284:	4b54      	ldr	r3, [pc, #336]	; (800b3d8 <Second_att_control_codeblock_step+0x2a8>)
 800b286:	edd3 7a00 	vldr	s15, [r3]
 800b28a:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.pitchrollerror =
 800b28e:	4b53      	ldr	r3, [pc, #332]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b290:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  /* Gain: '<S5>/P_pr' */
  Second_att_control_codeblock_B.P_pr = Angle_rate_roll_PI_kP *
    Second_att_control_codeblock_B.pitchrollerror;
 800b294:	4b51      	ldr	r3, [pc, #324]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b296:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
  Second_att_control_codeblock_B.P_pr = Angle_rate_roll_PI_kP *
 800b29a:	4b54      	ldr	r3, [pc, #336]	; (800b3ec <Second_att_control_codeblock_step+0x2bc>)
 800b29c:	edd3 7a00 	vldr	s15, [r3]
 800b2a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a4:	4b4d      	ldr	r3, [pc, #308]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b2a6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  /* DiscreteIntegrator: '<S5>/Discrete-Time Integrator' */
  Second_att_control_codeblock_B.DiscreteTimeIntegrator =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE;
 800b2aa:	4b51      	ldr	r3, [pc, #324]	; (800b3f0 <Second_att_control_codeblock_step+0x2c0>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
  Second_att_control_codeblock_B.DiscreteTimeIntegrator =
 800b2ae:	4a4b      	ldr	r2, [pc, #300]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b2b0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Gain: '<S5>/I_pr' */
  Second_att_control_codeblock_B.I_pr = Angle_rate_roll_PI_kI *
    Second_att_control_codeblock_B.DiscreteTimeIntegrator;
 800b2b2:	4b4a      	ldr	r3, [pc, #296]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b2b4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
  Second_att_control_codeblock_B.I_pr = Angle_rate_roll_PI_kI *
 800b2b8:	4b4e      	ldr	r3, [pc, #312]	; (800b3f4 <Second_att_control_codeblock_step+0x2c4>)
 800b2ba:	edd3 7a00 	vldr	s15, [r3]
 800b2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2c2:	4b46      	ldr	r3, [pc, #280]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b2c4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  /* Sum: '<S5>/Sum16' */
  Second_att_control_codeblock_B.P_pr_m = Second_att_control_codeblock_B.P_pr +
 800b2c8:	4b44      	ldr	r3, [pc, #272]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b2ca:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    Second_att_control_codeblock_B.I_pr;
 800b2ce:	4b43      	ldr	r3, [pc, #268]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b2d0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
  Second_att_control_codeblock_B.P_pr_m = Second_att_control_codeblock_B.P_pr +
 800b2d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2d8:	4b40      	ldr	r3, [pc, #256]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b2da:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  /* Sum: '<S6>/Sum' incorporates:
   *  Inport: '<Root>/p'
   */
  Second_att_control_codeblock_B.pitchrollerror_b =
    Second_att_control_codeblock_B.P_pr_m - Second_att_control_codeblock_U.p;
 800b2de:	4b3f      	ldr	r3, [pc, #252]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b2e0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800b2e4:	4b3c      	ldr	r3, [pc, #240]	; (800b3d8 <Second_att_control_codeblock_step+0x2a8>)
 800b2e6:	edd3 7a02 	vldr	s15, [r3, #8]
 800b2ea:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.pitchrollerror_b =
 800b2ee:	4b3b      	ldr	r3, [pc, #236]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b2f0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  /* Gain: '<S6>/P_pr' */
  Second_att_control_codeblock_B.P_pr_b = kP_Roll_rate_PID *
    Second_att_control_codeblock_B.pitchrollerror_b;
 800b2f4:	4b39      	ldr	r3, [pc, #228]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b2f6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
  Second_att_control_codeblock_B.P_pr_b = kP_Roll_rate_PID *
 800b2fa:	4b3f      	ldr	r3, [pc, #252]	; (800b3f8 <Second_att_control_codeblock_step+0x2c8>)
 800b2fc:	edd3 7a00 	vldr	s15, [r3]
 800b300:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b304:	4b35      	ldr	r3, [pc, #212]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b306:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

  /* DiscreteIntegrator: '<S6>/Discrete-Time Integrator' */
  Second_att_control_codeblock_B.DiscreteTimeIntegrator_h =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k;
 800b30a:	4b39      	ldr	r3, [pc, #228]	; (800b3f0 <Second_att_control_codeblock_step+0x2c0>)
 800b30c:	685b      	ldr	r3, [r3, #4]
  Second_att_control_codeblock_B.DiscreteTimeIntegrator_h =
 800b30e:	4a33      	ldr	r2, [pc, #204]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b310:	6453      	str	r3, [r2, #68]	; 0x44

  /* Gain: '<S6>/I_pr' */
  Second_att_control_codeblock_B.I_pr_d = kI_Roll_rate_PID *
    Second_att_control_codeblock_B.DiscreteTimeIntegrator_h;
 800b312:	4b32      	ldr	r3, [pc, #200]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b314:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
  Second_att_control_codeblock_B.I_pr_d = kI_Roll_rate_PID *
 800b318:	4b38      	ldr	r3, [pc, #224]	; (800b3fc <Second_att_control_codeblock_step+0x2cc>)
 800b31a:	edd3 7a00 	vldr	s15, [r3]
 800b31e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b322:	4b2e      	ldr	r3, [pc, #184]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b324:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
   *
   * About '<S8>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  Second_att_control_codeblock_B.TSamp =
    Second_att_control_codeblock_B.pitchrollerror_b *
 800b328:	4b2c      	ldr	r3, [pc, #176]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b32a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
    Second_att_control_codeblock_P.TSamp_WtEt;
 800b32e:	4b2e      	ldr	r3, [pc, #184]	; (800b3e8 <Second_att_control_codeblock_step+0x2b8>)
 800b330:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    Second_att_control_codeblock_B.pitchrollerror_b *
 800b334:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock_B.TSamp =
 800b338:	4b28      	ldr	r3, [pc, #160]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b33a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
   *
   * Block description for '<S8>/UD':
   *
   *  Store in Global RAM
   */
  Second_att_control_codeblock_B.Uk1 = Second_att_control_codeblock_DW.UD_DSTATE;
 800b33e:	4b2c      	ldr	r3, [pc, #176]	; (800b3f0 <Second_att_control_codeblock_step+0x2c0>)
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	4a26      	ldr	r2, [pc, #152]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b344:	6513      	str	r3, [r2, #80]	; 0x50
   *
   * Block description for '<S8>/Diff':
   *
   *  Add in CPU
   */
  Second_att_control_codeblock_B.Diff = Second_att_control_codeblock_B.TSamp -
 800b346:	4b25      	ldr	r3, [pc, #148]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b348:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    Second_att_control_codeblock_B.Uk1;
 800b34c:	4b23      	ldr	r3, [pc, #140]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b34e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
  Second_att_control_codeblock_B.Diff = Second_att_control_codeblock_B.TSamp -
 800b352:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b356:	4b21      	ldr	r3, [pc, #132]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b358:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  /* Gain: '<S6>/D_pr' */
  Second_att_control_codeblock_B.D_pr = kD_Roll_rate_PID *
    Second_att_control_codeblock_B.Diff;
 800b35c:	4b1f      	ldr	r3, [pc, #124]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b35e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
  Second_att_control_codeblock_B.D_pr = kD_Roll_rate_PID *
 800b362:	4b27      	ldr	r3, [pc, #156]	; (800b400 <Second_att_control_codeblock_step+0x2d0>)
 800b364:	edd3 7a00 	vldr	s15, [r3]
 800b368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36c:	4b1b      	ldr	r3, [pc, #108]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b36e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  /* Sum: '<S6>/Sum16' */
  Second_att_control_codeblock_B.P_pr_d = (Second_att_control_codeblock_B.P_pr_b
 800b372:	4b1a      	ldr	r3, [pc, #104]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b374:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
    + Second_att_control_codeblock_B.I_pr_d) +
 800b378:	4b18      	ldr	r3, [pc, #96]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b37a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800b37e:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock_B.D_pr;
 800b382:	4b16      	ldr	r3, [pc, #88]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b384:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
    + Second_att_control_codeblock_B.I_pr_d) +
 800b388:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.P_pr_d = (Second_att_control_codeblock_B.P_pr_b
 800b38c:	4b13      	ldr	r3, [pc, #76]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b38e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

  /* Saturate: '<S6>/Saturation' */
  u0 = Second_att_control_codeblock_B.P_pr_d;
 800b392:	4b12      	ldr	r3, [pc, #72]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b396:	60bb      	str	r3, [r7, #8]
  u1 = Second_att_control_codeblock_P.Saturation_LowerSat;
 800b398:	4b13      	ldr	r3, [pc, #76]	; (800b3e8 <Second_att_control_codeblock_step+0x2b8>)
 800b39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b39c:	607b      	str	r3, [r7, #4]
  u2 = Second_att_control_codeblock_P.Saturation_UpperSat;
 800b39e:	4b12      	ldr	r3, [pc, #72]	; (800b3e8 <Second_att_control_codeblock_step+0x2b8>)
 800b3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a2:	603b      	str	r3, [r7, #0]
  if (u0 > u2) {
 800b3a4:	ed97 7a02 	vldr	s14, [r7, #8]
 800b3a8:	edd7 7a00 	vldr	s15, [r7]
 800b3ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b4:	dd03      	ble.n	800b3be <Second_att_control_codeblock_step+0x28e>
    Second_att_control_codeblock_B.Saturation = u2;
 800b3b6:	4a09      	ldr	r2, [pc, #36]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	6613      	str	r3, [r2, #96]	; 0x60
 800b3bc:	e025      	b.n	800b40a <Second_att_control_codeblock_step+0x2da>
  } else if (u0 < u1) {
 800b3be:	ed97 7a02 	vldr	s14, [r7, #8]
 800b3c2:	edd7 7a01 	vldr	s15, [r7, #4]
 800b3c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ce:	d519      	bpl.n	800b404 <Second_att_control_codeblock_step+0x2d4>
    Second_att_control_codeblock_B.Saturation = u1;
 800b3d0:	4a02      	ldr	r2, [pc, #8]	; (800b3dc <Second_att_control_codeblock_step+0x2ac>)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6613      	str	r3, [r2, #96]	; 0x60
 800b3d6:	e018      	b.n	800b40a <Second_att_control_codeblock_step+0x2da>
 800b3d8:	20000c88 	.word	0x20000c88
 800b3dc:	20000b50 	.word	0x20000b50
 800b3e0:	44bb8000 	.word	0x44bb8000
 800b3e4:	43fa0000 	.word	0x43fa0000
 800b3e8:	20000080 	.word	0x20000080
 800b3ec:	20000058 	.word	0x20000058
 800b3f0:	20000c58 	.word	0x20000c58
 800b3f4:	20000054 	.word	0x20000054
 800b3f8:	20000078 	.word	0x20000078
 800b3fc:	2000006c 	.word	0x2000006c
 800b400:	20000064 	.word	0x20000064
  } else {
    Second_att_control_codeblock_B.Saturation = u0;
 800b404:	4ab7      	ldr	r2, [pc, #732]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	6613      	str	r3, [r2, #96]	; 0x60

  /* End of Saturate: '<S6>/Saturation' */

  /* Gain: '<S6>/Gain' */
  Second_att_control_codeblock_B.Gain_p =
    Second_att_control_codeblock_P.Gain_Gain *
 800b40a:	4bb7      	ldr	r3, [pc, #732]	; (800b6e8 <Second_att_control_codeblock_step+0x5b8>)
 800b40c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
    Second_att_control_codeblock_B.Saturation;
 800b410:	4bb4      	ldr	r3, [pc, #720]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b412:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
    Second_att_control_codeblock_P.Gain_Gain *
 800b416:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock_B.Gain_p =
 800b41a:	4bb2      	ldr	r3, [pc, #712]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b41c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

  /* Sum: '<S5>/Sum2' incorporates:
   *  Inport: '<Root>/Pitch'
   */
  Second_att_control_codeblock_B.pitchrollerror_m =
    Second_att_control_codeblock_B.Gain[1] -
 800b420:	4bb0      	ldr	r3, [pc, #704]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b422:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    Second_att_control_codeblock_U.Pitch;
 800b426:	4bb1      	ldr	r3, [pc, #708]	; (800b6ec <Second_att_control_codeblock_step+0x5bc>)
 800b428:	edd3 7a01 	vldr	s15, [r3, #4]
    Second_att_control_codeblock_B.Gain[1] -
 800b42c:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.pitchrollerror_m =
 800b430:	4bac      	ldr	r3, [pc, #688]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b432:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

  /* Gain: '<S5>/P_pr1' */
  Second_att_control_codeblock_B.P_pr1 = Angle_rate_pitch_kP *
    Second_att_control_codeblock_B.pitchrollerror_m;
 800b436:	4bab      	ldr	r3, [pc, #684]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b438:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
  Second_att_control_codeblock_B.P_pr1 = Angle_rate_pitch_kP *
 800b43c:	4bac      	ldr	r3, [pc, #688]	; (800b6f0 <Second_att_control_codeblock_step+0x5c0>)
 800b43e:	edd3 7a00 	vldr	s15, [r3]
 800b442:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b446:	4ba7      	ldr	r3, [pc, #668]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b448:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  /* DiscreteIntegrator: '<S5>/Discrete-Time Integrator1' */
  Second_att_control_codeblock_B.DiscreteTimeIntegrator1 =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE;
 800b44c:	4ba9      	ldr	r3, [pc, #676]	; (800b6f4 <Second_att_control_codeblock_step+0x5c4>)
 800b44e:	68db      	ldr	r3, [r3, #12]
  Second_att_control_codeblock_B.DiscreteTimeIntegrator1 =
 800b450:	4aa4      	ldr	r2, [pc, #656]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b452:	6713      	str	r3, [r2, #112]	; 0x70

  /* Gain: '<S5>/I_pr1' */
  Second_att_control_codeblock_B.I_pr1 = Angle_rate_pitch_kI *
    Second_att_control_codeblock_B.DiscreteTimeIntegrator1;
 800b454:	4ba3      	ldr	r3, [pc, #652]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b456:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
  Second_att_control_codeblock_B.I_pr1 = Angle_rate_pitch_kI *
 800b45a:	4ba7      	ldr	r3, [pc, #668]	; (800b6f8 <Second_att_control_codeblock_step+0x5c8>)
 800b45c:	edd3 7a00 	vldr	s15, [r3]
 800b460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b464:	4b9f      	ldr	r3, [pc, #636]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b466:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

  /* Sum: '<S5>/Sum1' */
  Second_att_control_codeblock_B.P_pr_o = Second_att_control_codeblock_B.P_pr1 +
 800b46a:	4b9e      	ldr	r3, [pc, #632]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b46c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
    Second_att_control_codeblock_B.I_pr1;
 800b470:	4b9c      	ldr	r3, [pc, #624]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b472:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
  Second_att_control_codeblock_B.P_pr_o = Second_att_control_codeblock_B.P_pr1 +
 800b476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b47a:	4b9a      	ldr	r3, [pc, #616]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b47c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

  /* Sum: '<S6>/Sum1' incorporates:
   *  Inport: '<Root>/q'
   */
  Second_att_control_codeblock_B.pitchrollerror_i =
    Second_att_control_codeblock_B.P_pr_o - Second_att_control_codeblock_U.q;
 800b480:	4b98      	ldr	r3, [pc, #608]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b482:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800b486:	4b99      	ldr	r3, [pc, #612]	; (800b6ec <Second_att_control_codeblock_step+0x5bc>)
 800b488:	edd3 7a03 	vldr	s15, [r3, #12]
 800b48c:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.pitchrollerror_i =
 800b490:	4b94      	ldr	r3, [pc, #592]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b492:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

  /* Gain: '<S6>/P_pr1' */
  Second_att_control_codeblock_B.P_pr1_p = kP_Pitch_rate_PID *
    Second_att_control_codeblock_B.pitchrollerror_i;
 800b496:	4b93      	ldr	r3, [pc, #588]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b498:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
  Second_att_control_codeblock_B.P_pr1_p = kP_Pitch_rate_PID *
 800b49c:	4b97      	ldr	r3, [pc, #604]	; (800b6fc <Second_att_control_codeblock_step+0x5cc>)
 800b49e:	edd3 7a00 	vldr	s15, [r3]
 800b4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a6:	4b8f      	ldr	r3, [pc, #572]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b4a8:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

  /* DiscreteIntegrator: '<S6>/Discrete-Time Integrator1' */
  Second_att_control_codeblock_B.DiscreteTimeIntegrator1_p =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d;
 800b4ac:	4b91      	ldr	r3, [pc, #580]	; (800b6f4 <Second_att_control_codeblock_step+0x5c4>)
 800b4ae:	691b      	ldr	r3, [r3, #16]
  Second_att_control_codeblock_B.DiscreteTimeIntegrator1_p =
 800b4b0:	4a8c      	ldr	r2, [pc, #560]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b4b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Gain: '<S6>/I_pr1' */
  Second_att_control_codeblock_B.I_pr1_j = kI_Pitch_rate_PID *
    Second_att_control_codeblock_B.DiscreteTimeIntegrator1_p;
 800b4b6:	4b8b      	ldr	r3, [pc, #556]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b4b8:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
  Second_att_control_codeblock_B.I_pr1_j = kI_Pitch_rate_PID *
 800b4bc:	4b90      	ldr	r3, [pc, #576]	; (800b700 <Second_att_control_codeblock_step+0x5d0>)
 800b4be:	edd3 7a00 	vldr	s15, [r3]
 800b4c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c6:	4b87      	ldr	r3, [pc, #540]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b4c8:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
   *
   * About '<S9>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  Second_att_control_codeblock_B.TSamp_h =
    Second_att_control_codeblock_B.pitchrollerror_i *
 800b4cc:	4b85      	ldr	r3, [pc, #532]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b4ce:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
    Second_att_control_codeblock_P.TSamp_WtEt_l;
 800b4d2:	4b85      	ldr	r3, [pc, #532]	; (800b6e8 <Second_att_control_codeblock_step+0x5b8>)
 800b4d4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
    Second_att_control_codeblock_B.pitchrollerror_i *
 800b4d8:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock_B.TSamp_h =
 800b4dc:	4b81      	ldr	r3, [pc, #516]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b4de:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
   * Block description for '<S9>/UD':
   *
   *  Store in Global RAM
   */
  Second_att_control_codeblock_B.Uk1_i =
    Second_att_control_codeblock_DW.UD_DSTATE_e;
 800b4e2:	4b84      	ldr	r3, [pc, #528]	; (800b6f4 <Second_att_control_codeblock_step+0x5c4>)
 800b4e4:	695b      	ldr	r3, [r3, #20]
  Second_att_control_codeblock_B.Uk1_i =
 800b4e6:	4a7f      	ldr	r2, [pc, #508]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b4e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   *
   * Block description for '<S9>/Diff':
   *
   *  Add in CPU
   */
  Second_att_control_codeblock_B.Diff_l = Second_att_control_codeblock_B.TSamp_h
 800b4ec:	4b7d      	ldr	r3, [pc, #500]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b4ee:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
    - Second_att_control_codeblock_B.Uk1_i;
 800b4f2:	4b7c      	ldr	r3, [pc, #496]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b4f4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800b4f8:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.Diff_l = Second_att_control_codeblock_B.TSamp_h
 800b4fc:	4b79      	ldr	r3, [pc, #484]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b4fe:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

  /* Gain: '<S6>/D_pr1' */
  Second_att_control_codeblock_B.D_pr1 = kD_Pitch_rate_PID *
    Second_att_control_codeblock_B.Diff_l;
 800b502:	4b78      	ldr	r3, [pc, #480]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b504:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
  Second_att_control_codeblock_B.D_pr1 = kD_Pitch_rate_PID *
 800b508:	4b7e      	ldr	r3, [pc, #504]	; (800b704 <Second_att_control_codeblock_step+0x5d4>)
 800b50a:	edd3 7a00 	vldr	s15, [r3]
 800b50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b512:	4b74      	ldr	r3, [pc, #464]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b514:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

  /* Sum: '<S6>/Sum2' */
  Second_att_control_codeblock_B.P_pr_j =
    (Second_att_control_codeblock_B.P_pr1_p +
 800b518:	4b72      	ldr	r3, [pc, #456]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b51a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
     Second_att_control_codeblock_B.I_pr1_j) +
 800b51e:	4b71      	ldr	r3, [pc, #452]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b520:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
    (Second_att_control_codeblock_B.P_pr1_p +
 800b524:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock_B.D_pr1;
 800b528:	4b6e      	ldr	r3, [pc, #440]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b52a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
     Second_att_control_codeblock_B.I_pr1_j) +
 800b52e:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.P_pr_j =
 800b532:	4b6c      	ldr	r3, [pc, #432]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b534:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

  /* Saturate: '<S6>/Saturation1' */
  u0 = Second_att_control_codeblock_B.P_pr_j;
 800b538:	4b6a      	ldr	r3, [pc, #424]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b53a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b53e:	60bb      	str	r3, [r7, #8]
  u1 = Second_att_control_codeblock_P.Saturation1_LowerSat;
 800b540:	4b69      	ldr	r3, [pc, #420]	; (800b6e8 <Second_att_control_codeblock_step+0x5b8>)
 800b542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b544:	607b      	str	r3, [r7, #4]
  u2 = Second_att_control_codeblock_P.Saturation1_UpperSat;
 800b546:	4b68      	ldr	r3, [pc, #416]	; (800b6e8 <Second_att_control_codeblock_step+0x5b8>)
 800b548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b54a:	603b      	str	r3, [r7, #0]
  if (u0 > u2) {
 800b54c:	ed97 7a02 	vldr	s14, [r7, #8]
 800b550:	edd7 7a00 	vldr	s15, [r7]
 800b554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b55c:	dd04      	ble.n	800b568 <Second_att_control_codeblock_step+0x438>
    Second_att_control_codeblock_B.Saturation1 = u2;
 800b55e:	4a61      	ldr	r2, [pc, #388]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800b566:	e011      	b.n	800b58c <Second_att_control_codeblock_step+0x45c>
  } else if (u0 < u1) {
 800b568:	ed97 7a02 	vldr	s14, [r7, #8]
 800b56c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b570:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b578:	d504      	bpl.n	800b584 <Second_att_control_codeblock_step+0x454>
    Second_att_control_codeblock_B.Saturation1 = u1;
 800b57a:	4a5a      	ldr	r2, [pc, #360]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800b582:	e003      	b.n	800b58c <Second_att_control_codeblock_step+0x45c>
  } else {
    Second_att_control_codeblock_B.Saturation1 = u0;
 800b584:	4a57      	ldr	r2, [pc, #348]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* End of Saturate: '<S6>/Saturation1' */

  /* Gain: '<S6>/Gain1' */
  Second_att_control_codeblock_B.Gain1 =
    Second_att_control_codeblock_P.Gain1_Gain *
 800b58c:	4b56      	ldr	r3, [pc, #344]	; (800b6e8 <Second_att_control_codeblock_step+0x5b8>)
 800b58e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
    Second_att_control_codeblock_B.Saturation1;
 800b592:	4b54      	ldr	r3, [pc, #336]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b594:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
    Second_att_control_codeblock_P.Gain1_Gain *
 800b598:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock_B.Gain1 =
 800b59c:	4b51      	ldr	r3, [pc, #324]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b59e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

  /* DataTypeConversion: '<S3>/Data Type Conversion2' incorporates:
   *  Inport: '<Root>/set_yaw'
   */
  Second_att_control_codeblock_B.DataTypeConversion2 =
    Second_att_control_codeblock_U.set_yaw;
 800b5a2:	4b52      	ldr	r3, [pc, #328]	; (800b6ec <Second_att_control_codeblock_step+0x5bc>)
 800b5a4:	8b5b      	ldrh	r3, [r3, #26]
  Second_att_control_codeblock_B.DataTypeConversion2 =
 800b5a6:	ee07 3a90 	vmov	s15, r3
 800b5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ae:	4b4d      	ldr	r3, [pc, #308]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b5b0:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

  /* Fcn: '<S3>/Fcn7' */
  Second_att_control_codeblock_B.Fcn7 =
    (Second_att_control_codeblock_B.DataTypeConversion2 - 1500.0F) / 500.0F;
 800b5b4:	4b4b      	ldr	r3, [pc, #300]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b5b6:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800b5ba:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800b708 <Second_att_control_codeblock_step+0x5d8>
 800b5be:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b5c2:	eddf 6a52 	vldr	s13, [pc, #328]	; 800b70c <Second_att_control_codeblock_step+0x5dc>
 800b5c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock_B.Fcn7 =
 800b5ca:	4b46      	ldr	r3, [pc, #280]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b5cc:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac

  /* Saturate: '<S3>/Saturation7' */
  u0 = Second_att_control_codeblock_B.Fcn7;
 800b5d0:	4b44      	ldr	r3, [pc, #272]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b5d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b5d6:	60bb      	str	r3, [r7, #8]
  u1 = Second_att_control_codeblock_P.Saturation7_LowerSat;
 800b5d8:	4b43      	ldr	r3, [pc, #268]	; (800b6e8 <Second_att_control_codeblock_step+0x5b8>)
 800b5da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5dc:	607b      	str	r3, [r7, #4]
  u2 = Second_att_control_codeblock_P.Saturation7_UpperSat;
 800b5de:	4b42      	ldr	r3, [pc, #264]	; (800b6e8 <Second_att_control_codeblock_step+0x5b8>)
 800b5e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5e2:	603b      	str	r3, [r7, #0]
  if (u0 > u2) {
 800b5e4:	ed97 7a02 	vldr	s14, [r7, #8]
 800b5e8:	edd7 7a00 	vldr	s15, [r7]
 800b5ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f4:	dd04      	ble.n	800b600 <Second_att_control_codeblock_step+0x4d0>
    Second_att_control_codeblock_B.Saturation7 = u2;
 800b5f6:	4a3b      	ldr	r2, [pc, #236]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 800b5fe:	e011      	b.n	800b624 <Second_att_control_codeblock_step+0x4f4>
  } else if (u0 < u1) {
 800b600:	ed97 7a02 	vldr	s14, [r7, #8]
 800b604:	edd7 7a01 	vldr	s15, [r7, #4]
 800b608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b610:	d504      	bpl.n	800b61c <Second_att_control_codeblock_step+0x4ec>
    Second_att_control_codeblock_B.Saturation7 = u1;
 800b612:	4a34      	ldr	r2, [pc, #208]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 800b61a:	e003      	b.n	800b624 <Second_att_control_codeblock_step+0x4f4>
  } else {
    Second_att_control_codeblock_B.Saturation7 = u0;
 800b61c:	4a31      	ldr	r2, [pc, #196]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Sum: '<S7>/Sum' incorporates:
   *  Inport: '<Root>/r'
   */
  Second_att_control_codeblock_B.Sum =
    Second_att_control_codeblock_B.Saturation7 -
 800b624:	4b2f      	ldr	r3, [pc, #188]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b626:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
    Second_att_control_codeblock_U.r;
 800b62a:	4b30      	ldr	r3, [pc, #192]	; (800b6ec <Second_att_control_codeblock_step+0x5bc>)
 800b62c:	edd3 7a04 	vldr	s15, [r3, #16]
    Second_att_control_codeblock_B.Saturation7 -
 800b630:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum =
 800b634:	4b2b      	ldr	r3, [pc, #172]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b636:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

  /* Gain: '<S7>/Gain' */
  Second_att_control_codeblock_B.Gain_f = Yaw_angel_rate_P *
    Second_att_control_codeblock_B.Sum;
 800b63a:	4b2a      	ldr	r3, [pc, #168]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b63c:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
  Second_att_control_codeblock_B.Gain_f = Yaw_angel_rate_P *
 800b640:	4b33      	ldr	r3, [pc, #204]	; (800b710 <Second_att_control_codeblock_step+0x5e0>)
 800b642:	edd3 7a00 	vldr	s15, [r3]
 800b646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b64a:	4b26      	ldr	r3, [pc, #152]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b64c:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8

  /* Gain: '<S47>/Proportional Gain' */
  Second_att_control_codeblock_B.ProportionalGain = kP_Yaw_rate_PID *
    Second_att_control_codeblock_B.Gain_f;
 800b650:	4b24      	ldr	r3, [pc, #144]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b652:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
  Second_att_control_codeblock_B.ProportionalGain = kP_Yaw_rate_PID *
 800b656:	4b2f      	ldr	r3, [pc, #188]	; (800b714 <Second_att_control_codeblock_step+0x5e4>)
 800b658:	edd3 7a00 	vldr	s15, [r3]
 800b65c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b660:	4b20      	ldr	r3, [pc, #128]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b662:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

  /* DiscreteIntegrator: '<S42>/Integrator' */
  Second_att_control_codeblock_B.Integrator =
    Second_att_control_codeblock_DW.Integrator_DSTATE;
 800b666:	4b23      	ldr	r3, [pc, #140]	; (800b6f4 <Second_att_control_codeblock_step+0x5c4>)
 800b668:	699b      	ldr	r3, [r3, #24]
  Second_att_control_codeblock_B.Integrator =
 800b66a:	4a1e      	ldr	r2, [pc, #120]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b66c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Sum: '<S51>/Sum' */
  Second_att_control_codeblock_B.Sum_f =
    Second_att_control_codeblock_B.ProportionalGain +
 800b670:	4b1c      	ldr	r3, [pc, #112]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b672:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
    Second_att_control_codeblock_B.Integrator;
 800b676:	4b1b      	ldr	r3, [pc, #108]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b678:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
    Second_att_control_codeblock_B.ProportionalGain +
 800b67c:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock_B.Sum_f =
 800b680:	4b18      	ldr	r3, [pc, #96]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b682:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

  /* DataTypeConversion: '<S3>/Data Type Conversion3' incorporates:
   *  Inport: '<Root>/set_thrust'
   */
  Second_att_control_codeblock_B.DataTypeConversion3 =
    Second_att_control_codeblock_U.set_thrust;
 800b686:	4b19      	ldr	r3, [pc, #100]	; (800b6ec <Second_att_control_codeblock_step+0x5bc>)
 800b688:	8a9b      	ldrh	r3, [r3, #20]
  Second_att_control_codeblock_B.DataTypeConversion3 =
 800b68a:	ee07 3a90 	vmov	s15, r3
 800b68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b692:	4b14      	ldr	r3, [pc, #80]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b694:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8

  /* Fcn: '<S3>/Fcn6' */
  Second_att_control_codeblock_B.Fcn6 =
    (Second_att_control_codeblock_B.DataTypeConversion3 - 1000.0F) / 1000.0F;
 800b698:	4b12      	ldr	r3, [pc, #72]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b69a:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 800b69e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800b718 <Second_att_control_codeblock_step+0x5e8>
 800b6a2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b6a6:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800b718 <Second_att_control_codeblock_step+0x5e8>
 800b6aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock_B.Fcn6 =
 800b6ae:	4b0d      	ldr	r3, [pc, #52]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b6b0:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc

  /* Saturate: '<S3>/Saturation10' */
  u0 = Second_att_control_codeblock_B.Fcn6;
 800b6b4:	4b0b      	ldr	r3, [pc, #44]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b6b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b6ba:	60bb      	str	r3, [r7, #8]
  u1 = Second_att_control_codeblock_P.Saturation10_LowerSat;
 800b6bc:	4b0a      	ldr	r3, [pc, #40]	; (800b6e8 <Second_att_control_codeblock_step+0x5b8>)
 800b6be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6c0:	607b      	str	r3, [r7, #4]
  u2 = Second_att_control_codeblock_P.Saturation10_UpperSat;
 800b6c2:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <Second_att_control_codeblock_step+0x5b8>)
 800b6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6c6:	603b      	str	r3, [r7, #0]
  if (u0 > u2) {
 800b6c8:	ed97 7a02 	vldr	s14, [r7, #8]
 800b6cc:	edd7 7a00 	vldr	s15, [r7]
 800b6d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d8:	dd20      	ble.n	800b71c <Second_att_control_codeblock_step+0x5ec>
    Second_att_control_codeblock_B.Saturation10 = u2;
 800b6da:	4a02      	ldr	r2, [pc, #8]	; (800b6e4 <Second_att_control_codeblock_step+0x5b4>)
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
 800b6e2:	e02d      	b.n	800b740 <Second_att_control_codeblock_step+0x610>
 800b6e4:	20000b50 	.word	0x20000b50
 800b6e8:	20000080 	.word	0x20000080
 800b6ec:	20000c88 	.word	0x20000c88
 800b6f0:	20000050 	.word	0x20000050
 800b6f4:	20000c58 	.word	0x20000c58
 800b6f8:	2000004c 	.word	0x2000004c
 800b6fc:	20000074 	.word	0x20000074
 800b700:	20000068 	.word	0x20000068
 800b704:	20000060 	.word	0x20000060
 800b708:	44bb8000 	.word	0x44bb8000
 800b70c:	43fa0000 	.word	0x43fa0000
 800b710:	2000005c 	.word	0x2000005c
 800b714:	2000007c 	.word	0x2000007c
 800b718:	447a0000 	.word	0x447a0000
  } else if (u0 < u1) {
 800b71c:	ed97 7a02 	vldr	s14, [r7, #8]
 800b720:	edd7 7a01 	vldr	s15, [r7, #4]
 800b724:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b72c:	d504      	bpl.n	800b738 <Second_att_control_codeblock_step+0x608>
    Second_att_control_codeblock_B.Saturation10 = u1;
 800b72e:	4acd      	ldr	r2, [pc, #820]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
 800b736:	e003      	b.n	800b740 <Second_att_control_codeblock_step+0x610>
  } else {
    Second_att_control_codeblock_B.Saturation10 = u0;
 800b738:	4aca      	ldr	r2, [pc, #808]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }

  /* End of Saturate: '<S3>/Saturation10' */

  /* MATLAB Function: '<S1>/pwm_out1' */
  u0 = rt_roundf_snf(((-Second_att_control_codeblock_B.Gain_p -
 800b740:	4bc8      	ldr	r3, [pc, #800]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b742:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800b746:	eeb1 7a67 	vneg.f32	s14, s15
                       Second_att_control_codeblock_B.Sum_f) *
 800b74a:	4bc6      	ldr	r3, [pc, #792]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b74c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
  u0 = rt_roundf_snf(((-Second_att_control_codeblock_B.Gain_p -
 800b750:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b754:	4bc3      	ldr	r3, [pc, #780]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b756:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock_B.Sum_f) *
 800b75a:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b75e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b762:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b766:	4bbf      	ldr	r3, [pc, #764]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b768:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b76c:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((-Second_att_control_codeblock_B.Gain_p -
 800b770:	ed9f 7abd 	vldr	s14, [pc, #756]	; 800ba68 <Second_att_control_codeblock_step+0x938>
 800b774:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b778:	eeb0 0a67 	vmov.f32	s0, s15
 800b77c:	f7ff fc6c 	bl	800b058 <rt_roundf_snf>
 800b780:	ed87 0a02 	vstr	s0, [r7, #8]
  if (u0 < 65536.0F) {
 800b784:	edd7 7a02 	vldr	s15, [r7, #8]
 800b788:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 800ba6c <Second_att_control_codeblock_step+0x93c>
 800b78c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b794:	d511      	bpl.n	800b7ba <Second_att_control_codeblock_step+0x68a>
    if (u0 >= 0.0F) {
 800b796:	edd7 7a02 	vldr	s15, [r7, #8]
 800b79a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a2:	db07      	blt.n	800b7b4 <Second_att_control_codeblock_step+0x684>
      y = (uint16_T)u0;
 800b7a4:	edd7 7a02 	vldr	s15, [r7, #8]
 800b7a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ac:	ee17 3a90 	vmov	r3, s15
 800b7b0:	81fb      	strh	r3, [r7, #14]
 800b7b2:	e005      	b.n	800b7c0 <Second_att_control_codeblock_step+0x690>
    } else {
      y = 0U;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	81fb      	strh	r3, [r7, #14]
 800b7b8:	e002      	b.n	800b7c0 <Second_att_control_codeblock_step+0x690>
    }
  } else {
    y = MAX_uint16_T;
 800b7ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7be:	81fb      	strh	r3, [r7, #14]
  }

  tmp = y + 1000U;
 800b7c0:	89fb      	ldrh	r3, [r7, #14]
 800b7c2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b7c6:	613b      	str	r3, [r7, #16]
  if (tmp > 65535U) {
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7ce:	d302      	bcc.n	800b7d6 <Second_att_control_codeblock_step+0x6a6>
    tmp = 65535U;
 800b7d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7d4:	613b      	str	r3, [r7, #16]
  }

  Second_att_control_codeblock_B.M1 = (uint16_T)tmp;
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	4ba2      	ldr	r3, [pc, #648]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b7dc:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
  u0 = rt_roundf_snf(((Second_att_control_codeblock_B.Gain_p +
 800b7e0:	4ba0      	ldr	r3, [pc, #640]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b7e2:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
                       Second_att_control_codeblock_B.Sum_f) *
 800b7e6:	4b9f      	ldr	r3, [pc, #636]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b7e8:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
  u0 = rt_roundf_snf(((Second_att_control_codeblock_B.Gain_p +
 800b7ec:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b7f0:	4b9c      	ldr	r3, [pc, #624]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b7f2:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock_B.Sum_f) *
 800b7f6:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b7fa:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b7fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b802:	4b98      	ldr	r3, [pc, #608]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b804:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b808:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((Second_att_control_codeblock_B.Gain_p +
 800b80c:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800ba68 <Second_att_control_codeblock_step+0x938>
 800b810:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b814:	eeb0 0a67 	vmov.f32	s0, s15
 800b818:	f7ff fc1e 	bl	800b058 <rt_roundf_snf>
 800b81c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (u0 < 65536.0F) {
 800b820:	edd7 7a02 	vldr	s15, [r7, #8]
 800b824:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800ba6c <Second_att_control_codeblock_step+0x93c>
 800b828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b830:	d511      	bpl.n	800b856 <Second_att_control_codeblock_step+0x726>
    if (u0 >= 0.0F) {
 800b832:	edd7 7a02 	vldr	s15, [r7, #8]
 800b836:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b83e:	db07      	blt.n	800b850 <Second_att_control_codeblock_step+0x720>
      y = (uint16_T)u0;
 800b840:	edd7 7a02 	vldr	s15, [r7, #8]
 800b844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b848:	ee17 3a90 	vmov	r3, s15
 800b84c:	81fb      	strh	r3, [r7, #14]
 800b84e:	e005      	b.n	800b85c <Second_att_control_codeblock_step+0x72c>
    } else {
      y = 0U;
 800b850:	2300      	movs	r3, #0
 800b852:	81fb      	strh	r3, [r7, #14]
 800b854:	e002      	b.n	800b85c <Second_att_control_codeblock_step+0x72c>
    }
  } else {
    y = MAX_uint16_T;
 800b856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b85a:	81fb      	strh	r3, [r7, #14]
  }

  tmp = y + 1000U;
 800b85c:	89fb      	ldrh	r3, [r7, #14]
 800b85e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b862:	613b      	str	r3, [r7, #16]
  if (tmp > 65535U) {
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b86a:	d302      	bcc.n	800b872 <Second_att_control_codeblock_step+0x742>
    tmp = 65535U;
 800b86c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b870:	613b      	str	r3, [r7, #16]
  }

  Second_att_control_codeblock_B.M2 = (uint16_T)tmp;
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	b29a      	uxth	r2, r3
 800b876:	4b7b      	ldr	r3, [pc, #492]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b878:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Gain_p / 2.0F +
 800b87c:	4b79      	ldr	r3, [pc, #484]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b87e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800b882:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b886:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        Second_att_control_codeblock_B.Gain1) -
 800b88a:	4b76      	ldr	r3, [pc, #472]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b88c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Gain_p / 2.0F +
 800b890:	ee37 7a27 	vadd.f32	s14, s14, s15
                       Second_att_control_codeblock_B.Sum_f) *
 800b894:	4b73      	ldr	r3, [pc, #460]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b896:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
                        Second_att_control_codeblock_B.Gain1) -
 800b89a:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b89e:	4b71      	ldr	r3, [pc, #452]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b8a0:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock_B.Sum_f) *
 800b8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b8a8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b8ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b8b0:	4b6c      	ldr	r3, [pc, #432]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b8b2:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b8b6:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Gain_p / 2.0F +
 800b8ba:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800ba68 <Second_att_control_codeblock_step+0x938>
 800b8be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8c2:	eeb0 0a67 	vmov.f32	s0, s15
 800b8c6:	f7ff fbc7 	bl	800b058 <rt_roundf_snf>
 800b8ca:	ed87 0a02 	vstr	s0, [r7, #8]
  if (u0 < 65536.0F) {
 800b8ce:	edd7 7a02 	vldr	s15, [r7, #8]
 800b8d2:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800ba6c <Second_att_control_codeblock_step+0x93c>
 800b8d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8de:	d511      	bpl.n	800b904 <Second_att_control_codeblock_step+0x7d4>
    if (u0 >= 0.0F) {
 800b8e0:	edd7 7a02 	vldr	s15, [r7, #8]
 800b8e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ec:	db07      	blt.n	800b8fe <Second_att_control_codeblock_step+0x7ce>
      y = (uint16_T)u0;
 800b8ee:	edd7 7a02 	vldr	s15, [r7, #8]
 800b8f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8f6:	ee17 3a90 	vmov	r3, s15
 800b8fa:	81fb      	strh	r3, [r7, #14]
 800b8fc:	e005      	b.n	800b90a <Second_att_control_codeblock_step+0x7da>
    } else {
      y = 0U;
 800b8fe:	2300      	movs	r3, #0
 800b900:	81fb      	strh	r3, [r7, #14]
 800b902:	e002      	b.n	800b90a <Second_att_control_codeblock_step+0x7da>
    }
  } else {
    y = MAX_uint16_T;
 800b904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b908:	81fb      	strh	r3, [r7, #14]
  }

  tmp = y + 1000U;
 800b90a:	89fb      	ldrh	r3, [r7, #14]
 800b90c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b910:	613b      	str	r3, [r7, #16]
  if (tmp > 65535U) {
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b918:	d302      	bcc.n	800b920 <Second_att_control_codeblock_step+0x7f0>
    tmp = 65535U;
 800b91a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b91e:	613b      	str	r3, [r7, #16]
  }

  Second_att_control_codeblock_B.M3 = (uint16_T)tmp;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	b29a      	uxth	r2, r3
 800b924:	4b4f      	ldr	r3, [pc, #316]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b926:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  u0 = rt_roundf_snf((((-Second_att_control_codeblock_B.Gain1 -
 800b92a:	4b4e      	ldr	r3, [pc, #312]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b92c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800b930:	eeb1 7a67 	vneg.f32	s14, s15
                        Second_att_control_codeblock_B.Gain_p / 2.0F) +
 800b934:	4b4b      	ldr	r3, [pc, #300]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b936:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800b93a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800b93e:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((-Second_att_control_codeblock_B.Gain1 -
 800b942:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock_B.Sum_f) *
 800b946:	4b47      	ldr	r3, [pc, #284]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b948:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
                        Second_att_control_codeblock_B.Gain_p / 2.0F) +
 800b94c:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b950:	4b44      	ldr	r3, [pc, #272]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b952:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock_B.Sum_f) *
 800b956:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b95a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b95e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800b962:	4b40      	ldr	r3, [pc, #256]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b964:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b968:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((-Second_att_control_codeblock_B.Gain1 -
 800b96c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800ba68 <Second_att_control_codeblock_step+0x938>
 800b970:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b974:	eeb0 0a67 	vmov.f32	s0, s15
 800b978:	f7ff fb6e 	bl	800b058 <rt_roundf_snf>
 800b97c:	ed87 0a02 	vstr	s0, [r7, #8]
  if (u0 < 65536.0F) {
 800b980:	edd7 7a02 	vldr	s15, [r7, #8]
 800b984:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800ba6c <Second_att_control_codeblock_step+0x93c>
 800b988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b990:	d511      	bpl.n	800b9b6 <Second_att_control_codeblock_step+0x886>
    if (u0 >= 0.0F) {
 800b992:	edd7 7a02 	vldr	s15, [r7, #8]
 800b996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b99e:	db07      	blt.n	800b9b0 <Second_att_control_codeblock_step+0x880>
      y = (uint16_T)u0;
 800b9a0:	edd7 7a02 	vldr	s15, [r7, #8]
 800b9a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a8:	ee17 3a90 	vmov	r3, s15
 800b9ac:	81fb      	strh	r3, [r7, #14]
 800b9ae:	e005      	b.n	800b9bc <Second_att_control_codeblock_step+0x88c>
    } else {
      y = 0U;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	81fb      	strh	r3, [r7, #14]
 800b9b4:	e002      	b.n	800b9bc <Second_att_control_codeblock_step+0x88c>
    }
  } else {
    y = MAX_uint16_T;
 800b9b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9ba:	81fb      	strh	r3, [r7, #14]
  }

  tmp = y + 1000U;
 800b9bc:	89fb      	ldrh	r3, [r7, #14]
 800b9be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b9c2:	613b      	str	r3, [r7, #16]
  if (tmp > 65535U) {
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ca:	d302      	bcc.n	800b9d2 <Second_att_control_codeblock_step+0x8a2>
    tmp = 65535U;
 800b9cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9d0:	613b      	str	r3, [r7, #16]
  }

  Second_att_control_codeblock_B.M4 = (uint16_T)tmp;
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	4b23      	ldr	r3, [pc, #140]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b9d8:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Gain1 -
 800b9dc:	4b21      	ldr	r3, [pc, #132]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b9de:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
                        Second_att_control_codeblock_B.Gain_p / 2.0F) +
 800b9e2:	4b20      	ldr	r3, [pc, #128]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b9e4:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800b9e8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800b9ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Gain1 -
 800b9f0:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock_B.Sum_f) *
 800b9f4:	4b1b      	ldr	r3, [pc, #108]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800b9f6:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
                        Second_att_control_codeblock_B.Gain_p / 2.0F) +
 800b9fa:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800b9fe:	4b19      	ldr	r3, [pc, #100]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800ba00:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock_B.Sum_f) *
 800ba04:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800ba08:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800ba0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800ba10:	4b14      	ldr	r3, [pc, #80]	; (800ba64 <Second_att_control_codeblock_step+0x934>)
 800ba12:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800ba16:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Gain1 -
 800ba1a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800ba68 <Second_att_control_codeblock_step+0x938>
 800ba1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba22:	eeb0 0a67 	vmov.f32	s0, s15
 800ba26:	f7ff fb17 	bl	800b058 <rt_roundf_snf>
 800ba2a:	ed87 0a02 	vstr	s0, [r7, #8]
  if (u0 < 65536.0F) {
 800ba2e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ba32:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800ba6c <Second_att_control_codeblock_step+0x93c>
 800ba36:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba3e:	d517      	bpl.n	800ba70 <Second_att_control_codeblock_step+0x940>
    if (u0 >= 0.0F) {
 800ba40:	edd7 7a02 	vldr	s15, [r7, #8]
 800ba44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4c:	db07      	blt.n	800ba5e <Second_att_control_codeblock_step+0x92e>
      y = (uint16_T)u0;
 800ba4e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ba52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba56:	ee17 3a90 	vmov	r3, s15
 800ba5a:	81fb      	strh	r3, [r7, #14]
 800ba5c:	e00b      	b.n	800ba76 <Second_att_control_codeblock_step+0x946>
    } else {
      y = 0U;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	81fb      	strh	r3, [r7, #14]
 800ba62:	e008      	b.n	800ba76 <Second_att_control_codeblock_step+0x946>
 800ba64:	20000b50 	.word	0x20000b50
 800ba68:	447a0000 	.word	0x447a0000
 800ba6c:	47800000 	.word	0x47800000
    }
  } else {
    y = MAX_uint16_T;
 800ba70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba74:	81fb      	strh	r3, [r7, #14]
  }

  tmp = y + 1000U;
 800ba76:	89fb      	ldrh	r3, [r7, #14]
 800ba78:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800ba7c:	613b      	str	r3, [r7, #16]
  if (tmp > 65535U) {
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba84:	d302      	bcc.n	800ba8c <Second_att_control_codeblock_step+0x95c>
    tmp = 65535U;
 800ba86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba8a:	613b      	str	r3, [r7, #16]
  }

  Second_att_control_codeblock_B.M5 = (uint16_T)tmp;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	4ba2      	ldr	r3, [pc, #648]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800ba92:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Gain_p / 2.0F +
 800ba96:	4ba1      	ldr	r3, [pc, #644]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800ba98:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800ba9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800baa0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        -Second_att_control_codeblock_B.Gain1) -
 800baa4:	4b9d      	ldr	r3, [pc, #628]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800baa6:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Gain_p / 2.0F +
 800baaa:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock_B.Sum_f) *
 800baae:	4b9b      	ldr	r3, [pc, #620]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bab0:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
                        -Second_att_control_codeblock_B.Gain1) -
 800bab4:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800bab8:	4b98      	ldr	r3, [pc, #608]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800baba:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock_B.Sum_f) *
 800babe:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800bac2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800bac6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock_B.Saturation10) * 1000.0F);
 800baca:	4b94      	ldr	r3, [pc, #592]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bacc:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock_B.Saturation10 / 3.0F +
 800bad0:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock_B.Gain_p / 2.0F +
 800bad4:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800bd20 <Second_att_control_codeblock_step+0xbf0>
 800bad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800badc:	eeb0 0a67 	vmov.f32	s0, s15
 800bae0:	f7ff faba 	bl	800b058 <rt_roundf_snf>
 800bae4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (u0 < 65536.0F) {
 800bae8:	edd7 7a02 	vldr	s15, [r7, #8]
 800baec:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800bd24 <Second_att_control_codeblock_step+0xbf4>
 800baf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800baf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf8:	d511      	bpl.n	800bb1e <Second_att_control_codeblock_step+0x9ee>
    if (u0 >= 0.0F) {
 800bafa:	edd7 7a02 	vldr	s15, [r7, #8]
 800bafe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb06:	db07      	blt.n	800bb18 <Second_att_control_codeblock_step+0x9e8>
      y = (uint16_T)u0;
 800bb08:	edd7 7a02 	vldr	s15, [r7, #8]
 800bb0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb10:	ee17 3a90 	vmov	r3, s15
 800bb14:	81fb      	strh	r3, [r7, #14]
 800bb16:	e005      	b.n	800bb24 <Second_att_control_codeblock_step+0x9f4>
    } else {
      y = 0U;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	81fb      	strh	r3, [r7, #14]
 800bb1c:	e002      	b.n	800bb24 <Second_att_control_codeblock_step+0x9f4>
    }
  } else {
    y = MAX_uint16_T;
 800bb1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb22:	81fb      	strh	r3, [r7, #14]
  }

  tmp = y + 1000U;
 800bb24:	89fb      	ldrh	r3, [r7, #14]
 800bb26:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800bb2a:	613b      	str	r3, [r7, #16]
  if (tmp > 65535U) {
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb32:	d302      	bcc.n	800bb3a <Second_att_control_codeblock_step+0xa0a>
    tmp = 65535U;
 800bb34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb38:	613b      	str	r3, [r7, #16]
  }

  Second_att_control_codeblock_B.M6 = (uint16_T)tmp;
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	4b77      	ldr	r3, [pc, #476]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bb40:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  /* End of MATLAB Function: '<S1>/pwm_out1' */

  /* Switch: '<S1>/Switch' incorporates:
   *  Inport: '<Root>/Arm_cmd'
   */
  if (Second_att_control_codeblock_U.Arm_cmd >
 800bb44:	4b78      	ldr	r3, [pc, #480]	; (800bd28 <Second_att_control_codeblock_step+0xbf8>)
 800bb46:	8b9a      	ldrh	r2, [r3, #28]
      Second_att_control_codeblock_P.Switch_Threshold) {
 800bb48:	4b78      	ldr	r3, [pc, #480]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bb4a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
  if (Second_att_control_codeblock_U.Arm_cmd >
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	f240 80e0 	bls.w	800bd14 <Second_att_control_codeblock_step+0xbe4>
    /* Saturate: '<S1>/Saturation' */
    if (Second_att_control_codeblock_B.M1 >
 800bb54:	4b71      	ldr	r3, [pc, #452]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bb56:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
        Second_att_control_codeblock_P.Saturation_UpperSat_d) {
 800bb5a:	4b74      	ldr	r3, [pc, #464]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bb5c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    if (Second_att_control_codeblock_B.M1 >
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d904      	bls.n	800bb6e <Second_att_control_codeblock_step+0xa3e>
      y = Second_att_control_codeblock_P.Saturation_UpperSat_d;
 800bb64:	4b71      	ldr	r3, [pc, #452]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bb66:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800bb6a:	81fb      	strh	r3, [r7, #14]
 800bb6c:	e010      	b.n	800bb90 <Second_att_control_codeblock_step+0xa60>
    } else if (Second_att_control_codeblock_B.M1 <
 800bb6e:	4b6b      	ldr	r3, [pc, #428]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bb70:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
               Second_att_control_codeblock_P.Saturation_LowerSat_i) {
 800bb74:	4b6d      	ldr	r3, [pc, #436]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bb76:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
    } else if (Second_att_control_codeblock_B.M1 <
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d204      	bcs.n	800bb88 <Second_att_control_codeblock_step+0xa58>
      y = Second_att_control_codeblock_P.Saturation_LowerSat_i;
 800bb7e:	4b6b      	ldr	r3, [pc, #428]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bb80:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800bb84:	81fb      	strh	r3, [r7, #14]
 800bb86:	e003      	b.n	800bb90 <Second_att_control_codeblock_step+0xa60>
    } else {
      y = Second_att_control_codeblock_B.M1;
 800bb88:	4b64      	ldr	r3, [pc, #400]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bb8a:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800bb8e:	81fb      	strh	r3, [r7, #14]
    }

    Second_att_control_codeblock_B.Saturation_o[0] = y;
 800bb90:	4a62      	ldr	r2, [pc, #392]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bb92:	89fb      	ldrh	r3, [r7, #14]
 800bb94:	f8a2 30fc 	strh.w	r3, [r2, #252]	; 0xfc
    if (Second_att_control_codeblock_B.M2 >
 800bb98:	4b60      	ldr	r3, [pc, #384]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bb9a:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
        Second_att_control_codeblock_P.Saturation_UpperSat_d) {
 800bb9e:	4b63      	ldr	r3, [pc, #396]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bba0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    if (Second_att_control_codeblock_B.M2 >
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d904      	bls.n	800bbb2 <Second_att_control_codeblock_step+0xa82>
      y = Second_att_control_codeblock_P.Saturation_UpperSat_d;
 800bba8:	4b60      	ldr	r3, [pc, #384]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bbaa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800bbae:	81fb      	strh	r3, [r7, #14]
 800bbb0:	e010      	b.n	800bbd4 <Second_att_control_codeblock_step+0xaa4>
    } else if (Second_att_control_codeblock_B.M2 <
 800bbb2:	4b5a      	ldr	r3, [pc, #360]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bbb4:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
               Second_att_control_codeblock_P.Saturation_LowerSat_i) {
 800bbb8:	4b5c      	ldr	r3, [pc, #368]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bbba:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
    } else if (Second_att_control_codeblock_B.M2 <
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d204      	bcs.n	800bbcc <Second_att_control_codeblock_step+0xa9c>
      y = Second_att_control_codeblock_P.Saturation_LowerSat_i;
 800bbc2:	4b5a      	ldr	r3, [pc, #360]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bbc4:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800bbc8:	81fb      	strh	r3, [r7, #14]
 800bbca:	e003      	b.n	800bbd4 <Second_att_control_codeblock_step+0xaa4>
    } else {
      y = Second_att_control_codeblock_B.M2;
 800bbcc:	4b53      	ldr	r3, [pc, #332]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bbce:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 800bbd2:	81fb      	strh	r3, [r7, #14]
    }

    Second_att_control_codeblock_B.Saturation_o[1] = y;
 800bbd4:	4a51      	ldr	r2, [pc, #324]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bbd6:	89fb      	ldrh	r3, [r7, #14]
 800bbd8:	f8a2 30fe 	strh.w	r3, [r2, #254]	; 0xfe
    if (Second_att_control_codeblock_B.M3 >
 800bbdc:	4b4f      	ldr	r3, [pc, #316]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bbde:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
        Second_att_control_codeblock_P.Saturation_UpperSat_d) {
 800bbe2:	4b52      	ldr	r3, [pc, #328]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bbe4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    if (Second_att_control_codeblock_B.M3 >
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d904      	bls.n	800bbf6 <Second_att_control_codeblock_step+0xac6>
      y = Second_att_control_codeblock_P.Saturation_UpperSat_d;
 800bbec:	4b4f      	ldr	r3, [pc, #316]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bbee:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800bbf2:	81fb      	strh	r3, [r7, #14]
 800bbf4:	e010      	b.n	800bc18 <Second_att_control_codeblock_step+0xae8>
    } else if (Second_att_control_codeblock_B.M3 <
 800bbf6:	4b49      	ldr	r3, [pc, #292]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bbf8:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
               Second_att_control_codeblock_P.Saturation_LowerSat_i) {
 800bbfc:	4b4b      	ldr	r3, [pc, #300]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bbfe:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
    } else if (Second_att_control_codeblock_B.M3 <
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d204      	bcs.n	800bc10 <Second_att_control_codeblock_step+0xae0>
      y = Second_att_control_codeblock_P.Saturation_LowerSat_i;
 800bc06:	4b49      	ldr	r3, [pc, #292]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bc08:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800bc0c:	81fb      	strh	r3, [r7, #14]
 800bc0e:	e003      	b.n	800bc18 <Second_att_control_codeblock_step+0xae8>
    } else {
      y = Second_att_control_codeblock_B.M3;
 800bc10:	4b42      	ldr	r3, [pc, #264]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bc12:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 800bc16:	81fb      	strh	r3, [r7, #14]
    }

    Second_att_control_codeblock_B.Saturation_o[2] = y;
 800bc18:	4a40      	ldr	r2, [pc, #256]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bc1a:	89fb      	ldrh	r3, [r7, #14]
 800bc1c:	f8a2 3100 	strh.w	r3, [r2, #256]	; 0x100
    if (Second_att_control_codeblock_B.M4 >
 800bc20:	4b3e      	ldr	r3, [pc, #248]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bc22:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
        Second_att_control_codeblock_P.Saturation_UpperSat_d) {
 800bc26:	4b41      	ldr	r3, [pc, #260]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bc28:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    if (Second_att_control_codeblock_B.M4 >
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d904      	bls.n	800bc3a <Second_att_control_codeblock_step+0xb0a>
      y = Second_att_control_codeblock_P.Saturation_UpperSat_d;
 800bc30:	4b3e      	ldr	r3, [pc, #248]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bc32:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800bc36:	81fb      	strh	r3, [r7, #14]
 800bc38:	e010      	b.n	800bc5c <Second_att_control_codeblock_step+0xb2c>
    } else if (Second_att_control_codeblock_B.M4 <
 800bc3a:	4b38      	ldr	r3, [pc, #224]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bc3c:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
               Second_att_control_codeblock_P.Saturation_LowerSat_i) {
 800bc40:	4b3a      	ldr	r3, [pc, #232]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bc42:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
    } else if (Second_att_control_codeblock_B.M4 <
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d204      	bcs.n	800bc54 <Second_att_control_codeblock_step+0xb24>
      y = Second_att_control_codeblock_P.Saturation_LowerSat_i;
 800bc4a:	4b38      	ldr	r3, [pc, #224]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bc4c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800bc50:	81fb      	strh	r3, [r7, #14]
 800bc52:	e003      	b.n	800bc5c <Second_att_control_codeblock_step+0xb2c>
    } else {
      y = Second_att_control_codeblock_B.M4;
 800bc54:	4b31      	ldr	r3, [pc, #196]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bc56:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 800bc5a:	81fb      	strh	r3, [r7, #14]
    }

    Second_att_control_codeblock_B.Saturation_o[3] = y;
 800bc5c:	4a2f      	ldr	r2, [pc, #188]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bc5e:	89fb      	ldrh	r3, [r7, #14]
 800bc60:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
    if (Second_att_control_codeblock_B.M5 >
 800bc64:	4b2d      	ldr	r3, [pc, #180]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bc66:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
        Second_att_control_codeblock_P.Saturation_UpperSat_d) {
 800bc6a:	4b30      	ldr	r3, [pc, #192]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bc6c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    if (Second_att_control_codeblock_B.M5 >
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d904      	bls.n	800bc7e <Second_att_control_codeblock_step+0xb4e>
      y = Second_att_control_codeblock_P.Saturation_UpperSat_d;
 800bc74:	4b2d      	ldr	r3, [pc, #180]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bc76:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800bc7a:	81fb      	strh	r3, [r7, #14]
 800bc7c:	e010      	b.n	800bca0 <Second_att_control_codeblock_step+0xb70>
    } else if (Second_att_control_codeblock_B.M5 <
 800bc7e:	4b27      	ldr	r3, [pc, #156]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bc80:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
               Second_att_control_codeblock_P.Saturation_LowerSat_i) {
 800bc84:	4b29      	ldr	r3, [pc, #164]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bc86:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
    } else if (Second_att_control_codeblock_B.M5 <
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d204      	bcs.n	800bc98 <Second_att_control_codeblock_step+0xb68>
      y = Second_att_control_codeblock_P.Saturation_LowerSat_i;
 800bc8e:	4b27      	ldr	r3, [pc, #156]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bc90:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800bc94:	81fb      	strh	r3, [r7, #14]
 800bc96:	e003      	b.n	800bca0 <Second_att_control_codeblock_step+0xb70>
    } else {
      y = Second_att_control_codeblock_B.M5;
 800bc98:	4b20      	ldr	r3, [pc, #128]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bc9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc9e:	81fb      	strh	r3, [r7, #14]
    }

    Second_att_control_codeblock_B.Saturation_o[4] = y;
 800bca0:	4a1e      	ldr	r2, [pc, #120]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bca2:	89fb      	ldrh	r3, [r7, #14]
 800bca4:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
    if (Second_att_control_codeblock_B.M6 >
 800bca8:	4b1c      	ldr	r3, [pc, #112]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bcaa:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
        Second_att_control_codeblock_P.Saturation_UpperSat_d) {
 800bcae:	4b1f      	ldr	r3, [pc, #124]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bcb0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    if (Second_att_control_codeblock_B.M6 >
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d904      	bls.n	800bcc2 <Second_att_control_codeblock_step+0xb92>
      y = Second_att_control_codeblock_P.Saturation_UpperSat_d;
 800bcb8:	4b1c      	ldr	r3, [pc, #112]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bcba:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800bcbe:	81fb      	strh	r3, [r7, #14]
 800bcc0:	e010      	b.n	800bce4 <Second_att_control_codeblock_step+0xbb4>
    } else if (Second_att_control_codeblock_B.M6 <
 800bcc2:	4b16      	ldr	r3, [pc, #88]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bcc4:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
               Second_att_control_codeblock_P.Saturation_LowerSat_i) {
 800bcc8:	4b18      	ldr	r3, [pc, #96]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bcca:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
    } else if (Second_att_control_codeblock_B.M6 <
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d204      	bcs.n	800bcdc <Second_att_control_codeblock_step+0xbac>
      y = Second_att_control_codeblock_P.Saturation_LowerSat_i;
 800bcd2:	4b16      	ldr	r3, [pc, #88]	; (800bd2c <Second_att_control_codeblock_step+0xbfc>)
 800bcd4:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800bcd8:	81fb      	strh	r3, [r7, #14]
 800bcda:	e003      	b.n	800bce4 <Second_att_control_codeblock_step+0xbb4>
    } else {
      y = Second_att_control_codeblock_B.M6;
 800bcdc:	4b0f      	ldr	r3, [pc, #60]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bcde:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 800bce2:	81fb      	strh	r3, [r7, #14]
    }

    Second_att_control_codeblock_B.Saturation_o[5] = y;
 800bce4:	4a0d      	ldr	r2, [pc, #52]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bce6:	89fb      	ldrh	r3, [r7, #14]
 800bce8:	f8a2 3106 	strh.w	r3, [r2, #262]	; 0x106

    /* End of Saturate: '<S1>/Saturation' */

    /* Outport: '<Root>/PWM_OUT' */
    for (i = 0; i < 6; i++) {
 800bcec:	2300      	movs	r3, #0
 800bcee:	617b      	str	r3, [r7, #20]
 800bcf0:	e00c      	b.n	800bd0c <Second_att_control_codeblock_step+0xbdc>
      Second_att_control_codeblock_Y.PWM_OUT[i] =
        Second_att_control_codeblock_B.Saturation_o[i];
 800bcf2:	4a0a      	ldr	r2, [pc, #40]	; (800bd1c <Second_att_control_codeblock_step+0xbec>)
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	337c      	adds	r3, #124	; 0x7c
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	4413      	add	r3, r2
 800bcfc:	8899      	ldrh	r1, [r3, #4]
      Second_att_control_codeblock_Y.PWM_OUT[i] =
 800bcfe:	4a0c      	ldr	r2, [pc, #48]	; (800bd30 <Second_att_control_codeblock_step+0xc00>)
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < 6; i++) {
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	617b      	str	r3, [r7, #20]
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	2b05      	cmp	r3, #5
 800bd10:	ddef      	ble.n	800bcf2 <Second_att_control_codeblock_step+0xbc2>
 800bd12:	e01c      	b.n	800bd4e <Second_att_control_codeblock_step+0xc1e>
    }
  } else {
    /* Outport: '<Root>/PWM_OUT' incorporates:
     *  Constant: '<S1>/Constant'
     */
    for (i = 0; i < 6; i++) {
 800bd14:	2300      	movs	r3, #0
 800bd16:	617b      	str	r3, [r7, #20]
 800bd18:	e016      	b.n	800bd48 <Second_att_control_codeblock_step+0xc18>
 800bd1a:	bf00      	nop
 800bd1c:	20000b50 	.word	0x20000b50
 800bd20:	447a0000 	.word	0x447a0000
 800bd24:	47800000 	.word	0x47800000
 800bd28:	20000c88 	.word	0x20000c88
 800bd2c:	20000080 	.word	0x20000080
 800bd30:	20000c7c 	.word	0x20000c7c
      Second_att_control_codeblock_Y.PWM_OUT[i] =
        Second_att_control_codeblock_P.Constant_Value;
 800bd34:	4b59      	ldr	r3, [pc, #356]	; (800be9c <Second_att_control_codeblock_step+0xd6c>)
 800bd36:	f8b3 108c 	ldrh.w	r1, [r3, #140]	; 0x8c
      Second_att_control_codeblock_Y.PWM_OUT[i] =
 800bd3a:	4a59      	ldr	r2, [pc, #356]	; (800bea0 <Second_att_control_codeblock_step+0xd70>)
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < 6; i++) {
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	3301      	adds	r3, #1
 800bd46:	617b      	str	r3, [r7, #20]
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	2b05      	cmp	r3, #5
 800bd4c:	ddf2      	ble.n	800bd34 <Second_att_control_codeblock_step+0xc04>

  /* End of Switch: '<S1>/Switch' */

  /* Delay: '<S6>/Delay' */
  Second_att_control_codeblock_B.Delay =
    Second_att_control_codeblock_DW.Delay_DSTATE;
 800bd4e:	4b55      	ldr	r3, [pc, #340]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800bd50:	69db      	ldr	r3, [r3, #28]
  Second_att_control_codeblock_B.Delay =
 800bd52:	4a55      	ldr	r2, [pc, #340]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bd54:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

  /* Gain: '<S6>/antiWU_Gain' */
  Second_att_control_codeblock_B.antiWU_Gain =
    Second_att_control_codeblock_P.antiWU_Gain_Gain *
 800bd58:	4b50      	ldr	r3, [pc, #320]	; (800be9c <Second_att_control_codeblock_step+0xd6c>)
 800bd5a:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
    Second_att_control_codeblock_B.Delay;
 800bd5e:	4b52      	ldr	r3, [pc, #328]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bd60:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
    Second_att_control_codeblock_P.antiWU_Gain_Gain *
 800bd64:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock_B.antiWU_Gain =
 800bd68:	4b4f      	ldr	r3, [pc, #316]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bd6a:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8

  /* Sum: '<S6>/Add' */
  Second_att_control_codeblock_B.Add =
    Second_att_control_codeblock_B.pitchrollerror_b -
 800bd6e:	4b4e      	ldr	r3, [pc, #312]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bd70:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
    Second_att_control_codeblock_B.antiWU_Gain;
 800bd74:	4b4c      	ldr	r3, [pc, #304]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bd76:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
    Second_att_control_codeblock_B.pitchrollerror_b -
 800bd7a:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.Add =
 800bd7e:	4b4a      	ldr	r3, [pc, #296]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bd80:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc

  /* Delay: '<S6>/Delay1' */
  Second_att_control_codeblock_B.Delay1 =
    Second_att_control_codeblock_DW.Delay1_DSTATE;
 800bd84:	4b47      	ldr	r3, [pc, #284]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800bd86:	6a1b      	ldr	r3, [r3, #32]
  Second_att_control_codeblock_B.Delay1 =
 800bd88:	4a47      	ldr	r2, [pc, #284]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bd8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

  /* Gain: '<S6>/antiWU_Gain1' */
  Second_att_control_codeblock_B.antiWU_Gain1 =
    Second_att_control_codeblock_P.antiWU_Gain1_Gain *
 800bd8e:	4b43      	ldr	r3, [pc, #268]	; (800be9c <Second_att_control_codeblock_step+0xd6c>)
 800bd90:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
    Second_att_control_codeblock_B.Delay1;
 800bd94:	4b44      	ldr	r3, [pc, #272]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bd96:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
    Second_att_control_codeblock_P.antiWU_Gain1_Gain *
 800bd9a:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock_B.antiWU_Gain1 =
 800bd9e:	4b42      	ldr	r3, [pc, #264]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bda0:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4

  /* Sum: '<S6>/Add1' */
  Second_att_control_codeblock_B.Add1 =
    Second_att_control_codeblock_B.pitchrollerror_i -
 800bda4:	4b40      	ldr	r3, [pc, #256]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bda6:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
    Second_att_control_codeblock_B.antiWU_Gain1;
 800bdaa:	4b3f      	ldr	r3, [pc, #252]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bdac:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
    Second_att_control_codeblock_B.pitchrollerror_i -
 800bdb0:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock_B.Add1 =
 800bdb4:	4b3c      	ldr	r3, [pc, #240]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bdb6:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8

  /* Gain: '<S39>/Integral Gain' */
  Second_att_control_codeblock_B.IntegralGain = kI_Yaw_rate_PID *
    Second_att_control_codeblock_B.Gain_f;
 800bdba:	4b3b      	ldr	r3, [pc, #236]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bdbc:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
  Second_att_control_codeblock_B.IntegralGain = kI_Yaw_rate_PID *
 800bdc0:	4b3a      	ldr	r3, [pc, #232]	; (800beac <Second_att_control_codeblock_step+0xd7c>)
 800bdc2:	edd3 7a00 	vldr	s15, [r3]
 800bdc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdca:	4b37      	ldr	r3, [pc, #220]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bdcc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec

  /* Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator' */
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 800bdd0:	4b34      	ldr	r3, [pc, #208]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800bdd2:	ed93 7a00 	vldr	s14, [r3]
    Second_att_control_codeblock_P.DiscreteTimeIntegrator_gainval *
 800bdd6:	4b31      	ldr	r3, [pc, #196]	; (800be9c <Second_att_control_codeblock_step+0xd6c>)
 800bdd8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
    Second_att_control_codeblock_B.pitchrollerror;
 800bddc:	4b32      	ldr	r3, [pc, #200]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bdde:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    Second_att_control_codeblock_P.DiscreteTimeIntegrator_gainval *
 800bde2:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 800bde6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdea:	4b2e      	ldr	r3, [pc, #184]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800bdec:	edc3 7a00 	vstr	s15, [r3]

  /* Update for DiscreteIntegrator: '<S6>/Discrete-Time Integrator' */
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 800bdf0:	4b2c      	ldr	r3, [pc, #176]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800bdf2:	ed93 7a01 	vldr	s14, [r3, #4]
    Second_att_control_codeblock_P.DiscreteTimeIntegrator_gainva_l *
 800bdf6:	4b29      	ldr	r3, [pc, #164]	; (800be9c <Second_att_control_codeblock_step+0xd6c>)
 800bdf8:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
    Second_att_control_codeblock_B.Add;
 800bdfc:	4b2a      	ldr	r3, [pc, #168]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800bdfe:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
    Second_att_control_codeblock_P.DiscreteTimeIntegrator_gainva_l *
 800be02:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 800be06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be0a:	4b26      	ldr	r3, [pc, #152]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800be0c:	edc3 7a01 	vstr	s15, [r3, #4]
   * Block description for '<S8>/UD':
   *
   *  Store in Global RAM
   */
  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock_B.TSamp;
 800be10:	4b25      	ldr	r3, [pc, #148]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800be12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  Second_att_control_codeblock_DW.UD_DSTATE =
 800be14:	4a23      	ldr	r2, [pc, #140]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800be16:	6093      	str	r3, [r2, #8]

  /* Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1' */
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 800be18:	4b22      	ldr	r3, [pc, #136]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800be1a:	ed93 7a03 	vldr	s14, [r3, #12]
    Second_att_control_codeblock_P.DiscreteTimeIntegrator1_gainval *
 800be1e:	4b1f      	ldr	r3, [pc, #124]	; (800be9c <Second_att_control_codeblock_step+0xd6c>)
 800be20:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
    Second_att_control_codeblock_B.pitchrollerror_m;
 800be24:	4b20      	ldr	r3, [pc, #128]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800be26:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
    Second_att_control_codeblock_P.DiscreteTimeIntegrator1_gainval *
 800be2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 800be2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be32:	4b1c      	ldr	r3, [pc, #112]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800be34:	edc3 7a03 	vstr	s15, [r3, #12]

  /* Update for DiscreteIntegrator: '<S6>/Discrete-Time Integrator1' */
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 800be38:	4b1a      	ldr	r3, [pc, #104]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800be3a:	ed93 7a04 	vldr	s14, [r3, #16]
    Second_att_control_codeblock_P.DiscreteTimeIntegrator1_gainv_k *
 800be3e:	4b17      	ldr	r3, [pc, #92]	; (800be9c <Second_att_control_codeblock_step+0xd6c>)
 800be40:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
    Second_att_control_codeblock_B.Add1;
 800be44:	4b18      	ldr	r3, [pc, #96]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800be46:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
    Second_att_control_codeblock_P.DiscreteTimeIntegrator1_gainv_k *
 800be4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 800be4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be52:	4b14      	ldr	r3, [pc, #80]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800be54:	edc3 7a04 	vstr	s15, [r3, #16]
   * Block description for '<S9>/UD':
   *
   *  Store in Global RAM
   */
  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock_B.TSamp_h;
 800be58:	4b13      	ldr	r3, [pc, #76]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800be5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 800be5e:	4a11      	ldr	r2, [pc, #68]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800be60:	6153      	str	r3, [r2, #20]

  /* Update for DiscreteIntegrator: '<S42>/Integrator' */
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 800be62:	4b10      	ldr	r3, [pc, #64]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800be64:	ed93 7a06 	vldr	s14, [r3, #24]
    Second_att_control_codeblock_P.Integrator_gainval *
 800be68:	4b0c      	ldr	r3, [pc, #48]	; (800be9c <Second_att_control_codeblock_step+0xd6c>)
 800be6a:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
    Second_att_control_codeblock_B.IntegralGain;
 800be6e:	4b0e      	ldr	r3, [pc, #56]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800be70:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
    Second_att_control_codeblock_P.Integrator_gainval *
 800be74:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 800be78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be7c:	4b09      	ldr	r3, [pc, #36]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800be7e:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Update for Delay: '<S6>/Delay' */
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock_B.DiscreteTimeIntegrator_h;
 800be82:	4b09      	ldr	r3, [pc, #36]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800be84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  Second_att_control_codeblock_DW.Delay_DSTATE =
 800be86:	4a07      	ldr	r2, [pc, #28]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800be88:	61d3      	str	r3, [r2, #28]

  /* Update for Delay: '<S6>/Delay1' */
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock_B.DiscreteTimeIntegrator1_p;
 800be8a:	4b07      	ldr	r3, [pc, #28]	; (800bea8 <Second_att_control_codeblock_step+0xd78>)
 800be8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 800be90:	4a04      	ldr	r2, [pc, #16]	; (800bea4 <Second_att_control_codeblock_step+0xd74>)
 800be92:	6213      	str	r3, [r2, #32]
}
 800be94:	bf00      	nop
 800be96:	3718      	adds	r7, #24
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	20000080 	.word	0x20000080
 800bea0:	20000c7c 	.word	0x20000c7c
 800bea4:	20000c58 	.word	0x20000c58
 800bea8:	20000b50 	.word	0x20000b50
 800beac:	20000070 	.word	0x20000070

0800beb0 <ceil>:
 800beb0:	ec51 0b10 	vmov	r0, r1, d0
 800beb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bebc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bec0:	2e13      	cmp	r6, #19
 800bec2:	460c      	mov	r4, r1
 800bec4:	ee10 5a10 	vmov	r5, s0
 800bec8:	4680      	mov	r8, r0
 800beca:	dc30      	bgt.n	800bf2e <ceil+0x7e>
 800becc:	2e00      	cmp	r6, #0
 800bece:	da12      	bge.n	800bef6 <ceil+0x46>
 800bed0:	a333      	add	r3, pc, #204	; (adr r3, 800bfa0 <ceil+0xf0>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	f7f4 f9e9 	bl	80002ac <__adddf3>
 800beda:	2200      	movs	r2, #0
 800bedc:	2300      	movs	r3, #0
 800bede:	f7f4 fe2b 	bl	8000b38 <__aeabi_dcmpgt>
 800bee2:	b128      	cbz	r0, 800bef0 <ceil+0x40>
 800bee4:	2c00      	cmp	r4, #0
 800bee6:	db55      	blt.n	800bf94 <ceil+0xe4>
 800bee8:	432c      	orrs	r4, r5
 800beea:	d057      	beq.n	800bf9c <ceil+0xec>
 800beec:	4c2e      	ldr	r4, [pc, #184]	; (800bfa8 <ceil+0xf8>)
 800beee:	2500      	movs	r5, #0
 800bef0:	4621      	mov	r1, r4
 800bef2:	4628      	mov	r0, r5
 800bef4:	e025      	b.n	800bf42 <ceil+0x92>
 800bef6:	4f2d      	ldr	r7, [pc, #180]	; (800bfac <ceil+0xfc>)
 800bef8:	4137      	asrs	r7, r6
 800befa:	ea01 0307 	and.w	r3, r1, r7
 800befe:	4303      	orrs	r3, r0
 800bf00:	d01f      	beq.n	800bf42 <ceil+0x92>
 800bf02:	a327      	add	r3, pc, #156	; (adr r3, 800bfa0 <ceil+0xf0>)
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	f7f4 f9d0 	bl	80002ac <__adddf3>
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2300      	movs	r3, #0
 800bf10:	f7f4 fe12 	bl	8000b38 <__aeabi_dcmpgt>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d0eb      	beq.n	800bef0 <ceil+0x40>
 800bf18:	2c00      	cmp	r4, #0
 800bf1a:	bfc2      	ittt	gt
 800bf1c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800bf20:	fa43 f606 	asrgt.w	r6, r3, r6
 800bf24:	19a4      	addgt	r4, r4, r6
 800bf26:	ea24 0407 	bic.w	r4, r4, r7
 800bf2a:	2500      	movs	r5, #0
 800bf2c:	e7e0      	b.n	800bef0 <ceil+0x40>
 800bf2e:	2e33      	cmp	r6, #51	; 0x33
 800bf30:	dd0b      	ble.n	800bf4a <ceil+0x9a>
 800bf32:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bf36:	d104      	bne.n	800bf42 <ceil+0x92>
 800bf38:	ee10 2a10 	vmov	r2, s0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	f7f4 f9b5 	bl	80002ac <__adddf3>
 800bf42:	ec41 0b10 	vmov	d0, r0, r1
 800bf46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf4a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bf4e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf52:	fa23 f707 	lsr.w	r7, r3, r7
 800bf56:	4207      	tst	r7, r0
 800bf58:	d0f3      	beq.n	800bf42 <ceil+0x92>
 800bf5a:	a311      	add	r3, pc, #68	; (adr r3, 800bfa0 <ceil+0xf0>)
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	f7f4 f9a4 	bl	80002ac <__adddf3>
 800bf64:	2200      	movs	r2, #0
 800bf66:	2300      	movs	r3, #0
 800bf68:	f7f4 fde6 	bl	8000b38 <__aeabi_dcmpgt>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d0bf      	beq.n	800bef0 <ceil+0x40>
 800bf70:	2c00      	cmp	r4, #0
 800bf72:	dd02      	ble.n	800bf7a <ceil+0xca>
 800bf74:	2e14      	cmp	r6, #20
 800bf76:	d103      	bne.n	800bf80 <ceil+0xd0>
 800bf78:	3401      	adds	r4, #1
 800bf7a:	ea25 0507 	bic.w	r5, r5, r7
 800bf7e:	e7b7      	b.n	800bef0 <ceil+0x40>
 800bf80:	2301      	movs	r3, #1
 800bf82:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bf86:	fa03 f606 	lsl.w	r6, r3, r6
 800bf8a:	4435      	add	r5, r6
 800bf8c:	4545      	cmp	r5, r8
 800bf8e:	bf38      	it	cc
 800bf90:	18e4      	addcc	r4, r4, r3
 800bf92:	e7f2      	b.n	800bf7a <ceil+0xca>
 800bf94:	2500      	movs	r5, #0
 800bf96:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bf9a:	e7a9      	b.n	800bef0 <ceil+0x40>
 800bf9c:	4625      	mov	r5, r4
 800bf9e:	e7a7      	b.n	800bef0 <ceil+0x40>
 800bfa0:	8800759c 	.word	0x8800759c
 800bfa4:	7e37e43c 	.word	0x7e37e43c
 800bfa8:	3ff00000 	.word	0x3ff00000
 800bfac:	000fffff 	.word	0x000fffff

0800bfb0 <floor>:
 800bfb0:	ec51 0b10 	vmov	r0, r1, d0
 800bfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bfbc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bfc0:	2e13      	cmp	r6, #19
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	ee10 5a10 	vmov	r5, s0
 800bfc8:	4680      	mov	r8, r0
 800bfca:	dc34      	bgt.n	800c036 <floor+0x86>
 800bfcc:	2e00      	cmp	r6, #0
 800bfce:	da16      	bge.n	800bffe <floor+0x4e>
 800bfd0:	a335      	add	r3, pc, #212	; (adr r3, 800c0a8 <floor+0xf8>)
 800bfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd6:	f7f4 f969 	bl	80002ac <__adddf3>
 800bfda:	2200      	movs	r2, #0
 800bfdc:	2300      	movs	r3, #0
 800bfde:	f7f4 fdab 	bl	8000b38 <__aeabi_dcmpgt>
 800bfe2:	b148      	cbz	r0, 800bff8 <floor+0x48>
 800bfe4:	2c00      	cmp	r4, #0
 800bfe6:	da59      	bge.n	800c09c <floor+0xec>
 800bfe8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bfec:	4a30      	ldr	r2, [pc, #192]	; (800c0b0 <floor+0x100>)
 800bfee:	432b      	orrs	r3, r5
 800bff0:	2500      	movs	r5, #0
 800bff2:	42ab      	cmp	r3, r5
 800bff4:	bf18      	it	ne
 800bff6:	4614      	movne	r4, r2
 800bff8:	4621      	mov	r1, r4
 800bffa:	4628      	mov	r0, r5
 800bffc:	e025      	b.n	800c04a <floor+0x9a>
 800bffe:	4f2d      	ldr	r7, [pc, #180]	; (800c0b4 <floor+0x104>)
 800c000:	4137      	asrs	r7, r6
 800c002:	ea01 0307 	and.w	r3, r1, r7
 800c006:	4303      	orrs	r3, r0
 800c008:	d01f      	beq.n	800c04a <floor+0x9a>
 800c00a:	a327      	add	r3, pc, #156	; (adr r3, 800c0a8 <floor+0xf8>)
 800c00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c010:	f7f4 f94c 	bl	80002ac <__adddf3>
 800c014:	2200      	movs	r2, #0
 800c016:	2300      	movs	r3, #0
 800c018:	f7f4 fd8e 	bl	8000b38 <__aeabi_dcmpgt>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d0eb      	beq.n	800bff8 <floor+0x48>
 800c020:	2c00      	cmp	r4, #0
 800c022:	bfbe      	ittt	lt
 800c024:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c028:	fa43 f606 	asrlt.w	r6, r3, r6
 800c02c:	19a4      	addlt	r4, r4, r6
 800c02e:	ea24 0407 	bic.w	r4, r4, r7
 800c032:	2500      	movs	r5, #0
 800c034:	e7e0      	b.n	800bff8 <floor+0x48>
 800c036:	2e33      	cmp	r6, #51	; 0x33
 800c038:	dd0b      	ble.n	800c052 <floor+0xa2>
 800c03a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c03e:	d104      	bne.n	800c04a <floor+0x9a>
 800c040:	ee10 2a10 	vmov	r2, s0
 800c044:	460b      	mov	r3, r1
 800c046:	f7f4 f931 	bl	80002ac <__adddf3>
 800c04a:	ec41 0b10 	vmov	d0, r0, r1
 800c04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c052:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c056:	f04f 33ff 	mov.w	r3, #4294967295
 800c05a:	fa23 f707 	lsr.w	r7, r3, r7
 800c05e:	4207      	tst	r7, r0
 800c060:	d0f3      	beq.n	800c04a <floor+0x9a>
 800c062:	a311      	add	r3, pc, #68	; (adr r3, 800c0a8 <floor+0xf8>)
 800c064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c068:	f7f4 f920 	bl	80002ac <__adddf3>
 800c06c:	2200      	movs	r2, #0
 800c06e:	2300      	movs	r3, #0
 800c070:	f7f4 fd62 	bl	8000b38 <__aeabi_dcmpgt>
 800c074:	2800      	cmp	r0, #0
 800c076:	d0bf      	beq.n	800bff8 <floor+0x48>
 800c078:	2c00      	cmp	r4, #0
 800c07a:	da02      	bge.n	800c082 <floor+0xd2>
 800c07c:	2e14      	cmp	r6, #20
 800c07e:	d103      	bne.n	800c088 <floor+0xd8>
 800c080:	3401      	adds	r4, #1
 800c082:	ea25 0507 	bic.w	r5, r5, r7
 800c086:	e7b7      	b.n	800bff8 <floor+0x48>
 800c088:	2301      	movs	r3, #1
 800c08a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c08e:	fa03 f606 	lsl.w	r6, r3, r6
 800c092:	4435      	add	r5, r6
 800c094:	4545      	cmp	r5, r8
 800c096:	bf38      	it	cc
 800c098:	18e4      	addcc	r4, r4, r3
 800c09a:	e7f2      	b.n	800c082 <floor+0xd2>
 800c09c:	2500      	movs	r5, #0
 800c09e:	462c      	mov	r4, r5
 800c0a0:	e7aa      	b.n	800bff8 <floor+0x48>
 800c0a2:	bf00      	nop
 800c0a4:	f3af 8000 	nop.w
 800c0a8:	8800759c 	.word	0x8800759c
 800c0ac:	7e37e43c 	.word	0x7e37e43c
 800c0b0:	bff00000 	.word	0xbff00000
 800c0b4:	000fffff 	.word	0x000fffff

0800c0b8 <asin>:
 800c0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ba:	ed2d 8b02 	vpush	{d8}
 800c0be:	4e26      	ldr	r6, [pc, #152]	; (800c158 <asin+0xa0>)
 800c0c0:	b08b      	sub	sp, #44	; 0x2c
 800c0c2:	ec55 4b10 	vmov	r4, r5, d0
 800c0c6:	f000 f853 	bl	800c170 <__ieee754_asin>
 800c0ca:	f996 3000 	ldrsb.w	r3, [r6]
 800c0ce:	eeb0 8a40 	vmov.f32	s16, s0
 800c0d2:	eef0 8a60 	vmov.f32	s17, s1
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	d036      	beq.n	800c148 <asin+0x90>
 800c0da:	4622      	mov	r2, r4
 800c0dc:	462b      	mov	r3, r5
 800c0de:	4620      	mov	r0, r4
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	f7f4 fd33 	bl	8000b4c <__aeabi_dcmpun>
 800c0e6:	4607      	mov	r7, r0
 800c0e8:	bb70      	cbnz	r0, 800c148 <asin+0x90>
 800c0ea:	ec45 4b10 	vmov	d0, r4, r5
 800c0ee:	f000 fd7f 	bl	800cbf0 <fabs>
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	4b19      	ldr	r3, [pc, #100]	; (800c15c <asin+0xa4>)
 800c0f6:	ec51 0b10 	vmov	r0, r1, d0
 800c0fa:	f7f4 fd1d 	bl	8000b38 <__aeabi_dcmpgt>
 800c0fe:	b318      	cbz	r0, 800c148 <asin+0x90>
 800c100:	2301      	movs	r3, #1
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	4816      	ldr	r0, [pc, #88]	; (800c160 <asin+0xa8>)
 800c106:	4b17      	ldr	r3, [pc, #92]	; (800c164 <asin+0xac>)
 800c108:	9301      	str	r3, [sp, #4]
 800c10a:	9708      	str	r7, [sp, #32]
 800c10c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c110:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c114:	f000 fd78 	bl	800cc08 <nan>
 800c118:	f996 3000 	ldrsb.w	r3, [r6]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c122:	d104      	bne.n	800c12e <asin+0x76>
 800c124:	f000 fd78 	bl	800cc18 <__errno>
 800c128:	2321      	movs	r3, #33	; 0x21
 800c12a:	6003      	str	r3, [r0, #0]
 800c12c:	e004      	b.n	800c138 <asin+0x80>
 800c12e:	4668      	mov	r0, sp
 800c130:	f000 fd67 	bl	800cc02 <matherr>
 800c134:	2800      	cmp	r0, #0
 800c136:	d0f5      	beq.n	800c124 <asin+0x6c>
 800c138:	9b08      	ldr	r3, [sp, #32]
 800c13a:	b11b      	cbz	r3, 800c144 <asin+0x8c>
 800c13c:	f000 fd6c 	bl	800cc18 <__errno>
 800c140:	9b08      	ldr	r3, [sp, #32]
 800c142:	6003      	str	r3, [r0, #0]
 800c144:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c148:	eeb0 0a48 	vmov.f32	s0, s16
 800c14c:	eef0 0a68 	vmov.f32	s1, s17
 800c150:	b00b      	add	sp, #44	; 0x2c
 800c152:	ecbd 8b02 	vpop	{d8}
 800c156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c158:	20000110 	.word	0x20000110
 800c15c:	3ff00000 	.word	0x3ff00000
 800c160:	0800f789 	.word	0x0800f789
 800c164:	0800f598 	.word	0x0800f598

0800c168 <atan2>:
 800c168:	f000 ba12 	b.w	800c590 <__ieee754_atan2>
 800c16c:	0000      	movs	r0, r0
	...

0800c170 <__ieee754_asin>:
 800c170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c174:	ec55 4b10 	vmov	r4, r5, d0
 800c178:	4bcb      	ldr	r3, [pc, #812]	; (800c4a8 <__ieee754_asin+0x338>)
 800c17a:	b087      	sub	sp, #28
 800c17c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800c180:	429f      	cmp	r7, r3
 800c182:	9501      	str	r5, [sp, #4]
 800c184:	dd31      	ble.n	800c1ea <__ieee754_asin+0x7a>
 800c186:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800c18a:	ee10 3a10 	vmov	r3, s0
 800c18e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800c192:	433b      	orrs	r3, r7
 800c194:	d117      	bne.n	800c1c6 <__ieee754_asin+0x56>
 800c196:	a3aa      	add	r3, pc, #680	; (adr r3, 800c440 <__ieee754_asin+0x2d0>)
 800c198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19c:	ee10 0a10 	vmov	r0, s0
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	f7f4 fa39 	bl	8000618 <__aeabi_dmul>
 800c1a6:	a3a8      	add	r3, pc, #672	; (adr r3, 800c448 <__ieee754_asin+0x2d8>)
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	460f      	mov	r7, r1
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	f7f4 fa30 	bl	8000618 <__aeabi_dmul>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4630      	mov	r0, r6
 800c1be:	4639      	mov	r1, r7
 800c1c0:	f7f4 f874 	bl	80002ac <__adddf3>
 800c1c4:	e00a      	b.n	800c1dc <__ieee754_asin+0x6c>
 800c1c6:	ee10 2a10 	vmov	r2, s0
 800c1ca:	462b      	mov	r3, r5
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f7f4 f86a 	bl	80002a8 <__aeabi_dsub>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	f7f4 fb48 	bl	800086c <__aeabi_ddiv>
 800c1dc:	4604      	mov	r4, r0
 800c1de:	460d      	mov	r5, r1
 800c1e0:	ec45 4b10 	vmov	d0, r4, r5
 800c1e4:	b007      	add	sp, #28
 800c1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ea:	4bb0      	ldr	r3, [pc, #704]	; (800c4ac <__ieee754_asin+0x33c>)
 800c1ec:	429f      	cmp	r7, r3
 800c1ee:	dc11      	bgt.n	800c214 <__ieee754_asin+0xa4>
 800c1f0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800c1f4:	f280 80ae 	bge.w	800c354 <__ieee754_asin+0x1e4>
 800c1f8:	a395      	add	r3, pc, #596	; (adr r3, 800c450 <__ieee754_asin+0x2e0>)
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	ee10 0a10 	vmov	r0, s0
 800c202:	4629      	mov	r1, r5
 800c204:	f7f4 f852 	bl	80002ac <__adddf3>
 800c208:	2200      	movs	r2, #0
 800c20a:	4ba9      	ldr	r3, [pc, #676]	; (800c4b0 <__ieee754_asin+0x340>)
 800c20c:	f7f4 fc94 	bl	8000b38 <__aeabi_dcmpgt>
 800c210:	2800      	cmp	r0, #0
 800c212:	d1e5      	bne.n	800c1e0 <__ieee754_asin+0x70>
 800c214:	ec45 4b10 	vmov	d0, r4, r5
 800c218:	f000 fcea 	bl	800cbf0 <fabs>
 800c21c:	2000      	movs	r0, #0
 800c21e:	ec53 2b10 	vmov	r2, r3, d0
 800c222:	49a3      	ldr	r1, [pc, #652]	; (800c4b0 <__ieee754_asin+0x340>)
 800c224:	f7f4 f840 	bl	80002a8 <__aeabi_dsub>
 800c228:	2200      	movs	r2, #0
 800c22a:	4ba2      	ldr	r3, [pc, #648]	; (800c4b4 <__ieee754_asin+0x344>)
 800c22c:	f7f4 f9f4 	bl	8000618 <__aeabi_dmul>
 800c230:	a389      	add	r3, pc, #548	; (adr r3, 800c458 <__ieee754_asin+0x2e8>)
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	4604      	mov	r4, r0
 800c238:	460d      	mov	r5, r1
 800c23a:	f7f4 f9ed 	bl	8000618 <__aeabi_dmul>
 800c23e:	a388      	add	r3, pc, #544	; (adr r3, 800c460 <__ieee754_asin+0x2f0>)
 800c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c244:	f7f4 f832 	bl	80002ac <__adddf3>
 800c248:	4622      	mov	r2, r4
 800c24a:	462b      	mov	r3, r5
 800c24c:	f7f4 f9e4 	bl	8000618 <__aeabi_dmul>
 800c250:	a385      	add	r3, pc, #532	; (adr r3, 800c468 <__ieee754_asin+0x2f8>)
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	f7f4 f827 	bl	80002a8 <__aeabi_dsub>
 800c25a:	4622      	mov	r2, r4
 800c25c:	462b      	mov	r3, r5
 800c25e:	f7f4 f9db 	bl	8000618 <__aeabi_dmul>
 800c262:	a383      	add	r3, pc, #524	; (adr r3, 800c470 <__ieee754_asin+0x300>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	f7f4 f820 	bl	80002ac <__adddf3>
 800c26c:	4622      	mov	r2, r4
 800c26e:	462b      	mov	r3, r5
 800c270:	f7f4 f9d2 	bl	8000618 <__aeabi_dmul>
 800c274:	a380      	add	r3, pc, #512	; (adr r3, 800c478 <__ieee754_asin+0x308>)
 800c276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27a:	f7f4 f815 	bl	80002a8 <__aeabi_dsub>
 800c27e:	4622      	mov	r2, r4
 800c280:	462b      	mov	r3, r5
 800c282:	f7f4 f9c9 	bl	8000618 <__aeabi_dmul>
 800c286:	a37e      	add	r3, pc, #504	; (adr r3, 800c480 <__ieee754_asin+0x310>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	f7f4 f80e 	bl	80002ac <__adddf3>
 800c290:	4622      	mov	r2, r4
 800c292:	462b      	mov	r3, r5
 800c294:	f7f4 f9c0 	bl	8000618 <__aeabi_dmul>
 800c298:	a37b      	add	r3, pc, #492	; (adr r3, 800c488 <__ieee754_asin+0x318>)
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	4680      	mov	r8, r0
 800c2a0:	4689      	mov	r9, r1
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	f7f4 f9b7 	bl	8000618 <__aeabi_dmul>
 800c2aa:	a379      	add	r3, pc, #484	; (adr r3, 800c490 <__ieee754_asin+0x320>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	f7f3 fffa 	bl	80002a8 <__aeabi_dsub>
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	462b      	mov	r3, r5
 800c2b8:	f7f4 f9ae 	bl	8000618 <__aeabi_dmul>
 800c2bc:	a376      	add	r3, pc, #472	; (adr r3, 800c498 <__ieee754_asin+0x328>)
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	f7f3 fff3 	bl	80002ac <__adddf3>
 800c2c6:	4622      	mov	r2, r4
 800c2c8:	462b      	mov	r3, r5
 800c2ca:	f7f4 f9a5 	bl	8000618 <__aeabi_dmul>
 800c2ce:	a374      	add	r3, pc, #464	; (adr r3, 800c4a0 <__ieee754_asin+0x330>)
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	f7f3 ffe8 	bl	80002a8 <__aeabi_dsub>
 800c2d8:	4622      	mov	r2, r4
 800c2da:	462b      	mov	r3, r5
 800c2dc:	f7f4 f99c 	bl	8000618 <__aeabi_dmul>
 800c2e0:	4b73      	ldr	r3, [pc, #460]	; (800c4b0 <__ieee754_asin+0x340>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f7f3 ffe2 	bl	80002ac <__adddf3>
 800c2e8:	ec45 4b10 	vmov	d0, r4, r5
 800c2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2f0:	f000 fa2c 	bl	800c74c <__ieee754_sqrt>
 800c2f4:	4b70      	ldr	r3, [pc, #448]	; (800c4b8 <__ieee754_asin+0x348>)
 800c2f6:	429f      	cmp	r7, r3
 800c2f8:	ec5b ab10 	vmov	sl, fp, d0
 800c2fc:	f340 80de 	ble.w	800c4bc <__ieee754_asin+0x34c>
 800c300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c304:	4640      	mov	r0, r8
 800c306:	4649      	mov	r1, r9
 800c308:	f7f4 fab0 	bl	800086c <__aeabi_ddiv>
 800c30c:	4652      	mov	r2, sl
 800c30e:	465b      	mov	r3, fp
 800c310:	f7f4 f982 	bl	8000618 <__aeabi_dmul>
 800c314:	4652      	mov	r2, sl
 800c316:	465b      	mov	r3, fp
 800c318:	f7f3 ffc8 	bl	80002ac <__adddf3>
 800c31c:	4602      	mov	r2, r0
 800c31e:	460b      	mov	r3, r1
 800c320:	f7f3 ffc4 	bl	80002ac <__adddf3>
 800c324:	a348      	add	r3, pc, #288	; (adr r3, 800c448 <__ieee754_asin+0x2d8>)
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	f7f3 ffbd 	bl	80002a8 <__aeabi_dsub>
 800c32e:	4602      	mov	r2, r0
 800c330:	460b      	mov	r3, r1
 800c332:	a143      	add	r1, pc, #268	; (adr r1, 800c440 <__ieee754_asin+0x2d0>)
 800c334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c338:	f7f3 ffb6 	bl	80002a8 <__aeabi_dsub>
 800c33c:	9b01      	ldr	r3, [sp, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	bfdc      	itt	le
 800c342:	4602      	movle	r2, r0
 800c344:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800c348:	4604      	mov	r4, r0
 800c34a:	460d      	mov	r5, r1
 800c34c:	bfdc      	itt	le
 800c34e:	4614      	movle	r4, r2
 800c350:	461d      	movle	r5, r3
 800c352:	e745      	b.n	800c1e0 <__ieee754_asin+0x70>
 800c354:	ee10 2a10 	vmov	r2, s0
 800c358:	ee10 0a10 	vmov	r0, s0
 800c35c:	462b      	mov	r3, r5
 800c35e:	4629      	mov	r1, r5
 800c360:	f7f4 f95a 	bl	8000618 <__aeabi_dmul>
 800c364:	a33c      	add	r3, pc, #240	; (adr r3, 800c458 <__ieee754_asin+0x2e8>)
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	4606      	mov	r6, r0
 800c36c:	460f      	mov	r7, r1
 800c36e:	f7f4 f953 	bl	8000618 <__aeabi_dmul>
 800c372:	a33b      	add	r3, pc, #236	; (adr r3, 800c460 <__ieee754_asin+0x2f0>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	f7f3 ff98 	bl	80002ac <__adddf3>
 800c37c:	4632      	mov	r2, r6
 800c37e:	463b      	mov	r3, r7
 800c380:	f7f4 f94a 	bl	8000618 <__aeabi_dmul>
 800c384:	a338      	add	r3, pc, #224	; (adr r3, 800c468 <__ieee754_asin+0x2f8>)
 800c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38a:	f7f3 ff8d 	bl	80002a8 <__aeabi_dsub>
 800c38e:	4632      	mov	r2, r6
 800c390:	463b      	mov	r3, r7
 800c392:	f7f4 f941 	bl	8000618 <__aeabi_dmul>
 800c396:	a336      	add	r3, pc, #216	; (adr r3, 800c470 <__ieee754_asin+0x300>)
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	f7f3 ff86 	bl	80002ac <__adddf3>
 800c3a0:	4632      	mov	r2, r6
 800c3a2:	463b      	mov	r3, r7
 800c3a4:	f7f4 f938 	bl	8000618 <__aeabi_dmul>
 800c3a8:	a333      	add	r3, pc, #204	; (adr r3, 800c478 <__ieee754_asin+0x308>)
 800c3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ae:	f7f3 ff7b 	bl	80002a8 <__aeabi_dsub>
 800c3b2:	4632      	mov	r2, r6
 800c3b4:	463b      	mov	r3, r7
 800c3b6:	f7f4 f92f 	bl	8000618 <__aeabi_dmul>
 800c3ba:	a331      	add	r3, pc, #196	; (adr r3, 800c480 <__ieee754_asin+0x310>)
 800c3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c0:	f7f3 ff74 	bl	80002ac <__adddf3>
 800c3c4:	4632      	mov	r2, r6
 800c3c6:	463b      	mov	r3, r7
 800c3c8:	f7f4 f926 	bl	8000618 <__aeabi_dmul>
 800c3cc:	a32e      	add	r3, pc, #184	; (adr r3, 800c488 <__ieee754_asin+0x318>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	4680      	mov	r8, r0
 800c3d4:	4689      	mov	r9, r1
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	4639      	mov	r1, r7
 800c3da:	f7f4 f91d 	bl	8000618 <__aeabi_dmul>
 800c3de:	a32c      	add	r3, pc, #176	; (adr r3, 800c490 <__ieee754_asin+0x320>)
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	f7f3 ff60 	bl	80002a8 <__aeabi_dsub>
 800c3e8:	4632      	mov	r2, r6
 800c3ea:	463b      	mov	r3, r7
 800c3ec:	f7f4 f914 	bl	8000618 <__aeabi_dmul>
 800c3f0:	a329      	add	r3, pc, #164	; (adr r3, 800c498 <__ieee754_asin+0x328>)
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	f7f3 ff59 	bl	80002ac <__adddf3>
 800c3fa:	4632      	mov	r2, r6
 800c3fc:	463b      	mov	r3, r7
 800c3fe:	f7f4 f90b 	bl	8000618 <__aeabi_dmul>
 800c402:	a327      	add	r3, pc, #156	; (adr r3, 800c4a0 <__ieee754_asin+0x330>)
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	f7f3 ff4e 	bl	80002a8 <__aeabi_dsub>
 800c40c:	4632      	mov	r2, r6
 800c40e:	463b      	mov	r3, r7
 800c410:	f7f4 f902 	bl	8000618 <__aeabi_dmul>
 800c414:	2200      	movs	r2, #0
 800c416:	4b26      	ldr	r3, [pc, #152]	; (800c4b0 <__ieee754_asin+0x340>)
 800c418:	f7f3 ff48 	bl	80002ac <__adddf3>
 800c41c:	4602      	mov	r2, r0
 800c41e:	460b      	mov	r3, r1
 800c420:	4640      	mov	r0, r8
 800c422:	4649      	mov	r1, r9
 800c424:	f7f4 fa22 	bl	800086c <__aeabi_ddiv>
 800c428:	4622      	mov	r2, r4
 800c42a:	462b      	mov	r3, r5
 800c42c:	f7f4 f8f4 	bl	8000618 <__aeabi_dmul>
 800c430:	4602      	mov	r2, r0
 800c432:	460b      	mov	r3, r1
 800c434:	4620      	mov	r0, r4
 800c436:	4629      	mov	r1, r5
 800c438:	e6c2      	b.n	800c1c0 <__ieee754_asin+0x50>
 800c43a:	bf00      	nop
 800c43c:	f3af 8000 	nop.w
 800c440:	54442d18 	.word	0x54442d18
 800c444:	3ff921fb 	.word	0x3ff921fb
 800c448:	33145c07 	.word	0x33145c07
 800c44c:	3c91a626 	.word	0x3c91a626
 800c450:	8800759c 	.word	0x8800759c
 800c454:	7e37e43c 	.word	0x7e37e43c
 800c458:	0dfdf709 	.word	0x0dfdf709
 800c45c:	3f023de1 	.word	0x3f023de1
 800c460:	7501b288 	.word	0x7501b288
 800c464:	3f49efe0 	.word	0x3f49efe0
 800c468:	b5688f3b 	.word	0xb5688f3b
 800c46c:	3fa48228 	.word	0x3fa48228
 800c470:	0e884455 	.word	0x0e884455
 800c474:	3fc9c155 	.word	0x3fc9c155
 800c478:	03eb6f7d 	.word	0x03eb6f7d
 800c47c:	3fd4d612 	.word	0x3fd4d612
 800c480:	55555555 	.word	0x55555555
 800c484:	3fc55555 	.word	0x3fc55555
 800c488:	b12e9282 	.word	0xb12e9282
 800c48c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c490:	1b8d0159 	.word	0x1b8d0159
 800c494:	3fe6066c 	.word	0x3fe6066c
 800c498:	9c598ac8 	.word	0x9c598ac8
 800c49c:	40002ae5 	.word	0x40002ae5
 800c4a0:	1c8a2d4b 	.word	0x1c8a2d4b
 800c4a4:	40033a27 	.word	0x40033a27
 800c4a8:	3fefffff 	.word	0x3fefffff
 800c4ac:	3fdfffff 	.word	0x3fdfffff
 800c4b0:	3ff00000 	.word	0x3ff00000
 800c4b4:	3fe00000 	.word	0x3fe00000
 800c4b8:	3fef3332 	.word	0x3fef3332
 800c4bc:	ee10 2a10 	vmov	r2, s0
 800c4c0:	ee10 0a10 	vmov	r0, s0
 800c4c4:	465b      	mov	r3, fp
 800c4c6:	4659      	mov	r1, fp
 800c4c8:	f7f3 fef0 	bl	80002ac <__adddf3>
 800c4cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4d4:	4640      	mov	r0, r8
 800c4d6:	4649      	mov	r1, r9
 800c4d8:	f7f4 f9c8 	bl	800086c <__aeabi_ddiv>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	460b      	mov	r3, r1
 800c4e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4e4:	f7f4 f898 	bl	8000618 <__aeabi_dmul>
 800c4e8:	2600      	movs	r6, #0
 800c4ea:	4680      	mov	r8, r0
 800c4ec:	4689      	mov	r9, r1
 800c4ee:	4632      	mov	r2, r6
 800c4f0:	465b      	mov	r3, fp
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	4659      	mov	r1, fp
 800c4f6:	f7f4 f88f 	bl	8000618 <__aeabi_dmul>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	4620      	mov	r0, r4
 800c500:	4629      	mov	r1, r5
 800c502:	f7f3 fed1 	bl	80002a8 <__aeabi_dsub>
 800c506:	4632      	mov	r2, r6
 800c508:	4604      	mov	r4, r0
 800c50a:	460d      	mov	r5, r1
 800c50c:	465b      	mov	r3, fp
 800c50e:	4650      	mov	r0, sl
 800c510:	4659      	mov	r1, fp
 800c512:	f7f3 fecb 	bl	80002ac <__adddf3>
 800c516:	4602      	mov	r2, r0
 800c518:	460b      	mov	r3, r1
 800c51a:	4620      	mov	r0, r4
 800c51c:	4629      	mov	r1, r5
 800c51e:	f7f4 f9a5 	bl	800086c <__aeabi_ddiv>
 800c522:	4602      	mov	r2, r0
 800c524:	460b      	mov	r3, r1
 800c526:	f7f3 fec1 	bl	80002ac <__adddf3>
 800c52a:	4602      	mov	r2, r0
 800c52c:	460b      	mov	r3, r1
 800c52e:	a114      	add	r1, pc, #80	; (adr r1, 800c580 <__ieee754_asin+0x410>)
 800c530:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c534:	f7f3 feb8 	bl	80002a8 <__aeabi_dsub>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	4640      	mov	r0, r8
 800c53e:	4649      	mov	r1, r9
 800c540:	f7f3 feb2 	bl	80002a8 <__aeabi_dsub>
 800c544:	465f      	mov	r7, fp
 800c546:	4604      	mov	r4, r0
 800c548:	460d      	mov	r5, r1
 800c54a:	4632      	mov	r2, r6
 800c54c:	465b      	mov	r3, fp
 800c54e:	4630      	mov	r0, r6
 800c550:	4639      	mov	r1, r7
 800c552:	f7f3 feab 	bl	80002ac <__adddf3>
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	a10b      	add	r1, pc, #44	; (adr r1, 800c588 <__ieee754_asin+0x418>)
 800c55c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c560:	f7f3 fea2 	bl	80002a8 <__aeabi_dsub>
 800c564:	4602      	mov	r2, r0
 800c566:	460b      	mov	r3, r1
 800c568:	4620      	mov	r0, r4
 800c56a:	4629      	mov	r1, r5
 800c56c:	f7f3 fe9c 	bl	80002a8 <__aeabi_dsub>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	a104      	add	r1, pc, #16	; (adr r1, 800c588 <__ieee754_asin+0x418>)
 800c576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c57a:	e6dd      	b.n	800c338 <__ieee754_asin+0x1c8>
 800c57c:	f3af 8000 	nop.w
 800c580:	33145c07 	.word	0x33145c07
 800c584:	3c91a626 	.word	0x3c91a626
 800c588:	54442d18 	.word	0x54442d18
 800c58c:	3fe921fb 	.word	0x3fe921fb

0800c590 <__ieee754_atan2>:
 800c590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c594:	ec57 6b11 	vmov	r6, r7, d1
 800c598:	4273      	negs	r3, r6
 800c59a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c59e:	4333      	orrs	r3, r6
 800c5a0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800c748 <__ieee754_atan2+0x1b8>
 800c5a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c5a8:	4573      	cmp	r3, lr
 800c5aa:	ec51 0b10 	vmov	r0, r1, d0
 800c5ae:	ee11 8a10 	vmov	r8, s2
 800c5b2:	d80a      	bhi.n	800c5ca <__ieee754_atan2+0x3a>
 800c5b4:	4244      	negs	r4, r0
 800c5b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c5ba:	4304      	orrs	r4, r0
 800c5bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c5c0:	4574      	cmp	r4, lr
 800c5c2:	468c      	mov	ip, r1
 800c5c4:	ee10 9a10 	vmov	r9, s0
 800c5c8:	d907      	bls.n	800c5da <__ieee754_atan2+0x4a>
 800c5ca:	4632      	mov	r2, r6
 800c5cc:	463b      	mov	r3, r7
 800c5ce:	f7f3 fe6d 	bl	80002ac <__adddf3>
 800c5d2:	ec41 0b10 	vmov	d0, r0, r1
 800c5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c5de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c5e2:	4334      	orrs	r4, r6
 800c5e4:	d103      	bne.n	800c5ee <__ieee754_atan2+0x5e>
 800c5e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5ea:	f000 b961 	b.w	800c8b0 <atan>
 800c5ee:	17bc      	asrs	r4, r7, #30
 800c5f0:	f004 0402 	and.w	r4, r4, #2
 800c5f4:	ea53 0909 	orrs.w	r9, r3, r9
 800c5f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c5fc:	d107      	bne.n	800c60e <__ieee754_atan2+0x7e>
 800c5fe:	2c02      	cmp	r4, #2
 800c600:	d073      	beq.n	800c6ea <__ieee754_atan2+0x15a>
 800c602:	2c03      	cmp	r4, #3
 800c604:	d1e5      	bne.n	800c5d2 <__ieee754_atan2+0x42>
 800c606:	a13e      	add	r1, pc, #248	; (adr r1, 800c700 <__ieee754_atan2+0x170>)
 800c608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c60c:	e7e1      	b.n	800c5d2 <__ieee754_atan2+0x42>
 800c60e:	ea52 0808 	orrs.w	r8, r2, r8
 800c612:	d106      	bne.n	800c622 <__ieee754_atan2+0x92>
 800c614:	f1bc 0f00 	cmp.w	ip, #0
 800c618:	da6b      	bge.n	800c6f2 <__ieee754_atan2+0x162>
 800c61a:	a13b      	add	r1, pc, #236	; (adr r1, 800c708 <__ieee754_atan2+0x178>)
 800c61c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c620:	e7d7      	b.n	800c5d2 <__ieee754_atan2+0x42>
 800c622:	4572      	cmp	r2, lr
 800c624:	d120      	bne.n	800c668 <__ieee754_atan2+0xd8>
 800c626:	4293      	cmp	r3, r2
 800c628:	d111      	bne.n	800c64e <__ieee754_atan2+0xbe>
 800c62a:	2c02      	cmp	r4, #2
 800c62c:	d007      	beq.n	800c63e <__ieee754_atan2+0xae>
 800c62e:	2c03      	cmp	r4, #3
 800c630:	d009      	beq.n	800c646 <__ieee754_atan2+0xb6>
 800c632:	2c01      	cmp	r4, #1
 800c634:	d155      	bne.n	800c6e2 <__ieee754_atan2+0x152>
 800c636:	a136      	add	r1, pc, #216	; (adr r1, 800c710 <__ieee754_atan2+0x180>)
 800c638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c63c:	e7c9      	b.n	800c5d2 <__ieee754_atan2+0x42>
 800c63e:	a136      	add	r1, pc, #216	; (adr r1, 800c718 <__ieee754_atan2+0x188>)
 800c640:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c644:	e7c5      	b.n	800c5d2 <__ieee754_atan2+0x42>
 800c646:	a136      	add	r1, pc, #216	; (adr r1, 800c720 <__ieee754_atan2+0x190>)
 800c648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c64c:	e7c1      	b.n	800c5d2 <__ieee754_atan2+0x42>
 800c64e:	2c02      	cmp	r4, #2
 800c650:	d04b      	beq.n	800c6ea <__ieee754_atan2+0x15a>
 800c652:	2c03      	cmp	r4, #3
 800c654:	d0d7      	beq.n	800c606 <__ieee754_atan2+0x76>
 800c656:	2c01      	cmp	r4, #1
 800c658:	f04f 0000 	mov.w	r0, #0
 800c65c:	d102      	bne.n	800c664 <__ieee754_atan2+0xd4>
 800c65e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c662:	e7b6      	b.n	800c5d2 <__ieee754_atan2+0x42>
 800c664:	2100      	movs	r1, #0
 800c666:	e7b4      	b.n	800c5d2 <__ieee754_atan2+0x42>
 800c668:	4573      	cmp	r3, lr
 800c66a:	d0d3      	beq.n	800c614 <__ieee754_atan2+0x84>
 800c66c:	1a9b      	subs	r3, r3, r2
 800c66e:	151b      	asrs	r3, r3, #20
 800c670:	2b3c      	cmp	r3, #60	; 0x3c
 800c672:	dc1e      	bgt.n	800c6b2 <__ieee754_atan2+0x122>
 800c674:	2f00      	cmp	r7, #0
 800c676:	da01      	bge.n	800c67c <__ieee754_atan2+0xec>
 800c678:	333c      	adds	r3, #60	; 0x3c
 800c67a:	db1e      	blt.n	800c6ba <__ieee754_atan2+0x12a>
 800c67c:	4632      	mov	r2, r6
 800c67e:	463b      	mov	r3, r7
 800c680:	f7f4 f8f4 	bl	800086c <__aeabi_ddiv>
 800c684:	ec41 0b10 	vmov	d0, r0, r1
 800c688:	f000 fab2 	bl	800cbf0 <fabs>
 800c68c:	f000 f910 	bl	800c8b0 <atan>
 800c690:	ec51 0b10 	vmov	r0, r1, d0
 800c694:	2c01      	cmp	r4, #1
 800c696:	d013      	beq.n	800c6c0 <__ieee754_atan2+0x130>
 800c698:	2c02      	cmp	r4, #2
 800c69a:	d015      	beq.n	800c6c8 <__ieee754_atan2+0x138>
 800c69c:	2c00      	cmp	r4, #0
 800c69e:	d098      	beq.n	800c5d2 <__ieee754_atan2+0x42>
 800c6a0:	a321      	add	r3, pc, #132	; (adr r3, 800c728 <__ieee754_atan2+0x198>)
 800c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a6:	f7f3 fdff 	bl	80002a8 <__aeabi_dsub>
 800c6aa:	a321      	add	r3, pc, #132	; (adr r3, 800c730 <__ieee754_atan2+0x1a0>)
 800c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b0:	e014      	b.n	800c6dc <__ieee754_atan2+0x14c>
 800c6b2:	a121      	add	r1, pc, #132	; (adr r1, 800c738 <__ieee754_atan2+0x1a8>)
 800c6b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6b8:	e7ec      	b.n	800c694 <__ieee754_atan2+0x104>
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	2100      	movs	r1, #0
 800c6be:	e7e9      	b.n	800c694 <__ieee754_atan2+0x104>
 800c6c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	e784      	b.n	800c5d2 <__ieee754_atan2+0x42>
 800c6c8:	a317      	add	r3, pc, #92	; (adr r3, 800c728 <__ieee754_atan2+0x198>)
 800c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ce:	f7f3 fdeb 	bl	80002a8 <__aeabi_dsub>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	a116      	add	r1, pc, #88	; (adr r1, 800c730 <__ieee754_atan2+0x1a0>)
 800c6d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6dc:	f7f3 fde4 	bl	80002a8 <__aeabi_dsub>
 800c6e0:	e777      	b.n	800c5d2 <__ieee754_atan2+0x42>
 800c6e2:	a117      	add	r1, pc, #92	; (adr r1, 800c740 <__ieee754_atan2+0x1b0>)
 800c6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6e8:	e773      	b.n	800c5d2 <__ieee754_atan2+0x42>
 800c6ea:	a111      	add	r1, pc, #68	; (adr r1, 800c730 <__ieee754_atan2+0x1a0>)
 800c6ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6f0:	e76f      	b.n	800c5d2 <__ieee754_atan2+0x42>
 800c6f2:	a111      	add	r1, pc, #68	; (adr r1, 800c738 <__ieee754_atan2+0x1a8>)
 800c6f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6f8:	e76b      	b.n	800c5d2 <__ieee754_atan2+0x42>
 800c6fa:	bf00      	nop
 800c6fc:	f3af 8000 	nop.w
 800c700:	54442d18 	.word	0x54442d18
 800c704:	c00921fb 	.word	0xc00921fb
 800c708:	54442d18 	.word	0x54442d18
 800c70c:	bff921fb 	.word	0xbff921fb
 800c710:	54442d18 	.word	0x54442d18
 800c714:	bfe921fb 	.word	0xbfe921fb
 800c718:	7f3321d2 	.word	0x7f3321d2
 800c71c:	4002d97c 	.word	0x4002d97c
 800c720:	7f3321d2 	.word	0x7f3321d2
 800c724:	c002d97c 	.word	0xc002d97c
 800c728:	33145c07 	.word	0x33145c07
 800c72c:	3ca1a626 	.word	0x3ca1a626
 800c730:	54442d18 	.word	0x54442d18
 800c734:	400921fb 	.word	0x400921fb
 800c738:	54442d18 	.word	0x54442d18
 800c73c:	3ff921fb 	.word	0x3ff921fb
 800c740:	54442d18 	.word	0x54442d18
 800c744:	3fe921fb 	.word	0x3fe921fb
 800c748:	7ff00000 	.word	0x7ff00000

0800c74c <__ieee754_sqrt>:
 800c74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c750:	4955      	ldr	r1, [pc, #340]	; (800c8a8 <__ieee754_sqrt+0x15c>)
 800c752:	ec55 4b10 	vmov	r4, r5, d0
 800c756:	43a9      	bics	r1, r5
 800c758:	462b      	mov	r3, r5
 800c75a:	462a      	mov	r2, r5
 800c75c:	d112      	bne.n	800c784 <__ieee754_sqrt+0x38>
 800c75e:	ee10 2a10 	vmov	r2, s0
 800c762:	ee10 0a10 	vmov	r0, s0
 800c766:	4629      	mov	r1, r5
 800c768:	f7f3 ff56 	bl	8000618 <__aeabi_dmul>
 800c76c:	4602      	mov	r2, r0
 800c76e:	460b      	mov	r3, r1
 800c770:	4620      	mov	r0, r4
 800c772:	4629      	mov	r1, r5
 800c774:	f7f3 fd9a 	bl	80002ac <__adddf3>
 800c778:	4604      	mov	r4, r0
 800c77a:	460d      	mov	r5, r1
 800c77c:	ec45 4b10 	vmov	d0, r4, r5
 800c780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c784:	2d00      	cmp	r5, #0
 800c786:	ee10 0a10 	vmov	r0, s0
 800c78a:	4621      	mov	r1, r4
 800c78c:	dc0f      	bgt.n	800c7ae <__ieee754_sqrt+0x62>
 800c78e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c792:	4330      	orrs	r0, r6
 800c794:	d0f2      	beq.n	800c77c <__ieee754_sqrt+0x30>
 800c796:	b155      	cbz	r5, 800c7ae <__ieee754_sqrt+0x62>
 800c798:	ee10 2a10 	vmov	r2, s0
 800c79c:	4620      	mov	r0, r4
 800c79e:	4629      	mov	r1, r5
 800c7a0:	f7f3 fd82 	bl	80002a8 <__aeabi_dsub>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	f7f4 f860 	bl	800086c <__aeabi_ddiv>
 800c7ac:	e7e4      	b.n	800c778 <__ieee754_sqrt+0x2c>
 800c7ae:	151b      	asrs	r3, r3, #20
 800c7b0:	d073      	beq.n	800c89a <__ieee754_sqrt+0x14e>
 800c7b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c7b6:	07dd      	lsls	r5, r3, #31
 800c7b8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c7bc:	bf48      	it	mi
 800c7be:	0fc8      	lsrmi	r0, r1, #31
 800c7c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c7c4:	bf44      	itt	mi
 800c7c6:	0049      	lslmi	r1, r1, #1
 800c7c8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c7cc:	2500      	movs	r5, #0
 800c7ce:	1058      	asrs	r0, r3, #1
 800c7d0:	0fcb      	lsrs	r3, r1, #31
 800c7d2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c7d6:	0049      	lsls	r1, r1, #1
 800c7d8:	2316      	movs	r3, #22
 800c7da:	462c      	mov	r4, r5
 800c7dc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c7e0:	19a7      	adds	r7, r4, r6
 800c7e2:	4297      	cmp	r7, r2
 800c7e4:	bfde      	ittt	le
 800c7e6:	19bc      	addle	r4, r7, r6
 800c7e8:	1bd2      	suble	r2, r2, r7
 800c7ea:	19ad      	addle	r5, r5, r6
 800c7ec:	0fcf      	lsrs	r7, r1, #31
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c7f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c7f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c7fc:	d1f0      	bne.n	800c7e0 <__ieee754_sqrt+0x94>
 800c7fe:	f04f 0c20 	mov.w	ip, #32
 800c802:	469e      	mov	lr, r3
 800c804:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c808:	42a2      	cmp	r2, r4
 800c80a:	eb06 070e 	add.w	r7, r6, lr
 800c80e:	dc02      	bgt.n	800c816 <__ieee754_sqrt+0xca>
 800c810:	d112      	bne.n	800c838 <__ieee754_sqrt+0xec>
 800c812:	428f      	cmp	r7, r1
 800c814:	d810      	bhi.n	800c838 <__ieee754_sqrt+0xec>
 800c816:	2f00      	cmp	r7, #0
 800c818:	eb07 0e06 	add.w	lr, r7, r6
 800c81c:	da42      	bge.n	800c8a4 <__ieee754_sqrt+0x158>
 800c81e:	f1be 0f00 	cmp.w	lr, #0
 800c822:	db3f      	blt.n	800c8a4 <__ieee754_sqrt+0x158>
 800c824:	f104 0801 	add.w	r8, r4, #1
 800c828:	1b12      	subs	r2, r2, r4
 800c82a:	428f      	cmp	r7, r1
 800c82c:	bf88      	it	hi
 800c82e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c832:	1bc9      	subs	r1, r1, r7
 800c834:	4433      	add	r3, r6
 800c836:	4644      	mov	r4, r8
 800c838:	0052      	lsls	r2, r2, #1
 800c83a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c83e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c842:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c846:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c84a:	d1dd      	bne.n	800c808 <__ieee754_sqrt+0xbc>
 800c84c:	430a      	orrs	r2, r1
 800c84e:	d006      	beq.n	800c85e <__ieee754_sqrt+0x112>
 800c850:	1c5c      	adds	r4, r3, #1
 800c852:	bf13      	iteet	ne
 800c854:	3301      	addne	r3, #1
 800c856:	3501      	addeq	r5, #1
 800c858:	4663      	moveq	r3, ip
 800c85a:	f023 0301 	bicne.w	r3, r3, #1
 800c85e:	106a      	asrs	r2, r5, #1
 800c860:	085b      	lsrs	r3, r3, #1
 800c862:	07e9      	lsls	r1, r5, #31
 800c864:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c868:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c86c:	bf48      	it	mi
 800c86e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c872:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c876:	461c      	mov	r4, r3
 800c878:	e780      	b.n	800c77c <__ieee754_sqrt+0x30>
 800c87a:	0aca      	lsrs	r2, r1, #11
 800c87c:	3815      	subs	r0, #21
 800c87e:	0549      	lsls	r1, r1, #21
 800c880:	2a00      	cmp	r2, #0
 800c882:	d0fa      	beq.n	800c87a <__ieee754_sqrt+0x12e>
 800c884:	02d6      	lsls	r6, r2, #11
 800c886:	d50a      	bpl.n	800c89e <__ieee754_sqrt+0x152>
 800c888:	f1c3 0420 	rsb	r4, r3, #32
 800c88c:	fa21 f404 	lsr.w	r4, r1, r4
 800c890:	1e5d      	subs	r5, r3, #1
 800c892:	4099      	lsls	r1, r3
 800c894:	4322      	orrs	r2, r4
 800c896:	1b43      	subs	r3, r0, r5
 800c898:	e78b      	b.n	800c7b2 <__ieee754_sqrt+0x66>
 800c89a:	4618      	mov	r0, r3
 800c89c:	e7f0      	b.n	800c880 <__ieee754_sqrt+0x134>
 800c89e:	0052      	lsls	r2, r2, #1
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	e7ef      	b.n	800c884 <__ieee754_sqrt+0x138>
 800c8a4:	46a0      	mov	r8, r4
 800c8a6:	e7bf      	b.n	800c828 <__ieee754_sqrt+0xdc>
 800c8a8:	7ff00000 	.word	0x7ff00000
 800c8ac:	00000000 	.word	0x00000000

0800c8b0 <atan>:
 800c8b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b4:	ec55 4b10 	vmov	r4, r5, d0
 800c8b8:	4bc3      	ldr	r3, [pc, #780]	; (800cbc8 <atan+0x318>)
 800c8ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c8be:	429e      	cmp	r6, r3
 800c8c0:	46ab      	mov	fp, r5
 800c8c2:	dd18      	ble.n	800c8f6 <atan+0x46>
 800c8c4:	4bc1      	ldr	r3, [pc, #772]	; (800cbcc <atan+0x31c>)
 800c8c6:	429e      	cmp	r6, r3
 800c8c8:	dc01      	bgt.n	800c8ce <atan+0x1e>
 800c8ca:	d109      	bne.n	800c8e0 <atan+0x30>
 800c8cc:	b144      	cbz	r4, 800c8e0 <atan+0x30>
 800c8ce:	4622      	mov	r2, r4
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	f7f3 fce9 	bl	80002ac <__adddf3>
 800c8da:	4604      	mov	r4, r0
 800c8dc:	460d      	mov	r5, r1
 800c8de:	e006      	b.n	800c8ee <atan+0x3e>
 800c8e0:	f1bb 0f00 	cmp.w	fp, #0
 800c8e4:	f340 8131 	ble.w	800cb4a <atan+0x29a>
 800c8e8:	a59b      	add	r5, pc, #620	; (adr r5, 800cb58 <atan+0x2a8>)
 800c8ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c8ee:	ec45 4b10 	vmov	d0, r4, r5
 800c8f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f6:	4bb6      	ldr	r3, [pc, #728]	; (800cbd0 <atan+0x320>)
 800c8f8:	429e      	cmp	r6, r3
 800c8fa:	dc14      	bgt.n	800c926 <atan+0x76>
 800c8fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c900:	429e      	cmp	r6, r3
 800c902:	dc0d      	bgt.n	800c920 <atan+0x70>
 800c904:	a396      	add	r3, pc, #600	; (adr r3, 800cb60 <atan+0x2b0>)
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	ee10 0a10 	vmov	r0, s0
 800c90e:	4629      	mov	r1, r5
 800c910:	f7f3 fccc 	bl	80002ac <__adddf3>
 800c914:	2200      	movs	r2, #0
 800c916:	4baf      	ldr	r3, [pc, #700]	; (800cbd4 <atan+0x324>)
 800c918:	f7f4 f90e 	bl	8000b38 <__aeabi_dcmpgt>
 800c91c:	2800      	cmp	r0, #0
 800c91e:	d1e6      	bne.n	800c8ee <atan+0x3e>
 800c920:	f04f 3aff 	mov.w	sl, #4294967295
 800c924:	e02b      	b.n	800c97e <atan+0xce>
 800c926:	f000 f963 	bl	800cbf0 <fabs>
 800c92a:	4bab      	ldr	r3, [pc, #684]	; (800cbd8 <atan+0x328>)
 800c92c:	429e      	cmp	r6, r3
 800c92e:	ec55 4b10 	vmov	r4, r5, d0
 800c932:	f300 80bf 	bgt.w	800cab4 <atan+0x204>
 800c936:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c93a:	429e      	cmp	r6, r3
 800c93c:	f300 80a0 	bgt.w	800ca80 <atan+0x1d0>
 800c940:	ee10 2a10 	vmov	r2, s0
 800c944:	ee10 0a10 	vmov	r0, s0
 800c948:	462b      	mov	r3, r5
 800c94a:	4629      	mov	r1, r5
 800c94c:	f7f3 fcae 	bl	80002ac <__adddf3>
 800c950:	2200      	movs	r2, #0
 800c952:	4ba0      	ldr	r3, [pc, #640]	; (800cbd4 <atan+0x324>)
 800c954:	f7f3 fca8 	bl	80002a8 <__aeabi_dsub>
 800c958:	2200      	movs	r2, #0
 800c95a:	4606      	mov	r6, r0
 800c95c:	460f      	mov	r7, r1
 800c95e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c962:	4620      	mov	r0, r4
 800c964:	4629      	mov	r1, r5
 800c966:	f7f3 fca1 	bl	80002ac <__adddf3>
 800c96a:	4602      	mov	r2, r0
 800c96c:	460b      	mov	r3, r1
 800c96e:	4630      	mov	r0, r6
 800c970:	4639      	mov	r1, r7
 800c972:	f7f3 ff7b 	bl	800086c <__aeabi_ddiv>
 800c976:	f04f 0a00 	mov.w	sl, #0
 800c97a:	4604      	mov	r4, r0
 800c97c:	460d      	mov	r5, r1
 800c97e:	4622      	mov	r2, r4
 800c980:	462b      	mov	r3, r5
 800c982:	4620      	mov	r0, r4
 800c984:	4629      	mov	r1, r5
 800c986:	f7f3 fe47 	bl	8000618 <__aeabi_dmul>
 800c98a:	4602      	mov	r2, r0
 800c98c:	460b      	mov	r3, r1
 800c98e:	4680      	mov	r8, r0
 800c990:	4689      	mov	r9, r1
 800c992:	f7f3 fe41 	bl	8000618 <__aeabi_dmul>
 800c996:	a374      	add	r3, pc, #464	; (adr r3, 800cb68 <atan+0x2b8>)
 800c998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99c:	4606      	mov	r6, r0
 800c99e:	460f      	mov	r7, r1
 800c9a0:	f7f3 fe3a 	bl	8000618 <__aeabi_dmul>
 800c9a4:	a372      	add	r3, pc, #456	; (adr r3, 800cb70 <atan+0x2c0>)
 800c9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9aa:	f7f3 fc7f 	bl	80002ac <__adddf3>
 800c9ae:	4632      	mov	r2, r6
 800c9b0:	463b      	mov	r3, r7
 800c9b2:	f7f3 fe31 	bl	8000618 <__aeabi_dmul>
 800c9b6:	a370      	add	r3, pc, #448	; (adr r3, 800cb78 <atan+0x2c8>)
 800c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9bc:	f7f3 fc76 	bl	80002ac <__adddf3>
 800c9c0:	4632      	mov	r2, r6
 800c9c2:	463b      	mov	r3, r7
 800c9c4:	f7f3 fe28 	bl	8000618 <__aeabi_dmul>
 800c9c8:	a36d      	add	r3, pc, #436	; (adr r3, 800cb80 <atan+0x2d0>)
 800c9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ce:	f7f3 fc6d 	bl	80002ac <__adddf3>
 800c9d2:	4632      	mov	r2, r6
 800c9d4:	463b      	mov	r3, r7
 800c9d6:	f7f3 fe1f 	bl	8000618 <__aeabi_dmul>
 800c9da:	a36b      	add	r3, pc, #428	; (adr r3, 800cb88 <atan+0x2d8>)
 800c9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e0:	f7f3 fc64 	bl	80002ac <__adddf3>
 800c9e4:	4632      	mov	r2, r6
 800c9e6:	463b      	mov	r3, r7
 800c9e8:	f7f3 fe16 	bl	8000618 <__aeabi_dmul>
 800c9ec:	a368      	add	r3, pc, #416	; (adr r3, 800cb90 <atan+0x2e0>)
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	f7f3 fc5b 	bl	80002ac <__adddf3>
 800c9f6:	4642      	mov	r2, r8
 800c9f8:	464b      	mov	r3, r9
 800c9fa:	f7f3 fe0d 	bl	8000618 <__aeabi_dmul>
 800c9fe:	a366      	add	r3, pc, #408	; (adr r3, 800cb98 <atan+0x2e8>)
 800ca00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca04:	4680      	mov	r8, r0
 800ca06:	4689      	mov	r9, r1
 800ca08:	4630      	mov	r0, r6
 800ca0a:	4639      	mov	r1, r7
 800ca0c:	f7f3 fe04 	bl	8000618 <__aeabi_dmul>
 800ca10:	a363      	add	r3, pc, #396	; (adr r3, 800cba0 <atan+0x2f0>)
 800ca12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca16:	f7f3 fc47 	bl	80002a8 <__aeabi_dsub>
 800ca1a:	4632      	mov	r2, r6
 800ca1c:	463b      	mov	r3, r7
 800ca1e:	f7f3 fdfb 	bl	8000618 <__aeabi_dmul>
 800ca22:	a361      	add	r3, pc, #388	; (adr r3, 800cba8 <atan+0x2f8>)
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	f7f3 fc3e 	bl	80002a8 <__aeabi_dsub>
 800ca2c:	4632      	mov	r2, r6
 800ca2e:	463b      	mov	r3, r7
 800ca30:	f7f3 fdf2 	bl	8000618 <__aeabi_dmul>
 800ca34:	a35e      	add	r3, pc, #376	; (adr r3, 800cbb0 <atan+0x300>)
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	f7f3 fc35 	bl	80002a8 <__aeabi_dsub>
 800ca3e:	4632      	mov	r2, r6
 800ca40:	463b      	mov	r3, r7
 800ca42:	f7f3 fde9 	bl	8000618 <__aeabi_dmul>
 800ca46:	a35c      	add	r3, pc, #368	; (adr r3, 800cbb8 <atan+0x308>)
 800ca48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4c:	f7f3 fc2c 	bl	80002a8 <__aeabi_dsub>
 800ca50:	4632      	mov	r2, r6
 800ca52:	463b      	mov	r3, r7
 800ca54:	f7f3 fde0 	bl	8000618 <__aeabi_dmul>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4640      	mov	r0, r8
 800ca5e:	4649      	mov	r1, r9
 800ca60:	f7f3 fc24 	bl	80002ac <__adddf3>
 800ca64:	4622      	mov	r2, r4
 800ca66:	462b      	mov	r3, r5
 800ca68:	f7f3 fdd6 	bl	8000618 <__aeabi_dmul>
 800ca6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	d14b      	bne.n	800cb0e <atan+0x25e>
 800ca76:	4620      	mov	r0, r4
 800ca78:	4629      	mov	r1, r5
 800ca7a:	f7f3 fc15 	bl	80002a8 <__aeabi_dsub>
 800ca7e:	e72c      	b.n	800c8da <atan+0x2a>
 800ca80:	ee10 0a10 	vmov	r0, s0
 800ca84:	2200      	movs	r2, #0
 800ca86:	4b53      	ldr	r3, [pc, #332]	; (800cbd4 <atan+0x324>)
 800ca88:	4629      	mov	r1, r5
 800ca8a:	f7f3 fc0d 	bl	80002a8 <__aeabi_dsub>
 800ca8e:	2200      	movs	r2, #0
 800ca90:	4606      	mov	r6, r0
 800ca92:	460f      	mov	r7, r1
 800ca94:	4b4f      	ldr	r3, [pc, #316]	; (800cbd4 <atan+0x324>)
 800ca96:	4620      	mov	r0, r4
 800ca98:	4629      	mov	r1, r5
 800ca9a:	f7f3 fc07 	bl	80002ac <__adddf3>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4630      	mov	r0, r6
 800caa4:	4639      	mov	r1, r7
 800caa6:	f7f3 fee1 	bl	800086c <__aeabi_ddiv>
 800caaa:	f04f 0a01 	mov.w	sl, #1
 800caae:	4604      	mov	r4, r0
 800cab0:	460d      	mov	r5, r1
 800cab2:	e764      	b.n	800c97e <atan+0xce>
 800cab4:	4b49      	ldr	r3, [pc, #292]	; (800cbdc <atan+0x32c>)
 800cab6:	429e      	cmp	r6, r3
 800cab8:	dc1d      	bgt.n	800caf6 <atan+0x246>
 800caba:	ee10 0a10 	vmov	r0, s0
 800cabe:	2200      	movs	r2, #0
 800cac0:	4b47      	ldr	r3, [pc, #284]	; (800cbe0 <atan+0x330>)
 800cac2:	4629      	mov	r1, r5
 800cac4:	f7f3 fbf0 	bl	80002a8 <__aeabi_dsub>
 800cac8:	2200      	movs	r2, #0
 800caca:	4606      	mov	r6, r0
 800cacc:	460f      	mov	r7, r1
 800cace:	4b44      	ldr	r3, [pc, #272]	; (800cbe0 <atan+0x330>)
 800cad0:	4620      	mov	r0, r4
 800cad2:	4629      	mov	r1, r5
 800cad4:	f7f3 fda0 	bl	8000618 <__aeabi_dmul>
 800cad8:	2200      	movs	r2, #0
 800cada:	4b3e      	ldr	r3, [pc, #248]	; (800cbd4 <atan+0x324>)
 800cadc:	f7f3 fbe6 	bl	80002ac <__adddf3>
 800cae0:	4602      	mov	r2, r0
 800cae2:	460b      	mov	r3, r1
 800cae4:	4630      	mov	r0, r6
 800cae6:	4639      	mov	r1, r7
 800cae8:	f7f3 fec0 	bl	800086c <__aeabi_ddiv>
 800caec:	f04f 0a02 	mov.w	sl, #2
 800caf0:	4604      	mov	r4, r0
 800caf2:	460d      	mov	r5, r1
 800caf4:	e743      	b.n	800c97e <atan+0xce>
 800caf6:	462b      	mov	r3, r5
 800caf8:	ee10 2a10 	vmov	r2, s0
 800cafc:	2000      	movs	r0, #0
 800cafe:	4939      	ldr	r1, [pc, #228]	; (800cbe4 <atan+0x334>)
 800cb00:	f7f3 feb4 	bl	800086c <__aeabi_ddiv>
 800cb04:	f04f 0a03 	mov.w	sl, #3
 800cb08:	4604      	mov	r4, r0
 800cb0a:	460d      	mov	r5, r1
 800cb0c:	e737      	b.n	800c97e <atan+0xce>
 800cb0e:	4b36      	ldr	r3, [pc, #216]	; (800cbe8 <atan+0x338>)
 800cb10:	4e36      	ldr	r6, [pc, #216]	; (800cbec <atan+0x33c>)
 800cb12:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800cb16:	4456      	add	r6, sl
 800cb18:	449a      	add	sl, r3
 800cb1a:	e9da 2300 	ldrd	r2, r3, [sl]
 800cb1e:	f7f3 fbc3 	bl	80002a8 <__aeabi_dsub>
 800cb22:	4622      	mov	r2, r4
 800cb24:	462b      	mov	r3, r5
 800cb26:	f7f3 fbbf 	bl	80002a8 <__aeabi_dsub>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cb32:	f7f3 fbb9 	bl	80002a8 <__aeabi_dsub>
 800cb36:	f1bb 0f00 	cmp.w	fp, #0
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	460d      	mov	r5, r1
 800cb3e:	f6bf aed6 	bge.w	800c8ee <atan+0x3e>
 800cb42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb46:	461d      	mov	r5, r3
 800cb48:	e6d1      	b.n	800c8ee <atan+0x3e>
 800cb4a:	a51d      	add	r5, pc, #116	; (adr r5, 800cbc0 <atan+0x310>)
 800cb4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb50:	e6cd      	b.n	800c8ee <atan+0x3e>
 800cb52:	bf00      	nop
 800cb54:	f3af 8000 	nop.w
 800cb58:	54442d18 	.word	0x54442d18
 800cb5c:	3ff921fb 	.word	0x3ff921fb
 800cb60:	8800759c 	.word	0x8800759c
 800cb64:	7e37e43c 	.word	0x7e37e43c
 800cb68:	e322da11 	.word	0xe322da11
 800cb6c:	3f90ad3a 	.word	0x3f90ad3a
 800cb70:	24760deb 	.word	0x24760deb
 800cb74:	3fa97b4b 	.word	0x3fa97b4b
 800cb78:	a0d03d51 	.word	0xa0d03d51
 800cb7c:	3fb10d66 	.word	0x3fb10d66
 800cb80:	c54c206e 	.word	0xc54c206e
 800cb84:	3fb745cd 	.word	0x3fb745cd
 800cb88:	920083ff 	.word	0x920083ff
 800cb8c:	3fc24924 	.word	0x3fc24924
 800cb90:	5555550d 	.word	0x5555550d
 800cb94:	3fd55555 	.word	0x3fd55555
 800cb98:	2c6a6c2f 	.word	0x2c6a6c2f
 800cb9c:	bfa2b444 	.word	0xbfa2b444
 800cba0:	52defd9a 	.word	0x52defd9a
 800cba4:	3fadde2d 	.word	0x3fadde2d
 800cba8:	af749a6d 	.word	0xaf749a6d
 800cbac:	3fb3b0f2 	.word	0x3fb3b0f2
 800cbb0:	fe231671 	.word	0xfe231671
 800cbb4:	3fbc71c6 	.word	0x3fbc71c6
 800cbb8:	9998ebc4 	.word	0x9998ebc4
 800cbbc:	3fc99999 	.word	0x3fc99999
 800cbc0:	54442d18 	.word	0x54442d18
 800cbc4:	bff921fb 	.word	0xbff921fb
 800cbc8:	440fffff 	.word	0x440fffff
 800cbcc:	7ff00000 	.word	0x7ff00000
 800cbd0:	3fdbffff 	.word	0x3fdbffff
 800cbd4:	3ff00000 	.word	0x3ff00000
 800cbd8:	3ff2ffff 	.word	0x3ff2ffff
 800cbdc:	40037fff 	.word	0x40037fff
 800cbe0:	3ff80000 	.word	0x3ff80000
 800cbe4:	bff00000 	.word	0xbff00000
 800cbe8:	0800f5c0 	.word	0x0800f5c0
 800cbec:	0800f5a0 	.word	0x0800f5a0

0800cbf0 <fabs>:
 800cbf0:	ec51 0b10 	vmov	r0, r1, d0
 800cbf4:	ee10 2a10 	vmov	r2, s0
 800cbf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cbfc:	ec43 2b10 	vmov	d0, r2, r3
 800cc00:	4770      	bx	lr

0800cc02 <matherr>:
 800cc02:	2000      	movs	r0, #0
 800cc04:	4770      	bx	lr
	...

0800cc08 <nan>:
 800cc08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cc10 <nan+0x8>
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	00000000 	.word	0x00000000
 800cc14:	7ff80000 	.word	0x7ff80000

0800cc18 <__errno>:
 800cc18:	4b01      	ldr	r3, [pc, #4]	; (800cc20 <__errno+0x8>)
 800cc1a:	6818      	ldr	r0, [r3, #0]
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	20000114 	.word	0x20000114

0800cc24 <__libc_init_array>:
 800cc24:	b570      	push	{r4, r5, r6, lr}
 800cc26:	4e0d      	ldr	r6, [pc, #52]	; (800cc5c <__libc_init_array+0x38>)
 800cc28:	4c0d      	ldr	r4, [pc, #52]	; (800cc60 <__libc_init_array+0x3c>)
 800cc2a:	1ba4      	subs	r4, r4, r6
 800cc2c:	10a4      	asrs	r4, r4, #2
 800cc2e:	2500      	movs	r5, #0
 800cc30:	42a5      	cmp	r5, r4
 800cc32:	d109      	bne.n	800cc48 <__libc_init_array+0x24>
 800cc34:	4e0b      	ldr	r6, [pc, #44]	; (800cc64 <__libc_init_array+0x40>)
 800cc36:	4c0c      	ldr	r4, [pc, #48]	; (800cc68 <__libc_init_array+0x44>)
 800cc38:	f002 fc5a 	bl	800f4f0 <_init>
 800cc3c:	1ba4      	subs	r4, r4, r6
 800cc3e:	10a4      	asrs	r4, r4, #2
 800cc40:	2500      	movs	r5, #0
 800cc42:	42a5      	cmp	r5, r4
 800cc44:	d105      	bne.n	800cc52 <__libc_init_array+0x2e>
 800cc46:	bd70      	pop	{r4, r5, r6, pc}
 800cc48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc4c:	4798      	blx	r3
 800cc4e:	3501      	adds	r5, #1
 800cc50:	e7ee      	b.n	800cc30 <__libc_init_array+0xc>
 800cc52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc56:	4798      	blx	r3
 800cc58:	3501      	adds	r5, #1
 800cc5a:	e7f2      	b.n	800cc42 <__libc_init_array+0x1e>
 800cc5c:	0800f8a8 	.word	0x0800f8a8
 800cc60:	0800f8a8 	.word	0x0800f8a8
 800cc64:	0800f8a8 	.word	0x0800f8a8
 800cc68:	0800f8ac 	.word	0x0800f8ac

0800cc6c <malloc>:
 800cc6c:	4b02      	ldr	r3, [pc, #8]	; (800cc78 <malloc+0xc>)
 800cc6e:	4601      	mov	r1, r0
 800cc70:	6818      	ldr	r0, [r3, #0]
 800cc72:	f000 b865 	b.w	800cd40 <_malloc_r>
 800cc76:	bf00      	nop
 800cc78:	20000114 	.word	0x20000114

0800cc7c <memcpy>:
 800cc7c:	b510      	push	{r4, lr}
 800cc7e:	1e43      	subs	r3, r0, #1
 800cc80:	440a      	add	r2, r1
 800cc82:	4291      	cmp	r1, r2
 800cc84:	d100      	bne.n	800cc88 <memcpy+0xc>
 800cc86:	bd10      	pop	{r4, pc}
 800cc88:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc90:	e7f7      	b.n	800cc82 <memcpy+0x6>

0800cc92 <memset>:
 800cc92:	4402      	add	r2, r0
 800cc94:	4603      	mov	r3, r0
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d100      	bne.n	800cc9c <memset+0xa>
 800cc9a:	4770      	bx	lr
 800cc9c:	f803 1b01 	strb.w	r1, [r3], #1
 800cca0:	e7f9      	b.n	800cc96 <memset+0x4>
	...

0800cca4 <_free_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4605      	mov	r5, r0
 800cca8:	2900      	cmp	r1, #0
 800ccaa:	d045      	beq.n	800cd38 <_free_r+0x94>
 800ccac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccb0:	1f0c      	subs	r4, r1, #4
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	bfb8      	it	lt
 800ccb6:	18e4      	addlt	r4, r4, r3
 800ccb8:	f001 ff22 	bl	800eb00 <__malloc_lock>
 800ccbc:	4a1f      	ldr	r2, [pc, #124]	; (800cd3c <_free_r+0x98>)
 800ccbe:	6813      	ldr	r3, [r2, #0]
 800ccc0:	4610      	mov	r0, r2
 800ccc2:	b933      	cbnz	r3, 800ccd2 <_free_r+0x2e>
 800ccc4:	6063      	str	r3, [r4, #4]
 800ccc6:	6014      	str	r4, [r2, #0]
 800ccc8:	4628      	mov	r0, r5
 800ccca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccce:	f001 bf18 	b.w	800eb02 <__malloc_unlock>
 800ccd2:	42a3      	cmp	r3, r4
 800ccd4:	d90c      	bls.n	800ccf0 <_free_r+0x4c>
 800ccd6:	6821      	ldr	r1, [r4, #0]
 800ccd8:	1862      	adds	r2, r4, r1
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	bf04      	itt	eq
 800ccde:	681a      	ldreq	r2, [r3, #0]
 800cce0:	685b      	ldreq	r3, [r3, #4]
 800cce2:	6063      	str	r3, [r4, #4]
 800cce4:	bf04      	itt	eq
 800cce6:	1852      	addeq	r2, r2, r1
 800cce8:	6022      	streq	r2, [r4, #0]
 800ccea:	6004      	str	r4, [r0, #0]
 800ccec:	e7ec      	b.n	800ccc8 <_free_r+0x24>
 800ccee:	4613      	mov	r3, r2
 800ccf0:	685a      	ldr	r2, [r3, #4]
 800ccf2:	b10a      	cbz	r2, 800ccf8 <_free_r+0x54>
 800ccf4:	42a2      	cmp	r2, r4
 800ccf6:	d9fa      	bls.n	800ccee <_free_r+0x4a>
 800ccf8:	6819      	ldr	r1, [r3, #0]
 800ccfa:	1858      	adds	r0, r3, r1
 800ccfc:	42a0      	cmp	r0, r4
 800ccfe:	d10b      	bne.n	800cd18 <_free_r+0x74>
 800cd00:	6820      	ldr	r0, [r4, #0]
 800cd02:	4401      	add	r1, r0
 800cd04:	1858      	adds	r0, r3, r1
 800cd06:	4282      	cmp	r2, r0
 800cd08:	6019      	str	r1, [r3, #0]
 800cd0a:	d1dd      	bne.n	800ccc8 <_free_r+0x24>
 800cd0c:	6810      	ldr	r0, [r2, #0]
 800cd0e:	6852      	ldr	r2, [r2, #4]
 800cd10:	605a      	str	r2, [r3, #4]
 800cd12:	4401      	add	r1, r0
 800cd14:	6019      	str	r1, [r3, #0]
 800cd16:	e7d7      	b.n	800ccc8 <_free_r+0x24>
 800cd18:	d902      	bls.n	800cd20 <_free_r+0x7c>
 800cd1a:	230c      	movs	r3, #12
 800cd1c:	602b      	str	r3, [r5, #0]
 800cd1e:	e7d3      	b.n	800ccc8 <_free_r+0x24>
 800cd20:	6820      	ldr	r0, [r4, #0]
 800cd22:	1821      	adds	r1, r4, r0
 800cd24:	428a      	cmp	r2, r1
 800cd26:	bf04      	itt	eq
 800cd28:	6811      	ldreq	r1, [r2, #0]
 800cd2a:	6852      	ldreq	r2, [r2, #4]
 800cd2c:	6062      	str	r2, [r4, #4]
 800cd2e:	bf04      	itt	eq
 800cd30:	1809      	addeq	r1, r1, r0
 800cd32:	6021      	streq	r1, [r4, #0]
 800cd34:	605c      	str	r4, [r3, #4]
 800cd36:	e7c7      	b.n	800ccc8 <_free_r+0x24>
 800cd38:	bd38      	pop	{r3, r4, r5, pc}
 800cd3a:	bf00      	nop
 800cd3c:	2000043c 	.word	0x2000043c

0800cd40 <_malloc_r>:
 800cd40:	b570      	push	{r4, r5, r6, lr}
 800cd42:	1ccd      	adds	r5, r1, #3
 800cd44:	f025 0503 	bic.w	r5, r5, #3
 800cd48:	3508      	adds	r5, #8
 800cd4a:	2d0c      	cmp	r5, #12
 800cd4c:	bf38      	it	cc
 800cd4e:	250c      	movcc	r5, #12
 800cd50:	2d00      	cmp	r5, #0
 800cd52:	4606      	mov	r6, r0
 800cd54:	db01      	blt.n	800cd5a <_malloc_r+0x1a>
 800cd56:	42a9      	cmp	r1, r5
 800cd58:	d903      	bls.n	800cd62 <_malloc_r+0x22>
 800cd5a:	230c      	movs	r3, #12
 800cd5c:	6033      	str	r3, [r6, #0]
 800cd5e:	2000      	movs	r0, #0
 800cd60:	bd70      	pop	{r4, r5, r6, pc}
 800cd62:	f001 fecd 	bl	800eb00 <__malloc_lock>
 800cd66:	4a21      	ldr	r2, [pc, #132]	; (800cdec <_malloc_r+0xac>)
 800cd68:	6814      	ldr	r4, [r2, #0]
 800cd6a:	4621      	mov	r1, r4
 800cd6c:	b991      	cbnz	r1, 800cd94 <_malloc_r+0x54>
 800cd6e:	4c20      	ldr	r4, [pc, #128]	; (800cdf0 <_malloc_r+0xb0>)
 800cd70:	6823      	ldr	r3, [r4, #0]
 800cd72:	b91b      	cbnz	r3, 800cd7c <_malloc_r+0x3c>
 800cd74:	4630      	mov	r0, r6
 800cd76:	f000 fd15 	bl	800d7a4 <_sbrk_r>
 800cd7a:	6020      	str	r0, [r4, #0]
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	4630      	mov	r0, r6
 800cd80:	f000 fd10 	bl	800d7a4 <_sbrk_r>
 800cd84:	1c43      	adds	r3, r0, #1
 800cd86:	d124      	bne.n	800cdd2 <_malloc_r+0x92>
 800cd88:	230c      	movs	r3, #12
 800cd8a:	6033      	str	r3, [r6, #0]
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	f001 feb8 	bl	800eb02 <__malloc_unlock>
 800cd92:	e7e4      	b.n	800cd5e <_malloc_r+0x1e>
 800cd94:	680b      	ldr	r3, [r1, #0]
 800cd96:	1b5b      	subs	r3, r3, r5
 800cd98:	d418      	bmi.n	800cdcc <_malloc_r+0x8c>
 800cd9a:	2b0b      	cmp	r3, #11
 800cd9c:	d90f      	bls.n	800cdbe <_malloc_r+0x7e>
 800cd9e:	600b      	str	r3, [r1, #0]
 800cda0:	50cd      	str	r5, [r1, r3]
 800cda2:	18cc      	adds	r4, r1, r3
 800cda4:	4630      	mov	r0, r6
 800cda6:	f001 feac 	bl	800eb02 <__malloc_unlock>
 800cdaa:	f104 000b 	add.w	r0, r4, #11
 800cdae:	1d23      	adds	r3, r4, #4
 800cdb0:	f020 0007 	bic.w	r0, r0, #7
 800cdb4:	1ac3      	subs	r3, r0, r3
 800cdb6:	d0d3      	beq.n	800cd60 <_malloc_r+0x20>
 800cdb8:	425a      	negs	r2, r3
 800cdba:	50e2      	str	r2, [r4, r3]
 800cdbc:	e7d0      	b.n	800cd60 <_malloc_r+0x20>
 800cdbe:	428c      	cmp	r4, r1
 800cdc0:	684b      	ldr	r3, [r1, #4]
 800cdc2:	bf16      	itet	ne
 800cdc4:	6063      	strne	r3, [r4, #4]
 800cdc6:	6013      	streq	r3, [r2, #0]
 800cdc8:	460c      	movne	r4, r1
 800cdca:	e7eb      	b.n	800cda4 <_malloc_r+0x64>
 800cdcc:	460c      	mov	r4, r1
 800cdce:	6849      	ldr	r1, [r1, #4]
 800cdd0:	e7cc      	b.n	800cd6c <_malloc_r+0x2c>
 800cdd2:	1cc4      	adds	r4, r0, #3
 800cdd4:	f024 0403 	bic.w	r4, r4, #3
 800cdd8:	42a0      	cmp	r0, r4
 800cdda:	d005      	beq.n	800cde8 <_malloc_r+0xa8>
 800cddc:	1a21      	subs	r1, r4, r0
 800cdde:	4630      	mov	r0, r6
 800cde0:	f000 fce0 	bl	800d7a4 <_sbrk_r>
 800cde4:	3001      	adds	r0, #1
 800cde6:	d0cf      	beq.n	800cd88 <_malloc_r+0x48>
 800cde8:	6025      	str	r5, [r4, #0]
 800cdea:	e7db      	b.n	800cda4 <_malloc_r+0x64>
 800cdec:	2000043c 	.word	0x2000043c
 800cdf0:	20000440 	.word	0x20000440

0800cdf4 <__cvt>:
 800cdf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf8:	ec55 4b10 	vmov	r4, r5, d0
 800cdfc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800cdfe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ce02:	2d00      	cmp	r5, #0
 800ce04:	460e      	mov	r6, r1
 800ce06:	4691      	mov	r9, r2
 800ce08:	4619      	mov	r1, r3
 800ce0a:	bfb8      	it	lt
 800ce0c:	4622      	movlt	r2, r4
 800ce0e:	462b      	mov	r3, r5
 800ce10:	f027 0720 	bic.w	r7, r7, #32
 800ce14:	bfbb      	ittet	lt
 800ce16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ce1a:	461d      	movlt	r5, r3
 800ce1c:	2300      	movge	r3, #0
 800ce1e:	232d      	movlt	r3, #45	; 0x2d
 800ce20:	bfb8      	it	lt
 800ce22:	4614      	movlt	r4, r2
 800ce24:	2f46      	cmp	r7, #70	; 0x46
 800ce26:	700b      	strb	r3, [r1, #0]
 800ce28:	d004      	beq.n	800ce34 <__cvt+0x40>
 800ce2a:	2f45      	cmp	r7, #69	; 0x45
 800ce2c:	d100      	bne.n	800ce30 <__cvt+0x3c>
 800ce2e:	3601      	adds	r6, #1
 800ce30:	2102      	movs	r1, #2
 800ce32:	e000      	b.n	800ce36 <__cvt+0x42>
 800ce34:	2103      	movs	r1, #3
 800ce36:	ab03      	add	r3, sp, #12
 800ce38:	9301      	str	r3, [sp, #4]
 800ce3a:	ab02      	add	r3, sp, #8
 800ce3c:	9300      	str	r3, [sp, #0]
 800ce3e:	4632      	mov	r2, r6
 800ce40:	4653      	mov	r3, sl
 800ce42:	ec45 4b10 	vmov	d0, r4, r5
 800ce46:	f000 feb7 	bl	800dbb8 <_dtoa_r>
 800ce4a:	2f47      	cmp	r7, #71	; 0x47
 800ce4c:	4680      	mov	r8, r0
 800ce4e:	d102      	bne.n	800ce56 <__cvt+0x62>
 800ce50:	f019 0f01 	tst.w	r9, #1
 800ce54:	d026      	beq.n	800cea4 <__cvt+0xb0>
 800ce56:	2f46      	cmp	r7, #70	; 0x46
 800ce58:	eb08 0906 	add.w	r9, r8, r6
 800ce5c:	d111      	bne.n	800ce82 <__cvt+0x8e>
 800ce5e:	f898 3000 	ldrb.w	r3, [r8]
 800ce62:	2b30      	cmp	r3, #48	; 0x30
 800ce64:	d10a      	bne.n	800ce7c <__cvt+0x88>
 800ce66:	2200      	movs	r2, #0
 800ce68:	2300      	movs	r3, #0
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	f7f3 fe3b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce72:	b918      	cbnz	r0, 800ce7c <__cvt+0x88>
 800ce74:	f1c6 0601 	rsb	r6, r6, #1
 800ce78:	f8ca 6000 	str.w	r6, [sl]
 800ce7c:	f8da 3000 	ldr.w	r3, [sl]
 800ce80:	4499      	add	r9, r3
 800ce82:	2200      	movs	r2, #0
 800ce84:	2300      	movs	r3, #0
 800ce86:	4620      	mov	r0, r4
 800ce88:	4629      	mov	r1, r5
 800ce8a:	f7f3 fe2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce8e:	b938      	cbnz	r0, 800cea0 <__cvt+0xac>
 800ce90:	2230      	movs	r2, #48	; 0x30
 800ce92:	9b03      	ldr	r3, [sp, #12]
 800ce94:	454b      	cmp	r3, r9
 800ce96:	d205      	bcs.n	800cea4 <__cvt+0xb0>
 800ce98:	1c59      	adds	r1, r3, #1
 800ce9a:	9103      	str	r1, [sp, #12]
 800ce9c:	701a      	strb	r2, [r3, #0]
 800ce9e:	e7f8      	b.n	800ce92 <__cvt+0x9e>
 800cea0:	f8cd 900c 	str.w	r9, [sp, #12]
 800cea4:	9b03      	ldr	r3, [sp, #12]
 800cea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cea8:	eba3 0308 	sub.w	r3, r3, r8
 800ceac:	4640      	mov	r0, r8
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	b004      	add	sp, #16
 800ceb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ceb6 <__exponent>:
 800ceb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceb8:	2900      	cmp	r1, #0
 800ceba:	4604      	mov	r4, r0
 800cebc:	bfba      	itte	lt
 800cebe:	4249      	neglt	r1, r1
 800cec0:	232d      	movlt	r3, #45	; 0x2d
 800cec2:	232b      	movge	r3, #43	; 0x2b
 800cec4:	2909      	cmp	r1, #9
 800cec6:	f804 2b02 	strb.w	r2, [r4], #2
 800ceca:	7043      	strb	r3, [r0, #1]
 800cecc:	dd20      	ble.n	800cf10 <__exponent+0x5a>
 800cece:	f10d 0307 	add.w	r3, sp, #7
 800ced2:	461f      	mov	r7, r3
 800ced4:	260a      	movs	r6, #10
 800ced6:	fb91 f5f6 	sdiv	r5, r1, r6
 800ceda:	fb06 1115 	mls	r1, r6, r5, r1
 800cede:	3130      	adds	r1, #48	; 0x30
 800cee0:	2d09      	cmp	r5, #9
 800cee2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cee6:	f103 32ff 	add.w	r2, r3, #4294967295
 800ceea:	4629      	mov	r1, r5
 800ceec:	dc09      	bgt.n	800cf02 <__exponent+0x4c>
 800ceee:	3130      	adds	r1, #48	; 0x30
 800cef0:	3b02      	subs	r3, #2
 800cef2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cef6:	42bb      	cmp	r3, r7
 800cef8:	4622      	mov	r2, r4
 800cefa:	d304      	bcc.n	800cf06 <__exponent+0x50>
 800cefc:	1a10      	subs	r0, r2, r0
 800cefe:	b003      	add	sp, #12
 800cf00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf02:	4613      	mov	r3, r2
 800cf04:	e7e7      	b.n	800ced6 <__exponent+0x20>
 800cf06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf0a:	f804 2b01 	strb.w	r2, [r4], #1
 800cf0e:	e7f2      	b.n	800cef6 <__exponent+0x40>
 800cf10:	2330      	movs	r3, #48	; 0x30
 800cf12:	4419      	add	r1, r3
 800cf14:	7083      	strb	r3, [r0, #2]
 800cf16:	1d02      	adds	r2, r0, #4
 800cf18:	70c1      	strb	r1, [r0, #3]
 800cf1a:	e7ef      	b.n	800cefc <__exponent+0x46>

0800cf1c <_printf_float>:
 800cf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf20:	b08d      	sub	sp, #52	; 0x34
 800cf22:	460c      	mov	r4, r1
 800cf24:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cf28:	4616      	mov	r6, r2
 800cf2a:	461f      	mov	r7, r3
 800cf2c:	4605      	mov	r5, r0
 800cf2e:	f001 fd75 	bl	800ea1c <_localeconv_r>
 800cf32:	6803      	ldr	r3, [r0, #0]
 800cf34:	9304      	str	r3, [sp, #16]
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7f3 f95a 	bl	80001f0 <strlen>
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	930a      	str	r3, [sp, #40]	; 0x28
 800cf40:	f8d8 3000 	ldr.w	r3, [r8]
 800cf44:	9005      	str	r0, [sp, #20]
 800cf46:	3307      	adds	r3, #7
 800cf48:	f023 0307 	bic.w	r3, r3, #7
 800cf4c:	f103 0208 	add.w	r2, r3, #8
 800cf50:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cf54:	f8d4 b000 	ldr.w	fp, [r4]
 800cf58:	f8c8 2000 	str.w	r2, [r8]
 800cf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf60:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cf64:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cf68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cf6c:	9307      	str	r3, [sp, #28]
 800cf6e:	f8cd 8018 	str.w	r8, [sp, #24]
 800cf72:	f04f 32ff 	mov.w	r2, #4294967295
 800cf76:	4ba7      	ldr	r3, [pc, #668]	; (800d214 <_printf_float+0x2f8>)
 800cf78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf7c:	f7f3 fde6 	bl	8000b4c <__aeabi_dcmpun>
 800cf80:	bb70      	cbnz	r0, 800cfe0 <_printf_float+0xc4>
 800cf82:	f04f 32ff 	mov.w	r2, #4294967295
 800cf86:	4ba3      	ldr	r3, [pc, #652]	; (800d214 <_printf_float+0x2f8>)
 800cf88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf8c:	f7f3 fdc0 	bl	8000b10 <__aeabi_dcmple>
 800cf90:	bb30      	cbnz	r0, 800cfe0 <_printf_float+0xc4>
 800cf92:	2200      	movs	r2, #0
 800cf94:	2300      	movs	r3, #0
 800cf96:	4640      	mov	r0, r8
 800cf98:	4649      	mov	r1, r9
 800cf9a:	f7f3 fdaf 	bl	8000afc <__aeabi_dcmplt>
 800cf9e:	b110      	cbz	r0, 800cfa6 <_printf_float+0x8a>
 800cfa0:	232d      	movs	r3, #45	; 0x2d
 800cfa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfa6:	4a9c      	ldr	r2, [pc, #624]	; (800d218 <_printf_float+0x2fc>)
 800cfa8:	4b9c      	ldr	r3, [pc, #624]	; (800d21c <_printf_float+0x300>)
 800cfaa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cfae:	bf8c      	ite	hi
 800cfb0:	4690      	movhi	r8, r2
 800cfb2:	4698      	movls	r8, r3
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	f02b 0204 	bic.w	r2, fp, #4
 800cfba:	6123      	str	r3, [r4, #16]
 800cfbc:	6022      	str	r2, [r4, #0]
 800cfbe:	f04f 0900 	mov.w	r9, #0
 800cfc2:	9700      	str	r7, [sp, #0]
 800cfc4:	4633      	mov	r3, r6
 800cfc6:	aa0b      	add	r2, sp, #44	; 0x2c
 800cfc8:	4621      	mov	r1, r4
 800cfca:	4628      	mov	r0, r5
 800cfcc:	f000 f9e6 	bl	800d39c <_printf_common>
 800cfd0:	3001      	adds	r0, #1
 800cfd2:	f040 808d 	bne.w	800d0f0 <_printf_float+0x1d4>
 800cfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfda:	b00d      	add	sp, #52	; 0x34
 800cfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe0:	4642      	mov	r2, r8
 800cfe2:	464b      	mov	r3, r9
 800cfe4:	4640      	mov	r0, r8
 800cfe6:	4649      	mov	r1, r9
 800cfe8:	f7f3 fdb0 	bl	8000b4c <__aeabi_dcmpun>
 800cfec:	b110      	cbz	r0, 800cff4 <_printf_float+0xd8>
 800cfee:	4a8c      	ldr	r2, [pc, #560]	; (800d220 <_printf_float+0x304>)
 800cff0:	4b8c      	ldr	r3, [pc, #560]	; (800d224 <_printf_float+0x308>)
 800cff2:	e7da      	b.n	800cfaa <_printf_float+0x8e>
 800cff4:	6861      	ldr	r1, [r4, #4]
 800cff6:	1c4b      	adds	r3, r1, #1
 800cff8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800cffc:	a80a      	add	r0, sp, #40	; 0x28
 800cffe:	d13e      	bne.n	800d07e <_printf_float+0x162>
 800d000:	2306      	movs	r3, #6
 800d002:	6063      	str	r3, [r4, #4]
 800d004:	2300      	movs	r3, #0
 800d006:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d00a:	ab09      	add	r3, sp, #36	; 0x24
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	ec49 8b10 	vmov	d0, r8, r9
 800d012:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d016:	6022      	str	r2, [r4, #0]
 800d018:	f8cd a004 	str.w	sl, [sp, #4]
 800d01c:	6861      	ldr	r1, [r4, #4]
 800d01e:	4628      	mov	r0, r5
 800d020:	f7ff fee8 	bl	800cdf4 <__cvt>
 800d024:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d028:	2b47      	cmp	r3, #71	; 0x47
 800d02a:	4680      	mov	r8, r0
 800d02c:	d109      	bne.n	800d042 <_printf_float+0x126>
 800d02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d030:	1cd8      	adds	r0, r3, #3
 800d032:	db02      	blt.n	800d03a <_printf_float+0x11e>
 800d034:	6862      	ldr	r2, [r4, #4]
 800d036:	4293      	cmp	r3, r2
 800d038:	dd47      	ble.n	800d0ca <_printf_float+0x1ae>
 800d03a:	f1aa 0a02 	sub.w	sl, sl, #2
 800d03e:	fa5f fa8a 	uxtb.w	sl, sl
 800d042:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d046:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d048:	d824      	bhi.n	800d094 <_printf_float+0x178>
 800d04a:	3901      	subs	r1, #1
 800d04c:	4652      	mov	r2, sl
 800d04e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d052:	9109      	str	r1, [sp, #36]	; 0x24
 800d054:	f7ff ff2f 	bl	800ceb6 <__exponent>
 800d058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d05a:	1813      	adds	r3, r2, r0
 800d05c:	2a01      	cmp	r2, #1
 800d05e:	4681      	mov	r9, r0
 800d060:	6123      	str	r3, [r4, #16]
 800d062:	dc02      	bgt.n	800d06a <_printf_float+0x14e>
 800d064:	6822      	ldr	r2, [r4, #0]
 800d066:	07d1      	lsls	r1, r2, #31
 800d068:	d501      	bpl.n	800d06e <_printf_float+0x152>
 800d06a:	3301      	adds	r3, #1
 800d06c:	6123      	str	r3, [r4, #16]
 800d06e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d072:	2b00      	cmp	r3, #0
 800d074:	d0a5      	beq.n	800cfc2 <_printf_float+0xa6>
 800d076:	232d      	movs	r3, #45	; 0x2d
 800d078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d07c:	e7a1      	b.n	800cfc2 <_printf_float+0xa6>
 800d07e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800d082:	f000 8177 	beq.w	800d374 <_printf_float+0x458>
 800d086:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d08a:	d1bb      	bne.n	800d004 <_printf_float+0xe8>
 800d08c:	2900      	cmp	r1, #0
 800d08e:	d1b9      	bne.n	800d004 <_printf_float+0xe8>
 800d090:	2301      	movs	r3, #1
 800d092:	e7b6      	b.n	800d002 <_printf_float+0xe6>
 800d094:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800d098:	d119      	bne.n	800d0ce <_printf_float+0x1b2>
 800d09a:	2900      	cmp	r1, #0
 800d09c:	6863      	ldr	r3, [r4, #4]
 800d09e:	dd0c      	ble.n	800d0ba <_printf_float+0x19e>
 800d0a0:	6121      	str	r1, [r4, #16]
 800d0a2:	b913      	cbnz	r3, 800d0aa <_printf_float+0x18e>
 800d0a4:	6822      	ldr	r2, [r4, #0]
 800d0a6:	07d2      	lsls	r2, r2, #31
 800d0a8:	d502      	bpl.n	800d0b0 <_printf_float+0x194>
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	440b      	add	r3, r1
 800d0ae:	6123      	str	r3, [r4, #16]
 800d0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0b2:	65a3      	str	r3, [r4, #88]	; 0x58
 800d0b4:	f04f 0900 	mov.w	r9, #0
 800d0b8:	e7d9      	b.n	800d06e <_printf_float+0x152>
 800d0ba:	b913      	cbnz	r3, 800d0c2 <_printf_float+0x1a6>
 800d0bc:	6822      	ldr	r2, [r4, #0]
 800d0be:	07d0      	lsls	r0, r2, #31
 800d0c0:	d501      	bpl.n	800d0c6 <_printf_float+0x1aa>
 800d0c2:	3302      	adds	r3, #2
 800d0c4:	e7f3      	b.n	800d0ae <_printf_float+0x192>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e7f1      	b.n	800d0ae <_printf_float+0x192>
 800d0ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d0ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	db05      	blt.n	800d0e2 <_printf_float+0x1c6>
 800d0d6:	6822      	ldr	r2, [r4, #0]
 800d0d8:	6123      	str	r3, [r4, #16]
 800d0da:	07d1      	lsls	r1, r2, #31
 800d0dc:	d5e8      	bpl.n	800d0b0 <_printf_float+0x194>
 800d0de:	3301      	adds	r3, #1
 800d0e0:	e7e5      	b.n	800d0ae <_printf_float+0x192>
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	bfd4      	ite	le
 800d0e6:	f1c3 0302 	rsble	r3, r3, #2
 800d0ea:	2301      	movgt	r3, #1
 800d0ec:	4413      	add	r3, r2
 800d0ee:	e7de      	b.n	800d0ae <_printf_float+0x192>
 800d0f0:	6823      	ldr	r3, [r4, #0]
 800d0f2:	055a      	lsls	r2, r3, #21
 800d0f4:	d407      	bmi.n	800d106 <_printf_float+0x1ea>
 800d0f6:	6923      	ldr	r3, [r4, #16]
 800d0f8:	4642      	mov	r2, r8
 800d0fa:	4631      	mov	r1, r6
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	47b8      	blx	r7
 800d100:	3001      	adds	r0, #1
 800d102:	d12b      	bne.n	800d15c <_printf_float+0x240>
 800d104:	e767      	b.n	800cfd6 <_printf_float+0xba>
 800d106:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d10a:	f240 80dc 	bls.w	800d2c6 <_printf_float+0x3aa>
 800d10e:	2200      	movs	r2, #0
 800d110:	2300      	movs	r3, #0
 800d112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d116:	f7f3 fce7 	bl	8000ae8 <__aeabi_dcmpeq>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d033      	beq.n	800d186 <_printf_float+0x26a>
 800d11e:	2301      	movs	r3, #1
 800d120:	4a41      	ldr	r2, [pc, #260]	; (800d228 <_printf_float+0x30c>)
 800d122:	4631      	mov	r1, r6
 800d124:	4628      	mov	r0, r5
 800d126:	47b8      	blx	r7
 800d128:	3001      	adds	r0, #1
 800d12a:	f43f af54 	beq.w	800cfd6 <_printf_float+0xba>
 800d12e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d132:	429a      	cmp	r2, r3
 800d134:	db02      	blt.n	800d13c <_printf_float+0x220>
 800d136:	6823      	ldr	r3, [r4, #0]
 800d138:	07d8      	lsls	r0, r3, #31
 800d13a:	d50f      	bpl.n	800d15c <_printf_float+0x240>
 800d13c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d140:	4631      	mov	r1, r6
 800d142:	4628      	mov	r0, r5
 800d144:	47b8      	blx	r7
 800d146:	3001      	adds	r0, #1
 800d148:	f43f af45 	beq.w	800cfd6 <_printf_float+0xba>
 800d14c:	f04f 0800 	mov.w	r8, #0
 800d150:	f104 091a 	add.w	r9, r4, #26
 800d154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d156:	3b01      	subs	r3, #1
 800d158:	4543      	cmp	r3, r8
 800d15a:	dc09      	bgt.n	800d170 <_printf_float+0x254>
 800d15c:	6823      	ldr	r3, [r4, #0]
 800d15e:	079b      	lsls	r3, r3, #30
 800d160:	f100 8103 	bmi.w	800d36a <_printf_float+0x44e>
 800d164:	68e0      	ldr	r0, [r4, #12]
 800d166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d168:	4298      	cmp	r0, r3
 800d16a:	bfb8      	it	lt
 800d16c:	4618      	movlt	r0, r3
 800d16e:	e734      	b.n	800cfda <_printf_float+0xbe>
 800d170:	2301      	movs	r3, #1
 800d172:	464a      	mov	r2, r9
 800d174:	4631      	mov	r1, r6
 800d176:	4628      	mov	r0, r5
 800d178:	47b8      	blx	r7
 800d17a:	3001      	adds	r0, #1
 800d17c:	f43f af2b 	beq.w	800cfd6 <_printf_float+0xba>
 800d180:	f108 0801 	add.w	r8, r8, #1
 800d184:	e7e6      	b.n	800d154 <_printf_float+0x238>
 800d186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d188:	2b00      	cmp	r3, #0
 800d18a:	dc2b      	bgt.n	800d1e4 <_printf_float+0x2c8>
 800d18c:	2301      	movs	r3, #1
 800d18e:	4a26      	ldr	r2, [pc, #152]	; (800d228 <_printf_float+0x30c>)
 800d190:	4631      	mov	r1, r6
 800d192:	4628      	mov	r0, r5
 800d194:	47b8      	blx	r7
 800d196:	3001      	adds	r0, #1
 800d198:	f43f af1d 	beq.w	800cfd6 <_printf_float+0xba>
 800d19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d19e:	b923      	cbnz	r3, 800d1aa <_printf_float+0x28e>
 800d1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1a2:	b913      	cbnz	r3, 800d1aa <_printf_float+0x28e>
 800d1a4:	6823      	ldr	r3, [r4, #0]
 800d1a6:	07d9      	lsls	r1, r3, #31
 800d1a8:	d5d8      	bpl.n	800d15c <_printf_float+0x240>
 800d1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1ae:	4631      	mov	r1, r6
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	47b8      	blx	r7
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	f43f af0e 	beq.w	800cfd6 <_printf_float+0xba>
 800d1ba:	f04f 0900 	mov.w	r9, #0
 800d1be:	f104 0a1a 	add.w	sl, r4, #26
 800d1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1c4:	425b      	negs	r3, r3
 800d1c6:	454b      	cmp	r3, r9
 800d1c8:	dc01      	bgt.n	800d1ce <_printf_float+0x2b2>
 800d1ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1cc:	e794      	b.n	800d0f8 <_printf_float+0x1dc>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	4652      	mov	r2, sl
 800d1d2:	4631      	mov	r1, r6
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	47b8      	blx	r7
 800d1d8:	3001      	adds	r0, #1
 800d1da:	f43f aefc 	beq.w	800cfd6 <_printf_float+0xba>
 800d1de:	f109 0901 	add.w	r9, r9, #1
 800d1e2:	e7ee      	b.n	800d1c2 <_printf_float+0x2a6>
 800d1e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	bfa8      	it	ge
 800d1ec:	461a      	movge	r2, r3
 800d1ee:	2a00      	cmp	r2, #0
 800d1f0:	4691      	mov	r9, r2
 800d1f2:	dd07      	ble.n	800d204 <_printf_float+0x2e8>
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	4642      	mov	r2, r8
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	47b8      	blx	r7
 800d1fe:	3001      	adds	r0, #1
 800d200:	f43f aee9 	beq.w	800cfd6 <_printf_float+0xba>
 800d204:	f104 031a 	add.w	r3, r4, #26
 800d208:	f04f 0b00 	mov.w	fp, #0
 800d20c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d210:	9306      	str	r3, [sp, #24]
 800d212:	e015      	b.n	800d240 <_printf_float+0x324>
 800d214:	7fefffff 	.word	0x7fefffff
 800d218:	0800f5e8 	.word	0x0800f5e8
 800d21c:	0800f5e4 	.word	0x0800f5e4
 800d220:	0800f5f0 	.word	0x0800f5f0
 800d224:	0800f5ec 	.word	0x0800f5ec
 800d228:	0800f5f4 	.word	0x0800f5f4
 800d22c:	2301      	movs	r3, #1
 800d22e:	9a06      	ldr	r2, [sp, #24]
 800d230:	4631      	mov	r1, r6
 800d232:	4628      	mov	r0, r5
 800d234:	47b8      	blx	r7
 800d236:	3001      	adds	r0, #1
 800d238:	f43f aecd 	beq.w	800cfd6 <_printf_float+0xba>
 800d23c:	f10b 0b01 	add.w	fp, fp, #1
 800d240:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d244:	ebaa 0309 	sub.w	r3, sl, r9
 800d248:	455b      	cmp	r3, fp
 800d24a:	dcef      	bgt.n	800d22c <_printf_float+0x310>
 800d24c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d250:	429a      	cmp	r2, r3
 800d252:	44d0      	add	r8, sl
 800d254:	db15      	blt.n	800d282 <_printf_float+0x366>
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	07da      	lsls	r2, r3, #31
 800d25a:	d412      	bmi.n	800d282 <_printf_float+0x366>
 800d25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d25e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d260:	eba3 020a 	sub.w	r2, r3, sl
 800d264:	eba3 0a01 	sub.w	sl, r3, r1
 800d268:	4592      	cmp	sl, r2
 800d26a:	bfa8      	it	ge
 800d26c:	4692      	movge	sl, r2
 800d26e:	f1ba 0f00 	cmp.w	sl, #0
 800d272:	dc0e      	bgt.n	800d292 <_printf_float+0x376>
 800d274:	f04f 0800 	mov.w	r8, #0
 800d278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d27c:	f104 091a 	add.w	r9, r4, #26
 800d280:	e019      	b.n	800d2b6 <_printf_float+0x39a>
 800d282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d286:	4631      	mov	r1, r6
 800d288:	4628      	mov	r0, r5
 800d28a:	47b8      	blx	r7
 800d28c:	3001      	adds	r0, #1
 800d28e:	d1e5      	bne.n	800d25c <_printf_float+0x340>
 800d290:	e6a1      	b.n	800cfd6 <_printf_float+0xba>
 800d292:	4653      	mov	r3, sl
 800d294:	4642      	mov	r2, r8
 800d296:	4631      	mov	r1, r6
 800d298:	4628      	mov	r0, r5
 800d29a:	47b8      	blx	r7
 800d29c:	3001      	adds	r0, #1
 800d29e:	d1e9      	bne.n	800d274 <_printf_float+0x358>
 800d2a0:	e699      	b.n	800cfd6 <_printf_float+0xba>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	464a      	mov	r2, r9
 800d2a6:	4631      	mov	r1, r6
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	47b8      	blx	r7
 800d2ac:	3001      	adds	r0, #1
 800d2ae:	f43f ae92 	beq.w	800cfd6 <_printf_float+0xba>
 800d2b2:	f108 0801 	add.w	r8, r8, #1
 800d2b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2ba:	1a9b      	subs	r3, r3, r2
 800d2bc:	eba3 030a 	sub.w	r3, r3, sl
 800d2c0:	4543      	cmp	r3, r8
 800d2c2:	dcee      	bgt.n	800d2a2 <_printf_float+0x386>
 800d2c4:	e74a      	b.n	800d15c <_printf_float+0x240>
 800d2c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2c8:	2a01      	cmp	r2, #1
 800d2ca:	dc01      	bgt.n	800d2d0 <_printf_float+0x3b4>
 800d2cc:	07db      	lsls	r3, r3, #31
 800d2ce:	d53a      	bpl.n	800d346 <_printf_float+0x42a>
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	4642      	mov	r2, r8
 800d2d4:	4631      	mov	r1, r6
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	47b8      	blx	r7
 800d2da:	3001      	adds	r0, #1
 800d2dc:	f43f ae7b 	beq.w	800cfd6 <_printf_float+0xba>
 800d2e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2e4:	4631      	mov	r1, r6
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	47b8      	blx	r7
 800d2ea:	3001      	adds	r0, #1
 800d2ec:	f108 0801 	add.w	r8, r8, #1
 800d2f0:	f43f ae71 	beq.w	800cfd6 <_printf_float+0xba>
 800d2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f103 3aff 	add.w	sl, r3, #4294967295
 800d2fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d300:	2300      	movs	r3, #0
 800d302:	f7f3 fbf1 	bl	8000ae8 <__aeabi_dcmpeq>
 800d306:	b9c8      	cbnz	r0, 800d33c <_printf_float+0x420>
 800d308:	4653      	mov	r3, sl
 800d30a:	4642      	mov	r2, r8
 800d30c:	4631      	mov	r1, r6
 800d30e:	4628      	mov	r0, r5
 800d310:	47b8      	blx	r7
 800d312:	3001      	adds	r0, #1
 800d314:	d10e      	bne.n	800d334 <_printf_float+0x418>
 800d316:	e65e      	b.n	800cfd6 <_printf_float+0xba>
 800d318:	2301      	movs	r3, #1
 800d31a:	4652      	mov	r2, sl
 800d31c:	4631      	mov	r1, r6
 800d31e:	4628      	mov	r0, r5
 800d320:	47b8      	blx	r7
 800d322:	3001      	adds	r0, #1
 800d324:	f43f ae57 	beq.w	800cfd6 <_printf_float+0xba>
 800d328:	f108 0801 	add.w	r8, r8, #1
 800d32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d32e:	3b01      	subs	r3, #1
 800d330:	4543      	cmp	r3, r8
 800d332:	dcf1      	bgt.n	800d318 <_printf_float+0x3fc>
 800d334:	464b      	mov	r3, r9
 800d336:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d33a:	e6de      	b.n	800d0fa <_printf_float+0x1de>
 800d33c:	f04f 0800 	mov.w	r8, #0
 800d340:	f104 0a1a 	add.w	sl, r4, #26
 800d344:	e7f2      	b.n	800d32c <_printf_float+0x410>
 800d346:	2301      	movs	r3, #1
 800d348:	e7df      	b.n	800d30a <_printf_float+0x3ee>
 800d34a:	2301      	movs	r3, #1
 800d34c:	464a      	mov	r2, r9
 800d34e:	4631      	mov	r1, r6
 800d350:	4628      	mov	r0, r5
 800d352:	47b8      	blx	r7
 800d354:	3001      	adds	r0, #1
 800d356:	f43f ae3e 	beq.w	800cfd6 <_printf_float+0xba>
 800d35a:	f108 0801 	add.w	r8, r8, #1
 800d35e:	68e3      	ldr	r3, [r4, #12]
 800d360:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d362:	1a9b      	subs	r3, r3, r2
 800d364:	4543      	cmp	r3, r8
 800d366:	dcf0      	bgt.n	800d34a <_printf_float+0x42e>
 800d368:	e6fc      	b.n	800d164 <_printf_float+0x248>
 800d36a:	f04f 0800 	mov.w	r8, #0
 800d36e:	f104 0919 	add.w	r9, r4, #25
 800d372:	e7f4      	b.n	800d35e <_printf_float+0x442>
 800d374:	2900      	cmp	r1, #0
 800d376:	f43f ae8b 	beq.w	800d090 <_printf_float+0x174>
 800d37a:	2300      	movs	r3, #0
 800d37c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d380:	ab09      	add	r3, sp, #36	; 0x24
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	ec49 8b10 	vmov	d0, r8, r9
 800d388:	6022      	str	r2, [r4, #0]
 800d38a:	f8cd a004 	str.w	sl, [sp, #4]
 800d38e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d392:	4628      	mov	r0, r5
 800d394:	f7ff fd2e 	bl	800cdf4 <__cvt>
 800d398:	4680      	mov	r8, r0
 800d39a:	e648      	b.n	800d02e <_printf_float+0x112>

0800d39c <_printf_common>:
 800d39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a0:	4691      	mov	r9, r2
 800d3a2:	461f      	mov	r7, r3
 800d3a4:	688a      	ldr	r2, [r1, #8]
 800d3a6:	690b      	ldr	r3, [r1, #16]
 800d3a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	bfb8      	it	lt
 800d3b0:	4613      	movlt	r3, r2
 800d3b2:	f8c9 3000 	str.w	r3, [r9]
 800d3b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460c      	mov	r4, r1
 800d3be:	b112      	cbz	r2, 800d3c6 <_printf_common+0x2a>
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	f8c9 3000 	str.w	r3, [r9]
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	0699      	lsls	r1, r3, #26
 800d3ca:	bf42      	ittt	mi
 800d3cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d3d0:	3302      	addmi	r3, #2
 800d3d2:	f8c9 3000 	strmi.w	r3, [r9]
 800d3d6:	6825      	ldr	r5, [r4, #0]
 800d3d8:	f015 0506 	ands.w	r5, r5, #6
 800d3dc:	d107      	bne.n	800d3ee <_printf_common+0x52>
 800d3de:	f104 0a19 	add.w	sl, r4, #25
 800d3e2:	68e3      	ldr	r3, [r4, #12]
 800d3e4:	f8d9 2000 	ldr.w	r2, [r9]
 800d3e8:	1a9b      	subs	r3, r3, r2
 800d3ea:	42ab      	cmp	r3, r5
 800d3ec:	dc28      	bgt.n	800d440 <_printf_common+0xa4>
 800d3ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d3f2:	6822      	ldr	r2, [r4, #0]
 800d3f4:	3300      	adds	r3, #0
 800d3f6:	bf18      	it	ne
 800d3f8:	2301      	movne	r3, #1
 800d3fa:	0692      	lsls	r2, r2, #26
 800d3fc:	d42d      	bmi.n	800d45a <_printf_common+0xbe>
 800d3fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d402:	4639      	mov	r1, r7
 800d404:	4630      	mov	r0, r6
 800d406:	47c0      	blx	r8
 800d408:	3001      	adds	r0, #1
 800d40a:	d020      	beq.n	800d44e <_printf_common+0xb2>
 800d40c:	6823      	ldr	r3, [r4, #0]
 800d40e:	68e5      	ldr	r5, [r4, #12]
 800d410:	f8d9 2000 	ldr.w	r2, [r9]
 800d414:	f003 0306 	and.w	r3, r3, #6
 800d418:	2b04      	cmp	r3, #4
 800d41a:	bf08      	it	eq
 800d41c:	1aad      	subeq	r5, r5, r2
 800d41e:	68a3      	ldr	r3, [r4, #8]
 800d420:	6922      	ldr	r2, [r4, #16]
 800d422:	bf0c      	ite	eq
 800d424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d428:	2500      	movne	r5, #0
 800d42a:	4293      	cmp	r3, r2
 800d42c:	bfc4      	itt	gt
 800d42e:	1a9b      	subgt	r3, r3, r2
 800d430:	18ed      	addgt	r5, r5, r3
 800d432:	f04f 0900 	mov.w	r9, #0
 800d436:	341a      	adds	r4, #26
 800d438:	454d      	cmp	r5, r9
 800d43a:	d11a      	bne.n	800d472 <_printf_common+0xd6>
 800d43c:	2000      	movs	r0, #0
 800d43e:	e008      	b.n	800d452 <_printf_common+0xb6>
 800d440:	2301      	movs	r3, #1
 800d442:	4652      	mov	r2, sl
 800d444:	4639      	mov	r1, r7
 800d446:	4630      	mov	r0, r6
 800d448:	47c0      	blx	r8
 800d44a:	3001      	adds	r0, #1
 800d44c:	d103      	bne.n	800d456 <_printf_common+0xba>
 800d44e:	f04f 30ff 	mov.w	r0, #4294967295
 800d452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d456:	3501      	adds	r5, #1
 800d458:	e7c3      	b.n	800d3e2 <_printf_common+0x46>
 800d45a:	18e1      	adds	r1, r4, r3
 800d45c:	1c5a      	adds	r2, r3, #1
 800d45e:	2030      	movs	r0, #48	; 0x30
 800d460:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d464:	4422      	add	r2, r4
 800d466:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d46a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d46e:	3302      	adds	r3, #2
 800d470:	e7c5      	b.n	800d3fe <_printf_common+0x62>
 800d472:	2301      	movs	r3, #1
 800d474:	4622      	mov	r2, r4
 800d476:	4639      	mov	r1, r7
 800d478:	4630      	mov	r0, r6
 800d47a:	47c0      	blx	r8
 800d47c:	3001      	adds	r0, #1
 800d47e:	d0e6      	beq.n	800d44e <_printf_common+0xb2>
 800d480:	f109 0901 	add.w	r9, r9, #1
 800d484:	e7d8      	b.n	800d438 <_printf_common+0x9c>
	...

0800d488 <_printf_i>:
 800d488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d48c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d490:	460c      	mov	r4, r1
 800d492:	7e09      	ldrb	r1, [r1, #24]
 800d494:	b085      	sub	sp, #20
 800d496:	296e      	cmp	r1, #110	; 0x6e
 800d498:	4617      	mov	r7, r2
 800d49a:	4606      	mov	r6, r0
 800d49c:	4698      	mov	r8, r3
 800d49e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4a0:	f000 80b3 	beq.w	800d60a <_printf_i+0x182>
 800d4a4:	d822      	bhi.n	800d4ec <_printf_i+0x64>
 800d4a6:	2963      	cmp	r1, #99	; 0x63
 800d4a8:	d036      	beq.n	800d518 <_printf_i+0x90>
 800d4aa:	d80a      	bhi.n	800d4c2 <_printf_i+0x3a>
 800d4ac:	2900      	cmp	r1, #0
 800d4ae:	f000 80b9 	beq.w	800d624 <_printf_i+0x19c>
 800d4b2:	2958      	cmp	r1, #88	; 0x58
 800d4b4:	f000 8083 	beq.w	800d5be <_printf_i+0x136>
 800d4b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d4c0:	e032      	b.n	800d528 <_printf_i+0xa0>
 800d4c2:	2964      	cmp	r1, #100	; 0x64
 800d4c4:	d001      	beq.n	800d4ca <_printf_i+0x42>
 800d4c6:	2969      	cmp	r1, #105	; 0x69
 800d4c8:	d1f6      	bne.n	800d4b8 <_printf_i+0x30>
 800d4ca:	6820      	ldr	r0, [r4, #0]
 800d4cc:	6813      	ldr	r3, [r2, #0]
 800d4ce:	0605      	lsls	r5, r0, #24
 800d4d0:	f103 0104 	add.w	r1, r3, #4
 800d4d4:	d52a      	bpl.n	800d52c <_printf_i+0xa4>
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6011      	str	r1, [r2, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	da03      	bge.n	800d4e6 <_printf_i+0x5e>
 800d4de:	222d      	movs	r2, #45	; 0x2d
 800d4e0:	425b      	negs	r3, r3
 800d4e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d4e6:	486f      	ldr	r0, [pc, #444]	; (800d6a4 <_printf_i+0x21c>)
 800d4e8:	220a      	movs	r2, #10
 800d4ea:	e039      	b.n	800d560 <_printf_i+0xd8>
 800d4ec:	2973      	cmp	r1, #115	; 0x73
 800d4ee:	f000 809d 	beq.w	800d62c <_printf_i+0x1a4>
 800d4f2:	d808      	bhi.n	800d506 <_printf_i+0x7e>
 800d4f4:	296f      	cmp	r1, #111	; 0x6f
 800d4f6:	d020      	beq.n	800d53a <_printf_i+0xb2>
 800d4f8:	2970      	cmp	r1, #112	; 0x70
 800d4fa:	d1dd      	bne.n	800d4b8 <_printf_i+0x30>
 800d4fc:	6823      	ldr	r3, [r4, #0]
 800d4fe:	f043 0320 	orr.w	r3, r3, #32
 800d502:	6023      	str	r3, [r4, #0]
 800d504:	e003      	b.n	800d50e <_printf_i+0x86>
 800d506:	2975      	cmp	r1, #117	; 0x75
 800d508:	d017      	beq.n	800d53a <_printf_i+0xb2>
 800d50a:	2978      	cmp	r1, #120	; 0x78
 800d50c:	d1d4      	bne.n	800d4b8 <_printf_i+0x30>
 800d50e:	2378      	movs	r3, #120	; 0x78
 800d510:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d514:	4864      	ldr	r0, [pc, #400]	; (800d6a8 <_printf_i+0x220>)
 800d516:	e055      	b.n	800d5c4 <_printf_i+0x13c>
 800d518:	6813      	ldr	r3, [r2, #0]
 800d51a:	1d19      	adds	r1, r3, #4
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	6011      	str	r1, [r2, #0]
 800d520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d528:	2301      	movs	r3, #1
 800d52a:	e08c      	b.n	800d646 <_printf_i+0x1be>
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	6011      	str	r1, [r2, #0]
 800d530:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d534:	bf18      	it	ne
 800d536:	b21b      	sxthne	r3, r3
 800d538:	e7cf      	b.n	800d4da <_printf_i+0x52>
 800d53a:	6813      	ldr	r3, [r2, #0]
 800d53c:	6825      	ldr	r5, [r4, #0]
 800d53e:	1d18      	adds	r0, r3, #4
 800d540:	6010      	str	r0, [r2, #0]
 800d542:	0628      	lsls	r0, r5, #24
 800d544:	d501      	bpl.n	800d54a <_printf_i+0xc2>
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	e002      	b.n	800d550 <_printf_i+0xc8>
 800d54a:	0668      	lsls	r0, r5, #25
 800d54c:	d5fb      	bpl.n	800d546 <_printf_i+0xbe>
 800d54e:	881b      	ldrh	r3, [r3, #0]
 800d550:	4854      	ldr	r0, [pc, #336]	; (800d6a4 <_printf_i+0x21c>)
 800d552:	296f      	cmp	r1, #111	; 0x6f
 800d554:	bf14      	ite	ne
 800d556:	220a      	movne	r2, #10
 800d558:	2208      	moveq	r2, #8
 800d55a:	2100      	movs	r1, #0
 800d55c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d560:	6865      	ldr	r5, [r4, #4]
 800d562:	60a5      	str	r5, [r4, #8]
 800d564:	2d00      	cmp	r5, #0
 800d566:	f2c0 8095 	blt.w	800d694 <_printf_i+0x20c>
 800d56a:	6821      	ldr	r1, [r4, #0]
 800d56c:	f021 0104 	bic.w	r1, r1, #4
 800d570:	6021      	str	r1, [r4, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d13d      	bne.n	800d5f2 <_printf_i+0x16a>
 800d576:	2d00      	cmp	r5, #0
 800d578:	f040 808e 	bne.w	800d698 <_printf_i+0x210>
 800d57c:	4665      	mov	r5, ip
 800d57e:	2a08      	cmp	r2, #8
 800d580:	d10b      	bne.n	800d59a <_printf_i+0x112>
 800d582:	6823      	ldr	r3, [r4, #0]
 800d584:	07db      	lsls	r3, r3, #31
 800d586:	d508      	bpl.n	800d59a <_printf_i+0x112>
 800d588:	6923      	ldr	r3, [r4, #16]
 800d58a:	6862      	ldr	r2, [r4, #4]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	bfde      	ittt	le
 800d590:	2330      	movle	r3, #48	; 0x30
 800d592:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d596:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d59a:	ebac 0305 	sub.w	r3, ip, r5
 800d59e:	6123      	str	r3, [r4, #16]
 800d5a0:	f8cd 8000 	str.w	r8, [sp]
 800d5a4:	463b      	mov	r3, r7
 800d5a6:	aa03      	add	r2, sp, #12
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f7ff fef6 	bl	800d39c <_printf_common>
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	d14d      	bne.n	800d650 <_printf_i+0x1c8>
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b8:	b005      	add	sp, #20
 800d5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5be:	4839      	ldr	r0, [pc, #228]	; (800d6a4 <_printf_i+0x21c>)
 800d5c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d5c4:	6813      	ldr	r3, [r2, #0]
 800d5c6:	6821      	ldr	r1, [r4, #0]
 800d5c8:	1d1d      	adds	r5, r3, #4
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6015      	str	r5, [r2, #0]
 800d5ce:	060a      	lsls	r2, r1, #24
 800d5d0:	d50b      	bpl.n	800d5ea <_printf_i+0x162>
 800d5d2:	07ca      	lsls	r2, r1, #31
 800d5d4:	bf44      	itt	mi
 800d5d6:	f041 0120 	orrmi.w	r1, r1, #32
 800d5da:	6021      	strmi	r1, [r4, #0]
 800d5dc:	b91b      	cbnz	r3, 800d5e6 <_printf_i+0x15e>
 800d5de:	6822      	ldr	r2, [r4, #0]
 800d5e0:	f022 0220 	bic.w	r2, r2, #32
 800d5e4:	6022      	str	r2, [r4, #0]
 800d5e6:	2210      	movs	r2, #16
 800d5e8:	e7b7      	b.n	800d55a <_printf_i+0xd2>
 800d5ea:	064d      	lsls	r5, r1, #25
 800d5ec:	bf48      	it	mi
 800d5ee:	b29b      	uxthmi	r3, r3
 800d5f0:	e7ef      	b.n	800d5d2 <_printf_i+0x14a>
 800d5f2:	4665      	mov	r5, ip
 800d5f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5f8:	fb02 3311 	mls	r3, r2, r1, r3
 800d5fc:	5cc3      	ldrb	r3, [r0, r3]
 800d5fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d602:	460b      	mov	r3, r1
 800d604:	2900      	cmp	r1, #0
 800d606:	d1f5      	bne.n	800d5f4 <_printf_i+0x16c>
 800d608:	e7b9      	b.n	800d57e <_printf_i+0xf6>
 800d60a:	6813      	ldr	r3, [r2, #0]
 800d60c:	6825      	ldr	r5, [r4, #0]
 800d60e:	6961      	ldr	r1, [r4, #20]
 800d610:	1d18      	adds	r0, r3, #4
 800d612:	6010      	str	r0, [r2, #0]
 800d614:	0628      	lsls	r0, r5, #24
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	d501      	bpl.n	800d61e <_printf_i+0x196>
 800d61a:	6019      	str	r1, [r3, #0]
 800d61c:	e002      	b.n	800d624 <_printf_i+0x19c>
 800d61e:	066a      	lsls	r2, r5, #25
 800d620:	d5fb      	bpl.n	800d61a <_printf_i+0x192>
 800d622:	8019      	strh	r1, [r3, #0]
 800d624:	2300      	movs	r3, #0
 800d626:	6123      	str	r3, [r4, #16]
 800d628:	4665      	mov	r5, ip
 800d62a:	e7b9      	b.n	800d5a0 <_printf_i+0x118>
 800d62c:	6813      	ldr	r3, [r2, #0]
 800d62e:	1d19      	adds	r1, r3, #4
 800d630:	6011      	str	r1, [r2, #0]
 800d632:	681d      	ldr	r5, [r3, #0]
 800d634:	6862      	ldr	r2, [r4, #4]
 800d636:	2100      	movs	r1, #0
 800d638:	4628      	mov	r0, r5
 800d63a:	f7f2 fde1 	bl	8000200 <memchr>
 800d63e:	b108      	cbz	r0, 800d644 <_printf_i+0x1bc>
 800d640:	1b40      	subs	r0, r0, r5
 800d642:	6060      	str	r0, [r4, #4]
 800d644:	6863      	ldr	r3, [r4, #4]
 800d646:	6123      	str	r3, [r4, #16]
 800d648:	2300      	movs	r3, #0
 800d64a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d64e:	e7a7      	b.n	800d5a0 <_printf_i+0x118>
 800d650:	6923      	ldr	r3, [r4, #16]
 800d652:	462a      	mov	r2, r5
 800d654:	4639      	mov	r1, r7
 800d656:	4630      	mov	r0, r6
 800d658:	47c0      	blx	r8
 800d65a:	3001      	adds	r0, #1
 800d65c:	d0aa      	beq.n	800d5b4 <_printf_i+0x12c>
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	079b      	lsls	r3, r3, #30
 800d662:	d413      	bmi.n	800d68c <_printf_i+0x204>
 800d664:	68e0      	ldr	r0, [r4, #12]
 800d666:	9b03      	ldr	r3, [sp, #12]
 800d668:	4298      	cmp	r0, r3
 800d66a:	bfb8      	it	lt
 800d66c:	4618      	movlt	r0, r3
 800d66e:	e7a3      	b.n	800d5b8 <_printf_i+0x130>
 800d670:	2301      	movs	r3, #1
 800d672:	464a      	mov	r2, r9
 800d674:	4639      	mov	r1, r7
 800d676:	4630      	mov	r0, r6
 800d678:	47c0      	blx	r8
 800d67a:	3001      	adds	r0, #1
 800d67c:	d09a      	beq.n	800d5b4 <_printf_i+0x12c>
 800d67e:	3501      	adds	r5, #1
 800d680:	68e3      	ldr	r3, [r4, #12]
 800d682:	9a03      	ldr	r2, [sp, #12]
 800d684:	1a9b      	subs	r3, r3, r2
 800d686:	42ab      	cmp	r3, r5
 800d688:	dcf2      	bgt.n	800d670 <_printf_i+0x1e8>
 800d68a:	e7eb      	b.n	800d664 <_printf_i+0x1dc>
 800d68c:	2500      	movs	r5, #0
 800d68e:	f104 0919 	add.w	r9, r4, #25
 800d692:	e7f5      	b.n	800d680 <_printf_i+0x1f8>
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1ac      	bne.n	800d5f2 <_printf_i+0x16a>
 800d698:	7803      	ldrb	r3, [r0, #0]
 800d69a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d69e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6a2:	e76c      	b.n	800d57e <_printf_i+0xf6>
 800d6a4:	0800f5f6 	.word	0x0800f5f6
 800d6a8:	0800f607 	.word	0x0800f607

0800d6ac <iprintf>:
 800d6ac:	b40f      	push	{r0, r1, r2, r3}
 800d6ae:	4b0a      	ldr	r3, [pc, #40]	; (800d6d8 <iprintf+0x2c>)
 800d6b0:	b513      	push	{r0, r1, r4, lr}
 800d6b2:	681c      	ldr	r4, [r3, #0]
 800d6b4:	b124      	cbz	r4, 800d6c0 <iprintf+0x14>
 800d6b6:	69a3      	ldr	r3, [r4, #24]
 800d6b8:	b913      	cbnz	r3, 800d6c0 <iprintf+0x14>
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f001 f924 	bl	800e908 <__sinit>
 800d6c0:	ab05      	add	r3, sp, #20
 800d6c2:	9a04      	ldr	r2, [sp, #16]
 800d6c4:	68a1      	ldr	r1, [r4, #8]
 800d6c6:	9301      	str	r3, [sp, #4]
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f001 fd2f 	bl	800f12c <_vfiprintf_r>
 800d6ce:	b002      	add	sp, #8
 800d6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6d4:	b004      	add	sp, #16
 800d6d6:	4770      	bx	lr
 800d6d8:	20000114 	.word	0x20000114

0800d6dc <_puts_r>:
 800d6dc:	b570      	push	{r4, r5, r6, lr}
 800d6de:	460e      	mov	r6, r1
 800d6e0:	4605      	mov	r5, r0
 800d6e2:	b118      	cbz	r0, 800d6ec <_puts_r+0x10>
 800d6e4:	6983      	ldr	r3, [r0, #24]
 800d6e6:	b90b      	cbnz	r3, 800d6ec <_puts_r+0x10>
 800d6e8:	f001 f90e 	bl	800e908 <__sinit>
 800d6ec:	69ab      	ldr	r3, [r5, #24]
 800d6ee:	68ac      	ldr	r4, [r5, #8]
 800d6f0:	b913      	cbnz	r3, 800d6f8 <_puts_r+0x1c>
 800d6f2:	4628      	mov	r0, r5
 800d6f4:	f001 f908 	bl	800e908 <__sinit>
 800d6f8:	4b23      	ldr	r3, [pc, #140]	; (800d788 <_puts_r+0xac>)
 800d6fa:	429c      	cmp	r4, r3
 800d6fc:	d117      	bne.n	800d72e <_puts_r+0x52>
 800d6fe:	686c      	ldr	r4, [r5, #4]
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	071b      	lsls	r3, r3, #28
 800d704:	d51d      	bpl.n	800d742 <_puts_r+0x66>
 800d706:	6923      	ldr	r3, [r4, #16]
 800d708:	b1db      	cbz	r3, 800d742 <_puts_r+0x66>
 800d70a:	3e01      	subs	r6, #1
 800d70c:	68a3      	ldr	r3, [r4, #8]
 800d70e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d712:	3b01      	subs	r3, #1
 800d714:	60a3      	str	r3, [r4, #8]
 800d716:	b9e9      	cbnz	r1, 800d754 <_puts_r+0x78>
 800d718:	2b00      	cmp	r3, #0
 800d71a:	da2e      	bge.n	800d77a <_puts_r+0x9e>
 800d71c:	4622      	mov	r2, r4
 800d71e:	210a      	movs	r1, #10
 800d720:	4628      	mov	r0, r5
 800d722:	f000 f8fd 	bl	800d920 <__swbuf_r>
 800d726:	3001      	adds	r0, #1
 800d728:	d011      	beq.n	800d74e <_puts_r+0x72>
 800d72a:	200a      	movs	r0, #10
 800d72c:	e011      	b.n	800d752 <_puts_r+0x76>
 800d72e:	4b17      	ldr	r3, [pc, #92]	; (800d78c <_puts_r+0xb0>)
 800d730:	429c      	cmp	r4, r3
 800d732:	d101      	bne.n	800d738 <_puts_r+0x5c>
 800d734:	68ac      	ldr	r4, [r5, #8]
 800d736:	e7e3      	b.n	800d700 <_puts_r+0x24>
 800d738:	4b15      	ldr	r3, [pc, #84]	; (800d790 <_puts_r+0xb4>)
 800d73a:	429c      	cmp	r4, r3
 800d73c:	bf08      	it	eq
 800d73e:	68ec      	ldreq	r4, [r5, #12]
 800d740:	e7de      	b.n	800d700 <_puts_r+0x24>
 800d742:	4621      	mov	r1, r4
 800d744:	4628      	mov	r0, r5
 800d746:	f000 f93d 	bl	800d9c4 <__swsetup_r>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d0dd      	beq.n	800d70a <_puts_r+0x2e>
 800d74e:	f04f 30ff 	mov.w	r0, #4294967295
 800d752:	bd70      	pop	{r4, r5, r6, pc}
 800d754:	2b00      	cmp	r3, #0
 800d756:	da04      	bge.n	800d762 <_puts_r+0x86>
 800d758:	69a2      	ldr	r2, [r4, #24]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	dc06      	bgt.n	800d76c <_puts_r+0x90>
 800d75e:	290a      	cmp	r1, #10
 800d760:	d004      	beq.n	800d76c <_puts_r+0x90>
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	1c5a      	adds	r2, r3, #1
 800d766:	6022      	str	r2, [r4, #0]
 800d768:	7019      	strb	r1, [r3, #0]
 800d76a:	e7cf      	b.n	800d70c <_puts_r+0x30>
 800d76c:	4622      	mov	r2, r4
 800d76e:	4628      	mov	r0, r5
 800d770:	f000 f8d6 	bl	800d920 <__swbuf_r>
 800d774:	3001      	adds	r0, #1
 800d776:	d1c9      	bne.n	800d70c <_puts_r+0x30>
 800d778:	e7e9      	b.n	800d74e <_puts_r+0x72>
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	200a      	movs	r0, #10
 800d77e:	1c5a      	adds	r2, r3, #1
 800d780:	6022      	str	r2, [r4, #0]
 800d782:	7018      	strb	r0, [r3, #0]
 800d784:	e7e5      	b.n	800d752 <_puts_r+0x76>
 800d786:	bf00      	nop
 800d788:	0800f648 	.word	0x0800f648
 800d78c:	0800f668 	.word	0x0800f668
 800d790:	0800f628 	.word	0x0800f628

0800d794 <puts>:
 800d794:	4b02      	ldr	r3, [pc, #8]	; (800d7a0 <puts+0xc>)
 800d796:	4601      	mov	r1, r0
 800d798:	6818      	ldr	r0, [r3, #0]
 800d79a:	f7ff bf9f 	b.w	800d6dc <_puts_r>
 800d79e:	bf00      	nop
 800d7a0:	20000114 	.word	0x20000114

0800d7a4 <_sbrk_r>:
 800d7a4:	b538      	push	{r3, r4, r5, lr}
 800d7a6:	4c06      	ldr	r4, [pc, #24]	; (800d7c0 <_sbrk_r+0x1c>)
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	4605      	mov	r5, r0
 800d7ac:	4608      	mov	r0, r1
 800d7ae:	6023      	str	r3, [r4, #0]
 800d7b0:	f7f4 f92c 	bl	8001a0c <_sbrk>
 800d7b4:	1c43      	adds	r3, r0, #1
 800d7b6:	d102      	bne.n	800d7be <_sbrk_r+0x1a>
 800d7b8:	6823      	ldr	r3, [r4, #0]
 800d7ba:	b103      	cbz	r3, 800d7be <_sbrk_r+0x1a>
 800d7bc:	602b      	str	r3, [r5, #0]
 800d7be:	bd38      	pop	{r3, r4, r5, pc}
 800d7c0:	20000ca8 	.word	0x20000ca8

0800d7c4 <setvbuf>:
 800d7c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7c8:	461d      	mov	r5, r3
 800d7ca:	4b51      	ldr	r3, [pc, #324]	; (800d910 <setvbuf+0x14c>)
 800d7cc:	681e      	ldr	r6, [r3, #0]
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	460f      	mov	r7, r1
 800d7d2:	4690      	mov	r8, r2
 800d7d4:	b126      	cbz	r6, 800d7e0 <setvbuf+0x1c>
 800d7d6:	69b3      	ldr	r3, [r6, #24]
 800d7d8:	b913      	cbnz	r3, 800d7e0 <setvbuf+0x1c>
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f001 f894 	bl	800e908 <__sinit>
 800d7e0:	4b4c      	ldr	r3, [pc, #304]	; (800d914 <setvbuf+0x150>)
 800d7e2:	429c      	cmp	r4, r3
 800d7e4:	d152      	bne.n	800d88c <setvbuf+0xc8>
 800d7e6:	6874      	ldr	r4, [r6, #4]
 800d7e8:	f1b8 0f02 	cmp.w	r8, #2
 800d7ec:	d006      	beq.n	800d7fc <setvbuf+0x38>
 800d7ee:	f1b8 0f01 	cmp.w	r8, #1
 800d7f2:	f200 8089 	bhi.w	800d908 <setvbuf+0x144>
 800d7f6:	2d00      	cmp	r5, #0
 800d7f8:	f2c0 8086 	blt.w	800d908 <setvbuf+0x144>
 800d7fc:	4621      	mov	r1, r4
 800d7fe:	4630      	mov	r0, r6
 800d800:	f001 f818 	bl	800e834 <_fflush_r>
 800d804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d806:	b141      	cbz	r1, 800d81a <setvbuf+0x56>
 800d808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d80c:	4299      	cmp	r1, r3
 800d80e:	d002      	beq.n	800d816 <setvbuf+0x52>
 800d810:	4630      	mov	r0, r6
 800d812:	f7ff fa47 	bl	800cca4 <_free_r>
 800d816:	2300      	movs	r3, #0
 800d818:	6363      	str	r3, [r4, #52]	; 0x34
 800d81a:	2300      	movs	r3, #0
 800d81c:	61a3      	str	r3, [r4, #24]
 800d81e:	6063      	str	r3, [r4, #4]
 800d820:	89a3      	ldrh	r3, [r4, #12]
 800d822:	061b      	lsls	r3, r3, #24
 800d824:	d503      	bpl.n	800d82e <setvbuf+0x6a>
 800d826:	6921      	ldr	r1, [r4, #16]
 800d828:	4630      	mov	r0, r6
 800d82a:	f7ff fa3b 	bl	800cca4 <_free_r>
 800d82e:	89a3      	ldrh	r3, [r4, #12]
 800d830:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d834:	f023 0303 	bic.w	r3, r3, #3
 800d838:	f1b8 0f02 	cmp.w	r8, #2
 800d83c:	81a3      	strh	r3, [r4, #12]
 800d83e:	d05d      	beq.n	800d8fc <setvbuf+0x138>
 800d840:	ab01      	add	r3, sp, #4
 800d842:	466a      	mov	r2, sp
 800d844:	4621      	mov	r1, r4
 800d846:	4630      	mov	r0, r6
 800d848:	f001 f8f6 	bl	800ea38 <__swhatbuf_r>
 800d84c:	89a3      	ldrh	r3, [r4, #12]
 800d84e:	4318      	orrs	r0, r3
 800d850:	81a0      	strh	r0, [r4, #12]
 800d852:	bb2d      	cbnz	r5, 800d8a0 <setvbuf+0xdc>
 800d854:	9d00      	ldr	r5, [sp, #0]
 800d856:	4628      	mov	r0, r5
 800d858:	f7ff fa08 	bl	800cc6c <malloc>
 800d85c:	4607      	mov	r7, r0
 800d85e:	2800      	cmp	r0, #0
 800d860:	d14e      	bne.n	800d900 <setvbuf+0x13c>
 800d862:	f8dd 9000 	ldr.w	r9, [sp]
 800d866:	45a9      	cmp	r9, r5
 800d868:	d13c      	bne.n	800d8e4 <setvbuf+0x120>
 800d86a:	f04f 30ff 	mov.w	r0, #4294967295
 800d86e:	89a3      	ldrh	r3, [r4, #12]
 800d870:	f043 0302 	orr.w	r3, r3, #2
 800d874:	81a3      	strh	r3, [r4, #12]
 800d876:	2300      	movs	r3, #0
 800d878:	60a3      	str	r3, [r4, #8]
 800d87a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d87e:	6023      	str	r3, [r4, #0]
 800d880:	6123      	str	r3, [r4, #16]
 800d882:	2301      	movs	r3, #1
 800d884:	6163      	str	r3, [r4, #20]
 800d886:	b003      	add	sp, #12
 800d888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d88c:	4b22      	ldr	r3, [pc, #136]	; (800d918 <setvbuf+0x154>)
 800d88e:	429c      	cmp	r4, r3
 800d890:	d101      	bne.n	800d896 <setvbuf+0xd2>
 800d892:	68b4      	ldr	r4, [r6, #8]
 800d894:	e7a8      	b.n	800d7e8 <setvbuf+0x24>
 800d896:	4b21      	ldr	r3, [pc, #132]	; (800d91c <setvbuf+0x158>)
 800d898:	429c      	cmp	r4, r3
 800d89a:	bf08      	it	eq
 800d89c:	68f4      	ldreq	r4, [r6, #12]
 800d89e:	e7a3      	b.n	800d7e8 <setvbuf+0x24>
 800d8a0:	2f00      	cmp	r7, #0
 800d8a2:	d0d8      	beq.n	800d856 <setvbuf+0x92>
 800d8a4:	69b3      	ldr	r3, [r6, #24]
 800d8a6:	b913      	cbnz	r3, 800d8ae <setvbuf+0xea>
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	f001 f82d 	bl	800e908 <__sinit>
 800d8ae:	f1b8 0f01 	cmp.w	r8, #1
 800d8b2:	bf08      	it	eq
 800d8b4:	89a3      	ldrheq	r3, [r4, #12]
 800d8b6:	6027      	str	r7, [r4, #0]
 800d8b8:	bf04      	itt	eq
 800d8ba:	f043 0301 	orreq.w	r3, r3, #1
 800d8be:	81a3      	strheq	r3, [r4, #12]
 800d8c0:	89a3      	ldrh	r3, [r4, #12]
 800d8c2:	f013 0008 	ands.w	r0, r3, #8
 800d8c6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800d8ca:	d01b      	beq.n	800d904 <setvbuf+0x140>
 800d8cc:	f013 0001 	ands.w	r0, r3, #1
 800d8d0:	bf18      	it	ne
 800d8d2:	426d      	negne	r5, r5
 800d8d4:	f04f 0300 	mov.w	r3, #0
 800d8d8:	bf1d      	ittte	ne
 800d8da:	60a3      	strne	r3, [r4, #8]
 800d8dc:	61a5      	strne	r5, [r4, #24]
 800d8de:	4618      	movne	r0, r3
 800d8e0:	60a5      	streq	r5, [r4, #8]
 800d8e2:	e7d0      	b.n	800d886 <setvbuf+0xc2>
 800d8e4:	4648      	mov	r0, r9
 800d8e6:	f7ff f9c1 	bl	800cc6c <malloc>
 800d8ea:	4607      	mov	r7, r0
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	d0bc      	beq.n	800d86a <setvbuf+0xa6>
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8f6:	81a3      	strh	r3, [r4, #12]
 800d8f8:	464d      	mov	r5, r9
 800d8fa:	e7d3      	b.n	800d8a4 <setvbuf+0xe0>
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	e7b6      	b.n	800d86e <setvbuf+0xaa>
 800d900:	46a9      	mov	r9, r5
 800d902:	e7f5      	b.n	800d8f0 <setvbuf+0x12c>
 800d904:	60a0      	str	r0, [r4, #8]
 800d906:	e7be      	b.n	800d886 <setvbuf+0xc2>
 800d908:	f04f 30ff 	mov.w	r0, #4294967295
 800d90c:	e7bb      	b.n	800d886 <setvbuf+0xc2>
 800d90e:	bf00      	nop
 800d910:	20000114 	.word	0x20000114
 800d914:	0800f648 	.word	0x0800f648
 800d918:	0800f668 	.word	0x0800f668
 800d91c:	0800f628 	.word	0x0800f628

0800d920 <__swbuf_r>:
 800d920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d922:	460e      	mov	r6, r1
 800d924:	4614      	mov	r4, r2
 800d926:	4605      	mov	r5, r0
 800d928:	b118      	cbz	r0, 800d932 <__swbuf_r+0x12>
 800d92a:	6983      	ldr	r3, [r0, #24]
 800d92c:	b90b      	cbnz	r3, 800d932 <__swbuf_r+0x12>
 800d92e:	f000 ffeb 	bl	800e908 <__sinit>
 800d932:	4b21      	ldr	r3, [pc, #132]	; (800d9b8 <__swbuf_r+0x98>)
 800d934:	429c      	cmp	r4, r3
 800d936:	d12a      	bne.n	800d98e <__swbuf_r+0x6e>
 800d938:	686c      	ldr	r4, [r5, #4]
 800d93a:	69a3      	ldr	r3, [r4, #24]
 800d93c:	60a3      	str	r3, [r4, #8]
 800d93e:	89a3      	ldrh	r3, [r4, #12]
 800d940:	071a      	lsls	r2, r3, #28
 800d942:	d52e      	bpl.n	800d9a2 <__swbuf_r+0x82>
 800d944:	6923      	ldr	r3, [r4, #16]
 800d946:	b363      	cbz	r3, 800d9a2 <__swbuf_r+0x82>
 800d948:	6923      	ldr	r3, [r4, #16]
 800d94a:	6820      	ldr	r0, [r4, #0]
 800d94c:	1ac0      	subs	r0, r0, r3
 800d94e:	6963      	ldr	r3, [r4, #20]
 800d950:	b2f6      	uxtb	r6, r6
 800d952:	4283      	cmp	r3, r0
 800d954:	4637      	mov	r7, r6
 800d956:	dc04      	bgt.n	800d962 <__swbuf_r+0x42>
 800d958:	4621      	mov	r1, r4
 800d95a:	4628      	mov	r0, r5
 800d95c:	f000 ff6a 	bl	800e834 <_fflush_r>
 800d960:	bb28      	cbnz	r0, 800d9ae <__swbuf_r+0x8e>
 800d962:	68a3      	ldr	r3, [r4, #8]
 800d964:	3b01      	subs	r3, #1
 800d966:	60a3      	str	r3, [r4, #8]
 800d968:	6823      	ldr	r3, [r4, #0]
 800d96a:	1c5a      	adds	r2, r3, #1
 800d96c:	6022      	str	r2, [r4, #0]
 800d96e:	701e      	strb	r6, [r3, #0]
 800d970:	6963      	ldr	r3, [r4, #20]
 800d972:	3001      	adds	r0, #1
 800d974:	4283      	cmp	r3, r0
 800d976:	d004      	beq.n	800d982 <__swbuf_r+0x62>
 800d978:	89a3      	ldrh	r3, [r4, #12]
 800d97a:	07db      	lsls	r3, r3, #31
 800d97c:	d519      	bpl.n	800d9b2 <__swbuf_r+0x92>
 800d97e:	2e0a      	cmp	r6, #10
 800d980:	d117      	bne.n	800d9b2 <__swbuf_r+0x92>
 800d982:	4621      	mov	r1, r4
 800d984:	4628      	mov	r0, r5
 800d986:	f000 ff55 	bl	800e834 <_fflush_r>
 800d98a:	b190      	cbz	r0, 800d9b2 <__swbuf_r+0x92>
 800d98c:	e00f      	b.n	800d9ae <__swbuf_r+0x8e>
 800d98e:	4b0b      	ldr	r3, [pc, #44]	; (800d9bc <__swbuf_r+0x9c>)
 800d990:	429c      	cmp	r4, r3
 800d992:	d101      	bne.n	800d998 <__swbuf_r+0x78>
 800d994:	68ac      	ldr	r4, [r5, #8]
 800d996:	e7d0      	b.n	800d93a <__swbuf_r+0x1a>
 800d998:	4b09      	ldr	r3, [pc, #36]	; (800d9c0 <__swbuf_r+0xa0>)
 800d99a:	429c      	cmp	r4, r3
 800d99c:	bf08      	it	eq
 800d99e:	68ec      	ldreq	r4, [r5, #12]
 800d9a0:	e7cb      	b.n	800d93a <__swbuf_r+0x1a>
 800d9a2:	4621      	mov	r1, r4
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	f000 f80d 	bl	800d9c4 <__swsetup_r>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	d0cc      	beq.n	800d948 <__swbuf_r+0x28>
 800d9ae:	f04f 37ff 	mov.w	r7, #4294967295
 800d9b2:	4638      	mov	r0, r7
 800d9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	0800f648 	.word	0x0800f648
 800d9bc:	0800f668 	.word	0x0800f668
 800d9c0:	0800f628 	.word	0x0800f628

0800d9c4 <__swsetup_r>:
 800d9c4:	4b32      	ldr	r3, [pc, #200]	; (800da90 <__swsetup_r+0xcc>)
 800d9c6:	b570      	push	{r4, r5, r6, lr}
 800d9c8:	681d      	ldr	r5, [r3, #0]
 800d9ca:	4606      	mov	r6, r0
 800d9cc:	460c      	mov	r4, r1
 800d9ce:	b125      	cbz	r5, 800d9da <__swsetup_r+0x16>
 800d9d0:	69ab      	ldr	r3, [r5, #24]
 800d9d2:	b913      	cbnz	r3, 800d9da <__swsetup_r+0x16>
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	f000 ff97 	bl	800e908 <__sinit>
 800d9da:	4b2e      	ldr	r3, [pc, #184]	; (800da94 <__swsetup_r+0xd0>)
 800d9dc:	429c      	cmp	r4, r3
 800d9de:	d10f      	bne.n	800da00 <__swsetup_r+0x3c>
 800d9e0:	686c      	ldr	r4, [r5, #4]
 800d9e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	0715      	lsls	r5, r2, #28
 800d9ea:	d42c      	bmi.n	800da46 <__swsetup_r+0x82>
 800d9ec:	06d0      	lsls	r0, r2, #27
 800d9ee:	d411      	bmi.n	800da14 <__swsetup_r+0x50>
 800d9f0:	2209      	movs	r2, #9
 800d9f2:	6032      	str	r2, [r6, #0]
 800d9f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9f8:	81a3      	strh	r3, [r4, #12]
 800d9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d9fe:	e03e      	b.n	800da7e <__swsetup_r+0xba>
 800da00:	4b25      	ldr	r3, [pc, #148]	; (800da98 <__swsetup_r+0xd4>)
 800da02:	429c      	cmp	r4, r3
 800da04:	d101      	bne.n	800da0a <__swsetup_r+0x46>
 800da06:	68ac      	ldr	r4, [r5, #8]
 800da08:	e7eb      	b.n	800d9e2 <__swsetup_r+0x1e>
 800da0a:	4b24      	ldr	r3, [pc, #144]	; (800da9c <__swsetup_r+0xd8>)
 800da0c:	429c      	cmp	r4, r3
 800da0e:	bf08      	it	eq
 800da10:	68ec      	ldreq	r4, [r5, #12]
 800da12:	e7e6      	b.n	800d9e2 <__swsetup_r+0x1e>
 800da14:	0751      	lsls	r1, r2, #29
 800da16:	d512      	bpl.n	800da3e <__swsetup_r+0x7a>
 800da18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da1a:	b141      	cbz	r1, 800da2e <__swsetup_r+0x6a>
 800da1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da20:	4299      	cmp	r1, r3
 800da22:	d002      	beq.n	800da2a <__swsetup_r+0x66>
 800da24:	4630      	mov	r0, r6
 800da26:	f7ff f93d 	bl	800cca4 <_free_r>
 800da2a:	2300      	movs	r3, #0
 800da2c:	6363      	str	r3, [r4, #52]	; 0x34
 800da2e:	89a3      	ldrh	r3, [r4, #12]
 800da30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da34:	81a3      	strh	r3, [r4, #12]
 800da36:	2300      	movs	r3, #0
 800da38:	6063      	str	r3, [r4, #4]
 800da3a:	6923      	ldr	r3, [r4, #16]
 800da3c:	6023      	str	r3, [r4, #0]
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	f043 0308 	orr.w	r3, r3, #8
 800da44:	81a3      	strh	r3, [r4, #12]
 800da46:	6923      	ldr	r3, [r4, #16]
 800da48:	b94b      	cbnz	r3, 800da5e <__swsetup_r+0x9a>
 800da4a:	89a3      	ldrh	r3, [r4, #12]
 800da4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da54:	d003      	beq.n	800da5e <__swsetup_r+0x9a>
 800da56:	4621      	mov	r1, r4
 800da58:	4630      	mov	r0, r6
 800da5a:	f001 f811 	bl	800ea80 <__smakebuf_r>
 800da5e:	89a2      	ldrh	r2, [r4, #12]
 800da60:	f012 0301 	ands.w	r3, r2, #1
 800da64:	d00c      	beq.n	800da80 <__swsetup_r+0xbc>
 800da66:	2300      	movs	r3, #0
 800da68:	60a3      	str	r3, [r4, #8]
 800da6a:	6963      	ldr	r3, [r4, #20]
 800da6c:	425b      	negs	r3, r3
 800da6e:	61a3      	str	r3, [r4, #24]
 800da70:	6923      	ldr	r3, [r4, #16]
 800da72:	b953      	cbnz	r3, 800da8a <__swsetup_r+0xc6>
 800da74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800da7c:	d1ba      	bne.n	800d9f4 <__swsetup_r+0x30>
 800da7e:	bd70      	pop	{r4, r5, r6, pc}
 800da80:	0792      	lsls	r2, r2, #30
 800da82:	bf58      	it	pl
 800da84:	6963      	ldrpl	r3, [r4, #20]
 800da86:	60a3      	str	r3, [r4, #8]
 800da88:	e7f2      	b.n	800da70 <__swsetup_r+0xac>
 800da8a:	2000      	movs	r0, #0
 800da8c:	e7f7      	b.n	800da7e <__swsetup_r+0xba>
 800da8e:	bf00      	nop
 800da90:	20000114 	.word	0x20000114
 800da94:	0800f648 	.word	0x0800f648
 800da98:	0800f668 	.word	0x0800f668
 800da9c:	0800f628 	.word	0x0800f628

0800daa0 <quorem>:
 800daa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa4:	6903      	ldr	r3, [r0, #16]
 800daa6:	690c      	ldr	r4, [r1, #16]
 800daa8:	42a3      	cmp	r3, r4
 800daaa:	4680      	mov	r8, r0
 800daac:	f2c0 8082 	blt.w	800dbb4 <quorem+0x114>
 800dab0:	3c01      	subs	r4, #1
 800dab2:	f101 0714 	add.w	r7, r1, #20
 800dab6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800daba:	f100 0614 	add.w	r6, r0, #20
 800dabe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800dac2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800dac6:	eb06 030c 	add.w	r3, r6, ip
 800daca:	3501      	adds	r5, #1
 800dacc:	eb07 090c 	add.w	r9, r7, ip
 800dad0:	9301      	str	r3, [sp, #4]
 800dad2:	fbb0 f5f5 	udiv	r5, r0, r5
 800dad6:	b395      	cbz	r5, 800db3e <quorem+0x9e>
 800dad8:	f04f 0a00 	mov.w	sl, #0
 800dadc:	4638      	mov	r0, r7
 800dade:	46b6      	mov	lr, r6
 800dae0:	46d3      	mov	fp, sl
 800dae2:	f850 2b04 	ldr.w	r2, [r0], #4
 800dae6:	b293      	uxth	r3, r2
 800dae8:	fb05 a303 	mla	r3, r5, r3, sl
 800daec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	ebab 0303 	sub.w	r3, fp, r3
 800daf6:	0c12      	lsrs	r2, r2, #16
 800daf8:	f8de b000 	ldr.w	fp, [lr]
 800dafc:	fb05 a202 	mla	r2, r5, r2, sl
 800db00:	fa13 f38b 	uxtah	r3, r3, fp
 800db04:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800db08:	fa1f fb82 	uxth.w	fp, r2
 800db0c:	f8de 2000 	ldr.w	r2, [lr]
 800db10:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800db14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db18:	b29b      	uxth	r3, r3
 800db1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db1e:	4581      	cmp	r9, r0
 800db20:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800db24:	f84e 3b04 	str.w	r3, [lr], #4
 800db28:	d2db      	bcs.n	800dae2 <quorem+0x42>
 800db2a:	f856 300c 	ldr.w	r3, [r6, ip]
 800db2e:	b933      	cbnz	r3, 800db3e <quorem+0x9e>
 800db30:	9b01      	ldr	r3, [sp, #4]
 800db32:	3b04      	subs	r3, #4
 800db34:	429e      	cmp	r6, r3
 800db36:	461a      	mov	r2, r3
 800db38:	d330      	bcc.n	800db9c <quorem+0xfc>
 800db3a:	f8c8 4010 	str.w	r4, [r8, #16]
 800db3e:	4640      	mov	r0, r8
 800db40:	f001 f9f6 	bl	800ef30 <__mcmp>
 800db44:	2800      	cmp	r0, #0
 800db46:	db25      	blt.n	800db94 <quorem+0xf4>
 800db48:	3501      	adds	r5, #1
 800db4a:	4630      	mov	r0, r6
 800db4c:	f04f 0c00 	mov.w	ip, #0
 800db50:	f857 2b04 	ldr.w	r2, [r7], #4
 800db54:	f8d0 e000 	ldr.w	lr, [r0]
 800db58:	b293      	uxth	r3, r2
 800db5a:	ebac 0303 	sub.w	r3, ip, r3
 800db5e:	0c12      	lsrs	r2, r2, #16
 800db60:	fa13 f38e 	uxtah	r3, r3, lr
 800db64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800db68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db72:	45b9      	cmp	r9, r7
 800db74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800db78:	f840 3b04 	str.w	r3, [r0], #4
 800db7c:	d2e8      	bcs.n	800db50 <quorem+0xb0>
 800db7e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800db82:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800db86:	b92a      	cbnz	r2, 800db94 <quorem+0xf4>
 800db88:	3b04      	subs	r3, #4
 800db8a:	429e      	cmp	r6, r3
 800db8c:	461a      	mov	r2, r3
 800db8e:	d30b      	bcc.n	800dba8 <quorem+0x108>
 800db90:	f8c8 4010 	str.w	r4, [r8, #16]
 800db94:	4628      	mov	r0, r5
 800db96:	b003      	add	sp, #12
 800db98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db9c:	6812      	ldr	r2, [r2, #0]
 800db9e:	3b04      	subs	r3, #4
 800dba0:	2a00      	cmp	r2, #0
 800dba2:	d1ca      	bne.n	800db3a <quorem+0x9a>
 800dba4:	3c01      	subs	r4, #1
 800dba6:	e7c5      	b.n	800db34 <quorem+0x94>
 800dba8:	6812      	ldr	r2, [r2, #0]
 800dbaa:	3b04      	subs	r3, #4
 800dbac:	2a00      	cmp	r2, #0
 800dbae:	d1ef      	bne.n	800db90 <quorem+0xf0>
 800dbb0:	3c01      	subs	r4, #1
 800dbb2:	e7ea      	b.n	800db8a <quorem+0xea>
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	e7ee      	b.n	800db96 <quorem+0xf6>

0800dbb8 <_dtoa_r>:
 800dbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbbc:	ec57 6b10 	vmov	r6, r7, d0
 800dbc0:	b097      	sub	sp, #92	; 0x5c
 800dbc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dbc4:	9106      	str	r1, [sp, #24]
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	920b      	str	r2, [sp, #44]	; 0x2c
 800dbca:	9312      	str	r3, [sp, #72]	; 0x48
 800dbcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dbd0:	e9cd 6700 	strd	r6, r7, [sp]
 800dbd4:	b93d      	cbnz	r5, 800dbe6 <_dtoa_r+0x2e>
 800dbd6:	2010      	movs	r0, #16
 800dbd8:	f7ff f848 	bl	800cc6c <malloc>
 800dbdc:	6260      	str	r0, [r4, #36]	; 0x24
 800dbde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dbe2:	6005      	str	r5, [r0, #0]
 800dbe4:	60c5      	str	r5, [r0, #12]
 800dbe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbe8:	6819      	ldr	r1, [r3, #0]
 800dbea:	b151      	cbz	r1, 800dc02 <_dtoa_r+0x4a>
 800dbec:	685a      	ldr	r2, [r3, #4]
 800dbee:	604a      	str	r2, [r1, #4]
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	4093      	lsls	r3, r2
 800dbf4:	608b      	str	r3, [r1, #8]
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f000 ffb8 	bl	800eb6c <_Bfree>
 800dbfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbfe:	2200      	movs	r2, #0
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	1e3b      	subs	r3, r7, #0
 800dc04:	bfbb      	ittet	lt
 800dc06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dc0a:	9301      	strlt	r3, [sp, #4]
 800dc0c:	2300      	movge	r3, #0
 800dc0e:	2201      	movlt	r2, #1
 800dc10:	bfac      	ite	ge
 800dc12:	f8c8 3000 	strge.w	r3, [r8]
 800dc16:	f8c8 2000 	strlt.w	r2, [r8]
 800dc1a:	4baf      	ldr	r3, [pc, #700]	; (800ded8 <_dtoa_r+0x320>)
 800dc1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dc20:	ea33 0308 	bics.w	r3, r3, r8
 800dc24:	d114      	bne.n	800dc50 <_dtoa_r+0x98>
 800dc26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc28:	f242 730f 	movw	r3, #9999	; 0x270f
 800dc2c:	6013      	str	r3, [r2, #0]
 800dc2e:	9b00      	ldr	r3, [sp, #0]
 800dc30:	b923      	cbnz	r3, 800dc3c <_dtoa_r+0x84>
 800dc32:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800dc36:	2800      	cmp	r0, #0
 800dc38:	f000 8542 	beq.w	800e6c0 <_dtoa_r+0xb08>
 800dc3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc3e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800deec <_dtoa_r+0x334>
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f000 8544 	beq.w	800e6d0 <_dtoa_r+0xb18>
 800dc48:	f10b 0303 	add.w	r3, fp, #3
 800dc4c:	f000 bd3e 	b.w	800e6cc <_dtoa_r+0xb14>
 800dc50:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dc54:	2200      	movs	r2, #0
 800dc56:	2300      	movs	r3, #0
 800dc58:	4630      	mov	r0, r6
 800dc5a:	4639      	mov	r1, r7
 800dc5c:	f7f2 ff44 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc60:	4681      	mov	r9, r0
 800dc62:	b168      	cbz	r0, 800dc80 <_dtoa_r+0xc8>
 800dc64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc66:	2301      	movs	r3, #1
 800dc68:	6013      	str	r3, [r2, #0]
 800dc6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f000 8524 	beq.w	800e6ba <_dtoa_r+0xb02>
 800dc72:	4b9a      	ldr	r3, [pc, #616]	; (800dedc <_dtoa_r+0x324>)
 800dc74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc76:	f103 3bff 	add.w	fp, r3, #4294967295
 800dc7a:	6013      	str	r3, [r2, #0]
 800dc7c:	f000 bd28 	b.w	800e6d0 <_dtoa_r+0xb18>
 800dc80:	aa14      	add	r2, sp, #80	; 0x50
 800dc82:	a915      	add	r1, sp, #84	; 0x54
 800dc84:	ec47 6b10 	vmov	d0, r6, r7
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f001 f9c8 	bl	800f01e <__d2b>
 800dc8e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dc92:	9004      	str	r0, [sp, #16]
 800dc94:	2d00      	cmp	r5, #0
 800dc96:	d07c      	beq.n	800dd92 <_dtoa_r+0x1da>
 800dc98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc9c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800dca0:	46b2      	mov	sl, r6
 800dca2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800dca6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dcaa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800dcae:	2200      	movs	r2, #0
 800dcb0:	4b8b      	ldr	r3, [pc, #556]	; (800dee0 <_dtoa_r+0x328>)
 800dcb2:	4650      	mov	r0, sl
 800dcb4:	4659      	mov	r1, fp
 800dcb6:	f7f2 faf7 	bl	80002a8 <__aeabi_dsub>
 800dcba:	a381      	add	r3, pc, #516	; (adr r3, 800dec0 <_dtoa_r+0x308>)
 800dcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc0:	f7f2 fcaa 	bl	8000618 <__aeabi_dmul>
 800dcc4:	a380      	add	r3, pc, #512	; (adr r3, 800dec8 <_dtoa_r+0x310>)
 800dcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcca:	f7f2 faef 	bl	80002ac <__adddf3>
 800dcce:	4606      	mov	r6, r0
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	460f      	mov	r7, r1
 800dcd4:	f7f2 fc36 	bl	8000544 <__aeabi_i2d>
 800dcd8:	a37d      	add	r3, pc, #500	; (adr r3, 800ded0 <_dtoa_r+0x318>)
 800dcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcde:	f7f2 fc9b 	bl	8000618 <__aeabi_dmul>
 800dce2:	4602      	mov	r2, r0
 800dce4:	460b      	mov	r3, r1
 800dce6:	4630      	mov	r0, r6
 800dce8:	4639      	mov	r1, r7
 800dcea:	f7f2 fadf 	bl	80002ac <__adddf3>
 800dcee:	4606      	mov	r6, r0
 800dcf0:	460f      	mov	r7, r1
 800dcf2:	f7f2 ff41 	bl	8000b78 <__aeabi_d2iz>
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	4682      	mov	sl, r0
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	4639      	mov	r1, r7
 800dd00:	f7f2 fefc 	bl	8000afc <__aeabi_dcmplt>
 800dd04:	b148      	cbz	r0, 800dd1a <_dtoa_r+0x162>
 800dd06:	4650      	mov	r0, sl
 800dd08:	f7f2 fc1c 	bl	8000544 <__aeabi_i2d>
 800dd0c:	4632      	mov	r2, r6
 800dd0e:	463b      	mov	r3, r7
 800dd10:	f7f2 feea 	bl	8000ae8 <__aeabi_dcmpeq>
 800dd14:	b908      	cbnz	r0, 800dd1a <_dtoa_r+0x162>
 800dd16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd1a:	f1ba 0f16 	cmp.w	sl, #22
 800dd1e:	d859      	bhi.n	800ddd4 <_dtoa_r+0x21c>
 800dd20:	4970      	ldr	r1, [pc, #448]	; (800dee4 <_dtoa_r+0x32c>)
 800dd22:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800dd26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd2e:	f7f2 ff03 	bl	8000b38 <__aeabi_dcmpgt>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d050      	beq.n	800ddd8 <_dtoa_r+0x220>
 800dd36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd40:	1b5d      	subs	r5, r3, r5
 800dd42:	f1b5 0801 	subs.w	r8, r5, #1
 800dd46:	bf49      	itett	mi
 800dd48:	f1c5 0301 	rsbmi	r3, r5, #1
 800dd4c:	2300      	movpl	r3, #0
 800dd4e:	9305      	strmi	r3, [sp, #20]
 800dd50:	f04f 0800 	movmi.w	r8, #0
 800dd54:	bf58      	it	pl
 800dd56:	9305      	strpl	r3, [sp, #20]
 800dd58:	f1ba 0f00 	cmp.w	sl, #0
 800dd5c:	db3e      	blt.n	800dddc <_dtoa_r+0x224>
 800dd5e:	2300      	movs	r3, #0
 800dd60:	44d0      	add	r8, sl
 800dd62:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800dd66:	9307      	str	r3, [sp, #28]
 800dd68:	9b06      	ldr	r3, [sp, #24]
 800dd6a:	2b09      	cmp	r3, #9
 800dd6c:	f200 8090 	bhi.w	800de90 <_dtoa_r+0x2d8>
 800dd70:	2b05      	cmp	r3, #5
 800dd72:	bfc4      	itt	gt
 800dd74:	3b04      	subgt	r3, #4
 800dd76:	9306      	strgt	r3, [sp, #24]
 800dd78:	9b06      	ldr	r3, [sp, #24]
 800dd7a:	f1a3 0302 	sub.w	r3, r3, #2
 800dd7e:	bfcc      	ite	gt
 800dd80:	2500      	movgt	r5, #0
 800dd82:	2501      	movle	r5, #1
 800dd84:	2b03      	cmp	r3, #3
 800dd86:	f200 808f 	bhi.w	800dea8 <_dtoa_r+0x2f0>
 800dd8a:	e8df f003 	tbb	[pc, r3]
 800dd8e:	7f7d      	.short	0x7f7d
 800dd90:	7131      	.short	0x7131
 800dd92:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800dd96:	441d      	add	r5, r3
 800dd98:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800dd9c:	2820      	cmp	r0, #32
 800dd9e:	dd13      	ble.n	800ddc8 <_dtoa_r+0x210>
 800dda0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800dda4:	9b00      	ldr	r3, [sp, #0]
 800dda6:	fa08 f800 	lsl.w	r8, r8, r0
 800ddaa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ddae:	fa23 f000 	lsr.w	r0, r3, r0
 800ddb2:	ea48 0000 	orr.w	r0, r8, r0
 800ddb6:	f7f2 fbb5 	bl	8000524 <__aeabi_ui2d>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	4682      	mov	sl, r0
 800ddbe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ddc2:	3d01      	subs	r5, #1
 800ddc4:	9313      	str	r3, [sp, #76]	; 0x4c
 800ddc6:	e772      	b.n	800dcae <_dtoa_r+0xf6>
 800ddc8:	9b00      	ldr	r3, [sp, #0]
 800ddca:	f1c0 0020 	rsb	r0, r0, #32
 800ddce:	fa03 f000 	lsl.w	r0, r3, r0
 800ddd2:	e7f0      	b.n	800ddb6 <_dtoa_r+0x1fe>
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e7b1      	b.n	800dd3c <_dtoa_r+0x184>
 800ddd8:	900f      	str	r0, [sp, #60]	; 0x3c
 800ddda:	e7b0      	b.n	800dd3e <_dtoa_r+0x186>
 800dddc:	9b05      	ldr	r3, [sp, #20]
 800ddde:	eba3 030a 	sub.w	r3, r3, sl
 800dde2:	9305      	str	r3, [sp, #20]
 800dde4:	f1ca 0300 	rsb	r3, sl, #0
 800dde8:	9307      	str	r3, [sp, #28]
 800ddea:	2300      	movs	r3, #0
 800ddec:	930e      	str	r3, [sp, #56]	; 0x38
 800ddee:	e7bb      	b.n	800dd68 <_dtoa_r+0x1b0>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	930a      	str	r3, [sp, #40]	; 0x28
 800ddf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	dd59      	ble.n	800deae <_dtoa_r+0x2f6>
 800ddfa:	9302      	str	r3, [sp, #8]
 800ddfc:	4699      	mov	r9, r3
 800ddfe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800de00:	2200      	movs	r2, #0
 800de02:	6072      	str	r2, [r6, #4]
 800de04:	2204      	movs	r2, #4
 800de06:	f102 0014 	add.w	r0, r2, #20
 800de0a:	4298      	cmp	r0, r3
 800de0c:	6871      	ldr	r1, [r6, #4]
 800de0e:	d953      	bls.n	800deb8 <_dtoa_r+0x300>
 800de10:	4620      	mov	r0, r4
 800de12:	f000 fe77 	bl	800eb04 <_Balloc>
 800de16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de18:	6030      	str	r0, [r6, #0]
 800de1a:	f1b9 0f0e 	cmp.w	r9, #14
 800de1e:	f8d3 b000 	ldr.w	fp, [r3]
 800de22:	f200 80e6 	bhi.w	800dff2 <_dtoa_r+0x43a>
 800de26:	2d00      	cmp	r5, #0
 800de28:	f000 80e3 	beq.w	800dff2 <_dtoa_r+0x43a>
 800de2c:	ed9d 7b00 	vldr	d7, [sp]
 800de30:	f1ba 0f00 	cmp.w	sl, #0
 800de34:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800de38:	dd74      	ble.n	800df24 <_dtoa_r+0x36c>
 800de3a:	4a2a      	ldr	r2, [pc, #168]	; (800dee4 <_dtoa_r+0x32c>)
 800de3c:	f00a 030f 	and.w	r3, sl, #15
 800de40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800de44:	ed93 7b00 	vldr	d7, [r3]
 800de48:	ea4f 162a 	mov.w	r6, sl, asr #4
 800de4c:	06f0      	lsls	r0, r6, #27
 800de4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800de52:	d565      	bpl.n	800df20 <_dtoa_r+0x368>
 800de54:	4b24      	ldr	r3, [pc, #144]	; (800dee8 <_dtoa_r+0x330>)
 800de56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800de5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800de5e:	f7f2 fd05 	bl	800086c <__aeabi_ddiv>
 800de62:	e9cd 0100 	strd	r0, r1, [sp]
 800de66:	f006 060f 	and.w	r6, r6, #15
 800de6a:	2503      	movs	r5, #3
 800de6c:	4f1e      	ldr	r7, [pc, #120]	; (800dee8 <_dtoa_r+0x330>)
 800de6e:	e04c      	b.n	800df0a <_dtoa_r+0x352>
 800de70:	2301      	movs	r3, #1
 800de72:	930a      	str	r3, [sp, #40]	; 0x28
 800de74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de76:	4453      	add	r3, sl
 800de78:	f103 0901 	add.w	r9, r3, #1
 800de7c:	9302      	str	r3, [sp, #8]
 800de7e:	464b      	mov	r3, r9
 800de80:	2b01      	cmp	r3, #1
 800de82:	bfb8      	it	lt
 800de84:	2301      	movlt	r3, #1
 800de86:	e7ba      	b.n	800ddfe <_dtoa_r+0x246>
 800de88:	2300      	movs	r3, #0
 800de8a:	e7b2      	b.n	800ddf2 <_dtoa_r+0x23a>
 800de8c:	2300      	movs	r3, #0
 800de8e:	e7f0      	b.n	800de72 <_dtoa_r+0x2ba>
 800de90:	2501      	movs	r5, #1
 800de92:	2300      	movs	r3, #0
 800de94:	9306      	str	r3, [sp, #24]
 800de96:	950a      	str	r5, [sp, #40]	; 0x28
 800de98:	f04f 33ff 	mov.w	r3, #4294967295
 800de9c:	9302      	str	r3, [sp, #8]
 800de9e:	4699      	mov	r9, r3
 800dea0:	2200      	movs	r2, #0
 800dea2:	2312      	movs	r3, #18
 800dea4:	920b      	str	r2, [sp, #44]	; 0x2c
 800dea6:	e7aa      	b.n	800ddfe <_dtoa_r+0x246>
 800dea8:	2301      	movs	r3, #1
 800deaa:	930a      	str	r3, [sp, #40]	; 0x28
 800deac:	e7f4      	b.n	800de98 <_dtoa_r+0x2e0>
 800deae:	2301      	movs	r3, #1
 800deb0:	9302      	str	r3, [sp, #8]
 800deb2:	4699      	mov	r9, r3
 800deb4:	461a      	mov	r2, r3
 800deb6:	e7f5      	b.n	800dea4 <_dtoa_r+0x2ec>
 800deb8:	3101      	adds	r1, #1
 800deba:	6071      	str	r1, [r6, #4]
 800debc:	0052      	lsls	r2, r2, #1
 800debe:	e7a2      	b.n	800de06 <_dtoa_r+0x24e>
 800dec0:	636f4361 	.word	0x636f4361
 800dec4:	3fd287a7 	.word	0x3fd287a7
 800dec8:	8b60c8b3 	.word	0x8b60c8b3
 800decc:	3fc68a28 	.word	0x3fc68a28
 800ded0:	509f79fb 	.word	0x509f79fb
 800ded4:	3fd34413 	.word	0x3fd34413
 800ded8:	7ff00000 	.word	0x7ff00000
 800dedc:	0800f5f5 	.word	0x0800f5f5
 800dee0:	3ff80000 	.word	0x3ff80000
 800dee4:	0800f6b0 	.word	0x0800f6b0
 800dee8:	0800f688 	.word	0x0800f688
 800deec:	0800f621 	.word	0x0800f621
 800def0:	07f1      	lsls	r1, r6, #31
 800def2:	d508      	bpl.n	800df06 <_dtoa_r+0x34e>
 800def4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800def8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800defc:	f7f2 fb8c 	bl	8000618 <__aeabi_dmul>
 800df00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800df04:	3501      	adds	r5, #1
 800df06:	1076      	asrs	r6, r6, #1
 800df08:	3708      	adds	r7, #8
 800df0a:	2e00      	cmp	r6, #0
 800df0c:	d1f0      	bne.n	800def0 <_dtoa_r+0x338>
 800df0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800df12:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df16:	f7f2 fca9 	bl	800086c <__aeabi_ddiv>
 800df1a:	e9cd 0100 	strd	r0, r1, [sp]
 800df1e:	e01a      	b.n	800df56 <_dtoa_r+0x39e>
 800df20:	2502      	movs	r5, #2
 800df22:	e7a3      	b.n	800de6c <_dtoa_r+0x2b4>
 800df24:	f000 80a0 	beq.w	800e068 <_dtoa_r+0x4b0>
 800df28:	f1ca 0600 	rsb	r6, sl, #0
 800df2c:	4b9f      	ldr	r3, [pc, #636]	; (800e1ac <_dtoa_r+0x5f4>)
 800df2e:	4fa0      	ldr	r7, [pc, #640]	; (800e1b0 <_dtoa_r+0x5f8>)
 800df30:	f006 020f 	and.w	r2, r6, #15
 800df34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800df40:	f7f2 fb6a 	bl	8000618 <__aeabi_dmul>
 800df44:	e9cd 0100 	strd	r0, r1, [sp]
 800df48:	1136      	asrs	r6, r6, #4
 800df4a:	2300      	movs	r3, #0
 800df4c:	2502      	movs	r5, #2
 800df4e:	2e00      	cmp	r6, #0
 800df50:	d17f      	bne.n	800e052 <_dtoa_r+0x49a>
 800df52:	2b00      	cmp	r3, #0
 800df54:	d1e1      	bne.n	800df1a <_dtoa_r+0x362>
 800df56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f000 8087 	beq.w	800e06c <_dtoa_r+0x4b4>
 800df5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800df62:	2200      	movs	r2, #0
 800df64:	4b93      	ldr	r3, [pc, #588]	; (800e1b4 <_dtoa_r+0x5fc>)
 800df66:	4630      	mov	r0, r6
 800df68:	4639      	mov	r1, r7
 800df6a:	f7f2 fdc7 	bl	8000afc <__aeabi_dcmplt>
 800df6e:	2800      	cmp	r0, #0
 800df70:	d07c      	beq.n	800e06c <_dtoa_r+0x4b4>
 800df72:	f1b9 0f00 	cmp.w	r9, #0
 800df76:	d079      	beq.n	800e06c <_dtoa_r+0x4b4>
 800df78:	9b02      	ldr	r3, [sp, #8]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	dd35      	ble.n	800dfea <_dtoa_r+0x432>
 800df7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800df82:	9308      	str	r3, [sp, #32]
 800df84:	4639      	mov	r1, r7
 800df86:	2200      	movs	r2, #0
 800df88:	4b8b      	ldr	r3, [pc, #556]	; (800e1b8 <_dtoa_r+0x600>)
 800df8a:	4630      	mov	r0, r6
 800df8c:	f7f2 fb44 	bl	8000618 <__aeabi_dmul>
 800df90:	e9cd 0100 	strd	r0, r1, [sp]
 800df94:	9f02      	ldr	r7, [sp, #8]
 800df96:	3501      	adds	r5, #1
 800df98:	4628      	mov	r0, r5
 800df9a:	f7f2 fad3 	bl	8000544 <__aeabi_i2d>
 800df9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfa2:	f7f2 fb39 	bl	8000618 <__aeabi_dmul>
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	4b84      	ldr	r3, [pc, #528]	; (800e1bc <_dtoa_r+0x604>)
 800dfaa:	f7f2 f97f 	bl	80002ac <__adddf3>
 800dfae:	4605      	mov	r5, r0
 800dfb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800dfb4:	2f00      	cmp	r7, #0
 800dfb6:	d15d      	bne.n	800e074 <_dtoa_r+0x4bc>
 800dfb8:	2200      	movs	r2, #0
 800dfba:	4b81      	ldr	r3, [pc, #516]	; (800e1c0 <_dtoa_r+0x608>)
 800dfbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfc0:	f7f2 f972 	bl	80002a8 <__aeabi_dsub>
 800dfc4:	462a      	mov	r2, r5
 800dfc6:	4633      	mov	r3, r6
 800dfc8:	e9cd 0100 	strd	r0, r1, [sp]
 800dfcc:	f7f2 fdb4 	bl	8000b38 <__aeabi_dcmpgt>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	f040 8288 	bne.w	800e4e6 <_dtoa_r+0x92e>
 800dfd6:	462a      	mov	r2, r5
 800dfd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800dfdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfe0:	f7f2 fd8c 	bl	8000afc <__aeabi_dcmplt>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	f040 827c 	bne.w	800e4e2 <_dtoa_r+0x92a>
 800dfea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dfee:	e9cd 2300 	strd	r2, r3, [sp]
 800dff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f2c0 8150 	blt.w	800e29a <_dtoa_r+0x6e2>
 800dffa:	f1ba 0f0e 	cmp.w	sl, #14
 800dffe:	f300 814c 	bgt.w	800e29a <_dtoa_r+0x6e2>
 800e002:	4b6a      	ldr	r3, [pc, #424]	; (800e1ac <_dtoa_r+0x5f4>)
 800e004:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e008:	ed93 7b00 	vldr	d7, [r3]
 800e00c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e00e:	2b00      	cmp	r3, #0
 800e010:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e014:	f280 80d8 	bge.w	800e1c8 <_dtoa_r+0x610>
 800e018:	f1b9 0f00 	cmp.w	r9, #0
 800e01c:	f300 80d4 	bgt.w	800e1c8 <_dtoa_r+0x610>
 800e020:	f040 825e 	bne.w	800e4e0 <_dtoa_r+0x928>
 800e024:	2200      	movs	r2, #0
 800e026:	4b66      	ldr	r3, [pc, #408]	; (800e1c0 <_dtoa_r+0x608>)
 800e028:	ec51 0b17 	vmov	r0, r1, d7
 800e02c:	f7f2 faf4 	bl	8000618 <__aeabi_dmul>
 800e030:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e034:	f7f2 fd76 	bl	8000b24 <__aeabi_dcmpge>
 800e038:	464f      	mov	r7, r9
 800e03a:	464e      	mov	r6, r9
 800e03c:	2800      	cmp	r0, #0
 800e03e:	f040 8234 	bne.w	800e4aa <_dtoa_r+0x8f2>
 800e042:	2331      	movs	r3, #49	; 0x31
 800e044:	f10b 0501 	add.w	r5, fp, #1
 800e048:	f88b 3000 	strb.w	r3, [fp]
 800e04c:	f10a 0a01 	add.w	sl, sl, #1
 800e050:	e22f      	b.n	800e4b2 <_dtoa_r+0x8fa>
 800e052:	07f2      	lsls	r2, r6, #31
 800e054:	d505      	bpl.n	800e062 <_dtoa_r+0x4aa>
 800e056:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e05a:	f7f2 fadd 	bl	8000618 <__aeabi_dmul>
 800e05e:	3501      	adds	r5, #1
 800e060:	2301      	movs	r3, #1
 800e062:	1076      	asrs	r6, r6, #1
 800e064:	3708      	adds	r7, #8
 800e066:	e772      	b.n	800df4e <_dtoa_r+0x396>
 800e068:	2502      	movs	r5, #2
 800e06a:	e774      	b.n	800df56 <_dtoa_r+0x39e>
 800e06c:	f8cd a020 	str.w	sl, [sp, #32]
 800e070:	464f      	mov	r7, r9
 800e072:	e791      	b.n	800df98 <_dtoa_r+0x3e0>
 800e074:	4b4d      	ldr	r3, [pc, #308]	; (800e1ac <_dtoa_r+0x5f4>)
 800e076:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e07a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e080:	2b00      	cmp	r3, #0
 800e082:	d047      	beq.n	800e114 <_dtoa_r+0x55c>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	2000      	movs	r0, #0
 800e08a:	494e      	ldr	r1, [pc, #312]	; (800e1c4 <_dtoa_r+0x60c>)
 800e08c:	f7f2 fbee 	bl	800086c <__aeabi_ddiv>
 800e090:	462a      	mov	r2, r5
 800e092:	4633      	mov	r3, r6
 800e094:	f7f2 f908 	bl	80002a8 <__aeabi_dsub>
 800e098:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e09c:	465d      	mov	r5, fp
 800e09e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0a2:	f7f2 fd69 	bl	8000b78 <__aeabi_d2iz>
 800e0a6:	4606      	mov	r6, r0
 800e0a8:	f7f2 fa4c 	bl	8000544 <__aeabi_i2d>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0b4:	f7f2 f8f8 	bl	80002a8 <__aeabi_dsub>
 800e0b8:	3630      	adds	r6, #48	; 0x30
 800e0ba:	f805 6b01 	strb.w	r6, [r5], #1
 800e0be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e0c2:	e9cd 0100 	strd	r0, r1, [sp]
 800e0c6:	f7f2 fd19 	bl	8000afc <__aeabi_dcmplt>
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d163      	bne.n	800e196 <_dtoa_r+0x5de>
 800e0ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	4937      	ldr	r1, [pc, #220]	; (800e1b4 <_dtoa_r+0x5fc>)
 800e0d6:	f7f2 f8e7 	bl	80002a8 <__aeabi_dsub>
 800e0da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e0de:	f7f2 fd0d 	bl	8000afc <__aeabi_dcmplt>
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	f040 80b7 	bne.w	800e256 <_dtoa_r+0x69e>
 800e0e8:	eba5 030b 	sub.w	r3, r5, fp
 800e0ec:	429f      	cmp	r7, r3
 800e0ee:	f77f af7c 	ble.w	800dfea <_dtoa_r+0x432>
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	4b30      	ldr	r3, [pc, #192]	; (800e1b8 <_dtoa_r+0x600>)
 800e0f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e0fa:	f7f2 fa8d 	bl	8000618 <__aeabi_dmul>
 800e0fe:	2200      	movs	r2, #0
 800e100:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e104:	4b2c      	ldr	r3, [pc, #176]	; (800e1b8 <_dtoa_r+0x600>)
 800e106:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e10a:	f7f2 fa85 	bl	8000618 <__aeabi_dmul>
 800e10e:	e9cd 0100 	strd	r0, r1, [sp]
 800e112:	e7c4      	b.n	800e09e <_dtoa_r+0x4e6>
 800e114:	462a      	mov	r2, r5
 800e116:	4633      	mov	r3, r6
 800e118:	f7f2 fa7e 	bl	8000618 <__aeabi_dmul>
 800e11c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e120:	eb0b 0507 	add.w	r5, fp, r7
 800e124:	465e      	mov	r6, fp
 800e126:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e12a:	f7f2 fd25 	bl	8000b78 <__aeabi_d2iz>
 800e12e:	4607      	mov	r7, r0
 800e130:	f7f2 fa08 	bl	8000544 <__aeabi_i2d>
 800e134:	3730      	adds	r7, #48	; 0x30
 800e136:	4602      	mov	r2, r0
 800e138:	460b      	mov	r3, r1
 800e13a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e13e:	f7f2 f8b3 	bl	80002a8 <__aeabi_dsub>
 800e142:	f806 7b01 	strb.w	r7, [r6], #1
 800e146:	42ae      	cmp	r6, r5
 800e148:	e9cd 0100 	strd	r0, r1, [sp]
 800e14c:	f04f 0200 	mov.w	r2, #0
 800e150:	d126      	bne.n	800e1a0 <_dtoa_r+0x5e8>
 800e152:	4b1c      	ldr	r3, [pc, #112]	; (800e1c4 <_dtoa_r+0x60c>)
 800e154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e158:	f7f2 f8a8 	bl	80002ac <__adddf3>
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e164:	f7f2 fce8 	bl	8000b38 <__aeabi_dcmpgt>
 800e168:	2800      	cmp	r0, #0
 800e16a:	d174      	bne.n	800e256 <_dtoa_r+0x69e>
 800e16c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e170:	2000      	movs	r0, #0
 800e172:	4914      	ldr	r1, [pc, #80]	; (800e1c4 <_dtoa_r+0x60c>)
 800e174:	f7f2 f898 	bl	80002a8 <__aeabi_dsub>
 800e178:	4602      	mov	r2, r0
 800e17a:	460b      	mov	r3, r1
 800e17c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e180:	f7f2 fcbc 	bl	8000afc <__aeabi_dcmplt>
 800e184:	2800      	cmp	r0, #0
 800e186:	f43f af30 	beq.w	800dfea <_dtoa_r+0x432>
 800e18a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e18e:	2b30      	cmp	r3, #48	; 0x30
 800e190:	f105 32ff 	add.w	r2, r5, #4294967295
 800e194:	d002      	beq.n	800e19c <_dtoa_r+0x5e4>
 800e196:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e19a:	e04a      	b.n	800e232 <_dtoa_r+0x67a>
 800e19c:	4615      	mov	r5, r2
 800e19e:	e7f4      	b.n	800e18a <_dtoa_r+0x5d2>
 800e1a0:	4b05      	ldr	r3, [pc, #20]	; (800e1b8 <_dtoa_r+0x600>)
 800e1a2:	f7f2 fa39 	bl	8000618 <__aeabi_dmul>
 800e1a6:	e9cd 0100 	strd	r0, r1, [sp]
 800e1aa:	e7bc      	b.n	800e126 <_dtoa_r+0x56e>
 800e1ac:	0800f6b0 	.word	0x0800f6b0
 800e1b0:	0800f688 	.word	0x0800f688
 800e1b4:	3ff00000 	.word	0x3ff00000
 800e1b8:	40240000 	.word	0x40240000
 800e1bc:	401c0000 	.word	0x401c0000
 800e1c0:	40140000 	.word	0x40140000
 800e1c4:	3fe00000 	.word	0x3fe00000
 800e1c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e1cc:	465d      	mov	r5, fp
 800e1ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	4639      	mov	r1, r7
 800e1d6:	f7f2 fb49 	bl	800086c <__aeabi_ddiv>
 800e1da:	f7f2 fccd 	bl	8000b78 <__aeabi_d2iz>
 800e1de:	4680      	mov	r8, r0
 800e1e0:	f7f2 f9b0 	bl	8000544 <__aeabi_i2d>
 800e1e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1e8:	f7f2 fa16 	bl	8000618 <__aeabi_dmul>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	4639      	mov	r1, r7
 800e1f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e1f8:	f7f2 f856 	bl	80002a8 <__aeabi_dsub>
 800e1fc:	f805 6b01 	strb.w	r6, [r5], #1
 800e200:	eba5 060b 	sub.w	r6, r5, fp
 800e204:	45b1      	cmp	r9, r6
 800e206:	4602      	mov	r2, r0
 800e208:	460b      	mov	r3, r1
 800e20a:	d139      	bne.n	800e280 <_dtoa_r+0x6c8>
 800e20c:	f7f2 f84e 	bl	80002ac <__adddf3>
 800e210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e214:	4606      	mov	r6, r0
 800e216:	460f      	mov	r7, r1
 800e218:	f7f2 fc8e 	bl	8000b38 <__aeabi_dcmpgt>
 800e21c:	b9c8      	cbnz	r0, 800e252 <_dtoa_r+0x69a>
 800e21e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e222:	4630      	mov	r0, r6
 800e224:	4639      	mov	r1, r7
 800e226:	f7f2 fc5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800e22a:	b110      	cbz	r0, 800e232 <_dtoa_r+0x67a>
 800e22c:	f018 0f01 	tst.w	r8, #1
 800e230:	d10f      	bne.n	800e252 <_dtoa_r+0x69a>
 800e232:	9904      	ldr	r1, [sp, #16]
 800e234:	4620      	mov	r0, r4
 800e236:	f000 fc99 	bl	800eb6c <_Bfree>
 800e23a:	2300      	movs	r3, #0
 800e23c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e23e:	702b      	strb	r3, [r5, #0]
 800e240:	f10a 0301 	add.w	r3, sl, #1
 800e244:	6013      	str	r3, [r2, #0]
 800e246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e248:	2b00      	cmp	r3, #0
 800e24a:	f000 8241 	beq.w	800e6d0 <_dtoa_r+0xb18>
 800e24e:	601d      	str	r5, [r3, #0]
 800e250:	e23e      	b.n	800e6d0 <_dtoa_r+0xb18>
 800e252:	f8cd a020 	str.w	sl, [sp, #32]
 800e256:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e25a:	2a39      	cmp	r2, #57	; 0x39
 800e25c:	f105 33ff 	add.w	r3, r5, #4294967295
 800e260:	d108      	bne.n	800e274 <_dtoa_r+0x6bc>
 800e262:	459b      	cmp	fp, r3
 800e264:	d10a      	bne.n	800e27c <_dtoa_r+0x6c4>
 800e266:	9b08      	ldr	r3, [sp, #32]
 800e268:	3301      	adds	r3, #1
 800e26a:	9308      	str	r3, [sp, #32]
 800e26c:	2330      	movs	r3, #48	; 0x30
 800e26e:	f88b 3000 	strb.w	r3, [fp]
 800e272:	465b      	mov	r3, fp
 800e274:	781a      	ldrb	r2, [r3, #0]
 800e276:	3201      	adds	r2, #1
 800e278:	701a      	strb	r2, [r3, #0]
 800e27a:	e78c      	b.n	800e196 <_dtoa_r+0x5de>
 800e27c:	461d      	mov	r5, r3
 800e27e:	e7ea      	b.n	800e256 <_dtoa_r+0x69e>
 800e280:	2200      	movs	r2, #0
 800e282:	4b9b      	ldr	r3, [pc, #620]	; (800e4f0 <_dtoa_r+0x938>)
 800e284:	f7f2 f9c8 	bl	8000618 <__aeabi_dmul>
 800e288:	2200      	movs	r2, #0
 800e28a:	2300      	movs	r3, #0
 800e28c:	4606      	mov	r6, r0
 800e28e:	460f      	mov	r7, r1
 800e290:	f7f2 fc2a 	bl	8000ae8 <__aeabi_dcmpeq>
 800e294:	2800      	cmp	r0, #0
 800e296:	d09a      	beq.n	800e1ce <_dtoa_r+0x616>
 800e298:	e7cb      	b.n	800e232 <_dtoa_r+0x67a>
 800e29a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e29c:	2a00      	cmp	r2, #0
 800e29e:	f000 808b 	beq.w	800e3b8 <_dtoa_r+0x800>
 800e2a2:	9a06      	ldr	r2, [sp, #24]
 800e2a4:	2a01      	cmp	r2, #1
 800e2a6:	dc6e      	bgt.n	800e386 <_dtoa_r+0x7ce>
 800e2a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e2aa:	2a00      	cmp	r2, #0
 800e2ac:	d067      	beq.n	800e37e <_dtoa_r+0x7c6>
 800e2ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e2b2:	9f07      	ldr	r7, [sp, #28]
 800e2b4:	9d05      	ldr	r5, [sp, #20]
 800e2b6:	9a05      	ldr	r2, [sp, #20]
 800e2b8:	2101      	movs	r1, #1
 800e2ba:	441a      	add	r2, r3
 800e2bc:	4620      	mov	r0, r4
 800e2be:	9205      	str	r2, [sp, #20]
 800e2c0:	4498      	add	r8, r3
 800e2c2:	f000 fcf3 	bl	800ecac <__i2b>
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	2d00      	cmp	r5, #0
 800e2ca:	dd0c      	ble.n	800e2e6 <_dtoa_r+0x72e>
 800e2cc:	f1b8 0f00 	cmp.w	r8, #0
 800e2d0:	dd09      	ble.n	800e2e6 <_dtoa_r+0x72e>
 800e2d2:	4545      	cmp	r5, r8
 800e2d4:	9a05      	ldr	r2, [sp, #20]
 800e2d6:	462b      	mov	r3, r5
 800e2d8:	bfa8      	it	ge
 800e2da:	4643      	movge	r3, r8
 800e2dc:	1ad2      	subs	r2, r2, r3
 800e2de:	9205      	str	r2, [sp, #20]
 800e2e0:	1aed      	subs	r5, r5, r3
 800e2e2:	eba8 0803 	sub.w	r8, r8, r3
 800e2e6:	9b07      	ldr	r3, [sp, #28]
 800e2e8:	b1eb      	cbz	r3, 800e326 <_dtoa_r+0x76e>
 800e2ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d067      	beq.n	800e3c0 <_dtoa_r+0x808>
 800e2f0:	b18f      	cbz	r7, 800e316 <_dtoa_r+0x75e>
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	463a      	mov	r2, r7
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f000 fd78 	bl	800edec <__pow5mult>
 800e2fc:	9a04      	ldr	r2, [sp, #16]
 800e2fe:	4601      	mov	r1, r0
 800e300:	4606      	mov	r6, r0
 800e302:	4620      	mov	r0, r4
 800e304:	f000 fcdb 	bl	800ecbe <__multiply>
 800e308:	9904      	ldr	r1, [sp, #16]
 800e30a:	9008      	str	r0, [sp, #32]
 800e30c:	4620      	mov	r0, r4
 800e30e:	f000 fc2d 	bl	800eb6c <_Bfree>
 800e312:	9b08      	ldr	r3, [sp, #32]
 800e314:	9304      	str	r3, [sp, #16]
 800e316:	9b07      	ldr	r3, [sp, #28]
 800e318:	1bda      	subs	r2, r3, r7
 800e31a:	d004      	beq.n	800e326 <_dtoa_r+0x76e>
 800e31c:	9904      	ldr	r1, [sp, #16]
 800e31e:	4620      	mov	r0, r4
 800e320:	f000 fd64 	bl	800edec <__pow5mult>
 800e324:	9004      	str	r0, [sp, #16]
 800e326:	2101      	movs	r1, #1
 800e328:	4620      	mov	r0, r4
 800e32a:	f000 fcbf 	bl	800ecac <__i2b>
 800e32e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e330:	4607      	mov	r7, r0
 800e332:	2b00      	cmp	r3, #0
 800e334:	f000 81d0 	beq.w	800e6d8 <_dtoa_r+0xb20>
 800e338:	461a      	mov	r2, r3
 800e33a:	4601      	mov	r1, r0
 800e33c:	4620      	mov	r0, r4
 800e33e:	f000 fd55 	bl	800edec <__pow5mult>
 800e342:	9b06      	ldr	r3, [sp, #24]
 800e344:	2b01      	cmp	r3, #1
 800e346:	4607      	mov	r7, r0
 800e348:	dc40      	bgt.n	800e3cc <_dtoa_r+0x814>
 800e34a:	9b00      	ldr	r3, [sp, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d139      	bne.n	800e3c4 <_dtoa_r+0x80c>
 800e350:	9b01      	ldr	r3, [sp, #4]
 800e352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e356:	2b00      	cmp	r3, #0
 800e358:	d136      	bne.n	800e3c8 <_dtoa_r+0x810>
 800e35a:	9b01      	ldr	r3, [sp, #4]
 800e35c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e360:	0d1b      	lsrs	r3, r3, #20
 800e362:	051b      	lsls	r3, r3, #20
 800e364:	b12b      	cbz	r3, 800e372 <_dtoa_r+0x7ba>
 800e366:	9b05      	ldr	r3, [sp, #20]
 800e368:	3301      	adds	r3, #1
 800e36a:	9305      	str	r3, [sp, #20]
 800e36c:	f108 0801 	add.w	r8, r8, #1
 800e370:	2301      	movs	r3, #1
 800e372:	9307      	str	r3, [sp, #28]
 800e374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e376:	2b00      	cmp	r3, #0
 800e378:	d12a      	bne.n	800e3d0 <_dtoa_r+0x818>
 800e37a:	2001      	movs	r0, #1
 800e37c:	e030      	b.n	800e3e0 <_dtoa_r+0x828>
 800e37e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e380:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e384:	e795      	b.n	800e2b2 <_dtoa_r+0x6fa>
 800e386:	9b07      	ldr	r3, [sp, #28]
 800e388:	f109 37ff 	add.w	r7, r9, #4294967295
 800e38c:	42bb      	cmp	r3, r7
 800e38e:	bfbf      	itttt	lt
 800e390:	9b07      	ldrlt	r3, [sp, #28]
 800e392:	9707      	strlt	r7, [sp, #28]
 800e394:	1afa      	sublt	r2, r7, r3
 800e396:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e398:	bfbb      	ittet	lt
 800e39a:	189b      	addlt	r3, r3, r2
 800e39c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e39e:	1bdf      	subge	r7, r3, r7
 800e3a0:	2700      	movlt	r7, #0
 800e3a2:	f1b9 0f00 	cmp.w	r9, #0
 800e3a6:	bfb5      	itete	lt
 800e3a8:	9b05      	ldrlt	r3, [sp, #20]
 800e3aa:	9d05      	ldrge	r5, [sp, #20]
 800e3ac:	eba3 0509 	sublt.w	r5, r3, r9
 800e3b0:	464b      	movge	r3, r9
 800e3b2:	bfb8      	it	lt
 800e3b4:	2300      	movlt	r3, #0
 800e3b6:	e77e      	b.n	800e2b6 <_dtoa_r+0x6fe>
 800e3b8:	9f07      	ldr	r7, [sp, #28]
 800e3ba:	9d05      	ldr	r5, [sp, #20]
 800e3bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e3be:	e783      	b.n	800e2c8 <_dtoa_r+0x710>
 800e3c0:	9a07      	ldr	r2, [sp, #28]
 800e3c2:	e7ab      	b.n	800e31c <_dtoa_r+0x764>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	e7d4      	b.n	800e372 <_dtoa_r+0x7ba>
 800e3c8:	9b00      	ldr	r3, [sp, #0]
 800e3ca:	e7d2      	b.n	800e372 <_dtoa_r+0x7ba>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	9307      	str	r3, [sp, #28]
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e3d6:	6918      	ldr	r0, [r3, #16]
 800e3d8:	f000 fc1a 	bl	800ec10 <__hi0bits>
 800e3dc:	f1c0 0020 	rsb	r0, r0, #32
 800e3e0:	4440      	add	r0, r8
 800e3e2:	f010 001f 	ands.w	r0, r0, #31
 800e3e6:	d047      	beq.n	800e478 <_dtoa_r+0x8c0>
 800e3e8:	f1c0 0320 	rsb	r3, r0, #32
 800e3ec:	2b04      	cmp	r3, #4
 800e3ee:	dd3b      	ble.n	800e468 <_dtoa_r+0x8b0>
 800e3f0:	9b05      	ldr	r3, [sp, #20]
 800e3f2:	f1c0 001c 	rsb	r0, r0, #28
 800e3f6:	4403      	add	r3, r0
 800e3f8:	9305      	str	r3, [sp, #20]
 800e3fa:	4405      	add	r5, r0
 800e3fc:	4480      	add	r8, r0
 800e3fe:	9b05      	ldr	r3, [sp, #20]
 800e400:	2b00      	cmp	r3, #0
 800e402:	dd05      	ble.n	800e410 <_dtoa_r+0x858>
 800e404:	461a      	mov	r2, r3
 800e406:	9904      	ldr	r1, [sp, #16]
 800e408:	4620      	mov	r0, r4
 800e40a:	f000 fd3d 	bl	800ee88 <__lshift>
 800e40e:	9004      	str	r0, [sp, #16]
 800e410:	f1b8 0f00 	cmp.w	r8, #0
 800e414:	dd05      	ble.n	800e422 <_dtoa_r+0x86a>
 800e416:	4639      	mov	r1, r7
 800e418:	4642      	mov	r2, r8
 800e41a:	4620      	mov	r0, r4
 800e41c:	f000 fd34 	bl	800ee88 <__lshift>
 800e420:	4607      	mov	r7, r0
 800e422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e424:	b353      	cbz	r3, 800e47c <_dtoa_r+0x8c4>
 800e426:	4639      	mov	r1, r7
 800e428:	9804      	ldr	r0, [sp, #16]
 800e42a:	f000 fd81 	bl	800ef30 <__mcmp>
 800e42e:	2800      	cmp	r0, #0
 800e430:	da24      	bge.n	800e47c <_dtoa_r+0x8c4>
 800e432:	2300      	movs	r3, #0
 800e434:	220a      	movs	r2, #10
 800e436:	9904      	ldr	r1, [sp, #16]
 800e438:	4620      	mov	r0, r4
 800e43a:	f000 fbae 	bl	800eb9a <__multadd>
 800e43e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e440:	9004      	str	r0, [sp, #16]
 800e442:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 814d 	beq.w	800e6e6 <_dtoa_r+0xb2e>
 800e44c:	2300      	movs	r3, #0
 800e44e:	4631      	mov	r1, r6
 800e450:	220a      	movs	r2, #10
 800e452:	4620      	mov	r0, r4
 800e454:	f000 fba1 	bl	800eb9a <__multadd>
 800e458:	9b02      	ldr	r3, [sp, #8]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	4606      	mov	r6, r0
 800e45e:	dc4f      	bgt.n	800e500 <_dtoa_r+0x948>
 800e460:	9b06      	ldr	r3, [sp, #24]
 800e462:	2b02      	cmp	r3, #2
 800e464:	dd4c      	ble.n	800e500 <_dtoa_r+0x948>
 800e466:	e011      	b.n	800e48c <_dtoa_r+0x8d4>
 800e468:	d0c9      	beq.n	800e3fe <_dtoa_r+0x846>
 800e46a:	9a05      	ldr	r2, [sp, #20]
 800e46c:	331c      	adds	r3, #28
 800e46e:	441a      	add	r2, r3
 800e470:	9205      	str	r2, [sp, #20]
 800e472:	441d      	add	r5, r3
 800e474:	4498      	add	r8, r3
 800e476:	e7c2      	b.n	800e3fe <_dtoa_r+0x846>
 800e478:	4603      	mov	r3, r0
 800e47a:	e7f6      	b.n	800e46a <_dtoa_r+0x8b2>
 800e47c:	f1b9 0f00 	cmp.w	r9, #0
 800e480:	dc38      	bgt.n	800e4f4 <_dtoa_r+0x93c>
 800e482:	9b06      	ldr	r3, [sp, #24]
 800e484:	2b02      	cmp	r3, #2
 800e486:	dd35      	ble.n	800e4f4 <_dtoa_r+0x93c>
 800e488:	f8cd 9008 	str.w	r9, [sp, #8]
 800e48c:	9b02      	ldr	r3, [sp, #8]
 800e48e:	b963      	cbnz	r3, 800e4aa <_dtoa_r+0x8f2>
 800e490:	4639      	mov	r1, r7
 800e492:	2205      	movs	r2, #5
 800e494:	4620      	mov	r0, r4
 800e496:	f000 fb80 	bl	800eb9a <__multadd>
 800e49a:	4601      	mov	r1, r0
 800e49c:	4607      	mov	r7, r0
 800e49e:	9804      	ldr	r0, [sp, #16]
 800e4a0:	f000 fd46 	bl	800ef30 <__mcmp>
 800e4a4:	2800      	cmp	r0, #0
 800e4a6:	f73f adcc 	bgt.w	800e042 <_dtoa_r+0x48a>
 800e4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4ac:	465d      	mov	r5, fp
 800e4ae:	ea6f 0a03 	mvn.w	sl, r3
 800e4b2:	f04f 0900 	mov.w	r9, #0
 800e4b6:	4639      	mov	r1, r7
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f000 fb57 	bl	800eb6c <_Bfree>
 800e4be:	2e00      	cmp	r6, #0
 800e4c0:	f43f aeb7 	beq.w	800e232 <_dtoa_r+0x67a>
 800e4c4:	f1b9 0f00 	cmp.w	r9, #0
 800e4c8:	d005      	beq.n	800e4d6 <_dtoa_r+0x91e>
 800e4ca:	45b1      	cmp	r9, r6
 800e4cc:	d003      	beq.n	800e4d6 <_dtoa_r+0x91e>
 800e4ce:	4649      	mov	r1, r9
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f000 fb4b 	bl	800eb6c <_Bfree>
 800e4d6:	4631      	mov	r1, r6
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f000 fb47 	bl	800eb6c <_Bfree>
 800e4de:	e6a8      	b.n	800e232 <_dtoa_r+0x67a>
 800e4e0:	2700      	movs	r7, #0
 800e4e2:	463e      	mov	r6, r7
 800e4e4:	e7e1      	b.n	800e4aa <_dtoa_r+0x8f2>
 800e4e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e4ea:	463e      	mov	r6, r7
 800e4ec:	e5a9      	b.n	800e042 <_dtoa_r+0x48a>
 800e4ee:	bf00      	nop
 800e4f0:	40240000 	.word	0x40240000
 800e4f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f000 80fa 	beq.w	800e6f4 <_dtoa_r+0xb3c>
 800e500:	2d00      	cmp	r5, #0
 800e502:	dd05      	ble.n	800e510 <_dtoa_r+0x958>
 800e504:	4631      	mov	r1, r6
 800e506:	462a      	mov	r2, r5
 800e508:	4620      	mov	r0, r4
 800e50a:	f000 fcbd 	bl	800ee88 <__lshift>
 800e50e:	4606      	mov	r6, r0
 800e510:	9b07      	ldr	r3, [sp, #28]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d04c      	beq.n	800e5b0 <_dtoa_r+0x9f8>
 800e516:	6871      	ldr	r1, [r6, #4]
 800e518:	4620      	mov	r0, r4
 800e51a:	f000 faf3 	bl	800eb04 <_Balloc>
 800e51e:	6932      	ldr	r2, [r6, #16]
 800e520:	3202      	adds	r2, #2
 800e522:	4605      	mov	r5, r0
 800e524:	0092      	lsls	r2, r2, #2
 800e526:	f106 010c 	add.w	r1, r6, #12
 800e52a:	300c      	adds	r0, #12
 800e52c:	f7fe fba6 	bl	800cc7c <memcpy>
 800e530:	2201      	movs	r2, #1
 800e532:	4629      	mov	r1, r5
 800e534:	4620      	mov	r0, r4
 800e536:	f000 fca7 	bl	800ee88 <__lshift>
 800e53a:	9b00      	ldr	r3, [sp, #0]
 800e53c:	f8cd b014 	str.w	fp, [sp, #20]
 800e540:	f003 0301 	and.w	r3, r3, #1
 800e544:	46b1      	mov	r9, r6
 800e546:	9307      	str	r3, [sp, #28]
 800e548:	4606      	mov	r6, r0
 800e54a:	4639      	mov	r1, r7
 800e54c:	9804      	ldr	r0, [sp, #16]
 800e54e:	f7ff faa7 	bl	800daa0 <quorem>
 800e552:	4649      	mov	r1, r9
 800e554:	4605      	mov	r5, r0
 800e556:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e55a:	9804      	ldr	r0, [sp, #16]
 800e55c:	f000 fce8 	bl	800ef30 <__mcmp>
 800e560:	4632      	mov	r2, r6
 800e562:	9000      	str	r0, [sp, #0]
 800e564:	4639      	mov	r1, r7
 800e566:	4620      	mov	r0, r4
 800e568:	f000 fcfc 	bl	800ef64 <__mdiff>
 800e56c:	68c3      	ldr	r3, [r0, #12]
 800e56e:	4602      	mov	r2, r0
 800e570:	bb03      	cbnz	r3, 800e5b4 <_dtoa_r+0x9fc>
 800e572:	4601      	mov	r1, r0
 800e574:	9008      	str	r0, [sp, #32]
 800e576:	9804      	ldr	r0, [sp, #16]
 800e578:	f000 fcda 	bl	800ef30 <__mcmp>
 800e57c:	9a08      	ldr	r2, [sp, #32]
 800e57e:	4603      	mov	r3, r0
 800e580:	4611      	mov	r1, r2
 800e582:	4620      	mov	r0, r4
 800e584:	9308      	str	r3, [sp, #32]
 800e586:	f000 faf1 	bl	800eb6c <_Bfree>
 800e58a:	9b08      	ldr	r3, [sp, #32]
 800e58c:	b9a3      	cbnz	r3, 800e5b8 <_dtoa_r+0xa00>
 800e58e:	9a06      	ldr	r2, [sp, #24]
 800e590:	b992      	cbnz	r2, 800e5b8 <_dtoa_r+0xa00>
 800e592:	9a07      	ldr	r2, [sp, #28]
 800e594:	b982      	cbnz	r2, 800e5b8 <_dtoa_r+0xa00>
 800e596:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e59a:	d029      	beq.n	800e5f0 <_dtoa_r+0xa38>
 800e59c:	9b00      	ldr	r3, [sp, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	dd01      	ble.n	800e5a6 <_dtoa_r+0x9ee>
 800e5a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e5a6:	9b05      	ldr	r3, [sp, #20]
 800e5a8:	1c5d      	adds	r5, r3, #1
 800e5aa:	f883 8000 	strb.w	r8, [r3]
 800e5ae:	e782      	b.n	800e4b6 <_dtoa_r+0x8fe>
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	e7c2      	b.n	800e53a <_dtoa_r+0x982>
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	e7e3      	b.n	800e580 <_dtoa_r+0x9c8>
 800e5b8:	9a00      	ldr	r2, [sp, #0]
 800e5ba:	2a00      	cmp	r2, #0
 800e5bc:	db04      	blt.n	800e5c8 <_dtoa_r+0xa10>
 800e5be:	d125      	bne.n	800e60c <_dtoa_r+0xa54>
 800e5c0:	9a06      	ldr	r2, [sp, #24]
 800e5c2:	bb1a      	cbnz	r2, 800e60c <_dtoa_r+0xa54>
 800e5c4:	9a07      	ldr	r2, [sp, #28]
 800e5c6:	bb0a      	cbnz	r2, 800e60c <_dtoa_r+0xa54>
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	ddec      	ble.n	800e5a6 <_dtoa_r+0x9ee>
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	9904      	ldr	r1, [sp, #16]
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f000 fc59 	bl	800ee88 <__lshift>
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	9004      	str	r0, [sp, #16]
 800e5da:	f000 fca9 	bl	800ef30 <__mcmp>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	dc03      	bgt.n	800e5ea <_dtoa_r+0xa32>
 800e5e2:	d1e0      	bne.n	800e5a6 <_dtoa_r+0x9ee>
 800e5e4:	f018 0f01 	tst.w	r8, #1
 800e5e8:	d0dd      	beq.n	800e5a6 <_dtoa_r+0x9ee>
 800e5ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e5ee:	d1d8      	bne.n	800e5a2 <_dtoa_r+0x9ea>
 800e5f0:	9b05      	ldr	r3, [sp, #20]
 800e5f2:	9a05      	ldr	r2, [sp, #20]
 800e5f4:	1c5d      	adds	r5, r3, #1
 800e5f6:	2339      	movs	r3, #57	; 0x39
 800e5f8:	7013      	strb	r3, [r2, #0]
 800e5fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e5fe:	2b39      	cmp	r3, #57	; 0x39
 800e600:	f105 32ff 	add.w	r2, r5, #4294967295
 800e604:	d04f      	beq.n	800e6a6 <_dtoa_r+0xaee>
 800e606:	3301      	adds	r3, #1
 800e608:	7013      	strb	r3, [r2, #0]
 800e60a:	e754      	b.n	800e4b6 <_dtoa_r+0x8fe>
 800e60c:	9a05      	ldr	r2, [sp, #20]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f102 0501 	add.w	r5, r2, #1
 800e614:	dd06      	ble.n	800e624 <_dtoa_r+0xa6c>
 800e616:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e61a:	d0e9      	beq.n	800e5f0 <_dtoa_r+0xa38>
 800e61c:	f108 0801 	add.w	r8, r8, #1
 800e620:	9b05      	ldr	r3, [sp, #20]
 800e622:	e7c2      	b.n	800e5aa <_dtoa_r+0x9f2>
 800e624:	9a02      	ldr	r2, [sp, #8]
 800e626:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e62a:	eba5 030b 	sub.w	r3, r5, fp
 800e62e:	4293      	cmp	r3, r2
 800e630:	d021      	beq.n	800e676 <_dtoa_r+0xabe>
 800e632:	2300      	movs	r3, #0
 800e634:	220a      	movs	r2, #10
 800e636:	9904      	ldr	r1, [sp, #16]
 800e638:	4620      	mov	r0, r4
 800e63a:	f000 faae 	bl	800eb9a <__multadd>
 800e63e:	45b1      	cmp	r9, r6
 800e640:	9004      	str	r0, [sp, #16]
 800e642:	f04f 0300 	mov.w	r3, #0
 800e646:	f04f 020a 	mov.w	r2, #10
 800e64a:	4649      	mov	r1, r9
 800e64c:	4620      	mov	r0, r4
 800e64e:	d105      	bne.n	800e65c <_dtoa_r+0xaa4>
 800e650:	f000 faa3 	bl	800eb9a <__multadd>
 800e654:	4681      	mov	r9, r0
 800e656:	4606      	mov	r6, r0
 800e658:	9505      	str	r5, [sp, #20]
 800e65a:	e776      	b.n	800e54a <_dtoa_r+0x992>
 800e65c:	f000 fa9d 	bl	800eb9a <__multadd>
 800e660:	4631      	mov	r1, r6
 800e662:	4681      	mov	r9, r0
 800e664:	2300      	movs	r3, #0
 800e666:	220a      	movs	r2, #10
 800e668:	4620      	mov	r0, r4
 800e66a:	f000 fa96 	bl	800eb9a <__multadd>
 800e66e:	4606      	mov	r6, r0
 800e670:	e7f2      	b.n	800e658 <_dtoa_r+0xaa0>
 800e672:	f04f 0900 	mov.w	r9, #0
 800e676:	2201      	movs	r2, #1
 800e678:	9904      	ldr	r1, [sp, #16]
 800e67a:	4620      	mov	r0, r4
 800e67c:	f000 fc04 	bl	800ee88 <__lshift>
 800e680:	4639      	mov	r1, r7
 800e682:	9004      	str	r0, [sp, #16]
 800e684:	f000 fc54 	bl	800ef30 <__mcmp>
 800e688:	2800      	cmp	r0, #0
 800e68a:	dcb6      	bgt.n	800e5fa <_dtoa_r+0xa42>
 800e68c:	d102      	bne.n	800e694 <_dtoa_r+0xadc>
 800e68e:	f018 0f01 	tst.w	r8, #1
 800e692:	d1b2      	bne.n	800e5fa <_dtoa_r+0xa42>
 800e694:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e698:	2b30      	cmp	r3, #48	; 0x30
 800e69a:	f105 32ff 	add.w	r2, r5, #4294967295
 800e69e:	f47f af0a 	bne.w	800e4b6 <_dtoa_r+0x8fe>
 800e6a2:	4615      	mov	r5, r2
 800e6a4:	e7f6      	b.n	800e694 <_dtoa_r+0xadc>
 800e6a6:	4593      	cmp	fp, r2
 800e6a8:	d105      	bne.n	800e6b6 <_dtoa_r+0xafe>
 800e6aa:	2331      	movs	r3, #49	; 0x31
 800e6ac:	f10a 0a01 	add.w	sl, sl, #1
 800e6b0:	f88b 3000 	strb.w	r3, [fp]
 800e6b4:	e6ff      	b.n	800e4b6 <_dtoa_r+0x8fe>
 800e6b6:	4615      	mov	r5, r2
 800e6b8:	e79f      	b.n	800e5fa <_dtoa_r+0xa42>
 800e6ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e720 <_dtoa_r+0xb68>
 800e6be:	e007      	b.n	800e6d0 <_dtoa_r+0xb18>
 800e6c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e724 <_dtoa_r+0xb6c>
 800e6c6:	b11b      	cbz	r3, 800e6d0 <_dtoa_r+0xb18>
 800e6c8:	f10b 0308 	add.w	r3, fp, #8
 800e6cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e6ce:	6013      	str	r3, [r2, #0]
 800e6d0:	4658      	mov	r0, fp
 800e6d2:	b017      	add	sp, #92	; 0x5c
 800e6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d8:	9b06      	ldr	r3, [sp, #24]
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	f77f ae35 	ble.w	800e34a <_dtoa_r+0x792>
 800e6e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6e2:	9307      	str	r3, [sp, #28]
 800e6e4:	e649      	b.n	800e37a <_dtoa_r+0x7c2>
 800e6e6:	9b02      	ldr	r3, [sp, #8]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	dc03      	bgt.n	800e6f4 <_dtoa_r+0xb3c>
 800e6ec:	9b06      	ldr	r3, [sp, #24]
 800e6ee:	2b02      	cmp	r3, #2
 800e6f0:	f73f aecc 	bgt.w	800e48c <_dtoa_r+0x8d4>
 800e6f4:	465d      	mov	r5, fp
 800e6f6:	4639      	mov	r1, r7
 800e6f8:	9804      	ldr	r0, [sp, #16]
 800e6fa:	f7ff f9d1 	bl	800daa0 <quorem>
 800e6fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e702:	f805 8b01 	strb.w	r8, [r5], #1
 800e706:	9a02      	ldr	r2, [sp, #8]
 800e708:	eba5 030b 	sub.w	r3, r5, fp
 800e70c:	429a      	cmp	r2, r3
 800e70e:	ddb0      	ble.n	800e672 <_dtoa_r+0xaba>
 800e710:	2300      	movs	r3, #0
 800e712:	220a      	movs	r2, #10
 800e714:	9904      	ldr	r1, [sp, #16]
 800e716:	4620      	mov	r0, r4
 800e718:	f000 fa3f 	bl	800eb9a <__multadd>
 800e71c:	9004      	str	r0, [sp, #16]
 800e71e:	e7ea      	b.n	800e6f6 <_dtoa_r+0xb3e>
 800e720:	0800f5f4 	.word	0x0800f5f4
 800e724:	0800f618 	.word	0x0800f618

0800e728 <__sflush_r>:
 800e728:	898a      	ldrh	r2, [r1, #12]
 800e72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e72e:	4605      	mov	r5, r0
 800e730:	0710      	lsls	r0, r2, #28
 800e732:	460c      	mov	r4, r1
 800e734:	d458      	bmi.n	800e7e8 <__sflush_r+0xc0>
 800e736:	684b      	ldr	r3, [r1, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	dc05      	bgt.n	800e748 <__sflush_r+0x20>
 800e73c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e73e:	2b00      	cmp	r3, #0
 800e740:	dc02      	bgt.n	800e748 <__sflush_r+0x20>
 800e742:	2000      	movs	r0, #0
 800e744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e74a:	2e00      	cmp	r6, #0
 800e74c:	d0f9      	beq.n	800e742 <__sflush_r+0x1a>
 800e74e:	2300      	movs	r3, #0
 800e750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e754:	682f      	ldr	r7, [r5, #0]
 800e756:	6a21      	ldr	r1, [r4, #32]
 800e758:	602b      	str	r3, [r5, #0]
 800e75a:	d032      	beq.n	800e7c2 <__sflush_r+0x9a>
 800e75c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e75e:	89a3      	ldrh	r3, [r4, #12]
 800e760:	075a      	lsls	r2, r3, #29
 800e762:	d505      	bpl.n	800e770 <__sflush_r+0x48>
 800e764:	6863      	ldr	r3, [r4, #4]
 800e766:	1ac0      	subs	r0, r0, r3
 800e768:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e76a:	b10b      	cbz	r3, 800e770 <__sflush_r+0x48>
 800e76c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e76e:	1ac0      	subs	r0, r0, r3
 800e770:	2300      	movs	r3, #0
 800e772:	4602      	mov	r2, r0
 800e774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e776:	6a21      	ldr	r1, [r4, #32]
 800e778:	4628      	mov	r0, r5
 800e77a:	47b0      	blx	r6
 800e77c:	1c43      	adds	r3, r0, #1
 800e77e:	89a3      	ldrh	r3, [r4, #12]
 800e780:	d106      	bne.n	800e790 <__sflush_r+0x68>
 800e782:	6829      	ldr	r1, [r5, #0]
 800e784:	291d      	cmp	r1, #29
 800e786:	d848      	bhi.n	800e81a <__sflush_r+0xf2>
 800e788:	4a29      	ldr	r2, [pc, #164]	; (800e830 <__sflush_r+0x108>)
 800e78a:	40ca      	lsrs	r2, r1
 800e78c:	07d6      	lsls	r6, r2, #31
 800e78e:	d544      	bpl.n	800e81a <__sflush_r+0xf2>
 800e790:	2200      	movs	r2, #0
 800e792:	6062      	str	r2, [r4, #4]
 800e794:	04d9      	lsls	r1, r3, #19
 800e796:	6922      	ldr	r2, [r4, #16]
 800e798:	6022      	str	r2, [r4, #0]
 800e79a:	d504      	bpl.n	800e7a6 <__sflush_r+0x7e>
 800e79c:	1c42      	adds	r2, r0, #1
 800e79e:	d101      	bne.n	800e7a4 <__sflush_r+0x7c>
 800e7a0:	682b      	ldr	r3, [r5, #0]
 800e7a2:	b903      	cbnz	r3, 800e7a6 <__sflush_r+0x7e>
 800e7a4:	6560      	str	r0, [r4, #84]	; 0x54
 800e7a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7a8:	602f      	str	r7, [r5, #0]
 800e7aa:	2900      	cmp	r1, #0
 800e7ac:	d0c9      	beq.n	800e742 <__sflush_r+0x1a>
 800e7ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7b2:	4299      	cmp	r1, r3
 800e7b4:	d002      	beq.n	800e7bc <__sflush_r+0x94>
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	f7fe fa74 	bl	800cca4 <_free_r>
 800e7bc:	2000      	movs	r0, #0
 800e7be:	6360      	str	r0, [r4, #52]	; 0x34
 800e7c0:	e7c0      	b.n	800e744 <__sflush_r+0x1c>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	47b0      	blx	r6
 800e7c8:	1c41      	adds	r1, r0, #1
 800e7ca:	d1c8      	bne.n	800e75e <__sflush_r+0x36>
 800e7cc:	682b      	ldr	r3, [r5, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d0c5      	beq.n	800e75e <__sflush_r+0x36>
 800e7d2:	2b1d      	cmp	r3, #29
 800e7d4:	d001      	beq.n	800e7da <__sflush_r+0xb2>
 800e7d6:	2b16      	cmp	r3, #22
 800e7d8:	d101      	bne.n	800e7de <__sflush_r+0xb6>
 800e7da:	602f      	str	r7, [r5, #0]
 800e7dc:	e7b1      	b.n	800e742 <__sflush_r+0x1a>
 800e7de:	89a3      	ldrh	r3, [r4, #12]
 800e7e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7e4:	81a3      	strh	r3, [r4, #12]
 800e7e6:	e7ad      	b.n	800e744 <__sflush_r+0x1c>
 800e7e8:	690f      	ldr	r7, [r1, #16]
 800e7ea:	2f00      	cmp	r7, #0
 800e7ec:	d0a9      	beq.n	800e742 <__sflush_r+0x1a>
 800e7ee:	0793      	lsls	r3, r2, #30
 800e7f0:	680e      	ldr	r6, [r1, #0]
 800e7f2:	bf08      	it	eq
 800e7f4:	694b      	ldreq	r3, [r1, #20]
 800e7f6:	600f      	str	r7, [r1, #0]
 800e7f8:	bf18      	it	ne
 800e7fa:	2300      	movne	r3, #0
 800e7fc:	eba6 0807 	sub.w	r8, r6, r7
 800e800:	608b      	str	r3, [r1, #8]
 800e802:	f1b8 0f00 	cmp.w	r8, #0
 800e806:	dd9c      	ble.n	800e742 <__sflush_r+0x1a>
 800e808:	4643      	mov	r3, r8
 800e80a:	463a      	mov	r2, r7
 800e80c:	6a21      	ldr	r1, [r4, #32]
 800e80e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e810:	4628      	mov	r0, r5
 800e812:	47b0      	blx	r6
 800e814:	2800      	cmp	r0, #0
 800e816:	dc06      	bgt.n	800e826 <__sflush_r+0xfe>
 800e818:	89a3      	ldrh	r3, [r4, #12]
 800e81a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e81e:	81a3      	strh	r3, [r4, #12]
 800e820:	f04f 30ff 	mov.w	r0, #4294967295
 800e824:	e78e      	b.n	800e744 <__sflush_r+0x1c>
 800e826:	4407      	add	r7, r0
 800e828:	eba8 0800 	sub.w	r8, r8, r0
 800e82c:	e7e9      	b.n	800e802 <__sflush_r+0xda>
 800e82e:	bf00      	nop
 800e830:	20400001 	.word	0x20400001

0800e834 <_fflush_r>:
 800e834:	b538      	push	{r3, r4, r5, lr}
 800e836:	690b      	ldr	r3, [r1, #16]
 800e838:	4605      	mov	r5, r0
 800e83a:	460c      	mov	r4, r1
 800e83c:	b1db      	cbz	r3, 800e876 <_fflush_r+0x42>
 800e83e:	b118      	cbz	r0, 800e848 <_fflush_r+0x14>
 800e840:	6983      	ldr	r3, [r0, #24]
 800e842:	b90b      	cbnz	r3, 800e848 <_fflush_r+0x14>
 800e844:	f000 f860 	bl	800e908 <__sinit>
 800e848:	4b0c      	ldr	r3, [pc, #48]	; (800e87c <_fflush_r+0x48>)
 800e84a:	429c      	cmp	r4, r3
 800e84c:	d109      	bne.n	800e862 <_fflush_r+0x2e>
 800e84e:	686c      	ldr	r4, [r5, #4]
 800e850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e854:	b17b      	cbz	r3, 800e876 <_fflush_r+0x42>
 800e856:	4621      	mov	r1, r4
 800e858:	4628      	mov	r0, r5
 800e85a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e85e:	f7ff bf63 	b.w	800e728 <__sflush_r>
 800e862:	4b07      	ldr	r3, [pc, #28]	; (800e880 <_fflush_r+0x4c>)
 800e864:	429c      	cmp	r4, r3
 800e866:	d101      	bne.n	800e86c <_fflush_r+0x38>
 800e868:	68ac      	ldr	r4, [r5, #8]
 800e86a:	e7f1      	b.n	800e850 <_fflush_r+0x1c>
 800e86c:	4b05      	ldr	r3, [pc, #20]	; (800e884 <_fflush_r+0x50>)
 800e86e:	429c      	cmp	r4, r3
 800e870:	bf08      	it	eq
 800e872:	68ec      	ldreq	r4, [r5, #12]
 800e874:	e7ec      	b.n	800e850 <_fflush_r+0x1c>
 800e876:	2000      	movs	r0, #0
 800e878:	bd38      	pop	{r3, r4, r5, pc}
 800e87a:	bf00      	nop
 800e87c:	0800f648 	.word	0x0800f648
 800e880:	0800f668 	.word	0x0800f668
 800e884:	0800f628 	.word	0x0800f628

0800e888 <std>:
 800e888:	2300      	movs	r3, #0
 800e88a:	b510      	push	{r4, lr}
 800e88c:	4604      	mov	r4, r0
 800e88e:	e9c0 3300 	strd	r3, r3, [r0]
 800e892:	6083      	str	r3, [r0, #8]
 800e894:	8181      	strh	r1, [r0, #12]
 800e896:	6643      	str	r3, [r0, #100]	; 0x64
 800e898:	81c2      	strh	r2, [r0, #14]
 800e89a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e89e:	6183      	str	r3, [r0, #24]
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	2208      	movs	r2, #8
 800e8a4:	305c      	adds	r0, #92	; 0x5c
 800e8a6:	f7fe f9f4 	bl	800cc92 <memset>
 800e8aa:	4b05      	ldr	r3, [pc, #20]	; (800e8c0 <std+0x38>)
 800e8ac:	6263      	str	r3, [r4, #36]	; 0x24
 800e8ae:	4b05      	ldr	r3, [pc, #20]	; (800e8c4 <std+0x3c>)
 800e8b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8b2:	4b05      	ldr	r3, [pc, #20]	; (800e8c8 <std+0x40>)
 800e8b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8b6:	4b05      	ldr	r3, [pc, #20]	; (800e8cc <std+0x44>)
 800e8b8:	6224      	str	r4, [r4, #32]
 800e8ba:	6323      	str	r3, [r4, #48]	; 0x30
 800e8bc:	bd10      	pop	{r4, pc}
 800e8be:	bf00      	nop
 800e8c0:	0800f359 	.word	0x0800f359
 800e8c4:	0800f37b 	.word	0x0800f37b
 800e8c8:	0800f3b3 	.word	0x0800f3b3
 800e8cc:	0800f3d7 	.word	0x0800f3d7

0800e8d0 <_cleanup_r>:
 800e8d0:	4901      	ldr	r1, [pc, #4]	; (800e8d8 <_cleanup_r+0x8>)
 800e8d2:	f000 b885 	b.w	800e9e0 <_fwalk_reent>
 800e8d6:	bf00      	nop
 800e8d8:	0800e835 	.word	0x0800e835

0800e8dc <__sfmoreglue>:
 800e8dc:	b570      	push	{r4, r5, r6, lr}
 800e8de:	1e4a      	subs	r2, r1, #1
 800e8e0:	2568      	movs	r5, #104	; 0x68
 800e8e2:	4355      	muls	r5, r2
 800e8e4:	460e      	mov	r6, r1
 800e8e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e8ea:	f7fe fa29 	bl	800cd40 <_malloc_r>
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	b140      	cbz	r0, 800e904 <__sfmoreglue+0x28>
 800e8f2:	2100      	movs	r1, #0
 800e8f4:	e9c0 1600 	strd	r1, r6, [r0]
 800e8f8:	300c      	adds	r0, #12
 800e8fa:	60a0      	str	r0, [r4, #8]
 800e8fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e900:	f7fe f9c7 	bl	800cc92 <memset>
 800e904:	4620      	mov	r0, r4
 800e906:	bd70      	pop	{r4, r5, r6, pc}

0800e908 <__sinit>:
 800e908:	6983      	ldr	r3, [r0, #24]
 800e90a:	b510      	push	{r4, lr}
 800e90c:	4604      	mov	r4, r0
 800e90e:	bb33      	cbnz	r3, 800e95e <__sinit+0x56>
 800e910:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e914:	6503      	str	r3, [r0, #80]	; 0x50
 800e916:	4b12      	ldr	r3, [pc, #72]	; (800e960 <__sinit+0x58>)
 800e918:	4a12      	ldr	r2, [pc, #72]	; (800e964 <__sinit+0x5c>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	6282      	str	r2, [r0, #40]	; 0x28
 800e91e:	4298      	cmp	r0, r3
 800e920:	bf04      	itt	eq
 800e922:	2301      	moveq	r3, #1
 800e924:	6183      	streq	r3, [r0, #24]
 800e926:	f000 f81f 	bl	800e968 <__sfp>
 800e92a:	6060      	str	r0, [r4, #4]
 800e92c:	4620      	mov	r0, r4
 800e92e:	f000 f81b 	bl	800e968 <__sfp>
 800e932:	60a0      	str	r0, [r4, #8]
 800e934:	4620      	mov	r0, r4
 800e936:	f000 f817 	bl	800e968 <__sfp>
 800e93a:	2200      	movs	r2, #0
 800e93c:	60e0      	str	r0, [r4, #12]
 800e93e:	2104      	movs	r1, #4
 800e940:	6860      	ldr	r0, [r4, #4]
 800e942:	f7ff ffa1 	bl	800e888 <std>
 800e946:	2201      	movs	r2, #1
 800e948:	2109      	movs	r1, #9
 800e94a:	68a0      	ldr	r0, [r4, #8]
 800e94c:	f7ff ff9c 	bl	800e888 <std>
 800e950:	2202      	movs	r2, #2
 800e952:	2112      	movs	r1, #18
 800e954:	68e0      	ldr	r0, [r4, #12]
 800e956:	f7ff ff97 	bl	800e888 <std>
 800e95a:	2301      	movs	r3, #1
 800e95c:	61a3      	str	r3, [r4, #24]
 800e95e:	bd10      	pop	{r4, pc}
 800e960:	0800f5e0 	.word	0x0800f5e0
 800e964:	0800e8d1 	.word	0x0800e8d1

0800e968 <__sfp>:
 800e968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e96a:	4b1b      	ldr	r3, [pc, #108]	; (800e9d8 <__sfp+0x70>)
 800e96c:	681e      	ldr	r6, [r3, #0]
 800e96e:	69b3      	ldr	r3, [r6, #24]
 800e970:	4607      	mov	r7, r0
 800e972:	b913      	cbnz	r3, 800e97a <__sfp+0x12>
 800e974:	4630      	mov	r0, r6
 800e976:	f7ff ffc7 	bl	800e908 <__sinit>
 800e97a:	3648      	adds	r6, #72	; 0x48
 800e97c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e980:	3b01      	subs	r3, #1
 800e982:	d503      	bpl.n	800e98c <__sfp+0x24>
 800e984:	6833      	ldr	r3, [r6, #0]
 800e986:	b133      	cbz	r3, 800e996 <__sfp+0x2e>
 800e988:	6836      	ldr	r6, [r6, #0]
 800e98a:	e7f7      	b.n	800e97c <__sfp+0x14>
 800e98c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e990:	b16d      	cbz	r5, 800e9ae <__sfp+0x46>
 800e992:	3468      	adds	r4, #104	; 0x68
 800e994:	e7f4      	b.n	800e980 <__sfp+0x18>
 800e996:	2104      	movs	r1, #4
 800e998:	4638      	mov	r0, r7
 800e99a:	f7ff ff9f 	bl	800e8dc <__sfmoreglue>
 800e99e:	6030      	str	r0, [r6, #0]
 800e9a0:	2800      	cmp	r0, #0
 800e9a2:	d1f1      	bne.n	800e988 <__sfp+0x20>
 800e9a4:	230c      	movs	r3, #12
 800e9a6:	603b      	str	r3, [r7, #0]
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ae:	4b0b      	ldr	r3, [pc, #44]	; (800e9dc <__sfp+0x74>)
 800e9b0:	6665      	str	r5, [r4, #100]	; 0x64
 800e9b2:	e9c4 5500 	strd	r5, r5, [r4]
 800e9b6:	60a5      	str	r5, [r4, #8]
 800e9b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e9bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e9c0:	2208      	movs	r2, #8
 800e9c2:	4629      	mov	r1, r5
 800e9c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e9c8:	f7fe f963 	bl	800cc92 <memset>
 800e9cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e9d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e9d4:	e7e9      	b.n	800e9aa <__sfp+0x42>
 800e9d6:	bf00      	nop
 800e9d8:	0800f5e0 	.word	0x0800f5e0
 800e9dc:	ffff0001 	.word	0xffff0001

0800e9e0 <_fwalk_reent>:
 800e9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9e4:	4680      	mov	r8, r0
 800e9e6:	4689      	mov	r9, r1
 800e9e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e9ec:	2600      	movs	r6, #0
 800e9ee:	b914      	cbnz	r4, 800e9f6 <_fwalk_reent+0x16>
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e9fa:	3f01      	subs	r7, #1
 800e9fc:	d501      	bpl.n	800ea02 <_fwalk_reent+0x22>
 800e9fe:	6824      	ldr	r4, [r4, #0]
 800ea00:	e7f5      	b.n	800e9ee <_fwalk_reent+0xe>
 800ea02:	89ab      	ldrh	r3, [r5, #12]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d907      	bls.n	800ea18 <_fwalk_reent+0x38>
 800ea08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	d003      	beq.n	800ea18 <_fwalk_reent+0x38>
 800ea10:	4629      	mov	r1, r5
 800ea12:	4640      	mov	r0, r8
 800ea14:	47c8      	blx	r9
 800ea16:	4306      	orrs	r6, r0
 800ea18:	3568      	adds	r5, #104	; 0x68
 800ea1a:	e7ee      	b.n	800e9fa <_fwalk_reent+0x1a>

0800ea1c <_localeconv_r>:
 800ea1c:	4b04      	ldr	r3, [pc, #16]	; (800ea30 <_localeconv_r+0x14>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	6a18      	ldr	r0, [r3, #32]
 800ea22:	4b04      	ldr	r3, [pc, #16]	; (800ea34 <_localeconv_r+0x18>)
 800ea24:	2800      	cmp	r0, #0
 800ea26:	bf08      	it	eq
 800ea28:	4618      	moveq	r0, r3
 800ea2a:	30f0      	adds	r0, #240	; 0xf0
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	20000114 	.word	0x20000114
 800ea34:	20000178 	.word	0x20000178

0800ea38 <__swhatbuf_r>:
 800ea38:	b570      	push	{r4, r5, r6, lr}
 800ea3a:	460e      	mov	r6, r1
 800ea3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea40:	2900      	cmp	r1, #0
 800ea42:	b096      	sub	sp, #88	; 0x58
 800ea44:	4614      	mov	r4, r2
 800ea46:	461d      	mov	r5, r3
 800ea48:	da07      	bge.n	800ea5a <__swhatbuf_r+0x22>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	602b      	str	r3, [r5, #0]
 800ea4e:	89b3      	ldrh	r3, [r6, #12]
 800ea50:	061a      	lsls	r2, r3, #24
 800ea52:	d410      	bmi.n	800ea76 <__swhatbuf_r+0x3e>
 800ea54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea58:	e00e      	b.n	800ea78 <__swhatbuf_r+0x40>
 800ea5a:	466a      	mov	r2, sp
 800ea5c:	f000 fce2 	bl	800f424 <_fstat_r>
 800ea60:	2800      	cmp	r0, #0
 800ea62:	dbf2      	blt.n	800ea4a <__swhatbuf_r+0x12>
 800ea64:	9a01      	ldr	r2, [sp, #4]
 800ea66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ea6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ea6e:	425a      	negs	r2, r3
 800ea70:	415a      	adcs	r2, r3
 800ea72:	602a      	str	r2, [r5, #0]
 800ea74:	e7ee      	b.n	800ea54 <__swhatbuf_r+0x1c>
 800ea76:	2340      	movs	r3, #64	; 0x40
 800ea78:	2000      	movs	r0, #0
 800ea7a:	6023      	str	r3, [r4, #0]
 800ea7c:	b016      	add	sp, #88	; 0x58
 800ea7e:	bd70      	pop	{r4, r5, r6, pc}

0800ea80 <__smakebuf_r>:
 800ea80:	898b      	ldrh	r3, [r1, #12]
 800ea82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea84:	079d      	lsls	r5, r3, #30
 800ea86:	4606      	mov	r6, r0
 800ea88:	460c      	mov	r4, r1
 800ea8a:	d507      	bpl.n	800ea9c <__smakebuf_r+0x1c>
 800ea8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea90:	6023      	str	r3, [r4, #0]
 800ea92:	6123      	str	r3, [r4, #16]
 800ea94:	2301      	movs	r3, #1
 800ea96:	6163      	str	r3, [r4, #20]
 800ea98:	b002      	add	sp, #8
 800ea9a:	bd70      	pop	{r4, r5, r6, pc}
 800ea9c:	ab01      	add	r3, sp, #4
 800ea9e:	466a      	mov	r2, sp
 800eaa0:	f7ff ffca 	bl	800ea38 <__swhatbuf_r>
 800eaa4:	9900      	ldr	r1, [sp, #0]
 800eaa6:	4605      	mov	r5, r0
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	f7fe f949 	bl	800cd40 <_malloc_r>
 800eaae:	b948      	cbnz	r0, 800eac4 <__smakebuf_r+0x44>
 800eab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eab4:	059a      	lsls	r2, r3, #22
 800eab6:	d4ef      	bmi.n	800ea98 <__smakebuf_r+0x18>
 800eab8:	f023 0303 	bic.w	r3, r3, #3
 800eabc:	f043 0302 	orr.w	r3, r3, #2
 800eac0:	81a3      	strh	r3, [r4, #12]
 800eac2:	e7e3      	b.n	800ea8c <__smakebuf_r+0xc>
 800eac4:	4b0d      	ldr	r3, [pc, #52]	; (800eafc <__smakebuf_r+0x7c>)
 800eac6:	62b3      	str	r3, [r6, #40]	; 0x28
 800eac8:	89a3      	ldrh	r3, [r4, #12]
 800eaca:	6020      	str	r0, [r4, #0]
 800eacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ead0:	81a3      	strh	r3, [r4, #12]
 800ead2:	9b00      	ldr	r3, [sp, #0]
 800ead4:	6163      	str	r3, [r4, #20]
 800ead6:	9b01      	ldr	r3, [sp, #4]
 800ead8:	6120      	str	r0, [r4, #16]
 800eada:	b15b      	cbz	r3, 800eaf4 <__smakebuf_r+0x74>
 800eadc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eae0:	4630      	mov	r0, r6
 800eae2:	f000 fcb1 	bl	800f448 <_isatty_r>
 800eae6:	b128      	cbz	r0, 800eaf4 <__smakebuf_r+0x74>
 800eae8:	89a3      	ldrh	r3, [r4, #12]
 800eaea:	f023 0303 	bic.w	r3, r3, #3
 800eaee:	f043 0301 	orr.w	r3, r3, #1
 800eaf2:	81a3      	strh	r3, [r4, #12]
 800eaf4:	89a3      	ldrh	r3, [r4, #12]
 800eaf6:	431d      	orrs	r5, r3
 800eaf8:	81a5      	strh	r5, [r4, #12]
 800eafa:	e7cd      	b.n	800ea98 <__smakebuf_r+0x18>
 800eafc:	0800e8d1 	.word	0x0800e8d1

0800eb00 <__malloc_lock>:
 800eb00:	4770      	bx	lr

0800eb02 <__malloc_unlock>:
 800eb02:	4770      	bx	lr

0800eb04 <_Balloc>:
 800eb04:	b570      	push	{r4, r5, r6, lr}
 800eb06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eb08:	4604      	mov	r4, r0
 800eb0a:	460e      	mov	r6, r1
 800eb0c:	b93d      	cbnz	r5, 800eb1e <_Balloc+0x1a>
 800eb0e:	2010      	movs	r0, #16
 800eb10:	f7fe f8ac 	bl	800cc6c <malloc>
 800eb14:	6260      	str	r0, [r4, #36]	; 0x24
 800eb16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eb1a:	6005      	str	r5, [r0, #0]
 800eb1c:	60c5      	str	r5, [r0, #12]
 800eb1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800eb20:	68eb      	ldr	r3, [r5, #12]
 800eb22:	b183      	cbz	r3, 800eb46 <_Balloc+0x42>
 800eb24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800eb2c:	b9b8      	cbnz	r0, 800eb5e <_Balloc+0x5a>
 800eb2e:	2101      	movs	r1, #1
 800eb30:	fa01 f506 	lsl.w	r5, r1, r6
 800eb34:	1d6a      	adds	r2, r5, #5
 800eb36:	0092      	lsls	r2, r2, #2
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f000 fabf 	bl	800f0bc <_calloc_r>
 800eb3e:	b160      	cbz	r0, 800eb5a <_Balloc+0x56>
 800eb40:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800eb44:	e00e      	b.n	800eb64 <_Balloc+0x60>
 800eb46:	2221      	movs	r2, #33	; 0x21
 800eb48:	2104      	movs	r1, #4
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	f000 fab6 	bl	800f0bc <_calloc_r>
 800eb50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb52:	60e8      	str	r0, [r5, #12]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1e4      	bne.n	800eb24 <_Balloc+0x20>
 800eb5a:	2000      	movs	r0, #0
 800eb5c:	bd70      	pop	{r4, r5, r6, pc}
 800eb5e:	6802      	ldr	r2, [r0, #0]
 800eb60:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800eb64:	2300      	movs	r3, #0
 800eb66:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb6a:	e7f7      	b.n	800eb5c <_Balloc+0x58>

0800eb6c <_Bfree>:
 800eb6c:	b570      	push	{r4, r5, r6, lr}
 800eb6e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800eb70:	4606      	mov	r6, r0
 800eb72:	460d      	mov	r5, r1
 800eb74:	b93c      	cbnz	r4, 800eb86 <_Bfree+0x1a>
 800eb76:	2010      	movs	r0, #16
 800eb78:	f7fe f878 	bl	800cc6c <malloc>
 800eb7c:	6270      	str	r0, [r6, #36]	; 0x24
 800eb7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb82:	6004      	str	r4, [r0, #0]
 800eb84:	60c4      	str	r4, [r0, #12]
 800eb86:	b13d      	cbz	r5, 800eb98 <_Bfree+0x2c>
 800eb88:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800eb8a:	686a      	ldr	r2, [r5, #4]
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb92:	6029      	str	r1, [r5, #0]
 800eb94:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800eb98:	bd70      	pop	{r4, r5, r6, pc}

0800eb9a <__multadd>:
 800eb9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb9e:	690d      	ldr	r5, [r1, #16]
 800eba0:	461f      	mov	r7, r3
 800eba2:	4606      	mov	r6, r0
 800eba4:	460c      	mov	r4, r1
 800eba6:	f101 0c14 	add.w	ip, r1, #20
 800ebaa:	2300      	movs	r3, #0
 800ebac:	f8dc 0000 	ldr.w	r0, [ip]
 800ebb0:	b281      	uxth	r1, r0
 800ebb2:	fb02 7101 	mla	r1, r2, r1, r7
 800ebb6:	0c0f      	lsrs	r7, r1, #16
 800ebb8:	0c00      	lsrs	r0, r0, #16
 800ebba:	fb02 7000 	mla	r0, r2, r0, r7
 800ebbe:	b289      	uxth	r1, r1
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ebc6:	429d      	cmp	r5, r3
 800ebc8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ebcc:	f84c 1b04 	str.w	r1, [ip], #4
 800ebd0:	dcec      	bgt.n	800ebac <__multadd+0x12>
 800ebd2:	b1d7      	cbz	r7, 800ec0a <__multadd+0x70>
 800ebd4:	68a3      	ldr	r3, [r4, #8]
 800ebd6:	42ab      	cmp	r3, r5
 800ebd8:	dc12      	bgt.n	800ec00 <__multadd+0x66>
 800ebda:	6861      	ldr	r1, [r4, #4]
 800ebdc:	4630      	mov	r0, r6
 800ebde:	3101      	adds	r1, #1
 800ebe0:	f7ff ff90 	bl	800eb04 <_Balloc>
 800ebe4:	6922      	ldr	r2, [r4, #16]
 800ebe6:	3202      	adds	r2, #2
 800ebe8:	f104 010c 	add.w	r1, r4, #12
 800ebec:	4680      	mov	r8, r0
 800ebee:	0092      	lsls	r2, r2, #2
 800ebf0:	300c      	adds	r0, #12
 800ebf2:	f7fe f843 	bl	800cc7c <memcpy>
 800ebf6:	4621      	mov	r1, r4
 800ebf8:	4630      	mov	r0, r6
 800ebfa:	f7ff ffb7 	bl	800eb6c <_Bfree>
 800ebfe:	4644      	mov	r4, r8
 800ec00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec04:	3501      	adds	r5, #1
 800ec06:	615f      	str	r7, [r3, #20]
 800ec08:	6125      	str	r5, [r4, #16]
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec10 <__hi0bits>:
 800ec10:	0c02      	lsrs	r2, r0, #16
 800ec12:	0412      	lsls	r2, r2, #16
 800ec14:	4603      	mov	r3, r0
 800ec16:	b9b2      	cbnz	r2, 800ec46 <__hi0bits+0x36>
 800ec18:	0403      	lsls	r3, r0, #16
 800ec1a:	2010      	movs	r0, #16
 800ec1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ec20:	bf04      	itt	eq
 800ec22:	021b      	lsleq	r3, r3, #8
 800ec24:	3008      	addeq	r0, #8
 800ec26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ec2a:	bf04      	itt	eq
 800ec2c:	011b      	lsleq	r3, r3, #4
 800ec2e:	3004      	addeq	r0, #4
 800ec30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ec34:	bf04      	itt	eq
 800ec36:	009b      	lsleq	r3, r3, #2
 800ec38:	3002      	addeq	r0, #2
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	db06      	blt.n	800ec4c <__hi0bits+0x3c>
 800ec3e:	005b      	lsls	r3, r3, #1
 800ec40:	d503      	bpl.n	800ec4a <__hi0bits+0x3a>
 800ec42:	3001      	adds	r0, #1
 800ec44:	4770      	bx	lr
 800ec46:	2000      	movs	r0, #0
 800ec48:	e7e8      	b.n	800ec1c <__hi0bits+0xc>
 800ec4a:	2020      	movs	r0, #32
 800ec4c:	4770      	bx	lr

0800ec4e <__lo0bits>:
 800ec4e:	6803      	ldr	r3, [r0, #0]
 800ec50:	f013 0207 	ands.w	r2, r3, #7
 800ec54:	4601      	mov	r1, r0
 800ec56:	d00b      	beq.n	800ec70 <__lo0bits+0x22>
 800ec58:	07da      	lsls	r2, r3, #31
 800ec5a:	d423      	bmi.n	800eca4 <__lo0bits+0x56>
 800ec5c:	0798      	lsls	r0, r3, #30
 800ec5e:	bf49      	itett	mi
 800ec60:	085b      	lsrmi	r3, r3, #1
 800ec62:	089b      	lsrpl	r3, r3, #2
 800ec64:	2001      	movmi	r0, #1
 800ec66:	600b      	strmi	r3, [r1, #0]
 800ec68:	bf5c      	itt	pl
 800ec6a:	600b      	strpl	r3, [r1, #0]
 800ec6c:	2002      	movpl	r0, #2
 800ec6e:	4770      	bx	lr
 800ec70:	b298      	uxth	r0, r3
 800ec72:	b9a8      	cbnz	r0, 800eca0 <__lo0bits+0x52>
 800ec74:	0c1b      	lsrs	r3, r3, #16
 800ec76:	2010      	movs	r0, #16
 800ec78:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ec7c:	bf04      	itt	eq
 800ec7e:	0a1b      	lsreq	r3, r3, #8
 800ec80:	3008      	addeq	r0, #8
 800ec82:	071a      	lsls	r2, r3, #28
 800ec84:	bf04      	itt	eq
 800ec86:	091b      	lsreq	r3, r3, #4
 800ec88:	3004      	addeq	r0, #4
 800ec8a:	079a      	lsls	r2, r3, #30
 800ec8c:	bf04      	itt	eq
 800ec8e:	089b      	lsreq	r3, r3, #2
 800ec90:	3002      	addeq	r0, #2
 800ec92:	07da      	lsls	r2, r3, #31
 800ec94:	d402      	bmi.n	800ec9c <__lo0bits+0x4e>
 800ec96:	085b      	lsrs	r3, r3, #1
 800ec98:	d006      	beq.n	800eca8 <__lo0bits+0x5a>
 800ec9a:	3001      	adds	r0, #1
 800ec9c:	600b      	str	r3, [r1, #0]
 800ec9e:	4770      	bx	lr
 800eca0:	4610      	mov	r0, r2
 800eca2:	e7e9      	b.n	800ec78 <__lo0bits+0x2a>
 800eca4:	2000      	movs	r0, #0
 800eca6:	4770      	bx	lr
 800eca8:	2020      	movs	r0, #32
 800ecaa:	4770      	bx	lr

0800ecac <__i2b>:
 800ecac:	b510      	push	{r4, lr}
 800ecae:	460c      	mov	r4, r1
 800ecb0:	2101      	movs	r1, #1
 800ecb2:	f7ff ff27 	bl	800eb04 <_Balloc>
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	6144      	str	r4, [r0, #20]
 800ecba:	6102      	str	r2, [r0, #16]
 800ecbc:	bd10      	pop	{r4, pc}

0800ecbe <__multiply>:
 800ecbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc2:	4614      	mov	r4, r2
 800ecc4:	690a      	ldr	r2, [r1, #16]
 800ecc6:	6923      	ldr	r3, [r4, #16]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	bfb8      	it	lt
 800eccc:	460b      	movlt	r3, r1
 800ecce:	4688      	mov	r8, r1
 800ecd0:	bfbc      	itt	lt
 800ecd2:	46a0      	movlt	r8, r4
 800ecd4:	461c      	movlt	r4, r3
 800ecd6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ecda:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ecde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ece2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ece6:	eb07 0609 	add.w	r6, r7, r9
 800ecea:	42b3      	cmp	r3, r6
 800ecec:	bfb8      	it	lt
 800ecee:	3101      	addlt	r1, #1
 800ecf0:	f7ff ff08 	bl	800eb04 <_Balloc>
 800ecf4:	f100 0514 	add.w	r5, r0, #20
 800ecf8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ecfc:	462b      	mov	r3, r5
 800ecfe:	2200      	movs	r2, #0
 800ed00:	4573      	cmp	r3, lr
 800ed02:	d316      	bcc.n	800ed32 <__multiply+0x74>
 800ed04:	f104 0214 	add.w	r2, r4, #20
 800ed08:	f108 0114 	add.w	r1, r8, #20
 800ed0c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ed10:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ed14:	9300      	str	r3, [sp, #0]
 800ed16:	9b00      	ldr	r3, [sp, #0]
 800ed18:	9201      	str	r2, [sp, #4]
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d80c      	bhi.n	800ed38 <__multiply+0x7a>
 800ed1e:	2e00      	cmp	r6, #0
 800ed20:	dd03      	ble.n	800ed2a <__multiply+0x6c>
 800ed22:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d05d      	beq.n	800ede6 <__multiply+0x128>
 800ed2a:	6106      	str	r6, [r0, #16]
 800ed2c:	b003      	add	sp, #12
 800ed2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed32:	f843 2b04 	str.w	r2, [r3], #4
 800ed36:	e7e3      	b.n	800ed00 <__multiply+0x42>
 800ed38:	f8b2 b000 	ldrh.w	fp, [r2]
 800ed3c:	f1bb 0f00 	cmp.w	fp, #0
 800ed40:	d023      	beq.n	800ed8a <__multiply+0xcc>
 800ed42:	4689      	mov	r9, r1
 800ed44:	46ac      	mov	ip, r5
 800ed46:	f04f 0800 	mov.w	r8, #0
 800ed4a:	f859 4b04 	ldr.w	r4, [r9], #4
 800ed4e:	f8dc a000 	ldr.w	sl, [ip]
 800ed52:	b2a3      	uxth	r3, r4
 800ed54:	fa1f fa8a 	uxth.w	sl, sl
 800ed58:	fb0b a303 	mla	r3, fp, r3, sl
 800ed5c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ed60:	f8dc 4000 	ldr.w	r4, [ip]
 800ed64:	4443      	add	r3, r8
 800ed66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ed6a:	fb0b 840a 	mla	r4, fp, sl, r8
 800ed6e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ed72:	46e2      	mov	sl, ip
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ed7a:	454f      	cmp	r7, r9
 800ed7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ed80:	f84a 3b04 	str.w	r3, [sl], #4
 800ed84:	d82b      	bhi.n	800edde <__multiply+0x120>
 800ed86:	f8cc 8004 	str.w	r8, [ip, #4]
 800ed8a:	9b01      	ldr	r3, [sp, #4]
 800ed8c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ed90:	3204      	adds	r2, #4
 800ed92:	f1ba 0f00 	cmp.w	sl, #0
 800ed96:	d020      	beq.n	800edda <__multiply+0x11c>
 800ed98:	682b      	ldr	r3, [r5, #0]
 800ed9a:	4689      	mov	r9, r1
 800ed9c:	46a8      	mov	r8, r5
 800ed9e:	f04f 0b00 	mov.w	fp, #0
 800eda2:	f8b9 c000 	ldrh.w	ip, [r9]
 800eda6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800edaa:	fb0a 440c 	mla	r4, sl, ip, r4
 800edae:	445c      	add	r4, fp
 800edb0:	46c4      	mov	ip, r8
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800edb8:	f84c 3b04 	str.w	r3, [ip], #4
 800edbc:	f859 3b04 	ldr.w	r3, [r9], #4
 800edc0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800edc4:	0c1b      	lsrs	r3, r3, #16
 800edc6:	fb0a b303 	mla	r3, sl, r3, fp
 800edca:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800edce:	454f      	cmp	r7, r9
 800edd0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800edd4:	d805      	bhi.n	800ede2 <__multiply+0x124>
 800edd6:	f8c8 3004 	str.w	r3, [r8, #4]
 800edda:	3504      	adds	r5, #4
 800eddc:	e79b      	b.n	800ed16 <__multiply+0x58>
 800edde:	46d4      	mov	ip, sl
 800ede0:	e7b3      	b.n	800ed4a <__multiply+0x8c>
 800ede2:	46e0      	mov	r8, ip
 800ede4:	e7dd      	b.n	800eda2 <__multiply+0xe4>
 800ede6:	3e01      	subs	r6, #1
 800ede8:	e799      	b.n	800ed1e <__multiply+0x60>
	...

0800edec <__pow5mult>:
 800edec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edf0:	4615      	mov	r5, r2
 800edf2:	f012 0203 	ands.w	r2, r2, #3
 800edf6:	4606      	mov	r6, r0
 800edf8:	460f      	mov	r7, r1
 800edfa:	d007      	beq.n	800ee0c <__pow5mult+0x20>
 800edfc:	3a01      	subs	r2, #1
 800edfe:	4c21      	ldr	r4, [pc, #132]	; (800ee84 <__pow5mult+0x98>)
 800ee00:	2300      	movs	r3, #0
 800ee02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee06:	f7ff fec8 	bl	800eb9a <__multadd>
 800ee0a:	4607      	mov	r7, r0
 800ee0c:	10ad      	asrs	r5, r5, #2
 800ee0e:	d035      	beq.n	800ee7c <__pow5mult+0x90>
 800ee10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ee12:	b93c      	cbnz	r4, 800ee24 <__pow5mult+0x38>
 800ee14:	2010      	movs	r0, #16
 800ee16:	f7fd ff29 	bl	800cc6c <malloc>
 800ee1a:	6270      	str	r0, [r6, #36]	; 0x24
 800ee1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee20:	6004      	str	r4, [r0, #0]
 800ee22:	60c4      	str	r4, [r0, #12]
 800ee24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee2c:	b94c      	cbnz	r4, 800ee42 <__pow5mult+0x56>
 800ee2e:	f240 2171 	movw	r1, #625	; 0x271
 800ee32:	4630      	mov	r0, r6
 800ee34:	f7ff ff3a 	bl	800ecac <__i2b>
 800ee38:	2300      	movs	r3, #0
 800ee3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee3e:	4604      	mov	r4, r0
 800ee40:	6003      	str	r3, [r0, #0]
 800ee42:	f04f 0800 	mov.w	r8, #0
 800ee46:	07eb      	lsls	r3, r5, #31
 800ee48:	d50a      	bpl.n	800ee60 <__pow5mult+0x74>
 800ee4a:	4639      	mov	r1, r7
 800ee4c:	4622      	mov	r2, r4
 800ee4e:	4630      	mov	r0, r6
 800ee50:	f7ff ff35 	bl	800ecbe <__multiply>
 800ee54:	4639      	mov	r1, r7
 800ee56:	4681      	mov	r9, r0
 800ee58:	4630      	mov	r0, r6
 800ee5a:	f7ff fe87 	bl	800eb6c <_Bfree>
 800ee5e:	464f      	mov	r7, r9
 800ee60:	106d      	asrs	r5, r5, #1
 800ee62:	d00b      	beq.n	800ee7c <__pow5mult+0x90>
 800ee64:	6820      	ldr	r0, [r4, #0]
 800ee66:	b938      	cbnz	r0, 800ee78 <__pow5mult+0x8c>
 800ee68:	4622      	mov	r2, r4
 800ee6a:	4621      	mov	r1, r4
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	f7ff ff26 	bl	800ecbe <__multiply>
 800ee72:	6020      	str	r0, [r4, #0]
 800ee74:	f8c0 8000 	str.w	r8, [r0]
 800ee78:	4604      	mov	r4, r0
 800ee7a:	e7e4      	b.n	800ee46 <__pow5mult+0x5a>
 800ee7c:	4638      	mov	r0, r7
 800ee7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee82:	bf00      	nop
 800ee84:	0800f778 	.word	0x0800f778

0800ee88 <__lshift>:
 800ee88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee92:	6923      	ldr	r3, [r4, #16]
 800ee94:	6849      	ldr	r1, [r1, #4]
 800ee96:	eb0a 0903 	add.w	r9, sl, r3
 800ee9a:	68a3      	ldr	r3, [r4, #8]
 800ee9c:	4607      	mov	r7, r0
 800ee9e:	4616      	mov	r6, r2
 800eea0:	f109 0501 	add.w	r5, r9, #1
 800eea4:	42ab      	cmp	r3, r5
 800eea6:	db32      	blt.n	800ef0e <__lshift+0x86>
 800eea8:	4638      	mov	r0, r7
 800eeaa:	f7ff fe2b 	bl	800eb04 <_Balloc>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	4680      	mov	r8, r0
 800eeb2:	f100 0114 	add.w	r1, r0, #20
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	4553      	cmp	r3, sl
 800eeba:	db2b      	blt.n	800ef14 <__lshift+0x8c>
 800eebc:	6920      	ldr	r0, [r4, #16]
 800eebe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eec2:	f104 0314 	add.w	r3, r4, #20
 800eec6:	f016 021f 	ands.w	r2, r6, #31
 800eeca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eece:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eed2:	d025      	beq.n	800ef20 <__lshift+0x98>
 800eed4:	f1c2 0e20 	rsb	lr, r2, #32
 800eed8:	2000      	movs	r0, #0
 800eeda:	681e      	ldr	r6, [r3, #0]
 800eedc:	468a      	mov	sl, r1
 800eede:	4096      	lsls	r6, r2
 800eee0:	4330      	orrs	r0, r6
 800eee2:	f84a 0b04 	str.w	r0, [sl], #4
 800eee6:	f853 0b04 	ldr.w	r0, [r3], #4
 800eeea:	459c      	cmp	ip, r3
 800eeec:	fa20 f00e 	lsr.w	r0, r0, lr
 800eef0:	d814      	bhi.n	800ef1c <__lshift+0x94>
 800eef2:	6048      	str	r0, [r1, #4]
 800eef4:	b108      	cbz	r0, 800eefa <__lshift+0x72>
 800eef6:	f109 0502 	add.w	r5, r9, #2
 800eefa:	3d01      	subs	r5, #1
 800eefc:	4638      	mov	r0, r7
 800eefe:	f8c8 5010 	str.w	r5, [r8, #16]
 800ef02:	4621      	mov	r1, r4
 800ef04:	f7ff fe32 	bl	800eb6c <_Bfree>
 800ef08:	4640      	mov	r0, r8
 800ef0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef0e:	3101      	adds	r1, #1
 800ef10:	005b      	lsls	r3, r3, #1
 800ef12:	e7c7      	b.n	800eea4 <__lshift+0x1c>
 800ef14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ef18:	3301      	adds	r3, #1
 800ef1a:	e7cd      	b.n	800eeb8 <__lshift+0x30>
 800ef1c:	4651      	mov	r1, sl
 800ef1e:	e7dc      	b.n	800eeda <__lshift+0x52>
 800ef20:	3904      	subs	r1, #4
 800ef22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef26:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef2a:	459c      	cmp	ip, r3
 800ef2c:	d8f9      	bhi.n	800ef22 <__lshift+0x9a>
 800ef2e:	e7e4      	b.n	800eefa <__lshift+0x72>

0800ef30 <__mcmp>:
 800ef30:	6903      	ldr	r3, [r0, #16]
 800ef32:	690a      	ldr	r2, [r1, #16]
 800ef34:	1a9b      	subs	r3, r3, r2
 800ef36:	b530      	push	{r4, r5, lr}
 800ef38:	d10c      	bne.n	800ef54 <__mcmp+0x24>
 800ef3a:	0092      	lsls	r2, r2, #2
 800ef3c:	3014      	adds	r0, #20
 800ef3e:	3114      	adds	r1, #20
 800ef40:	1884      	adds	r4, r0, r2
 800ef42:	4411      	add	r1, r2
 800ef44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ef48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ef4c:	4295      	cmp	r5, r2
 800ef4e:	d003      	beq.n	800ef58 <__mcmp+0x28>
 800ef50:	d305      	bcc.n	800ef5e <__mcmp+0x2e>
 800ef52:	2301      	movs	r3, #1
 800ef54:	4618      	mov	r0, r3
 800ef56:	bd30      	pop	{r4, r5, pc}
 800ef58:	42a0      	cmp	r0, r4
 800ef5a:	d3f3      	bcc.n	800ef44 <__mcmp+0x14>
 800ef5c:	e7fa      	b.n	800ef54 <__mcmp+0x24>
 800ef5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef62:	e7f7      	b.n	800ef54 <__mcmp+0x24>

0800ef64 <__mdiff>:
 800ef64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef68:	460d      	mov	r5, r1
 800ef6a:	4607      	mov	r7, r0
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	4628      	mov	r0, r5
 800ef70:	4614      	mov	r4, r2
 800ef72:	f7ff ffdd 	bl	800ef30 <__mcmp>
 800ef76:	1e06      	subs	r6, r0, #0
 800ef78:	d108      	bne.n	800ef8c <__mdiff+0x28>
 800ef7a:	4631      	mov	r1, r6
 800ef7c:	4638      	mov	r0, r7
 800ef7e:	f7ff fdc1 	bl	800eb04 <_Balloc>
 800ef82:	2301      	movs	r3, #1
 800ef84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ef88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef8c:	bfa4      	itt	ge
 800ef8e:	4623      	movge	r3, r4
 800ef90:	462c      	movge	r4, r5
 800ef92:	4638      	mov	r0, r7
 800ef94:	6861      	ldr	r1, [r4, #4]
 800ef96:	bfa6      	itte	ge
 800ef98:	461d      	movge	r5, r3
 800ef9a:	2600      	movge	r6, #0
 800ef9c:	2601      	movlt	r6, #1
 800ef9e:	f7ff fdb1 	bl	800eb04 <_Balloc>
 800efa2:	692b      	ldr	r3, [r5, #16]
 800efa4:	60c6      	str	r6, [r0, #12]
 800efa6:	6926      	ldr	r6, [r4, #16]
 800efa8:	f105 0914 	add.w	r9, r5, #20
 800efac:	f104 0214 	add.w	r2, r4, #20
 800efb0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800efb4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800efb8:	f100 0514 	add.w	r5, r0, #20
 800efbc:	f04f 0e00 	mov.w	lr, #0
 800efc0:	f852 ab04 	ldr.w	sl, [r2], #4
 800efc4:	f859 4b04 	ldr.w	r4, [r9], #4
 800efc8:	fa1e f18a 	uxtah	r1, lr, sl
 800efcc:	b2a3      	uxth	r3, r4
 800efce:	1ac9      	subs	r1, r1, r3
 800efd0:	0c23      	lsrs	r3, r4, #16
 800efd2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800efd6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800efda:	b289      	uxth	r1, r1
 800efdc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800efe0:	45c8      	cmp	r8, r9
 800efe2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800efe6:	4694      	mov	ip, r2
 800efe8:	f845 3b04 	str.w	r3, [r5], #4
 800efec:	d8e8      	bhi.n	800efc0 <__mdiff+0x5c>
 800efee:	45bc      	cmp	ip, r7
 800eff0:	d304      	bcc.n	800effc <__mdiff+0x98>
 800eff2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800eff6:	b183      	cbz	r3, 800f01a <__mdiff+0xb6>
 800eff8:	6106      	str	r6, [r0, #16]
 800effa:	e7c5      	b.n	800ef88 <__mdiff+0x24>
 800effc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f000:	fa1e f381 	uxtah	r3, lr, r1
 800f004:	141a      	asrs	r2, r3, #16
 800f006:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f010:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f014:	f845 3b04 	str.w	r3, [r5], #4
 800f018:	e7e9      	b.n	800efee <__mdiff+0x8a>
 800f01a:	3e01      	subs	r6, #1
 800f01c:	e7e9      	b.n	800eff2 <__mdiff+0x8e>

0800f01e <__d2b>:
 800f01e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f022:	460e      	mov	r6, r1
 800f024:	2101      	movs	r1, #1
 800f026:	ec59 8b10 	vmov	r8, r9, d0
 800f02a:	4615      	mov	r5, r2
 800f02c:	f7ff fd6a 	bl	800eb04 <_Balloc>
 800f030:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f034:	4607      	mov	r7, r0
 800f036:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f03a:	bb34      	cbnz	r4, 800f08a <__d2b+0x6c>
 800f03c:	9301      	str	r3, [sp, #4]
 800f03e:	f1b8 0300 	subs.w	r3, r8, #0
 800f042:	d027      	beq.n	800f094 <__d2b+0x76>
 800f044:	a802      	add	r0, sp, #8
 800f046:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f04a:	f7ff fe00 	bl	800ec4e <__lo0bits>
 800f04e:	9900      	ldr	r1, [sp, #0]
 800f050:	b1f0      	cbz	r0, 800f090 <__d2b+0x72>
 800f052:	9a01      	ldr	r2, [sp, #4]
 800f054:	f1c0 0320 	rsb	r3, r0, #32
 800f058:	fa02 f303 	lsl.w	r3, r2, r3
 800f05c:	430b      	orrs	r3, r1
 800f05e:	40c2      	lsrs	r2, r0
 800f060:	617b      	str	r3, [r7, #20]
 800f062:	9201      	str	r2, [sp, #4]
 800f064:	9b01      	ldr	r3, [sp, #4]
 800f066:	61bb      	str	r3, [r7, #24]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	bf14      	ite	ne
 800f06c:	2102      	movne	r1, #2
 800f06e:	2101      	moveq	r1, #1
 800f070:	6139      	str	r1, [r7, #16]
 800f072:	b1c4      	cbz	r4, 800f0a6 <__d2b+0x88>
 800f074:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f078:	4404      	add	r4, r0
 800f07a:	6034      	str	r4, [r6, #0]
 800f07c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f080:	6028      	str	r0, [r5, #0]
 800f082:	4638      	mov	r0, r7
 800f084:	b003      	add	sp, #12
 800f086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f08a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f08e:	e7d5      	b.n	800f03c <__d2b+0x1e>
 800f090:	6179      	str	r1, [r7, #20]
 800f092:	e7e7      	b.n	800f064 <__d2b+0x46>
 800f094:	a801      	add	r0, sp, #4
 800f096:	f7ff fdda 	bl	800ec4e <__lo0bits>
 800f09a:	9b01      	ldr	r3, [sp, #4]
 800f09c:	617b      	str	r3, [r7, #20]
 800f09e:	2101      	movs	r1, #1
 800f0a0:	6139      	str	r1, [r7, #16]
 800f0a2:	3020      	adds	r0, #32
 800f0a4:	e7e5      	b.n	800f072 <__d2b+0x54>
 800f0a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f0aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f0ae:	6030      	str	r0, [r6, #0]
 800f0b0:	6918      	ldr	r0, [r3, #16]
 800f0b2:	f7ff fdad 	bl	800ec10 <__hi0bits>
 800f0b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f0ba:	e7e1      	b.n	800f080 <__d2b+0x62>

0800f0bc <_calloc_r>:
 800f0bc:	b538      	push	{r3, r4, r5, lr}
 800f0be:	fb02 f401 	mul.w	r4, r2, r1
 800f0c2:	4621      	mov	r1, r4
 800f0c4:	f7fd fe3c 	bl	800cd40 <_malloc_r>
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	b118      	cbz	r0, 800f0d4 <_calloc_r+0x18>
 800f0cc:	4622      	mov	r2, r4
 800f0ce:	2100      	movs	r1, #0
 800f0d0:	f7fd fddf 	bl	800cc92 <memset>
 800f0d4:	4628      	mov	r0, r5
 800f0d6:	bd38      	pop	{r3, r4, r5, pc}

0800f0d8 <__sfputc_r>:
 800f0d8:	6893      	ldr	r3, [r2, #8]
 800f0da:	3b01      	subs	r3, #1
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	b410      	push	{r4}
 800f0e0:	6093      	str	r3, [r2, #8]
 800f0e2:	da08      	bge.n	800f0f6 <__sfputc_r+0x1e>
 800f0e4:	6994      	ldr	r4, [r2, #24]
 800f0e6:	42a3      	cmp	r3, r4
 800f0e8:	db01      	blt.n	800f0ee <__sfputc_r+0x16>
 800f0ea:	290a      	cmp	r1, #10
 800f0ec:	d103      	bne.n	800f0f6 <__sfputc_r+0x1e>
 800f0ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0f2:	f7fe bc15 	b.w	800d920 <__swbuf_r>
 800f0f6:	6813      	ldr	r3, [r2, #0]
 800f0f8:	1c58      	adds	r0, r3, #1
 800f0fa:	6010      	str	r0, [r2, #0]
 800f0fc:	7019      	strb	r1, [r3, #0]
 800f0fe:	4608      	mov	r0, r1
 800f100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f104:	4770      	bx	lr

0800f106 <__sfputs_r>:
 800f106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f108:	4606      	mov	r6, r0
 800f10a:	460f      	mov	r7, r1
 800f10c:	4614      	mov	r4, r2
 800f10e:	18d5      	adds	r5, r2, r3
 800f110:	42ac      	cmp	r4, r5
 800f112:	d101      	bne.n	800f118 <__sfputs_r+0x12>
 800f114:	2000      	movs	r0, #0
 800f116:	e007      	b.n	800f128 <__sfputs_r+0x22>
 800f118:	463a      	mov	r2, r7
 800f11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f11e:	4630      	mov	r0, r6
 800f120:	f7ff ffda 	bl	800f0d8 <__sfputc_r>
 800f124:	1c43      	adds	r3, r0, #1
 800f126:	d1f3      	bne.n	800f110 <__sfputs_r+0xa>
 800f128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f12c <_vfiprintf_r>:
 800f12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f130:	460c      	mov	r4, r1
 800f132:	b09d      	sub	sp, #116	; 0x74
 800f134:	4617      	mov	r7, r2
 800f136:	461d      	mov	r5, r3
 800f138:	4606      	mov	r6, r0
 800f13a:	b118      	cbz	r0, 800f144 <_vfiprintf_r+0x18>
 800f13c:	6983      	ldr	r3, [r0, #24]
 800f13e:	b90b      	cbnz	r3, 800f144 <_vfiprintf_r+0x18>
 800f140:	f7ff fbe2 	bl	800e908 <__sinit>
 800f144:	4b7c      	ldr	r3, [pc, #496]	; (800f338 <_vfiprintf_r+0x20c>)
 800f146:	429c      	cmp	r4, r3
 800f148:	d158      	bne.n	800f1fc <_vfiprintf_r+0xd0>
 800f14a:	6874      	ldr	r4, [r6, #4]
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	0718      	lsls	r0, r3, #28
 800f150:	d55e      	bpl.n	800f210 <_vfiprintf_r+0xe4>
 800f152:	6923      	ldr	r3, [r4, #16]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d05b      	beq.n	800f210 <_vfiprintf_r+0xe4>
 800f158:	2300      	movs	r3, #0
 800f15a:	9309      	str	r3, [sp, #36]	; 0x24
 800f15c:	2320      	movs	r3, #32
 800f15e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f162:	2330      	movs	r3, #48	; 0x30
 800f164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f168:	9503      	str	r5, [sp, #12]
 800f16a:	f04f 0b01 	mov.w	fp, #1
 800f16e:	46b8      	mov	r8, r7
 800f170:	4645      	mov	r5, r8
 800f172:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f176:	b10b      	cbz	r3, 800f17c <_vfiprintf_r+0x50>
 800f178:	2b25      	cmp	r3, #37	; 0x25
 800f17a:	d154      	bne.n	800f226 <_vfiprintf_r+0xfa>
 800f17c:	ebb8 0a07 	subs.w	sl, r8, r7
 800f180:	d00b      	beq.n	800f19a <_vfiprintf_r+0x6e>
 800f182:	4653      	mov	r3, sl
 800f184:	463a      	mov	r2, r7
 800f186:	4621      	mov	r1, r4
 800f188:	4630      	mov	r0, r6
 800f18a:	f7ff ffbc 	bl	800f106 <__sfputs_r>
 800f18e:	3001      	adds	r0, #1
 800f190:	f000 80c2 	beq.w	800f318 <_vfiprintf_r+0x1ec>
 800f194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f196:	4453      	add	r3, sl
 800f198:	9309      	str	r3, [sp, #36]	; 0x24
 800f19a:	f898 3000 	ldrb.w	r3, [r8]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	f000 80ba 	beq.w	800f318 <_vfiprintf_r+0x1ec>
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1ae:	9304      	str	r3, [sp, #16]
 800f1b0:	9307      	str	r3, [sp, #28]
 800f1b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1b6:	931a      	str	r3, [sp, #104]	; 0x68
 800f1b8:	46a8      	mov	r8, r5
 800f1ba:	2205      	movs	r2, #5
 800f1bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f1c0:	485e      	ldr	r0, [pc, #376]	; (800f33c <_vfiprintf_r+0x210>)
 800f1c2:	f7f1 f81d 	bl	8000200 <memchr>
 800f1c6:	9b04      	ldr	r3, [sp, #16]
 800f1c8:	bb78      	cbnz	r0, 800f22a <_vfiprintf_r+0xfe>
 800f1ca:	06d9      	lsls	r1, r3, #27
 800f1cc:	bf44      	itt	mi
 800f1ce:	2220      	movmi	r2, #32
 800f1d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f1d4:	071a      	lsls	r2, r3, #28
 800f1d6:	bf44      	itt	mi
 800f1d8:	222b      	movmi	r2, #43	; 0x2b
 800f1da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f1de:	782a      	ldrb	r2, [r5, #0]
 800f1e0:	2a2a      	cmp	r2, #42	; 0x2a
 800f1e2:	d02a      	beq.n	800f23a <_vfiprintf_r+0x10e>
 800f1e4:	9a07      	ldr	r2, [sp, #28]
 800f1e6:	46a8      	mov	r8, r5
 800f1e8:	2000      	movs	r0, #0
 800f1ea:	250a      	movs	r5, #10
 800f1ec:	4641      	mov	r1, r8
 800f1ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1f2:	3b30      	subs	r3, #48	; 0x30
 800f1f4:	2b09      	cmp	r3, #9
 800f1f6:	d969      	bls.n	800f2cc <_vfiprintf_r+0x1a0>
 800f1f8:	b360      	cbz	r0, 800f254 <_vfiprintf_r+0x128>
 800f1fa:	e024      	b.n	800f246 <_vfiprintf_r+0x11a>
 800f1fc:	4b50      	ldr	r3, [pc, #320]	; (800f340 <_vfiprintf_r+0x214>)
 800f1fe:	429c      	cmp	r4, r3
 800f200:	d101      	bne.n	800f206 <_vfiprintf_r+0xda>
 800f202:	68b4      	ldr	r4, [r6, #8]
 800f204:	e7a2      	b.n	800f14c <_vfiprintf_r+0x20>
 800f206:	4b4f      	ldr	r3, [pc, #316]	; (800f344 <_vfiprintf_r+0x218>)
 800f208:	429c      	cmp	r4, r3
 800f20a:	bf08      	it	eq
 800f20c:	68f4      	ldreq	r4, [r6, #12]
 800f20e:	e79d      	b.n	800f14c <_vfiprintf_r+0x20>
 800f210:	4621      	mov	r1, r4
 800f212:	4630      	mov	r0, r6
 800f214:	f7fe fbd6 	bl	800d9c4 <__swsetup_r>
 800f218:	2800      	cmp	r0, #0
 800f21a:	d09d      	beq.n	800f158 <_vfiprintf_r+0x2c>
 800f21c:	f04f 30ff 	mov.w	r0, #4294967295
 800f220:	b01d      	add	sp, #116	; 0x74
 800f222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f226:	46a8      	mov	r8, r5
 800f228:	e7a2      	b.n	800f170 <_vfiprintf_r+0x44>
 800f22a:	4a44      	ldr	r2, [pc, #272]	; (800f33c <_vfiprintf_r+0x210>)
 800f22c:	1a80      	subs	r0, r0, r2
 800f22e:	fa0b f000 	lsl.w	r0, fp, r0
 800f232:	4318      	orrs	r0, r3
 800f234:	9004      	str	r0, [sp, #16]
 800f236:	4645      	mov	r5, r8
 800f238:	e7be      	b.n	800f1b8 <_vfiprintf_r+0x8c>
 800f23a:	9a03      	ldr	r2, [sp, #12]
 800f23c:	1d11      	adds	r1, r2, #4
 800f23e:	6812      	ldr	r2, [r2, #0]
 800f240:	9103      	str	r1, [sp, #12]
 800f242:	2a00      	cmp	r2, #0
 800f244:	db01      	blt.n	800f24a <_vfiprintf_r+0x11e>
 800f246:	9207      	str	r2, [sp, #28]
 800f248:	e004      	b.n	800f254 <_vfiprintf_r+0x128>
 800f24a:	4252      	negs	r2, r2
 800f24c:	f043 0302 	orr.w	r3, r3, #2
 800f250:	9207      	str	r2, [sp, #28]
 800f252:	9304      	str	r3, [sp, #16]
 800f254:	f898 3000 	ldrb.w	r3, [r8]
 800f258:	2b2e      	cmp	r3, #46	; 0x2e
 800f25a:	d10e      	bne.n	800f27a <_vfiprintf_r+0x14e>
 800f25c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f260:	2b2a      	cmp	r3, #42	; 0x2a
 800f262:	d138      	bne.n	800f2d6 <_vfiprintf_r+0x1aa>
 800f264:	9b03      	ldr	r3, [sp, #12]
 800f266:	1d1a      	adds	r2, r3, #4
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	9203      	str	r2, [sp, #12]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	bfb8      	it	lt
 800f270:	f04f 33ff 	movlt.w	r3, #4294967295
 800f274:	f108 0802 	add.w	r8, r8, #2
 800f278:	9305      	str	r3, [sp, #20]
 800f27a:	4d33      	ldr	r5, [pc, #204]	; (800f348 <_vfiprintf_r+0x21c>)
 800f27c:	f898 1000 	ldrb.w	r1, [r8]
 800f280:	2203      	movs	r2, #3
 800f282:	4628      	mov	r0, r5
 800f284:	f7f0 ffbc 	bl	8000200 <memchr>
 800f288:	b140      	cbz	r0, 800f29c <_vfiprintf_r+0x170>
 800f28a:	2340      	movs	r3, #64	; 0x40
 800f28c:	1b40      	subs	r0, r0, r5
 800f28e:	fa03 f000 	lsl.w	r0, r3, r0
 800f292:	9b04      	ldr	r3, [sp, #16]
 800f294:	4303      	orrs	r3, r0
 800f296:	f108 0801 	add.w	r8, r8, #1
 800f29a:	9304      	str	r3, [sp, #16]
 800f29c:	f898 1000 	ldrb.w	r1, [r8]
 800f2a0:	482a      	ldr	r0, [pc, #168]	; (800f34c <_vfiprintf_r+0x220>)
 800f2a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2a6:	2206      	movs	r2, #6
 800f2a8:	f108 0701 	add.w	r7, r8, #1
 800f2ac:	f7f0 ffa8 	bl	8000200 <memchr>
 800f2b0:	2800      	cmp	r0, #0
 800f2b2:	d037      	beq.n	800f324 <_vfiprintf_r+0x1f8>
 800f2b4:	4b26      	ldr	r3, [pc, #152]	; (800f350 <_vfiprintf_r+0x224>)
 800f2b6:	bb1b      	cbnz	r3, 800f300 <_vfiprintf_r+0x1d4>
 800f2b8:	9b03      	ldr	r3, [sp, #12]
 800f2ba:	3307      	adds	r3, #7
 800f2bc:	f023 0307 	bic.w	r3, r3, #7
 800f2c0:	3308      	adds	r3, #8
 800f2c2:	9303      	str	r3, [sp, #12]
 800f2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2c6:	444b      	add	r3, r9
 800f2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f2ca:	e750      	b.n	800f16e <_vfiprintf_r+0x42>
 800f2cc:	fb05 3202 	mla	r2, r5, r2, r3
 800f2d0:	2001      	movs	r0, #1
 800f2d2:	4688      	mov	r8, r1
 800f2d4:	e78a      	b.n	800f1ec <_vfiprintf_r+0xc0>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	f108 0801 	add.w	r8, r8, #1
 800f2dc:	9305      	str	r3, [sp, #20]
 800f2de:	4619      	mov	r1, r3
 800f2e0:	250a      	movs	r5, #10
 800f2e2:	4640      	mov	r0, r8
 800f2e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2e8:	3a30      	subs	r2, #48	; 0x30
 800f2ea:	2a09      	cmp	r2, #9
 800f2ec:	d903      	bls.n	800f2f6 <_vfiprintf_r+0x1ca>
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d0c3      	beq.n	800f27a <_vfiprintf_r+0x14e>
 800f2f2:	9105      	str	r1, [sp, #20]
 800f2f4:	e7c1      	b.n	800f27a <_vfiprintf_r+0x14e>
 800f2f6:	fb05 2101 	mla	r1, r5, r1, r2
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	4680      	mov	r8, r0
 800f2fe:	e7f0      	b.n	800f2e2 <_vfiprintf_r+0x1b6>
 800f300:	ab03      	add	r3, sp, #12
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	4622      	mov	r2, r4
 800f306:	4b13      	ldr	r3, [pc, #76]	; (800f354 <_vfiprintf_r+0x228>)
 800f308:	a904      	add	r1, sp, #16
 800f30a:	4630      	mov	r0, r6
 800f30c:	f7fd fe06 	bl	800cf1c <_printf_float>
 800f310:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f314:	4681      	mov	r9, r0
 800f316:	d1d5      	bne.n	800f2c4 <_vfiprintf_r+0x198>
 800f318:	89a3      	ldrh	r3, [r4, #12]
 800f31a:	065b      	lsls	r3, r3, #25
 800f31c:	f53f af7e 	bmi.w	800f21c <_vfiprintf_r+0xf0>
 800f320:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f322:	e77d      	b.n	800f220 <_vfiprintf_r+0xf4>
 800f324:	ab03      	add	r3, sp, #12
 800f326:	9300      	str	r3, [sp, #0]
 800f328:	4622      	mov	r2, r4
 800f32a:	4b0a      	ldr	r3, [pc, #40]	; (800f354 <_vfiprintf_r+0x228>)
 800f32c:	a904      	add	r1, sp, #16
 800f32e:	4630      	mov	r0, r6
 800f330:	f7fe f8aa 	bl	800d488 <_printf_i>
 800f334:	e7ec      	b.n	800f310 <_vfiprintf_r+0x1e4>
 800f336:	bf00      	nop
 800f338:	0800f648 	.word	0x0800f648
 800f33c:	0800f784 	.word	0x0800f784
 800f340:	0800f668 	.word	0x0800f668
 800f344:	0800f628 	.word	0x0800f628
 800f348:	0800f78a 	.word	0x0800f78a
 800f34c:	0800f78e 	.word	0x0800f78e
 800f350:	0800cf1d 	.word	0x0800cf1d
 800f354:	0800f107 	.word	0x0800f107

0800f358 <__sread>:
 800f358:	b510      	push	{r4, lr}
 800f35a:	460c      	mov	r4, r1
 800f35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f360:	f000 f8a6 	bl	800f4b0 <_read_r>
 800f364:	2800      	cmp	r0, #0
 800f366:	bfab      	itete	ge
 800f368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f36a:	89a3      	ldrhlt	r3, [r4, #12]
 800f36c:	181b      	addge	r3, r3, r0
 800f36e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f372:	bfac      	ite	ge
 800f374:	6563      	strge	r3, [r4, #84]	; 0x54
 800f376:	81a3      	strhlt	r3, [r4, #12]
 800f378:	bd10      	pop	{r4, pc}

0800f37a <__swrite>:
 800f37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f37e:	461f      	mov	r7, r3
 800f380:	898b      	ldrh	r3, [r1, #12]
 800f382:	05db      	lsls	r3, r3, #23
 800f384:	4605      	mov	r5, r0
 800f386:	460c      	mov	r4, r1
 800f388:	4616      	mov	r6, r2
 800f38a:	d505      	bpl.n	800f398 <__swrite+0x1e>
 800f38c:	2302      	movs	r3, #2
 800f38e:	2200      	movs	r2, #0
 800f390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f394:	f000 f868 	bl	800f468 <_lseek_r>
 800f398:	89a3      	ldrh	r3, [r4, #12]
 800f39a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f39e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3a2:	81a3      	strh	r3, [r4, #12]
 800f3a4:	4632      	mov	r2, r6
 800f3a6:	463b      	mov	r3, r7
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ae:	f000 b817 	b.w	800f3e0 <_write_r>

0800f3b2 <__sseek>:
 800f3b2:	b510      	push	{r4, lr}
 800f3b4:	460c      	mov	r4, r1
 800f3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3ba:	f000 f855 	bl	800f468 <_lseek_r>
 800f3be:	1c43      	adds	r3, r0, #1
 800f3c0:	89a3      	ldrh	r3, [r4, #12]
 800f3c2:	bf15      	itete	ne
 800f3c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f3c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f3ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f3ce:	81a3      	strheq	r3, [r4, #12]
 800f3d0:	bf18      	it	ne
 800f3d2:	81a3      	strhne	r3, [r4, #12]
 800f3d4:	bd10      	pop	{r4, pc}

0800f3d6 <__sclose>:
 800f3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3da:	f000 b813 	b.w	800f404 <_close_r>
	...

0800f3e0 <_write_r>:
 800f3e0:	b538      	push	{r3, r4, r5, lr}
 800f3e2:	4c07      	ldr	r4, [pc, #28]	; (800f400 <_write_r+0x20>)
 800f3e4:	4605      	mov	r5, r0
 800f3e6:	4608      	mov	r0, r1
 800f3e8:	4611      	mov	r1, r2
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	6022      	str	r2, [r4, #0]
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	f7fb fcae 	bl	800ad50 <_write>
 800f3f4:	1c43      	adds	r3, r0, #1
 800f3f6:	d102      	bne.n	800f3fe <_write_r+0x1e>
 800f3f8:	6823      	ldr	r3, [r4, #0]
 800f3fa:	b103      	cbz	r3, 800f3fe <_write_r+0x1e>
 800f3fc:	602b      	str	r3, [r5, #0]
 800f3fe:	bd38      	pop	{r3, r4, r5, pc}
 800f400:	20000ca8 	.word	0x20000ca8

0800f404 <_close_r>:
 800f404:	b538      	push	{r3, r4, r5, lr}
 800f406:	4c06      	ldr	r4, [pc, #24]	; (800f420 <_close_r+0x1c>)
 800f408:	2300      	movs	r3, #0
 800f40a:	4605      	mov	r5, r0
 800f40c:	4608      	mov	r0, r1
 800f40e:	6023      	str	r3, [r4, #0]
 800f410:	f7f2 fac7 	bl	80019a2 <_close>
 800f414:	1c43      	adds	r3, r0, #1
 800f416:	d102      	bne.n	800f41e <_close_r+0x1a>
 800f418:	6823      	ldr	r3, [r4, #0]
 800f41a:	b103      	cbz	r3, 800f41e <_close_r+0x1a>
 800f41c:	602b      	str	r3, [r5, #0]
 800f41e:	bd38      	pop	{r3, r4, r5, pc}
 800f420:	20000ca8 	.word	0x20000ca8

0800f424 <_fstat_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	4c07      	ldr	r4, [pc, #28]	; (800f444 <_fstat_r+0x20>)
 800f428:	2300      	movs	r3, #0
 800f42a:	4605      	mov	r5, r0
 800f42c:	4608      	mov	r0, r1
 800f42e:	4611      	mov	r1, r2
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	f7f2 fac2 	bl	80019ba <_fstat>
 800f436:	1c43      	adds	r3, r0, #1
 800f438:	d102      	bne.n	800f440 <_fstat_r+0x1c>
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	b103      	cbz	r3, 800f440 <_fstat_r+0x1c>
 800f43e:	602b      	str	r3, [r5, #0]
 800f440:	bd38      	pop	{r3, r4, r5, pc}
 800f442:	bf00      	nop
 800f444:	20000ca8 	.word	0x20000ca8

0800f448 <_isatty_r>:
 800f448:	b538      	push	{r3, r4, r5, lr}
 800f44a:	4c06      	ldr	r4, [pc, #24]	; (800f464 <_isatty_r+0x1c>)
 800f44c:	2300      	movs	r3, #0
 800f44e:	4605      	mov	r5, r0
 800f450:	4608      	mov	r0, r1
 800f452:	6023      	str	r3, [r4, #0]
 800f454:	f7f2 fac1 	bl	80019da <_isatty>
 800f458:	1c43      	adds	r3, r0, #1
 800f45a:	d102      	bne.n	800f462 <_isatty_r+0x1a>
 800f45c:	6823      	ldr	r3, [r4, #0]
 800f45e:	b103      	cbz	r3, 800f462 <_isatty_r+0x1a>
 800f460:	602b      	str	r3, [r5, #0]
 800f462:	bd38      	pop	{r3, r4, r5, pc}
 800f464:	20000ca8 	.word	0x20000ca8

0800f468 <_lseek_r>:
 800f468:	b538      	push	{r3, r4, r5, lr}
 800f46a:	4c07      	ldr	r4, [pc, #28]	; (800f488 <_lseek_r+0x20>)
 800f46c:	4605      	mov	r5, r0
 800f46e:	4608      	mov	r0, r1
 800f470:	4611      	mov	r1, r2
 800f472:	2200      	movs	r2, #0
 800f474:	6022      	str	r2, [r4, #0]
 800f476:	461a      	mov	r2, r3
 800f478:	f7f2 faba 	bl	80019f0 <_lseek>
 800f47c:	1c43      	adds	r3, r0, #1
 800f47e:	d102      	bne.n	800f486 <_lseek_r+0x1e>
 800f480:	6823      	ldr	r3, [r4, #0]
 800f482:	b103      	cbz	r3, 800f486 <_lseek_r+0x1e>
 800f484:	602b      	str	r3, [r5, #0]
 800f486:	bd38      	pop	{r3, r4, r5, pc}
 800f488:	20000ca8 	.word	0x20000ca8

0800f48c <__ascii_mbtowc>:
 800f48c:	b082      	sub	sp, #8
 800f48e:	b901      	cbnz	r1, 800f492 <__ascii_mbtowc+0x6>
 800f490:	a901      	add	r1, sp, #4
 800f492:	b142      	cbz	r2, 800f4a6 <__ascii_mbtowc+0x1a>
 800f494:	b14b      	cbz	r3, 800f4aa <__ascii_mbtowc+0x1e>
 800f496:	7813      	ldrb	r3, [r2, #0]
 800f498:	600b      	str	r3, [r1, #0]
 800f49a:	7812      	ldrb	r2, [r2, #0]
 800f49c:	1c10      	adds	r0, r2, #0
 800f49e:	bf18      	it	ne
 800f4a0:	2001      	movne	r0, #1
 800f4a2:	b002      	add	sp, #8
 800f4a4:	4770      	bx	lr
 800f4a6:	4610      	mov	r0, r2
 800f4a8:	e7fb      	b.n	800f4a2 <__ascii_mbtowc+0x16>
 800f4aa:	f06f 0001 	mvn.w	r0, #1
 800f4ae:	e7f8      	b.n	800f4a2 <__ascii_mbtowc+0x16>

0800f4b0 <_read_r>:
 800f4b0:	b538      	push	{r3, r4, r5, lr}
 800f4b2:	4c07      	ldr	r4, [pc, #28]	; (800f4d0 <_read_r+0x20>)
 800f4b4:	4605      	mov	r5, r0
 800f4b6:	4608      	mov	r0, r1
 800f4b8:	4611      	mov	r1, r2
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	6022      	str	r2, [r4, #0]
 800f4be:	461a      	mov	r2, r3
 800f4c0:	f7f2 fa52 	bl	8001968 <_read>
 800f4c4:	1c43      	adds	r3, r0, #1
 800f4c6:	d102      	bne.n	800f4ce <_read_r+0x1e>
 800f4c8:	6823      	ldr	r3, [r4, #0]
 800f4ca:	b103      	cbz	r3, 800f4ce <_read_r+0x1e>
 800f4cc:	602b      	str	r3, [r5, #0]
 800f4ce:	bd38      	pop	{r3, r4, r5, pc}
 800f4d0:	20000ca8 	.word	0x20000ca8

0800f4d4 <__ascii_wctomb>:
 800f4d4:	b149      	cbz	r1, 800f4ea <__ascii_wctomb+0x16>
 800f4d6:	2aff      	cmp	r2, #255	; 0xff
 800f4d8:	bf85      	ittet	hi
 800f4da:	238a      	movhi	r3, #138	; 0x8a
 800f4dc:	6003      	strhi	r3, [r0, #0]
 800f4de:	700a      	strbls	r2, [r1, #0]
 800f4e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800f4e4:	bf98      	it	ls
 800f4e6:	2001      	movls	r0, #1
 800f4e8:	4770      	bx	lr
 800f4ea:	4608      	mov	r0, r1
 800f4ec:	4770      	bx	lr
	...

0800f4f0 <_init>:
 800f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f2:	bf00      	nop
 800f4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4f6:	bc08      	pop	{r3}
 800f4f8:	469e      	mov	lr, r3
 800f4fa:	4770      	bx	lr

0800f4fc <_fini>:
 800f4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4fe:	bf00      	nop
 800f500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f502:	bc08      	pop	{r3}
 800f504:	469e      	mov	lr, r3
 800f506:	4770      	bx	lr
