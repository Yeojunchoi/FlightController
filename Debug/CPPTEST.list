
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ef0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800a0a0  0800a0a0  0001a0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a388  0800a388  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a388  0800a388  0001a388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a390  0800a390  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a390  0800a390  0001a390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a398  0800a398  0001a398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a39c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  200001dc  0800a578  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  0800a578  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb62  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b15  00000000  00000000  0003cd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001418  00000000  00000000  00040888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001280  00000000  00000000  00041ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c0ba  00000000  00000000  00042f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012dd4  00000000  00000000  0006efda  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec54f  00000000  00000000  00081dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016e2fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006210  00000000  00000000  0016e378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a088 	.word	0x0800a088

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800a088 	.word	0x0800a088

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <_ZN6I2CdevC1EP19__I2C_HandleTypeDef>:
*/

#include "I2Cdev.h"
using namespace std;

I2Cdev::I2Cdev(I2C_HandleTypeDef* hi2c)
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
{
	I2Cdev_hi2c = hi2c;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	601a      	str	r2, [r3, #0]
	//I2Cdev::readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;
}
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_ZN6I2Cdev8readByteEhhPht>:
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af02      	add	r7, sp, #8
 8000f8c:	60f8      	str	r0, [r7, #12]
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	72fb      	strb	r3, [r7, #11]
 8000f94:	4613      	mov	r3, r2
 8000f96:	72bb      	strb	r3, [r7, #10]
    return readBytes(devAddr, regAddr, 1, data, timeout);
 8000f98:	7aba      	ldrb	r2, [r7, #10]
 8000f9a:	7af9      	ldrb	r1, [r7, #11]
 8000f9c:	8b3b      	ldrh	r3, [r7, #24]
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 f805 	bl	8000fb6 <_ZN6I2Cdev9readBytesEhhhPht>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af02      	add	r7, sp, #8
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	70fb      	strb	r3, [r7, #3]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70bb      	strb	r3, [r7, #2]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	707b      	strb	r3, [r7, #1]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 8000fd0:	8bbb      	ldrh	r3, [r7, #28]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <_ZN6I2Cdev9readBytesEhhhPht+0x24>
 8000fd6:	8bbb      	ldrh	r3, [r7, #28]
 8000fd8:	e001      	b.n	8000fde <_ZN6I2Cdev9readBytesEhhhPht+0x28>
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	b299      	uxth	r1, r3
 8000fec:	89fb      	ldrh	r3, [r7, #14]
 8000fee:	1cba      	adds	r2, r7, #2
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f002 fb3a 	bl	800366c <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b299      	uxth	r1, r3
 8001004:	787b      	ldrb	r3, [r7, #1]
 8001006:	b29a      	uxth	r2, r3
 8001008:	89fb      	ldrh	r3, [r7, #14]
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	f002 fc2a 	bl	8003868 <HAL_I2C_Master_Receive>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	bf0c      	ite	eq
 800101a:	2301      	moveq	r3, #1
 800101c:	2300      	movne	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <_ZN6I2Cdev9readBytesEhhhPht+0x72>
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	e000      	b.n	800102a <_ZN6I2Cdev9readBytesEhhhPht+0x74>
    return -1;
 8001028:	23ff      	movs	r3, #255	; 0xff
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af02      	add	r7, sp, #8
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	4608      	mov	r0, r1
 800103c:	4611      	mov	r1, r2
 800103e:	461a      	mov	r2, r3
 8001040:	4603      	mov	r3, r0
 8001042:	70fb      	strb	r3, [r7, #3]
 8001044:	460b      	mov	r3, r1
 8001046:	70bb      	strb	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
    uint8_t b;
    readByte(devAddr, regAddr, &b, I2CDEV_DEFAULT_READ_TIMEOUT);
 800104c:	f107 000f 	add.w	r0, r7, #15
 8001050:	78ba      	ldrb	r2, [r7, #2]
 8001052:	78f9      	ldrb	r1, [r7, #3]
 8001054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	4603      	mov	r3, r0
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff92 	bl	8000f86 <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8001062:	7e3b      	ldrb	r3, [r7, #24]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00a      	beq.n	800107e <_ZN6I2Cdev8writeBitEhhhh+0x4c>
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2201      	movs	r2, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	b25a      	sxtb	r2, r3
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	b25b      	sxtb	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b25b      	sxtb	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	e00b      	b.n	8001096 <_ZN6I2Cdev8writeBitEhhhh+0x64>
 800107e:	787b      	ldrb	r3, [r7, #1]
 8001080:	2201      	movs	r2, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	b25b      	sxtb	r3, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	b25a      	sxtb	r2, r3
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	b25b      	sxtb	r3, r3
 8001090:	4013      	ands	r3, r2
 8001092:	b25b      	sxtb	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	73fb      	strb	r3, [r7, #15]
    return writeByte(devAddr, regAddr, b);
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	78ba      	ldrb	r2, [r7, #2]
 800109c:	78f9      	ldrb	r1, [r7, #3]
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f859 	bl	8001156 <_ZN6I2Cdev9writeByteEhhh>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af02      	add	r7, sp, #8
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	4608      	mov	r0, r1
 80010b8:	4611      	mov	r1, r2
 80010ba:	461a      	mov	r2, r3
 80010bc:	4603      	mov	r3, r0
 80010be:	70fb      	strb	r3, [r7, #3]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70bb      	strb	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b, 100) != 0)
 80010c8:	f107 000f 	add.w	r0, r7, #15
 80010cc:	78ba      	ldrb	r2, [r7, #2]
 80010ce:	78f9      	ldrb	r1, [r7, #3]
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	4603      	mov	r3, r0
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff55 	bl	8000f86 <_ZN6I2Cdev8readByteEhhPht>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf14      	ite	ne
 80010e2:	2301      	movne	r3, #1
 80010e4:	2300      	moveq	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d02f      	beq.n	800114c <_ZN6I2Cdev9writeBitsEhhhhh+0x9e>
    {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80010ec:	7e3b      	ldrb	r3, [r7, #24]
 80010ee:	2201      	movs	r2, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	1e5a      	subs	r2, r3, #1
 80010f6:	7879      	ldrb	r1, [r7, #1]
 80010f8:	7e3b      	ldrb	r3, [r7, #24]
 80010fa:	1acb      	subs	r3, r1, r3
 80010fc:	3301      	adds	r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	73bb      	strb	r3, [r7, #14]
        data <<= (bitStart - length + 1); // shift data into correct position
 8001106:	7f3a      	ldrb	r2, [r7, #28]
 8001108:	7879      	ldrb	r1, [r7, #1]
 800110a:	7e3b      	ldrb	r3, [r7, #24]
 800110c:	1acb      	subs	r3, r1, r3
 800110e:	3301      	adds	r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	773b      	strb	r3, [r7, #28]
        data &= mask; // zero all non-important bits in data
 8001116:	7bba      	ldrb	r2, [r7, #14]
 8001118:	7f3b      	ldrb	r3, [r7, #28]
 800111a:	4013      	ands	r3, r2
 800111c:	773b      	strb	r3, [r7, #28]
        b &= ~(mask); // zero all important bits in existing byte
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	b25b      	sxtb	r3, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	b25a      	sxtb	r2, r3
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	b25b      	sxtb	r3, r3
 800112a:	4013      	ands	r3, r2
 800112c:	b25b      	sxtb	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	73fb      	strb	r3, [r7, #15]
        b |= data; // combine data with existing byte
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	7f3b      	ldrb	r3, [r7, #28]
 8001136:	4313      	orrs	r3, r2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	73fb      	strb	r3, [r7, #15]
        return writeByte(devAddr, regAddr, b);
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	78ba      	ldrb	r2, [r7, #2]
 8001140:	78f9      	ldrb	r1, [r7, #3]
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f807 	bl	8001156 <_ZN6I2Cdev9writeByteEhhh>
 8001148:	4603      	mov	r3, r0
 800114a:	e000      	b.n	800114e <_ZN6I2Cdev9writeBitsEhhhhh+0xa0>
    }
    else
    {
        return 0;
 800114c:	2300      	movs	r3, #0
    }
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_ZN6I2Cdev9writeByteEhhh>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af02      	add	r7, sp, #8
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	4608      	mov	r0, r1
 8001160:	4611      	mov	r1, r2
 8001162:	461a      	mov	r2, r3
 8001164:	4603      	mov	r3, r0
 8001166:	70fb      	strb	r3, [r7, #3]
 8001168:	460b      	mov	r3, r1
 800116a:	70bb      	strb	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
    return writeBytes(devAddr, regAddr, 1, &data);
 8001170:	78ba      	ldrb	r2, [r7, #2]
 8001172:	78f9      	ldrb	r1, [r7, #3]
 8001174:	1c7b      	adds	r3, r7, #1
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2301      	movs	r3, #1
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f805 	bl	800118a <_ZN6I2Cdev10writeBytesEhhhPh>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t Size, uint8_t* pData)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af02      	add	r7, sp, #8
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	4608      	mov	r0, r1
 8001194:	4611      	mov	r1, r2
 8001196:	461a      	mov	r2, r3
 8001198:	4603      	mov	r3, r0
 800119a:	70fb      	strb	r3, [r7, #3]
 800119c:	460b      	mov	r3, r1
 800119e:	70bb      	strb	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	707b      	strb	r3, [r7, #1]
    // Creating dynamic array to store regAddr + data in one buffer
    uint8_t * dynBuffer;
    dynBuffer = (uint8_t *) malloc(sizeof(uint8_t) * (Size+1));
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	3301      	adds	r3, #1
 80011a8:	4618      	mov	r0, r3
 80011aa:	f006 fb23 	bl	80077f4 <malloc>
 80011ae:	4603      	mov	r3, r0
 80011b0:	60fb      	str	r3, [r7, #12]
    dynBuffer[0] = regAddr;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	78ba      	ldrb	r2, [r7, #2]
 80011b6:	701a      	strb	r2, [r3, #0]

    // copy array
    memcpy(dynBuffer+1, pData, sizeof(uint8_t) * Size);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3301      	adds	r3, #1
 80011bc:	787a      	ldrb	r2, [r7, #1]
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f006 fb27 	bl	8007814 <memcpy>

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, dynBuffer, Size+1, 1000);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	b299      	uxth	r1, r3
 80011d2:	787b      	ldrb	r3, [r7, #1]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	3301      	adds	r3, #1
 80011d8:	b29a      	uxth	r2, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	4613      	mov	r3, r2
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	f002 fa42 	bl	800366c <HAL_I2C_Master_Transmit>
 80011e8:	4603      	mov	r3, r0
 80011ea:	72fb      	strb	r3, [r7, #11]
    free(dynBuffer);
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f006 fb09 	bl	8007804 <free>
    return status == HAL_OK;
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	b29b      	uxth	r3, r3
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <_ZN7MPU605014updateMotionITEv>:
    bool testConnection();

    inline void getMotionIT(){
    	HAL_I2C_Mem_Read_IT(i2c.I2Cdev_hi2c, MPU6050_ADDR, MPU6050_RA_ACCEL_XOUT_H, 1, buffer, 14);
    }
    inline void updateMotionIT(){
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    	int16_t temp;
    	rawAx = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b21a      	sxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21a      	sxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	839a      	strh	r2, [r3, #28]
    	rawAy = (((int16_t)buffer[2]) << 8) | buffer[3];
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b21a      	sxth	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21a      	sxth	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	83da      	strh	r2, [r3, #30]
    	rawAz = (((int16_t)buffer[4]) << 8) | buffer[5];
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b21a      	sxth	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21a      	sxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	841a      	strh	r2, [r3, #32]
    	temp = (int16_t) (buffer[6] << 8 | buffer[7]);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800126e:	b21b      	sxth	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	81fb      	strh	r3, [r7, #14]
    	rawGx = (((int16_t)buffer[8]) << 8) | buffer[9];
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b21a      	sxth	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b21a      	sxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	845a      	strh	r2, [r3, #34]	; 0x22
    	rawGy = (((int16_t)buffer[10]) << 8) | buffer[11];
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21a      	sxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	849a      	strh	r2, [r3, #36]	; 0x24
    	rawGz = (((int16_t)buffer[12]) << 8) | buffer[13];
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b21a      	sxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	84da      	strh	r2, [r3, #38]	; 0x26

    	Ax = rawAx;//-baseAcX;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edc3 7a01 	vstr	s15, [r3, #4]
    	Ay = rawAy-baseAcY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a02 	vstr	s15, [r3, #8]
    	Az = rawAz-baseAcZ;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edc3 7a03 	vstr	s15, [r3, #12]
    	Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131e:	eddf 6a30 	vldr	s13, [pc, #192]	; 80013e0 <_ZN7MPU605014updateMotionITEv+0x1d8>
 8001322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001326:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80013e4 <_ZN7MPU605014updateMotionITEv+0x1dc>
 800132a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    	Gx = (rawGx-baseGyX) / 131.0;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8fd 	bl	8000544 <__aeabi_i2d>
 800134a:	a323      	add	r3, pc, #140	; (adr r3, 80013d8 <_ZN7MPU605014updateMotionITEv+0x1d0>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fa8c 	bl	800086c <__aeabi_ddiv>
 8001354:	4603      	mov	r3, r0
 8001356:	460c      	mov	r4, r1
 8001358:	4618      	mov	r0, r3
 800135a:	4621      	mov	r1, r4
 800135c:	f7ff fc34 	bl	8000bc8 <__aeabi_d2f>
 8001360:	4602      	mov	r2, r0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	611a      	str	r2, [r3, #16]
    	Gy = (rawGy-baseGyY) / 131.0;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800136c:	461a      	mov	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8e4 	bl	8000544 <__aeabi_i2d>
 800137c:	a316      	add	r3, pc, #88	; (adr r3, 80013d8 <_ZN7MPU605014updateMotionITEv+0x1d0>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff fa73 	bl	800086c <__aeabi_ddiv>
 8001386:	4603      	mov	r3, r0
 8001388:	460c      	mov	r4, r1
 800138a:	4618      	mov	r0, r3
 800138c:	4621      	mov	r1, r4
 800138e:	f7ff fc1b 	bl	8000bc8 <__aeabi_d2f>
 8001392:	4602      	mov	r2, r0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	615a      	str	r2, [r3, #20]
    	Gz = (rawGz-baseGyZ) / 131.0;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800139e:	461a      	mov	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8cb 	bl	8000544 <__aeabi_i2d>
 80013ae:	a30a      	add	r3, pc, #40	; (adr r3, 80013d8 <_ZN7MPU605014updateMotionITEv+0x1d0>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff fa5a 	bl	800086c <__aeabi_ddiv>
 80013b8:	4603      	mov	r3, r0
 80013ba:	460c      	mov	r4, r1
 80013bc:	4618      	mov	r0, r3
 80013be:	4621      	mov	r1, r4
 80013c0:	f7ff fc02 	bl	8000bc8 <__aeabi_d2f>
 80013c4:	4602      	mov	r2, r0
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
    }
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	f3af 8000 	nop.w
 80013d8:	00000000 	.word	0x00000000
 80013dc:	40606000 	.word	0x40606000
 80013e0:	43aa0000 	.word	0x43aa0000
 80013e4:	42121eb8 	.word	0x42121eb8

080013e8 <CppMain>:

MPU6050 mpu(&hi2c1);
Estimator esti;

void CppMain()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
//	    mpu.CalibrateGyro(6);
//        mpu.PrintActiveOffsets();
//	}
	//cpp main

	printf("asdf\r\n");
 80013ec:	480b      	ldr	r0, [pc, #44]	; (800141c <CppMain+0x34>)
 80013ee:	f006 ff9d 	bl	800832c <puts>

	mpu.initialize();
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <CppMain+0x38>)
 80013f4:	f000 f879 	bl	80014ea <_ZN7MPU605010initializeEv>
//    mpu.getMotionIT();

    /* mpu it start*/
	HAL_TIM_Base_Start_IT(&htim10);
 80013f8:	480a      	ldr	r0, [pc, #40]	; (8001424 <CppMain+0x3c>)
 80013fa:	f005 f9b2 	bl	8006762 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 80013fe:	480a      	ldr	r0, [pc, #40]	; (8001428 <CppMain+0x40>)
 8001400:	f005 f9af 	bl	8006762 <HAL_TIM_Base_Start_IT>
//	HAL_Delay(100);
	while(1)
	{
//		esti.calGyroAngle();
//		printf("%f, %f\r\n", esti.roll, esti.pitch)
		printf("%u\r\n", TIM11->CNT);
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <CppMain+0x44>)
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <CppMain+0x48>)
 800140c:	f006 ff1a 	bl	8008244 <iprintf>
//		printf("hello\r\n");
		HAL_Delay(1000);
 8001410:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001414:	f001 f85c 	bl	80024d0 <HAL_Delay>
		printf("%u\r\n", TIM11->CNT);
 8001418:	e7f4      	b.n	8001404 <CppMain+0x1c>
 800141a:	bf00      	nop
 800141c:	0800a0a0 	.word	0x0800a0a0
 8001420:	200001f8 	.word	0x200001f8
 8001424:	200002ec 	.word	0x200002ec
 8001428:	2000032c 	.word	0x2000032c
 800142c:	40014800 	.word	0x40014800
 8001430:	0800a0a8 	.word	0x0800a0a8

08001434 <HAL_I2C_MemRxCpltCallback>:
//		std::printf("test %d\r\n", mpu.getDeviceID());
//		HAL_Delay(100);
	}
}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;
	if(hi2c->Instance == I2C1){
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d10f      	bne.n	8001466 <HAL_I2C_MemRxCpltCallback+0x32>
		cnt++;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_I2C_MemRxCpltCallback+0x40>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_I2C_MemRxCpltCallback+0x40>)
 8001450:	701a      	strb	r2, [r3, #0]
		mpu.updateMotionIT();
 8001452:	4809      	ldr	r0, [pc, #36]	; (8001478 <HAL_I2C_MemRxCpltCallback+0x44>)
 8001454:	f7ff fed8 	bl	8001208 <_ZN7MPU605014updateMotionITEv>
		if(cnt>10){
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_I2C_MemRxCpltCallback+0x40>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b0a      	cmp	r3, #10
 800145e:	d902      	bls.n	8001466 <HAL_I2C_MemRxCpltCallback+0x32>
//			printf("%f, %f, %f, %f, %f, %f\r\n", mpu.Ax, mpu.Ay, mpu.Az, mpu.Gx, mpu.Gy, mpu.Gz);
//			printf("%d, %d, %d, %d, %d, %d\r\n", mpu.rawAx, mpu.rawAy, mpu.rawAz, mpu.rawGx, mpu.rawGy, mpu.rawGz);
			cnt = 0;
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_I2C_MemRxCpltCallback+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40005400 	.word	0x40005400
 8001474:	20000240 	.word	0x20000240
 8001478:	200001f8 	.word	0x200001f8

0800147c <_Z41__static_initialization_and_destruction_0ii>:
//			printf("%d\r\n", a);
//			mpu.getMotionIT();
			a = 0;
		}
	}
}
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d109      	bne.n	80014a0 <_Z41__static_initialization_and_destruction_0ii+0x24>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001492:	4293      	cmp	r3, r2
 8001494:	d104      	bne.n	80014a0 <_Z41__static_initialization_and_destruction_0ii+0x24>
MPU6050 mpu(&hi2c1);
 8001496:	2268      	movs	r2, #104	; 0x68
 8001498:	4903      	ldr	r1, [pc, #12]	; (80014a8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800149a:	4804      	ldr	r0, [pc, #16]	; (80014ac <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800149c:	f000 f810 	bl	80014c0 <_ZN7MPU6050C1EP19__I2C_HandleTypeDefh>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000298 	.word	0x20000298
 80014ac:	200001f8 	.word	0x200001f8

080014b0 <_GLOBAL__sub_I_ax>:
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff ffdf 	bl	800147c <_Z41__static_initialization_and_destruction_0ii>
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_ZN7MPU6050C1EP19__I2C_HandleTypeDefh>:
//	y = *(float*)&i;
//	y = y * (1.5f - (halfx * y * y));
//	return y;
//}

MPU6050::MPU6050(I2C_HandleTypeDef *I2Cx, uint8_t address)
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	4613      	mov	r3, r2
 80014cc:	71fb      	strb	r3, [r7, #7]
: i2c(I2Cx)
, devAddr(address)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fd48 	bl	8000f68 <_ZN6I2CdevC1EP19__I2C_HandleTypeDef>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	79fa      	ldrb	r2, [r7, #7]
 80014dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
{
}
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_ZN7MPU605010initializeEv>:

void MPU6050::initialize(){
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 80014f2:	2101      	movs	r1, #1
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f87f 	bl	80015f8 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 80014fa:	2100      	movs	r1, #0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f891 	bl	8001624 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8001502:	2100      	movs	r1, #0
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f8a3 	bl	8001650 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 800150a:	2100      	movs	r1, #0
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f8b5 	bl	800167c <_ZN7MPU605015setSleepEnabledEb>
    setDLPFMode(2);
 8001512:	2102      	movs	r1, #2
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f9a5 	bl	8001864 <_ZN7MPU605011setDLPFModeEh>
    setRate(7);
 800151a:	2107      	movs	r1, #7
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f9b7 	bl	8001890 <_ZN7MPU60507setRateEh>
	CalibAccelGyro();
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f8be 	bl	80016a4 <_ZN7MPU605014CalibAccelGyroEv>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_ZN7MPU605015updateRawMotionEv>:
bool MPU6050::testConnection(){
	return getDeviceID() == 0x34;
}
void MPU6050::updateRawMotion(){
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af02      	add	r7, sp, #8
 8001536:	6078      	str	r0, [r7, #4]
    i2c.readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	332d      	adds	r3, #45	; 0x2d
 8001544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001548:	9201      	str	r2, [sp, #4]
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	230e      	movs	r3, #14
 800154e:	223b      	movs	r2, #59	; 0x3b
 8001550:	f7ff fd31 	bl	8000fb6 <_ZN6I2Cdev9readBytesEhhhPht>
    rawAx = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21a      	sxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	839a      	strh	r2, [r3, #28]
    rawAy = (((int16_t)buffer[2]) << 8) | buffer[3];
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21a      	sxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	83da      	strh	r2, [r3, #30]
    rawAz = (((int16_t)buffer[4]) << 8) | buffer[5];
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001598:	b21b      	sxth	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b21a      	sxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	841a      	strh	r2, [r3, #32]
    rawGx = (((int16_t)buffer[8]) << 8) | buffer[9];
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	845a      	strh	r2, [r3, #34]	; 0x22
    rawGy = (((int16_t)buffer[10]) << 8) | buffer[11];
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	849a      	strh	r2, [r3, #36]	; 0x24
    rawGz = (((int16_t)buffer[12]) << 8) | buffer[13];
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	84da      	strh	r2, [r3, #38]	; 0x26
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_ZN7MPU605014setClockSourceEh>:

// initialize function
void MPU6050::setClockSource(uint8_t source) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
    i2c.writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	2303      	movs	r3, #3
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2302      	movs	r3, #2
 8001616:	226b      	movs	r2, #107	; 0x6b
 8001618:	f7ff fd49 	bl	80010ae <_ZN6I2Cdev9writeBitsEhhhhh>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_ZN7MPU605021setFullScaleGyroRangeEh>:
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af02      	add	r7, sp, #8
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	70fb      	strb	r3, [r7, #3]
    i2c.writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	2302      	movs	r3, #2
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2304      	movs	r3, #4
 8001642:	221b      	movs	r2, #27
 8001644:	f7ff fd33 	bl	80010ae <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_ZN7MPU605022setFullScaleAccelRangeEh>:
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af02      	add	r7, sp, #8
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
    i2c.writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2302      	movs	r3, #2
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2304      	movs	r3, #4
 800166e:	221c      	movs	r2, #28
 8001670:	f7ff fd1d 	bl	80010ae <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_ZN7MPU605015setSleepEnabledEb>:
void MPU6050::setSleepEnabled(bool enabled) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
    i2c.writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001690:	78fb      	ldrb	r3, [r7, #3]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2306      	movs	r3, #6
 8001696:	226b      	movs	r2, #107	; 0x6b
 8001698:	f7ff fccb 	bl	8001032 <_ZN6I2Cdev8writeBitEhhhh>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZN7MPU605014CalibAccelGyroEv>:

// calibration
void MPU6050::CalibAccelGyro(){
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	int16_t sumAcX = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	83fb      	strh	r3, [r7, #30]
	int16_t sumAcY = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	83bb      	strh	r3, [r7, #28]
	int16_t sumAcZ = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	837b      	strh	r3, [r7, #26]
	int16_t sumGyX = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	833b      	strh	r3, [r7, #24]
	int16_t sumGyY = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	82fb      	strh	r3, [r7, #22]
	int16_t sumGyZ = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	82bb      	strh	r3, [r7, #20]
    for(int i=0; i<10; i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	2b09      	cmp	r3, #9
 80016cc:	dc09      	bgt.n	80016e2 <_ZN7MPU605014CalibAccelGyroEv+0x3e>
	{
		 updateRawMotion();
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff2e 	bl	8001530 <_ZN7MPU605015updateRawMotionEv>
		 HAL_Delay(100);
 80016d4:	2064      	movs	r0, #100	; 0x64
 80016d6:	f000 fefb 	bl	80024d0 <HAL_Delay>
    for(int i=0; i<10; i++)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	3301      	adds	r3, #1
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	e7f2      	b.n	80016c8 <_ZN7MPU605014CalibAccelGyroEv+0x24>
	}
//	printf("raw : \r\n", baseGyX, baseGyY, baseGyZ);
    for(int i=0; i<10; i++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b09      	cmp	r3, #9
 80016ea:	dc39      	bgt.n	8001760 <_ZN7MPU605014CalibAccelGyroEv+0xbc>
	{
//    	printf("%d, %d, %d\r\n", rawGx, rawGy, rawGz);
		 updateRawMotion();
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff1f 	bl	8001530 <_ZN7MPU605015updateRawMotionEv>
		 sumAcX += rawAx;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	8bfb      	ldrh	r3, [r7, #30]
 80016fc:	4413      	add	r3, r2
 80016fe:	b29b      	uxth	r3, r3
 8001700:	83fb      	strh	r3, [r7, #30]
		 sumAcY += rawAy;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001708:	b29a      	uxth	r2, r3
 800170a:	8bbb      	ldrh	r3, [r7, #28]
 800170c:	4413      	add	r3, r2
 800170e:	b29b      	uxth	r3, r3
 8001710:	83bb      	strh	r3, [r7, #28]
		 sumAcZ += rawAz;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001718:	b29a      	uxth	r2, r3
 800171a:	8b7b      	ldrh	r3, [r7, #26]
 800171c:	4413      	add	r3, r2
 800171e:	b29b      	uxth	r3, r3
 8001720:	837b      	strh	r3, [r7, #26]
		 sumGyX += rawGx;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001728:	b29a      	uxth	r2, r3
 800172a:	8b3b      	ldrh	r3, [r7, #24]
 800172c:	4413      	add	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	833b      	strh	r3, [r7, #24]
		 sumGyY += rawGy;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001738:	b29a      	uxth	r2, r3
 800173a:	8afb      	ldrh	r3, [r7, #22]
 800173c:	4413      	add	r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	82fb      	strh	r3, [r7, #22]
		 sumGyZ += rawGz;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001748:	b29a      	uxth	r2, r3
 800174a:	8abb      	ldrh	r3, [r7, #20]
 800174c:	4413      	add	r3, r2
 800174e:	b29b      	uxth	r3, r3
 8001750:	82bb      	strh	r3, [r7, #20]
		 HAL_Delay(100);
 8001752:	2064      	movs	r0, #100	; 0x64
 8001754:	f000 febc 	bl	80024d0 <HAL_Delay>
    for(int i=0; i<10; i++)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3301      	adds	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	e7c2      	b.n	80016e6 <_ZN7MPU605014CalibAccelGyroEv+0x42>
	}
	baseAcX = sumAcX / 10.0;
 8001760:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe feed 	bl	8000544 <__aeabi_i2d>
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <_ZN7MPU605014CalibAccelGyroEv+0x1bc>)
 8001770:	f7ff f87c 	bl	800086c <__aeabi_ddiv>
 8001774:	4603      	mov	r3, r0
 8001776:	460c      	mov	r4, r1
 8001778:	4618      	mov	r0, r3
 800177a:	4621      	mov	r1, r4
 800177c:	f7ff f9fc 	bl	8000b78 <__aeabi_d2iz>
 8001780:	4603      	mov	r3, r0
 8001782:	b21a      	sxth	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	879a      	strh	r2, [r3, #60]	; 0x3c
	baseAcY = sumAcY / 10.0;
 8001788:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fed9 	bl	8000544 <__aeabi_i2d>
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b32      	ldr	r3, [pc, #200]	; (8001860 <_ZN7MPU605014CalibAccelGyroEv+0x1bc>)
 8001798:	f7ff f868 	bl	800086c <__aeabi_ddiv>
 800179c:	4603      	mov	r3, r0
 800179e:	460c      	mov	r4, r1
 80017a0:	4618      	mov	r0, r3
 80017a2:	4621      	mov	r1, r4
 80017a4:	f7ff f9e8 	bl	8000b78 <__aeabi_d2iz>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	87da      	strh	r2, [r3, #62]	; 0x3e
	baseAcZ = sumAcZ / 10.0;
 80017b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fec5 	bl	8000544 <__aeabi_i2d>
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <_ZN7MPU605014CalibAccelGyroEv+0x1bc>)
 80017c0:	f7ff f854 	bl	800086c <__aeabi_ddiv>
 80017c4:	4603      	mov	r3, r0
 80017c6:	460c      	mov	r4, r1
 80017c8:	4618      	mov	r0, r3
 80017ca:	4621      	mov	r1, r4
 80017cc:	f7ff f9d4 	bl	8000b78 <__aeabi_d2iz>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	baseGyX = sumGyX / 10.0;
 80017da:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feb0 	bl	8000544 <__aeabi_i2d>
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <_ZN7MPU605014CalibAccelGyroEv+0x1bc>)
 80017ea:	f7ff f83f 	bl	800086c <__aeabi_ddiv>
 80017ee:	4603      	mov	r3, r0
 80017f0:	460c      	mov	r4, r1
 80017f2:	4618      	mov	r0, r3
 80017f4:	4621      	mov	r1, r4
 80017f6:	f7ff f9bf 	bl	8000b78 <__aeabi_d2iz>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	baseGyY = sumGyY / 10.0;
 8001804:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe9b 	bl	8000544 <__aeabi_i2d>
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <_ZN7MPU605014CalibAccelGyroEv+0x1bc>)
 8001814:	f7ff f82a 	bl	800086c <__aeabi_ddiv>
 8001818:	4603      	mov	r3, r0
 800181a:	460c      	mov	r4, r1
 800181c:	4618      	mov	r0, r3
 800181e:	4621      	mov	r1, r4
 8001820:	f7ff f9aa 	bl	8000b78 <__aeabi_d2iz>
 8001824:	4603      	mov	r3, r0
 8001826:	b21a      	sxth	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	baseGyZ = sumGyZ / 10.0;
 800182e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe86 	bl	8000544 <__aeabi_i2d>
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <_ZN7MPU605014CalibAccelGyroEv+0x1bc>)
 800183e:	f7ff f815 	bl	800086c <__aeabi_ddiv>
 8001842:	4603      	mov	r3, r0
 8001844:	460c      	mov	r4, r1
 8001846:	4618      	mov	r0, r3
 8001848:	4621      	mov	r1, r4
 800184a:	f7ff f995 	bl	8000b78 <__aeabi_d2iz>
 800184e:	4603      	mov	r3, r0
 8001850:	b21a      	sxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
//	printf("base : \r\n%d, %d, %d\r\n", baseGyX, baseGyY, baseGyZ);
}
 8001858:	bf00      	nop
 800185a:	3724      	adds	r7, #36	; 0x24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	40240000 	.word	0x40240000

08001864 <_ZN7MPU605011setDLPFModeEh>:
uint8_t MPU6050::getDLPFMode() {
    i2c.readBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, buffer);
    return buffer[0];
}

void MPU6050::setDLPFMode(uint8_t mode) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af02      	add	r7, sp, #8
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	70fb      	strb	r3, [r7, #3]
    i2c.writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	2303      	movs	r3, #3
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2302      	movs	r3, #2
 8001882:	221a      	movs	r2, #26
 8001884:	f7ff fc13 	bl	80010ae <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZN7MPU60507setRateEh>:

void MPU6050::setRate(uint8_t rate) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
    i2c.writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	2219      	movs	r2, #25
 80018a8:	f7ff fc55 	bl	8001156 <_ZN6I2Cdev9writeByteEhhh>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <MX_ETH_Init+0x78>)
 80018ba:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <MX_ETH_Init+0x7c>)
 80018bc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80018be:	4b1b      	ldr	r3, [pc, #108]	; (800192c <MX_ETH_Init+0x78>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <MX_ETH_Init+0x78>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_ETH_Init+0x78>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_ETH_Init+0x78>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	3301      	adds	r3, #1
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_ETH_Init+0x78>)
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	3302      	adds	r3, #2
 80018e2:	22e1      	movs	r2, #225	; 0xe1
 80018e4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_ETH_Init+0x78>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	3303      	adds	r3, #3
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_ETH_Init+0x78>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_ETH_Init+0x78>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	3305      	adds	r3, #5
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_ETH_Init+0x78>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <MX_ETH_Init+0x78>)
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_ETH_Init+0x78>)
 8001912:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001916:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <MX_ETH_Init+0x78>)
 800191a:	f000 ff3d 	bl	8002798 <HAL_ETH_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8001924:	f000 fab8 	bl	8001e98 <Error_Handler>
  }

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000250 	.word	0x20000250
 8001930:	40028000 	.word	0x40028000

08001934 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	; 0x38
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a55      	ldr	r2, [pc, #340]	; (8001aa8 <HAL_ETH_MspInit+0x174>)
 8001952:	4293      	cmp	r3, r2
 8001954:	f040 80a4 	bne.w	8001aa0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
 800195c:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_ETH_MspInit+0x178>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4a52      	ldr	r2, [pc, #328]	; (8001aac <HAL_ETH_MspInit+0x178>)
 8001962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001966:	6313      	str	r3, [r2, #48]	; 0x30
 8001968:	4b50      	ldr	r3, [pc, #320]	; (8001aac <HAL_ETH_MspInit+0x178>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001970:	623b      	str	r3, [r7, #32]
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <HAL_ETH_MspInit+0x178>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	4a4b      	ldr	r2, [pc, #300]	; (8001aac <HAL_ETH_MspInit+0x178>)
 800197e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001982:	6313      	str	r3, [r2, #48]	; 0x30
 8001984:	4b49      	ldr	r3, [pc, #292]	; (8001aac <HAL_ETH_MspInit+0x178>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	4b45      	ldr	r3, [pc, #276]	; (8001aac <HAL_ETH_MspInit+0x178>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	4a44      	ldr	r2, [pc, #272]	; (8001aac <HAL_ETH_MspInit+0x178>)
 800199a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800199e:	6313      	str	r3, [r2, #48]	; 0x30
 80019a0:	4b42      	ldr	r3, [pc, #264]	; (8001aac <HAL_ETH_MspInit+0x178>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019a8:	61bb      	str	r3, [r7, #24]
 80019aa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	4b3e      	ldr	r3, [pc, #248]	; (8001aac <HAL_ETH_MspInit+0x178>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	4a3d      	ldr	r2, [pc, #244]	; (8001aac <HAL_ETH_MspInit+0x178>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6313      	str	r3, [r2, #48]	; 0x30
 80019bc:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <HAL_ETH_MspInit+0x178>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	4b37      	ldr	r3, [pc, #220]	; (8001aac <HAL_ETH_MspInit+0x178>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	4a36      	ldr	r2, [pc, #216]	; (8001aac <HAL_ETH_MspInit+0x178>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6313      	str	r3, [r2, #48]	; 0x30
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_ETH_MspInit+0x178>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	4b30      	ldr	r3, [pc, #192]	; (8001aac <HAL_ETH_MspInit+0x178>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	4a2f      	ldr	r2, [pc, #188]	; (8001aac <HAL_ETH_MspInit+0x178>)
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	6313      	str	r3, [r2, #48]	; 0x30
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_ETH_MspInit+0x178>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <HAL_ETH_MspInit+0x178>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	4a28      	ldr	r2, [pc, #160]	; (8001aac <HAL_ETH_MspInit+0x178>)
 8001a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a10:	4b26      	ldr	r3, [pc, #152]	; (8001aac <HAL_ETH_MspInit+0x178>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a1c:	2332      	movs	r3, #50	; 0x32
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a2c:	230b      	movs	r3, #11
 8001a2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a34:	4619      	mov	r1, r3
 8001a36:	481e      	ldr	r0, [pc, #120]	; (8001ab0 <HAL_ETH_MspInit+0x17c>)
 8001a38:	f001 fb1c 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001a3c:	2386      	movs	r3, #134	; 0x86
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a4c:	230b      	movs	r3, #11
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	4619      	mov	r1, r3
 8001a56:	4817      	ldr	r0, [pc, #92]	; (8001ab4 <HAL_ETH_MspInit+0x180>)
 8001a58:	f001 fb0c 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a6e:	230b      	movs	r3, #11
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a76:	4619      	mov	r1, r3
 8001a78:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <HAL_ETH_MspInit+0x184>)
 8001a7a:	f001 fafb 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a90:	230b      	movs	r3, #11
 8001a92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4808      	ldr	r0, [pc, #32]	; (8001abc <HAL_ETH_MspInit+0x188>)
 8001a9c:	f001 faea 	bl	8003074 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3738      	adds	r7, #56	; 0x38
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40028000 	.word	0x40028000
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40021800 	.word	0x40021800

08001ac0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a4a      	ldr	r2, [pc, #296]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b48      	ldr	r3, [pc, #288]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	4b44      	ldr	r3, [pc, #272]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a43      	ldr	r2, [pc, #268]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a3c      	ldr	r2, [pc, #240]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a35      	ldr	r2, [pc, #212]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a27      	ldr	r2, [pc, #156]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b84:	4821      	ldr	r0, [pc, #132]	; (8001c0c <MX_GPIO_Init+0x14c>)
 8001b86:	f001 fc1f 	bl	80033c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2140      	movs	r1, #64	; 0x40
 8001b8e:	4820      	ldr	r0, [pc, #128]	; (8001c10 <MX_GPIO_Init+0x150>)
 8001b90:	f001 fc1a 	bl	80033c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <MX_GPIO_Init+0x154>)
 8001b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	481b      	ldr	r0, [pc, #108]	; (8001c18 <MX_GPIO_Init+0x158>)
 8001baa:	f001 fa63 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001bae:	f244 0381 	movw	r3, #16513	; 0x4081
 8001bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4811      	ldr	r0, [pc, #68]	; (8001c0c <MX_GPIO_Init+0x14c>)
 8001bc8:	f001 fa54 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001bcc:	2340      	movs	r3, #64	; 0x40
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	480b      	ldr	r0, [pc, #44]	; (8001c10 <MX_GPIO_Init+0x150>)
 8001be4:	f001 fa46 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_GPIO_Init+0x150>)
 8001bfc:	f001 fa3a 	bl	8003074 <HAL_GPIO_Init>

}
 8001c00:	bf00      	nop
 8001c02:	3730      	adds	r7, #48	; 0x30
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020400 	.word	0x40020400
 8001c10:	40021800 	.word	0x40021800
 8001c14:	10110000 	.word	0x10110000
 8001c18:	40020800 	.word	0x40020800

08001c1c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <MX_I2C1_Init+0x78>)
 8001c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c28:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <MX_I2C1_Init+0x7c>)
 8001c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c58:	480d      	ldr	r0, [pc, #52]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c5a:	f001 fbcf 	bl	80033fc <HAL_I2C_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c64:	f000 f918 	bl	8001e98 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4809      	ldr	r0, [pc, #36]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c6c:	f003 ff53 	bl	8005b16 <HAL_I2CEx_ConfigAnalogFilter>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001c76:	f000 f90f 	bl	8001e98 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c7e:	f003 ff86 	bl	8005b8e <HAL_I2CEx_ConfigDigitalFilter>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001c88:	f000 f906 	bl	8001e98 <Error_Handler>
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000298 	.word	0x20000298
 8001c94:	40005400 	.word	0x40005400
 8001c98:	00061a80 	.word	0x00061a80

08001c9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_I2C_MspInit+0x84>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d12c      	bne.n	8001d18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_I2C_MspInit+0x88>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <HAL_I2C_MspInit+0x88>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_I2C_MspInit+0x88>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001cda:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce0:	2312      	movs	r3, #18
 8001ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cec:	2304      	movs	r3, #4
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480c      	ldr	r0, [pc, #48]	; (8001d28 <HAL_I2C_MspInit+0x8c>)
 8001cf8:	f001 f9bc 	bl	8003074 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_I2C_MspInit+0x88>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_I2C_MspInit+0x88>)
 8001d06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_I2C_MspInit+0x88>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	; 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40005400 	.word	0x40005400
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020400 	.word	0x40020400

08001d2c <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, unsigned char* p, int len)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	230a      	movs	r3, #10
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <_write+0x24>)
 8001d42:	f004 fe20 	bl	8006986 <HAL_UART_Transmit>
	return len;
 8001d46:	687b      	ldr	r3, [r7, #4]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2000036c 	.word	0x2000036c

08001d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d58:	f000 fb48 	bl	80023ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d5c:	f000 f81e 	bl	8001d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d60:	f7ff feae 	bl	8001ac0 <MX_GPIO_Init>
  MX_ETH_Init();
 8001d64:	f7ff fda6 	bl	80018b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001d68:	f000 fa1c 	bl	80021a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d6c:	f000 fa8c 	bl	8002288 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001d70:	f7ff ff54 	bl	8001c1c <MX_I2C1_Init>
  MX_TIM10_Init();
 8001d74:	f000 f996 	bl	80020a4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001d78:	f000 f9b8 	bl	80020ec <MX_TIM11_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001d7c:	f000 f878 	bl	8001e70 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  setvbuf(stdout, NULL, _IONBF, 0);
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <main+0x44>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6898      	ldr	r0, [r3, #8]
 8001d86:	2300      	movs	r3, #0
 8001d88:	2202      	movs	r2, #2
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	f006 fae6 	bl	800835c <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	CppMain();
 8001d90:	f7ff fb2a 	bl	80013e8 <CppMain>
 8001d94:	e7fc      	b.n	8001d90 <main+0x3c>
 8001d96:	bf00      	nop
 8001d98:	2000000c 	.word	0x2000000c

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b094      	sub	sp, #80	; 0x50
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 0320 	add.w	r3, r7, #32
 8001da6:	2230      	movs	r2, #48	; 0x30
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f005 fd3d 	bl	800782a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <SystemClock_Config+0xcc>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a27      	ldr	r2, [pc, #156]	; (8001e68 <SystemClock_Config+0xcc>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <SystemClock_Config+0xcc>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <SystemClock_Config+0xd0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a21      	ldr	r2, [pc, #132]	; (8001e6c <SystemClock_Config+0xd0>)
 8001de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <SystemClock_Config+0xd0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e02:	2302      	movs	r3, #2
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e10:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e16:	2302      	movs	r3, #2
 8001e18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e1e:	f107 0320 	add.w	r3, r7, #32
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 f810 	bl	8005e48 <HAL_RCC_OscConfig>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e2e:	f000 f833 	bl	8001e98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e32:	230f      	movs	r3, #15
 8001e34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e36:	2302      	movs	r3, #2
 8001e38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	2105      	movs	r1, #5
 8001e50:	4618      	mov	r0, r3
 8001e52:	f004 fa69 	bl	8006328 <HAL_RCC_ClockConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e5c:	f000 f81c 	bl	8001e98 <Error_Handler>
  }
}
 8001e60:	bf00      	nop
 8001e62:	3750      	adds	r7, #80	; 0x50
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40007000 	.word	0x40007000

08001e70 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2100      	movs	r1, #0
 8001e78:	201f      	movs	r0, #31
 8001e7a:	f000 fc26 	bl	80026ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e7e:	201f      	movs	r0, #31
 8001e80:	f000 fc3f 	bl	8002702 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	2020      	movs	r0, #32
 8001e8a:	f000 fc1e 	bl	80026ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e8e:	2020      	movs	r0, #32
 8001e90:	f000 fc37 	bl	8002702 <HAL_NVIC_EnableIRQ>
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_MspInit+0x4c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	4a0f      	ldr	r2, [pc, #60]	; (8001ef4 <HAL_MspInit+0x4c>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_MspInit+0x4c>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_MspInit+0x4c>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a08      	ldr	r2, [pc, #32]	; (8001ef4 <HAL_MspInit+0x4c>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_MspInit+0x4c>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <MemManage_Handler+0x4>

08001f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <BusFault_Handler+0x4>

08001f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <UsageFault_Handler+0x4>

08001f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4c:	f000 faa0 	bl	8002490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <I2C1_EV_IRQHandler+0x10>)
 8001f5a:	f001 feab 	bl	8003cb4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000298 	.word	0x20000298

08001f68 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <I2C1_ER_IRQHandler+0x10>)
 8001f6e:	f002 f807 	bl	8003f80 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000298 	.word	0x20000298

08001f7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	e00a      	b.n	8001fa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f8e:	f3af 8000 	nop.w
 8001f92:	4601      	mov	r1, r0
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	60ba      	str	r2, [r7, #8]
 8001f9a:	b2ca      	uxtb	r2, r1
 8001f9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dbf0      	blt.n	8001f8e <_read+0x12>
	}

return len;
 8001fac:	687b      	ldr	r3, [r7, #4]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
	return -1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fde:	605a      	str	r2, [r3, #4]
	return 0;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <_isatty>:

int _isatty(int file)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ff6:	2301      	movs	r3, #1
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
	return 0;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <_sbrk+0x50>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x16>
		heap_end = &end;
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <_sbrk+0x50>)
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <_sbrk+0x54>)
 8002034:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <_sbrk+0x50>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <_sbrk+0x50>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	466a      	mov	r2, sp
 8002046:	4293      	cmp	r3, r2
 8002048:	d907      	bls.n	800205a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800204a:	f005 fba9 	bl	80077a0 <__errno>
 800204e:	4602      	mov	r2, r0
 8002050:	230c      	movs	r3, #12
 8002052:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295
 8002058:	e006      	b.n	8002068 <_sbrk+0x48>
	}

	heap_end += incr;
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <_sbrk+0x50>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a03      	ldr	r2, [pc, #12]	; (8002070 <_sbrk+0x50>)
 8002064:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000244 	.word	0x20000244
 8002074:	200007c0 	.word	0x200007c0

08002078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <SystemInit+0x28>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <SystemInit+0x28>)
 8002084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <SystemInit+0x28>)
 800208e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002092:	609a      	str	r2, [r3, #8]
#endif
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <MX_TIM10_Init+0x40>)
 80020aa:	4a0f      	ldr	r2, [pc, #60]	; (80020e8 <MX_TIM10_Init+0x44>)
 80020ac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 280-1;
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <MX_TIM10_Init+0x40>)
 80020b0:	f240 1217 	movw	r2, #279	; 0x117
 80020b4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <MX_TIM10_Init+0x40>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <MX_TIM10_Init+0x40>)
 80020be:	f242 720f 	movw	r2, #9999	; 0x270f
 80020c2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <MX_TIM10_Init+0x40>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <MX_TIM10_Init+0x40>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <MX_TIM10_Init+0x40>)
 80020d2:	f004 fb1b 	bl	800670c <HAL_TIM_Base_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80020dc:	f7ff fedc 	bl	8001e98 <Error_Handler>
  }

}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200002ec 	.word	0x200002ec
 80020e8:	40014400 	.word	0x40014400

080020ec <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <MX_TIM11_Init+0x40>)
 80020f2:	4a0f      	ldr	r2, [pc, #60]	; (8002130 <MX_TIM11_Init+0x44>)
 80020f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800-1;
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <MX_TIM11_Init+0x40>)
 80020f8:	f244 129f 	movw	r2, #16799	; 0x419f
 80020fc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <MX_TIM11_Init+0x40>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <MX_TIM11_Init+0x40>)
 8002106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800210a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <MX_TIM11_Init+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <MX_TIM11_Init+0x40>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <MX_TIM11_Init+0x40>)
 800211a:	f004 faf7 	bl	800670c <HAL_TIM_Base_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002124:	f7ff feb8 	bl	8001e98 <Error_Handler>
  }

}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	2000032c 	.word	0x2000032c
 8002130:	40014800 	.word	0x40014800

08002134 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a15      	ldr	r2, [pc, #84]	; (8002198 <HAL_TIM_Base_MspInit+0x64>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d10e      	bne.n	8002164 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_TIM_Base_MspInit+0x68>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a13      	ldr	r2, [pc, #76]	; (800219c <HAL_TIM_Base_MspInit+0x68>)
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_TIM_Base_MspInit+0x68>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002162:	e012      	b.n	800218a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM11)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <HAL_TIM_Base_MspInit+0x6c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d10d      	bne.n	800218a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_TIM_Base_MspInit+0x68>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_TIM_Base_MspInit+0x68>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	6453      	str	r3, [r2, #68]	; 0x44
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_TIM_Base_MspInit+0x68>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40014400 	.word	0x40014400
 800219c:	40023800 	.word	0x40023800
 80021a0:	40014800 	.word	0x40014800

080021a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <MX_USART3_UART_Init+0x50>)
 80021ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021c8:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021ca:	220c      	movs	r2, #12
 80021cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021da:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_USART3_UART_Init+0x4c>)
 80021dc:	f004 fb86 	bl	80068ec <HAL_UART_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021e6:	f7ff fe57 	bl	8001e98 <Error_Handler>
  }

}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2000036c 	.word	0x2000036c
 80021f4:	40004800 	.word	0x40004800

080021f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_UART_MspInit+0x84>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d12c      	bne.n	8002274 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_UART_MspInit+0x88>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a17      	ldr	r2, [pc, #92]	; (8002280 <HAL_UART_MspInit+0x88>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_UART_MspInit+0x88>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_UART_MspInit+0x88>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a10      	ldr	r2, [pc, #64]	; (8002280 <HAL_UART_MspInit+0x88>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_UART_MspInit+0x88>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002264:	2307      	movs	r3, #7
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4619      	mov	r1, r3
 800226e:	4805      	ldr	r0, [pc, #20]	; (8002284 <HAL_UART_MspInit+0x8c>)
 8002270:	f000 ff00 	bl	8003074 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002274:	bf00      	nop
 8002276:	3728      	adds	r7, #40	; 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40004800 	.word	0x40004800
 8002280:	40023800 	.word	0x40023800
 8002284:	40020c00 	.word	0x40020c00

08002288 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800228e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002292:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002296:	2204      	movs	r2, #4
 8002298:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800229c:	2202      	movs	r2, #2
 800229e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022a8:	2202      	movs	r2, #2
 80022aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022cc:	f003 fc9e 	bl	8005c0c <HAL_PCD_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80022d6:	f7ff fddf 	bl	8001e98 <Error_Handler>
  }

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200003ac 	.word	0x200003ac

080022e4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	; 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002304:	d13f      	bne.n	8002386 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_PCD_MspInit+0xac>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a20      	ldr	r2, [pc, #128]	; (8002390 <HAL_PCD_MspInit+0xac>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <HAL_PCD_MspInit+0xac>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002322:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002334:	230a      	movs	r3, #10
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	4815      	ldr	r0, [pc, #84]	; (8002394 <HAL_PCD_MspInit+0xb0>)
 8002340:	f000 fe98 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	480e      	ldr	r0, [pc, #56]	; (8002394 <HAL_PCD_MspInit+0xb0>)
 800235a:	f000 fe8b 	bl	8003074 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_PCD_MspInit+0xac>)
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_PCD_MspInit+0xac>)
 8002364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002368:	6353      	str	r3, [r2, #52]	; 0x34
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_PCD_MspInit+0xac>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_PCD_MspInit+0xac>)
 8002374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002378:	6453      	str	r3, [r2, #68]	; 0x44
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_PCD_MspInit+0xac>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002386:	bf00      	nop
 8002388:	3728      	adds	r7, #40	; 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	40020000 	.word	0x40020000

08002398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800239c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800239e:	e003      	b.n	80023a8 <LoopCopyDataInit>

080023a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023a6:	3104      	adds	r1, #4

080023a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023a8:	480b      	ldr	r0, [pc, #44]	; (80023d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023b0:	d3f6      	bcc.n	80023a0 <CopyDataInit>
  ldr  r2, =_sbss
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023b4:	e002      	b.n	80023bc <LoopFillZerobss>

080023b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023b8:	f842 3b04 	str.w	r3, [r2], #4

080023bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023c0:	d3f9      	bcc.n	80023b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023c2:	f7ff fe59 	bl	8002078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023c6:	f005 f9f1 	bl	80077ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ca:	f7ff fcc3 	bl	8001d54 <main>
  bx  lr    
 80023ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023d0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80023d4:	0800a39c 	.word	0x0800a39c
  ldr  r0, =_sdata
 80023d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023dc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80023e0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80023e4:	200007bc 	.word	0x200007bc

080023e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC_IRQHandler>
	...

080023ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <HAL_Init+0x40>)
 80023f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_Init+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <HAL_Init+0x40>)
 8002402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002406:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a07      	ldr	r2, [pc, #28]	; (800242c <HAL_Init+0x40>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002414:	2003      	movs	r0, #3
 8002416:	f000 f94d 	bl	80026b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241a:	2000      	movs	r0, #0
 800241c:	f000 f808 	bl	8002430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002420:	f7ff fd42 	bl	8001ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00

08002430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_InitTick+0x54>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0x58>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002446:	fbb3 f3f1 	udiv	r3, r3, r1
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f965 	bl	800271e <HAL_SYSTICK_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00e      	b.n	800247c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d80a      	bhi.n	800247a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f000 f92d 	bl	80026ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002470:	4a06      	ldr	r2, [pc, #24]	; (800248c <HAL_InitTick+0x5c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000000 	.word	0x20000000
 8002488:	20000008 	.word	0x20000008
 800248c:	20000004 	.word	0x20000004

08002490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_IncTick+0x20>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x24>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_IncTick+0x24>)
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000008 	.word	0x20000008
 80024b4:	200007b4 	.word	0x200007b4

080024b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_GetTick+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	200007b4 	.word	0x200007b4

080024d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff ffee 	bl	80024b8 <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d005      	beq.n	80024f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_Delay+0x40>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024f6:	bf00      	nop
 80024f8:	f7ff ffde 	bl	80024b8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d8f7      	bhi.n	80024f8 <HAL_Delay+0x28>
  {
  }
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000008 	.word	0x20000008

08002514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800253c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	; (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4907      	ldr	r1, [pc, #28]	; (80025b0 <__NVIC_EnableIRQ+0x38>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	; (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	; (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
         );
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002680:	d301      	bcc.n	8002686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <SysTick_Config+0x40>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268e:	210f      	movs	r1, #15
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	f7ff ff8e 	bl	80025b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <SysTick_Config+0x40>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <SysTick_Config+0x40>)
 80026a0:	2207      	movs	r2, #7
 80026a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff29 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026dc:	f7ff ff3e 	bl	800255c <__NVIC_GetPriorityGrouping>
 80026e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	6978      	ldr	r0, [r7, #20]
 80026e8:	f7ff ff8e 	bl	8002608 <NVIC_EncodePriority>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff5d 	bl	80025b4 <__NVIC_SetPriority>
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff31 	bl	8002578 <__NVIC_EnableIRQ>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ffa2 	bl	8002670 <SysTick_Config>
 800272c:	4603      	mov	r3, r0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d004      	beq.n	8002754 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e00c      	b.n	800276e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2205      	movs	r2, #5
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002788:	b2db      	uxtb	r3, r3
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80027a8:	4baa      	ldr	r3, [pc, #680]	; (8002a54 <HAL_ETH_Init+0x2bc>)
 80027aa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e185      	b.n	8002aca <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff f8ae 	bl	8001934 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	4b9e      	ldr	r3, [pc, #632]	; (8002a58 <HAL_ETH_Init+0x2c0>)
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	4a9d      	ldr	r2, [pc, #628]	; (8002a58 <HAL_ETH_Init+0x2c0>)
 80027e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e6:	6453      	str	r3, [r2, #68]	; 0x44
 80027e8:	4b9b      	ldr	r3, [pc, #620]	; (8002a58 <HAL_ETH_Init+0x2c0>)
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80027f4:	4b99      	ldr	r3, [pc, #612]	; (8002a5c <HAL_ETH_Init+0x2c4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4a98      	ldr	r2, [pc, #608]	; (8002a5c <HAL_ETH_Init+0x2c4>)
 80027fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027fe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002800:	4b96      	ldr	r3, [pc, #600]	; (8002a5c <HAL_ETH_Init+0x2c4>)
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4994      	ldr	r1, [pc, #592]	; (8002a5c <HAL_ETH_Init+0x2c4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002824:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002826:	f7ff fe47 	bl	80024b8 <HAL_GetTick>
 800282a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800282c:	e011      	b.n	8002852 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800282e:	f7ff fe43 	bl	80024b8 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800283c:	d909      	bls.n	8002852 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2203      	movs	r2, #3
 8002842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e13b      	b.n	8002aca <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e4      	bne.n	800282e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f023 031c 	bic.w	r3, r3, #28
 8002872:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002874:	f003 ff16 	bl	80066a4 <HAL_RCC_GetHCLKFreq>
 8002878:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4a78      	ldr	r2, [pc, #480]	; (8002a60 <HAL_ETH_Init+0x2c8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d908      	bls.n	8002894 <HAL_ETH_Init+0xfc>
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4a77      	ldr	r2, [pc, #476]	; (8002a64 <HAL_ETH_Init+0x2cc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d804      	bhi.n	8002894 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f043 0308 	orr.w	r3, r3, #8
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e027      	b.n	80028e4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4a73      	ldr	r2, [pc, #460]	; (8002a64 <HAL_ETH_Init+0x2cc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d908      	bls.n	80028ae <HAL_ETH_Init+0x116>
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4a72      	ldr	r2, [pc, #456]	; (8002a68 <HAL_ETH_Init+0x2d0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d804      	bhi.n	80028ae <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f043 030c 	orr.w	r3, r3, #12
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	e01a      	b.n	80028e4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4a6d      	ldr	r2, [pc, #436]	; (8002a68 <HAL_ETH_Init+0x2d0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d903      	bls.n	80028be <HAL_ETH_Init+0x126>
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4a6c      	ldr	r2, [pc, #432]	; (8002a6c <HAL_ETH_Init+0x2d4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d911      	bls.n	80028e2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	4a6a      	ldr	r2, [pc, #424]	; (8002a6c <HAL_ETH_Init+0x2d4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d908      	bls.n	80028d8 <HAL_ETH_Init+0x140>
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4a69      	ldr	r2, [pc, #420]	; (8002a70 <HAL_ETH_Init+0x2d8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d804      	bhi.n	80028d8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	e005      	b.n	80028e4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f043 0310 	orr.w	r3, r3, #16
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	e000      	b.n	80028e4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80028e2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80028ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028f0:	2100      	movs	r1, #0
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f956 	bl	8002ba4 <HAL_ETH_WritePHYRegister>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002902:	6939      	ldr	r1, [r7, #16]
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f9b3 	bl	8002c70 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e0d9      	b.n	8002aca <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002916:	20ff      	movs	r0, #255	; 0xff
 8002918:	f7ff fdda 	bl	80024d0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80a7 	beq.w	8002a74 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002926:	f7ff fdc7 	bl	80024b8 <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	461a      	mov	r2, r3
 8002932:	2101      	movs	r1, #1
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f8cd 	bl	8002ad4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800293a:	f7ff fdbd 	bl	80024b8 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f241 3288 	movw	r2, #5000	; 0x1388
 8002948:	4293      	cmp	r3, r2
 800294a:	d90f      	bls.n	800296c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002950:	6939      	ldr	r1, [r7, #16]
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f98c 	bl	8002c70 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0ae      	b.n	8002aca <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0da      	beq.n	800292c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800297a:	2100      	movs	r1, #0
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f911 	bl	8002ba4 <HAL_ETH_WritePHYRegister>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00b      	beq.n	80029a0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800298c:	6939      	ldr	r1, [r7, #16]
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f96e 	bl	8002c70 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800299c:	2301      	movs	r3, #1
 800299e:	e094      	b.n	8002aca <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80029a0:	f7ff fd8a 	bl	80024b8 <HAL_GetTick>
 80029a4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	461a      	mov	r2, r3
 80029ac:	2101      	movs	r1, #1
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f890 	bl	8002ad4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80029b4:	f7ff fd80 	bl	80024b8 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d90f      	bls.n	80029e6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80029ca:	6939      	ldr	r1, [r7, #16]
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f94f 	bl	8002c70 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e071      	b.n	8002aca <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0da      	beq.n	80029a6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80029f0:	f107 030c 	add.w	r3, r7, #12
 80029f4:	461a      	mov	r2, r3
 80029f6:	211f      	movs	r1, #31
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f86b 	bl	8002ad4 <HAL_ETH_ReadPHYRegister>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00b      	beq.n	8002a1c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002a08:	6939      	ldr	r1, [r7, #16]
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f930 	bl	8002c70 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e056      	b.n	8002aca <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	e002      	b.n	8002a36 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	e037      	b.n	8002ab8 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	e032      	b.n	8002ab8 <HAL_ETH_Init+0x320>
 8002a52:	bf00      	nop
 8002a54:	03938700 	.word	0x03938700
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40013800 	.word	0x40013800
 8002a60:	01312cff 	.word	0x01312cff
 8002a64:	02160ebf 	.word	0x02160ebf
 8002a68:	039386ff 	.word	0x039386ff
 8002a6c:	05f5e0ff 	.word	0x05f5e0ff
 8002a70:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	08db      	lsrs	r3, r3, #3
 8002a7a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f889 	bl	8002ba4 <HAL_ETH_WritePHYRegister>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002a9c:	6939      	ldr	r1, [r7, #16]
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8e6 	bl	8002c70 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e00c      	b.n	8002aca <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002ab0:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002ab4:	f7ff fd0c 	bl	80024d0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002ab8:	6939      	ldr	r1, [r7, #16]
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8d8 	bl	8002c70 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop

08002ad4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	460b      	mov	r3, r1
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b82      	cmp	r3, #130	; 0x82
 8002af4:	d101      	bne.n	8002afa <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
 8002af8:	e050      	b.n	8002b9c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2282      	movs	r2, #130	; 0x82
 8002afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 031c 	and.w	r3, r3, #28
 8002b10:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8a1b      	ldrh	r3, [r3, #16]
 8002b16:	02db      	lsls	r3, r3, #11
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002b20:	897b      	ldrh	r3, [r7, #10]
 8002b22:	019b      	lsls	r3, r3, #6
 8002b24:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f023 0302 	bic.w	r3, r3, #2
 8002b34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b46:	f7ff fcb7 	bl	80024b8 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b4c:	e015      	b.n	8002b7a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002b4e:	f7ff fcb3 	bl	80024b8 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5c:	d309      	bcc.n	8002b72 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e014      	b.n	8002b9c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e4      	bne.n	8002b4e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	460b      	mov	r3, r1
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b42      	cmp	r3, #66	; 0x42
 8002bc4:	d101      	bne.n	8002bca <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e04e      	b.n	8002c68 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2242      	movs	r2, #66	; 0x42
 8002bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 031c 	and.w	r3, r3, #28
 8002be0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8a1b      	ldrh	r3, [r3, #16]
 8002be6:	02db      	lsls	r3, r3, #11
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002bf0:	897b      	ldrh	r3, [r7, #10]
 8002bf2:	019b      	lsls	r3, r3, #6
 8002bf4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002c20:	f7ff fc4a 	bl	80024b8 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c26:	e015      	b.n	8002c54 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002c28:	f7ff fc46 	bl	80024b8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c36:	d309      	bcc.n	8002c4c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e00d      	b.n	8002c68 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e4      	bne.n	8002c28 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b0b0      	sub	sp, #192	; 0xc0
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c8c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c94:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cba:	663b      	str	r3, [r7, #96]	; 0x60
 8002cbc:	e001      	b.n	8002cc2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cc6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002cdc:	2340      	movs	r3, #64	; 0x40
 8002cde:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d48:	4bac      	ldr	r3, [pc, #688]	; (8002ffc <ETH_MACDMAConfig+0x38c>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002d54:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002d58:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002d5c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002d62:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002d66:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002d6a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002d70:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002d74:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002d78:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002d7c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002d80:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002d84:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002d86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d98:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002da4:	2001      	movs	r0, #1
 8002da6:	f7ff fb93 	bl	80024d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002db2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002db4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002db8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002dba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002dbc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002dbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002dc2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002dc8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002dca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002dce:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002dd4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002dd8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002de0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002de2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dee:	2001      	movs	r0, #1
 8002df0:	f7ff fb6e 	bl	80024d0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dfc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e06:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002e10:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e20:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e24:	4013      	ands	r3, r2
 8002e26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002e2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e2e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002e30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002e34:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002e3a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002e40:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002e46:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002e48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002e4c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002e4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e60:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f7ff fb2f 	bl	80024d0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e7a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002e7c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002e80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e96:	2001      	movs	r0, #1
 8002e98:	f7ff fb1a 	bl	80024d0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ea4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eae:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002eb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eb8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002eca:	2304      	movs	r3, #4
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ed8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002eda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ee4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002efa:	3318      	adds	r3, #24
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f06:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <ETH_MACDMAConfig+0x390>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002f0e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002f10:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002f12:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002f14:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002f16:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002f18:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002f1a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002f1c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002f1e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002f20:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002f22:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002f24:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002f26:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002f2a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002f2e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002f30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f42:	3318      	adds	r3, #24
 8002f44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f48:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f52:	3318      	adds	r3, #24
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f7ff fab8 	bl	80024d0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f68:	3318      	adds	r3, #24
 8002f6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f6e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002f74:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002f78:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002f7c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002f80:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f84:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002f86:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002f8a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f98:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa8:	2001      	movs	r0, #1
 8002faa:	f7ff fa91 	bl	80024d0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fba:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d10f      	bne.n	8002fe4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fcc:	331c      	adds	r3, #28
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe0:	331c      	adds	r3, #28
 8002fe2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2100      	movs	r1, #0
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f809 	bl	8003004 <ETH_MACAddressConfig>
}
 8002ff2:	bf00      	nop
 8002ff4:	37c0      	adds	r7, #192	; 0xc0
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	ff20810f 	.word	0xff20810f
 8003000:	f8de3f23 	.word	0xf8de3f23

08003004 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3305      	adds	r3, #5
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	3204      	adds	r2, #4
 800301c:	7812      	ldrb	r2, [r2, #0]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <ETH_MACAddressConfig+0x68>)
 8003026:	4413      	add	r3, r2
 8003028:	461a      	mov	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3303      	adds	r3, #3
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	061a      	lsls	r2, r3, #24
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3302      	adds	r3, #2
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3301      	adds	r3, #1
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	4313      	orrs	r3, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	7812      	ldrb	r2, [r2, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <ETH_MACAddressConfig+0x6c>)
 8003056:	4413      	add	r3, r2
 8003058:	461a      	mov	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	6013      	str	r3, [r2, #0]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40028040 	.word	0x40028040
 8003070:	40028044 	.word	0x40028044

08003074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	e177      	b.n	8003380 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003090:	2201      	movs	r2, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	f040 8166 	bne.w	800337a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d00b      	beq.n	80030ce <HAL_GPIO_Init+0x5a>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030c2:	2b11      	cmp	r3, #17
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b12      	cmp	r3, #18
 80030cc:	d130      	bne.n	8003130 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	2203      	movs	r2, #3
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 0201 	and.w	r2, r3, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0xfc>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b12      	cmp	r3, #18
 800316e:	d123      	bne.n	80031b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	08da      	lsrs	r2, r3, #3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3208      	adds	r2, #8
 8003178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	220f      	movs	r2, #15
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	08da      	lsrs	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3208      	adds	r2, #8
 80031b2:	69b9      	ldr	r1, [r7, #24]
 80031b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2203      	movs	r2, #3
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0203 	and.w	r2, r3, #3
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80c0 	beq.w	800337a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_GPIO_Init+0x320>)
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	4a64      	ldr	r2, [pc, #400]	; (8003394 <HAL_GPIO_Init+0x320>)
 8003204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003208:	6453      	str	r3, [r2, #68]	; 0x44
 800320a:	4b62      	ldr	r3, [pc, #392]	; (8003394 <HAL_GPIO_Init+0x320>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003216:	4a60      	ldr	r2, [pc, #384]	; (8003398 <HAL_GPIO_Init+0x324>)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	3302      	adds	r3, #2
 800321e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	220f      	movs	r2, #15
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a57      	ldr	r2, [pc, #348]	; (800339c <HAL_GPIO_Init+0x328>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d037      	beq.n	80032b2 <HAL_GPIO_Init+0x23e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a56      	ldr	r2, [pc, #344]	; (80033a0 <HAL_GPIO_Init+0x32c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d031      	beq.n	80032ae <HAL_GPIO_Init+0x23a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a55      	ldr	r2, [pc, #340]	; (80033a4 <HAL_GPIO_Init+0x330>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02b      	beq.n	80032aa <HAL_GPIO_Init+0x236>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a54      	ldr	r2, [pc, #336]	; (80033a8 <HAL_GPIO_Init+0x334>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d025      	beq.n	80032a6 <HAL_GPIO_Init+0x232>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a53      	ldr	r2, [pc, #332]	; (80033ac <HAL_GPIO_Init+0x338>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01f      	beq.n	80032a2 <HAL_GPIO_Init+0x22e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a52      	ldr	r2, [pc, #328]	; (80033b0 <HAL_GPIO_Init+0x33c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d019      	beq.n	800329e <HAL_GPIO_Init+0x22a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <HAL_GPIO_Init+0x340>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <HAL_GPIO_Init+0x226>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a50      	ldr	r2, [pc, #320]	; (80033b8 <HAL_GPIO_Init+0x344>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00d      	beq.n	8003296 <HAL_GPIO_Init+0x222>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4f      	ldr	r2, [pc, #316]	; (80033bc <HAL_GPIO_Init+0x348>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <HAL_GPIO_Init+0x21e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4e      	ldr	r2, [pc, #312]	; (80033c0 <HAL_GPIO_Init+0x34c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d101      	bne.n	800328e <HAL_GPIO_Init+0x21a>
 800328a:	2309      	movs	r3, #9
 800328c:	e012      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 800328e:	230a      	movs	r3, #10
 8003290:	e010      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 8003292:	2308      	movs	r3, #8
 8003294:	e00e      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 8003296:	2307      	movs	r3, #7
 8003298:	e00c      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 800329a:	2306      	movs	r3, #6
 800329c:	e00a      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 800329e:	2305      	movs	r3, #5
 80032a0:	e008      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 80032a2:	2304      	movs	r3, #4
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 80032a6:	2303      	movs	r3, #3
 80032a8:	e004      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e002      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 80032b2:	2300      	movs	r3, #0
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	f002 0203 	and.w	r2, r2, #3
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	4093      	lsls	r3, r2
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c4:	4934      	ldr	r1, [pc, #208]	; (8003398 <HAL_GPIO_Init+0x324>)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	3302      	adds	r3, #2
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d2:	4b3c      	ldr	r3, [pc, #240]	; (80033c4 <HAL_GPIO_Init+0x350>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f6:	4a33      	ldr	r2, [pc, #204]	; (80033c4 <HAL_GPIO_Init+0x350>)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032fc:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <HAL_GPIO_Init+0x350>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003320:	4a28      	ldr	r2, [pc, #160]	; (80033c4 <HAL_GPIO_Init+0x350>)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003326:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <HAL_GPIO_Init+0x350>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800334a:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <HAL_GPIO_Init+0x350>)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003350:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_GPIO_Init+0x350>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003374:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <HAL_GPIO_Init+0x350>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3301      	adds	r3, #1
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b0f      	cmp	r3, #15
 8003384:	f67f ae84 	bls.w	8003090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003388:	bf00      	nop
 800338a:	3724      	adds	r7, #36	; 0x24
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	40023800 	.word	0x40023800
 8003398:	40013800 	.word	0x40013800
 800339c:	40020000 	.word	0x40020000
 80033a0:	40020400 	.word	0x40020400
 80033a4:	40020800 	.word	0x40020800
 80033a8:	40020c00 	.word	0x40020c00
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40021400 	.word	0x40021400
 80033b4:	40021800 	.word	0x40021800
 80033b8:	40021c00 	.word	0x40021c00
 80033bc:	40022000 	.word	0x40022000
 80033c0:	40022400 	.word	0x40022400
 80033c4:	40013c00 	.word	0x40013c00

080033c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
 80033d4:	4613      	mov	r3, r2
 80033d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033d8:	787b      	ldrb	r3, [r7, #1]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033e4:	e003      	b.n	80033ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033e6:	887b      	ldrh	r3, [r7, #2]
 80033e8:	041a      	lsls	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	619a      	str	r2, [r3, #24]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
	...

080033fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e11f      	b.n	800364e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fe fc3a 	bl	8001c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800344e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800345e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003460:	f003 f92c 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 8003464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4a7b      	ldr	r2, [pc, #492]	; (8003658 <HAL_I2C_Init+0x25c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d807      	bhi.n	8003480 <HAL_I2C_Init+0x84>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a7a      	ldr	r2, [pc, #488]	; (800365c <HAL_I2C_Init+0x260>)
 8003474:	4293      	cmp	r3, r2
 8003476:	bf94      	ite	ls
 8003478:	2301      	movls	r3, #1
 800347a:	2300      	movhi	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e006      	b.n	800348e <HAL_I2C_Init+0x92>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a77      	ldr	r2, [pc, #476]	; (8003660 <HAL_I2C_Init+0x264>)
 8003484:	4293      	cmp	r3, r2
 8003486:	bf94      	ite	ls
 8003488:	2301      	movls	r3, #1
 800348a:	2300      	movhi	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0db      	b.n	800364e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4a72      	ldr	r2, [pc, #456]	; (8003664 <HAL_I2C_Init+0x268>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0c9b      	lsrs	r3, r3, #18
 80034a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4a64      	ldr	r2, [pc, #400]	; (8003658 <HAL_I2C_Init+0x25c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d802      	bhi.n	80034d0 <HAL_I2C_Init+0xd4>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3301      	adds	r3, #1
 80034ce:	e009      	b.n	80034e4 <HAL_I2C_Init+0xe8>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	4a63      	ldr	r2, [pc, #396]	; (8003668 <HAL_I2C_Init+0x26c>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	3301      	adds	r3, #1
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4956      	ldr	r1, [pc, #344]	; (8003658 <HAL_I2C_Init+0x25c>)
 8003500:	428b      	cmp	r3, r1
 8003502:	d80d      	bhi.n	8003520 <HAL_I2C_Init+0x124>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e59      	subs	r1, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	2b04      	cmp	r3, #4
 800351a:	bf38      	it	cc
 800351c:	2304      	movcc	r3, #4
 800351e:	e04f      	b.n	80035c0 <HAL_I2C_Init+0x1c4>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d111      	bne.n	800354c <HAL_I2C_Init+0x150>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1e58      	subs	r0, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	440b      	add	r3, r1
 8003536:	fbb0 f3f3 	udiv	r3, r0, r3
 800353a:	3301      	adds	r3, #1
 800353c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e012      	b.n	8003572 <HAL_I2C_Init+0x176>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	0099      	lsls	r1, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003562:	3301      	adds	r3, #1
 8003564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Init+0x17e>
 8003576:	2301      	movs	r3, #1
 8003578:	e022      	b.n	80035c0 <HAL_I2C_Init+0x1c4>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10e      	bne.n	80035a0 <HAL_I2C_Init+0x1a4>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1e58      	subs	r0, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	440b      	add	r3, r1
 8003590:	fbb0 f3f3 	udiv	r3, r0, r3
 8003594:	3301      	adds	r3, #1
 8003596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800359e:	e00f      	b.n	80035c0 <HAL_I2C_Init+0x1c4>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1e58      	subs	r0, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	0099      	lsls	r1, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b6:	3301      	adds	r3, #1
 80035b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	6809      	ldr	r1, [r1, #0]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6911      	ldr	r1, [r2, #16]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68d2      	ldr	r2, [r2, #12]
 80035fa:	4311      	orrs	r1, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	430b      	orrs	r3, r1
 8003602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	000186a0 	.word	0x000186a0
 800365c:	001e847f 	.word	0x001e847f
 8003660:	003d08ff 	.word	0x003d08ff
 8003664:	431bde83 	.word	0x431bde83
 8003668:	10624dd3 	.word	0x10624dd3

0800366c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	461a      	mov	r2, r3
 8003678:	460b      	mov	r3, r1
 800367a:	817b      	strh	r3, [r7, #10]
 800367c:	4613      	mov	r3, r2
 800367e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7fe ff1a 	bl	80024b8 <HAL_GetTick>
 8003684:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b20      	cmp	r3, #32
 8003690:	f040 80e0 	bne.w	8003854 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2319      	movs	r3, #25
 800369a:	2201      	movs	r2, #1
 800369c:	4970      	ldr	r1, [pc, #448]	; (8003860 <HAL_I2C_Master_Transmit+0x1f4>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f002 f841 	bl	8005726 <I2C_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
 80036ac:	e0d3      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_I2C_Master_Transmit+0x50>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e0cc      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ea>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d007      	beq.n	80036e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2221      	movs	r2, #33	; 0x21
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2210      	movs	r2, #16
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	893a      	ldrh	r2, [r7, #8]
 8003712:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a50      	ldr	r2, [pc, #320]	; (8003864 <HAL_I2C_Master_Transmit+0x1f8>)
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003724:	8979      	ldrh	r1, [r7, #10]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	6a3a      	ldr	r2, [r7, #32]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f001 fe2e 	bl	800538c <I2C_MasterRequestWrite>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e08d      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003750:	e066      	b.n	8003820 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	6a39      	ldr	r1, [r7, #32]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f002 f8bb 	bl	80058d2 <I2C_WaitOnTXEFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b04      	cmp	r3, #4
 8003768:	d107      	bne.n	800377a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003778:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e06b      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d11b      	bne.n	80037f4 <HAL_I2C_Master_Transmit+0x188>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d017      	beq.n	80037f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	781a      	ldrb	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	6a39      	ldr	r1, [r7, #32]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f002 f8ab 	bl	8005954 <I2C_WaitOnBTFFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00d      	beq.n	8003820 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	2b04      	cmp	r3, #4
 800380a:	d107      	bne.n	800381c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e01a      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	d194      	bne.n	8003752 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e000      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	00100002 	.word	0x00100002
 8003864:	ffff0000 	.word	0xffff0000

08003868 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	; 0x30
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	461a      	mov	r2, r3
 8003874:	460b      	mov	r3, r1
 8003876:	817b      	strh	r3, [r7, #10]
 8003878:	4613      	mov	r3, r2
 800387a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800387c:	f7fe fe1c 	bl	80024b8 <HAL_GetTick>
 8003880:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b20      	cmp	r3, #32
 800388c:	f040 820b 	bne.w	8003ca6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	2319      	movs	r3, #25
 8003896:	2201      	movs	r2, #1
 8003898:	497c      	ldr	r1, [pc, #496]	; (8003a8c <HAL_I2C_Master_Receive+0x224>)
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f001 ff43 	bl	8005726 <I2C_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
 80038a8:	e1fe      	b.n	8003ca8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_I2C_Master_Receive+0x50>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e1f7      	b.n	8003ca8 <HAL_I2C_Master_Receive+0x440>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d007      	beq.n	80038de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2222      	movs	r2, #34	; 0x22
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2210      	movs	r2, #16
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	893a      	ldrh	r2, [r7, #8]
 800390e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a5c      	ldr	r2, [pc, #368]	; (8003a90 <HAL_I2C_Master_Receive+0x228>)
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003920:	8979      	ldrh	r1, [r7, #10]
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f001 fdb2 	bl	8005490 <I2C_MasterRequestRead>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e1b8      	b.n	8003ca8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	2b00      	cmp	r3, #0
 800393c:	d113      	bne.n	8003966 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393e:	2300      	movs	r3, #0
 8003940:	623b      	str	r3, [r7, #32]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	623b      	str	r3, [r7, #32]
 8003952:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e18c      	b.n	8003c80 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	2b01      	cmp	r3, #1
 800396c:	d11b      	bne.n	80039a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	e16c      	b.n	8003c80 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d11b      	bne.n	80039e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ce:	2300      	movs	r3, #0
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	e14c      	b.n	8003c80 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a0c:	e138      	b.n	8003c80 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	f200 80f1 	bhi.w	8003bfa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d123      	bne.n	8003a68 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f001 ffd6 	bl	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e139      	b.n	8003ca8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a66:	e10b      	b.n	8003c80 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d14e      	bne.n	8003b0e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	2200      	movs	r2, #0
 8003a78:	4906      	ldr	r1, [pc, #24]	; (8003a94 <HAL_I2C_Master_Receive+0x22c>)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f001 fe53 	bl	8005726 <I2C_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e10e      	b.n	8003ca8 <HAL_I2C_Master_Receive+0x440>
 8003a8a:	bf00      	nop
 8003a8c:	00100002 	.word	0x00100002
 8003a90:	ffff0000 	.word	0xffff0000
 8003a94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b0c:	e0b8      	b.n	8003c80 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	2200      	movs	r2, #0
 8003b16:	4966      	ldr	r1, [pc, #408]	; (8003cb0 <HAL_I2C_Master_Receive+0x448>)
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f001 fe04 	bl	8005726 <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0bf      	b.n	8003ca8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	2200      	movs	r2, #0
 8003b72:	494f      	ldr	r1, [pc, #316]	; (8003cb0 <HAL_I2C_Master_Receive+0x448>)
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f001 fdd6 	bl	8005726 <I2C_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e091      	b.n	8003ca8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bf8:	e042      	b.n	8003c80 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f001 fee9 	bl	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e04c      	b.n	8003ca8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d118      	bne.n	8003c80 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f47f aec2 	bne.w	8003a0e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e000      	b.n	8003ca8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
  }
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3728      	adds	r7, #40	; 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	00010004 	.word	0x00010004

08003cb4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d003      	beq.n	8003cec <HAL_I2C_EV_IRQHandler+0x38>
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	f040 80b6 	bne.w	8003e58 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10d      	bne.n	8003d22 <HAL_I2C_EV_IRQHandler+0x6e>
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d0c:	d003      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0x62>
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d14:	d101      	bne.n	8003d1a <HAL_I2C_EV_IRQHandler+0x66>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_I2C_EV_IRQHandler+0x68>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	f000 8127 	beq.w	8003f70 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00c      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x92>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	0a5b      	lsrs	r3, r3, #9
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d006      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f001 fed1 	bl	8005ae0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fd12 	bl	8004768 <I2C_Master_SB>
 8003d44:	e087      	b.n	8003e56 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	08db      	lsrs	r3, r3, #3
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <HAL_I2C_EV_IRQHandler+0xb2>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	0a5b      	lsrs	r3, r3, #9
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fd88 	bl	8004874 <I2C_Master_ADD10>
 8003d64:	e077      	b.n	8003e56 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <HAL_I2C_EV_IRQHandler+0xd2>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	0a5b      	lsrs	r3, r3, #9
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fda2 	bl	80048c8 <I2C_Master_ADDR>
 8003d84:	e067      	b.n	8003e56 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d030      	beq.n	8003df4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da0:	f000 80e8 	beq.w	8003f74 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	09db      	lsrs	r3, r3, #7
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00f      	beq.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	0a9b      	lsrs	r3, r3, #10
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d009      	beq.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f9de 	bl	800418a <I2C_MasterTransmit_TXE>
 8003dce:	e042      	b.n	8003e56 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	089b      	lsrs	r3, r3, #2
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80cb 	beq.w	8003f74 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	0a5b      	lsrs	r3, r3, #9
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80c4 	beq.w	8003f74 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fa68 	bl	80042c2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df2:	e0bf      	b.n	8003f74 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e02:	f000 80b7 	beq.w	8003f74 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	099b      	lsrs	r3, r3, #6
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00f      	beq.n	8003e32 <HAL_I2C_EV_IRQHandler+0x17e>
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	0a9b      	lsrs	r3, r3, #10
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_I2C_EV_IRQHandler+0x17e>
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d103      	bne.n	8003e32 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fb30 	bl	8004490 <I2C_MasterReceive_RXNE>
 8003e30:	e011      	b.n	8003e56 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 809a 	beq.w	8003f74 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	0a5b      	lsrs	r3, r3, #9
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8093 	beq.w	8003f74 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fba0 	bl	8004594 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e54:	e08e      	b.n	8003f74 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003e56:	e08d      	b.n	8003f74 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	e007      	b.n	8003e7a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d012      	beq.n	8003eac <HAL_I2C_EV_IRQHandler+0x1f8>
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	0a5b      	lsrs	r3, r3, #9
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00c      	beq.n	8003eac <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003ea2:	69b9      	ldr	r1, [r7, #24]
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 ff5e 	bl	8004d66 <I2C_Slave_ADDR>
 8003eaa:	e066      	b.n	8003f7a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d009      	beq.n	8003ecc <HAL_I2C_EV_IRQHandler+0x218>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	0a5b      	lsrs	r3, r3, #9
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 ff93 	bl	8004df0 <I2C_Slave_STOPF>
 8003eca:	e056      	b.n	8003f7a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ecc:	7bbb      	ldrb	r3, [r7, #14]
 8003ece:	2b21      	cmp	r3, #33	; 0x21
 8003ed0:	d002      	beq.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x224>
 8003ed2:	7bbb      	ldrb	r3, [r7, #14]
 8003ed4:	2b29      	cmp	r3, #41	; 0x29
 8003ed6:	d125      	bne.n	8003f24 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	09db      	lsrs	r3, r3, #7
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00f      	beq.n	8003f04 <HAL_I2C_EV_IRQHandler+0x250>
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	0a9b      	lsrs	r3, r3, #10
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <HAL_I2C_EV_IRQHandler+0x250>
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d103      	bne.n	8003f04 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fe74 	bl	8004bea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f02:	e039      	b.n	8003f78 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d033      	beq.n	8003f78 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	0a5b      	lsrs	r3, r3, #9
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d02d      	beq.n	8003f78 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fea1 	bl	8004c64 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f22:	e029      	b.n	8003f78 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	099b      	lsrs	r3, r3, #6
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00f      	beq.n	8003f50 <HAL_I2C_EV_IRQHandler+0x29c>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	0a9b      	lsrs	r3, r3, #10
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <HAL_I2C_EV_IRQHandler+0x29c>
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	089b      	lsrs	r3, r3, #2
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 feac 	bl	8004ca6 <I2C_SlaveReceive_RXNE>
 8003f4e:	e014      	b.n	8003f7a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00e      	beq.n	8003f7a <HAL_I2C_EV_IRQHandler+0x2c6>
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	0a5b      	lsrs	r3, r3, #9
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 feda 	bl	8004d22 <I2C_SlaveReceive_BTF>
 8003f6e:	e004      	b.n	8003f7a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003f70:	bf00      	nop
 8003f72:	e002      	b.n	8003f7a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f74:	bf00      	nop
 8003f76:	e000      	b.n	8003f7a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f78:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f7a:	3720      	adds	r7, #32
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00e      	beq.n	8003fce <HAL_I2C_ER_IRQHandler+0x4e>
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fcc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	0a5b      	lsrs	r3, r3, #9
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00e      	beq.n	8003ff8 <HAL_I2C_ER_IRQHandler+0x78>
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	0a1b      	lsrs	r3, r3, #8
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003ff6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	0a9b      	lsrs	r3, r3, #10
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d03f      	beq.n	8004084 <HAL_I2C_ER_IRQHandler+0x104>
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d039      	beq.n	8004084 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004010:	7efb      	ldrb	r3, [r7, #27]
 8004012:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004022:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800402a:	7ebb      	ldrb	r3, [r7, #26]
 800402c:	2b20      	cmp	r3, #32
 800402e:	d112      	bne.n	8004056 <HAL_I2C_ER_IRQHandler+0xd6>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <HAL_I2C_ER_IRQHandler+0xd6>
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	2b21      	cmp	r3, #33	; 0x21
 800403a:	d008      	beq.n	800404e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	2b29      	cmp	r3, #41	; 0x29
 8004040:	d005      	beq.n	800404e <HAL_I2C_ER_IRQHandler+0xce>
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	2b28      	cmp	r3, #40	; 0x28
 8004046:	d106      	bne.n	8004056 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b21      	cmp	r3, #33	; 0x21
 800404c:	d103      	bne.n	8004056 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fffe 	bl	8005050 <I2C_Slave_AF>
 8004054:	e016      	b.n	8004084 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800405e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f043 0304 	orr.w	r3, r3, #4
 8004066:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004068:	7efb      	ldrb	r3, [r7, #27]
 800406a:	2b10      	cmp	r3, #16
 800406c:	d002      	beq.n	8004074 <HAL_I2C_ER_IRQHandler+0xf4>
 800406e:	7efb      	ldrb	r3, [r7, #27]
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d107      	bne.n	8004084 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004082:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	0adb      	lsrs	r3, r3, #11
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00e      	beq.n	80040ae <HAL_I2C_ER_IRQHandler+0x12e>
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	0a1b      	lsrs	r3, r3, #8
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	f043 0308 	orr.w	r3, r3, #8
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80040ac:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f001 f835 	bl	8005130 <I2C_ITError>
  }
}
 80040c6:	bf00      	nop
 80040c8:	3728      	adds	r7, #40	; 0x28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	460b      	mov	r3, r1
 8004128:	70fb      	strb	r3, [r7, #3]
 800412a:	4613      	mov	r3, r2
 800412c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004198:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041a0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d150      	bne.n	8004252 <I2C_MasterTransmit_TXE+0xc8>
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b21      	cmp	r3, #33	; 0x21
 80041b4:	d14d      	bne.n	8004252 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d01d      	beq.n	80041f8 <I2C_MasterTransmit_TXE+0x6e>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d01a      	beq.n	80041f8 <I2C_MasterTransmit_TXE+0x6e>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041c8:	d016      	beq.n	80041f8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041d8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2211      	movs	r2, #17
 80041de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ff6c 	bl	80040ce <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041f6:	e060      	b.n	80042ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004206:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004216:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d107      	bne.n	8004242 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff ff87 	bl	800414e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004240:	e03b      	b.n	80042ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff ff3f 	bl	80040ce <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004250:	e033      	b.n	80042ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b21      	cmp	r3, #33	; 0x21
 8004256:	d005      	beq.n	8004264 <I2C_MasterTransmit_TXE+0xda>
 8004258:	7bbb      	ldrb	r3, [r7, #14]
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d12d      	bne.n	80042ba <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b22      	cmp	r3, #34	; 0x22
 8004262:	d12a      	bne.n	80042ba <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d108      	bne.n	8004280 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800427e:	e01c      	b.n	80042ba <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	d103      	bne.n	8004294 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f898 	bl	80043c2 <I2C_MemoryTransmit_TXE_BTF>
}
 8004292:	e012      	b.n	80042ba <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	781a      	ldrb	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042b8:	e7ff      	b.n	80042ba <I2C_MasterTransmit_TXE+0x130>
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b21      	cmp	r3, #33	; 0x21
 80042da:	d165      	bne.n	80043a8 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d012      	beq.n	800430c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	781a      	ldrb	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800430a:	e056      	b.n	80043ba <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b08      	cmp	r3, #8
 8004310:	d01d      	beq.n	800434e <I2C_MasterTransmit_BTF+0x8c>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b20      	cmp	r3, #32
 8004316:	d01a      	beq.n	800434e <I2C_MasterTransmit_BTF+0x8c>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800431e:	d016      	beq.n	800434e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800432e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2211      	movs	r2, #17
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fec1 	bl	80040ce <HAL_I2C_MasterTxCpltCallback>
}
 800434c:	e035      	b.n	80043ba <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800435c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	d107      	bne.n	8004398 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fedc 	bl	800414e <HAL_I2C_MemTxCpltCallback>
}
 8004396:	e010      	b.n	80043ba <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff fe94 	bl	80040ce <HAL_I2C_MasterTxCpltCallback>
}
 80043a6:	e008      	b.n	80043ba <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b40      	cmp	r3, #64	; 0x40
 80043b2:	d102      	bne.n	80043ba <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f804 	bl	80043c2 <I2C_MemoryTransmit_TXE_BTF>
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d11d      	bne.n	800440e <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d10b      	bne.n	80043f2 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ea:	1c9a      	adds	r2, r3, #2
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80043f0:	e048      	b.n	8004484 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	121b      	asrs	r3, r3, #8
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800440c:	e03a      	b.n	8004484 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004412:	2b01      	cmp	r3, #1
 8004414:	d10b      	bne.n	800442e <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441a:	b2da      	uxtb	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800442c:	e02a      	b.n	8004484 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004432:	2b02      	cmp	r3, #2
 8004434:	d126      	bne.n	8004484 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b22      	cmp	r3, #34	; 0x22
 8004440:	d108      	bne.n	8004454 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004450:	601a      	str	r2, [r3, #0]
}
 8004452:	e017      	b.n	8004484 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b21      	cmp	r3, #33	; 0x21
 800445e:	d111      	bne.n	8004484 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b22      	cmp	r3, #34	; 0x22
 80044a2:	d173      	bne.n	800458c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d920      	bls.n	80044f4 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d154      	bne.n	800458c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80044f2:	e04b      	b.n	800458c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d047      	beq.n	800458c <I2C_MasterReceive_RXNE+0xfc>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d002      	beq.n	8004508 <I2C_MasterReceive_RXNE+0x78>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d141      	bne.n	800458c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004516:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004526:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d10a      	bne.n	8004578 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7fc ff5f 	bl	8001434 <HAL_I2C_MemRxCpltCallback>
}
 8004576:	e009      	b.n	800458c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2212      	movs	r2, #18
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fdab 	bl	80040e2 <HAL_I2C_MasterRxCpltCallback>
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d11b      	bne.n	80045e4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80045e2:	e0bd      	b.n	8004760 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d129      	bne.n	8004642 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b04      	cmp	r3, #4
 8004602:	d00a      	beq.n	800461a <I2C_MasterReceive_BTF+0x86>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d007      	beq.n	800461a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004618:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004640:	e08e      	b.n	8004760 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d176      	bne.n	800473a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d002      	beq.n	8004658 <I2C_MasterReceive_BTF+0xc4>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b10      	cmp	r3, #16
 8004656:	d108      	bne.n	800466a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e019      	b.n	800469e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d002      	beq.n	8004676 <I2C_MasterReceive_BTF+0xe2>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d108      	bne.n	8004688 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e00a      	b.n	800469e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b10      	cmp	r3, #16
 800468c:	d007      	beq.n	800469e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80046f8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d10a      	bne.n	8004724 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7fc fe89 	bl	8001434 <HAL_I2C_MemRxCpltCallback>
}
 8004722:	e01d      	b.n	8004760 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2212      	movs	r2, #18
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff fcd5 	bl	80040e2 <HAL_I2C_MasterRxCpltCallback>
}
 8004738:	e012      	b.n	8004760 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d117      	bne.n	80047ac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004794:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004796:	e067      	b.n	8004868 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	611a      	str	r2, [r3, #16]
}
 80047aa:	e05d      	b.n	8004868 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047b4:	d133      	bne.n	800481e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b21      	cmp	r3, #33	; 0x21
 80047c0:	d109      	bne.n	80047d6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047d2:	611a      	str	r2, [r3, #16]
 80047d4:	e008      	b.n	80047e8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <I2C_Master_SB+0x92>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d108      	bne.n	800480c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d032      	beq.n	8004868 <I2C_Master_SB+0x100>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d02d      	beq.n	8004868 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800481a:	605a      	str	r2, [r3, #4]
}
 800481c:	e024      	b.n	8004868 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10e      	bne.n	8004844 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	b29b      	uxth	r3, r3
 800482c:	11db      	asrs	r3, r3, #7
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f003 0306 	and.w	r3, r3, #6
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f063 030f 	orn	r3, r3, #15
 800483a:	b2da      	uxtb	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	611a      	str	r2, [r3, #16]
}
 8004842:	e011      	b.n	8004868 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004848:	2b01      	cmp	r3, #1
 800484a:	d10d      	bne.n	8004868 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	b29b      	uxth	r3, r3
 8004852:	11db      	asrs	r3, r3, #7
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f003 0306 	and.w	r3, r3, #6
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f063 030e 	orn	r3, r3, #14
 8004860:	b2da      	uxtb	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	611a      	str	r2, [r3, #16]
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004880:	b2da      	uxtb	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <I2C_Master_ADD10+0x24>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	2b00      	cmp	r3, #0
 8004896:	d011      	beq.n	80048bc <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <I2C_Master_ADD10+0x38>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ba:	605a      	str	r2, [r3, #4]
    }
  }
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b091      	sub	sp, #68	; 0x44
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b22      	cmp	r3, #34	; 0x22
 80048f0:	f040 8169 	bne.w	8004bc6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10f      	bne.n	800491c <I2C_Master_ADDR+0x54>
 80048fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	d10b      	bne.n	800491c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004904:	2300      	movs	r3, #0
 8004906:	633b      	str	r3, [r7, #48]	; 0x30
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	633b      	str	r3, [r7, #48]	; 0x30
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	e160      	b.n	8004bde <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004920:	2b00      	cmp	r3, #0
 8004922:	d11d      	bne.n	8004960 <I2C_Master_ADDR+0x98>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800492c:	d118      	bne.n	8004960 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492e:	2300      	movs	r3, #0
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004952:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	651a      	str	r2, [r3, #80]	; 0x50
 800495e:	e13e      	b.n	8004bde <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d113      	bne.n	8004992 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496a:	2300      	movs	r3, #0
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e115      	b.n	8004bbe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	f040 808a 	bne.w	8004ab2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049a4:	d137      	bne.n	8004a16 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c4:	d113      	bne.n	80049ee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	e0e7      	b.n	8004bbe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ee:	2300      	movs	r3, #0
 80049f0:	623b      	str	r3, [r7, #32]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	623b      	str	r3, [r7, #32]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	623b      	str	r3, [r7, #32]
 8004a02:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e0d3      	b.n	8004bbe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d02e      	beq.n	8004a7a <I2C_Master_ADDR+0x1b2>
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d02b      	beq.n	8004a7a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a24:	2b12      	cmp	r3, #18
 8004a26:	d102      	bne.n	8004a2e <I2C_Master_ADDR+0x166>
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d125      	bne.n	8004a7a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d00e      	beq.n	8004a52 <I2C_Master_ADDR+0x18a>
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d00b      	beq.n	8004a52 <I2C_Master_ADDR+0x18a>
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d008      	beq.n	8004a52 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e007      	b.n	8004a62 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a60:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	e0a1      	b.n	8004bbe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a88:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	e085      	b.n	8004bbe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d14d      	bne.n	8004b58 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d016      	beq.n	8004af0 <I2C_Master_ADDR+0x228>
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d013      	beq.n	8004af0 <I2C_Master_ADDR+0x228>
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d010      	beq.n	8004af0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004adc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	e007      	b.n	8004b00 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004afe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d117      	bne.n	8004b40 <I2C_Master_ADDR+0x278>
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b16:	d00b      	beq.n	8004b30 <I2C_Master_ADDR+0x268>
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d008      	beq.n	8004b30 <I2C_Master_ADDR+0x268>
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d005      	beq.n	8004b30 <I2C_Master_ADDR+0x268>
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d002      	beq.n	8004b30 <I2C_Master_ADDR+0x268>
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d107      	bne.n	8004b40 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	e032      	b.n	8004bbe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b66:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b76:	d117      	bne.n	8004ba8 <I2C_Master_ADDR+0x2e0>
 8004b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b7e:	d00b      	beq.n	8004b98 <I2C_Master_ADDR+0x2d0>
 8004b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d008      	beq.n	8004b98 <I2C_Master_ADDR+0x2d0>
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d005      	beq.n	8004b98 <I2C_Master_ADDR+0x2d0>
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d002      	beq.n	8004b98 <I2C_Master_ADDR+0x2d0>
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d107      	bne.n	8004ba8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ba6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004bc4:	e00b      	b.n	8004bde <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
}
 8004bdc:	e7ff      	b.n	8004bde <I2C_Master_ADDR+0x316>
 8004bde:	bf00      	nop
 8004be0:	3744      	adds	r7, #68	; 0x44
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d02b      	beq.n	8004c5c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	781a      	ldrb	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d114      	bne.n	8004c5c <I2C_SlaveTransmit_TXE+0x72>
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b29      	cmp	r3, #41	; 0x29
 8004c36:	d111      	bne.n	8004c5c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2221      	movs	r2, #33	; 0x21
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2228      	movs	r2, #40	; 0x28
 8004c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff fa4d 	bl	80040f6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d011      	beq.n	8004c9a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d02c      	beq.n	8004d1a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d114      	bne.n	8004d1a <I2C_SlaveReceive_RXNE+0x74>
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cf4:	d111      	bne.n	8004d1a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d04:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2222      	movs	r2, #34	; 0x22
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2228      	movs	r2, #40	; 0x28
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff f9f8 	bl	800410a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d012      	beq.n	8004d5a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d80:	2b28      	cmp	r3, #40	; 0x28
 8004d82:	d127      	bne.n	8004dd4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d92:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	089b      	lsrs	r3, r3, #2
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	09db      	lsrs	r3, r3, #7
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d103      	bne.n	8004db8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	81bb      	strh	r3, [r7, #12]
 8004db6:	e002      	b.n	8004dbe <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004dc6:	89ba      	ldrh	r2, [r7, #12]
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff f9a6 	bl	800411e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004dd2:	e008      	b.n	8004de6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0202 	mvn.w	r2, #2
 8004ddc:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004e10:	2300      	movs	r3, #0
 8004e12:	60bb      	str	r3, [r7, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	60bb      	str	r3, [r7, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4c:	d172      	bne.n	8004f34 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	2b22      	cmp	r3, #34	; 0x22
 8004e52:	d002      	beq.n	8004e5a <I2C_Slave_STOPF+0x6a>
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b2a      	cmp	r3, #42	; 0x2a
 8004e58:	d135      	bne.n	8004ec6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f043 0204 	orr.w	r2, r3, #4
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd fc71 	bl	800277a <HAL_DMA_GetState>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d049      	beq.n	8004f32 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	4a69      	ldr	r2, [pc, #420]	; (8005048 <I2C_Slave_STOPF+0x258>)
 8004ea4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fd fc43 	bl	8002736 <HAL_DMA_Abort_IT>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d03d      	beq.n	8004f32 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ec4:	e035      	b.n	8004f32 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f043 0204 	orr.w	r2, r3, #4
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fd fc3b 	bl	800277a <HAL_DMA_GetState>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d014      	beq.n	8004f34 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	4a4e      	ldr	r2, [pc, #312]	; (8005048 <I2C_Slave_STOPF+0x258>)
 8004f10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fd fc0d 	bl	8002736 <HAL_DMA_Abort_IT>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	4798      	blx	r3
 8004f30:	e000      	b.n	8004f34 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f32:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d03e      	beq.n	8004fbc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d112      	bne.n	8004f72 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d112      	bne.n	8004fa6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	f043 0204 	orr.w	r2, r3, #4
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f8b3 	bl	8005130 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004fca:	e039      	b.n	8005040 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	2b2a      	cmp	r3, #42	; 0x2a
 8004fd0:	d109      	bne.n	8004fe6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2228      	movs	r2, #40	; 0x28
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff f892 	bl	800410a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b28      	cmp	r3, #40	; 0x28
 8004ff0:	d111      	bne.n	8005016 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a15      	ldr	r2, [pc, #84]	; (800504c <I2C_Slave_STOPF+0x25c>)
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff f893 	bl	800413a <HAL_I2C_ListenCpltCallback>
}
 8005014:	e014      	b.n	8005040 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	2b22      	cmp	r3, #34	; 0x22
 800501c:	d002      	beq.n	8005024 <I2C_Slave_STOPF+0x234>
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	2b22      	cmp	r3, #34	; 0x22
 8005022:	d10d      	bne.n	8005040 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff f865 	bl	800410a <HAL_I2C_SlaveRxCpltCallback>
}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	08005629 	.word	0x08005629
 800504c:	ffff0000 	.word	0xffff0000

08005050 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b08      	cmp	r3, #8
 800506a:	d002      	beq.n	8005072 <I2C_Slave_AF+0x22>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b20      	cmp	r3, #32
 8005070:	d129      	bne.n	80050c6 <I2C_Slave_AF+0x76>
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b28      	cmp	r3, #40	; 0x28
 8005076:	d126      	bne.n	80050c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a2c      	ldr	r2, [pc, #176]	; (800512c <I2C_Slave_AF+0xdc>)
 800507c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800508c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005096:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff f83b 	bl	800413a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80050c4:	e02e      	b.n	8005124 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	2b21      	cmp	r3, #33	; 0x21
 80050ca:	d126      	bne.n	800511a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <I2C_Slave_AF+0xdc>)
 80050d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2221      	movs	r2, #33	; 0x21
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005100:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005110:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fe ffef 	bl	80040f6 <HAL_I2C_SlaveTxCpltCallback>
}
 8005118:	e004      	b.n	8005124 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005122:	615a      	str	r2, [r3, #20]
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	ffff0000 	.word	0xffff0000

08005130 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b10      	cmp	r3, #16
 800514a:	d10a      	bne.n	8005162 <I2C_ITError+0x32>
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b22      	cmp	r3, #34	; 0x22
 8005150:	d107      	bne.n	8005162 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005160:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005168:	2b28      	cmp	r3, #40	; 0x28
 800516a:	d107      	bne.n	800517c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2228      	movs	r2, #40	; 0x28
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800517a:	e015      	b.n	80051a8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518a:	d006      	beq.n	800519a <I2C_ITError+0x6a>
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	2b60      	cmp	r3, #96	; 0x60
 8005190:	d003      	beq.n	800519a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b6:	d162      	bne.n	800527e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d020      	beq.n	8005218 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051da:	4a6a      	ldr	r2, [pc, #424]	; (8005384 <I2C_ITError+0x254>)
 80051dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fd faa7 	bl	8002736 <HAL_DMA_Abort_IT>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 8089 	beq.w	8005302 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005212:	4610      	mov	r0, r2
 8005214:	4798      	blx	r3
 8005216:	e074      	b.n	8005302 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	4a59      	ldr	r2, [pc, #356]	; (8005384 <I2C_ITError+0x254>)
 800521e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005224:	4618      	mov	r0, r3
 8005226:	f7fd fa86 	bl	8002736 <HAL_DMA_Abort_IT>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d068      	beq.n	8005302 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523a:	2b40      	cmp	r3, #64	; 0x40
 800523c:	d10b      	bne.n	8005256 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0201 	bic.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005278:	4610      	mov	r0, r2
 800527a:	4798      	blx	r3
 800527c:	e041      	b.n	8005302 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b60      	cmp	r3, #96	; 0x60
 8005288:	d125      	bne.n	80052d6 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b40      	cmp	r3, #64	; 0x40
 80052a4:	d10b      	bne.n	80052be <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0201 	bic.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fe ff51 	bl	8004176 <HAL_I2C_AbortCpltCallback>
 80052d4:	e015      	b.n	8005302 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d10b      	bne.n	80052fc <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7fe ff30 	bl	8004162 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10e      	bne.n	8005330 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005318:	2b00      	cmp	r3, #0
 800531a:	d109      	bne.n	8005330 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800533e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005346:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b04      	cmp	r3, #4
 8005352:	d113      	bne.n	800537c <I2C_ITError+0x24c>
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	2b28      	cmp	r3, #40	; 0x28
 8005358:	d110      	bne.n	800537c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <I2C_ITError+0x258>)
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fe fedf 	bl	800413a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	08005629 	.word	0x08005629
 8005388:	ffff0000 	.word	0xffff0000

0800538c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	460b      	mov	r3, r1
 800539a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d006      	beq.n	80053b6 <I2C_MasterRequestWrite+0x2a>
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d003      	beq.n	80053b6 <I2C_MasterRequestWrite+0x2a>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053b4:	d108      	bne.n	80053c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e00b      	b.n	80053e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	2b12      	cmp	r3, #18
 80053ce:	d107      	bne.n	80053e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f99a 	bl	8005726 <I2C_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800540c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e035      	b.n	800547e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800541a:	d108      	bne.n	800542e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800541c:	897b      	ldrh	r3, [r7, #10]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800542a:	611a      	str	r2, [r3, #16]
 800542c:	e01b      	b.n	8005466 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	11db      	asrs	r3, r3, #7
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f003 0306 	and.w	r3, r3, #6
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f063 030f 	orn	r3, r3, #15
 800543e:	b2da      	uxtb	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	490f      	ldr	r1, [pc, #60]	; (8005488 <I2C_MasterRequestWrite+0xfc>)
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f9c1 	bl	80057d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e010      	b.n	800547e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800545c:	897b      	ldrh	r3, [r7, #10]
 800545e:	b2da      	uxtb	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4908      	ldr	r1, [pc, #32]	; (800548c <I2C_MasterRequestWrite+0x100>)
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f9b1 	bl	80057d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	00010008 	.word	0x00010008
 800548c:	00010002 	.word	0x00010002

08005490 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	460b      	mov	r3, r1
 800549e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d006      	beq.n	80054ca <I2C_MasterRequestRead+0x3a>
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d003      	beq.n	80054ca <I2C_MasterRequestRead+0x3a>
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054c8:	d108      	bne.n	80054dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e00b      	b.n	80054f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	2b11      	cmp	r3, #17
 80054e2:	d107      	bne.n	80054f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f910 	bl	8005726 <I2C_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00c      	beq.n	8005526 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e078      	b.n	8005618 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800552e:	d108      	bne.n	8005542 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005530:	897b      	ldrh	r3, [r7, #10]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	b2da      	uxtb	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	611a      	str	r2, [r3, #16]
 8005540:	e05e      	b.n	8005600 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005542:	897b      	ldrh	r3, [r7, #10]
 8005544:	11db      	asrs	r3, r3, #7
 8005546:	b2db      	uxtb	r3, r3
 8005548:	f003 0306 	and.w	r3, r3, #6
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f063 030f 	orn	r3, r3, #15
 8005552:	b2da      	uxtb	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	4930      	ldr	r1, [pc, #192]	; (8005620 <I2C_MasterRequestRead+0x190>)
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f937 	bl	80057d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e053      	b.n	8005618 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005570:	897b      	ldrh	r3, [r7, #10]
 8005572:	b2da      	uxtb	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4929      	ldr	r1, [pc, #164]	; (8005624 <I2C_MasterRequestRead+0x194>)
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f927 	bl	80057d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e043      	b.n	8005618 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005590:	2300      	movs	r3, #0
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b4:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f8af 	bl	8005726 <I2C_WaitOnFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e017      	b.n	8005618 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80055e8:	897b      	ldrh	r3, [r7, #10]
 80055ea:	11db      	asrs	r3, r3, #7
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	f003 0306 	and.w	r3, r3, #6
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f063 030e 	orn	r3, r3, #14
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4907      	ldr	r1, [pc, #28]	; (8005624 <I2C_MasterRequestRead+0x194>)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f8e4 	bl	80057d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	00010008 	.word	0x00010008
 8005624:	00010002 	.word	0x00010002

08005628 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	2200      	movs	r2, #0
 800564c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	2200      	movs	r2, #0
 800565c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800566c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005680:	2200      	movs	r2, #0
 8005682:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	2200      	movs	r2, #0
 8005692:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b60      	cmp	r3, #96	; 0x60
 80056ae:	d10e      	bne.n	80056ce <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7fe fd55 	bl	8004176 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056cc:	e027      	b.n	800571e <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ce:	7afb      	ldrb	r3, [r7, #11]
 80056d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056d4:	2b28      	cmp	r3, #40	; 0x28
 80056d6:	d117      	bne.n	8005708 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2228      	movs	r2, #40	; 0x28
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005706:	e007      	b.n	8005718 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f7fe fd22 	bl	8004162 <HAL_I2C_ErrorCallback>
}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	603b      	str	r3, [r7, #0]
 8005732:	4613      	mov	r3, r2
 8005734:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005736:	e025      	b.n	8005784 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573e:	d021      	beq.n	8005784 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005740:	f7fc feba 	bl	80024b8 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d302      	bcc.n	8005756 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d116      	bne.n	8005784 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	f043 0220 	orr.w	r2, r3, #32
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e023      	b.n	80057cc <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	0c1b      	lsrs	r3, r3, #16
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b01      	cmp	r3, #1
 800578c:	d10d      	bne.n	80057aa <I2C_WaitOnFlagUntilTimeout+0x84>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	43da      	mvns	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	4013      	ands	r3, r2
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	bf0c      	ite	eq
 80057a0:	2301      	moveq	r3, #1
 80057a2:	2300      	movne	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	e00c      	b.n	80057c4 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	43da      	mvns	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	4013      	ands	r3, r2
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d0b6      	beq.n	8005738 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057e2:	e051      	b.n	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f2:	d123      	bne.n	800583c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005802:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800580c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	f043 0204 	orr.w	r2, r3, #4
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e046      	b.n	80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d021      	beq.n	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005844:	f7fc fe38 	bl	80024b8 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	429a      	cmp	r2, r3
 8005852:	d302      	bcc.n	800585a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d116      	bne.n	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e020      	b.n	80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	0c1b      	lsrs	r3, r3, #16
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b01      	cmp	r3, #1
 8005890:	d10c      	bne.n	80058ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	43da      	mvns	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4013      	ands	r3, r2
 800589e:	b29b      	uxth	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	bf14      	ite	ne
 80058a4:	2301      	movne	r3, #1
 80058a6:	2300      	moveq	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	e00b      	b.n	80058c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	43da      	mvns	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4013      	ands	r3, r2
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bf14      	ite	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	2300      	moveq	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d18d      	bne.n	80057e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058de:	e02d      	b.n	800593c <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f8ce 	bl	8005a82 <I2C_IsAcknowledgeFailed>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e02d      	b.n	800594c <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d021      	beq.n	800593c <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f8:	f7fc fdde 	bl	80024b8 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d116      	bne.n	800593c <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	f043 0220 	orr.w	r2, r3, #32
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e007      	b.n	800594c <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	d1ca      	bne.n	80058e0 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005960:	e02d      	b.n	80059be <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f88d 	bl	8005a82 <I2C_IsAcknowledgeFailed>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e02d      	b.n	80059ce <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d021      	beq.n	80059be <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fc fd9d 	bl	80024b8 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d116      	bne.n	80059be <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e007      	b.n	80059ce <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d1ca      	bne.n	8005962 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059e2:	e042      	b.n	8005a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d119      	bne.n	8005a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f06f 0210 	mvn.w	r2, #16
 80059fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e029      	b.n	8005a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a26:	f7fc fd47 	bl	80024b8 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d302      	bcc.n	8005a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d116      	bne.n	8005a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f043 0220 	orr.w	r2, r3, #32
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e007      	b.n	8005a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	d1b5      	bne.n	80059e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a98:	d11b      	bne.n	8005ad2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aa2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f043 0204 	orr.w	r2, r3, #4
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005af0:	d103      	bne.n	8005afa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005af8:	e007      	b.n	8005b0a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b02:	d102      	bne.n	8005b0a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2208      	movs	r2, #8
 8005b08:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d129      	bne.n	8005b80 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2224      	movs	r2, #36	; 0x24
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0201 	bic.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0210 	bic.w	r2, r2, #16
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e000      	b.n	8005b82 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005b80:	2302      	movs	r3, #2
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	d12a      	bne.n	8005bfe <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2224      	movs	r2, #36	; 0x24
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005bc8:	89fb      	ldrh	r3, [r7, #14]
 8005bca:	f023 030f 	bic.w	r3, r3, #15
 8005bce:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	89fb      	ldrh	r3, [r7, #14]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	89fa      	ldrh	r2, [r7, #14]
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e000      	b.n	8005c00 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005bfe:	2302      	movs	r3, #2
  }
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0e:	b08f      	sub	sp, #60	; 0x3c
 8005c10:	af0a      	add	r7, sp, #40	; 0x28
 8005c12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e10f      	b.n	8005e3e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fc fb53 	bl	80022e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2203      	movs	r2, #3
 8005c42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 fb52 	bl	8007306 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	687e      	ldr	r6, [r7, #4]
 8005c6a:	466d      	mov	r5, sp
 8005c6c:	f106 0410 	add.w	r4, r6, #16
 8005c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c80:	1d33      	adds	r3, r6, #4
 8005c82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c84:	6838      	ldr	r0, [r7, #0]
 8005c86:	f001 fadd 	bl	8007244 <USB_CoreInit>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0d0      	b.n	8005e3e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 fb40 	bl	8007328 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	73fb      	strb	r3, [r7, #15]
 8005cac:	e04a      	b.n	8005d44 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005cae:	7bfa      	ldrb	r2, [r7, #15]
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	333d      	adds	r3, #61	; 0x3d
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005cc2:	7bfa      	ldrb	r2, [r7, #15]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	333c      	adds	r3, #60	; 0x3c
 8005cd2:	7bfa      	ldrb	r2, [r7, #15]
 8005cd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cd6:	7bfa      	ldrb	r2, [r7, #15]
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	b298      	uxth	r0, r3
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	1a9b      	subs	r3, r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	3342      	adds	r3, #66	; 0x42
 8005cea:	4602      	mov	r2, r0
 8005cec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005cee:	7bfa      	ldrb	r2, [r7, #15]
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	333f      	adds	r3, #63	; 0x3f
 8005cfe:	2200      	movs	r2, #0
 8005d00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d02:	7bfa      	ldrb	r2, [r7, #15]
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	1a9b      	subs	r3, r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3344      	adds	r3, #68	; 0x44
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d16:	7bfa      	ldrb	r2, [r7, #15]
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	440b      	add	r3, r1
 8005d24:	3348      	adds	r3, #72	; 0x48
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d2a:	7bfa      	ldrb	r2, [r7, #15]
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	3350      	adds	r3, #80	; 0x50
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	3301      	adds	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	7bfa      	ldrb	r2, [r7, #15]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d3af      	bcc.n	8005cae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]
 8005d52:	e044      	b.n	8005dde <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d54:	7bfa      	ldrb	r2, [r7, #15]
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	1a9b      	subs	r3, r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005d66:	2200      	movs	r2, #0
 8005d68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d6a:	7bfa      	ldrb	r2, [r7, #15]
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	1a9b      	subs	r3, r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	440b      	add	r3, r1
 8005d78:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005d7c:	7bfa      	ldrb	r2, [r7, #15]
 8005d7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d80:	7bfa      	ldrb	r2, [r7, #15]
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	4613      	mov	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	1a9b      	subs	r3, r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d96:	7bfa      	ldrb	r2, [r7, #15]
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	440b      	add	r3, r1
 8005da4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005dac:	7bfa      	ldrb	r2, [r7, #15]
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005dc2:	7bfa      	ldrb	r2, [r7, #15]
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	1a9b      	subs	r3, r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	440b      	add	r3, r1
 8005dd0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	73fb      	strb	r3, [r7, #15]
 8005dde:	7bfa      	ldrb	r2, [r7, #15]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d3b5      	bcc.n	8005d54 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	687e      	ldr	r6, [r7, #4]
 8005df0:	466d      	mov	r5, sp
 8005df2:	f106 0410 	add.w	r4, r6, #16
 8005df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e02:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e06:	1d33      	adds	r3, r6, #4
 8005e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e0a:	6838      	ldr	r0, [r7, #0]
 8005e0c:	f001 fab6 	bl	800737c <USB_DevInit>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e00d      	b.n	8005e3e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 fc65 	bl	8007706 <USB_DevDisconnect>

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005e48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e25b      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d075      	beq.n	8005f52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e66:	4ba3      	ldr	r3, [pc, #652]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d00c      	beq.n	8005e8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e72:	4ba0      	ldr	r3, [pc, #640]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d112      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e7e:	4b9d      	ldr	r3, [pc, #628]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e8a:	d10b      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e8c:	4b99      	ldr	r3, [pc, #612]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d05b      	beq.n	8005f50 <HAL_RCC_OscConfig+0x108>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d157      	bne.n	8005f50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e236      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eac:	d106      	bne.n	8005ebc <HAL_RCC_OscConfig+0x74>
 8005eae:	4b91      	ldr	r3, [pc, #580]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a90      	ldr	r2, [pc, #576]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	e01d      	b.n	8005ef8 <HAL_RCC_OscConfig+0xb0>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x98>
 8005ec6:	4b8b      	ldr	r3, [pc, #556]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a8a      	ldr	r2, [pc, #552]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	4b88      	ldr	r3, [pc, #544]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a87      	ldr	r2, [pc, #540]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	e00b      	b.n	8005ef8 <HAL_RCC_OscConfig+0xb0>
 8005ee0:	4b84      	ldr	r3, [pc, #528]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a83      	ldr	r2, [pc, #524]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	4b81      	ldr	r3, [pc, #516]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a80      	ldr	r2, [pc, #512]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d013      	beq.n	8005f28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f00:	f7fc fada 	bl	80024b8 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f08:	f7fc fad6 	bl	80024b8 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b64      	cmp	r3, #100	; 0x64
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e1fb      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f1a:	4b76      	ldr	r3, [pc, #472]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCC_OscConfig+0xc0>
 8005f26:	e014      	b.n	8005f52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f28:	f7fc fac6 	bl	80024b8 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f30:	f7fc fac2 	bl	80024b8 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b64      	cmp	r3, #100	; 0x64
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e1e7      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f42:	4b6c      	ldr	r3, [pc, #432]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1f0      	bne.n	8005f30 <HAL_RCC_OscConfig+0xe8>
 8005f4e:	e000      	b.n	8005f52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d063      	beq.n	8006026 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f5e:	4b65      	ldr	r3, [pc, #404]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 030c 	and.w	r3, r3, #12
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00b      	beq.n	8005f82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f6a:	4b62      	ldr	r3, [pc, #392]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d11c      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f76:	4b5f      	ldr	r3, [pc, #380]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d116      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f82:	4b5c      	ldr	r3, [pc, #368]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_RCC_OscConfig+0x152>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d001      	beq.n	8005f9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e1bb      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9a:	4b56      	ldr	r3, [pc, #344]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	4952      	ldr	r1, [pc, #328]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fae:	e03a      	b.n	8006026 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d020      	beq.n	8005ffa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fb8:	4b4f      	ldr	r3, [pc, #316]	; (80060f8 <HAL_RCC_OscConfig+0x2b0>)
 8005fba:	2201      	movs	r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbe:	f7fc fa7b 	bl	80024b8 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc6:	f7fc fa77 	bl	80024b8 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e19c      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd8:	4b46      	ldr	r3, [pc, #280]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe4:	4b43      	ldr	r3, [pc, #268]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4940      	ldr	r1, [pc, #256]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	600b      	str	r3, [r1, #0]
 8005ff8:	e015      	b.n	8006026 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ffa:	4b3f      	ldr	r3, [pc, #252]	; (80060f8 <HAL_RCC_OscConfig+0x2b0>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006000:	f7fc fa5a 	bl	80024b8 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006008:	f7fc fa56 	bl	80024b8 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e17b      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800601a:	4b36      	ldr	r3, [pc, #216]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1f0      	bne.n	8006008 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d030      	beq.n	8006094 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d016      	beq.n	8006068 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800603a:	4b30      	ldr	r3, [pc, #192]	; (80060fc <HAL_RCC_OscConfig+0x2b4>)
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006040:	f7fc fa3a 	bl	80024b8 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006048:	f7fc fa36 	bl	80024b8 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e15b      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800605a:	4b26      	ldr	r3, [pc, #152]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 800605c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0f0      	beq.n	8006048 <HAL_RCC_OscConfig+0x200>
 8006066:	e015      	b.n	8006094 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006068:	4b24      	ldr	r3, [pc, #144]	; (80060fc <HAL_RCC_OscConfig+0x2b4>)
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800606e:	f7fc fa23 	bl	80024b8 <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006076:	f7fc fa1f 	bl	80024b8 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e144      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006088:	4b1a      	ldr	r3, [pc, #104]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 800608a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1f0      	bne.n	8006076 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80a0 	beq.w	80061e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060a2:	2300      	movs	r3, #0
 80060a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060a6:	4b13      	ldr	r3, [pc, #76]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10f      	bne.n	80060d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060b2:	2300      	movs	r3, #0
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	4a0e      	ldr	r2, [pc, #56]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 80060bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c0:	6413      	str	r3, [r2, #64]	; 0x40
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <HAL_RCC_OscConfig+0x2ac>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ce:	2301      	movs	r3, #1
 80060d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <HAL_RCC_OscConfig+0x2b8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d121      	bne.n	8006122 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060de:	4b08      	ldr	r3, [pc, #32]	; (8006100 <HAL_RCC_OscConfig+0x2b8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a07      	ldr	r2, [pc, #28]	; (8006100 <HAL_RCC_OscConfig+0x2b8>)
 80060e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ea:	f7fc f9e5 	bl	80024b8 <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f0:	e011      	b.n	8006116 <HAL_RCC_OscConfig+0x2ce>
 80060f2:	bf00      	nop
 80060f4:	40023800 	.word	0x40023800
 80060f8:	42470000 	.word	0x42470000
 80060fc:	42470e80 	.word	0x42470e80
 8006100:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006104:	f7fc f9d8 	bl	80024b8 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e0fd      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006116:	4b81      	ldr	r3, [pc, #516]	; (800631c <HAL_RCC_OscConfig+0x4d4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f0      	beq.n	8006104 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d106      	bne.n	8006138 <HAL_RCC_OscConfig+0x2f0>
 800612a:	4b7d      	ldr	r3, [pc, #500]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	4a7c      	ldr	r2, [pc, #496]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	6713      	str	r3, [r2, #112]	; 0x70
 8006136:	e01c      	b.n	8006172 <HAL_RCC_OscConfig+0x32a>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b05      	cmp	r3, #5
 800613e:	d10c      	bne.n	800615a <HAL_RCC_OscConfig+0x312>
 8006140:	4b77      	ldr	r3, [pc, #476]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	4a76      	ldr	r2, [pc, #472]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 8006146:	f043 0304 	orr.w	r3, r3, #4
 800614a:	6713      	str	r3, [r2, #112]	; 0x70
 800614c:	4b74      	ldr	r3, [pc, #464]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 800614e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006150:	4a73      	ldr	r2, [pc, #460]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	6713      	str	r3, [r2, #112]	; 0x70
 8006158:	e00b      	b.n	8006172 <HAL_RCC_OscConfig+0x32a>
 800615a:	4b71      	ldr	r3, [pc, #452]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	4a70      	ldr	r2, [pc, #448]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	6713      	str	r3, [r2, #112]	; 0x70
 8006166:	4b6e      	ldr	r3, [pc, #440]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 8006168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616a:	4a6d      	ldr	r2, [pc, #436]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 800616c:	f023 0304 	bic.w	r3, r3, #4
 8006170:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d015      	beq.n	80061a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800617a:	f7fc f99d 	bl	80024b8 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006180:	e00a      	b.n	8006198 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006182:	f7fc f999 	bl	80024b8 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e0bc      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006198:	4b61      	ldr	r3, [pc, #388]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 800619a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0ee      	beq.n	8006182 <HAL_RCC_OscConfig+0x33a>
 80061a4:	e014      	b.n	80061d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a6:	f7fc f987 	bl	80024b8 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ac:	e00a      	b.n	80061c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061ae:	f7fc f983 	bl	80024b8 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061bc:	4293      	cmp	r3, r2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e0a6      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061c4:	4b56      	ldr	r3, [pc, #344]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 80061c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1ee      	bne.n	80061ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d105      	bne.n	80061e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061d6:	4b52      	ldr	r3, [pc, #328]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	4a51      	ldr	r2, [pc, #324]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 80061dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 8092 	beq.w	8006310 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061ec:	4b4c      	ldr	r3, [pc, #304]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 030c 	and.w	r3, r3, #12
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d05c      	beq.n	80062b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d141      	bne.n	8006284 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006200:	4b48      	ldr	r3, [pc, #288]	; (8006324 <HAL_RCC_OscConfig+0x4dc>)
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006206:	f7fc f957 	bl	80024b8 <HAL_GetTick>
 800620a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800620e:	f7fc f953 	bl	80024b8 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e078      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006220:	4b3f      	ldr	r3, [pc, #252]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f0      	bne.n	800620e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	019b      	lsls	r3, r3, #6
 800623c:	431a      	orrs	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	085b      	lsrs	r3, r3, #1
 8006244:	3b01      	subs	r3, #1
 8006246:	041b      	lsls	r3, r3, #16
 8006248:	431a      	orrs	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	061b      	lsls	r3, r3, #24
 8006250:	4933      	ldr	r1, [pc, #204]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 8006252:	4313      	orrs	r3, r2
 8006254:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006256:	4b33      	ldr	r3, [pc, #204]	; (8006324 <HAL_RCC_OscConfig+0x4dc>)
 8006258:	2201      	movs	r2, #1
 800625a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625c:	f7fc f92c 	bl	80024b8 <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006264:	f7fc f928 	bl	80024b8 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e04d      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006276:	4b2a      	ldr	r3, [pc, #168]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0f0      	beq.n	8006264 <HAL_RCC_OscConfig+0x41c>
 8006282:	e045      	b.n	8006310 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006284:	4b27      	ldr	r3, [pc, #156]	; (8006324 <HAL_RCC_OscConfig+0x4dc>)
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628a:	f7fc f915 	bl	80024b8 <HAL_GetTick>
 800628e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006292:	f7fc f911 	bl	80024b8 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e036      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a4:	4b1e      	ldr	r3, [pc, #120]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1f0      	bne.n	8006292 <HAL_RCC_OscConfig+0x44a>
 80062b0:	e02e      	b.n	8006310 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e029      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062be:	4b18      	ldr	r3, [pc, #96]	; (8006320 <HAL_RCC_OscConfig+0x4d8>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d11c      	bne.n	800630c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062dc:	429a      	cmp	r2, r3
 80062de:	d115      	bne.n	800630c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062e6:	4013      	ands	r3, r2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d10d      	bne.n	800630c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d106      	bne.n	800630c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006308:	429a      	cmp	r2, r3
 800630a:	d001      	beq.n	8006310 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	40007000 	.word	0x40007000
 8006320:	40023800 	.word	0x40023800
 8006324:	42470060 	.word	0x42470060

08006328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0cc      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800633c:	4b68      	ldr	r3, [pc, #416]	; (80064e0 <HAL_RCC_ClockConfig+0x1b8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d90c      	bls.n	8006364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634a:	4b65      	ldr	r3, [pc, #404]	; (80064e0 <HAL_RCC_ClockConfig+0x1b8>)
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006352:	4b63      	ldr	r3, [pc, #396]	; (80064e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d001      	beq.n	8006364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e0b8      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d020      	beq.n	80063b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800637c:	4b59      	ldr	r3, [pc, #356]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	4a58      	ldr	r2, [pc, #352]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006386:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006394:	4b53      	ldr	r3, [pc, #332]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4a52      	ldr	r2, [pc, #328]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800639e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063a0:	4b50      	ldr	r3, [pc, #320]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	494d      	ldr	r1, [pc, #308]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d044      	beq.n	8006448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d107      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063c6:	4b47      	ldr	r3, [pc, #284]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d119      	bne.n	8006406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e07f      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d003      	beq.n	80063e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d107      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e6:	4b3f      	ldr	r3, [pc, #252]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e06f      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f6:	4b3b      	ldr	r3, [pc, #236]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e067      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006406:	4b37      	ldr	r3, [pc, #220]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f023 0203 	bic.w	r2, r3, #3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	4934      	ldr	r1, [pc, #208]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006414:	4313      	orrs	r3, r2
 8006416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006418:	f7fc f84e 	bl	80024b8 <HAL_GetTick>
 800641c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641e:	e00a      	b.n	8006436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006420:	f7fc f84a 	bl	80024b8 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	f241 3288 	movw	r2, #5000	; 0x1388
 800642e:	4293      	cmp	r3, r2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e04f      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006436:	4b2b      	ldr	r3, [pc, #172]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 020c 	and.w	r2, r3, #12
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	429a      	cmp	r2, r3
 8006446:	d1eb      	bne.n	8006420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006448:	4b25      	ldr	r3, [pc, #148]	; (80064e0 <HAL_RCC_ClockConfig+0x1b8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d20c      	bcs.n	8006470 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006456:	4b22      	ldr	r3, [pc, #136]	; (80064e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800645e:	4b20      	ldr	r3, [pc, #128]	; (80064e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d001      	beq.n	8006470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e032      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800647c:	4b19      	ldr	r3, [pc, #100]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	4916      	ldr	r1, [pc, #88]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	4313      	orrs	r3, r2
 800648c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800649a:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	490e      	ldr	r1, [pc, #56]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064ae:	f000 f821 	bl	80064f4 <HAL_RCC_GetSysClockFreq>
 80064b2:	4601      	mov	r1, r0
 80064b4:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	091b      	lsrs	r3, r3, #4
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	4a0a      	ldr	r2, [pc, #40]	; (80064e8 <HAL_RCC_ClockConfig+0x1c0>)
 80064c0:	5cd3      	ldrb	r3, [r2, r3]
 80064c2:	fa21 f303 	lsr.w	r3, r1, r3
 80064c6:	4a09      	ldr	r2, [pc, #36]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 80064c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064ca:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <HAL_RCC_ClockConfig+0x1c8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fb ffae 	bl	8002430 <HAL_InitTick>

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	40023c00 	.word	0x40023c00
 80064e4:	40023800 	.word	0x40023800
 80064e8:	0800a0b0 	.word	0x0800a0b0
 80064ec:	20000000 	.word	0x20000000
 80064f0:	20000004 	.word	0x20000004

080064f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	607b      	str	r3, [r7, #4]
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	2300      	movs	r3, #0
 8006504:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800650a:	4b63      	ldr	r3, [pc, #396]	; (8006698 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 030c 	and.w	r3, r3, #12
 8006512:	2b04      	cmp	r3, #4
 8006514:	d007      	beq.n	8006526 <HAL_RCC_GetSysClockFreq+0x32>
 8006516:	2b08      	cmp	r3, #8
 8006518:	d008      	beq.n	800652c <HAL_RCC_GetSysClockFreq+0x38>
 800651a:	2b00      	cmp	r3, #0
 800651c:	f040 80b4 	bne.w	8006688 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006520:	4b5e      	ldr	r3, [pc, #376]	; (800669c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006522:	60bb      	str	r3, [r7, #8]
       break;
 8006524:	e0b3      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006526:	4b5e      	ldr	r3, [pc, #376]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006528:	60bb      	str	r3, [r7, #8]
      break;
 800652a:	e0b0      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800652c:	4b5a      	ldr	r3, [pc, #360]	; (8006698 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006534:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006536:	4b58      	ldr	r3, [pc, #352]	; (8006698 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d04a      	beq.n	80065d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006542:	4b55      	ldr	r3, [pc, #340]	; (8006698 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	099b      	lsrs	r3, r3, #6
 8006548:	f04f 0400 	mov.w	r4, #0
 800654c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	ea03 0501 	and.w	r5, r3, r1
 8006558:	ea04 0602 	and.w	r6, r4, r2
 800655c:	4629      	mov	r1, r5
 800655e:	4632      	mov	r2, r6
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	f04f 0400 	mov.w	r4, #0
 8006568:	0154      	lsls	r4, r2, #5
 800656a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800656e:	014b      	lsls	r3, r1, #5
 8006570:	4619      	mov	r1, r3
 8006572:	4622      	mov	r2, r4
 8006574:	1b49      	subs	r1, r1, r5
 8006576:	eb62 0206 	sbc.w	r2, r2, r6
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	f04f 0400 	mov.w	r4, #0
 8006582:	0194      	lsls	r4, r2, #6
 8006584:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006588:	018b      	lsls	r3, r1, #6
 800658a:	1a5b      	subs	r3, r3, r1
 800658c:	eb64 0402 	sbc.w	r4, r4, r2
 8006590:	f04f 0100 	mov.w	r1, #0
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	00e2      	lsls	r2, r4, #3
 800659a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800659e:	00d9      	lsls	r1, r3, #3
 80065a0:	460b      	mov	r3, r1
 80065a2:	4614      	mov	r4, r2
 80065a4:	195b      	adds	r3, r3, r5
 80065a6:	eb44 0406 	adc.w	r4, r4, r6
 80065aa:	f04f 0100 	mov.w	r1, #0
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	0262      	lsls	r2, r4, #9
 80065b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80065b8:	0259      	lsls	r1, r3, #9
 80065ba:	460b      	mov	r3, r1
 80065bc:	4614      	mov	r4, r2
 80065be:	4618      	mov	r0, r3
 80065c0:	4621      	mov	r1, r4
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f04f 0400 	mov.w	r4, #0
 80065c8:	461a      	mov	r2, r3
 80065ca:	4623      	mov	r3, r4
 80065cc:	f7fa fb4c 	bl	8000c68 <__aeabi_uldivmod>
 80065d0:	4603      	mov	r3, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e049      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065d8:	4b2f      	ldr	r3, [pc, #188]	; (8006698 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	099b      	lsrs	r3, r3, #6
 80065de:	f04f 0400 	mov.w	r4, #0
 80065e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	ea03 0501 	and.w	r5, r3, r1
 80065ee:	ea04 0602 	and.w	r6, r4, r2
 80065f2:	4629      	mov	r1, r5
 80065f4:	4632      	mov	r2, r6
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	f04f 0400 	mov.w	r4, #0
 80065fe:	0154      	lsls	r4, r2, #5
 8006600:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006604:	014b      	lsls	r3, r1, #5
 8006606:	4619      	mov	r1, r3
 8006608:	4622      	mov	r2, r4
 800660a:	1b49      	subs	r1, r1, r5
 800660c:	eb62 0206 	sbc.w	r2, r2, r6
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	f04f 0400 	mov.w	r4, #0
 8006618:	0194      	lsls	r4, r2, #6
 800661a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800661e:	018b      	lsls	r3, r1, #6
 8006620:	1a5b      	subs	r3, r3, r1
 8006622:	eb64 0402 	sbc.w	r4, r4, r2
 8006626:	f04f 0100 	mov.w	r1, #0
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	00e2      	lsls	r2, r4, #3
 8006630:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006634:	00d9      	lsls	r1, r3, #3
 8006636:	460b      	mov	r3, r1
 8006638:	4614      	mov	r4, r2
 800663a:	195b      	adds	r3, r3, r5
 800663c:	eb44 0406 	adc.w	r4, r4, r6
 8006640:	f04f 0100 	mov.w	r1, #0
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	02a2      	lsls	r2, r4, #10
 800664a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800664e:	0299      	lsls	r1, r3, #10
 8006650:	460b      	mov	r3, r1
 8006652:	4614      	mov	r4, r2
 8006654:	4618      	mov	r0, r3
 8006656:	4621      	mov	r1, r4
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f04f 0400 	mov.w	r4, #0
 800665e:	461a      	mov	r2, r3
 8006660:	4623      	mov	r3, r4
 8006662:	f7fa fb01 	bl	8000c68 <__aeabi_uldivmod>
 8006666:	4603      	mov	r3, r0
 8006668:	460c      	mov	r4, r1
 800666a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800666c:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	3301      	adds	r3, #1
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	fbb2 f3f3 	udiv	r3, r2, r3
 8006684:	60bb      	str	r3, [r7, #8]
      break;
 8006686:	e002      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006688:	4b04      	ldr	r3, [pc, #16]	; (800669c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800668a:	60bb      	str	r3, [r7, #8]
      break;
 800668c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800668e:	68bb      	ldr	r3, [r7, #8]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006698:	40023800 	.word	0x40023800
 800669c:	00f42400 	.word	0x00f42400
 80066a0:	007a1200 	.word	0x007a1200

080066a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066a4:	b480      	push	{r7}
 80066a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066a8:	4b03      	ldr	r3, [pc, #12]	; (80066b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80066aa:	681b      	ldr	r3, [r3, #0]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	20000000 	.word	0x20000000

080066bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066c0:	f7ff fff0 	bl	80066a4 <HAL_RCC_GetHCLKFreq>
 80066c4:	4601      	mov	r1, r0
 80066c6:	4b05      	ldr	r3, [pc, #20]	; (80066dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	0a9b      	lsrs	r3, r3, #10
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	4a03      	ldr	r2, [pc, #12]	; (80066e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066d2:	5cd3      	ldrb	r3, [r2, r3]
 80066d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80066d8:	4618      	mov	r0, r3
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	40023800 	.word	0x40023800
 80066e0:	0800a0c0 	.word	0x0800a0c0

080066e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066e8:	f7ff ffdc 	bl	80066a4 <HAL_RCC_GetHCLKFreq>
 80066ec:	4601      	mov	r1, r0
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	0b5b      	lsrs	r3, r3, #13
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	4a03      	ldr	r2, [pc, #12]	; (8006708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066fa:	5cd3      	ldrb	r3, [r2, r3]
 80066fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006700:	4618      	mov	r0, r3
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40023800 	.word	0x40023800
 8006708:	0800a0c0 	.word	0x0800a0c0

0800670c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e01d      	b.n	800675a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fb fcfe 	bl	8002134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3304      	adds	r3, #4
 8006748:	4619      	mov	r1, r3
 800674a:	4610      	mov	r0, r2
 800674c:	f000 f82e 	bl	80067ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0201 	orr.w	r2, r2, #1
 8006778:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b06      	cmp	r3, #6
 800678a:	d007      	beq.n	800679c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a40      	ldr	r2, [pc, #256]	; (80068c0 <TIM_Base_SetConfig+0x114>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d013      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ca:	d00f      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a3d      	ldr	r2, [pc, #244]	; (80068c4 <TIM_Base_SetConfig+0x118>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00b      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a3c      	ldr	r2, [pc, #240]	; (80068c8 <TIM_Base_SetConfig+0x11c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d007      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a3b      	ldr	r2, [pc, #236]	; (80068cc <TIM_Base_SetConfig+0x120>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a3a      	ldr	r2, [pc, #232]	; (80068d0 <TIM_Base_SetConfig+0x124>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d108      	bne.n	80067fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a2f      	ldr	r2, [pc, #188]	; (80068c0 <TIM_Base_SetConfig+0x114>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d02b      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680c:	d027      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a2c      	ldr	r2, [pc, #176]	; (80068c4 <TIM_Base_SetConfig+0x118>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d023      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a2b      	ldr	r2, [pc, #172]	; (80068c8 <TIM_Base_SetConfig+0x11c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01f      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a2a      	ldr	r2, [pc, #168]	; (80068cc <TIM_Base_SetConfig+0x120>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d01b      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a29      	ldr	r2, [pc, #164]	; (80068d0 <TIM_Base_SetConfig+0x124>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d017      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a28      	ldr	r2, [pc, #160]	; (80068d4 <TIM_Base_SetConfig+0x128>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d013      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a27      	ldr	r2, [pc, #156]	; (80068d8 <TIM_Base_SetConfig+0x12c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00f      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a26      	ldr	r2, [pc, #152]	; (80068dc <TIM_Base_SetConfig+0x130>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00b      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a25      	ldr	r2, [pc, #148]	; (80068e0 <TIM_Base_SetConfig+0x134>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d007      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a24      	ldr	r2, [pc, #144]	; (80068e4 <TIM_Base_SetConfig+0x138>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d003      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a23      	ldr	r2, [pc, #140]	; (80068e8 <TIM_Base_SetConfig+0x13c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d108      	bne.n	8006870 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a0a      	ldr	r2, [pc, #40]	; (80068c0 <TIM_Base_SetConfig+0x114>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_Base_SetConfig+0xf8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a0c      	ldr	r2, [pc, #48]	; (80068d0 <TIM_Base_SetConfig+0x124>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d103      	bne.n	80068ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	615a      	str	r2, [r3, #20]
}
 80068b2:	bf00      	nop
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40010000 	.word	0x40010000
 80068c4:	40000400 	.word	0x40000400
 80068c8:	40000800 	.word	0x40000800
 80068cc:	40000c00 	.word	0x40000c00
 80068d0:	40010400 	.word	0x40010400
 80068d4:	40014000 	.word	0x40014000
 80068d8:	40014400 	.word	0x40014400
 80068dc:	40014800 	.word	0x40014800
 80068e0:	40001800 	.word	0x40001800
 80068e4:	40001c00 	.word	0x40001c00
 80068e8:	40002000 	.word	0x40002000

080068ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e03f      	b.n	800697e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7fb fc70 	bl	80021f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2224      	movs	r2, #36	; 0x24
 800691c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800692e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f90b 	bl	8006b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695a      	ldr	r2, [r3, #20]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b088      	sub	sp, #32
 800698a:	af02      	add	r7, sp, #8
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	603b      	str	r3, [r7, #0]
 8006992:	4613      	mov	r3, r2
 8006994:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	f040 8083 	bne.w	8006aae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <HAL_UART_Transmit+0x2e>
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e07b      	b.n	8006ab0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d101      	bne.n	80069c6 <HAL_UART_Transmit+0x40>
 80069c2:	2302      	movs	r3, #2
 80069c4:	e074      	b.n	8006ab0 <HAL_UART_Transmit+0x12a>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2221      	movs	r2, #33	; 0x21
 80069d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80069dc:	f7fb fd6c 	bl	80024b8 <HAL_GetTick>
 80069e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	88fa      	ldrh	r2, [r7, #6]
 80069e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80069f6:	e042      	b.n	8006a7e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0e:	d122      	bne.n	8006a56 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2200      	movs	r2, #0
 8006a18:	2180      	movs	r1, #128	; 0x80
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 f84c 	bl	8006ab8 <UART_WaitOnFlagUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e042      	b.n	8006ab0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	461a      	mov	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a3c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d103      	bne.n	8006a4e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	3302      	adds	r3, #2
 8006a4a:	60bb      	str	r3, [r7, #8]
 8006a4c:	e017      	b.n	8006a7e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	3301      	adds	r3, #1
 8006a52:	60bb      	str	r3, [r7, #8]
 8006a54:	e013      	b.n	8006a7e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2180      	movs	r1, #128	; 0x80
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f829 	bl	8006ab8 <UART_WaitOnFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e01f      	b.n	8006ab0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	60ba      	str	r2, [r7, #8]
 8006a76:	781a      	ldrb	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1b7      	bne.n	80069f8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2140      	movs	r1, #64	; 0x40
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f810 	bl	8006ab8 <UART_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e006      	b.n	8006ab0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e000      	b.n	8006ab0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
  }
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac8:	e02c      	b.n	8006b24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad0:	d028      	beq.n	8006b24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ad8:	f7fb fcee 	bl	80024b8 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d21d      	bcs.n	8006b24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006af6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695a      	ldr	r2, [r3, #20]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0201 	bic.w	r2, r2, #1
 8006b06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e00f      	b.n	8006b44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	bf0c      	ite	eq
 8006b34:	2301      	moveq	r3, #1
 8006b36:	2300      	movne	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d0c3      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b8e:	f023 030c 	bic.w	r3, r3, #12
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	68f9      	ldr	r1, [r7, #12]
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bba:	f040 818b 	bne.w	8006ed4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4ac1      	ldr	r2, [pc, #772]	; (8006ec8 <UART_SetConfig+0x37c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d005      	beq.n	8006bd4 <UART_SetConfig+0x88>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4abf      	ldr	r2, [pc, #764]	; (8006ecc <UART_SetConfig+0x380>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	f040 80bd 	bne.w	8006d4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bd4:	f7ff fd86 	bl	80066e4 <HAL_RCC_GetPCLK2Freq>
 8006bd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	461d      	mov	r5, r3
 8006bde:	f04f 0600 	mov.w	r6, #0
 8006be2:	46a8      	mov	r8, r5
 8006be4:	46b1      	mov	r9, r6
 8006be6:	eb18 0308 	adds.w	r3, r8, r8
 8006bea:	eb49 0409 	adc.w	r4, r9, r9
 8006bee:	4698      	mov	r8, r3
 8006bf0:	46a1      	mov	r9, r4
 8006bf2:	eb18 0805 	adds.w	r8, r8, r5
 8006bf6:	eb49 0906 	adc.w	r9, r9, r6
 8006bfa:	f04f 0100 	mov.w	r1, #0
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c0e:	4688      	mov	r8, r1
 8006c10:	4691      	mov	r9, r2
 8006c12:	eb18 0005 	adds.w	r0, r8, r5
 8006c16:	eb49 0106 	adc.w	r1, r9, r6
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	461d      	mov	r5, r3
 8006c20:	f04f 0600 	mov.w	r6, #0
 8006c24:	196b      	adds	r3, r5, r5
 8006c26:	eb46 0406 	adc.w	r4, r6, r6
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	4623      	mov	r3, r4
 8006c2e:	f7fa f81b 	bl	8000c68 <__aeabi_uldivmod>
 8006c32:	4603      	mov	r3, r0
 8006c34:	460c      	mov	r4, r1
 8006c36:	461a      	mov	r2, r3
 8006c38:	4ba5      	ldr	r3, [pc, #660]	; (8006ed0 <UART_SetConfig+0x384>)
 8006c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c3e:	095b      	lsrs	r3, r3, #5
 8006c40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	461d      	mov	r5, r3
 8006c48:	f04f 0600 	mov.w	r6, #0
 8006c4c:	46a9      	mov	r9, r5
 8006c4e:	46b2      	mov	sl, r6
 8006c50:	eb19 0309 	adds.w	r3, r9, r9
 8006c54:	eb4a 040a 	adc.w	r4, sl, sl
 8006c58:	4699      	mov	r9, r3
 8006c5a:	46a2      	mov	sl, r4
 8006c5c:	eb19 0905 	adds.w	r9, r9, r5
 8006c60:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c64:	f04f 0100 	mov.w	r1, #0
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c78:	4689      	mov	r9, r1
 8006c7a:	4692      	mov	sl, r2
 8006c7c:	eb19 0005 	adds.w	r0, r9, r5
 8006c80:	eb4a 0106 	adc.w	r1, sl, r6
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	461d      	mov	r5, r3
 8006c8a:	f04f 0600 	mov.w	r6, #0
 8006c8e:	196b      	adds	r3, r5, r5
 8006c90:	eb46 0406 	adc.w	r4, r6, r6
 8006c94:	461a      	mov	r2, r3
 8006c96:	4623      	mov	r3, r4
 8006c98:	f7f9 ffe6 	bl	8000c68 <__aeabi_uldivmod>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4b8b      	ldr	r3, [pc, #556]	; (8006ed0 <UART_SetConfig+0x384>)
 8006ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	2164      	movs	r1, #100	; 0x64
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	3332      	adds	r3, #50	; 0x32
 8006cb6:	4a86      	ldr	r2, [pc, #536]	; (8006ed0 <UART_SetConfig+0x384>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cc4:	4498      	add	r8, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	461d      	mov	r5, r3
 8006cca:	f04f 0600 	mov.w	r6, #0
 8006cce:	46a9      	mov	r9, r5
 8006cd0:	46b2      	mov	sl, r6
 8006cd2:	eb19 0309 	adds.w	r3, r9, r9
 8006cd6:	eb4a 040a 	adc.w	r4, sl, sl
 8006cda:	4699      	mov	r9, r3
 8006cdc:	46a2      	mov	sl, r4
 8006cde:	eb19 0905 	adds.w	r9, r9, r5
 8006ce2:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ce6:	f04f 0100 	mov.w	r1, #0
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cfa:	4689      	mov	r9, r1
 8006cfc:	4692      	mov	sl, r2
 8006cfe:	eb19 0005 	adds.w	r0, r9, r5
 8006d02:	eb4a 0106 	adc.w	r1, sl, r6
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	461d      	mov	r5, r3
 8006d0c:	f04f 0600 	mov.w	r6, #0
 8006d10:	196b      	adds	r3, r5, r5
 8006d12:	eb46 0406 	adc.w	r4, r6, r6
 8006d16:	461a      	mov	r2, r3
 8006d18:	4623      	mov	r3, r4
 8006d1a:	f7f9 ffa5 	bl	8000c68 <__aeabi_uldivmod>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	460c      	mov	r4, r1
 8006d22:	461a      	mov	r2, r3
 8006d24:	4b6a      	ldr	r3, [pc, #424]	; (8006ed0 <UART_SetConfig+0x384>)
 8006d26:	fba3 1302 	umull	r1, r3, r3, r2
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	2164      	movs	r1, #100	; 0x64
 8006d2e:	fb01 f303 	mul.w	r3, r1, r3
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	3332      	adds	r3, #50	; 0x32
 8006d38:	4a65      	ldr	r2, [pc, #404]	; (8006ed0 <UART_SetConfig+0x384>)
 8006d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	f003 0207 	and.w	r2, r3, #7
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4442      	add	r2, r8
 8006d4a:	609a      	str	r2, [r3, #8]
 8006d4c:	e26f      	b.n	800722e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d4e:	f7ff fcb5 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 8006d52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	461d      	mov	r5, r3
 8006d58:	f04f 0600 	mov.w	r6, #0
 8006d5c:	46a8      	mov	r8, r5
 8006d5e:	46b1      	mov	r9, r6
 8006d60:	eb18 0308 	adds.w	r3, r8, r8
 8006d64:	eb49 0409 	adc.w	r4, r9, r9
 8006d68:	4698      	mov	r8, r3
 8006d6a:	46a1      	mov	r9, r4
 8006d6c:	eb18 0805 	adds.w	r8, r8, r5
 8006d70:	eb49 0906 	adc.w	r9, r9, r6
 8006d74:	f04f 0100 	mov.w	r1, #0
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d88:	4688      	mov	r8, r1
 8006d8a:	4691      	mov	r9, r2
 8006d8c:	eb18 0005 	adds.w	r0, r8, r5
 8006d90:	eb49 0106 	adc.w	r1, r9, r6
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	461d      	mov	r5, r3
 8006d9a:	f04f 0600 	mov.w	r6, #0
 8006d9e:	196b      	adds	r3, r5, r5
 8006da0:	eb46 0406 	adc.w	r4, r6, r6
 8006da4:	461a      	mov	r2, r3
 8006da6:	4623      	mov	r3, r4
 8006da8:	f7f9 ff5e 	bl	8000c68 <__aeabi_uldivmod>
 8006dac:	4603      	mov	r3, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	461a      	mov	r2, r3
 8006db2:	4b47      	ldr	r3, [pc, #284]	; (8006ed0 <UART_SetConfig+0x384>)
 8006db4:	fba3 2302 	umull	r2, r3, r3, r2
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	461d      	mov	r5, r3
 8006dc2:	f04f 0600 	mov.w	r6, #0
 8006dc6:	46a9      	mov	r9, r5
 8006dc8:	46b2      	mov	sl, r6
 8006dca:	eb19 0309 	adds.w	r3, r9, r9
 8006dce:	eb4a 040a 	adc.w	r4, sl, sl
 8006dd2:	4699      	mov	r9, r3
 8006dd4:	46a2      	mov	sl, r4
 8006dd6:	eb19 0905 	adds.w	r9, r9, r5
 8006dda:	eb4a 0a06 	adc.w	sl, sl, r6
 8006dde:	f04f 0100 	mov.w	r1, #0
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006df2:	4689      	mov	r9, r1
 8006df4:	4692      	mov	sl, r2
 8006df6:	eb19 0005 	adds.w	r0, r9, r5
 8006dfa:	eb4a 0106 	adc.w	r1, sl, r6
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	461d      	mov	r5, r3
 8006e04:	f04f 0600 	mov.w	r6, #0
 8006e08:	196b      	adds	r3, r5, r5
 8006e0a:	eb46 0406 	adc.w	r4, r6, r6
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4623      	mov	r3, r4
 8006e12:	f7f9 ff29 	bl	8000c68 <__aeabi_uldivmod>
 8006e16:	4603      	mov	r3, r0
 8006e18:	460c      	mov	r4, r1
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	4b2c      	ldr	r3, [pc, #176]	; (8006ed0 <UART_SetConfig+0x384>)
 8006e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	2164      	movs	r1, #100	; 0x64
 8006e26:	fb01 f303 	mul.w	r3, r1, r3
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	3332      	adds	r3, #50	; 0x32
 8006e30:	4a27      	ldr	r2, [pc, #156]	; (8006ed0 <UART_SetConfig+0x384>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e3e:	4498      	add	r8, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	461d      	mov	r5, r3
 8006e44:	f04f 0600 	mov.w	r6, #0
 8006e48:	46a9      	mov	r9, r5
 8006e4a:	46b2      	mov	sl, r6
 8006e4c:	eb19 0309 	adds.w	r3, r9, r9
 8006e50:	eb4a 040a 	adc.w	r4, sl, sl
 8006e54:	4699      	mov	r9, r3
 8006e56:	46a2      	mov	sl, r4
 8006e58:	eb19 0905 	adds.w	r9, r9, r5
 8006e5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e60:	f04f 0100 	mov.w	r1, #0
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e74:	4689      	mov	r9, r1
 8006e76:	4692      	mov	sl, r2
 8006e78:	eb19 0005 	adds.w	r0, r9, r5
 8006e7c:	eb4a 0106 	adc.w	r1, sl, r6
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	461d      	mov	r5, r3
 8006e86:	f04f 0600 	mov.w	r6, #0
 8006e8a:	196b      	adds	r3, r5, r5
 8006e8c:	eb46 0406 	adc.w	r4, r6, r6
 8006e90:	461a      	mov	r2, r3
 8006e92:	4623      	mov	r3, r4
 8006e94:	f7f9 fee8 	bl	8000c68 <__aeabi_uldivmod>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	; (8006ed0 <UART_SetConfig+0x384>)
 8006ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	2164      	movs	r1, #100	; 0x64
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	3332      	adds	r3, #50	; 0x32
 8006eb2:	4a07      	ldr	r2, [pc, #28]	; (8006ed0 <UART_SetConfig+0x384>)
 8006eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f003 0207 	and.w	r2, r3, #7
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4442      	add	r2, r8
 8006ec4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006ec6:	e1b2      	b.n	800722e <UART_SetConfig+0x6e2>
 8006ec8:	40011000 	.word	0x40011000
 8006ecc:	40011400 	.word	0x40011400
 8006ed0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4ad7      	ldr	r2, [pc, #860]	; (8007238 <UART_SetConfig+0x6ec>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d005      	beq.n	8006eea <UART_SetConfig+0x39e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4ad6      	ldr	r2, [pc, #856]	; (800723c <UART_SetConfig+0x6f0>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	f040 80d1 	bne.w	800708c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006eea:	f7ff fbfb 	bl	80066e4 <HAL_RCC_GetPCLK2Freq>
 8006eee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	469a      	mov	sl, r3
 8006ef4:	f04f 0b00 	mov.w	fp, #0
 8006ef8:	46d0      	mov	r8, sl
 8006efa:	46d9      	mov	r9, fp
 8006efc:	eb18 0308 	adds.w	r3, r8, r8
 8006f00:	eb49 0409 	adc.w	r4, r9, r9
 8006f04:	4698      	mov	r8, r3
 8006f06:	46a1      	mov	r9, r4
 8006f08:	eb18 080a 	adds.w	r8, r8, sl
 8006f0c:	eb49 090b 	adc.w	r9, r9, fp
 8006f10:	f04f 0100 	mov.w	r1, #0
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f24:	4688      	mov	r8, r1
 8006f26:	4691      	mov	r9, r2
 8006f28:	eb1a 0508 	adds.w	r5, sl, r8
 8006f2c:	eb4b 0609 	adc.w	r6, fp, r9
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	4619      	mov	r1, r3
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	f04f 0400 	mov.w	r4, #0
 8006f42:	0094      	lsls	r4, r2, #2
 8006f44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f48:	008b      	lsls	r3, r1, #2
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4623      	mov	r3, r4
 8006f4e:	4628      	mov	r0, r5
 8006f50:	4631      	mov	r1, r6
 8006f52:	f7f9 fe89 	bl	8000c68 <__aeabi_uldivmod>
 8006f56:	4603      	mov	r3, r0
 8006f58:	460c      	mov	r4, r1
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4bb8      	ldr	r3, [pc, #736]	; (8007240 <UART_SetConfig+0x6f4>)
 8006f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	469b      	mov	fp, r3
 8006f6c:	f04f 0c00 	mov.w	ip, #0
 8006f70:	46d9      	mov	r9, fp
 8006f72:	46e2      	mov	sl, ip
 8006f74:	eb19 0309 	adds.w	r3, r9, r9
 8006f78:	eb4a 040a 	adc.w	r4, sl, sl
 8006f7c:	4699      	mov	r9, r3
 8006f7e:	46a2      	mov	sl, r4
 8006f80:	eb19 090b 	adds.w	r9, r9, fp
 8006f84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f88:	f04f 0100 	mov.w	r1, #0
 8006f8c:	f04f 0200 	mov.w	r2, #0
 8006f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f9c:	4689      	mov	r9, r1
 8006f9e:	4692      	mov	sl, r2
 8006fa0:	eb1b 0509 	adds.w	r5, fp, r9
 8006fa4:	eb4c 060a 	adc.w	r6, ip, sl
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	4619      	mov	r1, r3
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	f04f 0300 	mov.w	r3, #0
 8006fb6:	f04f 0400 	mov.w	r4, #0
 8006fba:	0094      	lsls	r4, r2, #2
 8006fbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fc0:	008b      	lsls	r3, r1, #2
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	4631      	mov	r1, r6
 8006fca:	f7f9 fe4d 	bl	8000c68 <__aeabi_uldivmod>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	4b9a      	ldr	r3, [pc, #616]	; (8007240 <UART_SetConfig+0x6f4>)
 8006fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8006fda:	095b      	lsrs	r3, r3, #5
 8006fdc:	2164      	movs	r1, #100	; 0x64
 8006fde:	fb01 f303 	mul.w	r3, r1, r3
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	3332      	adds	r3, #50	; 0x32
 8006fe8:	4a95      	ldr	r2, [pc, #596]	; (8007240 <UART_SetConfig+0x6f4>)
 8006fea:	fba2 2303 	umull	r2, r3, r2, r3
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ff4:	4498      	add	r8, r3
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	469b      	mov	fp, r3
 8006ffa:	f04f 0c00 	mov.w	ip, #0
 8006ffe:	46d9      	mov	r9, fp
 8007000:	46e2      	mov	sl, ip
 8007002:	eb19 0309 	adds.w	r3, r9, r9
 8007006:	eb4a 040a 	adc.w	r4, sl, sl
 800700a:	4699      	mov	r9, r3
 800700c:	46a2      	mov	sl, r4
 800700e:	eb19 090b 	adds.w	r9, r9, fp
 8007012:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007016:	f04f 0100 	mov.w	r1, #0
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800702a:	4689      	mov	r9, r1
 800702c:	4692      	mov	sl, r2
 800702e:	eb1b 0509 	adds.w	r5, fp, r9
 8007032:	eb4c 060a 	adc.w	r6, ip, sl
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	4619      	mov	r1, r3
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	f04f 0300 	mov.w	r3, #0
 8007044:	f04f 0400 	mov.w	r4, #0
 8007048:	0094      	lsls	r4, r2, #2
 800704a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800704e:	008b      	lsls	r3, r1, #2
 8007050:	461a      	mov	r2, r3
 8007052:	4623      	mov	r3, r4
 8007054:	4628      	mov	r0, r5
 8007056:	4631      	mov	r1, r6
 8007058:	f7f9 fe06 	bl	8000c68 <__aeabi_uldivmod>
 800705c:	4603      	mov	r3, r0
 800705e:	460c      	mov	r4, r1
 8007060:	461a      	mov	r2, r3
 8007062:	4b77      	ldr	r3, [pc, #476]	; (8007240 <UART_SetConfig+0x6f4>)
 8007064:	fba3 1302 	umull	r1, r3, r3, r2
 8007068:	095b      	lsrs	r3, r3, #5
 800706a:	2164      	movs	r1, #100	; 0x64
 800706c:	fb01 f303 	mul.w	r3, r1, r3
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	3332      	adds	r3, #50	; 0x32
 8007076:	4a72      	ldr	r2, [pc, #456]	; (8007240 <UART_SetConfig+0x6f4>)
 8007078:	fba2 2303 	umull	r2, r3, r2, r3
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	f003 020f 	and.w	r2, r3, #15
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4442      	add	r2, r8
 8007088:	609a      	str	r2, [r3, #8]
 800708a:	e0d0      	b.n	800722e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800708c:	f7ff fb16 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 8007090:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	469a      	mov	sl, r3
 8007096:	f04f 0b00 	mov.w	fp, #0
 800709a:	46d0      	mov	r8, sl
 800709c:	46d9      	mov	r9, fp
 800709e:	eb18 0308 	adds.w	r3, r8, r8
 80070a2:	eb49 0409 	adc.w	r4, r9, r9
 80070a6:	4698      	mov	r8, r3
 80070a8:	46a1      	mov	r9, r4
 80070aa:	eb18 080a 	adds.w	r8, r8, sl
 80070ae:	eb49 090b 	adc.w	r9, r9, fp
 80070b2:	f04f 0100 	mov.w	r1, #0
 80070b6:	f04f 0200 	mov.w	r2, #0
 80070ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070c6:	4688      	mov	r8, r1
 80070c8:	4691      	mov	r9, r2
 80070ca:	eb1a 0508 	adds.w	r5, sl, r8
 80070ce:	eb4b 0609 	adc.w	r6, fp, r9
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	4619      	mov	r1, r3
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	f04f 0400 	mov.w	r4, #0
 80070e4:	0094      	lsls	r4, r2, #2
 80070e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070ea:	008b      	lsls	r3, r1, #2
 80070ec:	461a      	mov	r2, r3
 80070ee:	4623      	mov	r3, r4
 80070f0:	4628      	mov	r0, r5
 80070f2:	4631      	mov	r1, r6
 80070f4:	f7f9 fdb8 	bl	8000c68 <__aeabi_uldivmod>
 80070f8:	4603      	mov	r3, r0
 80070fa:	460c      	mov	r4, r1
 80070fc:	461a      	mov	r2, r3
 80070fe:	4b50      	ldr	r3, [pc, #320]	; (8007240 <UART_SetConfig+0x6f4>)
 8007100:	fba3 2302 	umull	r2, r3, r3, r2
 8007104:	095b      	lsrs	r3, r3, #5
 8007106:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	469b      	mov	fp, r3
 800710e:	f04f 0c00 	mov.w	ip, #0
 8007112:	46d9      	mov	r9, fp
 8007114:	46e2      	mov	sl, ip
 8007116:	eb19 0309 	adds.w	r3, r9, r9
 800711a:	eb4a 040a 	adc.w	r4, sl, sl
 800711e:	4699      	mov	r9, r3
 8007120:	46a2      	mov	sl, r4
 8007122:	eb19 090b 	adds.w	r9, r9, fp
 8007126:	eb4a 0a0c 	adc.w	sl, sl, ip
 800712a:	f04f 0100 	mov.w	r1, #0
 800712e:	f04f 0200 	mov.w	r2, #0
 8007132:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007136:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800713a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800713e:	4689      	mov	r9, r1
 8007140:	4692      	mov	sl, r2
 8007142:	eb1b 0509 	adds.w	r5, fp, r9
 8007146:	eb4c 060a 	adc.w	r6, ip, sl
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	4619      	mov	r1, r3
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	f04f 0300 	mov.w	r3, #0
 8007158:	f04f 0400 	mov.w	r4, #0
 800715c:	0094      	lsls	r4, r2, #2
 800715e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007162:	008b      	lsls	r3, r1, #2
 8007164:	461a      	mov	r2, r3
 8007166:	4623      	mov	r3, r4
 8007168:	4628      	mov	r0, r5
 800716a:	4631      	mov	r1, r6
 800716c:	f7f9 fd7c 	bl	8000c68 <__aeabi_uldivmod>
 8007170:	4603      	mov	r3, r0
 8007172:	460c      	mov	r4, r1
 8007174:	461a      	mov	r2, r3
 8007176:	4b32      	ldr	r3, [pc, #200]	; (8007240 <UART_SetConfig+0x6f4>)
 8007178:	fba3 1302 	umull	r1, r3, r3, r2
 800717c:	095b      	lsrs	r3, r3, #5
 800717e:	2164      	movs	r1, #100	; 0x64
 8007180:	fb01 f303 	mul.w	r3, r1, r3
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	3332      	adds	r3, #50	; 0x32
 800718a:	4a2d      	ldr	r2, [pc, #180]	; (8007240 <UART_SetConfig+0x6f4>)
 800718c:	fba2 2303 	umull	r2, r3, r2, r3
 8007190:	095b      	lsrs	r3, r3, #5
 8007192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007196:	4498      	add	r8, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	469b      	mov	fp, r3
 800719c:	f04f 0c00 	mov.w	ip, #0
 80071a0:	46d9      	mov	r9, fp
 80071a2:	46e2      	mov	sl, ip
 80071a4:	eb19 0309 	adds.w	r3, r9, r9
 80071a8:	eb4a 040a 	adc.w	r4, sl, sl
 80071ac:	4699      	mov	r9, r3
 80071ae:	46a2      	mov	sl, r4
 80071b0:	eb19 090b 	adds.w	r9, r9, fp
 80071b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071b8:	f04f 0100 	mov.w	r1, #0
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071cc:	4689      	mov	r9, r1
 80071ce:	4692      	mov	sl, r2
 80071d0:	eb1b 0509 	adds.w	r5, fp, r9
 80071d4:	eb4c 060a 	adc.w	r6, ip, sl
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	4619      	mov	r1, r3
 80071de:	f04f 0200 	mov.w	r2, #0
 80071e2:	f04f 0300 	mov.w	r3, #0
 80071e6:	f04f 0400 	mov.w	r4, #0
 80071ea:	0094      	lsls	r4, r2, #2
 80071ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071f0:	008b      	lsls	r3, r1, #2
 80071f2:	461a      	mov	r2, r3
 80071f4:	4623      	mov	r3, r4
 80071f6:	4628      	mov	r0, r5
 80071f8:	4631      	mov	r1, r6
 80071fa:	f7f9 fd35 	bl	8000c68 <__aeabi_uldivmod>
 80071fe:	4603      	mov	r3, r0
 8007200:	460c      	mov	r4, r1
 8007202:	461a      	mov	r2, r3
 8007204:	4b0e      	ldr	r3, [pc, #56]	; (8007240 <UART_SetConfig+0x6f4>)
 8007206:	fba3 1302 	umull	r1, r3, r3, r2
 800720a:	095b      	lsrs	r3, r3, #5
 800720c:	2164      	movs	r1, #100	; 0x64
 800720e:	fb01 f303 	mul.w	r3, r1, r3
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	3332      	adds	r3, #50	; 0x32
 8007218:	4a09      	ldr	r2, [pc, #36]	; (8007240 <UART_SetConfig+0x6f4>)
 800721a:	fba2 2303 	umull	r2, r3, r2, r3
 800721e:	095b      	lsrs	r3, r3, #5
 8007220:	f003 020f 	and.w	r2, r3, #15
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4442      	add	r2, r8
 800722a:	609a      	str	r2, [r3, #8]
}
 800722c:	e7ff      	b.n	800722e <UART_SetConfig+0x6e2>
 800722e:	bf00      	nop
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007238:	40011000 	.word	0x40011000
 800723c:	40011400 	.word	0x40011400
 8007240:	51eb851f 	.word	0x51eb851f

08007244 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007244:	b084      	sub	sp, #16
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	f107 001c 	add.w	r0, r7, #28
 8007252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	2b01      	cmp	r3, #1
 800725a:	d122      	bne.n	80072a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007286:	2b01      	cmp	r3, #1
 8007288:	d105      	bne.n	8007296 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fa4e 	bl	8007738 <USB_CoreReset>
 800729c:	4603      	mov	r3, r0
 800729e:	73fb      	strb	r3, [r7, #15]
 80072a0:	e01a      	b.n	80072d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa42 	bl	8007738 <USB_CoreReset>
 80072b4:	4603      	mov	r3, r0
 80072b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80072b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	639a      	str	r2, [r3, #56]	; 0x38
 80072ca:	e005      	b.n	80072d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d10b      	bne.n	80072f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f043 0206 	orr.w	r2, r3, #6
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f043 0220 	orr.w	r2, r3, #32
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007302:	b004      	add	sp, #16
 8007304:	4770      	bx	lr

08007306 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f023 0201 	bic.w	r2, r3, #1
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d106      	bne.n	8007354 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60da      	str	r2, [r3, #12]
 8007352:	e00b      	b.n	800736c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d106      	bne.n	8007368 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	60da      	str	r2, [r3, #12]
 8007366:	e001      	b.n	800736c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e003      	b.n	8007374 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800736c:	2032      	movs	r0, #50	; 0x32
 800736e:	f7fb f8af 	bl	80024d0 <HAL_Delay>

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800737c:	b084      	sub	sp, #16
 800737e:	b580      	push	{r7, lr}
 8007380:	b086      	sub	sp, #24
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800738a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007396:	2300      	movs	r3, #0
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	e009      	b.n	80073b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	3340      	adds	r3, #64	; 0x40
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	2200      	movs	r2, #0
 80073a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	3301      	adds	r3, #1
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2b0e      	cmp	r3, #14
 80073b4:	d9f2      	bls.n	800739c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d11c      	bne.n	80073f6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ca:	f043 0302 	orr.w	r3, r3, #2
 80073ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38
 80073f4:	e00b      	b.n	800740e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007414:	461a      	mov	r2, r3
 8007416:	2300      	movs	r3, #0
 8007418:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007420:	4619      	mov	r1, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007428:	461a      	mov	r2, r3
 800742a:	680b      	ldr	r3, [r1, #0]
 800742c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	2b01      	cmp	r3, #1
 8007432:	d10c      	bne.n	800744e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d104      	bne.n	8007444 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800743a:	2100      	movs	r1, #0
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f949 	bl	80076d4 <USB_SetDevSpeed>
 8007442:	e008      	b.n	8007456 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007444:	2101      	movs	r1, #1
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f944 	bl	80076d4 <USB_SetDevSpeed>
 800744c:	e003      	b.n	8007456 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800744e:	2103      	movs	r1, #3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f93f 	bl	80076d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007456:	2110      	movs	r1, #16
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f8f3 	bl	8007644 <USB_FlushTxFifo>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f911 	bl	8007690 <USB_FlushRxFifo>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747e:	461a      	mov	r2, r3
 8007480:	2300      	movs	r3, #0
 8007482:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800748a:	461a      	mov	r2, r3
 800748c:	2300      	movs	r3, #0
 800748e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007496:	461a      	mov	r2, r3
 8007498:	2300      	movs	r3, #0
 800749a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800749c:	2300      	movs	r3, #0
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	e043      	b.n	800752a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074b8:	d118      	bne.n	80074ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10a      	bne.n	80074d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074cc:	461a      	mov	r2, r3
 80074ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	e013      	b.n	80074fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e2:	461a      	mov	r2, r3
 80074e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	e008      	b.n	80074fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f8:	461a      	mov	r2, r3
 80074fa:	2300      	movs	r3, #0
 80074fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750a:	461a      	mov	r2, r3
 800750c:	2300      	movs	r3, #0
 800750e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800751c:	461a      	mov	r2, r3
 800751e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007522:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	3301      	adds	r3, #1
 8007528:	613b      	str	r3, [r7, #16]
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	429a      	cmp	r2, r3
 8007530:	d3b7      	bcc.n	80074a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007532:	2300      	movs	r3, #0
 8007534:	613b      	str	r3, [r7, #16]
 8007536:	e043      	b.n	80075c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800754a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800754e:	d118      	bne.n	8007582 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10a      	bne.n	800756c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007562:	461a      	mov	r2, r3
 8007564:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	e013      	b.n	8007594 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007578:	461a      	mov	r2, r3
 800757a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	e008      	b.n	8007594 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758e:	461a      	mov	r2, r3
 8007590:	2300      	movs	r3, #0
 8007592:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a0:	461a      	mov	r2, r3
 80075a2:	2300      	movs	r3, #0
 80075a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b2:	461a      	mov	r2, r3
 80075b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	3301      	adds	r3, #1
 80075be:	613b      	str	r3, [r7, #16]
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d3b7      	bcc.n	8007538 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d105      	bne.n	80075fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	f043 0210 	orr.w	r2, r3, #16
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	699a      	ldr	r2, [r3, #24]
 8007600:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <USB_DevInit+0x2c4>)
 8007602:	4313      	orrs	r3, r2
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f043 0208 	orr.w	r2, r3, #8
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800761a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761c:	2b01      	cmp	r3, #1
 800761e:	d107      	bne.n	8007630 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007628:	f043 0304 	orr.w	r3, r3, #4
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007630:	7dfb      	ldrb	r3, [r7, #23]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800763c:	b004      	add	sp, #16
 800763e:	4770      	bx	lr
 8007640:	803c3800 	.word	0x803c3800

08007644 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	019b      	lsls	r3, r3, #6
 8007656:	f043 0220 	orr.w	r2, r3, #32
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4a09      	ldr	r2, [pc, #36]	; (800768c <USB_FlushTxFifo+0x48>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d901      	bls.n	8007670 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e006      	b.n	800767e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b20      	cmp	r3, #32
 800767a:	d0f0      	beq.n	800765e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	00030d40 	.word	0x00030d40

08007690 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2210      	movs	r2, #16
 80076a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3301      	adds	r3, #1
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4a09      	ldr	r2, [pc, #36]	; (80076d0 <USB_FlushRxFifo+0x40>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d901      	bls.n	80076b4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e006      	b.n	80076c2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f003 0310 	and.w	r3, r3, #16
 80076bc:	2b10      	cmp	r3, #16
 80076be:	d0f0      	beq.n	80076a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	00030d40 	.word	0x00030d40

080076d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	78fb      	ldrb	r3, [r7, #3]
 80076ee:	68f9      	ldr	r1, [r7, #12]
 80076f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076f4:	4313      	orrs	r3, r2
 80076f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007720:	f043 0302 	orr.w	r3, r3, #2
 8007724:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007726:	2003      	movs	r0, #3
 8007728:	f7fa fed2 	bl	80024d0 <HAL_Delay>

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3301      	adds	r3, #1
 8007748:	60fb      	str	r3, [r7, #12]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4a13      	ldr	r2, [pc, #76]	; (800779c <USB_CoreReset+0x64>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d901      	bls.n	8007756 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e01b      	b.n	800778e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	daf2      	bge.n	8007744 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	f043 0201 	orr.w	r2, r3, #1
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4a09      	ldr	r2, [pc, #36]	; (800779c <USB_CoreReset+0x64>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d901      	bls.n	8007780 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e006      	b.n	800778e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b01      	cmp	r3, #1
 800778a:	d0f0      	beq.n	800776e <USB_CoreReset+0x36>

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	00030d40 	.word	0x00030d40

080077a0 <__errno>:
 80077a0:	4b01      	ldr	r3, [pc, #4]	; (80077a8 <__errno+0x8>)
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	2000000c 	.word	0x2000000c

080077ac <__libc_init_array>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	4e0d      	ldr	r6, [pc, #52]	; (80077e4 <__libc_init_array+0x38>)
 80077b0:	4c0d      	ldr	r4, [pc, #52]	; (80077e8 <__libc_init_array+0x3c>)
 80077b2:	1ba4      	subs	r4, r4, r6
 80077b4:	10a4      	asrs	r4, r4, #2
 80077b6:	2500      	movs	r5, #0
 80077b8:	42a5      	cmp	r5, r4
 80077ba:	d109      	bne.n	80077d0 <__libc_init_array+0x24>
 80077bc:	4e0b      	ldr	r6, [pc, #44]	; (80077ec <__libc_init_array+0x40>)
 80077be:	4c0c      	ldr	r4, [pc, #48]	; (80077f0 <__libc_init_array+0x44>)
 80077c0:	f002 fc62 	bl	800a088 <_init>
 80077c4:	1ba4      	subs	r4, r4, r6
 80077c6:	10a4      	asrs	r4, r4, #2
 80077c8:	2500      	movs	r5, #0
 80077ca:	42a5      	cmp	r5, r4
 80077cc:	d105      	bne.n	80077da <__libc_init_array+0x2e>
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077d4:	4798      	blx	r3
 80077d6:	3501      	adds	r5, #1
 80077d8:	e7ee      	b.n	80077b8 <__libc_init_array+0xc>
 80077da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077de:	4798      	blx	r3
 80077e0:	3501      	adds	r5, #1
 80077e2:	e7f2      	b.n	80077ca <__libc_init_array+0x1e>
 80077e4:	0800a390 	.word	0x0800a390
 80077e8:	0800a390 	.word	0x0800a390
 80077ec:	0800a390 	.word	0x0800a390
 80077f0:	0800a398 	.word	0x0800a398

080077f4 <malloc>:
 80077f4:	4b02      	ldr	r3, [pc, #8]	; (8007800 <malloc+0xc>)
 80077f6:	4601      	mov	r1, r0
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	f000 b86d 	b.w	80078d8 <_malloc_r>
 80077fe:	bf00      	nop
 8007800:	2000000c 	.word	0x2000000c

08007804 <free>:
 8007804:	4b02      	ldr	r3, [pc, #8]	; (8007810 <free+0xc>)
 8007806:	4601      	mov	r1, r0
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	f000 b817 	b.w	800783c <_free_r>
 800780e:	bf00      	nop
 8007810:	2000000c 	.word	0x2000000c

08007814 <memcpy>:
 8007814:	b510      	push	{r4, lr}
 8007816:	1e43      	subs	r3, r0, #1
 8007818:	440a      	add	r2, r1
 800781a:	4291      	cmp	r1, r2
 800781c:	d100      	bne.n	8007820 <memcpy+0xc>
 800781e:	bd10      	pop	{r4, pc}
 8007820:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007824:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007828:	e7f7      	b.n	800781a <memcpy+0x6>

0800782a <memset>:
 800782a:	4402      	add	r2, r0
 800782c:	4603      	mov	r3, r0
 800782e:	4293      	cmp	r3, r2
 8007830:	d100      	bne.n	8007834 <memset+0xa>
 8007832:	4770      	bx	lr
 8007834:	f803 1b01 	strb.w	r1, [r3], #1
 8007838:	e7f9      	b.n	800782e <memset+0x4>
	...

0800783c <_free_r>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	4605      	mov	r5, r0
 8007840:	2900      	cmp	r1, #0
 8007842:	d045      	beq.n	80078d0 <_free_r+0x94>
 8007844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007848:	1f0c      	subs	r4, r1, #4
 800784a:	2b00      	cmp	r3, #0
 800784c:	bfb8      	it	lt
 800784e:	18e4      	addlt	r4, r4, r3
 8007850:	f001 ff22 	bl	8009698 <__malloc_lock>
 8007854:	4a1f      	ldr	r2, [pc, #124]	; (80078d4 <_free_r+0x98>)
 8007856:	6813      	ldr	r3, [r2, #0]
 8007858:	4610      	mov	r0, r2
 800785a:	b933      	cbnz	r3, 800786a <_free_r+0x2e>
 800785c:	6063      	str	r3, [r4, #4]
 800785e:	6014      	str	r4, [r2, #0]
 8007860:	4628      	mov	r0, r5
 8007862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007866:	f001 bf18 	b.w	800969a <__malloc_unlock>
 800786a:	42a3      	cmp	r3, r4
 800786c:	d90c      	bls.n	8007888 <_free_r+0x4c>
 800786e:	6821      	ldr	r1, [r4, #0]
 8007870:	1862      	adds	r2, r4, r1
 8007872:	4293      	cmp	r3, r2
 8007874:	bf04      	itt	eq
 8007876:	681a      	ldreq	r2, [r3, #0]
 8007878:	685b      	ldreq	r3, [r3, #4]
 800787a:	6063      	str	r3, [r4, #4]
 800787c:	bf04      	itt	eq
 800787e:	1852      	addeq	r2, r2, r1
 8007880:	6022      	streq	r2, [r4, #0]
 8007882:	6004      	str	r4, [r0, #0]
 8007884:	e7ec      	b.n	8007860 <_free_r+0x24>
 8007886:	4613      	mov	r3, r2
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	b10a      	cbz	r2, 8007890 <_free_r+0x54>
 800788c:	42a2      	cmp	r2, r4
 800788e:	d9fa      	bls.n	8007886 <_free_r+0x4a>
 8007890:	6819      	ldr	r1, [r3, #0]
 8007892:	1858      	adds	r0, r3, r1
 8007894:	42a0      	cmp	r0, r4
 8007896:	d10b      	bne.n	80078b0 <_free_r+0x74>
 8007898:	6820      	ldr	r0, [r4, #0]
 800789a:	4401      	add	r1, r0
 800789c:	1858      	adds	r0, r3, r1
 800789e:	4282      	cmp	r2, r0
 80078a0:	6019      	str	r1, [r3, #0]
 80078a2:	d1dd      	bne.n	8007860 <_free_r+0x24>
 80078a4:	6810      	ldr	r0, [r2, #0]
 80078a6:	6852      	ldr	r2, [r2, #4]
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	4401      	add	r1, r0
 80078ac:	6019      	str	r1, [r3, #0]
 80078ae:	e7d7      	b.n	8007860 <_free_r+0x24>
 80078b0:	d902      	bls.n	80078b8 <_free_r+0x7c>
 80078b2:	230c      	movs	r3, #12
 80078b4:	602b      	str	r3, [r5, #0]
 80078b6:	e7d3      	b.n	8007860 <_free_r+0x24>
 80078b8:	6820      	ldr	r0, [r4, #0]
 80078ba:	1821      	adds	r1, r4, r0
 80078bc:	428a      	cmp	r2, r1
 80078be:	bf04      	itt	eq
 80078c0:	6811      	ldreq	r1, [r2, #0]
 80078c2:	6852      	ldreq	r2, [r2, #4]
 80078c4:	6062      	str	r2, [r4, #4]
 80078c6:	bf04      	itt	eq
 80078c8:	1809      	addeq	r1, r1, r0
 80078ca:	6021      	streq	r1, [r4, #0]
 80078cc:	605c      	str	r4, [r3, #4]
 80078ce:	e7c7      	b.n	8007860 <_free_r+0x24>
 80078d0:	bd38      	pop	{r3, r4, r5, pc}
 80078d2:	bf00      	nop
 80078d4:	20000248 	.word	0x20000248

080078d8 <_malloc_r>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	1ccd      	adds	r5, r1, #3
 80078dc:	f025 0503 	bic.w	r5, r5, #3
 80078e0:	3508      	adds	r5, #8
 80078e2:	2d0c      	cmp	r5, #12
 80078e4:	bf38      	it	cc
 80078e6:	250c      	movcc	r5, #12
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	4606      	mov	r6, r0
 80078ec:	db01      	blt.n	80078f2 <_malloc_r+0x1a>
 80078ee:	42a9      	cmp	r1, r5
 80078f0:	d903      	bls.n	80078fa <_malloc_r+0x22>
 80078f2:	230c      	movs	r3, #12
 80078f4:	6033      	str	r3, [r6, #0]
 80078f6:	2000      	movs	r0, #0
 80078f8:	bd70      	pop	{r4, r5, r6, pc}
 80078fa:	f001 fecd 	bl	8009698 <__malloc_lock>
 80078fe:	4a21      	ldr	r2, [pc, #132]	; (8007984 <_malloc_r+0xac>)
 8007900:	6814      	ldr	r4, [r2, #0]
 8007902:	4621      	mov	r1, r4
 8007904:	b991      	cbnz	r1, 800792c <_malloc_r+0x54>
 8007906:	4c20      	ldr	r4, [pc, #128]	; (8007988 <_malloc_r+0xb0>)
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	b91b      	cbnz	r3, 8007914 <_malloc_r+0x3c>
 800790c:	4630      	mov	r0, r6
 800790e:	f000 fd15 	bl	800833c <_sbrk_r>
 8007912:	6020      	str	r0, [r4, #0]
 8007914:	4629      	mov	r1, r5
 8007916:	4630      	mov	r0, r6
 8007918:	f000 fd10 	bl	800833c <_sbrk_r>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d124      	bne.n	800796a <_malloc_r+0x92>
 8007920:	230c      	movs	r3, #12
 8007922:	6033      	str	r3, [r6, #0]
 8007924:	4630      	mov	r0, r6
 8007926:	f001 feb8 	bl	800969a <__malloc_unlock>
 800792a:	e7e4      	b.n	80078f6 <_malloc_r+0x1e>
 800792c:	680b      	ldr	r3, [r1, #0]
 800792e:	1b5b      	subs	r3, r3, r5
 8007930:	d418      	bmi.n	8007964 <_malloc_r+0x8c>
 8007932:	2b0b      	cmp	r3, #11
 8007934:	d90f      	bls.n	8007956 <_malloc_r+0x7e>
 8007936:	600b      	str	r3, [r1, #0]
 8007938:	50cd      	str	r5, [r1, r3]
 800793a:	18cc      	adds	r4, r1, r3
 800793c:	4630      	mov	r0, r6
 800793e:	f001 feac 	bl	800969a <__malloc_unlock>
 8007942:	f104 000b 	add.w	r0, r4, #11
 8007946:	1d23      	adds	r3, r4, #4
 8007948:	f020 0007 	bic.w	r0, r0, #7
 800794c:	1ac3      	subs	r3, r0, r3
 800794e:	d0d3      	beq.n	80078f8 <_malloc_r+0x20>
 8007950:	425a      	negs	r2, r3
 8007952:	50e2      	str	r2, [r4, r3]
 8007954:	e7d0      	b.n	80078f8 <_malloc_r+0x20>
 8007956:	428c      	cmp	r4, r1
 8007958:	684b      	ldr	r3, [r1, #4]
 800795a:	bf16      	itet	ne
 800795c:	6063      	strne	r3, [r4, #4]
 800795e:	6013      	streq	r3, [r2, #0]
 8007960:	460c      	movne	r4, r1
 8007962:	e7eb      	b.n	800793c <_malloc_r+0x64>
 8007964:	460c      	mov	r4, r1
 8007966:	6849      	ldr	r1, [r1, #4]
 8007968:	e7cc      	b.n	8007904 <_malloc_r+0x2c>
 800796a:	1cc4      	adds	r4, r0, #3
 800796c:	f024 0403 	bic.w	r4, r4, #3
 8007970:	42a0      	cmp	r0, r4
 8007972:	d005      	beq.n	8007980 <_malloc_r+0xa8>
 8007974:	1a21      	subs	r1, r4, r0
 8007976:	4630      	mov	r0, r6
 8007978:	f000 fce0 	bl	800833c <_sbrk_r>
 800797c:	3001      	adds	r0, #1
 800797e:	d0cf      	beq.n	8007920 <_malloc_r+0x48>
 8007980:	6025      	str	r5, [r4, #0]
 8007982:	e7db      	b.n	800793c <_malloc_r+0x64>
 8007984:	20000248 	.word	0x20000248
 8007988:	2000024c 	.word	0x2000024c

0800798c <__cvt>:
 800798c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007990:	ec55 4b10 	vmov	r4, r5, d0
 8007994:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007996:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800799a:	2d00      	cmp	r5, #0
 800799c:	460e      	mov	r6, r1
 800799e:	4691      	mov	r9, r2
 80079a0:	4619      	mov	r1, r3
 80079a2:	bfb8      	it	lt
 80079a4:	4622      	movlt	r2, r4
 80079a6:	462b      	mov	r3, r5
 80079a8:	f027 0720 	bic.w	r7, r7, #32
 80079ac:	bfbb      	ittet	lt
 80079ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079b2:	461d      	movlt	r5, r3
 80079b4:	2300      	movge	r3, #0
 80079b6:	232d      	movlt	r3, #45	; 0x2d
 80079b8:	bfb8      	it	lt
 80079ba:	4614      	movlt	r4, r2
 80079bc:	2f46      	cmp	r7, #70	; 0x46
 80079be:	700b      	strb	r3, [r1, #0]
 80079c0:	d004      	beq.n	80079cc <__cvt+0x40>
 80079c2:	2f45      	cmp	r7, #69	; 0x45
 80079c4:	d100      	bne.n	80079c8 <__cvt+0x3c>
 80079c6:	3601      	adds	r6, #1
 80079c8:	2102      	movs	r1, #2
 80079ca:	e000      	b.n	80079ce <__cvt+0x42>
 80079cc:	2103      	movs	r1, #3
 80079ce:	ab03      	add	r3, sp, #12
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	ab02      	add	r3, sp, #8
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	4632      	mov	r2, r6
 80079d8:	4653      	mov	r3, sl
 80079da:	ec45 4b10 	vmov	d0, r4, r5
 80079de:	f000 feb7 	bl	8008750 <_dtoa_r>
 80079e2:	2f47      	cmp	r7, #71	; 0x47
 80079e4:	4680      	mov	r8, r0
 80079e6:	d102      	bne.n	80079ee <__cvt+0x62>
 80079e8:	f019 0f01 	tst.w	r9, #1
 80079ec:	d026      	beq.n	8007a3c <__cvt+0xb0>
 80079ee:	2f46      	cmp	r7, #70	; 0x46
 80079f0:	eb08 0906 	add.w	r9, r8, r6
 80079f4:	d111      	bne.n	8007a1a <__cvt+0x8e>
 80079f6:	f898 3000 	ldrb.w	r3, [r8]
 80079fa:	2b30      	cmp	r3, #48	; 0x30
 80079fc:	d10a      	bne.n	8007a14 <__cvt+0x88>
 80079fe:	2200      	movs	r2, #0
 8007a00:	2300      	movs	r3, #0
 8007a02:	4620      	mov	r0, r4
 8007a04:	4629      	mov	r1, r5
 8007a06:	f7f9 f86f 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a0a:	b918      	cbnz	r0, 8007a14 <__cvt+0x88>
 8007a0c:	f1c6 0601 	rsb	r6, r6, #1
 8007a10:	f8ca 6000 	str.w	r6, [sl]
 8007a14:	f8da 3000 	ldr.w	r3, [sl]
 8007a18:	4499      	add	r9, r3
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	f7f9 f861 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a26:	b938      	cbnz	r0, 8007a38 <__cvt+0xac>
 8007a28:	2230      	movs	r2, #48	; 0x30
 8007a2a:	9b03      	ldr	r3, [sp, #12]
 8007a2c:	454b      	cmp	r3, r9
 8007a2e:	d205      	bcs.n	8007a3c <__cvt+0xb0>
 8007a30:	1c59      	adds	r1, r3, #1
 8007a32:	9103      	str	r1, [sp, #12]
 8007a34:	701a      	strb	r2, [r3, #0]
 8007a36:	e7f8      	b.n	8007a2a <__cvt+0x9e>
 8007a38:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a40:	eba3 0308 	sub.w	r3, r3, r8
 8007a44:	4640      	mov	r0, r8
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	b004      	add	sp, #16
 8007a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007a4e <__exponent>:
 8007a4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a50:	2900      	cmp	r1, #0
 8007a52:	4604      	mov	r4, r0
 8007a54:	bfba      	itte	lt
 8007a56:	4249      	neglt	r1, r1
 8007a58:	232d      	movlt	r3, #45	; 0x2d
 8007a5a:	232b      	movge	r3, #43	; 0x2b
 8007a5c:	2909      	cmp	r1, #9
 8007a5e:	f804 2b02 	strb.w	r2, [r4], #2
 8007a62:	7043      	strb	r3, [r0, #1]
 8007a64:	dd20      	ble.n	8007aa8 <__exponent+0x5a>
 8007a66:	f10d 0307 	add.w	r3, sp, #7
 8007a6a:	461f      	mov	r7, r3
 8007a6c:	260a      	movs	r6, #10
 8007a6e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007a72:	fb06 1115 	mls	r1, r6, r5, r1
 8007a76:	3130      	adds	r1, #48	; 0x30
 8007a78:	2d09      	cmp	r5, #9
 8007a7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a7e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007a82:	4629      	mov	r1, r5
 8007a84:	dc09      	bgt.n	8007a9a <__exponent+0x4c>
 8007a86:	3130      	adds	r1, #48	; 0x30
 8007a88:	3b02      	subs	r3, #2
 8007a8a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007a8e:	42bb      	cmp	r3, r7
 8007a90:	4622      	mov	r2, r4
 8007a92:	d304      	bcc.n	8007a9e <__exponent+0x50>
 8007a94:	1a10      	subs	r0, r2, r0
 8007a96:	b003      	add	sp, #12
 8007a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	e7e7      	b.n	8007a6e <__exponent+0x20>
 8007a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aa2:	f804 2b01 	strb.w	r2, [r4], #1
 8007aa6:	e7f2      	b.n	8007a8e <__exponent+0x40>
 8007aa8:	2330      	movs	r3, #48	; 0x30
 8007aaa:	4419      	add	r1, r3
 8007aac:	7083      	strb	r3, [r0, #2]
 8007aae:	1d02      	adds	r2, r0, #4
 8007ab0:	70c1      	strb	r1, [r0, #3]
 8007ab2:	e7ef      	b.n	8007a94 <__exponent+0x46>

08007ab4 <_printf_float>:
 8007ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	b08d      	sub	sp, #52	; 0x34
 8007aba:	460c      	mov	r4, r1
 8007abc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007ac0:	4616      	mov	r6, r2
 8007ac2:	461f      	mov	r7, r3
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	f001 fd75 	bl	80095b4 <_localeconv_r>
 8007aca:	6803      	ldr	r3, [r0, #0]
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7f8 fb8e 	bl	80001f0 <strlen>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8007adc:	9005      	str	r0, [sp, #20]
 8007ade:	3307      	adds	r3, #7
 8007ae0:	f023 0307 	bic.w	r3, r3, #7
 8007ae4:	f103 0208 	add.w	r2, r3, #8
 8007ae8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007aec:	f8d4 b000 	ldr.w	fp, [r4]
 8007af0:	f8c8 2000 	str.w	r2, [r8]
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007afc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b04:	9307      	str	r3, [sp, #28]
 8007b06:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0e:	4ba7      	ldr	r3, [pc, #668]	; (8007dac <_printf_float+0x2f8>)
 8007b10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b14:	f7f9 f81a 	bl	8000b4c <__aeabi_dcmpun>
 8007b18:	bb70      	cbnz	r0, 8007b78 <_printf_float+0xc4>
 8007b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b1e:	4ba3      	ldr	r3, [pc, #652]	; (8007dac <_printf_float+0x2f8>)
 8007b20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b24:	f7f8 fff4 	bl	8000b10 <__aeabi_dcmple>
 8007b28:	bb30      	cbnz	r0, 8007b78 <_printf_float+0xc4>
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4640      	mov	r0, r8
 8007b30:	4649      	mov	r1, r9
 8007b32:	f7f8 ffe3 	bl	8000afc <__aeabi_dcmplt>
 8007b36:	b110      	cbz	r0, 8007b3e <_printf_float+0x8a>
 8007b38:	232d      	movs	r3, #45	; 0x2d
 8007b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b3e:	4a9c      	ldr	r2, [pc, #624]	; (8007db0 <_printf_float+0x2fc>)
 8007b40:	4b9c      	ldr	r3, [pc, #624]	; (8007db4 <_printf_float+0x300>)
 8007b42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007b46:	bf8c      	ite	hi
 8007b48:	4690      	movhi	r8, r2
 8007b4a:	4698      	movls	r8, r3
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	f02b 0204 	bic.w	r2, fp, #4
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	6022      	str	r2, [r4, #0]
 8007b56:	f04f 0900 	mov.w	r9, #0
 8007b5a:	9700      	str	r7, [sp, #0]
 8007b5c:	4633      	mov	r3, r6
 8007b5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b60:	4621      	mov	r1, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 f9e6 	bl	8007f34 <_printf_common>
 8007b68:	3001      	adds	r0, #1
 8007b6a:	f040 808d 	bne.w	8007c88 <_printf_float+0x1d4>
 8007b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b72:	b00d      	add	sp, #52	; 0x34
 8007b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b78:	4642      	mov	r2, r8
 8007b7a:	464b      	mov	r3, r9
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	4649      	mov	r1, r9
 8007b80:	f7f8 ffe4 	bl	8000b4c <__aeabi_dcmpun>
 8007b84:	b110      	cbz	r0, 8007b8c <_printf_float+0xd8>
 8007b86:	4a8c      	ldr	r2, [pc, #560]	; (8007db8 <_printf_float+0x304>)
 8007b88:	4b8c      	ldr	r3, [pc, #560]	; (8007dbc <_printf_float+0x308>)
 8007b8a:	e7da      	b.n	8007b42 <_printf_float+0x8e>
 8007b8c:	6861      	ldr	r1, [r4, #4]
 8007b8e:	1c4b      	adds	r3, r1, #1
 8007b90:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007b94:	a80a      	add	r0, sp, #40	; 0x28
 8007b96:	d13e      	bne.n	8007c16 <_printf_float+0x162>
 8007b98:	2306      	movs	r3, #6
 8007b9a:	6063      	str	r3, [r4, #4]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007ba2:	ab09      	add	r3, sp, #36	; 0x24
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	ec49 8b10 	vmov	d0, r8, r9
 8007baa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007bae:	6022      	str	r2, [r4, #0]
 8007bb0:	f8cd a004 	str.w	sl, [sp, #4]
 8007bb4:	6861      	ldr	r1, [r4, #4]
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f7ff fee8 	bl	800798c <__cvt>
 8007bbc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007bc0:	2b47      	cmp	r3, #71	; 0x47
 8007bc2:	4680      	mov	r8, r0
 8007bc4:	d109      	bne.n	8007bda <_printf_float+0x126>
 8007bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc8:	1cd8      	adds	r0, r3, #3
 8007bca:	db02      	blt.n	8007bd2 <_printf_float+0x11e>
 8007bcc:	6862      	ldr	r2, [r4, #4]
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	dd47      	ble.n	8007c62 <_printf_float+0x1ae>
 8007bd2:	f1aa 0a02 	sub.w	sl, sl, #2
 8007bd6:	fa5f fa8a 	uxtb.w	sl, sl
 8007bda:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007bde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007be0:	d824      	bhi.n	8007c2c <_printf_float+0x178>
 8007be2:	3901      	subs	r1, #1
 8007be4:	4652      	mov	r2, sl
 8007be6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007bea:	9109      	str	r1, [sp, #36]	; 0x24
 8007bec:	f7ff ff2f 	bl	8007a4e <__exponent>
 8007bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bf2:	1813      	adds	r3, r2, r0
 8007bf4:	2a01      	cmp	r2, #1
 8007bf6:	4681      	mov	r9, r0
 8007bf8:	6123      	str	r3, [r4, #16]
 8007bfa:	dc02      	bgt.n	8007c02 <_printf_float+0x14e>
 8007bfc:	6822      	ldr	r2, [r4, #0]
 8007bfe:	07d1      	lsls	r1, r2, #31
 8007c00:	d501      	bpl.n	8007c06 <_printf_float+0x152>
 8007c02:	3301      	adds	r3, #1
 8007c04:	6123      	str	r3, [r4, #16]
 8007c06:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0a5      	beq.n	8007b5a <_printf_float+0xa6>
 8007c0e:	232d      	movs	r3, #45	; 0x2d
 8007c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c14:	e7a1      	b.n	8007b5a <_printf_float+0xa6>
 8007c16:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007c1a:	f000 8177 	beq.w	8007f0c <_printf_float+0x458>
 8007c1e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007c22:	d1bb      	bne.n	8007b9c <_printf_float+0xe8>
 8007c24:	2900      	cmp	r1, #0
 8007c26:	d1b9      	bne.n	8007b9c <_printf_float+0xe8>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e7b6      	b.n	8007b9a <_printf_float+0xe6>
 8007c2c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007c30:	d119      	bne.n	8007c66 <_printf_float+0x1b2>
 8007c32:	2900      	cmp	r1, #0
 8007c34:	6863      	ldr	r3, [r4, #4]
 8007c36:	dd0c      	ble.n	8007c52 <_printf_float+0x19e>
 8007c38:	6121      	str	r1, [r4, #16]
 8007c3a:	b913      	cbnz	r3, 8007c42 <_printf_float+0x18e>
 8007c3c:	6822      	ldr	r2, [r4, #0]
 8007c3e:	07d2      	lsls	r2, r2, #31
 8007c40:	d502      	bpl.n	8007c48 <_printf_float+0x194>
 8007c42:	3301      	adds	r3, #1
 8007c44:	440b      	add	r3, r1
 8007c46:	6123      	str	r3, [r4, #16]
 8007c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4a:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c4c:	f04f 0900 	mov.w	r9, #0
 8007c50:	e7d9      	b.n	8007c06 <_printf_float+0x152>
 8007c52:	b913      	cbnz	r3, 8007c5a <_printf_float+0x1a6>
 8007c54:	6822      	ldr	r2, [r4, #0]
 8007c56:	07d0      	lsls	r0, r2, #31
 8007c58:	d501      	bpl.n	8007c5e <_printf_float+0x1aa>
 8007c5a:	3302      	adds	r3, #2
 8007c5c:	e7f3      	b.n	8007c46 <_printf_float+0x192>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e7f1      	b.n	8007c46 <_printf_float+0x192>
 8007c62:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007c66:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	db05      	blt.n	8007c7a <_printf_float+0x1c6>
 8007c6e:	6822      	ldr	r2, [r4, #0]
 8007c70:	6123      	str	r3, [r4, #16]
 8007c72:	07d1      	lsls	r1, r2, #31
 8007c74:	d5e8      	bpl.n	8007c48 <_printf_float+0x194>
 8007c76:	3301      	adds	r3, #1
 8007c78:	e7e5      	b.n	8007c46 <_printf_float+0x192>
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	bfd4      	ite	le
 8007c7e:	f1c3 0302 	rsble	r3, r3, #2
 8007c82:	2301      	movgt	r3, #1
 8007c84:	4413      	add	r3, r2
 8007c86:	e7de      	b.n	8007c46 <_printf_float+0x192>
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	055a      	lsls	r2, r3, #21
 8007c8c:	d407      	bmi.n	8007c9e <_printf_float+0x1ea>
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	4642      	mov	r2, r8
 8007c92:	4631      	mov	r1, r6
 8007c94:	4628      	mov	r0, r5
 8007c96:	47b8      	blx	r7
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d12b      	bne.n	8007cf4 <_printf_float+0x240>
 8007c9c:	e767      	b.n	8007b6e <_printf_float+0xba>
 8007c9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007ca2:	f240 80dc 	bls.w	8007e5e <_printf_float+0x3aa>
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cae:	f7f8 ff1b 	bl	8000ae8 <__aeabi_dcmpeq>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d033      	beq.n	8007d1e <_printf_float+0x26a>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4a41      	ldr	r2, [pc, #260]	; (8007dc0 <_printf_float+0x30c>)
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	47b8      	blx	r7
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	f43f af54 	beq.w	8007b6e <_printf_float+0xba>
 8007cc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	db02      	blt.n	8007cd4 <_printf_float+0x220>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	07d8      	lsls	r0, r3, #31
 8007cd2:	d50f      	bpl.n	8007cf4 <_printf_float+0x240>
 8007cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f43f af45 	beq.w	8007b6e <_printf_float+0xba>
 8007ce4:	f04f 0800 	mov.w	r8, #0
 8007ce8:	f104 091a 	add.w	r9, r4, #26
 8007cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	4543      	cmp	r3, r8
 8007cf2:	dc09      	bgt.n	8007d08 <_printf_float+0x254>
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	079b      	lsls	r3, r3, #30
 8007cf8:	f100 8103 	bmi.w	8007f02 <_printf_float+0x44e>
 8007cfc:	68e0      	ldr	r0, [r4, #12]
 8007cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d00:	4298      	cmp	r0, r3
 8007d02:	bfb8      	it	lt
 8007d04:	4618      	movlt	r0, r3
 8007d06:	e734      	b.n	8007b72 <_printf_float+0xbe>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	464a      	mov	r2, r9
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	4628      	mov	r0, r5
 8007d10:	47b8      	blx	r7
 8007d12:	3001      	adds	r0, #1
 8007d14:	f43f af2b 	beq.w	8007b6e <_printf_float+0xba>
 8007d18:	f108 0801 	add.w	r8, r8, #1
 8007d1c:	e7e6      	b.n	8007cec <_printf_float+0x238>
 8007d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	dc2b      	bgt.n	8007d7c <_printf_float+0x2c8>
 8007d24:	2301      	movs	r3, #1
 8007d26:	4a26      	ldr	r2, [pc, #152]	; (8007dc0 <_printf_float+0x30c>)
 8007d28:	4631      	mov	r1, r6
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	47b8      	blx	r7
 8007d2e:	3001      	adds	r0, #1
 8007d30:	f43f af1d 	beq.w	8007b6e <_printf_float+0xba>
 8007d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d36:	b923      	cbnz	r3, 8007d42 <_printf_float+0x28e>
 8007d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3a:	b913      	cbnz	r3, 8007d42 <_printf_float+0x28e>
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	07d9      	lsls	r1, r3, #31
 8007d40:	d5d8      	bpl.n	8007cf4 <_printf_float+0x240>
 8007d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d46:	4631      	mov	r1, r6
 8007d48:	4628      	mov	r0, r5
 8007d4a:	47b8      	blx	r7
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	f43f af0e 	beq.w	8007b6e <_printf_float+0xba>
 8007d52:	f04f 0900 	mov.w	r9, #0
 8007d56:	f104 0a1a 	add.w	sl, r4, #26
 8007d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d5c:	425b      	negs	r3, r3
 8007d5e:	454b      	cmp	r3, r9
 8007d60:	dc01      	bgt.n	8007d66 <_printf_float+0x2b2>
 8007d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d64:	e794      	b.n	8007c90 <_printf_float+0x1dc>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4652      	mov	r2, sl
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b8      	blx	r7
 8007d70:	3001      	adds	r0, #1
 8007d72:	f43f aefc 	beq.w	8007b6e <_printf_float+0xba>
 8007d76:	f109 0901 	add.w	r9, r9, #1
 8007d7a:	e7ee      	b.n	8007d5a <_printf_float+0x2a6>
 8007d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d80:	429a      	cmp	r2, r3
 8007d82:	bfa8      	it	ge
 8007d84:	461a      	movge	r2, r3
 8007d86:	2a00      	cmp	r2, #0
 8007d88:	4691      	mov	r9, r2
 8007d8a:	dd07      	ble.n	8007d9c <_printf_float+0x2e8>
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	4631      	mov	r1, r6
 8007d90:	4642      	mov	r2, r8
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f aee9 	beq.w	8007b6e <_printf_float+0xba>
 8007d9c:	f104 031a 	add.w	r3, r4, #26
 8007da0:	f04f 0b00 	mov.w	fp, #0
 8007da4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007da8:	9306      	str	r3, [sp, #24]
 8007daa:	e015      	b.n	8007dd8 <_printf_float+0x324>
 8007dac:	7fefffff 	.word	0x7fefffff
 8007db0:	0800a0d0 	.word	0x0800a0d0
 8007db4:	0800a0cc 	.word	0x0800a0cc
 8007db8:	0800a0d8 	.word	0x0800a0d8
 8007dbc:	0800a0d4 	.word	0x0800a0d4
 8007dc0:	0800a0dc 	.word	0x0800a0dc
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	9a06      	ldr	r2, [sp, #24]
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4628      	mov	r0, r5
 8007dcc:	47b8      	blx	r7
 8007dce:	3001      	adds	r0, #1
 8007dd0:	f43f aecd 	beq.w	8007b6e <_printf_float+0xba>
 8007dd4:	f10b 0b01 	add.w	fp, fp, #1
 8007dd8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007ddc:	ebaa 0309 	sub.w	r3, sl, r9
 8007de0:	455b      	cmp	r3, fp
 8007de2:	dcef      	bgt.n	8007dc4 <_printf_float+0x310>
 8007de4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007de8:	429a      	cmp	r2, r3
 8007dea:	44d0      	add	r8, sl
 8007dec:	db15      	blt.n	8007e1a <_printf_float+0x366>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	07da      	lsls	r2, r3, #31
 8007df2:	d412      	bmi.n	8007e1a <_printf_float+0x366>
 8007df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007df8:	eba3 020a 	sub.w	r2, r3, sl
 8007dfc:	eba3 0a01 	sub.w	sl, r3, r1
 8007e00:	4592      	cmp	sl, r2
 8007e02:	bfa8      	it	ge
 8007e04:	4692      	movge	sl, r2
 8007e06:	f1ba 0f00 	cmp.w	sl, #0
 8007e0a:	dc0e      	bgt.n	8007e2a <_printf_float+0x376>
 8007e0c:	f04f 0800 	mov.w	r8, #0
 8007e10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e14:	f104 091a 	add.w	r9, r4, #26
 8007e18:	e019      	b.n	8007e4e <_printf_float+0x39a>
 8007e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e1e:	4631      	mov	r1, r6
 8007e20:	4628      	mov	r0, r5
 8007e22:	47b8      	blx	r7
 8007e24:	3001      	adds	r0, #1
 8007e26:	d1e5      	bne.n	8007df4 <_printf_float+0x340>
 8007e28:	e6a1      	b.n	8007b6e <_printf_float+0xba>
 8007e2a:	4653      	mov	r3, sl
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	4631      	mov	r1, r6
 8007e30:	4628      	mov	r0, r5
 8007e32:	47b8      	blx	r7
 8007e34:	3001      	adds	r0, #1
 8007e36:	d1e9      	bne.n	8007e0c <_printf_float+0x358>
 8007e38:	e699      	b.n	8007b6e <_printf_float+0xba>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	464a      	mov	r2, r9
 8007e3e:	4631      	mov	r1, r6
 8007e40:	4628      	mov	r0, r5
 8007e42:	47b8      	blx	r7
 8007e44:	3001      	adds	r0, #1
 8007e46:	f43f ae92 	beq.w	8007b6e <_printf_float+0xba>
 8007e4a:	f108 0801 	add.w	r8, r8, #1
 8007e4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e52:	1a9b      	subs	r3, r3, r2
 8007e54:	eba3 030a 	sub.w	r3, r3, sl
 8007e58:	4543      	cmp	r3, r8
 8007e5a:	dcee      	bgt.n	8007e3a <_printf_float+0x386>
 8007e5c:	e74a      	b.n	8007cf4 <_printf_float+0x240>
 8007e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e60:	2a01      	cmp	r2, #1
 8007e62:	dc01      	bgt.n	8007e68 <_printf_float+0x3b4>
 8007e64:	07db      	lsls	r3, r3, #31
 8007e66:	d53a      	bpl.n	8007ede <_printf_float+0x42a>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	4642      	mov	r2, r8
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	f43f ae7b 	beq.w	8007b6e <_printf_float+0xba>
 8007e78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	4628      	mov	r0, r5
 8007e80:	47b8      	blx	r7
 8007e82:	3001      	adds	r0, #1
 8007e84:	f108 0801 	add.w	r8, r8, #1
 8007e88:	f43f ae71 	beq.w	8007b6e <_printf_float+0xba>
 8007e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f103 3aff 	add.w	sl, r3, #4294967295
 8007e94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f7f8 fe25 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e9e:	b9c8      	cbnz	r0, 8007ed4 <_printf_float+0x420>
 8007ea0:	4653      	mov	r3, sl
 8007ea2:	4642      	mov	r2, r8
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	47b8      	blx	r7
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d10e      	bne.n	8007ecc <_printf_float+0x418>
 8007eae:	e65e      	b.n	8007b6e <_printf_float+0xba>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	4652      	mov	r2, sl
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	47b8      	blx	r7
 8007eba:	3001      	adds	r0, #1
 8007ebc:	f43f ae57 	beq.w	8007b6e <_printf_float+0xba>
 8007ec0:	f108 0801 	add.w	r8, r8, #1
 8007ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	4543      	cmp	r3, r8
 8007eca:	dcf1      	bgt.n	8007eb0 <_printf_float+0x3fc>
 8007ecc:	464b      	mov	r3, r9
 8007ece:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ed2:	e6de      	b.n	8007c92 <_printf_float+0x1de>
 8007ed4:	f04f 0800 	mov.w	r8, #0
 8007ed8:	f104 0a1a 	add.w	sl, r4, #26
 8007edc:	e7f2      	b.n	8007ec4 <_printf_float+0x410>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e7df      	b.n	8007ea2 <_printf_float+0x3ee>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	464a      	mov	r2, r9
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4628      	mov	r0, r5
 8007eea:	47b8      	blx	r7
 8007eec:	3001      	adds	r0, #1
 8007eee:	f43f ae3e 	beq.w	8007b6e <_printf_float+0xba>
 8007ef2:	f108 0801 	add.w	r8, r8, #1
 8007ef6:	68e3      	ldr	r3, [r4, #12]
 8007ef8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007efa:	1a9b      	subs	r3, r3, r2
 8007efc:	4543      	cmp	r3, r8
 8007efe:	dcf0      	bgt.n	8007ee2 <_printf_float+0x42e>
 8007f00:	e6fc      	b.n	8007cfc <_printf_float+0x248>
 8007f02:	f04f 0800 	mov.w	r8, #0
 8007f06:	f104 0919 	add.w	r9, r4, #25
 8007f0a:	e7f4      	b.n	8007ef6 <_printf_float+0x442>
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	f43f ae8b 	beq.w	8007c28 <_printf_float+0x174>
 8007f12:	2300      	movs	r3, #0
 8007f14:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007f18:	ab09      	add	r3, sp, #36	; 0x24
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	ec49 8b10 	vmov	d0, r8, r9
 8007f20:	6022      	str	r2, [r4, #0]
 8007f22:	f8cd a004 	str.w	sl, [sp, #4]
 8007f26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f7ff fd2e 	bl	800798c <__cvt>
 8007f30:	4680      	mov	r8, r0
 8007f32:	e648      	b.n	8007bc6 <_printf_float+0x112>

08007f34 <_printf_common>:
 8007f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f38:	4691      	mov	r9, r2
 8007f3a:	461f      	mov	r7, r3
 8007f3c:	688a      	ldr	r2, [r1, #8]
 8007f3e:	690b      	ldr	r3, [r1, #16]
 8007f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f44:	4293      	cmp	r3, r2
 8007f46:	bfb8      	it	lt
 8007f48:	4613      	movlt	r3, r2
 8007f4a:	f8c9 3000 	str.w	r3, [r9]
 8007f4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f52:	4606      	mov	r6, r0
 8007f54:	460c      	mov	r4, r1
 8007f56:	b112      	cbz	r2, 8007f5e <_printf_common+0x2a>
 8007f58:	3301      	adds	r3, #1
 8007f5a:	f8c9 3000 	str.w	r3, [r9]
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	0699      	lsls	r1, r3, #26
 8007f62:	bf42      	ittt	mi
 8007f64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007f68:	3302      	addmi	r3, #2
 8007f6a:	f8c9 3000 	strmi.w	r3, [r9]
 8007f6e:	6825      	ldr	r5, [r4, #0]
 8007f70:	f015 0506 	ands.w	r5, r5, #6
 8007f74:	d107      	bne.n	8007f86 <_printf_common+0x52>
 8007f76:	f104 0a19 	add.w	sl, r4, #25
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8007f80:	1a9b      	subs	r3, r3, r2
 8007f82:	42ab      	cmp	r3, r5
 8007f84:	dc28      	bgt.n	8007fd8 <_printf_common+0xa4>
 8007f86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007f8a:	6822      	ldr	r2, [r4, #0]
 8007f8c:	3300      	adds	r3, #0
 8007f8e:	bf18      	it	ne
 8007f90:	2301      	movne	r3, #1
 8007f92:	0692      	lsls	r2, r2, #26
 8007f94:	d42d      	bmi.n	8007ff2 <_printf_common+0xbe>
 8007f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	47c0      	blx	r8
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d020      	beq.n	8007fe6 <_printf_common+0xb2>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	68e5      	ldr	r5, [r4, #12]
 8007fa8:	f8d9 2000 	ldr.w	r2, [r9]
 8007fac:	f003 0306 	and.w	r3, r3, #6
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	bf08      	it	eq
 8007fb4:	1aad      	subeq	r5, r5, r2
 8007fb6:	68a3      	ldr	r3, [r4, #8]
 8007fb8:	6922      	ldr	r2, [r4, #16]
 8007fba:	bf0c      	ite	eq
 8007fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fc0:	2500      	movne	r5, #0
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	bfc4      	itt	gt
 8007fc6:	1a9b      	subgt	r3, r3, r2
 8007fc8:	18ed      	addgt	r5, r5, r3
 8007fca:	f04f 0900 	mov.w	r9, #0
 8007fce:	341a      	adds	r4, #26
 8007fd0:	454d      	cmp	r5, r9
 8007fd2:	d11a      	bne.n	800800a <_printf_common+0xd6>
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	e008      	b.n	8007fea <_printf_common+0xb6>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	4652      	mov	r2, sl
 8007fdc:	4639      	mov	r1, r7
 8007fde:	4630      	mov	r0, r6
 8007fe0:	47c0      	blx	r8
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	d103      	bne.n	8007fee <_printf_common+0xba>
 8007fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fee:	3501      	adds	r5, #1
 8007ff0:	e7c3      	b.n	8007f7a <_printf_common+0x46>
 8007ff2:	18e1      	adds	r1, r4, r3
 8007ff4:	1c5a      	adds	r2, r3, #1
 8007ff6:	2030      	movs	r0, #48	; 0x30
 8007ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ffc:	4422      	add	r2, r4
 8007ffe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008002:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008006:	3302      	adds	r3, #2
 8008008:	e7c5      	b.n	8007f96 <_printf_common+0x62>
 800800a:	2301      	movs	r3, #1
 800800c:	4622      	mov	r2, r4
 800800e:	4639      	mov	r1, r7
 8008010:	4630      	mov	r0, r6
 8008012:	47c0      	blx	r8
 8008014:	3001      	adds	r0, #1
 8008016:	d0e6      	beq.n	8007fe6 <_printf_common+0xb2>
 8008018:	f109 0901 	add.w	r9, r9, #1
 800801c:	e7d8      	b.n	8007fd0 <_printf_common+0x9c>
	...

08008020 <_printf_i>:
 8008020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008024:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008028:	460c      	mov	r4, r1
 800802a:	7e09      	ldrb	r1, [r1, #24]
 800802c:	b085      	sub	sp, #20
 800802e:	296e      	cmp	r1, #110	; 0x6e
 8008030:	4617      	mov	r7, r2
 8008032:	4606      	mov	r6, r0
 8008034:	4698      	mov	r8, r3
 8008036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008038:	f000 80b3 	beq.w	80081a2 <_printf_i+0x182>
 800803c:	d822      	bhi.n	8008084 <_printf_i+0x64>
 800803e:	2963      	cmp	r1, #99	; 0x63
 8008040:	d036      	beq.n	80080b0 <_printf_i+0x90>
 8008042:	d80a      	bhi.n	800805a <_printf_i+0x3a>
 8008044:	2900      	cmp	r1, #0
 8008046:	f000 80b9 	beq.w	80081bc <_printf_i+0x19c>
 800804a:	2958      	cmp	r1, #88	; 0x58
 800804c:	f000 8083 	beq.w	8008156 <_printf_i+0x136>
 8008050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008054:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008058:	e032      	b.n	80080c0 <_printf_i+0xa0>
 800805a:	2964      	cmp	r1, #100	; 0x64
 800805c:	d001      	beq.n	8008062 <_printf_i+0x42>
 800805e:	2969      	cmp	r1, #105	; 0x69
 8008060:	d1f6      	bne.n	8008050 <_printf_i+0x30>
 8008062:	6820      	ldr	r0, [r4, #0]
 8008064:	6813      	ldr	r3, [r2, #0]
 8008066:	0605      	lsls	r5, r0, #24
 8008068:	f103 0104 	add.w	r1, r3, #4
 800806c:	d52a      	bpl.n	80080c4 <_printf_i+0xa4>
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6011      	str	r1, [r2, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	da03      	bge.n	800807e <_printf_i+0x5e>
 8008076:	222d      	movs	r2, #45	; 0x2d
 8008078:	425b      	negs	r3, r3
 800807a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800807e:	486f      	ldr	r0, [pc, #444]	; (800823c <_printf_i+0x21c>)
 8008080:	220a      	movs	r2, #10
 8008082:	e039      	b.n	80080f8 <_printf_i+0xd8>
 8008084:	2973      	cmp	r1, #115	; 0x73
 8008086:	f000 809d 	beq.w	80081c4 <_printf_i+0x1a4>
 800808a:	d808      	bhi.n	800809e <_printf_i+0x7e>
 800808c:	296f      	cmp	r1, #111	; 0x6f
 800808e:	d020      	beq.n	80080d2 <_printf_i+0xb2>
 8008090:	2970      	cmp	r1, #112	; 0x70
 8008092:	d1dd      	bne.n	8008050 <_printf_i+0x30>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	f043 0320 	orr.w	r3, r3, #32
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	e003      	b.n	80080a6 <_printf_i+0x86>
 800809e:	2975      	cmp	r1, #117	; 0x75
 80080a0:	d017      	beq.n	80080d2 <_printf_i+0xb2>
 80080a2:	2978      	cmp	r1, #120	; 0x78
 80080a4:	d1d4      	bne.n	8008050 <_printf_i+0x30>
 80080a6:	2378      	movs	r3, #120	; 0x78
 80080a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080ac:	4864      	ldr	r0, [pc, #400]	; (8008240 <_printf_i+0x220>)
 80080ae:	e055      	b.n	800815c <_printf_i+0x13c>
 80080b0:	6813      	ldr	r3, [r2, #0]
 80080b2:	1d19      	adds	r1, r3, #4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6011      	str	r1, [r2, #0]
 80080b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080c0:	2301      	movs	r3, #1
 80080c2:	e08c      	b.n	80081de <_printf_i+0x1be>
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6011      	str	r1, [r2, #0]
 80080c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080cc:	bf18      	it	ne
 80080ce:	b21b      	sxthne	r3, r3
 80080d0:	e7cf      	b.n	8008072 <_printf_i+0x52>
 80080d2:	6813      	ldr	r3, [r2, #0]
 80080d4:	6825      	ldr	r5, [r4, #0]
 80080d6:	1d18      	adds	r0, r3, #4
 80080d8:	6010      	str	r0, [r2, #0]
 80080da:	0628      	lsls	r0, r5, #24
 80080dc:	d501      	bpl.n	80080e2 <_printf_i+0xc2>
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	e002      	b.n	80080e8 <_printf_i+0xc8>
 80080e2:	0668      	lsls	r0, r5, #25
 80080e4:	d5fb      	bpl.n	80080de <_printf_i+0xbe>
 80080e6:	881b      	ldrh	r3, [r3, #0]
 80080e8:	4854      	ldr	r0, [pc, #336]	; (800823c <_printf_i+0x21c>)
 80080ea:	296f      	cmp	r1, #111	; 0x6f
 80080ec:	bf14      	ite	ne
 80080ee:	220a      	movne	r2, #10
 80080f0:	2208      	moveq	r2, #8
 80080f2:	2100      	movs	r1, #0
 80080f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080f8:	6865      	ldr	r5, [r4, #4]
 80080fa:	60a5      	str	r5, [r4, #8]
 80080fc:	2d00      	cmp	r5, #0
 80080fe:	f2c0 8095 	blt.w	800822c <_printf_i+0x20c>
 8008102:	6821      	ldr	r1, [r4, #0]
 8008104:	f021 0104 	bic.w	r1, r1, #4
 8008108:	6021      	str	r1, [r4, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d13d      	bne.n	800818a <_printf_i+0x16a>
 800810e:	2d00      	cmp	r5, #0
 8008110:	f040 808e 	bne.w	8008230 <_printf_i+0x210>
 8008114:	4665      	mov	r5, ip
 8008116:	2a08      	cmp	r2, #8
 8008118:	d10b      	bne.n	8008132 <_printf_i+0x112>
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	07db      	lsls	r3, r3, #31
 800811e:	d508      	bpl.n	8008132 <_printf_i+0x112>
 8008120:	6923      	ldr	r3, [r4, #16]
 8008122:	6862      	ldr	r2, [r4, #4]
 8008124:	429a      	cmp	r2, r3
 8008126:	bfde      	ittt	le
 8008128:	2330      	movle	r3, #48	; 0x30
 800812a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800812e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008132:	ebac 0305 	sub.w	r3, ip, r5
 8008136:	6123      	str	r3, [r4, #16]
 8008138:	f8cd 8000 	str.w	r8, [sp]
 800813c:	463b      	mov	r3, r7
 800813e:	aa03      	add	r2, sp, #12
 8008140:	4621      	mov	r1, r4
 8008142:	4630      	mov	r0, r6
 8008144:	f7ff fef6 	bl	8007f34 <_printf_common>
 8008148:	3001      	adds	r0, #1
 800814a:	d14d      	bne.n	80081e8 <_printf_i+0x1c8>
 800814c:	f04f 30ff 	mov.w	r0, #4294967295
 8008150:	b005      	add	sp, #20
 8008152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008156:	4839      	ldr	r0, [pc, #228]	; (800823c <_printf_i+0x21c>)
 8008158:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800815c:	6813      	ldr	r3, [r2, #0]
 800815e:	6821      	ldr	r1, [r4, #0]
 8008160:	1d1d      	adds	r5, r3, #4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6015      	str	r5, [r2, #0]
 8008166:	060a      	lsls	r2, r1, #24
 8008168:	d50b      	bpl.n	8008182 <_printf_i+0x162>
 800816a:	07ca      	lsls	r2, r1, #31
 800816c:	bf44      	itt	mi
 800816e:	f041 0120 	orrmi.w	r1, r1, #32
 8008172:	6021      	strmi	r1, [r4, #0]
 8008174:	b91b      	cbnz	r3, 800817e <_printf_i+0x15e>
 8008176:	6822      	ldr	r2, [r4, #0]
 8008178:	f022 0220 	bic.w	r2, r2, #32
 800817c:	6022      	str	r2, [r4, #0]
 800817e:	2210      	movs	r2, #16
 8008180:	e7b7      	b.n	80080f2 <_printf_i+0xd2>
 8008182:	064d      	lsls	r5, r1, #25
 8008184:	bf48      	it	mi
 8008186:	b29b      	uxthmi	r3, r3
 8008188:	e7ef      	b.n	800816a <_printf_i+0x14a>
 800818a:	4665      	mov	r5, ip
 800818c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008190:	fb02 3311 	mls	r3, r2, r1, r3
 8008194:	5cc3      	ldrb	r3, [r0, r3]
 8008196:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800819a:	460b      	mov	r3, r1
 800819c:	2900      	cmp	r1, #0
 800819e:	d1f5      	bne.n	800818c <_printf_i+0x16c>
 80081a0:	e7b9      	b.n	8008116 <_printf_i+0xf6>
 80081a2:	6813      	ldr	r3, [r2, #0]
 80081a4:	6825      	ldr	r5, [r4, #0]
 80081a6:	6961      	ldr	r1, [r4, #20]
 80081a8:	1d18      	adds	r0, r3, #4
 80081aa:	6010      	str	r0, [r2, #0]
 80081ac:	0628      	lsls	r0, r5, #24
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	d501      	bpl.n	80081b6 <_printf_i+0x196>
 80081b2:	6019      	str	r1, [r3, #0]
 80081b4:	e002      	b.n	80081bc <_printf_i+0x19c>
 80081b6:	066a      	lsls	r2, r5, #25
 80081b8:	d5fb      	bpl.n	80081b2 <_printf_i+0x192>
 80081ba:	8019      	strh	r1, [r3, #0]
 80081bc:	2300      	movs	r3, #0
 80081be:	6123      	str	r3, [r4, #16]
 80081c0:	4665      	mov	r5, ip
 80081c2:	e7b9      	b.n	8008138 <_printf_i+0x118>
 80081c4:	6813      	ldr	r3, [r2, #0]
 80081c6:	1d19      	adds	r1, r3, #4
 80081c8:	6011      	str	r1, [r2, #0]
 80081ca:	681d      	ldr	r5, [r3, #0]
 80081cc:	6862      	ldr	r2, [r4, #4]
 80081ce:	2100      	movs	r1, #0
 80081d0:	4628      	mov	r0, r5
 80081d2:	f7f8 f815 	bl	8000200 <memchr>
 80081d6:	b108      	cbz	r0, 80081dc <_printf_i+0x1bc>
 80081d8:	1b40      	subs	r0, r0, r5
 80081da:	6060      	str	r0, [r4, #4]
 80081dc:	6863      	ldr	r3, [r4, #4]
 80081de:	6123      	str	r3, [r4, #16]
 80081e0:	2300      	movs	r3, #0
 80081e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081e6:	e7a7      	b.n	8008138 <_printf_i+0x118>
 80081e8:	6923      	ldr	r3, [r4, #16]
 80081ea:	462a      	mov	r2, r5
 80081ec:	4639      	mov	r1, r7
 80081ee:	4630      	mov	r0, r6
 80081f0:	47c0      	blx	r8
 80081f2:	3001      	adds	r0, #1
 80081f4:	d0aa      	beq.n	800814c <_printf_i+0x12c>
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	079b      	lsls	r3, r3, #30
 80081fa:	d413      	bmi.n	8008224 <_printf_i+0x204>
 80081fc:	68e0      	ldr	r0, [r4, #12]
 80081fe:	9b03      	ldr	r3, [sp, #12]
 8008200:	4298      	cmp	r0, r3
 8008202:	bfb8      	it	lt
 8008204:	4618      	movlt	r0, r3
 8008206:	e7a3      	b.n	8008150 <_printf_i+0x130>
 8008208:	2301      	movs	r3, #1
 800820a:	464a      	mov	r2, r9
 800820c:	4639      	mov	r1, r7
 800820e:	4630      	mov	r0, r6
 8008210:	47c0      	blx	r8
 8008212:	3001      	adds	r0, #1
 8008214:	d09a      	beq.n	800814c <_printf_i+0x12c>
 8008216:	3501      	adds	r5, #1
 8008218:	68e3      	ldr	r3, [r4, #12]
 800821a:	9a03      	ldr	r2, [sp, #12]
 800821c:	1a9b      	subs	r3, r3, r2
 800821e:	42ab      	cmp	r3, r5
 8008220:	dcf2      	bgt.n	8008208 <_printf_i+0x1e8>
 8008222:	e7eb      	b.n	80081fc <_printf_i+0x1dc>
 8008224:	2500      	movs	r5, #0
 8008226:	f104 0919 	add.w	r9, r4, #25
 800822a:	e7f5      	b.n	8008218 <_printf_i+0x1f8>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1ac      	bne.n	800818a <_printf_i+0x16a>
 8008230:	7803      	ldrb	r3, [r0, #0]
 8008232:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008236:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800823a:	e76c      	b.n	8008116 <_printf_i+0xf6>
 800823c:	0800a0de 	.word	0x0800a0de
 8008240:	0800a0ef 	.word	0x0800a0ef

08008244 <iprintf>:
 8008244:	b40f      	push	{r0, r1, r2, r3}
 8008246:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <iprintf+0x2c>)
 8008248:	b513      	push	{r0, r1, r4, lr}
 800824a:	681c      	ldr	r4, [r3, #0]
 800824c:	b124      	cbz	r4, 8008258 <iprintf+0x14>
 800824e:	69a3      	ldr	r3, [r4, #24]
 8008250:	b913      	cbnz	r3, 8008258 <iprintf+0x14>
 8008252:	4620      	mov	r0, r4
 8008254:	f001 f924 	bl	80094a0 <__sinit>
 8008258:	ab05      	add	r3, sp, #20
 800825a:	9a04      	ldr	r2, [sp, #16]
 800825c:	68a1      	ldr	r1, [r4, #8]
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	4620      	mov	r0, r4
 8008262:	f001 fd2f 	bl	8009cc4 <_vfiprintf_r>
 8008266:	b002      	add	sp, #8
 8008268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800826c:	b004      	add	sp, #16
 800826e:	4770      	bx	lr
 8008270:	2000000c 	.word	0x2000000c

08008274 <_puts_r>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	460e      	mov	r6, r1
 8008278:	4605      	mov	r5, r0
 800827a:	b118      	cbz	r0, 8008284 <_puts_r+0x10>
 800827c:	6983      	ldr	r3, [r0, #24]
 800827e:	b90b      	cbnz	r3, 8008284 <_puts_r+0x10>
 8008280:	f001 f90e 	bl	80094a0 <__sinit>
 8008284:	69ab      	ldr	r3, [r5, #24]
 8008286:	68ac      	ldr	r4, [r5, #8]
 8008288:	b913      	cbnz	r3, 8008290 <_puts_r+0x1c>
 800828a:	4628      	mov	r0, r5
 800828c:	f001 f908 	bl	80094a0 <__sinit>
 8008290:	4b23      	ldr	r3, [pc, #140]	; (8008320 <_puts_r+0xac>)
 8008292:	429c      	cmp	r4, r3
 8008294:	d117      	bne.n	80082c6 <_puts_r+0x52>
 8008296:	686c      	ldr	r4, [r5, #4]
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	071b      	lsls	r3, r3, #28
 800829c:	d51d      	bpl.n	80082da <_puts_r+0x66>
 800829e:	6923      	ldr	r3, [r4, #16]
 80082a0:	b1db      	cbz	r3, 80082da <_puts_r+0x66>
 80082a2:	3e01      	subs	r6, #1
 80082a4:	68a3      	ldr	r3, [r4, #8]
 80082a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082aa:	3b01      	subs	r3, #1
 80082ac:	60a3      	str	r3, [r4, #8]
 80082ae:	b9e9      	cbnz	r1, 80082ec <_puts_r+0x78>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da2e      	bge.n	8008312 <_puts_r+0x9e>
 80082b4:	4622      	mov	r2, r4
 80082b6:	210a      	movs	r1, #10
 80082b8:	4628      	mov	r0, r5
 80082ba:	f000 f8fd 	bl	80084b8 <__swbuf_r>
 80082be:	3001      	adds	r0, #1
 80082c0:	d011      	beq.n	80082e6 <_puts_r+0x72>
 80082c2:	200a      	movs	r0, #10
 80082c4:	e011      	b.n	80082ea <_puts_r+0x76>
 80082c6:	4b17      	ldr	r3, [pc, #92]	; (8008324 <_puts_r+0xb0>)
 80082c8:	429c      	cmp	r4, r3
 80082ca:	d101      	bne.n	80082d0 <_puts_r+0x5c>
 80082cc:	68ac      	ldr	r4, [r5, #8]
 80082ce:	e7e3      	b.n	8008298 <_puts_r+0x24>
 80082d0:	4b15      	ldr	r3, [pc, #84]	; (8008328 <_puts_r+0xb4>)
 80082d2:	429c      	cmp	r4, r3
 80082d4:	bf08      	it	eq
 80082d6:	68ec      	ldreq	r4, [r5, #12]
 80082d8:	e7de      	b.n	8008298 <_puts_r+0x24>
 80082da:	4621      	mov	r1, r4
 80082dc:	4628      	mov	r0, r5
 80082de:	f000 f93d 	bl	800855c <__swsetup_r>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d0dd      	beq.n	80082a2 <_puts_r+0x2e>
 80082e6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	da04      	bge.n	80082fa <_puts_r+0x86>
 80082f0:	69a2      	ldr	r2, [r4, #24]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	dc06      	bgt.n	8008304 <_puts_r+0x90>
 80082f6:	290a      	cmp	r1, #10
 80082f8:	d004      	beq.n	8008304 <_puts_r+0x90>
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	6022      	str	r2, [r4, #0]
 8008300:	7019      	strb	r1, [r3, #0]
 8008302:	e7cf      	b.n	80082a4 <_puts_r+0x30>
 8008304:	4622      	mov	r2, r4
 8008306:	4628      	mov	r0, r5
 8008308:	f000 f8d6 	bl	80084b8 <__swbuf_r>
 800830c:	3001      	adds	r0, #1
 800830e:	d1c9      	bne.n	80082a4 <_puts_r+0x30>
 8008310:	e7e9      	b.n	80082e6 <_puts_r+0x72>
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	200a      	movs	r0, #10
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	6022      	str	r2, [r4, #0]
 800831a:	7018      	strb	r0, [r3, #0]
 800831c:	e7e5      	b.n	80082ea <_puts_r+0x76>
 800831e:	bf00      	nop
 8008320:	0800a130 	.word	0x0800a130
 8008324:	0800a150 	.word	0x0800a150
 8008328:	0800a110 	.word	0x0800a110

0800832c <puts>:
 800832c:	4b02      	ldr	r3, [pc, #8]	; (8008338 <puts+0xc>)
 800832e:	4601      	mov	r1, r0
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	f7ff bf9f 	b.w	8008274 <_puts_r>
 8008336:	bf00      	nop
 8008338:	2000000c 	.word	0x2000000c

0800833c <_sbrk_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4c06      	ldr	r4, [pc, #24]	; (8008358 <_sbrk_r+0x1c>)
 8008340:	2300      	movs	r3, #0
 8008342:	4605      	mov	r5, r0
 8008344:	4608      	mov	r0, r1
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	f7f9 fe6a 	bl	8002020 <_sbrk>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d102      	bne.n	8008356 <_sbrk_r+0x1a>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	b103      	cbz	r3, 8008356 <_sbrk_r+0x1a>
 8008354:	602b      	str	r3, [r5, #0]
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	200007b8 	.word	0x200007b8

0800835c <setvbuf>:
 800835c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008360:	461d      	mov	r5, r3
 8008362:	4b51      	ldr	r3, [pc, #324]	; (80084a8 <setvbuf+0x14c>)
 8008364:	681e      	ldr	r6, [r3, #0]
 8008366:	4604      	mov	r4, r0
 8008368:	460f      	mov	r7, r1
 800836a:	4690      	mov	r8, r2
 800836c:	b126      	cbz	r6, 8008378 <setvbuf+0x1c>
 800836e:	69b3      	ldr	r3, [r6, #24]
 8008370:	b913      	cbnz	r3, 8008378 <setvbuf+0x1c>
 8008372:	4630      	mov	r0, r6
 8008374:	f001 f894 	bl	80094a0 <__sinit>
 8008378:	4b4c      	ldr	r3, [pc, #304]	; (80084ac <setvbuf+0x150>)
 800837a:	429c      	cmp	r4, r3
 800837c:	d152      	bne.n	8008424 <setvbuf+0xc8>
 800837e:	6874      	ldr	r4, [r6, #4]
 8008380:	f1b8 0f02 	cmp.w	r8, #2
 8008384:	d006      	beq.n	8008394 <setvbuf+0x38>
 8008386:	f1b8 0f01 	cmp.w	r8, #1
 800838a:	f200 8089 	bhi.w	80084a0 <setvbuf+0x144>
 800838e:	2d00      	cmp	r5, #0
 8008390:	f2c0 8086 	blt.w	80084a0 <setvbuf+0x144>
 8008394:	4621      	mov	r1, r4
 8008396:	4630      	mov	r0, r6
 8008398:	f001 f818 	bl	80093cc <_fflush_r>
 800839c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800839e:	b141      	cbz	r1, 80083b2 <setvbuf+0x56>
 80083a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083a4:	4299      	cmp	r1, r3
 80083a6:	d002      	beq.n	80083ae <setvbuf+0x52>
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7ff fa47 	bl	800783c <_free_r>
 80083ae:	2300      	movs	r3, #0
 80083b0:	6363      	str	r3, [r4, #52]	; 0x34
 80083b2:	2300      	movs	r3, #0
 80083b4:	61a3      	str	r3, [r4, #24]
 80083b6:	6063      	str	r3, [r4, #4]
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	061b      	lsls	r3, r3, #24
 80083bc:	d503      	bpl.n	80083c6 <setvbuf+0x6a>
 80083be:	6921      	ldr	r1, [r4, #16]
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7ff fa3b 	bl	800783c <_free_r>
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80083cc:	f023 0303 	bic.w	r3, r3, #3
 80083d0:	f1b8 0f02 	cmp.w	r8, #2
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	d05d      	beq.n	8008494 <setvbuf+0x138>
 80083d8:	ab01      	add	r3, sp, #4
 80083da:	466a      	mov	r2, sp
 80083dc:	4621      	mov	r1, r4
 80083de:	4630      	mov	r0, r6
 80083e0:	f001 f8f6 	bl	80095d0 <__swhatbuf_r>
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	4318      	orrs	r0, r3
 80083e8:	81a0      	strh	r0, [r4, #12]
 80083ea:	bb2d      	cbnz	r5, 8008438 <setvbuf+0xdc>
 80083ec:	9d00      	ldr	r5, [sp, #0]
 80083ee:	4628      	mov	r0, r5
 80083f0:	f7ff fa00 	bl	80077f4 <malloc>
 80083f4:	4607      	mov	r7, r0
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d14e      	bne.n	8008498 <setvbuf+0x13c>
 80083fa:	f8dd 9000 	ldr.w	r9, [sp]
 80083fe:	45a9      	cmp	r9, r5
 8008400:	d13c      	bne.n	800847c <setvbuf+0x120>
 8008402:	f04f 30ff 	mov.w	r0, #4294967295
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	f043 0302 	orr.w	r3, r3, #2
 800840c:	81a3      	strh	r3, [r4, #12]
 800840e:	2300      	movs	r3, #0
 8008410:	60a3      	str	r3, [r4, #8]
 8008412:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008416:	6023      	str	r3, [r4, #0]
 8008418:	6123      	str	r3, [r4, #16]
 800841a:	2301      	movs	r3, #1
 800841c:	6163      	str	r3, [r4, #20]
 800841e:	b003      	add	sp, #12
 8008420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008424:	4b22      	ldr	r3, [pc, #136]	; (80084b0 <setvbuf+0x154>)
 8008426:	429c      	cmp	r4, r3
 8008428:	d101      	bne.n	800842e <setvbuf+0xd2>
 800842a:	68b4      	ldr	r4, [r6, #8]
 800842c:	e7a8      	b.n	8008380 <setvbuf+0x24>
 800842e:	4b21      	ldr	r3, [pc, #132]	; (80084b4 <setvbuf+0x158>)
 8008430:	429c      	cmp	r4, r3
 8008432:	bf08      	it	eq
 8008434:	68f4      	ldreq	r4, [r6, #12]
 8008436:	e7a3      	b.n	8008380 <setvbuf+0x24>
 8008438:	2f00      	cmp	r7, #0
 800843a:	d0d8      	beq.n	80083ee <setvbuf+0x92>
 800843c:	69b3      	ldr	r3, [r6, #24]
 800843e:	b913      	cbnz	r3, 8008446 <setvbuf+0xea>
 8008440:	4630      	mov	r0, r6
 8008442:	f001 f82d 	bl	80094a0 <__sinit>
 8008446:	f1b8 0f01 	cmp.w	r8, #1
 800844a:	bf08      	it	eq
 800844c:	89a3      	ldrheq	r3, [r4, #12]
 800844e:	6027      	str	r7, [r4, #0]
 8008450:	bf04      	itt	eq
 8008452:	f043 0301 	orreq.w	r3, r3, #1
 8008456:	81a3      	strheq	r3, [r4, #12]
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	f013 0008 	ands.w	r0, r3, #8
 800845e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8008462:	d01b      	beq.n	800849c <setvbuf+0x140>
 8008464:	f013 0001 	ands.w	r0, r3, #1
 8008468:	bf18      	it	ne
 800846a:	426d      	negne	r5, r5
 800846c:	f04f 0300 	mov.w	r3, #0
 8008470:	bf1d      	ittte	ne
 8008472:	60a3      	strne	r3, [r4, #8]
 8008474:	61a5      	strne	r5, [r4, #24]
 8008476:	4618      	movne	r0, r3
 8008478:	60a5      	streq	r5, [r4, #8]
 800847a:	e7d0      	b.n	800841e <setvbuf+0xc2>
 800847c:	4648      	mov	r0, r9
 800847e:	f7ff f9b9 	bl	80077f4 <malloc>
 8008482:	4607      	mov	r7, r0
 8008484:	2800      	cmp	r0, #0
 8008486:	d0bc      	beq.n	8008402 <setvbuf+0xa6>
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848e:	81a3      	strh	r3, [r4, #12]
 8008490:	464d      	mov	r5, r9
 8008492:	e7d3      	b.n	800843c <setvbuf+0xe0>
 8008494:	2000      	movs	r0, #0
 8008496:	e7b6      	b.n	8008406 <setvbuf+0xaa>
 8008498:	46a9      	mov	r9, r5
 800849a:	e7f5      	b.n	8008488 <setvbuf+0x12c>
 800849c:	60a0      	str	r0, [r4, #8]
 800849e:	e7be      	b.n	800841e <setvbuf+0xc2>
 80084a0:	f04f 30ff 	mov.w	r0, #4294967295
 80084a4:	e7bb      	b.n	800841e <setvbuf+0xc2>
 80084a6:	bf00      	nop
 80084a8:	2000000c 	.word	0x2000000c
 80084ac:	0800a130 	.word	0x0800a130
 80084b0:	0800a150 	.word	0x0800a150
 80084b4:	0800a110 	.word	0x0800a110

080084b8 <__swbuf_r>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	460e      	mov	r6, r1
 80084bc:	4614      	mov	r4, r2
 80084be:	4605      	mov	r5, r0
 80084c0:	b118      	cbz	r0, 80084ca <__swbuf_r+0x12>
 80084c2:	6983      	ldr	r3, [r0, #24]
 80084c4:	b90b      	cbnz	r3, 80084ca <__swbuf_r+0x12>
 80084c6:	f000 ffeb 	bl	80094a0 <__sinit>
 80084ca:	4b21      	ldr	r3, [pc, #132]	; (8008550 <__swbuf_r+0x98>)
 80084cc:	429c      	cmp	r4, r3
 80084ce:	d12a      	bne.n	8008526 <__swbuf_r+0x6e>
 80084d0:	686c      	ldr	r4, [r5, #4]
 80084d2:	69a3      	ldr	r3, [r4, #24]
 80084d4:	60a3      	str	r3, [r4, #8]
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	071a      	lsls	r2, r3, #28
 80084da:	d52e      	bpl.n	800853a <__swbuf_r+0x82>
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	b363      	cbz	r3, 800853a <__swbuf_r+0x82>
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	6820      	ldr	r0, [r4, #0]
 80084e4:	1ac0      	subs	r0, r0, r3
 80084e6:	6963      	ldr	r3, [r4, #20]
 80084e8:	b2f6      	uxtb	r6, r6
 80084ea:	4283      	cmp	r3, r0
 80084ec:	4637      	mov	r7, r6
 80084ee:	dc04      	bgt.n	80084fa <__swbuf_r+0x42>
 80084f0:	4621      	mov	r1, r4
 80084f2:	4628      	mov	r0, r5
 80084f4:	f000 ff6a 	bl	80093cc <_fflush_r>
 80084f8:	bb28      	cbnz	r0, 8008546 <__swbuf_r+0x8e>
 80084fa:	68a3      	ldr	r3, [r4, #8]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	60a3      	str	r3, [r4, #8]
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	6022      	str	r2, [r4, #0]
 8008506:	701e      	strb	r6, [r3, #0]
 8008508:	6963      	ldr	r3, [r4, #20]
 800850a:	3001      	adds	r0, #1
 800850c:	4283      	cmp	r3, r0
 800850e:	d004      	beq.n	800851a <__swbuf_r+0x62>
 8008510:	89a3      	ldrh	r3, [r4, #12]
 8008512:	07db      	lsls	r3, r3, #31
 8008514:	d519      	bpl.n	800854a <__swbuf_r+0x92>
 8008516:	2e0a      	cmp	r6, #10
 8008518:	d117      	bne.n	800854a <__swbuf_r+0x92>
 800851a:	4621      	mov	r1, r4
 800851c:	4628      	mov	r0, r5
 800851e:	f000 ff55 	bl	80093cc <_fflush_r>
 8008522:	b190      	cbz	r0, 800854a <__swbuf_r+0x92>
 8008524:	e00f      	b.n	8008546 <__swbuf_r+0x8e>
 8008526:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <__swbuf_r+0x9c>)
 8008528:	429c      	cmp	r4, r3
 800852a:	d101      	bne.n	8008530 <__swbuf_r+0x78>
 800852c:	68ac      	ldr	r4, [r5, #8]
 800852e:	e7d0      	b.n	80084d2 <__swbuf_r+0x1a>
 8008530:	4b09      	ldr	r3, [pc, #36]	; (8008558 <__swbuf_r+0xa0>)
 8008532:	429c      	cmp	r4, r3
 8008534:	bf08      	it	eq
 8008536:	68ec      	ldreq	r4, [r5, #12]
 8008538:	e7cb      	b.n	80084d2 <__swbuf_r+0x1a>
 800853a:	4621      	mov	r1, r4
 800853c:	4628      	mov	r0, r5
 800853e:	f000 f80d 	bl	800855c <__swsetup_r>
 8008542:	2800      	cmp	r0, #0
 8008544:	d0cc      	beq.n	80084e0 <__swbuf_r+0x28>
 8008546:	f04f 37ff 	mov.w	r7, #4294967295
 800854a:	4638      	mov	r0, r7
 800854c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800854e:	bf00      	nop
 8008550:	0800a130 	.word	0x0800a130
 8008554:	0800a150 	.word	0x0800a150
 8008558:	0800a110 	.word	0x0800a110

0800855c <__swsetup_r>:
 800855c:	4b32      	ldr	r3, [pc, #200]	; (8008628 <__swsetup_r+0xcc>)
 800855e:	b570      	push	{r4, r5, r6, lr}
 8008560:	681d      	ldr	r5, [r3, #0]
 8008562:	4606      	mov	r6, r0
 8008564:	460c      	mov	r4, r1
 8008566:	b125      	cbz	r5, 8008572 <__swsetup_r+0x16>
 8008568:	69ab      	ldr	r3, [r5, #24]
 800856a:	b913      	cbnz	r3, 8008572 <__swsetup_r+0x16>
 800856c:	4628      	mov	r0, r5
 800856e:	f000 ff97 	bl	80094a0 <__sinit>
 8008572:	4b2e      	ldr	r3, [pc, #184]	; (800862c <__swsetup_r+0xd0>)
 8008574:	429c      	cmp	r4, r3
 8008576:	d10f      	bne.n	8008598 <__swsetup_r+0x3c>
 8008578:	686c      	ldr	r4, [r5, #4]
 800857a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800857e:	b29a      	uxth	r2, r3
 8008580:	0715      	lsls	r5, r2, #28
 8008582:	d42c      	bmi.n	80085de <__swsetup_r+0x82>
 8008584:	06d0      	lsls	r0, r2, #27
 8008586:	d411      	bmi.n	80085ac <__swsetup_r+0x50>
 8008588:	2209      	movs	r2, #9
 800858a:	6032      	str	r2, [r6, #0]
 800858c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008590:	81a3      	strh	r3, [r4, #12]
 8008592:	f04f 30ff 	mov.w	r0, #4294967295
 8008596:	e03e      	b.n	8008616 <__swsetup_r+0xba>
 8008598:	4b25      	ldr	r3, [pc, #148]	; (8008630 <__swsetup_r+0xd4>)
 800859a:	429c      	cmp	r4, r3
 800859c:	d101      	bne.n	80085a2 <__swsetup_r+0x46>
 800859e:	68ac      	ldr	r4, [r5, #8]
 80085a0:	e7eb      	b.n	800857a <__swsetup_r+0x1e>
 80085a2:	4b24      	ldr	r3, [pc, #144]	; (8008634 <__swsetup_r+0xd8>)
 80085a4:	429c      	cmp	r4, r3
 80085a6:	bf08      	it	eq
 80085a8:	68ec      	ldreq	r4, [r5, #12]
 80085aa:	e7e6      	b.n	800857a <__swsetup_r+0x1e>
 80085ac:	0751      	lsls	r1, r2, #29
 80085ae:	d512      	bpl.n	80085d6 <__swsetup_r+0x7a>
 80085b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085b2:	b141      	cbz	r1, 80085c6 <__swsetup_r+0x6a>
 80085b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085b8:	4299      	cmp	r1, r3
 80085ba:	d002      	beq.n	80085c2 <__swsetup_r+0x66>
 80085bc:	4630      	mov	r0, r6
 80085be:	f7ff f93d 	bl	800783c <_free_r>
 80085c2:	2300      	movs	r3, #0
 80085c4:	6363      	str	r3, [r4, #52]	; 0x34
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085cc:	81a3      	strh	r3, [r4, #12]
 80085ce:	2300      	movs	r3, #0
 80085d0:	6063      	str	r3, [r4, #4]
 80085d2:	6923      	ldr	r3, [r4, #16]
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	f043 0308 	orr.w	r3, r3, #8
 80085dc:	81a3      	strh	r3, [r4, #12]
 80085de:	6923      	ldr	r3, [r4, #16]
 80085e0:	b94b      	cbnz	r3, 80085f6 <__swsetup_r+0x9a>
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ec:	d003      	beq.n	80085f6 <__swsetup_r+0x9a>
 80085ee:	4621      	mov	r1, r4
 80085f0:	4630      	mov	r0, r6
 80085f2:	f001 f811 	bl	8009618 <__smakebuf_r>
 80085f6:	89a2      	ldrh	r2, [r4, #12]
 80085f8:	f012 0301 	ands.w	r3, r2, #1
 80085fc:	d00c      	beq.n	8008618 <__swsetup_r+0xbc>
 80085fe:	2300      	movs	r3, #0
 8008600:	60a3      	str	r3, [r4, #8]
 8008602:	6963      	ldr	r3, [r4, #20]
 8008604:	425b      	negs	r3, r3
 8008606:	61a3      	str	r3, [r4, #24]
 8008608:	6923      	ldr	r3, [r4, #16]
 800860a:	b953      	cbnz	r3, 8008622 <__swsetup_r+0xc6>
 800860c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008610:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008614:	d1ba      	bne.n	800858c <__swsetup_r+0x30>
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	0792      	lsls	r2, r2, #30
 800861a:	bf58      	it	pl
 800861c:	6963      	ldrpl	r3, [r4, #20]
 800861e:	60a3      	str	r3, [r4, #8]
 8008620:	e7f2      	b.n	8008608 <__swsetup_r+0xac>
 8008622:	2000      	movs	r0, #0
 8008624:	e7f7      	b.n	8008616 <__swsetup_r+0xba>
 8008626:	bf00      	nop
 8008628:	2000000c 	.word	0x2000000c
 800862c:	0800a130 	.word	0x0800a130
 8008630:	0800a150 	.word	0x0800a150
 8008634:	0800a110 	.word	0x0800a110

08008638 <quorem>:
 8008638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	6903      	ldr	r3, [r0, #16]
 800863e:	690c      	ldr	r4, [r1, #16]
 8008640:	42a3      	cmp	r3, r4
 8008642:	4680      	mov	r8, r0
 8008644:	f2c0 8082 	blt.w	800874c <quorem+0x114>
 8008648:	3c01      	subs	r4, #1
 800864a:	f101 0714 	add.w	r7, r1, #20
 800864e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008652:	f100 0614 	add.w	r6, r0, #20
 8008656:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800865a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800865e:	eb06 030c 	add.w	r3, r6, ip
 8008662:	3501      	adds	r5, #1
 8008664:	eb07 090c 	add.w	r9, r7, ip
 8008668:	9301      	str	r3, [sp, #4]
 800866a:	fbb0 f5f5 	udiv	r5, r0, r5
 800866e:	b395      	cbz	r5, 80086d6 <quorem+0x9e>
 8008670:	f04f 0a00 	mov.w	sl, #0
 8008674:	4638      	mov	r0, r7
 8008676:	46b6      	mov	lr, r6
 8008678:	46d3      	mov	fp, sl
 800867a:	f850 2b04 	ldr.w	r2, [r0], #4
 800867e:	b293      	uxth	r3, r2
 8008680:	fb05 a303 	mla	r3, r5, r3, sl
 8008684:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008688:	b29b      	uxth	r3, r3
 800868a:	ebab 0303 	sub.w	r3, fp, r3
 800868e:	0c12      	lsrs	r2, r2, #16
 8008690:	f8de b000 	ldr.w	fp, [lr]
 8008694:	fb05 a202 	mla	r2, r5, r2, sl
 8008698:	fa13 f38b 	uxtah	r3, r3, fp
 800869c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80086a0:	fa1f fb82 	uxth.w	fp, r2
 80086a4:	f8de 2000 	ldr.w	r2, [lr]
 80086a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80086ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086b6:	4581      	cmp	r9, r0
 80086b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80086bc:	f84e 3b04 	str.w	r3, [lr], #4
 80086c0:	d2db      	bcs.n	800867a <quorem+0x42>
 80086c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80086c6:	b933      	cbnz	r3, 80086d6 <quorem+0x9e>
 80086c8:	9b01      	ldr	r3, [sp, #4]
 80086ca:	3b04      	subs	r3, #4
 80086cc:	429e      	cmp	r6, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	d330      	bcc.n	8008734 <quorem+0xfc>
 80086d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80086d6:	4640      	mov	r0, r8
 80086d8:	f001 f9f6 	bl	8009ac8 <__mcmp>
 80086dc:	2800      	cmp	r0, #0
 80086de:	db25      	blt.n	800872c <quorem+0xf4>
 80086e0:	3501      	adds	r5, #1
 80086e2:	4630      	mov	r0, r6
 80086e4:	f04f 0c00 	mov.w	ip, #0
 80086e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80086ec:	f8d0 e000 	ldr.w	lr, [r0]
 80086f0:	b293      	uxth	r3, r2
 80086f2:	ebac 0303 	sub.w	r3, ip, r3
 80086f6:	0c12      	lsrs	r2, r2, #16
 80086f8:	fa13 f38e 	uxtah	r3, r3, lr
 80086fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008700:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008704:	b29b      	uxth	r3, r3
 8008706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800870a:	45b9      	cmp	r9, r7
 800870c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008710:	f840 3b04 	str.w	r3, [r0], #4
 8008714:	d2e8      	bcs.n	80086e8 <quorem+0xb0>
 8008716:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800871a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800871e:	b92a      	cbnz	r2, 800872c <quorem+0xf4>
 8008720:	3b04      	subs	r3, #4
 8008722:	429e      	cmp	r6, r3
 8008724:	461a      	mov	r2, r3
 8008726:	d30b      	bcc.n	8008740 <quorem+0x108>
 8008728:	f8c8 4010 	str.w	r4, [r8, #16]
 800872c:	4628      	mov	r0, r5
 800872e:	b003      	add	sp, #12
 8008730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008734:	6812      	ldr	r2, [r2, #0]
 8008736:	3b04      	subs	r3, #4
 8008738:	2a00      	cmp	r2, #0
 800873a:	d1ca      	bne.n	80086d2 <quorem+0x9a>
 800873c:	3c01      	subs	r4, #1
 800873e:	e7c5      	b.n	80086cc <quorem+0x94>
 8008740:	6812      	ldr	r2, [r2, #0]
 8008742:	3b04      	subs	r3, #4
 8008744:	2a00      	cmp	r2, #0
 8008746:	d1ef      	bne.n	8008728 <quorem+0xf0>
 8008748:	3c01      	subs	r4, #1
 800874a:	e7ea      	b.n	8008722 <quorem+0xea>
 800874c:	2000      	movs	r0, #0
 800874e:	e7ee      	b.n	800872e <quorem+0xf6>

08008750 <_dtoa_r>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	ec57 6b10 	vmov	r6, r7, d0
 8008758:	b097      	sub	sp, #92	; 0x5c
 800875a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800875c:	9106      	str	r1, [sp, #24]
 800875e:	4604      	mov	r4, r0
 8008760:	920b      	str	r2, [sp, #44]	; 0x2c
 8008762:	9312      	str	r3, [sp, #72]	; 0x48
 8008764:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008768:	e9cd 6700 	strd	r6, r7, [sp]
 800876c:	b93d      	cbnz	r5, 800877e <_dtoa_r+0x2e>
 800876e:	2010      	movs	r0, #16
 8008770:	f7ff f840 	bl	80077f4 <malloc>
 8008774:	6260      	str	r0, [r4, #36]	; 0x24
 8008776:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800877a:	6005      	str	r5, [r0, #0]
 800877c:	60c5      	str	r5, [r0, #12]
 800877e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008780:	6819      	ldr	r1, [r3, #0]
 8008782:	b151      	cbz	r1, 800879a <_dtoa_r+0x4a>
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	604a      	str	r2, [r1, #4]
 8008788:	2301      	movs	r3, #1
 800878a:	4093      	lsls	r3, r2
 800878c:	608b      	str	r3, [r1, #8]
 800878e:	4620      	mov	r0, r4
 8008790:	f000 ffb8 	bl	8009704 <_Bfree>
 8008794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008796:	2200      	movs	r2, #0
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	1e3b      	subs	r3, r7, #0
 800879c:	bfbb      	ittet	lt
 800879e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087a2:	9301      	strlt	r3, [sp, #4]
 80087a4:	2300      	movge	r3, #0
 80087a6:	2201      	movlt	r2, #1
 80087a8:	bfac      	ite	ge
 80087aa:	f8c8 3000 	strge.w	r3, [r8]
 80087ae:	f8c8 2000 	strlt.w	r2, [r8]
 80087b2:	4baf      	ldr	r3, [pc, #700]	; (8008a70 <_dtoa_r+0x320>)
 80087b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80087b8:	ea33 0308 	bics.w	r3, r3, r8
 80087bc:	d114      	bne.n	80087e8 <_dtoa_r+0x98>
 80087be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	9b00      	ldr	r3, [sp, #0]
 80087c8:	b923      	cbnz	r3, 80087d4 <_dtoa_r+0x84>
 80087ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80087ce:	2800      	cmp	r0, #0
 80087d0:	f000 8542 	beq.w	8009258 <_dtoa_r+0xb08>
 80087d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008a84 <_dtoa_r+0x334>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 8544 	beq.w	8009268 <_dtoa_r+0xb18>
 80087e0:	f10b 0303 	add.w	r3, fp, #3
 80087e4:	f000 bd3e 	b.w	8009264 <_dtoa_r+0xb14>
 80087e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80087ec:	2200      	movs	r2, #0
 80087ee:	2300      	movs	r3, #0
 80087f0:	4630      	mov	r0, r6
 80087f2:	4639      	mov	r1, r7
 80087f4:	f7f8 f978 	bl	8000ae8 <__aeabi_dcmpeq>
 80087f8:	4681      	mov	r9, r0
 80087fa:	b168      	cbz	r0, 8008818 <_dtoa_r+0xc8>
 80087fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087fe:	2301      	movs	r3, #1
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 8524 	beq.w	8009252 <_dtoa_r+0xb02>
 800880a:	4b9a      	ldr	r3, [pc, #616]	; (8008a74 <_dtoa_r+0x324>)
 800880c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800880e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	f000 bd28 	b.w	8009268 <_dtoa_r+0xb18>
 8008818:	aa14      	add	r2, sp, #80	; 0x50
 800881a:	a915      	add	r1, sp, #84	; 0x54
 800881c:	ec47 6b10 	vmov	d0, r6, r7
 8008820:	4620      	mov	r0, r4
 8008822:	f001 f9c8 	bl	8009bb6 <__d2b>
 8008826:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800882a:	9004      	str	r0, [sp, #16]
 800882c:	2d00      	cmp	r5, #0
 800882e:	d07c      	beq.n	800892a <_dtoa_r+0x1da>
 8008830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008834:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008838:	46b2      	mov	sl, r6
 800883a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800883e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008842:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008846:	2200      	movs	r2, #0
 8008848:	4b8b      	ldr	r3, [pc, #556]	; (8008a78 <_dtoa_r+0x328>)
 800884a:	4650      	mov	r0, sl
 800884c:	4659      	mov	r1, fp
 800884e:	f7f7 fd2b 	bl	80002a8 <__aeabi_dsub>
 8008852:	a381      	add	r3, pc, #516	; (adr r3, 8008a58 <_dtoa_r+0x308>)
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f7f7 fede 	bl	8000618 <__aeabi_dmul>
 800885c:	a380      	add	r3, pc, #512	; (adr r3, 8008a60 <_dtoa_r+0x310>)
 800885e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008862:	f7f7 fd23 	bl	80002ac <__adddf3>
 8008866:	4606      	mov	r6, r0
 8008868:	4628      	mov	r0, r5
 800886a:	460f      	mov	r7, r1
 800886c:	f7f7 fe6a 	bl	8000544 <__aeabi_i2d>
 8008870:	a37d      	add	r3, pc, #500	; (adr r3, 8008a68 <_dtoa_r+0x318>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f7f7 fecf 	bl	8000618 <__aeabi_dmul>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	4630      	mov	r0, r6
 8008880:	4639      	mov	r1, r7
 8008882:	f7f7 fd13 	bl	80002ac <__adddf3>
 8008886:	4606      	mov	r6, r0
 8008888:	460f      	mov	r7, r1
 800888a:	f7f8 f975 	bl	8000b78 <__aeabi_d2iz>
 800888e:	2200      	movs	r2, #0
 8008890:	4682      	mov	sl, r0
 8008892:	2300      	movs	r3, #0
 8008894:	4630      	mov	r0, r6
 8008896:	4639      	mov	r1, r7
 8008898:	f7f8 f930 	bl	8000afc <__aeabi_dcmplt>
 800889c:	b148      	cbz	r0, 80088b2 <_dtoa_r+0x162>
 800889e:	4650      	mov	r0, sl
 80088a0:	f7f7 fe50 	bl	8000544 <__aeabi_i2d>
 80088a4:	4632      	mov	r2, r6
 80088a6:	463b      	mov	r3, r7
 80088a8:	f7f8 f91e 	bl	8000ae8 <__aeabi_dcmpeq>
 80088ac:	b908      	cbnz	r0, 80088b2 <_dtoa_r+0x162>
 80088ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088b2:	f1ba 0f16 	cmp.w	sl, #22
 80088b6:	d859      	bhi.n	800896c <_dtoa_r+0x21c>
 80088b8:	4970      	ldr	r1, [pc, #448]	; (8008a7c <_dtoa_r+0x32c>)
 80088ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80088be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088c6:	f7f8 f937 	bl	8000b38 <__aeabi_dcmpgt>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d050      	beq.n	8008970 <_dtoa_r+0x220>
 80088ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088d2:	2300      	movs	r3, #0
 80088d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80088d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088d8:	1b5d      	subs	r5, r3, r5
 80088da:	f1b5 0801 	subs.w	r8, r5, #1
 80088de:	bf49      	itett	mi
 80088e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80088e4:	2300      	movpl	r3, #0
 80088e6:	9305      	strmi	r3, [sp, #20]
 80088e8:	f04f 0800 	movmi.w	r8, #0
 80088ec:	bf58      	it	pl
 80088ee:	9305      	strpl	r3, [sp, #20]
 80088f0:	f1ba 0f00 	cmp.w	sl, #0
 80088f4:	db3e      	blt.n	8008974 <_dtoa_r+0x224>
 80088f6:	2300      	movs	r3, #0
 80088f8:	44d0      	add	r8, sl
 80088fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80088fe:	9307      	str	r3, [sp, #28]
 8008900:	9b06      	ldr	r3, [sp, #24]
 8008902:	2b09      	cmp	r3, #9
 8008904:	f200 8090 	bhi.w	8008a28 <_dtoa_r+0x2d8>
 8008908:	2b05      	cmp	r3, #5
 800890a:	bfc4      	itt	gt
 800890c:	3b04      	subgt	r3, #4
 800890e:	9306      	strgt	r3, [sp, #24]
 8008910:	9b06      	ldr	r3, [sp, #24]
 8008912:	f1a3 0302 	sub.w	r3, r3, #2
 8008916:	bfcc      	ite	gt
 8008918:	2500      	movgt	r5, #0
 800891a:	2501      	movle	r5, #1
 800891c:	2b03      	cmp	r3, #3
 800891e:	f200 808f 	bhi.w	8008a40 <_dtoa_r+0x2f0>
 8008922:	e8df f003 	tbb	[pc, r3]
 8008926:	7f7d      	.short	0x7f7d
 8008928:	7131      	.short	0x7131
 800892a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800892e:	441d      	add	r5, r3
 8008930:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008934:	2820      	cmp	r0, #32
 8008936:	dd13      	ble.n	8008960 <_dtoa_r+0x210>
 8008938:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800893c:	9b00      	ldr	r3, [sp, #0]
 800893e:	fa08 f800 	lsl.w	r8, r8, r0
 8008942:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008946:	fa23 f000 	lsr.w	r0, r3, r0
 800894a:	ea48 0000 	orr.w	r0, r8, r0
 800894e:	f7f7 fde9 	bl	8000524 <__aeabi_ui2d>
 8008952:	2301      	movs	r3, #1
 8008954:	4682      	mov	sl, r0
 8008956:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800895a:	3d01      	subs	r5, #1
 800895c:	9313      	str	r3, [sp, #76]	; 0x4c
 800895e:	e772      	b.n	8008846 <_dtoa_r+0xf6>
 8008960:	9b00      	ldr	r3, [sp, #0]
 8008962:	f1c0 0020 	rsb	r0, r0, #32
 8008966:	fa03 f000 	lsl.w	r0, r3, r0
 800896a:	e7f0      	b.n	800894e <_dtoa_r+0x1fe>
 800896c:	2301      	movs	r3, #1
 800896e:	e7b1      	b.n	80088d4 <_dtoa_r+0x184>
 8008970:	900f      	str	r0, [sp, #60]	; 0x3c
 8008972:	e7b0      	b.n	80088d6 <_dtoa_r+0x186>
 8008974:	9b05      	ldr	r3, [sp, #20]
 8008976:	eba3 030a 	sub.w	r3, r3, sl
 800897a:	9305      	str	r3, [sp, #20]
 800897c:	f1ca 0300 	rsb	r3, sl, #0
 8008980:	9307      	str	r3, [sp, #28]
 8008982:	2300      	movs	r3, #0
 8008984:	930e      	str	r3, [sp, #56]	; 0x38
 8008986:	e7bb      	b.n	8008900 <_dtoa_r+0x1b0>
 8008988:	2301      	movs	r3, #1
 800898a:	930a      	str	r3, [sp, #40]	; 0x28
 800898c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800898e:	2b00      	cmp	r3, #0
 8008990:	dd59      	ble.n	8008a46 <_dtoa_r+0x2f6>
 8008992:	9302      	str	r3, [sp, #8]
 8008994:	4699      	mov	r9, r3
 8008996:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008998:	2200      	movs	r2, #0
 800899a:	6072      	str	r2, [r6, #4]
 800899c:	2204      	movs	r2, #4
 800899e:	f102 0014 	add.w	r0, r2, #20
 80089a2:	4298      	cmp	r0, r3
 80089a4:	6871      	ldr	r1, [r6, #4]
 80089a6:	d953      	bls.n	8008a50 <_dtoa_r+0x300>
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 fe77 	bl	800969c <_Balloc>
 80089ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089b0:	6030      	str	r0, [r6, #0]
 80089b2:	f1b9 0f0e 	cmp.w	r9, #14
 80089b6:	f8d3 b000 	ldr.w	fp, [r3]
 80089ba:	f200 80e6 	bhi.w	8008b8a <_dtoa_r+0x43a>
 80089be:	2d00      	cmp	r5, #0
 80089c0:	f000 80e3 	beq.w	8008b8a <_dtoa_r+0x43a>
 80089c4:	ed9d 7b00 	vldr	d7, [sp]
 80089c8:	f1ba 0f00 	cmp.w	sl, #0
 80089cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80089d0:	dd74      	ble.n	8008abc <_dtoa_r+0x36c>
 80089d2:	4a2a      	ldr	r2, [pc, #168]	; (8008a7c <_dtoa_r+0x32c>)
 80089d4:	f00a 030f 	and.w	r3, sl, #15
 80089d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80089dc:	ed93 7b00 	vldr	d7, [r3]
 80089e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80089e4:	06f0      	lsls	r0, r6, #27
 80089e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80089ea:	d565      	bpl.n	8008ab8 <_dtoa_r+0x368>
 80089ec:	4b24      	ldr	r3, [pc, #144]	; (8008a80 <_dtoa_r+0x330>)
 80089ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089f6:	f7f7 ff39 	bl	800086c <__aeabi_ddiv>
 80089fa:	e9cd 0100 	strd	r0, r1, [sp]
 80089fe:	f006 060f 	and.w	r6, r6, #15
 8008a02:	2503      	movs	r5, #3
 8008a04:	4f1e      	ldr	r7, [pc, #120]	; (8008a80 <_dtoa_r+0x330>)
 8008a06:	e04c      	b.n	8008aa2 <_dtoa_r+0x352>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a0e:	4453      	add	r3, sl
 8008a10:	f103 0901 	add.w	r9, r3, #1
 8008a14:	9302      	str	r3, [sp, #8]
 8008a16:	464b      	mov	r3, r9
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	bfb8      	it	lt
 8008a1c:	2301      	movlt	r3, #1
 8008a1e:	e7ba      	b.n	8008996 <_dtoa_r+0x246>
 8008a20:	2300      	movs	r3, #0
 8008a22:	e7b2      	b.n	800898a <_dtoa_r+0x23a>
 8008a24:	2300      	movs	r3, #0
 8008a26:	e7f0      	b.n	8008a0a <_dtoa_r+0x2ba>
 8008a28:	2501      	movs	r5, #1
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	9306      	str	r3, [sp, #24]
 8008a2e:	950a      	str	r5, [sp, #40]	; 0x28
 8008a30:	f04f 33ff 	mov.w	r3, #4294967295
 8008a34:	9302      	str	r3, [sp, #8]
 8008a36:	4699      	mov	r9, r3
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2312      	movs	r3, #18
 8008a3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a3e:	e7aa      	b.n	8008996 <_dtoa_r+0x246>
 8008a40:	2301      	movs	r3, #1
 8008a42:	930a      	str	r3, [sp, #40]	; 0x28
 8008a44:	e7f4      	b.n	8008a30 <_dtoa_r+0x2e0>
 8008a46:	2301      	movs	r3, #1
 8008a48:	9302      	str	r3, [sp, #8]
 8008a4a:	4699      	mov	r9, r3
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	e7f5      	b.n	8008a3c <_dtoa_r+0x2ec>
 8008a50:	3101      	adds	r1, #1
 8008a52:	6071      	str	r1, [r6, #4]
 8008a54:	0052      	lsls	r2, r2, #1
 8008a56:	e7a2      	b.n	800899e <_dtoa_r+0x24e>
 8008a58:	636f4361 	.word	0x636f4361
 8008a5c:	3fd287a7 	.word	0x3fd287a7
 8008a60:	8b60c8b3 	.word	0x8b60c8b3
 8008a64:	3fc68a28 	.word	0x3fc68a28
 8008a68:	509f79fb 	.word	0x509f79fb
 8008a6c:	3fd34413 	.word	0x3fd34413
 8008a70:	7ff00000 	.word	0x7ff00000
 8008a74:	0800a0dd 	.word	0x0800a0dd
 8008a78:	3ff80000 	.word	0x3ff80000
 8008a7c:	0800a198 	.word	0x0800a198
 8008a80:	0800a170 	.word	0x0800a170
 8008a84:	0800a109 	.word	0x0800a109
 8008a88:	07f1      	lsls	r1, r6, #31
 8008a8a:	d508      	bpl.n	8008a9e <_dtoa_r+0x34e>
 8008a8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a94:	f7f7 fdc0 	bl	8000618 <__aeabi_dmul>
 8008a98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	1076      	asrs	r6, r6, #1
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	2e00      	cmp	r6, #0
 8008aa4:	d1f0      	bne.n	8008a88 <_dtoa_r+0x338>
 8008aa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008aaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008aae:	f7f7 fedd 	bl	800086c <__aeabi_ddiv>
 8008ab2:	e9cd 0100 	strd	r0, r1, [sp]
 8008ab6:	e01a      	b.n	8008aee <_dtoa_r+0x39e>
 8008ab8:	2502      	movs	r5, #2
 8008aba:	e7a3      	b.n	8008a04 <_dtoa_r+0x2b4>
 8008abc:	f000 80a0 	beq.w	8008c00 <_dtoa_r+0x4b0>
 8008ac0:	f1ca 0600 	rsb	r6, sl, #0
 8008ac4:	4b9f      	ldr	r3, [pc, #636]	; (8008d44 <_dtoa_r+0x5f4>)
 8008ac6:	4fa0      	ldr	r7, [pc, #640]	; (8008d48 <_dtoa_r+0x5f8>)
 8008ac8:	f006 020f 	and.w	r2, r6, #15
 8008acc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ad8:	f7f7 fd9e 	bl	8000618 <__aeabi_dmul>
 8008adc:	e9cd 0100 	strd	r0, r1, [sp]
 8008ae0:	1136      	asrs	r6, r6, #4
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	2502      	movs	r5, #2
 8008ae6:	2e00      	cmp	r6, #0
 8008ae8:	d17f      	bne.n	8008bea <_dtoa_r+0x49a>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e1      	bne.n	8008ab2 <_dtoa_r+0x362>
 8008aee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 8087 	beq.w	8008c04 <_dtoa_r+0x4b4>
 8008af6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008afa:	2200      	movs	r2, #0
 8008afc:	4b93      	ldr	r3, [pc, #588]	; (8008d4c <_dtoa_r+0x5fc>)
 8008afe:	4630      	mov	r0, r6
 8008b00:	4639      	mov	r1, r7
 8008b02:	f7f7 fffb 	bl	8000afc <__aeabi_dcmplt>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d07c      	beq.n	8008c04 <_dtoa_r+0x4b4>
 8008b0a:	f1b9 0f00 	cmp.w	r9, #0
 8008b0e:	d079      	beq.n	8008c04 <_dtoa_r+0x4b4>
 8008b10:	9b02      	ldr	r3, [sp, #8]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	dd35      	ble.n	8008b82 <_dtoa_r+0x432>
 8008b16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b1a:	9308      	str	r3, [sp, #32]
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	2200      	movs	r2, #0
 8008b20:	4b8b      	ldr	r3, [pc, #556]	; (8008d50 <_dtoa_r+0x600>)
 8008b22:	4630      	mov	r0, r6
 8008b24:	f7f7 fd78 	bl	8000618 <__aeabi_dmul>
 8008b28:	e9cd 0100 	strd	r0, r1, [sp]
 8008b2c:	9f02      	ldr	r7, [sp, #8]
 8008b2e:	3501      	adds	r5, #1
 8008b30:	4628      	mov	r0, r5
 8008b32:	f7f7 fd07 	bl	8000544 <__aeabi_i2d>
 8008b36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b3a:	f7f7 fd6d 	bl	8000618 <__aeabi_dmul>
 8008b3e:	2200      	movs	r2, #0
 8008b40:	4b84      	ldr	r3, [pc, #528]	; (8008d54 <_dtoa_r+0x604>)
 8008b42:	f7f7 fbb3 	bl	80002ac <__adddf3>
 8008b46:	4605      	mov	r5, r0
 8008b48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008b4c:	2f00      	cmp	r7, #0
 8008b4e:	d15d      	bne.n	8008c0c <_dtoa_r+0x4bc>
 8008b50:	2200      	movs	r2, #0
 8008b52:	4b81      	ldr	r3, [pc, #516]	; (8008d58 <_dtoa_r+0x608>)
 8008b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b58:	f7f7 fba6 	bl	80002a8 <__aeabi_dsub>
 8008b5c:	462a      	mov	r2, r5
 8008b5e:	4633      	mov	r3, r6
 8008b60:	e9cd 0100 	strd	r0, r1, [sp]
 8008b64:	f7f7 ffe8 	bl	8000b38 <__aeabi_dcmpgt>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	f040 8288 	bne.w	800907e <_dtoa_r+0x92e>
 8008b6e:	462a      	mov	r2, r5
 8008b70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b78:	f7f7 ffc0 	bl	8000afc <__aeabi_dcmplt>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	f040 827c 	bne.w	800907a <_dtoa_r+0x92a>
 8008b82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b86:	e9cd 2300 	strd	r2, r3, [sp]
 8008b8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f2c0 8150 	blt.w	8008e32 <_dtoa_r+0x6e2>
 8008b92:	f1ba 0f0e 	cmp.w	sl, #14
 8008b96:	f300 814c 	bgt.w	8008e32 <_dtoa_r+0x6e2>
 8008b9a:	4b6a      	ldr	r3, [pc, #424]	; (8008d44 <_dtoa_r+0x5f4>)
 8008b9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ba0:	ed93 7b00 	vldr	d7, [r3]
 8008ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008bac:	f280 80d8 	bge.w	8008d60 <_dtoa_r+0x610>
 8008bb0:	f1b9 0f00 	cmp.w	r9, #0
 8008bb4:	f300 80d4 	bgt.w	8008d60 <_dtoa_r+0x610>
 8008bb8:	f040 825e 	bne.w	8009078 <_dtoa_r+0x928>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	4b66      	ldr	r3, [pc, #408]	; (8008d58 <_dtoa_r+0x608>)
 8008bc0:	ec51 0b17 	vmov	r0, r1, d7
 8008bc4:	f7f7 fd28 	bl	8000618 <__aeabi_dmul>
 8008bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bcc:	f7f7 ffaa 	bl	8000b24 <__aeabi_dcmpge>
 8008bd0:	464f      	mov	r7, r9
 8008bd2:	464e      	mov	r6, r9
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	f040 8234 	bne.w	8009042 <_dtoa_r+0x8f2>
 8008bda:	2331      	movs	r3, #49	; 0x31
 8008bdc:	f10b 0501 	add.w	r5, fp, #1
 8008be0:	f88b 3000 	strb.w	r3, [fp]
 8008be4:	f10a 0a01 	add.w	sl, sl, #1
 8008be8:	e22f      	b.n	800904a <_dtoa_r+0x8fa>
 8008bea:	07f2      	lsls	r2, r6, #31
 8008bec:	d505      	bpl.n	8008bfa <_dtoa_r+0x4aa>
 8008bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bf2:	f7f7 fd11 	bl	8000618 <__aeabi_dmul>
 8008bf6:	3501      	adds	r5, #1
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	1076      	asrs	r6, r6, #1
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	e772      	b.n	8008ae6 <_dtoa_r+0x396>
 8008c00:	2502      	movs	r5, #2
 8008c02:	e774      	b.n	8008aee <_dtoa_r+0x39e>
 8008c04:	f8cd a020 	str.w	sl, [sp, #32]
 8008c08:	464f      	mov	r7, r9
 8008c0a:	e791      	b.n	8008b30 <_dtoa_r+0x3e0>
 8008c0c:	4b4d      	ldr	r3, [pc, #308]	; (8008d44 <_dtoa_r+0x5f4>)
 8008c0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d047      	beq.n	8008cac <_dtoa_r+0x55c>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	2000      	movs	r0, #0
 8008c22:	494e      	ldr	r1, [pc, #312]	; (8008d5c <_dtoa_r+0x60c>)
 8008c24:	f7f7 fe22 	bl	800086c <__aeabi_ddiv>
 8008c28:	462a      	mov	r2, r5
 8008c2a:	4633      	mov	r3, r6
 8008c2c:	f7f7 fb3c 	bl	80002a8 <__aeabi_dsub>
 8008c30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c34:	465d      	mov	r5, fp
 8008c36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c3a:	f7f7 ff9d 	bl	8000b78 <__aeabi_d2iz>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	f7f7 fc80 	bl	8000544 <__aeabi_i2d>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c4c:	f7f7 fb2c 	bl	80002a8 <__aeabi_dsub>
 8008c50:	3630      	adds	r6, #48	; 0x30
 8008c52:	f805 6b01 	strb.w	r6, [r5], #1
 8008c56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c5a:	e9cd 0100 	strd	r0, r1, [sp]
 8008c5e:	f7f7 ff4d 	bl	8000afc <__aeabi_dcmplt>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d163      	bne.n	8008d2e <_dtoa_r+0x5de>
 8008c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	4937      	ldr	r1, [pc, #220]	; (8008d4c <_dtoa_r+0x5fc>)
 8008c6e:	f7f7 fb1b 	bl	80002a8 <__aeabi_dsub>
 8008c72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c76:	f7f7 ff41 	bl	8000afc <__aeabi_dcmplt>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	f040 80b7 	bne.w	8008dee <_dtoa_r+0x69e>
 8008c80:	eba5 030b 	sub.w	r3, r5, fp
 8008c84:	429f      	cmp	r7, r3
 8008c86:	f77f af7c 	ble.w	8008b82 <_dtoa_r+0x432>
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	4b30      	ldr	r3, [pc, #192]	; (8008d50 <_dtoa_r+0x600>)
 8008c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c92:	f7f7 fcc1 	bl	8000618 <__aeabi_dmul>
 8008c96:	2200      	movs	r2, #0
 8008c98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c9c:	4b2c      	ldr	r3, [pc, #176]	; (8008d50 <_dtoa_r+0x600>)
 8008c9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ca2:	f7f7 fcb9 	bl	8000618 <__aeabi_dmul>
 8008ca6:	e9cd 0100 	strd	r0, r1, [sp]
 8008caa:	e7c4      	b.n	8008c36 <_dtoa_r+0x4e6>
 8008cac:	462a      	mov	r2, r5
 8008cae:	4633      	mov	r3, r6
 8008cb0:	f7f7 fcb2 	bl	8000618 <__aeabi_dmul>
 8008cb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008cb8:	eb0b 0507 	add.w	r5, fp, r7
 8008cbc:	465e      	mov	r6, fp
 8008cbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cc2:	f7f7 ff59 	bl	8000b78 <__aeabi_d2iz>
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	f7f7 fc3c 	bl	8000544 <__aeabi_i2d>
 8008ccc:	3730      	adds	r7, #48	; 0x30
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cd6:	f7f7 fae7 	bl	80002a8 <__aeabi_dsub>
 8008cda:	f806 7b01 	strb.w	r7, [r6], #1
 8008cde:	42ae      	cmp	r6, r5
 8008ce0:	e9cd 0100 	strd	r0, r1, [sp]
 8008ce4:	f04f 0200 	mov.w	r2, #0
 8008ce8:	d126      	bne.n	8008d38 <_dtoa_r+0x5e8>
 8008cea:	4b1c      	ldr	r3, [pc, #112]	; (8008d5c <_dtoa_r+0x60c>)
 8008cec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cf0:	f7f7 fadc 	bl	80002ac <__adddf3>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cfc:	f7f7 ff1c 	bl	8000b38 <__aeabi_dcmpgt>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d174      	bne.n	8008dee <_dtoa_r+0x69e>
 8008d04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d08:	2000      	movs	r0, #0
 8008d0a:	4914      	ldr	r1, [pc, #80]	; (8008d5c <_dtoa_r+0x60c>)
 8008d0c:	f7f7 facc 	bl	80002a8 <__aeabi_dsub>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d18:	f7f7 fef0 	bl	8000afc <__aeabi_dcmplt>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	f43f af30 	beq.w	8008b82 <_dtoa_r+0x432>
 8008d22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d26:	2b30      	cmp	r3, #48	; 0x30
 8008d28:	f105 32ff 	add.w	r2, r5, #4294967295
 8008d2c:	d002      	beq.n	8008d34 <_dtoa_r+0x5e4>
 8008d2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008d32:	e04a      	b.n	8008dca <_dtoa_r+0x67a>
 8008d34:	4615      	mov	r5, r2
 8008d36:	e7f4      	b.n	8008d22 <_dtoa_r+0x5d2>
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <_dtoa_r+0x600>)
 8008d3a:	f7f7 fc6d 	bl	8000618 <__aeabi_dmul>
 8008d3e:	e9cd 0100 	strd	r0, r1, [sp]
 8008d42:	e7bc      	b.n	8008cbe <_dtoa_r+0x56e>
 8008d44:	0800a198 	.word	0x0800a198
 8008d48:	0800a170 	.word	0x0800a170
 8008d4c:	3ff00000 	.word	0x3ff00000
 8008d50:	40240000 	.word	0x40240000
 8008d54:	401c0000 	.word	0x401c0000
 8008d58:	40140000 	.word	0x40140000
 8008d5c:	3fe00000 	.word	0x3fe00000
 8008d60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008d64:	465d      	mov	r5, fp
 8008d66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	f7f7 fd7d 	bl	800086c <__aeabi_ddiv>
 8008d72:	f7f7 ff01 	bl	8000b78 <__aeabi_d2iz>
 8008d76:	4680      	mov	r8, r0
 8008d78:	f7f7 fbe4 	bl	8000544 <__aeabi_i2d>
 8008d7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d80:	f7f7 fc4a 	bl	8000618 <__aeabi_dmul>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4630      	mov	r0, r6
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008d90:	f7f7 fa8a 	bl	80002a8 <__aeabi_dsub>
 8008d94:	f805 6b01 	strb.w	r6, [r5], #1
 8008d98:	eba5 060b 	sub.w	r6, r5, fp
 8008d9c:	45b1      	cmp	r9, r6
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	d139      	bne.n	8008e18 <_dtoa_r+0x6c8>
 8008da4:	f7f7 fa82 	bl	80002ac <__adddf3>
 8008da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dac:	4606      	mov	r6, r0
 8008dae:	460f      	mov	r7, r1
 8008db0:	f7f7 fec2 	bl	8000b38 <__aeabi_dcmpgt>
 8008db4:	b9c8      	cbnz	r0, 8008dea <_dtoa_r+0x69a>
 8008db6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dba:	4630      	mov	r0, r6
 8008dbc:	4639      	mov	r1, r7
 8008dbe:	f7f7 fe93 	bl	8000ae8 <__aeabi_dcmpeq>
 8008dc2:	b110      	cbz	r0, 8008dca <_dtoa_r+0x67a>
 8008dc4:	f018 0f01 	tst.w	r8, #1
 8008dc8:	d10f      	bne.n	8008dea <_dtoa_r+0x69a>
 8008dca:	9904      	ldr	r1, [sp, #16]
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 fc99 	bl	8009704 <_Bfree>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dd6:	702b      	strb	r3, [r5, #0]
 8008dd8:	f10a 0301 	add.w	r3, sl, #1
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 8241 	beq.w	8009268 <_dtoa_r+0xb18>
 8008de6:	601d      	str	r5, [r3, #0]
 8008de8:	e23e      	b.n	8009268 <_dtoa_r+0xb18>
 8008dea:	f8cd a020 	str.w	sl, [sp, #32]
 8008dee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008df2:	2a39      	cmp	r2, #57	; 0x39
 8008df4:	f105 33ff 	add.w	r3, r5, #4294967295
 8008df8:	d108      	bne.n	8008e0c <_dtoa_r+0x6bc>
 8008dfa:	459b      	cmp	fp, r3
 8008dfc:	d10a      	bne.n	8008e14 <_dtoa_r+0x6c4>
 8008dfe:	9b08      	ldr	r3, [sp, #32]
 8008e00:	3301      	adds	r3, #1
 8008e02:	9308      	str	r3, [sp, #32]
 8008e04:	2330      	movs	r3, #48	; 0x30
 8008e06:	f88b 3000 	strb.w	r3, [fp]
 8008e0a:	465b      	mov	r3, fp
 8008e0c:	781a      	ldrb	r2, [r3, #0]
 8008e0e:	3201      	adds	r2, #1
 8008e10:	701a      	strb	r2, [r3, #0]
 8008e12:	e78c      	b.n	8008d2e <_dtoa_r+0x5de>
 8008e14:	461d      	mov	r5, r3
 8008e16:	e7ea      	b.n	8008dee <_dtoa_r+0x69e>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4b9b      	ldr	r3, [pc, #620]	; (8009088 <_dtoa_r+0x938>)
 8008e1c:	f7f7 fbfc 	bl	8000618 <__aeabi_dmul>
 8008e20:	2200      	movs	r2, #0
 8008e22:	2300      	movs	r3, #0
 8008e24:	4606      	mov	r6, r0
 8008e26:	460f      	mov	r7, r1
 8008e28:	f7f7 fe5e 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d09a      	beq.n	8008d66 <_dtoa_r+0x616>
 8008e30:	e7cb      	b.n	8008dca <_dtoa_r+0x67a>
 8008e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e34:	2a00      	cmp	r2, #0
 8008e36:	f000 808b 	beq.w	8008f50 <_dtoa_r+0x800>
 8008e3a:	9a06      	ldr	r2, [sp, #24]
 8008e3c:	2a01      	cmp	r2, #1
 8008e3e:	dc6e      	bgt.n	8008f1e <_dtoa_r+0x7ce>
 8008e40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e42:	2a00      	cmp	r2, #0
 8008e44:	d067      	beq.n	8008f16 <_dtoa_r+0x7c6>
 8008e46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e4a:	9f07      	ldr	r7, [sp, #28]
 8008e4c:	9d05      	ldr	r5, [sp, #20]
 8008e4e:	9a05      	ldr	r2, [sp, #20]
 8008e50:	2101      	movs	r1, #1
 8008e52:	441a      	add	r2, r3
 8008e54:	4620      	mov	r0, r4
 8008e56:	9205      	str	r2, [sp, #20]
 8008e58:	4498      	add	r8, r3
 8008e5a:	f000 fcf3 	bl	8009844 <__i2b>
 8008e5e:	4606      	mov	r6, r0
 8008e60:	2d00      	cmp	r5, #0
 8008e62:	dd0c      	ble.n	8008e7e <_dtoa_r+0x72e>
 8008e64:	f1b8 0f00 	cmp.w	r8, #0
 8008e68:	dd09      	ble.n	8008e7e <_dtoa_r+0x72e>
 8008e6a:	4545      	cmp	r5, r8
 8008e6c:	9a05      	ldr	r2, [sp, #20]
 8008e6e:	462b      	mov	r3, r5
 8008e70:	bfa8      	it	ge
 8008e72:	4643      	movge	r3, r8
 8008e74:	1ad2      	subs	r2, r2, r3
 8008e76:	9205      	str	r2, [sp, #20]
 8008e78:	1aed      	subs	r5, r5, r3
 8008e7a:	eba8 0803 	sub.w	r8, r8, r3
 8008e7e:	9b07      	ldr	r3, [sp, #28]
 8008e80:	b1eb      	cbz	r3, 8008ebe <_dtoa_r+0x76e>
 8008e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d067      	beq.n	8008f58 <_dtoa_r+0x808>
 8008e88:	b18f      	cbz	r7, 8008eae <_dtoa_r+0x75e>
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	463a      	mov	r2, r7
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fd78 	bl	8009984 <__pow5mult>
 8008e94:	9a04      	ldr	r2, [sp, #16]
 8008e96:	4601      	mov	r1, r0
 8008e98:	4606      	mov	r6, r0
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 fcdb 	bl	8009856 <__multiply>
 8008ea0:	9904      	ldr	r1, [sp, #16]
 8008ea2:	9008      	str	r0, [sp, #32]
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f000 fc2d 	bl	8009704 <_Bfree>
 8008eaa:	9b08      	ldr	r3, [sp, #32]
 8008eac:	9304      	str	r3, [sp, #16]
 8008eae:	9b07      	ldr	r3, [sp, #28]
 8008eb0:	1bda      	subs	r2, r3, r7
 8008eb2:	d004      	beq.n	8008ebe <_dtoa_r+0x76e>
 8008eb4:	9904      	ldr	r1, [sp, #16]
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f000 fd64 	bl	8009984 <__pow5mult>
 8008ebc:	9004      	str	r0, [sp, #16]
 8008ebe:	2101      	movs	r1, #1
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fcbf 	bl	8009844 <__i2b>
 8008ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ec8:	4607      	mov	r7, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 81d0 	beq.w	8009270 <_dtoa_r+0xb20>
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	4601      	mov	r1, r0
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f000 fd55 	bl	8009984 <__pow5mult>
 8008eda:	9b06      	ldr	r3, [sp, #24]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	4607      	mov	r7, r0
 8008ee0:	dc40      	bgt.n	8008f64 <_dtoa_r+0x814>
 8008ee2:	9b00      	ldr	r3, [sp, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d139      	bne.n	8008f5c <_dtoa_r+0x80c>
 8008ee8:	9b01      	ldr	r3, [sp, #4]
 8008eea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d136      	bne.n	8008f60 <_dtoa_r+0x810>
 8008ef2:	9b01      	ldr	r3, [sp, #4]
 8008ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ef8:	0d1b      	lsrs	r3, r3, #20
 8008efa:	051b      	lsls	r3, r3, #20
 8008efc:	b12b      	cbz	r3, 8008f0a <_dtoa_r+0x7ba>
 8008efe:	9b05      	ldr	r3, [sp, #20]
 8008f00:	3301      	adds	r3, #1
 8008f02:	9305      	str	r3, [sp, #20]
 8008f04:	f108 0801 	add.w	r8, r8, #1
 8008f08:	2301      	movs	r3, #1
 8008f0a:	9307      	str	r3, [sp, #28]
 8008f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d12a      	bne.n	8008f68 <_dtoa_r+0x818>
 8008f12:	2001      	movs	r0, #1
 8008f14:	e030      	b.n	8008f78 <_dtoa_r+0x828>
 8008f16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f1c:	e795      	b.n	8008e4a <_dtoa_r+0x6fa>
 8008f1e:	9b07      	ldr	r3, [sp, #28]
 8008f20:	f109 37ff 	add.w	r7, r9, #4294967295
 8008f24:	42bb      	cmp	r3, r7
 8008f26:	bfbf      	itttt	lt
 8008f28:	9b07      	ldrlt	r3, [sp, #28]
 8008f2a:	9707      	strlt	r7, [sp, #28]
 8008f2c:	1afa      	sublt	r2, r7, r3
 8008f2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008f30:	bfbb      	ittet	lt
 8008f32:	189b      	addlt	r3, r3, r2
 8008f34:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008f36:	1bdf      	subge	r7, r3, r7
 8008f38:	2700      	movlt	r7, #0
 8008f3a:	f1b9 0f00 	cmp.w	r9, #0
 8008f3e:	bfb5      	itete	lt
 8008f40:	9b05      	ldrlt	r3, [sp, #20]
 8008f42:	9d05      	ldrge	r5, [sp, #20]
 8008f44:	eba3 0509 	sublt.w	r5, r3, r9
 8008f48:	464b      	movge	r3, r9
 8008f4a:	bfb8      	it	lt
 8008f4c:	2300      	movlt	r3, #0
 8008f4e:	e77e      	b.n	8008e4e <_dtoa_r+0x6fe>
 8008f50:	9f07      	ldr	r7, [sp, #28]
 8008f52:	9d05      	ldr	r5, [sp, #20]
 8008f54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008f56:	e783      	b.n	8008e60 <_dtoa_r+0x710>
 8008f58:	9a07      	ldr	r2, [sp, #28]
 8008f5a:	e7ab      	b.n	8008eb4 <_dtoa_r+0x764>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e7d4      	b.n	8008f0a <_dtoa_r+0x7ba>
 8008f60:	9b00      	ldr	r3, [sp, #0]
 8008f62:	e7d2      	b.n	8008f0a <_dtoa_r+0x7ba>
 8008f64:	2300      	movs	r3, #0
 8008f66:	9307      	str	r3, [sp, #28]
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008f6e:	6918      	ldr	r0, [r3, #16]
 8008f70:	f000 fc1a 	bl	80097a8 <__hi0bits>
 8008f74:	f1c0 0020 	rsb	r0, r0, #32
 8008f78:	4440      	add	r0, r8
 8008f7a:	f010 001f 	ands.w	r0, r0, #31
 8008f7e:	d047      	beq.n	8009010 <_dtoa_r+0x8c0>
 8008f80:	f1c0 0320 	rsb	r3, r0, #32
 8008f84:	2b04      	cmp	r3, #4
 8008f86:	dd3b      	ble.n	8009000 <_dtoa_r+0x8b0>
 8008f88:	9b05      	ldr	r3, [sp, #20]
 8008f8a:	f1c0 001c 	rsb	r0, r0, #28
 8008f8e:	4403      	add	r3, r0
 8008f90:	9305      	str	r3, [sp, #20]
 8008f92:	4405      	add	r5, r0
 8008f94:	4480      	add	r8, r0
 8008f96:	9b05      	ldr	r3, [sp, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	dd05      	ble.n	8008fa8 <_dtoa_r+0x858>
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	9904      	ldr	r1, [sp, #16]
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 fd3d 	bl	8009a20 <__lshift>
 8008fa6:	9004      	str	r0, [sp, #16]
 8008fa8:	f1b8 0f00 	cmp.w	r8, #0
 8008fac:	dd05      	ble.n	8008fba <_dtoa_r+0x86a>
 8008fae:	4639      	mov	r1, r7
 8008fb0:	4642      	mov	r2, r8
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 fd34 	bl	8009a20 <__lshift>
 8008fb8:	4607      	mov	r7, r0
 8008fba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fbc:	b353      	cbz	r3, 8009014 <_dtoa_r+0x8c4>
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	9804      	ldr	r0, [sp, #16]
 8008fc2:	f000 fd81 	bl	8009ac8 <__mcmp>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	da24      	bge.n	8009014 <_dtoa_r+0x8c4>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	220a      	movs	r2, #10
 8008fce:	9904      	ldr	r1, [sp, #16]
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f000 fbae 	bl	8009732 <__multadd>
 8008fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd8:	9004      	str	r0, [sp, #16]
 8008fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 814d 	beq.w	800927e <_dtoa_r+0xb2e>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	220a      	movs	r2, #10
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 fba1 	bl	8009732 <__multadd>
 8008ff0:	9b02      	ldr	r3, [sp, #8]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	dc4f      	bgt.n	8009098 <_dtoa_r+0x948>
 8008ff8:	9b06      	ldr	r3, [sp, #24]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	dd4c      	ble.n	8009098 <_dtoa_r+0x948>
 8008ffe:	e011      	b.n	8009024 <_dtoa_r+0x8d4>
 8009000:	d0c9      	beq.n	8008f96 <_dtoa_r+0x846>
 8009002:	9a05      	ldr	r2, [sp, #20]
 8009004:	331c      	adds	r3, #28
 8009006:	441a      	add	r2, r3
 8009008:	9205      	str	r2, [sp, #20]
 800900a:	441d      	add	r5, r3
 800900c:	4498      	add	r8, r3
 800900e:	e7c2      	b.n	8008f96 <_dtoa_r+0x846>
 8009010:	4603      	mov	r3, r0
 8009012:	e7f6      	b.n	8009002 <_dtoa_r+0x8b2>
 8009014:	f1b9 0f00 	cmp.w	r9, #0
 8009018:	dc38      	bgt.n	800908c <_dtoa_r+0x93c>
 800901a:	9b06      	ldr	r3, [sp, #24]
 800901c:	2b02      	cmp	r3, #2
 800901e:	dd35      	ble.n	800908c <_dtoa_r+0x93c>
 8009020:	f8cd 9008 	str.w	r9, [sp, #8]
 8009024:	9b02      	ldr	r3, [sp, #8]
 8009026:	b963      	cbnz	r3, 8009042 <_dtoa_r+0x8f2>
 8009028:	4639      	mov	r1, r7
 800902a:	2205      	movs	r2, #5
 800902c:	4620      	mov	r0, r4
 800902e:	f000 fb80 	bl	8009732 <__multadd>
 8009032:	4601      	mov	r1, r0
 8009034:	4607      	mov	r7, r0
 8009036:	9804      	ldr	r0, [sp, #16]
 8009038:	f000 fd46 	bl	8009ac8 <__mcmp>
 800903c:	2800      	cmp	r0, #0
 800903e:	f73f adcc 	bgt.w	8008bda <_dtoa_r+0x48a>
 8009042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009044:	465d      	mov	r5, fp
 8009046:	ea6f 0a03 	mvn.w	sl, r3
 800904a:	f04f 0900 	mov.w	r9, #0
 800904e:	4639      	mov	r1, r7
 8009050:	4620      	mov	r0, r4
 8009052:	f000 fb57 	bl	8009704 <_Bfree>
 8009056:	2e00      	cmp	r6, #0
 8009058:	f43f aeb7 	beq.w	8008dca <_dtoa_r+0x67a>
 800905c:	f1b9 0f00 	cmp.w	r9, #0
 8009060:	d005      	beq.n	800906e <_dtoa_r+0x91e>
 8009062:	45b1      	cmp	r9, r6
 8009064:	d003      	beq.n	800906e <_dtoa_r+0x91e>
 8009066:	4649      	mov	r1, r9
 8009068:	4620      	mov	r0, r4
 800906a:	f000 fb4b 	bl	8009704 <_Bfree>
 800906e:	4631      	mov	r1, r6
 8009070:	4620      	mov	r0, r4
 8009072:	f000 fb47 	bl	8009704 <_Bfree>
 8009076:	e6a8      	b.n	8008dca <_dtoa_r+0x67a>
 8009078:	2700      	movs	r7, #0
 800907a:	463e      	mov	r6, r7
 800907c:	e7e1      	b.n	8009042 <_dtoa_r+0x8f2>
 800907e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009082:	463e      	mov	r6, r7
 8009084:	e5a9      	b.n	8008bda <_dtoa_r+0x48a>
 8009086:	bf00      	nop
 8009088:	40240000 	.word	0x40240000
 800908c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800908e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 80fa 	beq.w	800928c <_dtoa_r+0xb3c>
 8009098:	2d00      	cmp	r5, #0
 800909a:	dd05      	ble.n	80090a8 <_dtoa_r+0x958>
 800909c:	4631      	mov	r1, r6
 800909e:	462a      	mov	r2, r5
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 fcbd 	bl	8009a20 <__lshift>
 80090a6:	4606      	mov	r6, r0
 80090a8:	9b07      	ldr	r3, [sp, #28]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d04c      	beq.n	8009148 <_dtoa_r+0x9f8>
 80090ae:	6871      	ldr	r1, [r6, #4]
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 faf3 	bl	800969c <_Balloc>
 80090b6:	6932      	ldr	r2, [r6, #16]
 80090b8:	3202      	adds	r2, #2
 80090ba:	4605      	mov	r5, r0
 80090bc:	0092      	lsls	r2, r2, #2
 80090be:	f106 010c 	add.w	r1, r6, #12
 80090c2:	300c      	adds	r0, #12
 80090c4:	f7fe fba6 	bl	8007814 <memcpy>
 80090c8:	2201      	movs	r2, #1
 80090ca:	4629      	mov	r1, r5
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 fca7 	bl	8009a20 <__lshift>
 80090d2:	9b00      	ldr	r3, [sp, #0]
 80090d4:	f8cd b014 	str.w	fp, [sp, #20]
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	46b1      	mov	r9, r6
 80090de:	9307      	str	r3, [sp, #28]
 80090e0:	4606      	mov	r6, r0
 80090e2:	4639      	mov	r1, r7
 80090e4:	9804      	ldr	r0, [sp, #16]
 80090e6:	f7ff faa7 	bl	8008638 <quorem>
 80090ea:	4649      	mov	r1, r9
 80090ec:	4605      	mov	r5, r0
 80090ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80090f2:	9804      	ldr	r0, [sp, #16]
 80090f4:	f000 fce8 	bl	8009ac8 <__mcmp>
 80090f8:	4632      	mov	r2, r6
 80090fa:	9000      	str	r0, [sp, #0]
 80090fc:	4639      	mov	r1, r7
 80090fe:	4620      	mov	r0, r4
 8009100:	f000 fcfc 	bl	8009afc <__mdiff>
 8009104:	68c3      	ldr	r3, [r0, #12]
 8009106:	4602      	mov	r2, r0
 8009108:	bb03      	cbnz	r3, 800914c <_dtoa_r+0x9fc>
 800910a:	4601      	mov	r1, r0
 800910c:	9008      	str	r0, [sp, #32]
 800910e:	9804      	ldr	r0, [sp, #16]
 8009110:	f000 fcda 	bl	8009ac8 <__mcmp>
 8009114:	9a08      	ldr	r2, [sp, #32]
 8009116:	4603      	mov	r3, r0
 8009118:	4611      	mov	r1, r2
 800911a:	4620      	mov	r0, r4
 800911c:	9308      	str	r3, [sp, #32]
 800911e:	f000 faf1 	bl	8009704 <_Bfree>
 8009122:	9b08      	ldr	r3, [sp, #32]
 8009124:	b9a3      	cbnz	r3, 8009150 <_dtoa_r+0xa00>
 8009126:	9a06      	ldr	r2, [sp, #24]
 8009128:	b992      	cbnz	r2, 8009150 <_dtoa_r+0xa00>
 800912a:	9a07      	ldr	r2, [sp, #28]
 800912c:	b982      	cbnz	r2, 8009150 <_dtoa_r+0xa00>
 800912e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009132:	d029      	beq.n	8009188 <_dtoa_r+0xa38>
 8009134:	9b00      	ldr	r3, [sp, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	dd01      	ble.n	800913e <_dtoa_r+0x9ee>
 800913a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800913e:	9b05      	ldr	r3, [sp, #20]
 8009140:	1c5d      	adds	r5, r3, #1
 8009142:	f883 8000 	strb.w	r8, [r3]
 8009146:	e782      	b.n	800904e <_dtoa_r+0x8fe>
 8009148:	4630      	mov	r0, r6
 800914a:	e7c2      	b.n	80090d2 <_dtoa_r+0x982>
 800914c:	2301      	movs	r3, #1
 800914e:	e7e3      	b.n	8009118 <_dtoa_r+0x9c8>
 8009150:	9a00      	ldr	r2, [sp, #0]
 8009152:	2a00      	cmp	r2, #0
 8009154:	db04      	blt.n	8009160 <_dtoa_r+0xa10>
 8009156:	d125      	bne.n	80091a4 <_dtoa_r+0xa54>
 8009158:	9a06      	ldr	r2, [sp, #24]
 800915a:	bb1a      	cbnz	r2, 80091a4 <_dtoa_r+0xa54>
 800915c:	9a07      	ldr	r2, [sp, #28]
 800915e:	bb0a      	cbnz	r2, 80091a4 <_dtoa_r+0xa54>
 8009160:	2b00      	cmp	r3, #0
 8009162:	ddec      	ble.n	800913e <_dtoa_r+0x9ee>
 8009164:	2201      	movs	r2, #1
 8009166:	9904      	ldr	r1, [sp, #16]
 8009168:	4620      	mov	r0, r4
 800916a:	f000 fc59 	bl	8009a20 <__lshift>
 800916e:	4639      	mov	r1, r7
 8009170:	9004      	str	r0, [sp, #16]
 8009172:	f000 fca9 	bl	8009ac8 <__mcmp>
 8009176:	2800      	cmp	r0, #0
 8009178:	dc03      	bgt.n	8009182 <_dtoa_r+0xa32>
 800917a:	d1e0      	bne.n	800913e <_dtoa_r+0x9ee>
 800917c:	f018 0f01 	tst.w	r8, #1
 8009180:	d0dd      	beq.n	800913e <_dtoa_r+0x9ee>
 8009182:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009186:	d1d8      	bne.n	800913a <_dtoa_r+0x9ea>
 8009188:	9b05      	ldr	r3, [sp, #20]
 800918a:	9a05      	ldr	r2, [sp, #20]
 800918c:	1c5d      	adds	r5, r3, #1
 800918e:	2339      	movs	r3, #57	; 0x39
 8009190:	7013      	strb	r3, [r2, #0]
 8009192:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009196:	2b39      	cmp	r3, #57	; 0x39
 8009198:	f105 32ff 	add.w	r2, r5, #4294967295
 800919c:	d04f      	beq.n	800923e <_dtoa_r+0xaee>
 800919e:	3301      	adds	r3, #1
 80091a0:	7013      	strb	r3, [r2, #0]
 80091a2:	e754      	b.n	800904e <_dtoa_r+0x8fe>
 80091a4:	9a05      	ldr	r2, [sp, #20]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f102 0501 	add.w	r5, r2, #1
 80091ac:	dd06      	ble.n	80091bc <_dtoa_r+0xa6c>
 80091ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80091b2:	d0e9      	beq.n	8009188 <_dtoa_r+0xa38>
 80091b4:	f108 0801 	add.w	r8, r8, #1
 80091b8:	9b05      	ldr	r3, [sp, #20]
 80091ba:	e7c2      	b.n	8009142 <_dtoa_r+0x9f2>
 80091bc:	9a02      	ldr	r2, [sp, #8]
 80091be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80091c2:	eba5 030b 	sub.w	r3, r5, fp
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d021      	beq.n	800920e <_dtoa_r+0xabe>
 80091ca:	2300      	movs	r3, #0
 80091cc:	220a      	movs	r2, #10
 80091ce:	9904      	ldr	r1, [sp, #16]
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 faae 	bl	8009732 <__multadd>
 80091d6:	45b1      	cmp	r9, r6
 80091d8:	9004      	str	r0, [sp, #16]
 80091da:	f04f 0300 	mov.w	r3, #0
 80091de:	f04f 020a 	mov.w	r2, #10
 80091e2:	4649      	mov	r1, r9
 80091e4:	4620      	mov	r0, r4
 80091e6:	d105      	bne.n	80091f4 <_dtoa_r+0xaa4>
 80091e8:	f000 faa3 	bl	8009732 <__multadd>
 80091ec:	4681      	mov	r9, r0
 80091ee:	4606      	mov	r6, r0
 80091f0:	9505      	str	r5, [sp, #20]
 80091f2:	e776      	b.n	80090e2 <_dtoa_r+0x992>
 80091f4:	f000 fa9d 	bl	8009732 <__multadd>
 80091f8:	4631      	mov	r1, r6
 80091fa:	4681      	mov	r9, r0
 80091fc:	2300      	movs	r3, #0
 80091fe:	220a      	movs	r2, #10
 8009200:	4620      	mov	r0, r4
 8009202:	f000 fa96 	bl	8009732 <__multadd>
 8009206:	4606      	mov	r6, r0
 8009208:	e7f2      	b.n	80091f0 <_dtoa_r+0xaa0>
 800920a:	f04f 0900 	mov.w	r9, #0
 800920e:	2201      	movs	r2, #1
 8009210:	9904      	ldr	r1, [sp, #16]
 8009212:	4620      	mov	r0, r4
 8009214:	f000 fc04 	bl	8009a20 <__lshift>
 8009218:	4639      	mov	r1, r7
 800921a:	9004      	str	r0, [sp, #16]
 800921c:	f000 fc54 	bl	8009ac8 <__mcmp>
 8009220:	2800      	cmp	r0, #0
 8009222:	dcb6      	bgt.n	8009192 <_dtoa_r+0xa42>
 8009224:	d102      	bne.n	800922c <_dtoa_r+0xadc>
 8009226:	f018 0f01 	tst.w	r8, #1
 800922a:	d1b2      	bne.n	8009192 <_dtoa_r+0xa42>
 800922c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009230:	2b30      	cmp	r3, #48	; 0x30
 8009232:	f105 32ff 	add.w	r2, r5, #4294967295
 8009236:	f47f af0a 	bne.w	800904e <_dtoa_r+0x8fe>
 800923a:	4615      	mov	r5, r2
 800923c:	e7f6      	b.n	800922c <_dtoa_r+0xadc>
 800923e:	4593      	cmp	fp, r2
 8009240:	d105      	bne.n	800924e <_dtoa_r+0xafe>
 8009242:	2331      	movs	r3, #49	; 0x31
 8009244:	f10a 0a01 	add.w	sl, sl, #1
 8009248:	f88b 3000 	strb.w	r3, [fp]
 800924c:	e6ff      	b.n	800904e <_dtoa_r+0x8fe>
 800924e:	4615      	mov	r5, r2
 8009250:	e79f      	b.n	8009192 <_dtoa_r+0xa42>
 8009252:	f8df b064 	ldr.w	fp, [pc, #100]	; 80092b8 <_dtoa_r+0xb68>
 8009256:	e007      	b.n	8009268 <_dtoa_r+0xb18>
 8009258:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800925a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80092bc <_dtoa_r+0xb6c>
 800925e:	b11b      	cbz	r3, 8009268 <_dtoa_r+0xb18>
 8009260:	f10b 0308 	add.w	r3, fp, #8
 8009264:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	4658      	mov	r0, fp
 800926a:	b017      	add	sp, #92	; 0x5c
 800926c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009270:	9b06      	ldr	r3, [sp, #24]
 8009272:	2b01      	cmp	r3, #1
 8009274:	f77f ae35 	ble.w	8008ee2 <_dtoa_r+0x792>
 8009278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800927a:	9307      	str	r3, [sp, #28]
 800927c:	e649      	b.n	8008f12 <_dtoa_r+0x7c2>
 800927e:	9b02      	ldr	r3, [sp, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	dc03      	bgt.n	800928c <_dtoa_r+0xb3c>
 8009284:	9b06      	ldr	r3, [sp, #24]
 8009286:	2b02      	cmp	r3, #2
 8009288:	f73f aecc 	bgt.w	8009024 <_dtoa_r+0x8d4>
 800928c:	465d      	mov	r5, fp
 800928e:	4639      	mov	r1, r7
 8009290:	9804      	ldr	r0, [sp, #16]
 8009292:	f7ff f9d1 	bl	8008638 <quorem>
 8009296:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800929a:	f805 8b01 	strb.w	r8, [r5], #1
 800929e:	9a02      	ldr	r2, [sp, #8]
 80092a0:	eba5 030b 	sub.w	r3, r5, fp
 80092a4:	429a      	cmp	r2, r3
 80092a6:	ddb0      	ble.n	800920a <_dtoa_r+0xaba>
 80092a8:	2300      	movs	r3, #0
 80092aa:	220a      	movs	r2, #10
 80092ac:	9904      	ldr	r1, [sp, #16]
 80092ae:	4620      	mov	r0, r4
 80092b0:	f000 fa3f 	bl	8009732 <__multadd>
 80092b4:	9004      	str	r0, [sp, #16]
 80092b6:	e7ea      	b.n	800928e <_dtoa_r+0xb3e>
 80092b8:	0800a0dc 	.word	0x0800a0dc
 80092bc:	0800a100 	.word	0x0800a100

080092c0 <__sflush_r>:
 80092c0:	898a      	ldrh	r2, [r1, #12]
 80092c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c6:	4605      	mov	r5, r0
 80092c8:	0710      	lsls	r0, r2, #28
 80092ca:	460c      	mov	r4, r1
 80092cc:	d458      	bmi.n	8009380 <__sflush_r+0xc0>
 80092ce:	684b      	ldr	r3, [r1, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	dc05      	bgt.n	80092e0 <__sflush_r+0x20>
 80092d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dc02      	bgt.n	80092e0 <__sflush_r+0x20>
 80092da:	2000      	movs	r0, #0
 80092dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092e2:	2e00      	cmp	r6, #0
 80092e4:	d0f9      	beq.n	80092da <__sflush_r+0x1a>
 80092e6:	2300      	movs	r3, #0
 80092e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092ec:	682f      	ldr	r7, [r5, #0]
 80092ee:	6a21      	ldr	r1, [r4, #32]
 80092f0:	602b      	str	r3, [r5, #0]
 80092f2:	d032      	beq.n	800935a <__sflush_r+0x9a>
 80092f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	075a      	lsls	r2, r3, #29
 80092fa:	d505      	bpl.n	8009308 <__sflush_r+0x48>
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	1ac0      	subs	r0, r0, r3
 8009300:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009302:	b10b      	cbz	r3, 8009308 <__sflush_r+0x48>
 8009304:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009306:	1ac0      	subs	r0, r0, r3
 8009308:	2300      	movs	r3, #0
 800930a:	4602      	mov	r2, r0
 800930c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800930e:	6a21      	ldr	r1, [r4, #32]
 8009310:	4628      	mov	r0, r5
 8009312:	47b0      	blx	r6
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	d106      	bne.n	8009328 <__sflush_r+0x68>
 800931a:	6829      	ldr	r1, [r5, #0]
 800931c:	291d      	cmp	r1, #29
 800931e:	d848      	bhi.n	80093b2 <__sflush_r+0xf2>
 8009320:	4a29      	ldr	r2, [pc, #164]	; (80093c8 <__sflush_r+0x108>)
 8009322:	40ca      	lsrs	r2, r1
 8009324:	07d6      	lsls	r6, r2, #31
 8009326:	d544      	bpl.n	80093b2 <__sflush_r+0xf2>
 8009328:	2200      	movs	r2, #0
 800932a:	6062      	str	r2, [r4, #4]
 800932c:	04d9      	lsls	r1, r3, #19
 800932e:	6922      	ldr	r2, [r4, #16]
 8009330:	6022      	str	r2, [r4, #0]
 8009332:	d504      	bpl.n	800933e <__sflush_r+0x7e>
 8009334:	1c42      	adds	r2, r0, #1
 8009336:	d101      	bne.n	800933c <__sflush_r+0x7c>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	b903      	cbnz	r3, 800933e <__sflush_r+0x7e>
 800933c:	6560      	str	r0, [r4, #84]	; 0x54
 800933e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009340:	602f      	str	r7, [r5, #0]
 8009342:	2900      	cmp	r1, #0
 8009344:	d0c9      	beq.n	80092da <__sflush_r+0x1a>
 8009346:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800934a:	4299      	cmp	r1, r3
 800934c:	d002      	beq.n	8009354 <__sflush_r+0x94>
 800934e:	4628      	mov	r0, r5
 8009350:	f7fe fa74 	bl	800783c <_free_r>
 8009354:	2000      	movs	r0, #0
 8009356:	6360      	str	r0, [r4, #52]	; 0x34
 8009358:	e7c0      	b.n	80092dc <__sflush_r+0x1c>
 800935a:	2301      	movs	r3, #1
 800935c:	4628      	mov	r0, r5
 800935e:	47b0      	blx	r6
 8009360:	1c41      	adds	r1, r0, #1
 8009362:	d1c8      	bne.n	80092f6 <__sflush_r+0x36>
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0c5      	beq.n	80092f6 <__sflush_r+0x36>
 800936a:	2b1d      	cmp	r3, #29
 800936c:	d001      	beq.n	8009372 <__sflush_r+0xb2>
 800936e:	2b16      	cmp	r3, #22
 8009370:	d101      	bne.n	8009376 <__sflush_r+0xb6>
 8009372:	602f      	str	r7, [r5, #0]
 8009374:	e7b1      	b.n	80092da <__sflush_r+0x1a>
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	e7ad      	b.n	80092dc <__sflush_r+0x1c>
 8009380:	690f      	ldr	r7, [r1, #16]
 8009382:	2f00      	cmp	r7, #0
 8009384:	d0a9      	beq.n	80092da <__sflush_r+0x1a>
 8009386:	0793      	lsls	r3, r2, #30
 8009388:	680e      	ldr	r6, [r1, #0]
 800938a:	bf08      	it	eq
 800938c:	694b      	ldreq	r3, [r1, #20]
 800938e:	600f      	str	r7, [r1, #0]
 8009390:	bf18      	it	ne
 8009392:	2300      	movne	r3, #0
 8009394:	eba6 0807 	sub.w	r8, r6, r7
 8009398:	608b      	str	r3, [r1, #8]
 800939a:	f1b8 0f00 	cmp.w	r8, #0
 800939e:	dd9c      	ble.n	80092da <__sflush_r+0x1a>
 80093a0:	4643      	mov	r3, r8
 80093a2:	463a      	mov	r2, r7
 80093a4:	6a21      	ldr	r1, [r4, #32]
 80093a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093a8:	4628      	mov	r0, r5
 80093aa:	47b0      	blx	r6
 80093ac:	2800      	cmp	r0, #0
 80093ae:	dc06      	bgt.n	80093be <__sflush_r+0xfe>
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b6:	81a3      	strh	r3, [r4, #12]
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295
 80093bc:	e78e      	b.n	80092dc <__sflush_r+0x1c>
 80093be:	4407      	add	r7, r0
 80093c0:	eba8 0800 	sub.w	r8, r8, r0
 80093c4:	e7e9      	b.n	800939a <__sflush_r+0xda>
 80093c6:	bf00      	nop
 80093c8:	20400001 	.word	0x20400001

080093cc <_fflush_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	690b      	ldr	r3, [r1, #16]
 80093d0:	4605      	mov	r5, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	b1db      	cbz	r3, 800940e <_fflush_r+0x42>
 80093d6:	b118      	cbz	r0, 80093e0 <_fflush_r+0x14>
 80093d8:	6983      	ldr	r3, [r0, #24]
 80093da:	b90b      	cbnz	r3, 80093e0 <_fflush_r+0x14>
 80093dc:	f000 f860 	bl	80094a0 <__sinit>
 80093e0:	4b0c      	ldr	r3, [pc, #48]	; (8009414 <_fflush_r+0x48>)
 80093e2:	429c      	cmp	r4, r3
 80093e4:	d109      	bne.n	80093fa <_fflush_r+0x2e>
 80093e6:	686c      	ldr	r4, [r5, #4]
 80093e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ec:	b17b      	cbz	r3, 800940e <_fflush_r+0x42>
 80093ee:	4621      	mov	r1, r4
 80093f0:	4628      	mov	r0, r5
 80093f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093f6:	f7ff bf63 	b.w	80092c0 <__sflush_r>
 80093fa:	4b07      	ldr	r3, [pc, #28]	; (8009418 <_fflush_r+0x4c>)
 80093fc:	429c      	cmp	r4, r3
 80093fe:	d101      	bne.n	8009404 <_fflush_r+0x38>
 8009400:	68ac      	ldr	r4, [r5, #8]
 8009402:	e7f1      	b.n	80093e8 <_fflush_r+0x1c>
 8009404:	4b05      	ldr	r3, [pc, #20]	; (800941c <_fflush_r+0x50>)
 8009406:	429c      	cmp	r4, r3
 8009408:	bf08      	it	eq
 800940a:	68ec      	ldreq	r4, [r5, #12]
 800940c:	e7ec      	b.n	80093e8 <_fflush_r+0x1c>
 800940e:	2000      	movs	r0, #0
 8009410:	bd38      	pop	{r3, r4, r5, pc}
 8009412:	bf00      	nop
 8009414:	0800a130 	.word	0x0800a130
 8009418:	0800a150 	.word	0x0800a150
 800941c:	0800a110 	.word	0x0800a110

08009420 <std>:
 8009420:	2300      	movs	r3, #0
 8009422:	b510      	push	{r4, lr}
 8009424:	4604      	mov	r4, r0
 8009426:	e9c0 3300 	strd	r3, r3, [r0]
 800942a:	6083      	str	r3, [r0, #8]
 800942c:	8181      	strh	r1, [r0, #12]
 800942e:	6643      	str	r3, [r0, #100]	; 0x64
 8009430:	81c2      	strh	r2, [r0, #14]
 8009432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009436:	6183      	str	r3, [r0, #24]
 8009438:	4619      	mov	r1, r3
 800943a:	2208      	movs	r2, #8
 800943c:	305c      	adds	r0, #92	; 0x5c
 800943e:	f7fe f9f4 	bl	800782a <memset>
 8009442:	4b05      	ldr	r3, [pc, #20]	; (8009458 <std+0x38>)
 8009444:	6263      	str	r3, [r4, #36]	; 0x24
 8009446:	4b05      	ldr	r3, [pc, #20]	; (800945c <std+0x3c>)
 8009448:	62a3      	str	r3, [r4, #40]	; 0x28
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <std+0x40>)
 800944c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800944e:	4b05      	ldr	r3, [pc, #20]	; (8009464 <std+0x44>)
 8009450:	6224      	str	r4, [r4, #32]
 8009452:	6323      	str	r3, [r4, #48]	; 0x30
 8009454:	bd10      	pop	{r4, pc}
 8009456:	bf00      	nop
 8009458:	08009ef1 	.word	0x08009ef1
 800945c:	08009f13 	.word	0x08009f13
 8009460:	08009f4b 	.word	0x08009f4b
 8009464:	08009f6f 	.word	0x08009f6f

08009468 <_cleanup_r>:
 8009468:	4901      	ldr	r1, [pc, #4]	; (8009470 <_cleanup_r+0x8>)
 800946a:	f000 b885 	b.w	8009578 <_fwalk_reent>
 800946e:	bf00      	nop
 8009470:	080093cd 	.word	0x080093cd

08009474 <__sfmoreglue>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	1e4a      	subs	r2, r1, #1
 8009478:	2568      	movs	r5, #104	; 0x68
 800947a:	4355      	muls	r5, r2
 800947c:	460e      	mov	r6, r1
 800947e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009482:	f7fe fa29 	bl	80078d8 <_malloc_r>
 8009486:	4604      	mov	r4, r0
 8009488:	b140      	cbz	r0, 800949c <__sfmoreglue+0x28>
 800948a:	2100      	movs	r1, #0
 800948c:	e9c0 1600 	strd	r1, r6, [r0]
 8009490:	300c      	adds	r0, #12
 8009492:	60a0      	str	r0, [r4, #8]
 8009494:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009498:	f7fe f9c7 	bl	800782a <memset>
 800949c:	4620      	mov	r0, r4
 800949e:	bd70      	pop	{r4, r5, r6, pc}

080094a0 <__sinit>:
 80094a0:	6983      	ldr	r3, [r0, #24]
 80094a2:	b510      	push	{r4, lr}
 80094a4:	4604      	mov	r4, r0
 80094a6:	bb33      	cbnz	r3, 80094f6 <__sinit+0x56>
 80094a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80094ac:	6503      	str	r3, [r0, #80]	; 0x50
 80094ae:	4b12      	ldr	r3, [pc, #72]	; (80094f8 <__sinit+0x58>)
 80094b0:	4a12      	ldr	r2, [pc, #72]	; (80094fc <__sinit+0x5c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6282      	str	r2, [r0, #40]	; 0x28
 80094b6:	4298      	cmp	r0, r3
 80094b8:	bf04      	itt	eq
 80094ba:	2301      	moveq	r3, #1
 80094bc:	6183      	streq	r3, [r0, #24]
 80094be:	f000 f81f 	bl	8009500 <__sfp>
 80094c2:	6060      	str	r0, [r4, #4]
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 f81b 	bl	8009500 <__sfp>
 80094ca:	60a0      	str	r0, [r4, #8]
 80094cc:	4620      	mov	r0, r4
 80094ce:	f000 f817 	bl	8009500 <__sfp>
 80094d2:	2200      	movs	r2, #0
 80094d4:	60e0      	str	r0, [r4, #12]
 80094d6:	2104      	movs	r1, #4
 80094d8:	6860      	ldr	r0, [r4, #4]
 80094da:	f7ff ffa1 	bl	8009420 <std>
 80094de:	2201      	movs	r2, #1
 80094e0:	2109      	movs	r1, #9
 80094e2:	68a0      	ldr	r0, [r4, #8]
 80094e4:	f7ff ff9c 	bl	8009420 <std>
 80094e8:	2202      	movs	r2, #2
 80094ea:	2112      	movs	r1, #18
 80094ec:	68e0      	ldr	r0, [r4, #12]
 80094ee:	f7ff ff97 	bl	8009420 <std>
 80094f2:	2301      	movs	r3, #1
 80094f4:	61a3      	str	r3, [r4, #24]
 80094f6:	bd10      	pop	{r4, pc}
 80094f8:	0800a0c8 	.word	0x0800a0c8
 80094fc:	08009469 	.word	0x08009469

08009500 <__sfp>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	4b1b      	ldr	r3, [pc, #108]	; (8009570 <__sfp+0x70>)
 8009504:	681e      	ldr	r6, [r3, #0]
 8009506:	69b3      	ldr	r3, [r6, #24]
 8009508:	4607      	mov	r7, r0
 800950a:	b913      	cbnz	r3, 8009512 <__sfp+0x12>
 800950c:	4630      	mov	r0, r6
 800950e:	f7ff ffc7 	bl	80094a0 <__sinit>
 8009512:	3648      	adds	r6, #72	; 0x48
 8009514:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009518:	3b01      	subs	r3, #1
 800951a:	d503      	bpl.n	8009524 <__sfp+0x24>
 800951c:	6833      	ldr	r3, [r6, #0]
 800951e:	b133      	cbz	r3, 800952e <__sfp+0x2e>
 8009520:	6836      	ldr	r6, [r6, #0]
 8009522:	e7f7      	b.n	8009514 <__sfp+0x14>
 8009524:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009528:	b16d      	cbz	r5, 8009546 <__sfp+0x46>
 800952a:	3468      	adds	r4, #104	; 0x68
 800952c:	e7f4      	b.n	8009518 <__sfp+0x18>
 800952e:	2104      	movs	r1, #4
 8009530:	4638      	mov	r0, r7
 8009532:	f7ff ff9f 	bl	8009474 <__sfmoreglue>
 8009536:	6030      	str	r0, [r6, #0]
 8009538:	2800      	cmp	r0, #0
 800953a:	d1f1      	bne.n	8009520 <__sfp+0x20>
 800953c:	230c      	movs	r3, #12
 800953e:	603b      	str	r3, [r7, #0]
 8009540:	4604      	mov	r4, r0
 8009542:	4620      	mov	r0, r4
 8009544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009546:	4b0b      	ldr	r3, [pc, #44]	; (8009574 <__sfp+0x74>)
 8009548:	6665      	str	r5, [r4, #100]	; 0x64
 800954a:	e9c4 5500 	strd	r5, r5, [r4]
 800954e:	60a5      	str	r5, [r4, #8]
 8009550:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009554:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009558:	2208      	movs	r2, #8
 800955a:	4629      	mov	r1, r5
 800955c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009560:	f7fe f963 	bl	800782a <memset>
 8009564:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009568:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800956c:	e7e9      	b.n	8009542 <__sfp+0x42>
 800956e:	bf00      	nop
 8009570:	0800a0c8 	.word	0x0800a0c8
 8009574:	ffff0001 	.word	0xffff0001

08009578 <_fwalk_reent>:
 8009578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800957c:	4680      	mov	r8, r0
 800957e:	4689      	mov	r9, r1
 8009580:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009584:	2600      	movs	r6, #0
 8009586:	b914      	cbnz	r4, 800958e <_fwalk_reent+0x16>
 8009588:	4630      	mov	r0, r6
 800958a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800958e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009592:	3f01      	subs	r7, #1
 8009594:	d501      	bpl.n	800959a <_fwalk_reent+0x22>
 8009596:	6824      	ldr	r4, [r4, #0]
 8009598:	e7f5      	b.n	8009586 <_fwalk_reent+0xe>
 800959a:	89ab      	ldrh	r3, [r5, #12]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d907      	bls.n	80095b0 <_fwalk_reent+0x38>
 80095a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095a4:	3301      	adds	r3, #1
 80095a6:	d003      	beq.n	80095b0 <_fwalk_reent+0x38>
 80095a8:	4629      	mov	r1, r5
 80095aa:	4640      	mov	r0, r8
 80095ac:	47c8      	blx	r9
 80095ae:	4306      	orrs	r6, r0
 80095b0:	3568      	adds	r5, #104	; 0x68
 80095b2:	e7ee      	b.n	8009592 <_fwalk_reent+0x1a>

080095b4 <_localeconv_r>:
 80095b4:	4b04      	ldr	r3, [pc, #16]	; (80095c8 <_localeconv_r+0x14>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6a18      	ldr	r0, [r3, #32]
 80095ba:	4b04      	ldr	r3, [pc, #16]	; (80095cc <_localeconv_r+0x18>)
 80095bc:	2800      	cmp	r0, #0
 80095be:	bf08      	it	eq
 80095c0:	4618      	moveq	r0, r3
 80095c2:	30f0      	adds	r0, #240	; 0xf0
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	2000000c 	.word	0x2000000c
 80095cc:	20000070 	.word	0x20000070

080095d0 <__swhatbuf_r>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	460e      	mov	r6, r1
 80095d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d8:	2900      	cmp	r1, #0
 80095da:	b096      	sub	sp, #88	; 0x58
 80095dc:	4614      	mov	r4, r2
 80095de:	461d      	mov	r5, r3
 80095e0:	da07      	bge.n	80095f2 <__swhatbuf_r+0x22>
 80095e2:	2300      	movs	r3, #0
 80095e4:	602b      	str	r3, [r5, #0]
 80095e6:	89b3      	ldrh	r3, [r6, #12]
 80095e8:	061a      	lsls	r2, r3, #24
 80095ea:	d410      	bmi.n	800960e <__swhatbuf_r+0x3e>
 80095ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095f0:	e00e      	b.n	8009610 <__swhatbuf_r+0x40>
 80095f2:	466a      	mov	r2, sp
 80095f4:	f000 fce2 	bl	8009fbc <_fstat_r>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	dbf2      	blt.n	80095e2 <__swhatbuf_r+0x12>
 80095fc:	9a01      	ldr	r2, [sp, #4]
 80095fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009602:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009606:	425a      	negs	r2, r3
 8009608:	415a      	adcs	r2, r3
 800960a:	602a      	str	r2, [r5, #0]
 800960c:	e7ee      	b.n	80095ec <__swhatbuf_r+0x1c>
 800960e:	2340      	movs	r3, #64	; 0x40
 8009610:	2000      	movs	r0, #0
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	b016      	add	sp, #88	; 0x58
 8009616:	bd70      	pop	{r4, r5, r6, pc}

08009618 <__smakebuf_r>:
 8009618:	898b      	ldrh	r3, [r1, #12]
 800961a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800961c:	079d      	lsls	r5, r3, #30
 800961e:	4606      	mov	r6, r0
 8009620:	460c      	mov	r4, r1
 8009622:	d507      	bpl.n	8009634 <__smakebuf_r+0x1c>
 8009624:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009628:	6023      	str	r3, [r4, #0]
 800962a:	6123      	str	r3, [r4, #16]
 800962c:	2301      	movs	r3, #1
 800962e:	6163      	str	r3, [r4, #20]
 8009630:	b002      	add	sp, #8
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	ab01      	add	r3, sp, #4
 8009636:	466a      	mov	r2, sp
 8009638:	f7ff ffca 	bl	80095d0 <__swhatbuf_r>
 800963c:	9900      	ldr	r1, [sp, #0]
 800963e:	4605      	mov	r5, r0
 8009640:	4630      	mov	r0, r6
 8009642:	f7fe f949 	bl	80078d8 <_malloc_r>
 8009646:	b948      	cbnz	r0, 800965c <__smakebuf_r+0x44>
 8009648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800964c:	059a      	lsls	r2, r3, #22
 800964e:	d4ef      	bmi.n	8009630 <__smakebuf_r+0x18>
 8009650:	f023 0303 	bic.w	r3, r3, #3
 8009654:	f043 0302 	orr.w	r3, r3, #2
 8009658:	81a3      	strh	r3, [r4, #12]
 800965a:	e7e3      	b.n	8009624 <__smakebuf_r+0xc>
 800965c:	4b0d      	ldr	r3, [pc, #52]	; (8009694 <__smakebuf_r+0x7c>)
 800965e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	6020      	str	r0, [r4, #0]
 8009664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	9b00      	ldr	r3, [sp, #0]
 800966c:	6163      	str	r3, [r4, #20]
 800966e:	9b01      	ldr	r3, [sp, #4]
 8009670:	6120      	str	r0, [r4, #16]
 8009672:	b15b      	cbz	r3, 800968c <__smakebuf_r+0x74>
 8009674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009678:	4630      	mov	r0, r6
 800967a:	f000 fcb1 	bl	8009fe0 <_isatty_r>
 800967e:	b128      	cbz	r0, 800968c <__smakebuf_r+0x74>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	f023 0303 	bic.w	r3, r3, #3
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	81a3      	strh	r3, [r4, #12]
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	431d      	orrs	r5, r3
 8009690:	81a5      	strh	r5, [r4, #12]
 8009692:	e7cd      	b.n	8009630 <__smakebuf_r+0x18>
 8009694:	08009469 	.word	0x08009469

08009698 <__malloc_lock>:
 8009698:	4770      	bx	lr

0800969a <__malloc_unlock>:
 800969a:	4770      	bx	lr

0800969c <_Balloc>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096a0:	4604      	mov	r4, r0
 80096a2:	460e      	mov	r6, r1
 80096a4:	b93d      	cbnz	r5, 80096b6 <_Balloc+0x1a>
 80096a6:	2010      	movs	r0, #16
 80096a8:	f7fe f8a4 	bl	80077f4 <malloc>
 80096ac:	6260      	str	r0, [r4, #36]	; 0x24
 80096ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096b2:	6005      	str	r5, [r0, #0]
 80096b4:	60c5      	str	r5, [r0, #12]
 80096b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80096b8:	68eb      	ldr	r3, [r5, #12]
 80096ba:	b183      	cbz	r3, 80096de <_Balloc+0x42>
 80096bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80096c4:	b9b8      	cbnz	r0, 80096f6 <_Balloc+0x5a>
 80096c6:	2101      	movs	r1, #1
 80096c8:	fa01 f506 	lsl.w	r5, r1, r6
 80096cc:	1d6a      	adds	r2, r5, #5
 80096ce:	0092      	lsls	r2, r2, #2
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 fabf 	bl	8009c54 <_calloc_r>
 80096d6:	b160      	cbz	r0, 80096f2 <_Balloc+0x56>
 80096d8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80096dc:	e00e      	b.n	80096fc <_Balloc+0x60>
 80096de:	2221      	movs	r2, #33	; 0x21
 80096e0:	2104      	movs	r1, #4
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 fab6 	bl	8009c54 <_calloc_r>
 80096e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096ea:	60e8      	str	r0, [r5, #12]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e4      	bne.n	80096bc <_Balloc+0x20>
 80096f2:	2000      	movs	r0, #0
 80096f4:	bd70      	pop	{r4, r5, r6, pc}
 80096f6:	6802      	ldr	r2, [r0, #0]
 80096f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80096fc:	2300      	movs	r3, #0
 80096fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009702:	e7f7      	b.n	80096f4 <_Balloc+0x58>

08009704 <_Bfree>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009708:	4606      	mov	r6, r0
 800970a:	460d      	mov	r5, r1
 800970c:	b93c      	cbnz	r4, 800971e <_Bfree+0x1a>
 800970e:	2010      	movs	r0, #16
 8009710:	f7fe f870 	bl	80077f4 <malloc>
 8009714:	6270      	str	r0, [r6, #36]	; 0x24
 8009716:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800971a:	6004      	str	r4, [r0, #0]
 800971c:	60c4      	str	r4, [r0, #12]
 800971e:	b13d      	cbz	r5, 8009730 <_Bfree+0x2c>
 8009720:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009722:	686a      	ldr	r2, [r5, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800972a:	6029      	str	r1, [r5, #0]
 800972c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009730:	bd70      	pop	{r4, r5, r6, pc}

08009732 <__multadd>:
 8009732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009736:	690d      	ldr	r5, [r1, #16]
 8009738:	461f      	mov	r7, r3
 800973a:	4606      	mov	r6, r0
 800973c:	460c      	mov	r4, r1
 800973e:	f101 0c14 	add.w	ip, r1, #20
 8009742:	2300      	movs	r3, #0
 8009744:	f8dc 0000 	ldr.w	r0, [ip]
 8009748:	b281      	uxth	r1, r0
 800974a:	fb02 7101 	mla	r1, r2, r1, r7
 800974e:	0c0f      	lsrs	r7, r1, #16
 8009750:	0c00      	lsrs	r0, r0, #16
 8009752:	fb02 7000 	mla	r0, r2, r0, r7
 8009756:	b289      	uxth	r1, r1
 8009758:	3301      	adds	r3, #1
 800975a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800975e:	429d      	cmp	r5, r3
 8009760:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009764:	f84c 1b04 	str.w	r1, [ip], #4
 8009768:	dcec      	bgt.n	8009744 <__multadd+0x12>
 800976a:	b1d7      	cbz	r7, 80097a2 <__multadd+0x70>
 800976c:	68a3      	ldr	r3, [r4, #8]
 800976e:	42ab      	cmp	r3, r5
 8009770:	dc12      	bgt.n	8009798 <__multadd+0x66>
 8009772:	6861      	ldr	r1, [r4, #4]
 8009774:	4630      	mov	r0, r6
 8009776:	3101      	adds	r1, #1
 8009778:	f7ff ff90 	bl	800969c <_Balloc>
 800977c:	6922      	ldr	r2, [r4, #16]
 800977e:	3202      	adds	r2, #2
 8009780:	f104 010c 	add.w	r1, r4, #12
 8009784:	4680      	mov	r8, r0
 8009786:	0092      	lsls	r2, r2, #2
 8009788:	300c      	adds	r0, #12
 800978a:	f7fe f843 	bl	8007814 <memcpy>
 800978e:	4621      	mov	r1, r4
 8009790:	4630      	mov	r0, r6
 8009792:	f7ff ffb7 	bl	8009704 <_Bfree>
 8009796:	4644      	mov	r4, r8
 8009798:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800979c:	3501      	adds	r5, #1
 800979e:	615f      	str	r7, [r3, #20]
 80097a0:	6125      	str	r5, [r4, #16]
 80097a2:	4620      	mov	r0, r4
 80097a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080097a8 <__hi0bits>:
 80097a8:	0c02      	lsrs	r2, r0, #16
 80097aa:	0412      	lsls	r2, r2, #16
 80097ac:	4603      	mov	r3, r0
 80097ae:	b9b2      	cbnz	r2, 80097de <__hi0bits+0x36>
 80097b0:	0403      	lsls	r3, r0, #16
 80097b2:	2010      	movs	r0, #16
 80097b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80097b8:	bf04      	itt	eq
 80097ba:	021b      	lsleq	r3, r3, #8
 80097bc:	3008      	addeq	r0, #8
 80097be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80097c2:	bf04      	itt	eq
 80097c4:	011b      	lsleq	r3, r3, #4
 80097c6:	3004      	addeq	r0, #4
 80097c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80097cc:	bf04      	itt	eq
 80097ce:	009b      	lsleq	r3, r3, #2
 80097d0:	3002      	addeq	r0, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	db06      	blt.n	80097e4 <__hi0bits+0x3c>
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	d503      	bpl.n	80097e2 <__hi0bits+0x3a>
 80097da:	3001      	adds	r0, #1
 80097dc:	4770      	bx	lr
 80097de:	2000      	movs	r0, #0
 80097e0:	e7e8      	b.n	80097b4 <__hi0bits+0xc>
 80097e2:	2020      	movs	r0, #32
 80097e4:	4770      	bx	lr

080097e6 <__lo0bits>:
 80097e6:	6803      	ldr	r3, [r0, #0]
 80097e8:	f013 0207 	ands.w	r2, r3, #7
 80097ec:	4601      	mov	r1, r0
 80097ee:	d00b      	beq.n	8009808 <__lo0bits+0x22>
 80097f0:	07da      	lsls	r2, r3, #31
 80097f2:	d423      	bmi.n	800983c <__lo0bits+0x56>
 80097f4:	0798      	lsls	r0, r3, #30
 80097f6:	bf49      	itett	mi
 80097f8:	085b      	lsrmi	r3, r3, #1
 80097fa:	089b      	lsrpl	r3, r3, #2
 80097fc:	2001      	movmi	r0, #1
 80097fe:	600b      	strmi	r3, [r1, #0]
 8009800:	bf5c      	itt	pl
 8009802:	600b      	strpl	r3, [r1, #0]
 8009804:	2002      	movpl	r0, #2
 8009806:	4770      	bx	lr
 8009808:	b298      	uxth	r0, r3
 800980a:	b9a8      	cbnz	r0, 8009838 <__lo0bits+0x52>
 800980c:	0c1b      	lsrs	r3, r3, #16
 800980e:	2010      	movs	r0, #16
 8009810:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009814:	bf04      	itt	eq
 8009816:	0a1b      	lsreq	r3, r3, #8
 8009818:	3008      	addeq	r0, #8
 800981a:	071a      	lsls	r2, r3, #28
 800981c:	bf04      	itt	eq
 800981e:	091b      	lsreq	r3, r3, #4
 8009820:	3004      	addeq	r0, #4
 8009822:	079a      	lsls	r2, r3, #30
 8009824:	bf04      	itt	eq
 8009826:	089b      	lsreq	r3, r3, #2
 8009828:	3002      	addeq	r0, #2
 800982a:	07da      	lsls	r2, r3, #31
 800982c:	d402      	bmi.n	8009834 <__lo0bits+0x4e>
 800982e:	085b      	lsrs	r3, r3, #1
 8009830:	d006      	beq.n	8009840 <__lo0bits+0x5a>
 8009832:	3001      	adds	r0, #1
 8009834:	600b      	str	r3, [r1, #0]
 8009836:	4770      	bx	lr
 8009838:	4610      	mov	r0, r2
 800983a:	e7e9      	b.n	8009810 <__lo0bits+0x2a>
 800983c:	2000      	movs	r0, #0
 800983e:	4770      	bx	lr
 8009840:	2020      	movs	r0, #32
 8009842:	4770      	bx	lr

08009844 <__i2b>:
 8009844:	b510      	push	{r4, lr}
 8009846:	460c      	mov	r4, r1
 8009848:	2101      	movs	r1, #1
 800984a:	f7ff ff27 	bl	800969c <_Balloc>
 800984e:	2201      	movs	r2, #1
 8009850:	6144      	str	r4, [r0, #20]
 8009852:	6102      	str	r2, [r0, #16]
 8009854:	bd10      	pop	{r4, pc}

08009856 <__multiply>:
 8009856:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985a:	4614      	mov	r4, r2
 800985c:	690a      	ldr	r2, [r1, #16]
 800985e:	6923      	ldr	r3, [r4, #16]
 8009860:	429a      	cmp	r2, r3
 8009862:	bfb8      	it	lt
 8009864:	460b      	movlt	r3, r1
 8009866:	4688      	mov	r8, r1
 8009868:	bfbc      	itt	lt
 800986a:	46a0      	movlt	r8, r4
 800986c:	461c      	movlt	r4, r3
 800986e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009872:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009876:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800987a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800987e:	eb07 0609 	add.w	r6, r7, r9
 8009882:	42b3      	cmp	r3, r6
 8009884:	bfb8      	it	lt
 8009886:	3101      	addlt	r1, #1
 8009888:	f7ff ff08 	bl	800969c <_Balloc>
 800988c:	f100 0514 	add.w	r5, r0, #20
 8009890:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009894:	462b      	mov	r3, r5
 8009896:	2200      	movs	r2, #0
 8009898:	4573      	cmp	r3, lr
 800989a:	d316      	bcc.n	80098ca <__multiply+0x74>
 800989c:	f104 0214 	add.w	r2, r4, #20
 80098a0:	f108 0114 	add.w	r1, r8, #20
 80098a4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80098a8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	9b00      	ldr	r3, [sp, #0]
 80098b0:	9201      	str	r2, [sp, #4]
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d80c      	bhi.n	80098d0 <__multiply+0x7a>
 80098b6:	2e00      	cmp	r6, #0
 80098b8:	dd03      	ble.n	80098c2 <__multiply+0x6c>
 80098ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d05d      	beq.n	800997e <__multiply+0x128>
 80098c2:	6106      	str	r6, [r0, #16]
 80098c4:	b003      	add	sp, #12
 80098c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ca:	f843 2b04 	str.w	r2, [r3], #4
 80098ce:	e7e3      	b.n	8009898 <__multiply+0x42>
 80098d0:	f8b2 b000 	ldrh.w	fp, [r2]
 80098d4:	f1bb 0f00 	cmp.w	fp, #0
 80098d8:	d023      	beq.n	8009922 <__multiply+0xcc>
 80098da:	4689      	mov	r9, r1
 80098dc:	46ac      	mov	ip, r5
 80098de:	f04f 0800 	mov.w	r8, #0
 80098e2:	f859 4b04 	ldr.w	r4, [r9], #4
 80098e6:	f8dc a000 	ldr.w	sl, [ip]
 80098ea:	b2a3      	uxth	r3, r4
 80098ec:	fa1f fa8a 	uxth.w	sl, sl
 80098f0:	fb0b a303 	mla	r3, fp, r3, sl
 80098f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80098f8:	f8dc 4000 	ldr.w	r4, [ip]
 80098fc:	4443      	add	r3, r8
 80098fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009902:	fb0b 840a 	mla	r4, fp, sl, r8
 8009906:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800990a:	46e2      	mov	sl, ip
 800990c:	b29b      	uxth	r3, r3
 800990e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009912:	454f      	cmp	r7, r9
 8009914:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009918:	f84a 3b04 	str.w	r3, [sl], #4
 800991c:	d82b      	bhi.n	8009976 <__multiply+0x120>
 800991e:	f8cc 8004 	str.w	r8, [ip, #4]
 8009922:	9b01      	ldr	r3, [sp, #4]
 8009924:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009928:	3204      	adds	r2, #4
 800992a:	f1ba 0f00 	cmp.w	sl, #0
 800992e:	d020      	beq.n	8009972 <__multiply+0x11c>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	4689      	mov	r9, r1
 8009934:	46a8      	mov	r8, r5
 8009936:	f04f 0b00 	mov.w	fp, #0
 800993a:	f8b9 c000 	ldrh.w	ip, [r9]
 800993e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009942:	fb0a 440c 	mla	r4, sl, ip, r4
 8009946:	445c      	add	r4, fp
 8009948:	46c4      	mov	ip, r8
 800994a:	b29b      	uxth	r3, r3
 800994c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009950:	f84c 3b04 	str.w	r3, [ip], #4
 8009954:	f859 3b04 	ldr.w	r3, [r9], #4
 8009958:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800995c:	0c1b      	lsrs	r3, r3, #16
 800995e:	fb0a b303 	mla	r3, sl, r3, fp
 8009962:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009966:	454f      	cmp	r7, r9
 8009968:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800996c:	d805      	bhi.n	800997a <__multiply+0x124>
 800996e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009972:	3504      	adds	r5, #4
 8009974:	e79b      	b.n	80098ae <__multiply+0x58>
 8009976:	46d4      	mov	ip, sl
 8009978:	e7b3      	b.n	80098e2 <__multiply+0x8c>
 800997a:	46e0      	mov	r8, ip
 800997c:	e7dd      	b.n	800993a <__multiply+0xe4>
 800997e:	3e01      	subs	r6, #1
 8009980:	e799      	b.n	80098b6 <__multiply+0x60>
	...

08009984 <__pow5mult>:
 8009984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009988:	4615      	mov	r5, r2
 800998a:	f012 0203 	ands.w	r2, r2, #3
 800998e:	4606      	mov	r6, r0
 8009990:	460f      	mov	r7, r1
 8009992:	d007      	beq.n	80099a4 <__pow5mult+0x20>
 8009994:	3a01      	subs	r2, #1
 8009996:	4c21      	ldr	r4, [pc, #132]	; (8009a1c <__pow5mult+0x98>)
 8009998:	2300      	movs	r3, #0
 800999a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800999e:	f7ff fec8 	bl	8009732 <__multadd>
 80099a2:	4607      	mov	r7, r0
 80099a4:	10ad      	asrs	r5, r5, #2
 80099a6:	d035      	beq.n	8009a14 <__pow5mult+0x90>
 80099a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099aa:	b93c      	cbnz	r4, 80099bc <__pow5mult+0x38>
 80099ac:	2010      	movs	r0, #16
 80099ae:	f7fd ff21 	bl	80077f4 <malloc>
 80099b2:	6270      	str	r0, [r6, #36]	; 0x24
 80099b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099b8:	6004      	str	r4, [r0, #0]
 80099ba:	60c4      	str	r4, [r0, #12]
 80099bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099c4:	b94c      	cbnz	r4, 80099da <__pow5mult+0x56>
 80099c6:	f240 2171 	movw	r1, #625	; 0x271
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff ff3a 	bl	8009844 <__i2b>
 80099d0:	2300      	movs	r3, #0
 80099d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80099d6:	4604      	mov	r4, r0
 80099d8:	6003      	str	r3, [r0, #0]
 80099da:	f04f 0800 	mov.w	r8, #0
 80099de:	07eb      	lsls	r3, r5, #31
 80099e0:	d50a      	bpl.n	80099f8 <__pow5mult+0x74>
 80099e2:	4639      	mov	r1, r7
 80099e4:	4622      	mov	r2, r4
 80099e6:	4630      	mov	r0, r6
 80099e8:	f7ff ff35 	bl	8009856 <__multiply>
 80099ec:	4639      	mov	r1, r7
 80099ee:	4681      	mov	r9, r0
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7ff fe87 	bl	8009704 <_Bfree>
 80099f6:	464f      	mov	r7, r9
 80099f8:	106d      	asrs	r5, r5, #1
 80099fa:	d00b      	beq.n	8009a14 <__pow5mult+0x90>
 80099fc:	6820      	ldr	r0, [r4, #0]
 80099fe:	b938      	cbnz	r0, 8009a10 <__pow5mult+0x8c>
 8009a00:	4622      	mov	r2, r4
 8009a02:	4621      	mov	r1, r4
 8009a04:	4630      	mov	r0, r6
 8009a06:	f7ff ff26 	bl	8009856 <__multiply>
 8009a0a:	6020      	str	r0, [r4, #0]
 8009a0c:	f8c0 8000 	str.w	r8, [r0]
 8009a10:	4604      	mov	r4, r0
 8009a12:	e7e4      	b.n	80099de <__pow5mult+0x5a>
 8009a14:	4638      	mov	r0, r7
 8009a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a1a:	bf00      	nop
 8009a1c:	0800a260 	.word	0x0800a260

08009a20 <__lshift>:
 8009a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a24:	460c      	mov	r4, r1
 8009a26:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a2a:	6923      	ldr	r3, [r4, #16]
 8009a2c:	6849      	ldr	r1, [r1, #4]
 8009a2e:	eb0a 0903 	add.w	r9, sl, r3
 8009a32:	68a3      	ldr	r3, [r4, #8]
 8009a34:	4607      	mov	r7, r0
 8009a36:	4616      	mov	r6, r2
 8009a38:	f109 0501 	add.w	r5, r9, #1
 8009a3c:	42ab      	cmp	r3, r5
 8009a3e:	db32      	blt.n	8009aa6 <__lshift+0x86>
 8009a40:	4638      	mov	r0, r7
 8009a42:	f7ff fe2b 	bl	800969c <_Balloc>
 8009a46:	2300      	movs	r3, #0
 8009a48:	4680      	mov	r8, r0
 8009a4a:	f100 0114 	add.w	r1, r0, #20
 8009a4e:	461a      	mov	r2, r3
 8009a50:	4553      	cmp	r3, sl
 8009a52:	db2b      	blt.n	8009aac <__lshift+0x8c>
 8009a54:	6920      	ldr	r0, [r4, #16]
 8009a56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a5a:	f104 0314 	add.w	r3, r4, #20
 8009a5e:	f016 021f 	ands.w	r2, r6, #31
 8009a62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a6a:	d025      	beq.n	8009ab8 <__lshift+0x98>
 8009a6c:	f1c2 0e20 	rsb	lr, r2, #32
 8009a70:	2000      	movs	r0, #0
 8009a72:	681e      	ldr	r6, [r3, #0]
 8009a74:	468a      	mov	sl, r1
 8009a76:	4096      	lsls	r6, r2
 8009a78:	4330      	orrs	r0, r6
 8009a7a:	f84a 0b04 	str.w	r0, [sl], #4
 8009a7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009a82:	459c      	cmp	ip, r3
 8009a84:	fa20 f00e 	lsr.w	r0, r0, lr
 8009a88:	d814      	bhi.n	8009ab4 <__lshift+0x94>
 8009a8a:	6048      	str	r0, [r1, #4]
 8009a8c:	b108      	cbz	r0, 8009a92 <__lshift+0x72>
 8009a8e:	f109 0502 	add.w	r5, r9, #2
 8009a92:	3d01      	subs	r5, #1
 8009a94:	4638      	mov	r0, r7
 8009a96:	f8c8 5010 	str.w	r5, [r8, #16]
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	f7ff fe32 	bl	8009704 <_Bfree>
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa6:	3101      	adds	r1, #1
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	e7c7      	b.n	8009a3c <__lshift+0x1c>
 8009aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	e7cd      	b.n	8009a50 <__lshift+0x30>
 8009ab4:	4651      	mov	r1, sl
 8009ab6:	e7dc      	b.n	8009a72 <__lshift+0x52>
 8009ab8:	3904      	subs	r1, #4
 8009aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009abe:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ac2:	459c      	cmp	ip, r3
 8009ac4:	d8f9      	bhi.n	8009aba <__lshift+0x9a>
 8009ac6:	e7e4      	b.n	8009a92 <__lshift+0x72>

08009ac8 <__mcmp>:
 8009ac8:	6903      	ldr	r3, [r0, #16]
 8009aca:	690a      	ldr	r2, [r1, #16]
 8009acc:	1a9b      	subs	r3, r3, r2
 8009ace:	b530      	push	{r4, r5, lr}
 8009ad0:	d10c      	bne.n	8009aec <__mcmp+0x24>
 8009ad2:	0092      	lsls	r2, r2, #2
 8009ad4:	3014      	adds	r0, #20
 8009ad6:	3114      	adds	r1, #20
 8009ad8:	1884      	adds	r4, r0, r2
 8009ada:	4411      	add	r1, r2
 8009adc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ae0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ae4:	4295      	cmp	r5, r2
 8009ae6:	d003      	beq.n	8009af0 <__mcmp+0x28>
 8009ae8:	d305      	bcc.n	8009af6 <__mcmp+0x2e>
 8009aea:	2301      	movs	r3, #1
 8009aec:	4618      	mov	r0, r3
 8009aee:	bd30      	pop	{r4, r5, pc}
 8009af0:	42a0      	cmp	r0, r4
 8009af2:	d3f3      	bcc.n	8009adc <__mcmp+0x14>
 8009af4:	e7fa      	b.n	8009aec <__mcmp+0x24>
 8009af6:	f04f 33ff 	mov.w	r3, #4294967295
 8009afa:	e7f7      	b.n	8009aec <__mcmp+0x24>

08009afc <__mdiff>:
 8009afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b00:	460d      	mov	r5, r1
 8009b02:	4607      	mov	r7, r0
 8009b04:	4611      	mov	r1, r2
 8009b06:	4628      	mov	r0, r5
 8009b08:	4614      	mov	r4, r2
 8009b0a:	f7ff ffdd 	bl	8009ac8 <__mcmp>
 8009b0e:	1e06      	subs	r6, r0, #0
 8009b10:	d108      	bne.n	8009b24 <__mdiff+0x28>
 8009b12:	4631      	mov	r1, r6
 8009b14:	4638      	mov	r0, r7
 8009b16:	f7ff fdc1 	bl	800969c <_Balloc>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b24:	bfa4      	itt	ge
 8009b26:	4623      	movge	r3, r4
 8009b28:	462c      	movge	r4, r5
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	6861      	ldr	r1, [r4, #4]
 8009b2e:	bfa6      	itte	ge
 8009b30:	461d      	movge	r5, r3
 8009b32:	2600      	movge	r6, #0
 8009b34:	2601      	movlt	r6, #1
 8009b36:	f7ff fdb1 	bl	800969c <_Balloc>
 8009b3a:	692b      	ldr	r3, [r5, #16]
 8009b3c:	60c6      	str	r6, [r0, #12]
 8009b3e:	6926      	ldr	r6, [r4, #16]
 8009b40:	f105 0914 	add.w	r9, r5, #20
 8009b44:	f104 0214 	add.w	r2, r4, #20
 8009b48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009b4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009b50:	f100 0514 	add.w	r5, r0, #20
 8009b54:	f04f 0e00 	mov.w	lr, #0
 8009b58:	f852 ab04 	ldr.w	sl, [r2], #4
 8009b5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b60:	fa1e f18a 	uxtah	r1, lr, sl
 8009b64:	b2a3      	uxth	r3, r4
 8009b66:	1ac9      	subs	r1, r1, r3
 8009b68:	0c23      	lsrs	r3, r4, #16
 8009b6a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009b6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b72:	b289      	uxth	r1, r1
 8009b74:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009b78:	45c8      	cmp	r8, r9
 8009b7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009b7e:	4694      	mov	ip, r2
 8009b80:	f845 3b04 	str.w	r3, [r5], #4
 8009b84:	d8e8      	bhi.n	8009b58 <__mdiff+0x5c>
 8009b86:	45bc      	cmp	ip, r7
 8009b88:	d304      	bcc.n	8009b94 <__mdiff+0x98>
 8009b8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009b8e:	b183      	cbz	r3, 8009bb2 <__mdiff+0xb6>
 8009b90:	6106      	str	r6, [r0, #16]
 8009b92:	e7c5      	b.n	8009b20 <__mdiff+0x24>
 8009b94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009b98:	fa1e f381 	uxtah	r3, lr, r1
 8009b9c:	141a      	asrs	r2, r3, #16
 8009b9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ba8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009bac:	f845 3b04 	str.w	r3, [r5], #4
 8009bb0:	e7e9      	b.n	8009b86 <__mdiff+0x8a>
 8009bb2:	3e01      	subs	r6, #1
 8009bb4:	e7e9      	b.n	8009b8a <__mdiff+0x8e>

08009bb6 <__d2b>:
 8009bb6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bba:	460e      	mov	r6, r1
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	ec59 8b10 	vmov	r8, r9, d0
 8009bc2:	4615      	mov	r5, r2
 8009bc4:	f7ff fd6a 	bl	800969c <_Balloc>
 8009bc8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009bcc:	4607      	mov	r7, r0
 8009bce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bd2:	bb34      	cbnz	r4, 8009c22 <__d2b+0x6c>
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	f1b8 0300 	subs.w	r3, r8, #0
 8009bda:	d027      	beq.n	8009c2c <__d2b+0x76>
 8009bdc:	a802      	add	r0, sp, #8
 8009bde:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009be2:	f7ff fe00 	bl	80097e6 <__lo0bits>
 8009be6:	9900      	ldr	r1, [sp, #0]
 8009be8:	b1f0      	cbz	r0, 8009c28 <__d2b+0x72>
 8009bea:	9a01      	ldr	r2, [sp, #4]
 8009bec:	f1c0 0320 	rsb	r3, r0, #32
 8009bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	40c2      	lsrs	r2, r0
 8009bf8:	617b      	str	r3, [r7, #20]
 8009bfa:	9201      	str	r2, [sp, #4]
 8009bfc:	9b01      	ldr	r3, [sp, #4]
 8009bfe:	61bb      	str	r3, [r7, #24]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bf14      	ite	ne
 8009c04:	2102      	movne	r1, #2
 8009c06:	2101      	moveq	r1, #1
 8009c08:	6139      	str	r1, [r7, #16]
 8009c0a:	b1c4      	cbz	r4, 8009c3e <__d2b+0x88>
 8009c0c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009c10:	4404      	add	r4, r0
 8009c12:	6034      	str	r4, [r6, #0]
 8009c14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c18:	6028      	str	r0, [r5, #0]
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	b003      	add	sp, #12
 8009c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c26:	e7d5      	b.n	8009bd4 <__d2b+0x1e>
 8009c28:	6179      	str	r1, [r7, #20]
 8009c2a:	e7e7      	b.n	8009bfc <__d2b+0x46>
 8009c2c:	a801      	add	r0, sp, #4
 8009c2e:	f7ff fdda 	bl	80097e6 <__lo0bits>
 8009c32:	9b01      	ldr	r3, [sp, #4]
 8009c34:	617b      	str	r3, [r7, #20]
 8009c36:	2101      	movs	r1, #1
 8009c38:	6139      	str	r1, [r7, #16]
 8009c3a:	3020      	adds	r0, #32
 8009c3c:	e7e5      	b.n	8009c0a <__d2b+0x54>
 8009c3e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009c42:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c46:	6030      	str	r0, [r6, #0]
 8009c48:	6918      	ldr	r0, [r3, #16]
 8009c4a:	f7ff fdad 	bl	80097a8 <__hi0bits>
 8009c4e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009c52:	e7e1      	b.n	8009c18 <__d2b+0x62>

08009c54 <_calloc_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	fb02 f401 	mul.w	r4, r2, r1
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	f7fd fe3c 	bl	80078d8 <_malloc_r>
 8009c60:	4605      	mov	r5, r0
 8009c62:	b118      	cbz	r0, 8009c6c <_calloc_r+0x18>
 8009c64:	4622      	mov	r2, r4
 8009c66:	2100      	movs	r1, #0
 8009c68:	f7fd fddf 	bl	800782a <memset>
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}

08009c70 <__sfputc_r>:
 8009c70:	6893      	ldr	r3, [r2, #8]
 8009c72:	3b01      	subs	r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	b410      	push	{r4}
 8009c78:	6093      	str	r3, [r2, #8]
 8009c7a:	da08      	bge.n	8009c8e <__sfputc_r+0x1e>
 8009c7c:	6994      	ldr	r4, [r2, #24]
 8009c7e:	42a3      	cmp	r3, r4
 8009c80:	db01      	blt.n	8009c86 <__sfputc_r+0x16>
 8009c82:	290a      	cmp	r1, #10
 8009c84:	d103      	bne.n	8009c8e <__sfputc_r+0x1e>
 8009c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c8a:	f7fe bc15 	b.w	80084b8 <__swbuf_r>
 8009c8e:	6813      	ldr	r3, [r2, #0]
 8009c90:	1c58      	adds	r0, r3, #1
 8009c92:	6010      	str	r0, [r2, #0]
 8009c94:	7019      	strb	r1, [r3, #0]
 8009c96:	4608      	mov	r0, r1
 8009c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <__sfputs_r>:
 8009c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	460f      	mov	r7, r1
 8009ca4:	4614      	mov	r4, r2
 8009ca6:	18d5      	adds	r5, r2, r3
 8009ca8:	42ac      	cmp	r4, r5
 8009caa:	d101      	bne.n	8009cb0 <__sfputs_r+0x12>
 8009cac:	2000      	movs	r0, #0
 8009cae:	e007      	b.n	8009cc0 <__sfputs_r+0x22>
 8009cb0:	463a      	mov	r2, r7
 8009cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f7ff ffda 	bl	8009c70 <__sfputc_r>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d1f3      	bne.n	8009ca8 <__sfputs_r+0xa>
 8009cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cc4 <_vfiprintf_r>:
 8009cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	460c      	mov	r4, r1
 8009cca:	b09d      	sub	sp, #116	; 0x74
 8009ccc:	4617      	mov	r7, r2
 8009cce:	461d      	mov	r5, r3
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	b118      	cbz	r0, 8009cdc <_vfiprintf_r+0x18>
 8009cd4:	6983      	ldr	r3, [r0, #24]
 8009cd6:	b90b      	cbnz	r3, 8009cdc <_vfiprintf_r+0x18>
 8009cd8:	f7ff fbe2 	bl	80094a0 <__sinit>
 8009cdc:	4b7c      	ldr	r3, [pc, #496]	; (8009ed0 <_vfiprintf_r+0x20c>)
 8009cde:	429c      	cmp	r4, r3
 8009ce0:	d158      	bne.n	8009d94 <_vfiprintf_r+0xd0>
 8009ce2:	6874      	ldr	r4, [r6, #4]
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	0718      	lsls	r0, r3, #28
 8009ce8:	d55e      	bpl.n	8009da8 <_vfiprintf_r+0xe4>
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d05b      	beq.n	8009da8 <_vfiprintf_r+0xe4>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf4:	2320      	movs	r3, #32
 8009cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cfa:	2330      	movs	r3, #48	; 0x30
 8009cfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d00:	9503      	str	r5, [sp, #12]
 8009d02:	f04f 0b01 	mov.w	fp, #1
 8009d06:	46b8      	mov	r8, r7
 8009d08:	4645      	mov	r5, r8
 8009d0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d0e:	b10b      	cbz	r3, 8009d14 <_vfiprintf_r+0x50>
 8009d10:	2b25      	cmp	r3, #37	; 0x25
 8009d12:	d154      	bne.n	8009dbe <_vfiprintf_r+0xfa>
 8009d14:	ebb8 0a07 	subs.w	sl, r8, r7
 8009d18:	d00b      	beq.n	8009d32 <_vfiprintf_r+0x6e>
 8009d1a:	4653      	mov	r3, sl
 8009d1c:	463a      	mov	r2, r7
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7ff ffbc 	bl	8009c9e <__sfputs_r>
 8009d26:	3001      	adds	r0, #1
 8009d28:	f000 80c2 	beq.w	8009eb0 <_vfiprintf_r+0x1ec>
 8009d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2e:	4453      	add	r3, sl
 8009d30:	9309      	str	r3, [sp, #36]	; 0x24
 8009d32:	f898 3000 	ldrb.w	r3, [r8]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f000 80ba 	beq.w	8009eb0 <_vfiprintf_r+0x1ec>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d46:	9304      	str	r3, [sp, #16]
 8009d48:	9307      	str	r3, [sp, #28]
 8009d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d50:	46a8      	mov	r8, r5
 8009d52:	2205      	movs	r2, #5
 8009d54:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009d58:	485e      	ldr	r0, [pc, #376]	; (8009ed4 <_vfiprintf_r+0x210>)
 8009d5a:	f7f6 fa51 	bl	8000200 <memchr>
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	bb78      	cbnz	r0, 8009dc2 <_vfiprintf_r+0xfe>
 8009d62:	06d9      	lsls	r1, r3, #27
 8009d64:	bf44      	itt	mi
 8009d66:	2220      	movmi	r2, #32
 8009d68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d6c:	071a      	lsls	r2, r3, #28
 8009d6e:	bf44      	itt	mi
 8009d70:	222b      	movmi	r2, #43	; 0x2b
 8009d72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d76:	782a      	ldrb	r2, [r5, #0]
 8009d78:	2a2a      	cmp	r2, #42	; 0x2a
 8009d7a:	d02a      	beq.n	8009dd2 <_vfiprintf_r+0x10e>
 8009d7c:	9a07      	ldr	r2, [sp, #28]
 8009d7e:	46a8      	mov	r8, r5
 8009d80:	2000      	movs	r0, #0
 8009d82:	250a      	movs	r5, #10
 8009d84:	4641      	mov	r1, r8
 8009d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d8a:	3b30      	subs	r3, #48	; 0x30
 8009d8c:	2b09      	cmp	r3, #9
 8009d8e:	d969      	bls.n	8009e64 <_vfiprintf_r+0x1a0>
 8009d90:	b360      	cbz	r0, 8009dec <_vfiprintf_r+0x128>
 8009d92:	e024      	b.n	8009dde <_vfiprintf_r+0x11a>
 8009d94:	4b50      	ldr	r3, [pc, #320]	; (8009ed8 <_vfiprintf_r+0x214>)
 8009d96:	429c      	cmp	r4, r3
 8009d98:	d101      	bne.n	8009d9e <_vfiprintf_r+0xda>
 8009d9a:	68b4      	ldr	r4, [r6, #8]
 8009d9c:	e7a2      	b.n	8009ce4 <_vfiprintf_r+0x20>
 8009d9e:	4b4f      	ldr	r3, [pc, #316]	; (8009edc <_vfiprintf_r+0x218>)
 8009da0:	429c      	cmp	r4, r3
 8009da2:	bf08      	it	eq
 8009da4:	68f4      	ldreq	r4, [r6, #12]
 8009da6:	e79d      	b.n	8009ce4 <_vfiprintf_r+0x20>
 8009da8:	4621      	mov	r1, r4
 8009daa:	4630      	mov	r0, r6
 8009dac:	f7fe fbd6 	bl	800855c <__swsetup_r>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d09d      	beq.n	8009cf0 <_vfiprintf_r+0x2c>
 8009db4:	f04f 30ff 	mov.w	r0, #4294967295
 8009db8:	b01d      	add	sp, #116	; 0x74
 8009dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dbe:	46a8      	mov	r8, r5
 8009dc0:	e7a2      	b.n	8009d08 <_vfiprintf_r+0x44>
 8009dc2:	4a44      	ldr	r2, [pc, #272]	; (8009ed4 <_vfiprintf_r+0x210>)
 8009dc4:	1a80      	subs	r0, r0, r2
 8009dc6:	fa0b f000 	lsl.w	r0, fp, r0
 8009dca:	4318      	orrs	r0, r3
 8009dcc:	9004      	str	r0, [sp, #16]
 8009dce:	4645      	mov	r5, r8
 8009dd0:	e7be      	b.n	8009d50 <_vfiprintf_r+0x8c>
 8009dd2:	9a03      	ldr	r2, [sp, #12]
 8009dd4:	1d11      	adds	r1, r2, #4
 8009dd6:	6812      	ldr	r2, [r2, #0]
 8009dd8:	9103      	str	r1, [sp, #12]
 8009dda:	2a00      	cmp	r2, #0
 8009ddc:	db01      	blt.n	8009de2 <_vfiprintf_r+0x11e>
 8009dde:	9207      	str	r2, [sp, #28]
 8009de0:	e004      	b.n	8009dec <_vfiprintf_r+0x128>
 8009de2:	4252      	negs	r2, r2
 8009de4:	f043 0302 	orr.w	r3, r3, #2
 8009de8:	9207      	str	r2, [sp, #28]
 8009dea:	9304      	str	r3, [sp, #16]
 8009dec:	f898 3000 	ldrb.w	r3, [r8]
 8009df0:	2b2e      	cmp	r3, #46	; 0x2e
 8009df2:	d10e      	bne.n	8009e12 <_vfiprintf_r+0x14e>
 8009df4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009df8:	2b2a      	cmp	r3, #42	; 0x2a
 8009dfa:	d138      	bne.n	8009e6e <_vfiprintf_r+0x1aa>
 8009dfc:	9b03      	ldr	r3, [sp, #12]
 8009dfe:	1d1a      	adds	r2, r3, #4
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	9203      	str	r2, [sp, #12]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	bfb8      	it	lt
 8009e08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e0c:	f108 0802 	add.w	r8, r8, #2
 8009e10:	9305      	str	r3, [sp, #20]
 8009e12:	4d33      	ldr	r5, [pc, #204]	; (8009ee0 <_vfiprintf_r+0x21c>)
 8009e14:	f898 1000 	ldrb.w	r1, [r8]
 8009e18:	2203      	movs	r2, #3
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f7f6 f9f0 	bl	8000200 <memchr>
 8009e20:	b140      	cbz	r0, 8009e34 <_vfiprintf_r+0x170>
 8009e22:	2340      	movs	r3, #64	; 0x40
 8009e24:	1b40      	subs	r0, r0, r5
 8009e26:	fa03 f000 	lsl.w	r0, r3, r0
 8009e2a:	9b04      	ldr	r3, [sp, #16]
 8009e2c:	4303      	orrs	r3, r0
 8009e2e:	f108 0801 	add.w	r8, r8, #1
 8009e32:	9304      	str	r3, [sp, #16]
 8009e34:	f898 1000 	ldrb.w	r1, [r8]
 8009e38:	482a      	ldr	r0, [pc, #168]	; (8009ee4 <_vfiprintf_r+0x220>)
 8009e3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e3e:	2206      	movs	r2, #6
 8009e40:	f108 0701 	add.w	r7, r8, #1
 8009e44:	f7f6 f9dc 	bl	8000200 <memchr>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d037      	beq.n	8009ebc <_vfiprintf_r+0x1f8>
 8009e4c:	4b26      	ldr	r3, [pc, #152]	; (8009ee8 <_vfiprintf_r+0x224>)
 8009e4e:	bb1b      	cbnz	r3, 8009e98 <_vfiprintf_r+0x1d4>
 8009e50:	9b03      	ldr	r3, [sp, #12]
 8009e52:	3307      	adds	r3, #7
 8009e54:	f023 0307 	bic.w	r3, r3, #7
 8009e58:	3308      	adds	r3, #8
 8009e5a:	9303      	str	r3, [sp, #12]
 8009e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5e:	444b      	add	r3, r9
 8009e60:	9309      	str	r3, [sp, #36]	; 0x24
 8009e62:	e750      	b.n	8009d06 <_vfiprintf_r+0x42>
 8009e64:	fb05 3202 	mla	r2, r5, r2, r3
 8009e68:	2001      	movs	r0, #1
 8009e6a:	4688      	mov	r8, r1
 8009e6c:	e78a      	b.n	8009d84 <_vfiprintf_r+0xc0>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f108 0801 	add.w	r8, r8, #1
 8009e74:	9305      	str	r3, [sp, #20]
 8009e76:	4619      	mov	r1, r3
 8009e78:	250a      	movs	r5, #10
 8009e7a:	4640      	mov	r0, r8
 8009e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e80:	3a30      	subs	r2, #48	; 0x30
 8009e82:	2a09      	cmp	r2, #9
 8009e84:	d903      	bls.n	8009e8e <_vfiprintf_r+0x1ca>
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d0c3      	beq.n	8009e12 <_vfiprintf_r+0x14e>
 8009e8a:	9105      	str	r1, [sp, #20]
 8009e8c:	e7c1      	b.n	8009e12 <_vfiprintf_r+0x14e>
 8009e8e:	fb05 2101 	mla	r1, r5, r1, r2
 8009e92:	2301      	movs	r3, #1
 8009e94:	4680      	mov	r8, r0
 8009e96:	e7f0      	b.n	8009e7a <_vfiprintf_r+0x1b6>
 8009e98:	ab03      	add	r3, sp, #12
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	4b13      	ldr	r3, [pc, #76]	; (8009eec <_vfiprintf_r+0x228>)
 8009ea0:	a904      	add	r1, sp, #16
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7fd fe06 	bl	8007ab4 <_printf_float>
 8009ea8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009eac:	4681      	mov	r9, r0
 8009eae:	d1d5      	bne.n	8009e5c <_vfiprintf_r+0x198>
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	065b      	lsls	r3, r3, #25
 8009eb4:	f53f af7e 	bmi.w	8009db4 <_vfiprintf_r+0xf0>
 8009eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eba:	e77d      	b.n	8009db8 <_vfiprintf_r+0xf4>
 8009ebc:	ab03      	add	r3, sp, #12
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	4b0a      	ldr	r3, [pc, #40]	; (8009eec <_vfiprintf_r+0x228>)
 8009ec4:	a904      	add	r1, sp, #16
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	f7fe f8aa 	bl	8008020 <_printf_i>
 8009ecc:	e7ec      	b.n	8009ea8 <_vfiprintf_r+0x1e4>
 8009ece:	bf00      	nop
 8009ed0:	0800a130 	.word	0x0800a130
 8009ed4:	0800a26c 	.word	0x0800a26c
 8009ed8:	0800a150 	.word	0x0800a150
 8009edc:	0800a110 	.word	0x0800a110
 8009ee0:	0800a272 	.word	0x0800a272
 8009ee4:	0800a276 	.word	0x0800a276
 8009ee8:	08007ab5 	.word	0x08007ab5
 8009eec:	08009c9f 	.word	0x08009c9f

08009ef0 <__sread>:
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef8:	f000 f8a6 	bl	800a048 <_read_r>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	bfab      	itete	ge
 8009f00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f02:	89a3      	ldrhlt	r3, [r4, #12]
 8009f04:	181b      	addge	r3, r3, r0
 8009f06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f0a:	bfac      	ite	ge
 8009f0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f0e:	81a3      	strhlt	r3, [r4, #12]
 8009f10:	bd10      	pop	{r4, pc}

08009f12 <__swrite>:
 8009f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f16:	461f      	mov	r7, r3
 8009f18:	898b      	ldrh	r3, [r1, #12]
 8009f1a:	05db      	lsls	r3, r3, #23
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	460c      	mov	r4, r1
 8009f20:	4616      	mov	r6, r2
 8009f22:	d505      	bpl.n	8009f30 <__swrite+0x1e>
 8009f24:	2302      	movs	r3, #2
 8009f26:	2200      	movs	r2, #0
 8009f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2c:	f000 f868 	bl	800a000 <_lseek_r>
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f3a:	81a3      	strh	r3, [r4, #12]
 8009f3c:	4632      	mov	r2, r6
 8009f3e:	463b      	mov	r3, r7
 8009f40:	4628      	mov	r0, r5
 8009f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f46:	f000 b817 	b.w	8009f78 <_write_r>

08009f4a <__sseek>:
 8009f4a:	b510      	push	{r4, lr}
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f52:	f000 f855 	bl	800a000 <_lseek_r>
 8009f56:	1c43      	adds	r3, r0, #1
 8009f58:	89a3      	ldrh	r3, [r4, #12]
 8009f5a:	bf15      	itete	ne
 8009f5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f66:	81a3      	strheq	r3, [r4, #12]
 8009f68:	bf18      	it	ne
 8009f6a:	81a3      	strhne	r3, [r4, #12]
 8009f6c:	bd10      	pop	{r4, pc}

08009f6e <__sclose>:
 8009f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f72:	f000 b813 	b.w	8009f9c <_close_r>
	...

08009f78 <_write_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4c07      	ldr	r4, [pc, #28]	; (8009f98 <_write_r+0x20>)
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	4608      	mov	r0, r1
 8009f80:	4611      	mov	r1, r2
 8009f82:	2200      	movs	r2, #0
 8009f84:	6022      	str	r2, [r4, #0]
 8009f86:	461a      	mov	r2, r3
 8009f88:	f7f7 fed0 	bl	8001d2c <_write>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_write_r+0x1e>
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_write_r+0x1e>
 8009f94:	602b      	str	r3, [r5, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	200007b8 	.word	0x200007b8

08009f9c <_close_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4c06      	ldr	r4, [pc, #24]	; (8009fb8 <_close_r+0x1c>)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	f7f8 f805 	bl	8001fb6 <_close>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d102      	bne.n	8009fb6 <_close_r+0x1a>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	b103      	cbz	r3, 8009fb6 <_close_r+0x1a>
 8009fb4:	602b      	str	r3, [r5, #0]
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	200007b8 	.word	0x200007b8

08009fbc <_fstat_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4c07      	ldr	r4, [pc, #28]	; (8009fdc <_fstat_r+0x20>)
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	4608      	mov	r0, r1
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	f7f8 f800 	bl	8001fce <_fstat>
 8009fce:	1c43      	adds	r3, r0, #1
 8009fd0:	d102      	bne.n	8009fd8 <_fstat_r+0x1c>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	b103      	cbz	r3, 8009fd8 <_fstat_r+0x1c>
 8009fd6:	602b      	str	r3, [r5, #0]
 8009fd8:	bd38      	pop	{r3, r4, r5, pc}
 8009fda:	bf00      	nop
 8009fdc:	200007b8 	.word	0x200007b8

08009fe0 <_isatty_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4c06      	ldr	r4, [pc, #24]	; (8009ffc <_isatty_r+0x1c>)
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	4608      	mov	r0, r1
 8009fea:	6023      	str	r3, [r4, #0]
 8009fec:	f7f7 ffff 	bl	8001fee <_isatty>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d102      	bne.n	8009ffa <_isatty_r+0x1a>
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	b103      	cbz	r3, 8009ffa <_isatty_r+0x1a>
 8009ff8:	602b      	str	r3, [r5, #0]
 8009ffa:	bd38      	pop	{r3, r4, r5, pc}
 8009ffc:	200007b8 	.word	0x200007b8

0800a000 <_lseek_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4c07      	ldr	r4, [pc, #28]	; (800a020 <_lseek_r+0x20>)
 800a004:	4605      	mov	r5, r0
 800a006:	4608      	mov	r0, r1
 800a008:	4611      	mov	r1, r2
 800a00a:	2200      	movs	r2, #0
 800a00c:	6022      	str	r2, [r4, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	f7f7 fff8 	bl	8002004 <_lseek>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	d102      	bne.n	800a01e <_lseek_r+0x1e>
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	b103      	cbz	r3, 800a01e <_lseek_r+0x1e>
 800a01c:	602b      	str	r3, [r5, #0]
 800a01e:	bd38      	pop	{r3, r4, r5, pc}
 800a020:	200007b8 	.word	0x200007b8

0800a024 <__ascii_mbtowc>:
 800a024:	b082      	sub	sp, #8
 800a026:	b901      	cbnz	r1, 800a02a <__ascii_mbtowc+0x6>
 800a028:	a901      	add	r1, sp, #4
 800a02a:	b142      	cbz	r2, 800a03e <__ascii_mbtowc+0x1a>
 800a02c:	b14b      	cbz	r3, 800a042 <__ascii_mbtowc+0x1e>
 800a02e:	7813      	ldrb	r3, [r2, #0]
 800a030:	600b      	str	r3, [r1, #0]
 800a032:	7812      	ldrb	r2, [r2, #0]
 800a034:	1c10      	adds	r0, r2, #0
 800a036:	bf18      	it	ne
 800a038:	2001      	movne	r0, #1
 800a03a:	b002      	add	sp, #8
 800a03c:	4770      	bx	lr
 800a03e:	4610      	mov	r0, r2
 800a040:	e7fb      	b.n	800a03a <__ascii_mbtowc+0x16>
 800a042:	f06f 0001 	mvn.w	r0, #1
 800a046:	e7f8      	b.n	800a03a <__ascii_mbtowc+0x16>

0800a048 <_read_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4c07      	ldr	r4, [pc, #28]	; (800a068 <_read_r+0x20>)
 800a04c:	4605      	mov	r5, r0
 800a04e:	4608      	mov	r0, r1
 800a050:	4611      	mov	r1, r2
 800a052:	2200      	movs	r2, #0
 800a054:	6022      	str	r2, [r4, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	f7f7 ff90 	bl	8001f7c <_read>
 800a05c:	1c43      	adds	r3, r0, #1
 800a05e:	d102      	bne.n	800a066 <_read_r+0x1e>
 800a060:	6823      	ldr	r3, [r4, #0]
 800a062:	b103      	cbz	r3, 800a066 <_read_r+0x1e>
 800a064:	602b      	str	r3, [r5, #0]
 800a066:	bd38      	pop	{r3, r4, r5, pc}
 800a068:	200007b8 	.word	0x200007b8

0800a06c <__ascii_wctomb>:
 800a06c:	b149      	cbz	r1, 800a082 <__ascii_wctomb+0x16>
 800a06e:	2aff      	cmp	r2, #255	; 0xff
 800a070:	bf85      	ittet	hi
 800a072:	238a      	movhi	r3, #138	; 0x8a
 800a074:	6003      	strhi	r3, [r0, #0]
 800a076:	700a      	strbls	r2, [r1, #0]
 800a078:	f04f 30ff 	movhi.w	r0, #4294967295
 800a07c:	bf98      	it	ls
 800a07e:	2001      	movls	r0, #1
 800a080:	4770      	bx	lr
 800a082:	4608      	mov	r0, r1
 800a084:	4770      	bx	lr
	...

0800a088 <_init>:
 800a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08a:	bf00      	nop
 800a08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a08e:	bc08      	pop	{r3}
 800a090:	469e      	mov	lr, r3
 800a092:	4770      	bx	lr

0800a094 <_fini>:
 800a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a096:	bf00      	nop
 800a098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09a:	bc08      	pop	{r3}
 800a09c:	469e      	mov	lr, r3
 800a09e:	4770      	bx	lr
